target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_38 = local_unnamed_addr addrspace(1) constant [64 x i8] c"\00\00\00\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 128
@buffer_for_constant_34 = local_unnamed_addr addrspace(1) constant [64 x i8] zeroinitializer, align 128
@shared_cache = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache1 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache2 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache3 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache4 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache5 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache6 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache7 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache8 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache9 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache10 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache11 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache12 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache13 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache14 = private unnamed_addr addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache15 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache16 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache17 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache18 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache19 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache20 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache21 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache22 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache23 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache24 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache25 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache26 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache27 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache28 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache29 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache30 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache31 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache32 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache33 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache34 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache35 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache36 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache37 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache38 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache39 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache40 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache41 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache42 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache43 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache44 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache45 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache46 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache47 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache48 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache49 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache50 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache51 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache52 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache53 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache54 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache55 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache56 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache57 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache58 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache59 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache60 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache61 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache62 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache63 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache64 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache65 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache66 = private unnamed_addr addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache67 = private unnamed_addr addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache68 = private unnamed_addr addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache69 = private unnamed_addr addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache70 = private unnamed_addr addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache71 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache72 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache73 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache74 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache75 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache76 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache77 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache78 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache79 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache80 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache81 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache82 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache83 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache84 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache85 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache86 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache87 = private unnamed_addr addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache88 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache89 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache90 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache91 = private unnamed_addr addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef

; Function Attrs: nounwind
define void @fusion_650(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg13, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg17) local_unnamed_addr #0 {
entry:
  %arg171130 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg161128 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg151126 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg141124 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg131122 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg121120 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg111118 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg101116 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg91114 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg81112 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg71110 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg61108 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg51106 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg41104 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg31102 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg21100 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg11098 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01096 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !265
  switch i32 %0, label %common.ret [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
    i32 4, label %entry.reduce-group-4-true_crit_edge
    i32 5, label %entry.reduce-group-5-true_crit_edge
  ]

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre890 = shl nuw nsw i32 %.pre, 1
  %.pre892 = zext i32 %.pre890 to i64
  %.pre939 = and i32 %.pre, 31
  %Arg_5.6 = getelementptr float, ptr addrspace(1) %arg51106, i64 %.pre892
  %1 = load <2 x float>, ptr addrspace(1) %Arg_5.6, align 8, !invariant.load !267
  %Arg_5.62271556 = extractelement <2 x float> %1, i32 0
  %Arg_5.62351557 = extractelement <2 x float> %1, i32 1
  %Arg_4.5 = getelementptr float, ptr addrspace(1) %arg41104, i64 %.pre892
  %2 = load <2 x float>, ptr addrspace(1) %Arg_4.5, align 8, !invariant.load !267
  %Arg_4.52281572 = extractelement <2 x float> %2, i32 0
  %Arg_4.52371573 = extractelement <2 x float> %2, i32 1
  %multiply.34 = fmul float %Arg_5.62271556, %Arg_4.52281572
  %subtract.35 = fsub float 1.000000e+00, %Arg_4.52281572
  %multiply.36 = fmul float %multiply.34, %subtract.35
  %multiply.34238 = fmul float %Arg_5.62351557, %Arg_4.52371573
  %subtract.35242 = fsub float 1.000000e+00, %Arg_4.52371573
  %multiply.36243 = fmul float %multiply.34238, %subtract.35242
  %add.41.i779 = fadd float %multiply.36, %multiply.36243
  %Arg_5.6.11137 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 1024
  %3 = load <2 x float>, ptr addrspace(1) %Arg_5.6.11137, align 8, !invariant.load !267
  %Arg_5.6227.11558 = extractelement <2 x float> %3, i32 0
  %Arg_5.6235.11559 = extractelement <2 x float> %3, i32 1
  %Arg_4.5.11139 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 1024
  %4 = load <2 x float>, ptr addrspace(1) %Arg_4.5.11139, align 8, !invariant.load !267
  %Arg_4.5228.11574 = extractelement <2 x float> %4, i32 0
  %Arg_4.5237.11575 = extractelement <2 x float> %4, i32 1
  %multiply.34.1 = fmul float %Arg_5.6227.11558, %Arg_4.5228.11574
  %subtract.35.1 = fsub float 1.000000e+00, %Arg_4.5228.11574
  %multiply.36.1 = fmul float %multiply.34.1, %subtract.35.1
  %add.41.i778.1 = fadd float %add.41.i779, %multiply.36.1
  %multiply.34238.1 = fmul float %Arg_5.6235.11559, %Arg_4.5237.11575
  %subtract.35242.1 = fsub float 1.000000e+00, %Arg_4.5237.11575
  %multiply.36243.1 = fmul float %multiply.34238.1, %subtract.35242.1
  %add.41.i779.1 = fadd float %add.41.i778.1, %multiply.36243.1
  %Arg_5.6.21145 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 2048
  %5 = load <2 x float>, ptr addrspace(1) %Arg_5.6.21145, align 8, !invariant.load !267
  %Arg_5.6227.21560 = extractelement <2 x float> %5, i32 0
  %Arg_5.6235.21561 = extractelement <2 x float> %5, i32 1
  %Arg_4.5.21147 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 2048
  %6 = load <2 x float>, ptr addrspace(1) %Arg_4.5.21147, align 8, !invariant.load !267
  %Arg_4.5228.21576 = extractelement <2 x float> %6, i32 0
  %Arg_4.5237.21577 = extractelement <2 x float> %6, i32 1
  %multiply.34.2 = fmul float %Arg_5.6227.21560, %Arg_4.5228.21576
  %subtract.35.2 = fsub float 1.000000e+00, %Arg_4.5228.21576
  %multiply.36.2 = fmul float %multiply.34.2, %subtract.35.2
  %add.41.i778.2 = fadd float %add.41.i779.1, %multiply.36.2
  %multiply.34238.2 = fmul float %Arg_5.6235.21561, %Arg_4.5237.21577
  %subtract.35242.2 = fsub float 1.000000e+00, %Arg_4.5237.21577
  %multiply.36243.2 = fmul float %multiply.34238.2, %subtract.35242.2
  %add.41.i779.2 = fadd float %add.41.i778.2, %multiply.36243.2
  %Arg_5.6.31153 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 3072
  %7 = load <2 x float>, ptr addrspace(1) %Arg_5.6.31153, align 8, !invariant.load !267
  %Arg_5.6227.31562 = extractelement <2 x float> %7, i32 0
  %Arg_5.6235.31563 = extractelement <2 x float> %7, i32 1
  %Arg_4.5.31155 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 3072
  %8 = load <2 x float>, ptr addrspace(1) %Arg_4.5.31155, align 8, !invariant.load !267
  %Arg_4.5228.31578 = extractelement <2 x float> %8, i32 0
  %Arg_4.5237.31579 = extractelement <2 x float> %8, i32 1
  %multiply.34.3 = fmul float %Arg_5.6227.31562, %Arg_4.5228.31578
  %subtract.35.3 = fsub float 1.000000e+00, %Arg_4.5228.31578
  %multiply.36.3 = fmul float %multiply.34.3, %subtract.35.3
  %add.41.i778.3 = fadd float %add.41.i779.2, %multiply.36.3
  %multiply.34238.3 = fmul float %Arg_5.6235.31563, %Arg_4.5237.31579
  %subtract.35242.3 = fsub float 1.000000e+00, %Arg_4.5237.31579
  %multiply.36243.3 = fmul float %multiply.34238.3, %subtract.35242.3
  %add.41.i779.3 = fadd float %add.41.i778.3, %multiply.36243.3
  %Arg_5.6.41161 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 4096
  %9 = load <2 x float>, ptr addrspace(1) %Arg_5.6.41161, align 8, !invariant.load !267
  %Arg_5.6227.41564 = extractelement <2 x float> %9, i32 0
  %Arg_5.6235.41565 = extractelement <2 x float> %9, i32 1
  %Arg_4.5.41163 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 4096
  %10 = load <2 x float>, ptr addrspace(1) %Arg_4.5.41163, align 8, !invariant.load !267
  %Arg_4.5228.41580 = extractelement <2 x float> %10, i32 0
  %Arg_4.5237.41581 = extractelement <2 x float> %10, i32 1
  %multiply.34.4 = fmul float %Arg_5.6227.41564, %Arg_4.5228.41580
  %subtract.35.4 = fsub float 1.000000e+00, %Arg_4.5228.41580
  %multiply.36.4 = fmul float %multiply.34.4, %subtract.35.4
  %add.41.i778.4 = fadd float %add.41.i779.3, %multiply.36.4
  %multiply.34238.4 = fmul float %Arg_5.6235.41565, %Arg_4.5237.41581
  %subtract.35242.4 = fsub float 1.000000e+00, %Arg_4.5237.41581
  %multiply.36243.4 = fmul float %multiply.34238.4, %subtract.35242.4
  %add.41.i779.4 = fadd float %add.41.i778.4, %multiply.36243.4
  %Arg_5.6.51169 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 5120
  %11 = load <2 x float>, ptr addrspace(1) %Arg_5.6.51169, align 8, !invariant.load !267
  %Arg_5.6227.51566 = extractelement <2 x float> %11, i32 0
  %Arg_5.6235.51567 = extractelement <2 x float> %11, i32 1
  %Arg_4.5.51171 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 5120
  %12 = load <2 x float>, ptr addrspace(1) %Arg_4.5.51171, align 8, !invariant.load !267
  %Arg_4.5228.51582 = extractelement <2 x float> %12, i32 0
  %Arg_4.5237.51583 = extractelement <2 x float> %12, i32 1
  %multiply.34.5 = fmul float %Arg_5.6227.51566, %Arg_4.5228.51582
  %subtract.35.5 = fsub float 1.000000e+00, %Arg_4.5228.51582
  %multiply.36.5 = fmul float %multiply.34.5, %subtract.35.5
  %add.41.i778.5 = fadd float %add.41.i779.4, %multiply.36.5
  %multiply.34238.5 = fmul float %Arg_5.6235.51567, %Arg_4.5237.51583
  %subtract.35242.5 = fsub float 1.000000e+00, %Arg_4.5237.51583
  %multiply.36243.5 = fmul float %multiply.34238.5, %subtract.35242.5
  %add.41.i779.5 = fadd float %add.41.i778.5, %multiply.36243.5
  %Arg_5.6.61177 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 6144
  %13 = load <2 x float>, ptr addrspace(1) %Arg_5.6.61177, align 8, !invariant.load !267
  %Arg_5.6227.61568 = extractelement <2 x float> %13, i32 0
  %Arg_5.6235.61569 = extractelement <2 x float> %13, i32 1
  %Arg_4.5.61179 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 6144
  %14 = load <2 x float>, ptr addrspace(1) %Arg_4.5.61179, align 8, !invariant.load !267
  %Arg_4.5228.61584 = extractelement <2 x float> %14, i32 0
  %Arg_4.5237.61585 = extractelement <2 x float> %14, i32 1
  %multiply.34.6 = fmul float %Arg_5.6227.61568, %Arg_4.5228.61584
  %subtract.35.6 = fsub float 1.000000e+00, %Arg_4.5228.61584
  %multiply.36.6 = fmul float %multiply.34.6, %subtract.35.6
  %add.41.i778.6 = fadd float %add.41.i779.5, %multiply.36.6
  %multiply.34238.6 = fmul float %Arg_5.6235.61569, %Arg_4.5237.61585
  %subtract.35242.6 = fsub float 1.000000e+00, %Arg_4.5237.61585
  %multiply.36243.6 = fmul float %multiply.34238.6, %subtract.35242.6
  %add.41.i779.6 = fadd float %add.41.i778.6, %multiply.36243.6
  %Arg_5.6.71185 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 7168
  %15 = load <2 x float>, ptr addrspace(1) %Arg_5.6.71185, align 8, !invariant.load !267
  %Arg_5.6227.71570 = extractelement <2 x float> %15, i32 0
  %Arg_5.6235.71571 = extractelement <2 x float> %15, i32 1
  %Arg_4.5.71187 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 7168
  %16 = load <2 x float>, ptr addrspace(1) %Arg_4.5.71187, align 8, !invariant.load !267
  %Arg_4.5228.71586 = extractelement <2 x float> %16, i32 0
  %Arg_4.5237.71587 = extractelement <2 x float> %16, i32 1
  %multiply.34.7 = fmul float %Arg_5.6227.71570, %Arg_4.5228.71586
  %subtract.35.7 = fsub float 1.000000e+00, %Arg_4.5228.71586
  %multiply.36.7 = fmul float %multiply.34.7, %subtract.35.7
  %add.41.i778.7 = fadd float %add.41.i779.6, %multiply.36.7
  %multiply.34238.7 = fmul float %Arg_5.6235.71571, %Arg_4.5237.71587
  %subtract.35242.7 = fsub float 1.000000e+00, %Arg_4.5237.71587
  %multiply.36243.7 = fmul float %multiply.34238.7, %subtract.35242.7
  %add.41.i779.7 = fadd float %add.41.i778.7, %multiply.36243.7
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i779.7, i32 16, i32 31)
  %add.41.i = fadd float %add.41.i779.7, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i, i32 8, i32 31)
  %add.41.i774 = fadd float %add.41.i, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i774, i32 4, i32 31)
  %add.41.i775 = fadd float %add.41.i774, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i775, i32 2, i32 31)
  %add.41.i776 = fadd float %add.41.i775, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i776, i32 1, i32 31)
  %22 = icmp eq i32 %.pre939, 0
  %23 = lshr i32 %.pre, 5
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i64 0, i64 0, i64 0, i64 %24
  %add.41.i777 = fadd float %add.41.i776, %21
  br i1 %22, label %intra_warp_reduce_write-true295, label %intra_warp_reduce_write-after296

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %.pre940 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre942 = shl nuw nsw i32 %.pre940, 1
  %.pre944 = zext i32 %.pre942 to i64
  %.pre991 = and i32 %.pre940, 31
  %Arg_7.8 = getelementptr float, ptr addrspace(1) %arg71110, i64 %.pre944
  %26 = load <2 x float>, ptr addrspace(1) %Arg_7.8, align 8, !invariant.load !267
  %Arg_7.83461588 = extractelement <2 x float> %26, i32 0
  %Arg_7.83541589 = extractelement <2 x float> %26, i32 1
  %Arg_6.7 = getelementptr float, ptr addrspace(1) %arg61108, i64 %.pre944
  %27 = load <2 x float>, ptr addrspace(1) %Arg_6.7, align 8, !invariant.load !267
  %Arg_6.73471604 = extractelement <2 x float> %27, i32 0
  %Arg_6.73561605 = extractelement <2 x float> %27, i32 1
  %multiply.43 = fmul float %Arg_7.83461588, %Arg_6.73471604
  %subtract.44 = fsub float 1.000000e+00, %Arg_6.73471604
  %multiply.45 = fmul float %multiply.43, %subtract.44
  %multiply.43357 = fmul float %Arg_7.83541589, %Arg_6.73561605
  %subtract.44361 = fsub float 1.000000e+00, %Arg_6.73561605
  %multiply.45362 = fmul float %multiply.43357, %subtract.44361
  %add.50.i790 = fadd float %multiply.45, %multiply.45362
  %Arg_7.8.11197 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 1024
  %28 = load <2 x float>, ptr addrspace(1) %Arg_7.8.11197, align 8, !invariant.load !267
  %Arg_7.8346.11590 = extractelement <2 x float> %28, i32 0
  %Arg_7.8354.11591 = extractelement <2 x float> %28, i32 1
  %Arg_6.7.11199 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 1024
  %29 = load <2 x float>, ptr addrspace(1) %Arg_6.7.11199, align 8, !invariant.load !267
  %Arg_6.7347.11606 = extractelement <2 x float> %29, i32 0
  %Arg_6.7356.11607 = extractelement <2 x float> %29, i32 1
  %multiply.43.1 = fmul float %Arg_7.8346.11590, %Arg_6.7347.11606
  %subtract.44.1 = fsub float 1.000000e+00, %Arg_6.7347.11606
  %multiply.45.1 = fmul float %multiply.43.1, %subtract.44.1
  %add.50.i789.1 = fadd float %add.50.i790, %multiply.45.1
  %multiply.43357.1 = fmul float %Arg_7.8354.11591, %Arg_6.7356.11607
  %subtract.44361.1 = fsub float 1.000000e+00, %Arg_6.7356.11607
  %multiply.45362.1 = fmul float %multiply.43357.1, %subtract.44361.1
  %add.50.i790.1 = fadd float %add.50.i789.1, %multiply.45362.1
  %Arg_7.8.21205 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 2048
  %30 = load <2 x float>, ptr addrspace(1) %Arg_7.8.21205, align 8, !invariant.load !267
  %Arg_7.8346.21592 = extractelement <2 x float> %30, i32 0
  %Arg_7.8354.21593 = extractelement <2 x float> %30, i32 1
  %Arg_6.7.21207 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 2048
  %31 = load <2 x float>, ptr addrspace(1) %Arg_6.7.21207, align 8, !invariant.load !267
  %Arg_6.7347.21608 = extractelement <2 x float> %31, i32 0
  %Arg_6.7356.21609 = extractelement <2 x float> %31, i32 1
  %multiply.43.2 = fmul float %Arg_7.8346.21592, %Arg_6.7347.21608
  %subtract.44.2 = fsub float 1.000000e+00, %Arg_6.7347.21608
  %multiply.45.2 = fmul float %multiply.43.2, %subtract.44.2
  %add.50.i789.2 = fadd float %add.50.i790.1, %multiply.45.2
  %multiply.43357.2 = fmul float %Arg_7.8354.21593, %Arg_6.7356.21609
  %subtract.44361.2 = fsub float 1.000000e+00, %Arg_6.7356.21609
  %multiply.45362.2 = fmul float %multiply.43357.2, %subtract.44361.2
  %add.50.i790.2 = fadd float %add.50.i789.2, %multiply.45362.2
  %Arg_7.8.31213 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 3072
  %32 = load <2 x float>, ptr addrspace(1) %Arg_7.8.31213, align 8, !invariant.load !267
  %Arg_7.8346.31594 = extractelement <2 x float> %32, i32 0
  %Arg_7.8354.31595 = extractelement <2 x float> %32, i32 1
  %Arg_6.7.31215 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 3072
  %33 = load <2 x float>, ptr addrspace(1) %Arg_6.7.31215, align 8, !invariant.load !267
  %Arg_6.7347.31610 = extractelement <2 x float> %33, i32 0
  %Arg_6.7356.31611 = extractelement <2 x float> %33, i32 1
  %multiply.43.3 = fmul float %Arg_7.8346.31594, %Arg_6.7347.31610
  %subtract.44.3 = fsub float 1.000000e+00, %Arg_6.7347.31610
  %multiply.45.3 = fmul float %multiply.43.3, %subtract.44.3
  %add.50.i789.3 = fadd float %add.50.i790.2, %multiply.45.3
  %multiply.43357.3 = fmul float %Arg_7.8354.31595, %Arg_6.7356.31611
  %subtract.44361.3 = fsub float 1.000000e+00, %Arg_6.7356.31611
  %multiply.45362.3 = fmul float %multiply.43357.3, %subtract.44361.3
  %add.50.i790.3 = fadd float %add.50.i789.3, %multiply.45362.3
  %Arg_7.8.41221 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 4096
  %34 = load <2 x float>, ptr addrspace(1) %Arg_7.8.41221, align 8, !invariant.load !267
  %Arg_7.8346.41596 = extractelement <2 x float> %34, i32 0
  %Arg_7.8354.41597 = extractelement <2 x float> %34, i32 1
  %Arg_6.7.41223 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 4096
  %35 = load <2 x float>, ptr addrspace(1) %Arg_6.7.41223, align 8, !invariant.load !267
  %Arg_6.7347.41612 = extractelement <2 x float> %35, i32 0
  %Arg_6.7356.41613 = extractelement <2 x float> %35, i32 1
  %multiply.43.4 = fmul float %Arg_7.8346.41596, %Arg_6.7347.41612
  %subtract.44.4 = fsub float 1.000000e+00, %Arg_6.7347.41612
  %multiply.45.4 = fmul float %multiply.43.4, %subtract.44.4
  %add.50.i789.4 = fadd float %add.50.i790.3, %multiply.45.4
  %multiply.43357.4 = fmul float %Arg_7.8354.41597, %Arg_6.7356.41613
  %subtract.44361.4 = fsub float 1.000000e+00, %Arg_6.7356.41613
  %multiply.45362.4 = fmul float %multiply.43357.4, %subtract.44361.4
  %add.50.i790.4 = fadd float %add.50.i789.4, %multiply.45362.4
  %Arg_7.8.51229 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 5120
  %36 = load <2 x float>, ptr addrspace(1) %Arg_7.8.51229, align 8, !invariant.load !267
  %Arg_7.8346.51598 = extractelement <2 x float> %36, i32 0
  %Arg_7.8354.51599 = extractelement <2 x float> %36, i32 1
  %Arg_6.7.51231 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 5120
  %37 = load <2 x float>, ptr addrspace(1) %Arg_6.7.51231, align 8, !invariant.load !267
  %Arg_6.7347.51614 = extractelement <2 x float> %37, i32 0
  %Arg_6.7356.51615 = extractelement <2 x float> %37, i32 1
  %multiply.43.5 = fmul float %Arg_7.8346.51598, %Arg_6.7347.51614
  %subtract.44.5 = fsub float 1.000000e+00, %Arg_6.7347.51614
  %multiply.45.5 = fmul float %multiply.43.5, %subtract.44.5
  %add.50.i789.5 = fadd float %add.50.i790.4, %multiply.45.5
  %multiply.43357.5 = fmul float %Arg_7.8354.51599, %Arg_6.7356.51615
  %subtract.44361.5 = fsub float 1.000000e+00, %Arg_6.7356.51615
  %multiply.45362.5 = fmul float %multiply.43357.5, %subtract.44361.5
  %add.50.i790.5 = fadd float %add.50.i789.5, %multiply.45362.5
  %Arg_7.8.61237 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 6144
  %38 = load <2 x float>, ptr addrspace(1) %Arg_7.8.61237, align 8, !invariant.load !267
  %Arg_7.8346.61600 = extractelement <2 x float> %38, i32 0
  %Arg_7.8354.61601 = extractelement <2 x float> %38, i32 1
  %Arg_6.7.61239 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 6144
  %39 = load <2 x float>, ptr addrspace(1) %Arg_6.7.61239, align 8, !invariant.load !267
  %Arg_6.7347.61616 = extractelement <2 x float> %39, i32 0
  %Arg_6.7356.61617 = extractelement <2 x float> %39, i32 1
  %multiply.43.6 = fmul float %Arg_7.8346.61600, %Arg_6.7347.61616
  %subtract.44.6 = fsub float 1.000000e+00, %Arg_6.7347.61616
  %multiply.45.6 = fmul float %multiply.43.6, %subtract.44.6
  %add.50.i789.6 = fadd float %add.50.i790.5, %multiply.45.6
  %multiply.43357.6 = fmul float %Arg_7.8354.61601, %Arg_6.7356.61617
  %subtract.44361.6 = fsub float 1.000000e+00, %Arg_6.7356.61617
  %multiply.45362.6 = fmul float %multiply.43357.6, %subtract.44361.6
  %add.50.i790.6 = fadd float %add.50.i789.6, %multiply.45362.6
  %Arg_7.8.71245 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 7168
  %40 = load <2 x float>, ptr addrspace(1) %Arg_7.8.71245, align 8, !invariant.load !267
  %Arg_7.8346.71602 = extractelement <2 x float> %40, i32 0
  %Arg_7.8354.71603 = extractelement <2 x float> %40, i32 1
  %Arg_6.7.71247 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 7168
  %41 = load <2 x float>, ptr addrspace(1) %Arg_6.7.71247, align 8, !invariant.load !267
  %Arg_6.7347.71618 = extractelement <2 x float> %41, i32 0
  %Arg_6.7356.71619 = extractelement <2 x float> %41, i32 1
  %multiply.43.7 = fmul float %Arg_7.8346.71602, %Arg_6.7347.71618
  %subtract.44.7 = fsub float 1.000000e+00, %Arg_6.7347.71618
  %multiply.45.7 = fmul float %multiply.43.7, %subtract.44.7
  %add.50.i789.7 = fadd float %add.50.i790.6, %multiply.45.7
  %multiply.43357.7 = fmul float %Arg_7.8354.71603, %Arg_6.7356.71619
  %subtract.44361.7 = fsub float 1.000000e+00, %Arg_6.7356.71619
  %multiply.45362.7 = fmul float %multiply.43357.7, %subtract.44361.7
  %add.50.i790.7 = fadd float %add.50.i789.7, %multiply.45362.7
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i790.7, i32 16, i32 31)
  %add.50.i = fadd float %add.50.i790.7, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i, i32 8, i32 31)
  %add.50.i785 = fadd float %add.50.i, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i785, i32 4, i32 31)
  %add.50.i786 = fadd float %add.50.i785, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i786, i32 2, i32 31)
  %add.50.i787 = fadd float %add.50.i786, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i787, i32 1, i32 31)
  %47 = icmp eq i32 %.pre991, 0
  %48 = lshr i32 %.pre940, 5
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i64 0, i64 0, i64 0, i64 %49
  %add.50.i788 = fadd float %add.50.i787, %46
  br i1 %47, label %intra_warp_reduce_write-true414, label %intra_warp_reduce_write-after415

entry.reduce-group-4-true_crit_edge:              ; preds = %entry
  %.pre992 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre994 = shl nuw nsw i32 %.pre992, 1
  %.pre996 = zext i32 %.pre994 to i64
  %.pre1043 = and i32 %.pre992, 31
  %Arg_9.10 = getelementptr float, ptr addrspace(1) %arg91114, i64 %.pre996
  %51 = load <2 x float>, ptr addrspace(1) %Arg_9.10, align 8, !invariant.load !267
  %Arg_9.104651620 = extractelement <2 x float> %51, i32 0
  %Arg_9.104731621 = extractelement <2 x float> %51, i32 1
  %Arg_8.9 = getelementptr float, ptr addrspace(1) %arg81112, i64 %.pre996
  %52 = load <2 x float>, ptr addrspace(1) %Arg_8.9, align 8, !invariant.load !267
  %Arg_8.94661636 = extractelement <2 x float> %52, i32 0
  %Arg_8.94751637 = extractelement <2 x float> %52, i32 1
  %multiply.52 = fmul float %Arg_9.104651620, %Arg_8.94661636
  %subtract.53 = fsub float 1.000000e+00, %Arg_8.94661636
  %multiply.54 = fmul float %multiply.52, %subtract.53
  %multiply.52476 = fmul float %Arg_9.104731621, %Arg_8.94751637
  %subtract.53480 = fsub float 1.000000e+00, %Arg_8.94751637
  %multiply.54481 = fmul float %multiply.52476, %subtract.53480
  %add.59.i801 = fadd float %multiply.54, %multiply.54481
  %Arg_9.10.11257 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 1024
  %53 = load <2 x float>, ptr addrspace(1) %Arg_9.10.11257, align 8, !invariant.load !267
  %Arg_9.10465.11622 = extractelement <2 x float> %53, i32 0
  %Arg_9.10473.11623 = extractelement <2 x float> %53, i32 1
  %Arg_8.9.11259 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 1024
  %54 = load <2 x float>, ptr addrspace(1) %Arg_8.9.11259, align 8, !invariant.load !267
  %Arg_8.9466.11638 = extractelement <2 x float> %54, i32 0
  %Arg_8.9475.11639 = extractelement <2 x float> %54, i32 1
  %multiply.52.1 = fmul float %Arg_9.10465.11622, %Arg_8.9466.11638
  %subtract.53.1 = fsub float 1.000000e+00, %Arg_8.9466.11638
  %multiply.54.1 = fmul float %multiply.52.1, %subtract.53.1
  %add.59.i800.1 = fadd float %add.59.i801, %multiply.54.1
  %multiply.52476.1 = fmul float %Arg_9.10473.11623, %Arg_8.9475.11639
  %subtract.53480.1 = fsub float 1.000000e+00, %Arg_8.9475.11639
  %multiply.54481.1 = fmul float %multiply.52476.1, %subtract.53480.1
  %add.59.i801.1 = fadd float %add.59.i800.1, %multiply.54481.1
  %Arg_9.10.21265 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 2048
  %55 = load <2 x float>, ptr addrspace(1) %Arg_9.10.21265, align 8, !invariant.load !267
  %Arg_9.10465.21624 = extractelement <2 x float> %55, i32 0
  %Arg_9.10473.21625 = extractelement <2 x float> %55, i32 1
  %Arg_8.9.21267 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 2048
  %56 = load <2 x float>, ptr addrspace(1) %Arg_8.9.21267, align 8, !invariant.load !267
  %Arg_8.9466.21640 = extractelement <2 x float> %56, i32 0
  %Arg_8.9475.21641 = extractelement <2 x float> %56, i32 1
  %multiply.52.2 = fmul float %Arg_9.10465.21624, %Arg_8.9466.21640
  %subtract.53.2 = fsub float 1.000000e+00, %Arg_8.9466.21640
  %multiply.54.2 = fmul float %multiply.52.2, %subtract.53.2
  %add.59.i800.2 = fadd float %add.59.i801.1, %multiply.54.2
  %multiply.52476.2 = fmul float %Arg_9.10473.21625, %Arg_8.9475.21641
  %subtract.53480.2 = fsub float 1.000000e+00, %Arg_8.9475.21641
  %multiply.54481.2 = fmul float %multiply.52476.2, %subtract.53480.2
  %add.59.i801.2 = fadd float %add.59.i800.2, %multiply.54481.2
  %Arg_9.10.31273 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 3072
  %57 = load <2 x float>, ptr addrspace(1) %Arg_9.10.31273, align 8, !invariant.load !267
  %Arg_9.10465.31626 = extractelement <2 x float> %57, i32 0
  %Arg_9.10473.31627 = extractelement <2 x float> %57, i32 1
  %Arg_8.9.31275 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 3072
  %58 = load <2 x float>, ptr addrspace(1) %Arg_8.9.31275, align 8, !invariant.load !267
  %Arg_8.9466.31642 = extractelement <2 x float> %58, i32 0
  %Arg_8.9475.31643 = extractelement <2 x float> %58, i32 1
  %multiply.52.3 = fmul float %Arg_9.10465.31626, %Arg_8.9466.31642
  %subtract.53.3 = fsub float 1.000000e+00, %Arg_8.9466.31642
  %multiply.54.3 = fmul float %multiply.52.3, %subtract.53.3
  %add.59.i800.3 = fadd float %add.59.i801.2, %multiply.54.3
  %multiply.52476.3 = fmul float %Arg_9.10473.31627, %Arg_8.9475.31643
  %subtract.53480.3 = fsub float 1.000000e+00, %Arg_8.9475.31643
  %multiply.54481.3 = fmul float %multiply.52476.3, %subtract.53480.3
  %add.59.i801.3 = fadd float %add.59.i800.3, %multiply.54481.3
  %Arg_9.10.41281 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 4096
  %59 = load <2 x float>, ptr addrspace(1) %Arg_9.10.41281, align 8, !invariant.load !267
  %Arg_9.10465.41628 = extractelement <2 x float> %59, i32 0
  %Arg_9.10473.41629 = extractelement <2 x float> %59, i32 1
  %Arg_8.9.41283 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 4096
  %60 = load <2 x float>, ptr addrspace(1) %Arg_8.9.41283, align 8, !invariant.load !267
  %Arg_8.9466.41644 = extractelement <2 x float> %60, i32 0
  %Arg_8.9475.41645 = extractelement <2 x float> %60, i32 1
  %multiply.52.4 = fmul float %Arg_9.10465.41628, %Arg_8.9466.41644
  %subtract.53.4 = fsub float 1.000000e+00, %Arg_8.9466.41644
  %multiply.54.4 = fmul float %multiply.52.4, %subtract.53.4
  %add.59.i800.4 = fadd float %add.59.i801.3, %multiply.54.4
  %multiply.52476.4 = fmul float %Arg_9.10473.41629, %Arg_8.9475.41645
  %subtract.53480.4 = fsub float 1.000000e+00, %Arg_8.9475.41645
  %multiply.54481.4 = fmul float %multiply.52476.4, %subtract.53480.4
  %add.59.i801.4 = fadd float %add.59.i800.4, %multiply.54481.4
  %Arg_9.10.51289 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 5120
  %61 = load <2 x float>, ptr addrspace(1) %Arg_9.10.51289, align 8, !invariant.load !267
  %Arg_9.10465.51630 = extractelement <2 x float> %61, i32 0
  %Arg_9.10473.51631 = extractelement <2 x float> %61, i32 1
  %Arg_8.9.51291 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 5120
  %62 = load <2 x float>, ptr addrspace(1) %Arg_8.9.51291, align 8, !invariant.load !267
  %Arg_8.9466.51646 = extractelement <2 x float> %62, i32 0
  %Arg_8.9475.51647 = extractelement <2 x float> %62, i32 1
  %multiply.52.5 = fmul float %Arg_9.10465.51630, %Arg_8.9466.51646
  %subtract.53.5 = fsub float 1.000000e+00, %Arg_8.9466.51646
  %multiply.54.5 = fmul float %multiply.52.5, %subtract.53.5
  %add.59.i800.5 = fadd float %add.59.i801.4, %multiply.54.5
  %multiply.52476.5 = fmul float %Arg_9.10473.51631, %Arg_8.9475.51647
  %subtract.53480.5 = fsub float 1.000000e+00, %Arg_8.9475.51647
  %multiply.54481.5 = fmul float %multiply.52476.5, %subtract.53480.5
  %add.59.i801.5 = fadd float %add.59.i800.5, %multiply.54481.5
  %Arg_9.10.61297 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 6144
  %63 = load <2 x float>, ptr addrspace(1) %Arg_9.10.61297, align 8, !invariant.load !267
  %Arg_9.10465.61632 = extractelement <2 x float> %63, i32 0
  %Arg_9.10473.61633 = extractelement <2 x float> %63, i32 1
  %Arg_8.9.61299 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 6144
  %64 = load <2 x float>, ptr addrspace(1) %Arg_8.9.61299, align 8, !invariant.load !267
  %Arg_8.9466.61648 = extractelement <2 x float> %64, i32 0
  %Arg_8.9475.61649 = extractelement <2 x float> %64, i32 1
  %multiply.52.6 = fmul float %Arg_9.10465.61632, %Arg_8.9466.61648
  %subtract.53.6 = fsub float 1.000000e+00, %Arg_8.9466.61648
  %multiply.54.6 = fmul float %multiply.52.6, %subtract.53.6
  %add.59.i800.6 = fadd float %add.59.i801.5, %multiply.54.6
  %multiply.52476.6 = fmul float %Arg_9.10473.61633, %Arg_8.9475.61649
  %subtract.53480.6 = fsub float 1.000000e+00, %Arg_8.9475.61649
  %multiply.54481.6 = fmul float %multiply.52476.6, %subtract.53480.6
  %add.59.i801.6 = fadd float %add.59.i800.6, %multiply.54481.6
  %Arg_9.10.71305 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 7168
  %65 = load <2 x float>, ptr addrspace(1) %Arg_9.10.71305, align 8, !invariant.load !267
  %Arg_9.10465.71634 = extractelement <2 x float> %65, i32 0
  %Arg_9.10473.71635 = extractelement <2 x float> %65, i32 1
  %Arg_8.9.71307 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 7168
  %66 = load <2 x float>, ptr addrspace(1) %Arg_8.9.71307, align 8, !invariant.load !267
  %Arg_8.9466.71650 = extractelement <2 x float> %66, i32 0
  %Arg_8.9475.71651 = extractelement <2 x float> %66, i32 1
  %multiply.52.7 = fmul float %Arg_9.10465.71634, %Arg_8.9466.71650
  %subtract.53.7 = fsub float 1.000000e+00, %Arg_8.9466.71650
  %multiply.54.7 = fmul float %multiply.52.7, %subtract.53.7
  %add.59.i800.7 = fadd float %add.59.i801.6, %multiply.54.7
  %multiply.52476.7 = fmul float %Arg_9.10473.71635, %Arg_8.9475.71651
  %subtract.53480.7 = fsub float 1.000000e+00, %Arg_8.9475.71651
  %multiply.54481.7 = fmul float %multiply.52476.7, %subtract.53480.7
  %add.59.i801.7 = fadd float %add.59.i800.7, %multiply.54481.7
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i801.7, i32 16, i32 31)
  %add.59.i = fadd float %add.59.i801.7, %67
  %68 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i, i32 8, i32 31)
  %add.59.i796 = fadd float %add.59.i, %68
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i796, i32 4, i32 31)
  %add.59.i797 = fadd float %add.59.i796, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i797, i32 2, i32 31)
  %add.59.i798 = fadd float %add.59.i797, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i798, i32 1, i32 31)
  %72 = icmp eq i32 %.pre1043, 0
  %73 = lshr i32 %.pre992, 5
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i64 0, i64 0, i64 0, i64 %74
  %add.59.i799 = fadd float %add.59.i798, %71
  br i1 %72, label %intra_warp_reduce_write-true533, label %intra_warp_reduce_write-after534

entry.reduce-group-5-true_crit_edge:              ; preds = %entry
  %.pre1044 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1046 = shl nuw nsw i32 %.pre1044, 1
  %.pre1048 = zext i32 %.pre1046 to i64
  %.pre1095 = and i32 %.pre1044, 31
  %Arg_11.12 = getelementptr float, ptr addrspace(1) %arg111118, i64 %.pre1048
  %76 = load <2 x float>, ptr addrspace(1) %Arg_11.12, align 8, !invariant.load !267
  %Arg_11.125841652 = extractelement <2 x float> %76, i32 0
  %Arg_11.125921653 = extractelement <2 x float> %76, i32 1
  %Arg_10.11 = getelementptr float, ptr addrspace(1) %arg101116, i64 %.pre1048
  %77 = load <2 x float>, ptr addrspace(1) %Arg_10.11, align 8, !invariant.load !267
  %Arg_10.115851668 = extractelement <2 x float> %77, i32 0
  %Arg_10.115941669 = extractelement <2 x float> %77, i32 1
  %multiply.61 = fmul float %Arg_11.125841652, %Arg_10.115851668
  %subtract.62 = fsub float 1.000000e+00, %Arg_10.115851668
  %multiply.63 = fmul float %multiply.61, %subtract.62
  %multiply.61595 = fmul float %Arg_11.125921653, %Arg_10.115941669
  %subtract.62599 = fsub float 1.000000e+00, %Arg_10.115941669
  %multiply.63600 = fmul float %multiply.61595, %subtract.62599
  %add.68.i812 = fadd float %multiply.63, %multiply.63600
  %Arg_11.12.11317 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 1024
  %78 = load <2 x float>, ptr addrspace(1) %Arg_11.12.11317, align 8, !invariant.load !267
  %Arg_11.12584.11654 = extractelement <2 x float> %78, i32 0
  %Arg_11.12592.11655 = extractelement <2 x float> %78, i32 1
  %Arg_10.11.11319 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 1024
  %79 = load <2 x float>, ptr addrspace(1) %Arg_10.11.11319, align 8, !invariant.load !267
  %Arg_10.11585.11670 = extractelement <2 x float> %79, i32 0
  %Arg_10.11594.11671 = extractelement <2 x float> %79, i32 1
  %multiply.61.1 = fmul float %Arg_11.12584.11654, %Arg_10.11585.11670
  %subtract.62.1 = fsub float 1.000000e+00, %Arg_10.11585.11670
  %multiply.63.1 = fmul float %multiply.61.1, %subtract.62.1
  %add.68.i811.1 = fadd float %add.68.i812, %multiply.63.1
  %multiply.61595.1 = fmul float %Arg_11.12592.11655, %Arg_10.11594.11671
  %subtract.62599.1 = fsub float 1.000000e+00, %Arg_10.11594.11671
  %multiply.63600.1 = fmul float %multiply.61595.1, %subtract.62599.1
  %add.68.i812.1 = fadd float %add.68.i811.1, %multiply.63600.1
  %Arg_11.12.21325 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 2048
  %80 = load <2 x float>, ptr addrspace(1) %Arg_11.12.21325, align 8, !invariant.load !267
  %Arg_11.12584.21656 = extractelement <2 x float> %80, i32 0
  %Arg_11.12592.21657 = extractelement <2 x float> %80, i32 1
  %Arg_10.11.21327 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 2048
  %81 = load <2 x float>, ptr addrspace(1) %Arg_10.11.21327, align 8, !invariant.load !267
  %Arg_10.11585.21672 = extractelement <2 x float> %81, i32 0
  %Arg_10.11594.21673 = extractelement <2 x float> %81, i32 1
  %multiply.61.2 = fmul float %Arg_11.12584.21656, %Arg_10.11585.21672
  %subtract.62.2 = fsub float 1.000000e+00, %Arg_10.11585.21672
  %multiply.63.2 = fmul float %multiply.61.2, %subtract.62.2
  %add.68.i811.2 = fadd float %add.68.i812.1, %multiply.63.2
  %multiply.61595.2 = fmul float %Arg_11.12592.21657, %Arg_10.11594.21673
  %subtract.62599.2 = fsub float 1.000000e+00, %Arg_10.11594.21673
  %multiply.63600.2 = fmul float %multiply.61595.2, %subtract.62599.2
  %add.68.i812.2 = fadd float %add.68.i811.2, %multiply.63600.2
  %Arg_11.12.31333 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 3072
  %82 = load <2 x float>, ptr addrspace(1) %Arg_11.12.31333, align 8, !invariant.load !267
  %Arg_11.12584.31658 = extractelement <2 x float> %82, i32 0
  %Arg_11.12592.31659 = extractelement <2 x float> %82, i32 1
  %Arg_10.11.31335 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 3072
  %83 = load <2 x float>, ptr addrspace(1) %Arg_10.11.31335, align 8, !invariant.load !267
  %Arg_10.11585.31674 = extractelement <2 x float> %83, i32 0
  %Arg_10.11594.31675 = extractelement <2 x float> %83, i32 1
  %multiply.61.3 = fmul float %Arg_11.12584.31658, %Arg_10.11585.31674
  %subtract.62.3 = fsub float 1.000000e+00, %Arg_10.11585.31674
  %multiply.63.3 = fmul float %multiply.61.3, %subtract.62.3
  %add.68.i811.3 = fadd float %add.68.i812.2, %multiply.63.3
  %multiply.61595.3 = fmul float %Arg_11.12592.31659, %Arg_10.11594.31675
  %subtract.62599.3 = fsub float 1.000000e+00, %Arg_10.11594.31675
  %multiply.63600.3 = fmul float %multiply.61595.3, %subtract.62599.3
  %add.68.i812.3 = fadd float %add.68.i811.3, %multiply.63600.3
  %Arg_11.12.41341 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 4096
  %84 = load <2 x float>, ptr addrspace(1) %Arg_11.12.41341, align 8, !invariant.load !267
  %Arg_11.12584.41660 = extractelement <2 x float> %84, i32 0
  %Arg_11.12592.41661 = extractelement <2 x float> %84, i32 1
  %Arg_10.11.41343 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 4096
  %85 = load <2 x float>, ptr addrspace(1) %Arg_10.11.41343, align 8, !invariant.load !267
  %Arg_10.11585.41676 = extractelement <2 x float> %85, i32 0
  %Arg_10.11594.41677 = extractelement <2 x float> %85, i32 1
  %multiply.61.4 = fmul float %Arg_11.12584.41660, %Arg_10.11585.41676
  %subtract.62.4 = fsub float 1.000000e+00, %Arg_10.11585.41676
  %multiply.63.4 = fmul float %multiply.61.4, %subtract.62.4
  %add.68.i811.4 = fadd float %add.68.i812.3, %multiply.63.4
  %multiply.61595.4 = fmul float %Arg_11.12592.41661, %Arg_10.11594.41677
  %subtract.62599.4 = fsub float 1.000000e+00, %Arg_10.11594.41677
  %multiply.63600.4 = fmul float %multiply.61595.4, %subtract.62599.4
  %add.68.i812.4 = fadd float %add.68.i811.4, %multiply.63600.4
  %Arg_11.12.51349 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 5120
  %86 = load <2 x float>, ptr addrspace(1) %Arg_11.12.51349, align 8, !invariant.load !267
  %Arg_11.12584.51662 = extractelement <2 x float> %86, i32 0
  %Arg_11.12592.51663 = extractelement <2 x float> %86, i32 1
  %Arg_10.11.51351 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 5120
  %87 = load <2 x float>, ptr addrspace(1) %Arg_10.11.51351, align 8, !invariant.load !267
  %Arg_10.11585.51678 = extractelement <2 x float> %87, i32 0
  %Arg_10.11594.51679 = extractelement <2 x float> %87, i32 1
  %multiply.61.5 = fmul float %Arg_11.12584.51662, %Arg_10.11585.51678
  %subtract.62.5 = fsub float 1.000000e+00, %Arg_10.11585.51678
  %multiply.63.5 = fmul float %multiply.61.5, %subtract.62.5
  %add.68.i811.5 = fadd float %add.68.i812.4, %multiply.63.5
  %multiply.61595.5 = fmul float %Arg_11.12592.51663, %Arg_10.11594.51679
  %subtract.62599.5 = fsub float 1.000000e+00, %Arg_10.11594.51679
  %multiply.63600.5 = fmul float %multiply.61595.5, %subtract.62599.5
  %add.68.i812.5 = fadd float %add.68.i811.5, %multiply.63600.5
  %Arg_11.12.61357 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 6144
  %88 = load <2 x float>, ptr addrspace(1) %Arg_11.12.61357, align 8, !invariant.load !267
  %Arg_11.12584.61664 = extractelement <2 x float> %88, i32 0
  %Arg_11.12592.61665 = extractelement <2 x float> %88, i32 1
  %Arg_10.11.61359 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 6144
  %89 = load <2 x float>, ptr addrspace(1) %Arg_10.11.61359, align 8, !invariant.load !267
  %Arg_10.11585.61680 = extractelement <2 x float> %89, i32 0
  %Arg_10.11594.61681 = extractelement <2 x float> %89, i32 1
  %multiply.61.6 = fmul float %Arg_11.12584.61664, %Arg_10.11585.61680
  %subtract.62.6 = fsub float 1.000000e+00, %Arg_10.11585.61680
  %multiply.63.6 = fmul float %multiply.61.6, %subtract.62.6
  %add.68.i811.6 = fadd float %add.68.i812.5, %multiply.63.6
  %multiply.61595.6 = fmul float %Arg_11.12592.61665, %Arg_10.11594.61681
  %subtract.62599.6 = fsub float 1.000000e+00, %Arg_10.11594.61681
  %multiply.63600.6 = fmul float %multiply.61595.6, %subtract.62599.6
  %add.68.i812.6 = fadd float %add.68.i811.6, %multiply.63600.6
  %Arg_11.12.71365 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 7168
  %90 = load <2 x float>, ptr addrspace(1) %Arg_11.12.71365, align 8, !invariant.load !267
  %Arg_11.12584.71666 = extractelement <2 x float> %90, i32 0
  %Arg_11.12592.71667 = extractelement <2 x float> %90, i32 1
  %Arg_10.11.71367 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 7168
  %91 = load <2 x float>, ptr addrspace(1) %Arg_10.11.71367, align 8, !invariant.load !267
  %Arg_10.11585.71682 = extractelement <2 x float> %91, i32 0
  %Arg_10.11594.71683 = extractelement <2 x float> %91, i32 1
  %multiply.61.7 = fmul float %Arg_11.12584.71666, %Arg_10.11585.71682
  %subtract.62.7 = fsub float 1.000000e+00, %Arg_10.11585.71682
  %multiply.63.7 = fmul float %multiply.61.7, %subtract.62.7
  %add.68.i811.7 = fadd float %add.68.i812.6, %multiply.63.7
  %multiply.61595.7 = fmul float %Arg_11.12592.71667, %Arg_10.11594.71683
  %subtract.62599.7 = fsub float 1.000000e+00, %Arg_10.11594.71683
  %multiply.63600.7 = fmul float %multiply.61595.7, %subtract.62599.7
  %add.68.i812.7 = fadd float %add.68.i811.7, %multiply.63600.7
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i812.7, i32 16, i32 31)
  %add.68.i = fadd float %add.68.i812.7, %92
  %93 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i, i32 8, i32 31)
  %add.68.i807 = fadd float %add.68.i, %93
  %94 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i807, i32 4, i32 31)
  %add.68.i808 = fadd float %add.68.i807, %94
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i808, i32 2, i32 31)
  %add.68.i809 = fadd float %add.68.i808, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i809, i32 1, i32 31)
  %97 = icmp eq i32 %.pre1095, 0
  %98 = lshr i32 %.pre1044, 5
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i64 0, i64 0, i64 0, i64 %99
  %add.68.i810 = fadd float %add.68.i809, %96
  br i1 %97, label %intra_warp_reduce_write-true652, label %intra_warp_reduce_write-after653

common.ret:                                       ; preds = %intra_warp_reduce_write-after534, %reduction_write_output-true553, %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after415, %reduction_write_output-true434, %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after296, %reduction_write_output-true315, %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after177, %reduction_write_output-true196, %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after, %reduction_write_output-true, %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont, %reduction_write_output-true672, %intra_warp_reduce_write-after653, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %101 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %102 = shl nuw nsw i32 %101, 1
  %103 = zext i32 %102 to i64
  %Arg_1.2 = getelementptr float, ptr addrspace(1) %arg11098, i64 %103
  %104 = load <2 x float>, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %Arg_1.231492 = extractelement <2 x float> %104, i32 0
  %Arg_1.291493 = extractelement <2 x float> %104, i32 1
  %Arg_0.1 = getelementptr float, ptr addrspace(1) %arg01096, i64 %103
  %105 = load <2 x float>, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %Arg_0.141508 = extractelement <2 x float> %105, i32 0
  %Arg_0.1111509 = extractelement <2 x float> %105, i32 1
  %multiply.13 = fmul float %Arg_1.231492, %Arg_0.141508
  %subtract.16 = fsub float 1.000000e+00, %Arg_0.141508
  %multiply.17 = fmul float %multiply.13, %subtract.16
  %multiply.1312 = fmul float %Arg_1.291493, %Arg_0.1111509
  %subtract.1616 = fsub float 1.000000e+00, %Arg_0.1111509
  %multiply.1717 = fmul float %multiply.1312, %subtract.1616
  %add.23.i757 = fadd float %multiply.17, %multiply.1717
  %Arg_1.2.11377 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 1024
  %106 = load <2 x float>, ptr addrspace(1) %Arg_1.2.11377, align 8, !invariant.load !267
  %Arg_1.23.11494 = extractelement <2 x float> %106, i32 0
  %Arg_1.29.11495 = extractelement <2 x float> %106, i32 1
  %Arg_0.1.11379 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 1024
  %107 = load <2 x float>, ptr addrspace(1) %Arg_0.1.11379, align 8, !invariant.load !267
  %Arg_0.14.11510 = extractelement <2 x float> %107, i32 0
  %Arg_0.111.11511 = extractelement <2 x float> %107, i32 1
  %multiply.13.1 = fmul float %Arg_1.23.11494, %Arg_0.14.11510
  %subtract.16.1 = fsub float 1.000000e+00, %Arg_0.14.11510
  %multiply.17.1 = fmul float %multiply.13.1, %subtract.16.1
  %add.23.i756.1 = fadd float %add.23.i757, %multiply.17.1
  %multiply.1312.1 = fmul float %Arg_1.29.11495, %Arg_0.111.11511
  %subtract.1616.1 = fsub float 1.000000e+00, %Arg_0.111.11511
  %multiply.1717.1 = fmul float %multiply.1312.1, %subtract.1616.1
  %add.23.i757.1 = fadd float %add.23.i756.1, %multiply.1717.1
  %Arg_1.2.21385 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 2048
  %108 = load <2 x float>, ptr addrspace(1) %Arg_1.2.21385, align 8, !invariant.load !267
  %Arg_1.23.21496 = extractelement <2 x float> %108, i32 0
  %Arg_1.29.21497 = extractelement <2 x float> %108, i32 1
  %Arg_0.1.21387 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 2048
  %109 = load <2 x float>, ptr addrspace(1) %Arg_0.1.21387, align 8, !invariant.load !267
  %Arg_0.14.21512 = extractelement <2 x float> %109, i32 0
  %Arg_0.111.21513 = extractelement <2 x float> %109, i32 1
  %multiply.13.2 = fmul float %Arg_1.23.21496, %Arg_0.14.21512
  %subtract.16.2 = fsub float 1.000000e+00, %Arg_0.14.21512
  %multiply.17.2 = fmul float %multiply.13.2, %subtract.16.2
  %add.23.i756.2 = fadd float %add.23.i757.1, %multiply.17.2
  %multiply.1312.2 = fmul float %Arg_1.29.21497, %Arg_0.111.21513
  %subtract.1616.2 = fsub float 1.000000e+00, %Arg_0.111.21513
  %multiply.1717.2 = fmul float %multiply.1312.2, %subtract.1616.2
  %add.23.i757.2 = fadd float %add.23.i756.2, %multiply.1717.2
  %Arg_1.2.31393 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 3072
  %110 = load <2 x float>, ptr addrspace(1) %Arg_1.2.31393, align 8, !invariant.load !267
  %Arg_1.23.31498 = extractelement <2 x float> %110, i32 0
  %Arg_1.29.31499 = extractelement <2 x float> %110, i32 1
  %Arg_0.1.31395 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 3072
  %111 = load <2 x float>, ptr addrspace(1) %Arg_0.1.31395, align 8, !invariant.load !267
  %Arg_0.14.31514 = extractelement <2 x float> %111, i32 0
  %Arg_0.111.31515 = extractelement <2 x float> %111, i32 1
  %multiply.13.3 = fmul float %Arg_1.23.31498, %Arg_0.14.31514
  %subtract.16.3 = fsub float 1.000000e+00, %Arg_0.14.31514
  %multiply.17.3 = fmul float %multiply.13.3, %subtract.16.3
  %add.23.i756.3 = fadd float %add.23.i757.2, %multiply.17.3
  %multiply.1312.3 = fmul float %Arg_1.29.31499, %Arg_0.111.31515
  %subtract.1616.3 = fsub float 1.000000e+00, %Arg_0.111.31515
  %multiply.1717.3 = fmul float %multiply.1312.3, %subtract.1616.3
  %add.23.i757.3 = fadd float %add.23.i756.3, %multiply.1717.3
  %Arg_1.2.41401 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 4096
  %112 = load <2 x float>, ptr addrspace(1) %Arg_1.2.41401, align 8, !invariant.load !267
  %Arg_1.23.41500 = extractelement <2 x float> %112, i32 0
  %Arg_1.29.41501 = extractelement <2 x float> %112, i32 1
  %Arg_0.1.41403 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 4096
  %113 = load <2 x float>, ptr addrspace(1) %Arg_0.1.41403, align 8, !invariant.load !267
  %Arg_0.14.41516 = extractelement <2 x float> %113, i32 0
  %Arg_0.111.41517 = extractelement <2 x float> %113, i32 1
  %multiply.13.4 = fmul float %Arg_1.23.41500, %Arg_0.14.41516
  %subtract.16.4 = fsub float 1.000000e+00, %Arg_0.14.41516
  %multiply.17.4 = fmul float %multiply.13.4, %subtract.16.4
  %add.23.i756.4 = fadd float %add.23.i757.3, %multiply.17.4
  %multiply.1312.4 = fmul float %Arg_1.29.41501, %Arg_0.111.41517
  %subtract.1616.4 = fsub float 1.000000e+00, %Arg_0.111.41517
  %multiply.1717.4 = fmul float %multiply.1312.4, %subtract.1616.4
  %add.23.i757.4 = fadd float %add.23.i756.4, %multiply.1717.4
  %Arg_1.2.51409 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 5120
  %114 = load <2 x float>, ptr addrspace(1) %Arg_1.2.51409, align 8, !invariant.load !267
  %Arg_1.23.51502 = extractelement <2 x float> %114, i32 0
  %Arg_1.29.51503 = extractelement <2 x float> %114, i32 1
  %Arg_0.1.51411 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 5120
  %115 = load <2 x float>, ptr addrspace(1) %Arg_0.1.51411, align 8, !invariant.load !267
  %Arg_0.14.51518 = extractelement <2 x float> %115, i32 0
  %Arg_0.111.51519 = extractelement <2 x float> %115, i32 1
  %multiply.13.5 = fmul float %Arg_1.23.51502, %Arg_0.14.51518
  %subtract.16.5 = fsub float 1.000000e+00, %Arg_0.14.51518
  %multiply.17.5 = fmul float %multiply.13.5, %subtract.16.5
  %add.23.i756.5 = fadd float %add.23.i757.4, %multiply.17.5
  %multiply.1312.5 = fmul float %Arg_1.29.51503, %Arg_0.111.51519
  %subtract.1616.5 = fsub float 1.000000e+00, %Arg_0.111.51519
  %multiply.1717.5 = fmul float %multiply.1312.5, %subtract.1616.5
  %add.23.i757.5 = fadd float %add.23.i756.5, %multiply.1717.5
  %Arg_1.2.61417 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 6144
  %116 = load <2 x float>, ptr addrspace(1) %Arg_1.2.61417, align 8, !invariant.load !267
  %Arg_1.23.61504 = extractelement <2 x float> %116, i32 0
  %Arg_1.29.61505 = extractelement <2 x float> %116, i32 1
  %Arg_0.1.61419 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 6144
  %117 = load <2 x float>, ptr addrspace(1) %Arg_0.1.61419, align 8, !invariant.load !267
  %Arg_0.14.61520 = extractelement <2 x float> %117, i32 0
  %Arg_0.111.61521 = extractelement <2 x float> %117, i32 1
  %multiply.13.6 = fmul float %Arg_1.23.61504, %Arg_0.14.61520
  %subtract.16.6 = fsub float 1.000000e+00, %Arg_0.14.61520
  %multiply.17.6 = fmul float %multiply.13.6, %subtract.16.6
  %add.23.i756.6 = fadd float %add.23.i757.5, %multiply.17.6
  %multiply.1312.6 = fmul float %Arg_1.29.61505, %Arg_0.111.61521
  %subtract.1616.6 = fsub float 1.000000e+00, %Arg_0.111.61521
  %multiply.1717.6 = fmul float %multiply.1312.6, %subtract.1616.6
  %add.23.i757.6 = fadd float %add.23.i756.6, %multiply.1717.6
  %Arg_1.2.71425 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 7168
  %118 = load <2 x float>, ptr addrspace(1) %Arg_1.2.71425, align 8, !invariant.load !267
  %Arg_1.23.71506 = extractelement <2 x float> %118, i32 0
  %Arg_1.29.71507 = extractelement <2 x float> %118, i32 1
  %Arg_0.1.71427 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 7168
  %119 = load <2 x float>, ptr addrspace(1) %Arg_0.1.71427, align 8, !invariant.load !267
  %Arg_0.14.71522 = extractelement <2 x float> %119, i32 0
  %Arg_0.111.71523 = extractelement <2 x float> %119, i32 1
  %multiply.13.7 = fmul float %Arg_1.23.71506, %Arg_0.14.71522
  %subtract.16.7 = fsub float 1.000000e+00, %Arg_0.14.71522
  %multiply.17.7 = fmul float %multiply.13.7, %subtract.16.7
  %add.23.i756.7 = fadd float %add.23.i757.6, %multiply.17.7
  %multiply.1312.7 = fmul float %Arg_1.29.71507, %Arg_0.111.71523
  %subtract.1616.7 = fsub float 1.000000e+00, %Arg_0.111.71523
  %multiply.1717.7 = fmul float %multiply.1312.7, %subtract.1616.7
  %add.23.i757.7 = fadd float %add.23.i756.7, %multiply.1717.7
  %lane_id = and i32 %101, 31
  %120 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i757.7, i32 16, i32 31)
  %add.23.i = fadd float %add.23.i757.7, %120
  %121 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i, i32 8, i32 31)
  %add.23.i752 = fadd float %add.23.i, %121
  %122 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i752, i32 4, i32 31)
  %add.23.i753 = fadd float %add.23.i752, %122
  %123 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i753, i32 2, i32 31)
  %add.23.i754 = fadd float %add.23.i753, %123
  %124 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i754, i32 1, i32 31)
  %125 = icmp eq i32 %lane_id, 0
  %126 = lshr i32 %101, 5
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i64 0, i64 0, i64 0, i64 %127
  %add.23.i755 = fadd float %add.23.i754, %124
  br i1 %125, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %reduce-group-0-true
  tail call void @llvm.nvvm.barrier0()
  %129 = icmp ult i32 %101, 32
  br i1 %129, label %inter_warp_reduce-true, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %reduce-group-0-true
  store float %add.23.i755, ptr addrspace(3) %128, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %130 = zext i32 %lane_id to i64
  %131 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i64 0, i64 0, i64 0, i64 %130
  %132 = icmp ult i32 %101, 16
  br i1 %132, label %inter_warp_reduce-true.then827, label %inter_warp_reduce-true.cont826

inter_warp_reduce-true.then827:                   ; preds = %inter_warp_reduce-true
  %partial_reduction_result66.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont826

inter_warp_reduce-true.cont826:                   ; preds = %inter_warp_reduce-true, %inter_warp_reduce-true.then827
  %partial_reduction_result66 = phi float [ %partial_reduction_result66.then.val, %inter_warp_reduce-true.then827 ], [ -0.000000e+00, %inter_warp_reduce-true ]
  %133 = icmp ult i32 %101, 16
  %134 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  br i1 %133, label %inter_warp_reduce-true.then, label %inter_warp_reduce-true.cont

inter_warp_reduce-true.then:                      ; preds = %inter_warp_reduce-true.cont826
  %.val684.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont

inter_warp_reduce-true.cont:                      ; preds = %inter_warp_reduce-true.cont826, %inter_warp_reduce-true.then
  %.val684 = phi float [ %.val684.then.val, %inter_warp_reduce-true.then ], [ -0.000000e+00, %inter_warp_reduce-true.cont826 ]
  %135 = icmp ult i32 %101, 16
  %add.23.i758 = fadd float %134, %.val684
  br i1 %135, label %inter_warp_reduce-true.cont.then825, label %inter_warp_reduce-true.cont.cont824

inter_warp_reduce-true.cont.then825:              ; preds = %inter_warp_reduce-true.cont
  store float %add.23.i758, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont824

inter_warp_reduce-true.cont.cont824:              ; preds = %inter_warp_reduce-true.cont, %inter_warp_reduce-true.cont.then825
  %initial_value_addr.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true.cont.then825 ], [ %add.23.i758, %inter_warp_reduce-true.cont ]
  %136 = icmp ult i32 %101, 16
  %137 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i758, i32 8, i32 31)
  br i1 %136, label %inter_warp_reduce-true.cont.then, label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.then:                 ; preds = %inter_warp_reduce-true.cont.cont824
  %.val683.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.cont:                 ; preds = %inter_warp_reduce-true.cont.cont824, %inter_warp_reduce-true.cont.then
  %.val683 = phi float [ %.val683.then.val, %inter_warp_reduce-true.cont.then ], [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont824 ]
  %138 = icmp ult i32 %101, 16
  %add.23.i759 = fadd float %137, %.val683
  br i1 %138, label %inter_warp_reduce-true.cont.cont.then823, label %inter_warp_reduce-true.cont.cont.cont822

inter_warp_reduce-true.cont.cont.then823:         ; preds = %inter_warp_reduce-true.cont.cont
  store float %add.23.i759, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont822

inter_warp_reduce-true.cont.cont.cont822:         ; preds = %inter_warp_reduce-true.cont.cont, %inter_warp_reduce-true.cont.cont.then823
  %initial_value_addr.1 = phi float [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont.then823 ], [ %add.23.i759, %inter_warp_reduce-true.cont.cont ]
  %139 = icmp ult i32 %101, 16
  %140 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i759, i32 4, i32 31)
  br i1 %139, label %inter_warp_reduce-true.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.then:            ; preds = %inter_warp_reduce-true.cont.cont.cont822
  %.val682.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont:            ; preds = %inter_warp_reduce-true.cont.cont.cont822, %inter_warp_reduce-true.cont.cont.then
  %.val682 = phi float [ %.val682.then.val, %inter_warp_reduce-true.cont.cont.then ], [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont822 ]
  %141 = icmp ult i32 %101, 16
  %add.23.i760 = fadd float %140, %.val682
  br i1 %141, label %inter_warp_reduce-true.cont.cont.cont.then821, label %inter_warp_reduce-true.cont.cont.cont.cont820

inter_warp_reduce-true.cont.cont.cont.then821:    ; preds = %inter_warp_reduce-true.cont.cont.cont
  store float %add.23.i760, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont820

inter_warp_reduce-true.cont.cont.cont.cont820:    ; preds = %inter_warp_reduce-true.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.then821
  %initial_value_addr.2 = phi float [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont.then821 ], [ %add.23.i760, %inter_warp_reduce-true.cont.cont.cont ]
  %142 = icmp ult i32 %101, 16
  %143 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i760, i32 2, i32 31)
  br i1 %142, label %inter_warp_reduce-true.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.then:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont820
  %.val681.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont820, %inter_warp_reduce-true.cont.cont.cont.then
  %.val681 = phi float [ %.val681.then.val, %inter_warp_reduce-true.cont.cont.cont.then ], [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont820 ]
  %144 = icmp ult i32 %101, 16
  %add.23.i761 = fadd float %143, %.val681
  br i1 %144, label %inter_warp_reduce-true.cont.cont.cont.cont.then819, label %inter_warp_reduce-true.cont.cont.cont.cont.cont818

inter_warp_reduce-true.cont.cont.cont.cont.then819: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont
  store float %add.23.i761, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont818

inter_warp_reduce-true.cont.cont.cont.cont.cont818: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.then819
  %initial_value_addr.3 = phi float [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont.then819 ], [ %add.23.i761, %inter_warp_reduce-true.cont.cont.cont.cont ]
  %145 = icmp ult i32 %101, 16
  %146 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.23.i761, i32 1, i32 31)
  br i1 %145, label %inter_warp_reduce-true.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.then:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont818
  %.val.then.val = load float, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont818, %inter_warp_reduce-true.cont.cont.cont.cont.then
  %.val = phi float [ %.val.then.val, %inter_warp_reduce-true.cont.cont.cont.cont.then ], [ %initial_value_addr.3, %inter_warp_reduce-true.cont.cont.cont.cont.cont818 ]
  %147 = icmp ult i32 %101, 16
  %add.23.i762 = fadd float %146, %.val
  br i1 %147, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont
  store float %add.23.i762, ptr addrspace(3) %131, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.cont.then
  %148 = icmp eq i32 %101, 0
  br i1 %148, label %reduction_write_output-true, label %common.ret

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont
  store float %add.23.i762, ptr addrspace(1) %arg121120, align 128
  br label %common.ret

reduce-group-1-true:                              ; preds = %entry
  %149 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %150 = shl nuw nsw i32 %149, 1
  %151 = zext i32 %150 to i64
  %Arg_3.4 = getelementptr float, ptr addrspace(1) %arg31102, i64 %151
  %152 = load <2 x float>, ptr addrspace(1) %Arg_3.4, align 8, !invariant.load !267
  %Arg_3.41081524 = extractelement <2 x float> %152, i32 0
  %Arg_3.41161525 = extractelement <2 x float> %152, i32 1
  %Arg_2.3 = getelementptr float, ptr addrspace(1) %arg21100, i64 %151
  %153 = load <2 x float>, ptr addrspace(1) %Arg_2.3, align 8, !invariant.load !267
  %Arg_2.31091540 = extractelement <2 x float> %153, i32 0
  %Arg_2.31181541 = extractelement <2 x float> %153, i32 1
  %multiply.25 = fmul float %Arg_3.41081524, %Arg_2.31091540
  %subtract.26 = fsub float 1.000000e+00, %Arg_2.31091540
  %multiply.27 = fmul float %multiply.25, %subtract.26
  %multiply.25119 = fmul float %Arg_3.41161525, %Arg_2.31181541
  %subtract.26123 = fsub float 1.000000e+00, %Arg_2.31181541
  %multiply.27124 = fmul float %multiply.25119, %subtract.26123
  %add.32.i768 = fadd float %multiply.27, %multiply.27124
  %Arg_3.4.11437 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 1024
  %154 = load <2 x float>, ptr addrspace(1) %Arg_3.4.11437, align 8, !invariant.load !267
  %Arg_3.4108.11526 = extractelement <2 x float> %154, i32 0
  %Arg_3.4116.11527 = extractelement <2 x float> %154, i32 1
  %Arg_2.3.11439 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 1024
  %155 = load <2 x float>, ptr addrspace(1) %Arg_2.3.11439, align 8, !invariant.load !267
  %Arg_2.3109.11542 = extractelement <2 x float> %155, i32 0
  %Arg_2.3118.11543 = extractelement <2 x float> %155, i32 1
  %multiply.25.1 = fmul float %Arg_3.4108.11526, %Arg_2.3109.11542
  %subtract.26.1 = fsub float 1.000000e+00, %Arg_2.3109.11542
  %multiply.27.1 = fmul float %multiply.25.1, %subtract.26.1
  %add.32.i767.1 = fadd float %add.32.i768, %multiply.27.1
  %multiply.25119.1 = fmul float %Arg_3.4116.11527, %Arg_2.3118.11543
  %subtract.26123.1 = fsub float 1.000000e+00, %Arg_2.3118.11543
  %multiply.27124.1 = fmul float %multiply.25119.1, %subtract.26123.1
  %add.32.i768.1 = fadd float %add.32.i767.1, %multiply.27124.1
  %Arg_3.4.21445 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 2048
  %156 = load <2 x float>, ptr addrspace(1) %Arg_3.4.21445, align 8, !invariant.load !267
  %Arg_3.4108.21528 = extractelement <2 x float> %156, i32 0
  %Arg_3.4116.21529 = extractelement <2 x float> %156, i32 1
  %Arg_2.3.21447 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 2048
  %157 = load <2 x float>, ptr addrspace(1) %Arg_2.3.21447, align 8, !invariant.load !267
  %Arg_2.3109.21544 = extractelement <2 x float> %157, i32 0
  %Arg_2.3118.21545 = extractelement <2 x float> %157, i32 1
  %multiply.25.2 = fmul float %Arg_3.4108.21528, %Arg_2.3109.21544
  %subtract.26.2 = fsub float 1.000000e+00, %Arg_2.3109.21544
  %multiply.27.2 = fmul float %multiply.25.2, %subtract.26.2
  %add.32.i767.2 = fadd float %add.32.i768.1, %multiply.27.2
  %multiply.25119.2 = fmul float %Arg_3.4116.21529, %Arg_2.3118.21545
  %subtract.26123.2 = fsub float 1.000000e+00, %Arg_2.3118.21545
  %multiply.27124.2 = fmul float %multiply.25119.2, %subtract.26123.2
  %add.32.i768.2 = fadd float %add.32.i767.2, %multiply.27124.2
  %Arg_3.4.31453 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 3072
  %158 = load <2 x float>, ptr addrspace(1) %Arg_3.4.31453, align 8, !invariant.load !267
  %Arg_3.4108.31530 = extractelement <2 x float> %158, i32 0
  %Arg_3.4116.31531 = extractelement <2 x float> %158, i32 1
  %Arg_2.3.31455 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 3072
  %159 = load <2 x float>, ptr addrspace(1) %Arg_2.3.31455, align 8, !invariant.load !267
  %Arg_2.3109.31546 = extractelement <2 x float> %159, i32 0
  %Arg_2.3118.31547 = extractelement <2 x float> %159, i32 1
  %multiply.25.3 = fmul float %Arg_3.4108.31530, %Arg_2.3109.31546
  %subtract.26.3 = fsub float 1.000000e+00, %Arg_2.3109.31546
  %multiply.27.3 = fmul float %multiply.25.3, %subtract.26.3
  %add.32.i767.3 = fadd float %add.32.i768.2, %multiply.27.3
  %multiply.25119.3 = fmul float %Arg_3.4116.31531, %Arg_2.3118.31547
  %subtract.26123.3 = fsub float 1.000000e+00, %Arg_2.3118.31547
  %multiply.27124.3 = fmul float %multiply.25119.3, %subtract.26123.3
  %add.32.i768.3 = fadd float %add.32.i767.3, %multiply.27124.3
  %Arg_3.4.41461 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 4096
  %160 = load <2 x float>, ptr addrspace(1) %Arg_3.4.41461, align 8, !invariant.load !267
  %Arg_3.4108.41532 = extractelement <2 x float> %160, i32 0
  %Arg_3.4116.41533 = extractelement <2 x float> %160, i32 1
  %Arg_2.3.41463 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 4096
  %161 = load <2 x float>, ptr addrspace(1) %Arg_2.3.41463, align 8, !invariant.load !267
  %Arg_2.3109.41548 = extractelement <2 x float> %161, i32 0
  %Arg_2.3118.41549 = extractelement <2 x float> %161, i32 1
  %multiply.25.4 = fmul float %Arg_3.4108.41532, %Arg_2.3109.41548
  %subtract.26.4 = fsub float 1.000000e+00, %Arg_2.3109.41548
  %multiply.27.4 = fmul float %multiply.25.4, %subtract.26.4
  %add.32.i767.4 = fadd float %add.32.i768.3, %multiply.27.4
  %multiply.25119.4 = fmul float %Arg_3.4116.41533, %Arg_2.3118.41549
  %subtract.26123.4 = fsub float 1.000000e+00, %Arg_2.3118.41549
  %multiply.27124.4 = fmul float %multiply.25119.4, %subtract.26123.4
  %add.32.i768.4 = fadd float %add.32.i767.4, %multiply.27124.4
  %Arg_3.4.51469 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 5120
  %162 = load <2 x float>, ptr addrspace(1) %Arg_3.4.51469, align 8, !invariant.load !267
  %Arg_3.4108.51534 = extractelement <2 x float> %162, i32 0
  %Arg_3.4116.51535 = extractelement <2 x float> %162, i32 1
  %Arg_2.3.51471 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 5120
  %163 = load <2 x float>, ptr addrspace(1) %Arg_2.3.51471, align 8, !invariant.load !267
  %Arg_2.3109.51550 = extractelement <2 x float> %163, i32 0
  %Arg_2.3118.51551 = extractelement <2 x float> %163, i32 1
  %multiply.25.5 = fmul float %Arg_3.4108.51534, %Arg_2.3109.51550
  %subtract.26.5 = fsub float 1.000000e+00, %Arg_2.3109.51550
  %multiply.27.5 = fmul float %multiply.25.5, %subtract.26.5
  %add.32.i767.5 = fadd float %add.32.i768.4, %multiply.27.5
  %multiply.25119.5 = fmul float %Arg_3.4116.51535, %Arg_2.3118.51551
  %subtract.26123.5 = fsub float 1.000000e+00, %Arg_2.3118.51551
  %multiply.27124.5 = fmul float %multiply.25119.5, %subtract.26123.5
  %add.32.i768.5 = fadd float %add.32.i767.5, %multiply.27124.5
  %Arg_3.4.61477 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 6144
  %164 = load <2 x float>, ptr addrspace(1) %Arg_3.4.61477, align 8, !invariant.load !267
  %Arg_3.4108.61536 = extractelement <2 x float> %164, i32 0
  %Arg_3.4116.61537 = extractelement <2 x float> %164, i32 1
  %Arg_2.3.61479 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 6144
  %165 = load <2 x float>, ptr addrspace(1) %Arg_2.3.61479, align 8, !invariant.load !267
  %Arg_2.3109.61552 = extractelement <2 x float> %165, i32 0
  %Arg_2.3118.61553 = extractelement <2 x float> %165, i32 1
  %multiply.25.6 = fmul float %Arg_3.4108.61536, %Arg_2.3109.61552
  %subtract.26.6 = fsub float 1.000000e+00, %Arg_2.3109.61552
  %multiply.27.6 = fmul float %multiply.25.6, %subtract.26.6
  %add.32.i767.6 = fadd float %add.32.i768.5, %multiply.27.6
  %multiply.25119.6 = fmul float %Arg_3.4116.61537, %Arg_2.3118.61553
  %subtract.26123.6 = fsub float 1.000000e+00, %Arg_2.3118.61553
  %multiply.27124.6 = fmul float %multiply.25119.6, %subtract.26123.6
  %add.32.i768.6 = fadd float %add.32.i767.6, %multiply.27124.6
  %Arg_3.4.71485 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 7168
  %166 = load <2 x float>, ptr addrspace(1) %Arg_3.4.71485, align 8, !invariant.load !267
  %Arg_3.4108.71538 = extractelement <2 x float> %166, i32 0
  %Arg_3.4116.71539 = extractelement <2 x float> %166, i32 1
  %Arg_2.3.71487 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 7168
  %167 = load <2 x float>, ptr addrspace(1) %Arg_2.3.71487, align 8, !invariant.load !267
  %Arg_2.3109.71554 = extractelement <2 x float> %167, i32 0
  %Arg_2.3118.71555 = extractelement <2 x float> %167, i32 1
  %multiply.25.7 = fmul float %Arg_3.4108.71538, %Arg_2.3109.71554
  %subtract.26.7 = fsub float 1.000000e+00, %Arg_2.3109.71554
  %multiply.27.7 = fmul float %multiply.25.7, %subtract.26.7
  %add.32.i767.7 = fadd float %add.32.i768.6, %multiply.27.7
  %multiply.25119.7 = fmul float %Arg_3.4116.71539, %Arg_2.3118.71555
  %subtract.26123.7 = fsub float 1.000000e+00, %Arg_2.3118.71555
  %multiply.27124.7 = fmul float %multiply.25119.7, %subtract.26123.7
  %add.32.i768.7 = fadd float %add.32.i767.7, %multiply.27124.7
  %lane_id86 = and i32 %149, 31
  %168 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i768.7, i32 16, i32 31)
  %add.32.i = fadd float %add.32.i768.7, %168
  %169 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i, i32 8, i32 31)
  %add.32.i763 = fadd float %add.32.i, %169
  %170 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i763, i32 4, i32 31)
  %add.32.i764 = fadd float %add.32.i763, %170
  %171 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i764, i32 2, i32 31)
  %add.32.i765 = fadd float %add.32.i764, %171
  %172 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i765, i32 1, i32 31)
  %173 = icmp eq i32 %lane_id86, 0
  %174 = lshr i32 %149, 5
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i64 0, i64 0, i64 0, i64 %175
  %add.32.i766 = fadd float %add.32.i765, %172
  br i1 %173, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %reduce-group-1-true
  tail call void @llvm.nvvm.barrier0()
  %177 = icmp ult i32 %149, 32
  br i1 %177, label %inter_warp_reduce-true178, label %common.ret

intra_warp_reduce_write-true176:                  ; preds = %reduce-group-1-true
  store float %add.32.i766, ptr addrspace(3) %176, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %178 = zext i32 %lane_id86 to i64
  %179 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i64 0, i64 0, i64 0, i64 %178
  %180 = icmp ult i32 %149, 16
  br i1 %180, label %inter_warp_reduce-true178.then837, label %inter_warp_reduce-true178.cont836

inter_warp_reduce-true178.then837:                ; preds = %inter_warp_reduce-true178
  %partial_reduction_result182.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont836

inter_warp_reduce-true178.cont836:                ; preds = %inter_warp_reduce-true178, %inter_warp_reduce-true178.then837
  %partial_reduction_result182 = phi float [ %partial_reduction_result182.then.val, %inter_warp_reduce-true178.then837 ], [ -0.000000e+00, %inter_warp_reduce-true178 ]
  %181 = icmp ult i32 %149, 16
  %182 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  br i1 %181, label %inter_warp_reduce-true178.then, label %inter_warp_reduce-true178.cont

inter_warp_reduce-true178.then:                   ; preds = %inter_warp_reduce-true178.cont836
  %.val696.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont

inter_warp_reduce-true178.cont:                   ; preds = %inter_warp_reduce-true178.cont836, %inter_warp_reduce-true178.then
  %.val696 = phi float [ %.val696.then.val, %inter_warp_reduce-true178.then ], [ -0.000000e+00, %inter_warp_reduce-true178.cont836 ]
  %183 = icmp ult i32 %149, 16
  %add.32.i769 = fadd float %182, %.val696
  br i1 %183, label %inter_warp_reduce-true178.cont.then835, label %inter_warp_reduce-true178.cont.cont834

inter_warp_reduce-true178.cont.then835:           ; preds = %inter_warp_reduce-true178.cont
  store float %add.32.i769, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont834

inter_warp_reduce-true178.cont.cont834:           ; preds = %inter_warp_reduce-true178.cont, %inter_warp_reduce-true178.cont.then835
  %initial_value_addr180.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true178.cont.then835 ], [ %add.32.i769, %inter_warp_reduce-true178.cont ]
  %184 = icmp ult i32 %149, 16
  %185 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i769, i32 8, i32 31)
  br i1 %184, label %inter_warp_reduce-true178.cont.then, label %inter_warp_reduce-true178.cont.cont

inter_warp_reduce-true178.cont.then:              ; preds = %inter_warp_reduce-true178.cont.cont834
  %.val695.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont

inter_warp_reduce-true178.cont.cont:              ; preds = %inter_warp_reduce-true178.cont.cont834, %inter_warp_reduce-true178.cont.then
  %.val695 = phi float [ %.val695.then.val, %inter_warp_reduce-true178.cont.then ], [ %initial_value_addr180.0, %inter_warp_reduce-true178.cont.cont834 ]
  %186 = icmp ult i32 %149, 16
  %add.32.i770 = fadd float %185, %.val695
  br i1 %186, label %inter_warp_reduce-true178.cont.cont.then833, label %inter_warp_reduce-true178.cont.cont.cont832

inter_warp_reduce-true178.cont.cont.then833:      ; preds = %inter_warp_reduce-true178.cont.cont
  store float %add.32.i770, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont832

inter_warp_reduce-true178.cont.cont.cont832:      ; preds = %inter_warp_reduce-true178.cont.cont, %inter_warp_reduce-true178.cont.cont.then833
  %initial_value_addr180.1 = phi float [ %initial_value_addr180.0, %inter_warp_reduce-true178.cont.cont.then833 ], [ %add.32.i770, %inter_warp_reduce-true178.cont.cont ]
  %187 = icmp ult i32 %149, 16
  %188 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i770, i32 4, i32 31)
  br i1 %187, label %inter_warp_reduce-true178.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont

inter_warp_reduce-true178.cont.cont.then:         ; preds = %inter_warp_reduce-true178.cont.cont.cont832
  %.val694.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont:         ; preds = %inter_warp_reduce-true178.cont.cont.cont832, %inter_warp_reduce-true178.cont.cont.then
  %.val694 = phi float [ %.val694.then.val, %inter_warp_reduce-true178.cont.cont.then ], [ %initial_value_addr180.1, %inter_warp_reduce-true178.cont.cont.cont832 ]
  %189 = icmp ult i32 %149, 16
  %add.32.i771 = fadd float %188, %.val694
  br i1 %189, label %inter_warp_reduce-true178.cont.cont.cont.then831, label %inter_warp_reduce-true178.cont.cont.cont.cont830

inter_warp_reduce-true178.cont.cont.cont.then831: ; preds = %inter_warp_reduce-true178.cont.cont.cont
  store float %add.32.i771, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont830

inter_warp_reduce-true178.cont.cont.cont.cont830: ; preds = %inter_warp_reduce-true178.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.then831
  %initial_value_addr180.2 = phi float [ %initial_value_addr180.1, %inter_warp_reduce-true178.cont.cont.cont.then831 ], [ %add.32.i771, %inter_warp_reduce-true178.cont.cont.cont ]
  %190 = icmp ult i32 %149, 16
  %191 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i771, i32 2, i32 31)
  br i1 %190, label %inter_warp_reduce-true178.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont830
  %.val693.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont830, %inter_warp_reduce-true178.cont.cont.cont.then
  %.val693 = phi float [ %.val693.then.val, %inter_warp_reduce-true178.cont.cont.cont.then ], [ %initial_value_addr180.2, %inter_warp_reduce-true178.cont.cont.cont.cont830 ]
  %192 = icmp ult i32 %149, 16
  %add.32.i772 = fadd float %191, %.val693
  br i1 %192, label %inter_warp_reduce-true178.cont.cont.cont.cont.then829, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont828

inter_warp_reduce-true178.cont.cont.cont.cont.then829: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont
  store float %add.32.i772, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont828

inter_warp_reduce-true178.cont.cont.cont.cont.cont828: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.cont.then829
  %initial_value_addr180.3 = phi float [ %initial_value_addr180.2, %inter_warp_reduce-true178.cont.cont.cont.cont.then829 ], [ %add.32.i772, %inter_warp_reduce-true178.cont.cont.cont.cont ]
  %193 = icmp ult i32 %149, 16
  %194 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i772, i32 1, i32 31)
  br i1 %193, label %inter_warp_reduce-true178.cont.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont828
  %.val692.then.val = load float, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont828, %inter_warp_reduce-true178.cont.cont.cont.cont.then
  %.val692 = phi float [ %.val692.then.val, %inter_warp_reduce-true178.cont.cont.cont.cont.then ], [ %initial_value_addr180.3, %inter_warp_reduce-true178.cont.cont.cont.cont.cont828 ]
  %195 = icmp ult i32 %149, 16
  %add.32.i773 = fadd float %194, %.val692
  br i1 %195, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont
  store float %add.32.i773, ptr addrspace(3) %179, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.cont.cont.then
  %196 = icmp eq i32 %149, 0
  br i1 %196, label %reduction_write_output-true196, label %common.ret

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont
  store float %add.32.i773, ptr addrspace(1) %arg131122, align 128
  br label %common.ret

intra_warp_reduce_write-after296:                 ; preds = %intra_warp_reduce_write-true295, %entry.reduce-group-2-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %197 = icmp ult i32 %.pre, 32
  br i1 %197, label %inter_warp_reduce-true297, label %common.ret

intra_warp_reduce_write-true295:                  ; preds = %entry.reduce-group-2-true_crit_edge
  store float %add.41.i777, ptr addrspace(3) %25, align 4
  br label %intra_warp_reduce_write-after296

inter_warp_reduce-true297:                        ; preds = %intra_warp_reduce_write-after296
  %198 = zext i32 %.pre939 to i64
  %199 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i64 0, i64 0, i64 0, i64 %198
  %200 = icmp ult i32 %.pre, 16
  br i1 %200, label %inter_warp_reduce-true297.then847, label %inter_warp_reduce-true297.cont846

inter_warp_reduce-true297.then847:                ; preds = %inter_warp_reduce-true297
  %partial_reduction_result301.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont846

inter_warp_reduce-true297.cont846:                ; preds = %inter_warp_reduce-true297, %inter_warp_reduce-true297.then847
  %partial_reduction_result301 = phi float [ %partial_reduction_result301.then.val, %inter_warp_reduce-true297.then847 ], [ -0.000000e+00, %inter_warp_reduce-true297 ]
  %201 = icmp ult i32 %.pre, 16
  %202 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result301, i32 16, i32 31)
  br i1 %201, label %inter_warp_reduce-true297.then, label %inter_warp_reduce-true297.cont

inter_warp_reduce-true297.then:                   ; preds = %inter_warp_reduce-true297.cont846
  %.val708.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont

inter_warp_reduce-true297.cont:                   ; preds = %inter_warp_reduce-true297.cont846, %inter_warp_reduce-true297.then
  %.val708 = phi float [ %.val708.then.val, %inter_warp_reduce-true297.then ], [ -0.000000e+00, %inter_warp_reduce-true297.cont846 ]
  %203 = icmp ult i32 %.pre, 16
  %add.41.i780 = fadd float %202, %.val708
  br i1 %203, label %inter_warp_reduce-true297.cont.then845, label %inter_warp_reduce-true297.cont.cont844

inter_warp_reduce-true297.cont.then845:           ; preds = %inter_warp_reduce-true297.cont
  store float %add.41.i780, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont844

inter_warp_reduce-true297.cont.cont844:           ; preds = %inter_warp_reduce-true297.cont, %inter_warp_reduce-true297.cont.then845
  %initial_value_addr299.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true297.cont.then845 ], [ %add.41.i780, %inter_warp_reduce-true297.cont ]
  %204 = icmp ult i32 %.pre, 16
  %205 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i780, i32 8, i32 31)
  br i1 %204, label %inter_warp_reduce-true297.cont.then, label %inter_warp_reduce-true297.cont.cont

inter_warp_reduce-true297.cont.then:              ; preds = %inter_warp_reduce-true297.cont.cont844
  %.val707.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont

inter_warp_reduce-true297.cont.cont:              ; preds = %inter_warp_reduce-true297.cont.cont844, %inter_warp_reduce-true297.cont.then
  %.val707 = phi float [ %.val707.then.val, %inter_warp_reduce-true297.cont.then ], [ %initial_value_addr299.0, %inter_warp_reduce-true297.cont.cont844 ]
  %206 = icmp ult i32 %.pre, 16
  %add.41.i781 = fadd float %205, %.val707
  br i1 %206, label %inter_warp_reduce-true297.cont.cont.then843, label %inter_warp_reduce-true297.cont.cont.cont842

inter_warp_reduce-true297.cont.cont.then843:      ; preds = %inter_warp_reduce-true297.cont.cont
  store float %add.41.i781, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont842

inter_warp_reduce-true297.cont.cont.cont842:      ; preds = %inter_warp_reduce-true297.cont.cont, %inter_warp_reduce-true297.cont.cont.then843
  %initial_value_addr299.1 = phi float [ %initial_value_addr299.0, %inter_warp_reduce-true297.cont.cont.then843 ], [ %add.41.i781, %inter_warp_reduce-true297.cont.cont ]
  %207 = icmp ult i32 %.pre, 16
  %208 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i781, i32 4, i32 31)
  br i1 %207, label %inter_warp_reduce-true297.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont

inter_warp_reduce-true297.cont.cont.then:         ; preds = %inter_warp_reduce-true297.cont.cont.cont842
  %.val706.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont:         ; preds = %inter_warp_reduce-true297.cont.cont.cont842, %inter_warp_reduce-true297.cont.cont.then
  %.val706 = phi float [ %.val706.then.val, %inter_warp_reduce-true297.cont.cont.then ], [ %initial_value_addr299.1, %inter_warp_reduce-true297.cont.cont.cont842 ]
  %209 = icmp ult i32 %.pre, 16
  %add.41.i782 = fadd float %208, %.val706
  br i1 %209, label %inter_warp_reduce-true297.cont.cont.cont.then841, label %inter_warp_reduce-true297.cont.cont.cont.cont840

inter_warp_reduce-true297.cont.cont.cont.then841: ; preds = %inter_warp_reduce-true297.cont.cont.cont
  store float %add.41.i782, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont840

inter_warp_reduce-true297.cont.cont.cont.cont840: ; preds = %inter_warp_reduce-true297.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.then841
  %initial_value_addr299.2 = phi float [ %initial_value_addr299.1, %inter_warp_reduce-true297.cont.cont.cont.then841 ], [ %add.41.i782, %inter_warp_reduce-true297.cont.cont.cont ]
  %210 = icmp ult i32 %.pre, 16
  %211 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i782, i32 2, i32 31)
  br i1 %210, label %inter_warp_reduce-true297.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont840
  %.val705.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont840, %inter_warp_reduce-true297.cont.cont.cont.then
  %.val705 = phi float [ %.val705.then.val, %inter_warp_reduce-true297.cont.cont.cont.then ], [ %initial_value_addr299.2, %inter_warp_reduce-true297.cont.cont.cont.cont840 ]
  %212 = icmp ult i32 %.pre, 16
  %add.41.i783 = fadd float %211, %.val705
  br i1 %212, label %inter_warp_reduce-true297.cont.cont.cont.cont.then839, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont838

inter_warp_reduce-true297.cont.cont.cont.cont.then839: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont
  store float %add.41.i783, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont838

inter_warp_reduce-true297.cont.cont.cont.cont.cont838: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.cont.then839
  %initial_value_addr299.3 = phi float [ %initial_value_addr299.2, %inter_warp_reduce-true297.cont.cont.cont.cont.then839 ], [ %add.41.i783, %inter_warp_reduce-true297.cont.cont.cont.cont ]
  %213 = icmp ult i32 %.pre, 16
  %214 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i783, i32 1, i32 31)
  br i1 %213, label %inter_warp_reduce-true297.cont.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont838
  %.val704.then.val = load float, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont838, %inter_warp_reduce-true297.cont.cont.cont.cont.then
  %.val704 = phi float [ %.val704.then.val, %inter_warp_reduce-true297.cont.cont.cont.cont.then ], [ %initial_value_addr299.3, %inter_warp_reduce-true297.cont.cont.cont.cont.cont838 ]
  %215 = icmp ult i32 %.pre, 16
  %add.41.i784 = fadd float %214, %.val704
  br i1 %215, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont
  store float %add.41.i784, ptr addrspace(3) %199, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.cont.cont.then
  %216 = icmp eq i32 %.pre, 0
  br i1 %216, label %reduction_write_output-true315, label %common.ret

reduction_write_output-true315:                   ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont
  store float %add.41.i784, ptr addrspace(1) %arg141124, align 128
  br label %common.ret

intra_warp_reduce_write-after415:                 ; preds = %intra_warp_reduce_write-true414, %entry.reduce-group-3-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %217 = icmp ult i32 %.pre940, 32
  br i1 %217, label %inter_warp_reduce-true416, label %common.ret

intra_warp_reduce_write-true414:                  ; preds = %entry.reduce-group-3-true_crit_edge
  store float %add.50.i788, ptr addrspace(3) %50, align 4
  br label %intra_warp_reduce_write-after415

inter_warp_reduce-true416:                        ; preds = %intra_warp_reduce_write-after415
  %218 = zext i32 %.pre991 to i64
  %219 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i64 0, i64 0, i64 0, i64 %218
  %220 = icmp ult i32 %.pre940, 16
  br i1 %220, label %inter_warp_reduce-true416.then857, label %inter_warp_reduce-true416.cont856

inter_warp_reduce-true416.then857:                ; preds = %inter_warp_reduce-true416
  %partial_reduction_result420.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont856

inter_warp_reduce-true416.cont856:                ; preds = %inter_warp_reduce-true416, %inter_warp_reduce-true416.then857
  %partial_reduction_result420 = phi float [ %partial_reduction_result420.then.val, %inter_warp_reduce-true416.then857 ], [ -0.000000e+00, %inter_warp_reduce-true416 ]
  %221 = icmp ult i32 %.pre940, 16
  %222 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result420, i32 16, i32 31)
  br i1 %221, label %inter_warp_reduce-true416.then, label %inter_warp_reduce-true416.cont

inter_warp_reduce-true416.then:                   ; preds = %inter_warp_reduce-true416.cont856
  %.val720.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont

inter_warp_reduce-true416.cont:                   ; preds = %inter_warp_reduce-true416.cont856, %inter_warp_reduce-true416.then
  %.val720 = phi float [ %.val720.then.val, %inter_warp_reduce-true416.then ], [ -0.000000e+00, %inter_warp_reduce-true416.cont856 ]
  %223 = icmp ult i32 %.pre940, 16
  %add.50.i791 = fadd float %222, %.val720
  br i1 %223, label %inter_warp_reduce-true416.cont.then855, label %inter_warp_reduce-true416.cont.cont854

inter_warp_reduce-true416.cont.then855:           ; preds = %inter_warp_reduce-true416.cont
  store float %add.50.i791, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont854

inter_warp_reduce-true416.cont.cont854:           ; preds = %inter_warp_reduce-true416.cont, %inter_warp_reduce-true416.cont.then855
  %initial_value_addr418.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true416.cont.then855 ], [ %add.50.i791, %inter_warp_reduce-true416.cont ]
  %224 = icmp ult i32 %.pre940, 16
  %225 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i791, i32 8, i32 31)
  br i1 %224, label %inter_warp_reduce-true416.cont.then, label %inter_warp_reduce-true416.cont.cont

inter_warp_reduce-true416.cont.then:              ; preds = %inter_warp_reduce-true416.cont.cont854
  %.val719.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont

inter_warp_reduce-true416.cont.cont:              ; preds = %inter_warp_reduce-true416.cont.cont854, %inter_warp_reduce-true416.cont.then
  %.val719 = phi float [ %.val719.then.val, %inter_warp_reduce-true416.cont.then ], [ %initial_value_addr418.0, %inter_warp_reduce-true416.cont.cont854 ]
  %226 = icmp ult i32 %.pre940, 16
  %add.50.i792 = fadd float %225, %.val719
  br i1 %226, label %inter_warp_reduce-true416.cont.cont.then853, label %inter_warp_reduce-true416.cont.cont.cont852

inter_warp_reduce-true416.cont.cont.then853:      ; preds = %inter_warp_reduce-true416.cont.cont
  store float %add.50.i792, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont852

inter_warp_reduce-true416.cont.cont.cont852:      ; preds = %inter_warp_reduce-true416.cont.cont, %inter_warp_reduce-true416.cont.cont.then853
  %initial_value_addr418.1 = phi float [ %initial_value_addr418.0, %inter_warp_reduce-true416.cont.cont.then853 ], [ %add.50.i792, %inter_warp_reduce-true416.cont.cont ]
  %227 = icmp ult i32 %.pre940, 16
  %228 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i792, i32 4, i32 31)
  br i1 %227, label %inter_warp_reduce-true416.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont

inter_warp_reduce-true416.cont.cont.then:         ; preds = %inter_warp_reduce-true416.cont.cont.cont852
  %.val718.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont:         ; preds = %inter_warp_reduce-true416.cont.cont.cont852, %inter_warp_reduce-true416.cont.cont.then
  %.val718 = phi float [ %.val718.then.val, %inter_warp_reduce-true416.cont.cont.then ], [ %initial_value_addr418.1, %inter_warp_reduce-true416.cont.cont.cont852 ]
  %229 = icmp ult i32 %.pre940, 16
  %add.50.i793 = fadd float %228, %.val718
  br i1 %229, label %inter_warp_reduce-true416.cont.cont.cont.then851, label %inter_warp_reduce-true416.cont.cont.cont.cont850

inter_warp_reduce-true416.cont.cont.cont.then851: ; preds = %inter_warp_reduce-true416.cont.cont.cont
  store float %add.50.i793, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont850

inter_warp_reduce-true416.cont.cont.cont.cont850: ; preds = %inter_warp_reduce-true416.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.then851
  %initial_value_addr418.2 = phi float [ %initial_value_addr418.1, %inter_warp_reduce-true416.cont.cont.cont.then851 ], [ %add.50.i793, %inter_warp_reduce-true416.cont.cont.cont ]
  %230 = icmp ult i32 %.pre940, 16
  %231 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i793, i32 2, i32 31)
  br i1 %230, label %inter_warp_reduce-true416.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont850
  %.val717.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont850, %inter_warp_reduce-true416.cont.cont.cont.then
  %.val717 = phi float [ %.val717.then.val, %inter_warp_reduce-true416.cont.cont.cont.then ], [ %initial_value_addr418.2, %inter_warp_reduce-true416.cont.cont.cont.cont850 ]
  %232 = icmp ult i32 %.pre940, 16
  %add.50.i794 = fadd float %231, %.val717
  br i1 %232, label %inter_warp_reduce-true416.cont.cont.cont.cont.then849, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont848

inter_warp_reduce-true416.cont.cont.cont.cont.then849: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont
  store float %add.50.i794, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont848

inter_warp_reduce-true416.cont.cont.cont.cont.cont848: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.cont.then849
  %initial_value_addr418.3 = phi float [ %initial_value_addr418.2, %inter_warp_reduce-true416.cont.cont.cont.cont.then849 ], [ %add.50.i794, %inter_warp_reduce-true416.cont.cont.cont.cont ]
  %233 = icmp ult i32 %.pre940, 16
  %234 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i794, i32 1, i32 31)
  br i1 %233, label %inter_warp_reduce-true416.cont.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont848
  %.val716.then.val = load float, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont848, %inter_warp_reduce-true416.cont.cont.cont.cont.then
  %.val716 = phi float [ %.val716.then.val, %inter_warp_reduce-true416.cont.cont.cont.cont.then ], [ %initial_value_addr418.3, %inter_warp_reduce-true416.cont.cont.cont.cont.cont848 ]
  %235 = icmp ult i32 %.pre940, 16
  %add.50.i795 = fadd float %234, %.val716
  br i1 %235, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont
  store float %add.50.i795, ptr addrspace(3) %219, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.cont.cont.then
  %236 = icmp eq i32 %.pre940, 0
  br i1 %236, label %reduction_write_output-true434, label %common.ret

reduction_write_output-true434:                   ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont
  store float %add.50.i795, ptr addrspace(1) %arg151126, align 128
  br label %common.ret

intra_warp_reduce_write-after534:                 ; preds = %intra_warp_reduce_write-true533, %entry.reduce-group-4-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %237 = icmp ult i32 %.pre992, 32
  br i1 %237, label %inter_warp_reduce-true535, label %common.ret

intra_warp_reduce_write-true533:                  ; preds = %entry.reduce-group-4-true_crit_edge
  store float %add.59.i799, ptr addrspace(3) %75, align 4
  br label %intra_warp_reduce_write-after534

inter_warp_reduce-true535:                        ; preds = %intra_warp_reduce_write-after534
  %238 = zext i32 %.pre1043 to i64
  %239 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i64 0, i64 0, i64 0, i64 %238
  %240 = icmp ult i32 %.pre992, 16
  br i1 %240, label %inter_warp_reduce-true535.then867, label %inter_warp_reduce-true535.cont866

inter_warp_reduce-true535.then867:                ; preds = %inter_warp_reduce-true535
  %partial_reduction_result539.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont866

inter_warp_reduce-true535.cont866:                ; preds = %inter_warp_reduce-true535, %inter_warp_reduce-true535.then867
  %partial_reduction_result539 = phi float [ %partial_reduction_result539.then.val, %inter_warp_reduce-true535.then867 ], [ -0.000000e+00, %inter_warp_reduce-true535 ]
  %241 = icmp ult i32 %.pre992, 16
  %242 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result539, i32 16, i32 31)
  br i1 %241, label %inter_warp_reduce-true535.then, label %inter_warp_reduce-true535.cont

inter_warp_reduce-true535.then:                   ; preds = %inter_warp_reduce-true535.cont866
  %.val732.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont

inter_warp_reduce-true535.cont:                   ; preds = %inter_warp_reduce-true535.cont866, %inter_warp_reduce-true535.then
  %.val732 = phi float [ %.val732.then.val, %inter_warp_reduce-true535.then ], [ -0.000000e+00, %inter_warp_reduce-true535.cont866 ]
  %243 = icmp ult i32 %.pre992, 16
  %add.59.i802 = fadd float %242, %.val732
  br i1 %243, label %inter_warp_reduce-true535.cont.then865, label %inter_warp_reduce-true535.cont.cont864

inter_warp_reduce-true535.cont.then865:           ; preds = %inter_warp_reduce-true535.cont
  store float %add.59.i802, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont864

inter_warp_reduce-true535.cont.cont864:           ; preds = %inter_warp_reduce-true535.cont, %inter_warp_reduce-true535.cont.then865
  %initial_value_addr537.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true535.cont.then865 ], [ %add.59.i802, %inter_warp_reduce-true535.cont ]
  %244 = icmp ult i32 %.pre992, 16
  %245 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i802, i32 8, i32 31)
  br i1 %244, label %inter_warp_reduce-true535.cont.then, label %inter_warp_reduce-true535.cont.cont

inter_warp_reduce-true535.cont.then:              ; preds = %inter_warp_reduce-true535.cont.cont864
  %.val731.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont

inter_warp_reduce-true535.cont.cont:              ; preds = %inter_warp_reduce-true535.cont.cont864, %inter_warp_reduce-true535.cont.then
  %.val731 = phi float [ %.val731.then.val, %inter_warp_reduce-true535.cont.then ], [ %initial_value_addr537.0, %inter_warp_reduce-true535.cont.cont864 ]
  %246 = icmp ult i32 %.pre992, 16
  %add.59.i803 = fadd float %245, %.val731
  br i1 %246, label %inter_warp_reduce-true535.cont.cont.then863, label %inter_warp_reduce-true535.cont.cont.cont862

inter_warp_reduce-true535.cont.cont.then863:      ; preds = %inter_warp_reduce-true535.cont.cont
  store float %add.59.i803, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont862

inter_warp_reduce-true535.cont.cont.cont862:      ; preds = %inter_warp_reduce-true535.cont.cont, %inter_warp_reduce-true535.cont.cont.then863
  %initial_value_addr537.1 = phi float [ %initial_value_addr537.0, %inter_warp_reduce-true535.cont.cont.then863 ], [ %add.59.i803, %inter_warp_reduce-true535.cont.cont ]
  %247 = icmp ult i32 %.pre992, 16
  %248 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i803, i32 4, i32 31)
  br i1 %247, label %inter_warp_reduce-true535.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont

inter_warp_reduce-true535.cont.cont.then:         ; preds = %inter_warp_reduce-true535.cont.cont.cont862
  %.val730.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont:         ; preds = %inter_warp_reduce-true535.cont.cont.cont862, %inter_warp_reduce-true535.cont.cont.then
  %.val730 = phi float [ %.val730.then.val, %inter_warp_reduce-true535.cont.cont.then ], [ %initial_value_addr537.1, %inter_warp_reduce-true535.cont.cont.cont862 ]
  %249 = icmp ult i32 %.pre992, 16
  %add.59.i804 = fadd float %248, %.val730
  br i1 %249, label %inter_warp_reduce-true535.cont.cont.cont.then861, label %inter_warp_reduce-true535.cont.cont.cont.cont860

inter_warp_reduce-true535.cont.cont.cont.then861: ; preds = %inter_warp_reduce-true535.cont.cont.cont
  store float %add.59.i804, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont860

inter_warp_reduce-true535.cont.cont.cont.cont860: ; preds = %inter_warp_reduce-true535.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.then861
  %initial_value_addr537.2 = phi float [ %initial_value_addr537.1, %inter_warp_reduce-true535.cont.cont.cont.then861 ], [ %add.59.i804, %inter_warp_reduce-true535.cont.cont.cont ]
  %250 = icmp ult i32 %.pre992, 16
  %251 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i804, i32 2, i32 31)
  br i1 %250, label %inter_warp_reduce-true535.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont860
  %.val729.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont860, %inter_warp_reduce-true535.cont.cont.cont.then
  %.val729 = phi float [ %.val729.then.val, %inter_warp_reduce-true535.cont.cont.cont.then ], [ %initial_value_addr537.2, %inter_warp_reduce-true535.cont.cont.cont.cont860 ]
  %252 = icmp ult i32 %.pre992, 16
  %add.59.i805 = fadd float %251, %.val729
  br i1 %252, label %inter_warp_reduce-true535.cont.cont.cont.cont.then859, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont858

inter_warp_reduce-true535.cont.cont.cont.cont.then859: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont
  store float %add.59.i805, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont858

inter_warp_reduce-true535.cont.cont.cont.cont.cont858: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.cont.then859
  %initial_value_addr537.3 = phi float [ %initial_value_addr537.2, %inter_warp_reduce-true535.cont.cont.cont.cont.then859 ], [ %add.59.i805, %inter_warp_reduce-true535.cont.cont.cont.cont ]
  %253 = icmp ult i32 %.pre992, 16
  %254 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.59.i805, i32 1, i32 31)
  br i1 %253, label %inter_warp_reduce-true535.cont.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont858
  %.val728.then.val = load float, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont858, %inter_warp_reduce-true535.cont.cont.cont.cont.then
  %.val728 = phi float [ %.val728.then.val, %inter_warp_reduce-true535.cont.cont.cont.cont.then ], [ %initial_value_addr537.3, %inter_warp_reduce-true535.cont.cont.cont.cont.cont858 ]
  %255 = icmp ult i32 %.pre992, 16
  %add.59.i806 = fadd float %254, %.val728
  br i1 %255, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont
  store float %add.59.i806, ptr addrspace(3) %239, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.cont.cont.then
  %256 = icmp eq i32 %.pre992, 0
  br i1 %256, label %reduction_write_output-true553, label %common.ret

reduction_write_output-true553:                   ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont
  store float %add.59.i806, ptr addrspace(1) %arg161128, align 128
  br label %common.ret

intra_warp_reduce_write-after653:                 ; preds = %intra_warp_reduce_write-true652, %entry.reduce-group-5-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %257 = icmp ult i32 %.pre1044, 32
  br i1 %257, label %inter_warp_reduce-true654, label %common.ret

intra_warp_reduce_write-true652:                  ; preds = %entry.reduce-group-5-true_crit_edge
  store float %add.68.i810, ptr addrspace(3) %100, align 4
  br label %intra_warp_reduce_write-after653

inter_warp_reduce-true654:                        ; preds = %intra_warp_reduce_write-after653
  %258 = zext i32 %.pre1095 to i64
  %259 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i64 0, i64 0, i64 0, i64 %258
  %260 = icmp ult i32 %.pre1044, 16
  br i1 %260, label %inter_warp_reduce-true654.then877, label %inter_warp_reduce-true654.cont876

inter_warp_reduce-true654.then877:                ; preds = %inter_warp_reduce-true654
  %partial_reduction_result658.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont876

inter_warp_reduce-true654.cont876:                ; preds = %inter_warp_reduce-true654, %inter_warp_reduce-true654.then877
  %partial_reduction_result658 = phi float [ %partial_reduction_result658.then.val, %inter_warp_reduce-true654.then877 ], [ -0.000000e+00, %inter_warp_reduce-true654 ]
  %261 = icmp ult i32 %.pre1044, 16
  %262 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result658, i32 16, i32 31)
  br i1 %261, label %inter_warp_reduce-true654.then, label %inter_warp_reduce-true654.cont

inter_warp_reduce-true654.then:                   ; preds = %inter_warp_reduce-true654.cont876
  %.val744.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont

inter_warp_reduce-true654.cont:                   ; preds = %inter_warp_reduce-true654.cont876, %inter_warp_reduce-true654.then
  %.val744 = phi float [ %.val744.then.val, %inter_warp_reduce-true654.then ], [ -0.000000e+00, %inter_warp_reduce-true654.cont876 ]
  %263 = icmp ult i32 %.pre1044, 16
  %add.68.i813 = fadd float %262, %.val744
  br i1 %263, label %inter_warp_reduce-true654.cont.then875, label %inter_warp_reduce-true654.cont.cont874

inter_warp_reduce-true654.cont.then875:           ; preds = %inter_warp_reduce-true654.cont
  store float %add.68.i813, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont874

inter_warp_reduce-true654.cont.cont874:           ; preds = %inter_warp_reduce-true654.cont, %inter_warp_reduce-true654.cont.then875
  %initial_value_addr656.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true654.cont.then875 ], [ %add.68.i813, %inter_warp_reduce-true654.cont ]
  %264 = icmp ult i32 %.pre1044, 16
  %265 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i813, i32 8, i32 31)
  br i1 %264, label %inter_warp_reduce-true654.cont.then, label %inter_warp_reduce-true654.cont.cont

inter_warp_reduce-true654.cont.then:              ; preds = %inter_warp_reduce-true654.cont.cont874
  %.val743.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont

inter_warp_reduce-true654.cont.cont:              ; preds = %inter_warp_reduce-true654.cont.cont874, %inter_warp_reduce-true654.cont.then
  %.val743 = phi float [ %.val743.then.val, %inter_warp_reduce-true654.cont.then ], [ %initial_value_addr656.0, %inter_warp_reduce-true654.cont.cont874 ]
  %266 = icmp ult i32 %.pre1044, 16
  %add.68.i814 = fadd float %265, %.val743
  br i1 %266, label %inter_warp_reduce-true654.cont.cont.then873, label %inter_warp_reduce-true654.cont.cont.cont872

inter_warp_reduce-true654.cont.cont.then873:      ; preds = %inter_warp_reduce-true654.cont.cont
  store float %add.68.i814, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont872

inter_warp_reduce-true654.cont.cont.cont872:      ; preds = %inter_warp_reduce-true654.cont.cont, %inter_warp_reduce-true654.cont.cont.then873
  %initial_value_addr656.1 = phi float [ %initial_value_addr656.0, %inter_warp_reduce-true654.cont.cont.then873 ], [ %add.68.i814, %inter_warp_reduce-true654.cont.cont ]
  %267 = icmp ult i32 %.pre1044, 16
  %268 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i814, i32 4, i32 31)
  br i1 %267, label %inter_warp_reduce-true654.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont

inter_warp_reduce-true654.cont.cont.then:         ; preds = %inter_warp_reduce-true654.cont.cont.cont872
  %.val742.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont:         ; preds = %inter_warp_reduce-true654.cont.cont.cont872, %inter_warp_reduce-true654.cont.cont.then
  %.val742 = phi float [ %.val742.then.val, %inter_warp_reduce-true654.cont.cont.then ], [ %initial_value_addr656.1, %inter_warp_reduce-true654.cont.cont.cont872 ]
  %269 = icmp ult i32 %.pre1044, 16
  %add.68.i815 = fadd float %268, %.val742
  br i1 %269, label %inter_warp_reduce-true654.cont.cont.cont.then871, label %inter_warp_reduce-true654.cont.cont.cont.cont870

inter_warp_reduce-true654.cont.cont.cont.then871: ; preds = %inter_warp_reduce-true654.cont.cont.cont
  store float %add.68.i815, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont870

inter_warp_reduce-true654.cont.cont.cont.cont870: ; preds = %inter_warp_reduce-true654.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.then871
  %initial_value_addr656.2 = phi float [ %initial_value_addr656.1, %inter_warp_reduce-true654.cont.cont.cont.then871 ], [ %add.68.i815, %inter_warp_reduce-true654.cont.cont.cont ]
  %270 = icmp ult i32 %.pre1044, 16
  %271 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i815, i32 2, i32 31)
  br i1 %270, label %inter_warp_reduce-true654.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont870
  %.val741.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont870, %inter_warp_reduce-true654.cont.cont.cont.then
  %.val741 = phi float [ %.val741.then.val, %inter_warp_reduce-true654.cont.cont.cont.then ], [ %initial_value_addr656.2, %inter_warp_reduce-true654.cont.cont.cont.cont870 ]
  %272 = icmp ult i32 %.pre1044, 16
  %add.68.i816 = fadd float %271, %.val741
  br i1 %272, label %inter_warp_reduce-true654.cont.cont.cont.cont.then869, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont868

inter_warp_reduce-true654.cont.cont.cont.cont.then869: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont
  store float %add.68.i816, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont868

inter_warp_reduce-true654.cont.cont.cont.cont.cont868: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.cont.then869
  %initial_value_addr656.3 = phi float [ %initial_value_addr656.2, %inter_warp_reduce-true654.cont.cont.cont.cont.then869 ], [ %add.68.i816, %inter_warp_reduce-true654.cont.cont.cont.cont ]
  %273 = icmp ult i32 %.pre1044, 16
  %274 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.68.i816, i32 1, i32 31)
  br i1 %273, label %inter_warp_reduce-true654.cont.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont868
  %.val740.then.val = load float, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont868, %inter_warp_reduce-true654.cont.cont.cont.cont.then
  %.val740 = phi float [ %.val740.then.val, %inter_warp_reduce-true654.cont.cont.cont.cont.then ], [ %initial_value_addr656.3, %inter_warp_reduce-true654.cont.cont.cont.cont.cont868 ]
  %275 = icmp ult i32 %.pre1044, 16
  %add.68.i817 = fadd float %274, %.val740
  br i1 %275, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont
  store float %add.68.i817, ptr addrspace(3) %259, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.cont.cont.then
  %276 = icmp eq i32 %.pre1044, 0
  br i1 %276, label %reduction_write_output-true672, label %common.ret

reduction_write_output-true672:                   ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont
  store float %add.68.i817, ptr addrspace(1) %arg171130, align 128
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: nounwind
define void @fusion_660(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg23) local_unnamed_addr #0 {
entry:
  %arg231556 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg221554 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg211552 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg201550 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg191548 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg181546 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg171544 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg161542 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg151540 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg141538 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg131536 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg121534 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg111532 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg101530 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg91528 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg81526 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg71524 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg61522 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg51520 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg41518 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg31516 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg21514 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg11512 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01510 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !268
  switch i32 %0, label %entry.unreachabledefault [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
    i32 4, label %entry.reduce-group-4-true_crit_edge
    i32 5, label %entry.reduce-group-5-true_crit_edge
    i32 6, label %entry.reduce-group-6-true_crit_edge
    i32 7, label %entry.reduce-group-7-true_crit_edge
  ]

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1200 = shl nuw nsw i32 %.pre, 1
  %.pre1202 = zext i32 %.pre1200 to i64
  %.pre1249 = and i32 %.pre, 31
  %Arg_5.6 = getelementptr float, ptr addrspace(1) %arg51520, i64 %.pre1202
  %1 = load <2 x float>, ptr addrspace(1) %Arg_5.6, align 8, !invariant.load !267
  %Arg_5.62272102 = extractelement <2 x float> %1, i32 0
  %Arg_5.62352103 = extractelement <2 x float> %1, i32 1
  %Arg_4.5 = getelementptr float, ptr addrspace(1) %arg41518, i64 %.pre1202
  %2 = load <2 x float>, ptr addrspace(1) %Arg_4.5, align 8, !invariant.load !267
  %Arg_4.52282118 = extractelement <2 x float> %2, i32 0
  %Arg_4.52372119 = extractelement <2 x float> %2, i32 1
  %multiply.38 = fmul float %Arg_5.62272102, %Arg_4.52282118
  %subtract.39 = fsub float 1.000000e+00, %Arg_4.52282118
  %multiply.40 = fmul float %multiply.38, %subtract.39
  %multiply.38238 = fmul float %Arg_5.62352103, %Arg_4.52372119
  %subtract.39242 = fsub float 1.000000e+00, %Arg_4.52372119
  %multiply.40243 = fmul float %multiply.38238, %subtract.39242
  %add.45.i1043 = fadd float %multiply.40, %multiply.40243
  %Arg_5.6.11563 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 1024
  %3 = load <2 x float>, ptr addrspace(1) %Arg_5.6.11563, align 8, !invariant.load !267
  %Arg_5.6227.12104 = extractelement <2 x float> %3, i32 0
  %Arg_5.6235.12105 = extractelement <2 x float> %3, i32 1
  %Arg_4.5.11565 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 1024
  %4 = load <2 x float>, ptr addrspace(1) %Arg_4.5.11565, align 8, !invariant.load !267
  %Arg_4.5228.12120 = extractelement <2 x float> %4, i32 0
  %Arg_4.5237.12121 = extractelement <2 x float> %4, i32 1
  %multiply.38.1 = fmul float %Arg_5.6227.12104, %Arg_4.5228.12120
  %subtract.39.1 = fsub float 1.000000e+00, %Arg_4.5228.12120
  %multiply.40.1 = fmul float %multiply.38.1, %subtract.39.1
  %add.45.i1042.1 = fadd float %add.45.i1043, %multiply.40.1
  %multiply.38238.1 = fmul float %Arg_5.6235.12105, %Arg_4.5237.12121
  %subtract.39242.1 = fsub float 1.000000e+00, %Arg_4.5237.12121
  %multiply.40243.1 = fmul float %multiply.38238.1, %subtract.39242.1
  %add.45.i1043.1 = fadd float %add.45.i1042.1, %multiply.40243.1
  %Arg_5.6.21571 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 2048
  %5 = load <2 x float>, ptr addrspace(1) %Arg_5.6.21571, align 8, !invariant.load !267
  %Arg_5.6227.22106 = extractelement <2 x float> %5, i32 0
  %Arg_5.6235.22107 = extractelement <2 x float> %5, i32 1
  %Arg_4.5.21573 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 2048
  %6 = load <2 x float>, ptr addrspace(1) %Arg_4.5.21573, align 8, !invariant.load !267
  %Arg_4.5228.22122 = extractelement <2 x float> %6, i32 0
  %Arg_4.5237.22123 = extractelement <2 x float> %6, i32 1
  %multiply.38.2 = fmul float %Arg_5.6227.22106, %Arg_4.5228.22122
  %subtract.39.2 = fsub float 1.000000e+00, %Arg_4.5228.22122
  %multiply.40.2 = fmul float %multiply.38.2, %subtract.39.2
  %add.45.i1042.2 = fadd float %add.45.i1043.1, %multiply.40.2
  %multiply.38238.2 = fmul float %Arg_5.6235.22107, %Arg_4.5237.22123
  %subtract.39242.2 = fsub float 1.000000e+00, %Arg_4.5237.22123
  %multiply.40243.2 = fmul float %multiply.38238.2, %subtract.39242.2
  %add.45.i1043.2 = fadd float %add.45.i1042.2, %multiply.40243.2
  %Arg_5.6.31579 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 3072
  %7 = load <2 x float>, ptr addrspace(1) %Arg_5.6.31579, align 8, !invariant.load !267
  %Arg_5.6227.32108 = extractelement <2 x float> %7, i32 0
  %Arg_5.6235.32109 = extractelement <2 x float> %7, i32 1
  %Arg_4.5.31581 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 3072
  %8 = load <2 x float>, ptr addrspace(1) %Arg_4.5.31581, align 8, !invariant.load !267
  %Arg_4.5228.32124 = extractelement <2 x float> %8, i32 0
  %Arg_4.5237.32125 = extractelement <2 x float> %8, i32 1
  %multiply.38.3 = fmul float %Arg_5.6227.32108, %Arg_4.5228.32124
  %subtract.39.3 = fsub float 1.000000e+00, %Arg_4.5228.32124
  %multiply.40.3 = fmul float %multiply.38.3, %subtract.39.3
  %add.45.i1042.3 = fadd float %add.45.i1043.2, %multiply.40.3
  %multiply.38238.3 = fmul float %Arg_5.6235.32109, %Arg_4.5237.32125
  %subtract.39242.3 = fsub float 1.000000e+00, %Arg_4.5237.32125
  %multiply.40243.3 = fmul float %multiply.38238.3, %subtract.39242.3
  %add.45.i1043.3 = fadd float %add.45.i1042.3, %multiply.40243.3
  %Arg_5.6.41587 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 4096
  %9 = load <2 x float>, ptr addrspace(1) %Arg_5.6.41587, align 8, !invariant.load !267
  %Arg_5.6227.42110 = extractelement <2 x float> %9, i32 0
  %Arg_5.6235.42111 = extractelement <2 x float> %9, i32 1
  %Arg_4.5.41589 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 4096
  %10 = load <2 x float>, ptr addrspace(1) %Arg_4.5.41589, align 8, !invariant.load !267
  %Arg_4.5228.42126 = extractelement <2 x float> %10, i32 0
  %Arg_4.5237.42127 = extractelement <2 x float> %10, i32 1
  %multiply.38.4 = fmul float %Arg_5.6227.42110, %Arg_4.5228.42126
  %subtract.39.4 = fsub float 1.000000e+00, %Arg_4.5228.42126
  %multiply.40.4 = fmul float %multiply.38.4, %subtract.39.4
  %add.45.i1042.4 = fadd float %add.45.i1043.3, %multiply.40.4
  %multiply.38238.4 = fmul float %Arg_5.6235.42111, %Arg_4.5237.42127
  %subtract.39242.4 = fsub float 1.000000e+00, %Arg_4.5237.42127
  %multiply.40243.4 = fmul float %multiply.38238.4, %subtract.39242.4
  %add.45.i1043.4 = fadd float %add.45.i1042.4, %multiply.40243.4
  %Arg_5.6.51595 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 5120
  %11 = load <2 x float>, ptr addrspace(1) %Arg_5.6.51595, align 8, !invariant.load !267
  %Arg_5.6227.52112 = extractelement <2 x float> %11, i32 0
  %Arg_5.6235.52113 = extractelement <2 x float> %11, i32 1
  %Arg_4.5.51597 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 5120
  %12 = load <2 x float>, ptr addrspace(1) %Arg_4.5.51597, align 8, !invariant.load !267
  %Arg_4.5228.52128 = extractelement <2 x float> %12, i32 0
  %Arg_4.5237.52129 = extractelement <2 x float> %12, i32 1
  %multiply.38.5 = fmul float %Arg_5.6227.52112, %Arg_4.5228.52128
  %subtract.39.5 = fsub float 1.000000e+00, %Arg_4.5228.52128
  %multiply.40.5 = fmul float %multiply.38.5, %subtract.39.5
  %add.45.i1042.5 = fadd float %add.45.i1043.4, %multiply.40.5
  %multiply.38238.5 = fmul float %Arg_5.6235.52113, %Arg_4.5237.52129
  %subtract.39242.5 = fsub float 1.000000e+00, %Arg_4.5237.52129
  %multiply.40243.5 = fmul float %multiply.38238.5, %subtract.39242.5
  %add.45.i1043.5 = fadd float %add.45.i1042.5, %multiply.40243.5
  %Arg_5.6.61603 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 6144
  %13 = load <2 x float>, ptr addrspace(1) %Arg_5.6.61603, align 8, !invariant.load !267
  %Arg_5.6227.62114 = extractelement <2 x float> %13, i32 0
  %Arg_5.6235.62115 = extractelement <2 x float> %13, i32 1
  %Arg_4.5.61605 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 6144
  %14 = load <2 x float>, ptr addrspace(1) %Arg_4.5.61605, align 8, !invariant.load !267
  %Arg_4.5228.62130 = extractelement <2 x float> %14, i32 0
  %Arg_4.5237.62131 = extractelement <2 x float> %14, i32 1
  %multiply.38.6 = fmul float %Arg_5.6227.62114, %Arg_4.5228.62130
  %subtract.39.6 = fsub float 1.000000e+00, %Arg_4.5228.62130
  %multiply.40.6 = fmul float %multiply.38.6, %subtract.39.6
  %add.45.i1042.6 = fadd float %add.45.i1043.5, %multiply.40.6
  %multiply.38238.6 = fmul float %Arg_5.6235.62115, %Arg_4.5237.62131
  %subtract.39242.6 = fsub float 1.000000e+00, %Arg_4.5237.62131
  %multiply.40243.6 = fmul float %multiply.38238.6, %subtract.39242.6
  %add.45.i1043.6 = fadd float %add.45.i1042.6, %multiply.40243.6
  %Arg_5.6.71611 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.6, i64 7168
  %15 = load <2 x float>, ptr addrspace(1) %Arg_5.6.71611, align 8, !invariant.load !267
  %Arg_5.6227.72116 = extractelement <2 x float> %15, i32 0
  %Arg_5.6235.72117 = extractelement <2 x float> %15, i32 1
  %Arg_4.5.71613 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.5, i64 7168
  %16 = load <2 x float>, ptr addrspace(1) %Arg_4.5.71613, align 8, !invariant.load !267
  %Arg_4.5228.72132 = extractelement <2 x float> %16, i32 0
  %Arg_4.5237.72133 = extractelement <2 x float> %16, i32 1
  %multiply.38.7 = fmul float %Arg_5.6227.72116, %Arg_4.5228.72132
  %subtract.39.7 = fsub float 1.000000e+00, %Arg_4.5228.72132
  %multiply.40.7 = fmul float %multiply.38.7, %subtract.39.7
  %add.45.i1042.7 = fadd float %add.45.i1043.6, %multiply.40.7
  %multiply.38238.7 = fmul float %Arg_5.6235.72117, %Arg_4.5237.72133
  %subtract.39242.7 = fsub float 1.000000e+00, %Arg_4.5237.72133
  %multiply.40243.7 = fmul float %multiply.38238.7, %subtract.39242.7
  %add.45.i1043.7 = fadd float %add.45.i1042.7, %multiply.40243.7
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1043.7, i32 16, i32 31)
  %add.45.i = fadd float %add.45.i1043.7, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i, i32 8, i32 31)
  %add.45.i1038 = fadd float %add.45.i, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1038, i32 4, i32 31)
  %add.45.i1039 = fadd float %add.45.i1038, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1039, i32 2, i32 31)
  %add.45.i1040 = fadd float %add.45.i1039, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1040, i32 1, i32 31)
  %22 = icmp eq i32 %.pre1249, 0
  %23 = lshr i32 %.pre, 5
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i64 0, i64 0, i64 0, i64 %24
  %add.45.i1041 = fadd float %add.45.i1040, %21
  br i1 %22, label %intra_warp_reduce_write-true295, label %intra_warp_reduce_write-after296

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %.pre1250 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1252 = shl nuw nsw i32 %.pre1250, 1
  %.pre1254 = zext i32 %.pre1252 to i64
  %.pre1301 = and i32 %.pre1250, 31
  %Arg_7.8 = getelementptr float, ptr addrspace(1) %arg71524, i64 %.pre1254
  %26 = load <2 x float>, ptr addrspace(1) %Arg_7.8, align 8, !invariant.load !267
  %Arg_7.83462134 = extractelement <2 x float> %26, i32 0
  %Arg_7.83542135 = extractelement <2 x float> %26, i32 1
  %Arg_6.7 = getelementptr float, ptr addrspace(1) %arg61522, i64 %.pre1254
  %27 = load <2 x float>, ptr addrspace(1) %Arg_6.7, align 8, !invariant.load !267
  %Arg_6.73472150 = extractelement <2 x float> %27, i32 0
  %Arg_6.73562151 = extractelement <2 x float> %27, i32 1
  %multiply.47 = fmul float %Arg_7.83462134, %Arg_6.73472150
  %subtract.48 = fsub float 1.000000e+00, %Arg_6.73472150
  %multiply.49 = fmul float %multiply.47, %subtract.48
  %multiply.47357 = fmul float %Arg_7.83542135, %Arg_6.73562151
  %subtract.48361 = fsub float 1.000000e+00, %Arg_6.73562151
  %multiply.49362 = fmul float %multiply.47357, %subtract.48361
  %add.54.i1054 = fadd float %multiply.49, %multiply.49362
  %Arg_7.8.11623 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 1024
  %28 = load <2 x float>, ptr addrspace(1) %Arg_7.8.11623, align 8, !invariant.load !267
  %Arg_7.8346.12136 = extractelement <2 x float> %28, i32 0
  %Arg_7.8354.12137 = extractelement <2 x float> %28, i32 1
  %Arg_6.7.11625 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 1024
  %29 = load <2 x float>, ptr addrspace(1) %Arg_6.7.11625, align 8, !invariant.load !267
  %Arg_6.7347.12152 = extractelement <2 x float> %29, i32 0
  %Arg_6.7356.12153 = extractelement <2 x float> %29, i32 1
  %multiply.47.1 = fmul float %Arg_7.8346.12136, %Arg_6.7347.12152
  %subtract.48.1 = fsub float 1.000000e+00, %Arg_6.7347.12152
  %multiply.49.1 = fmul float %multiply.47.1, %subtract.48.1
  %add.54.i1053.1 = fadd float %add.54.i1054, %multiply.49.1
  %multiply.47357.1 = fmul float %Arg_7.8354.12137, %Arg_6.7356.12153
  %subtract.48361.1 = fsub float 1.000000e+00, %Arg_6.7356.12153
  %multiply.49362.1 = fmul float %multiply.47357.1, %subtract.48361.1
  %add.54.i1054.1 = fadd float %add.54.i1053.1, %multiply.49362.1
  %Arg_7.8.21631 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 2048
  %30 = load <2 x float>, ptr addrspace(1) %Arg_7.8.21631, align 8, !invariant.load !267
  %Arg_7.8346.22138 = extractelement <2 x float> %30, i32 0
  %Arg_7.8354.22139 = extractelement <2 x float> %30, i32 1
  %Arg_6.7.21633 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 2048
  %31 = load <2 x float>, ptr addrspace(1) %Arg_6.7.21633, align 8, !invariant.load !267
  %Arg_6.7347.22154 = extractelement <2 x float> %31, i32 0
  %Arg_6.7356.22155 = extractelement <2 x float> %31, i32 1
  %multiply.47.2 = fmul float %Arg_7.8346.22138, %Arg_6.7347.22154
  %subtract.48.2 = fsub float 1.000000e+00, %Arg_6.7347.22154
  %multiply.49.2 = fmul float %multiply.47.2, %subtract.48.2
  %add.54.i1053.2 = fadd float %add.54.i1054.1, %multiply.49.2
  %multiply.47357.2 = fmul float %Arg_7.8354.22139, %Arg_6.7356.22155
  %subtract.48361.2 = fsub float 1.000000e+00, %Arg_6.7356.22155
  %multiply.49362.2 = fmul float %multiply.47357.2, %subtract.48361.2
  %add.54.i1054.2 = fadd float %add.54.i1053.2, %multiply.49362.2
  %Arg_7.8.31639 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 3072
  %32 = load <2 x float>, ptr addrspace(1) %Arg_7.8.31639, align 8, !invariant.load !267
  %Arg_7.8346.32140 = extractelement <2 x float> %32, i32 0
  %Arg_7.8354.32141 = extractelement <2 x float> %32, i32 1
  %Arg_6.7.31641 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 3072
  %33 = load <2 x float>, ptr addrspace(1) %Arg_6.7.31641, align 8, !invariant.load !267
  %Arg_6.7347.32156 = extractelement <2 x float> %33, i32 0
  %Arg_6.7356.32157 = extractelement <2 x float> %33, i32 1
  %multiply.47.3 = fmul float %Arg_7.8346.32140, %Arg_6.7347.32156
  %subtract.48.3 = fsub float 1.000000e+00, %Arg_6.7347.32156
  %multiply.49.3 = fmul float %multiply.47.3, %subtract.48.3
  %add.54.i1053.3 = fadd float %add.54.i1054.2, %multiply.49.3
  %multiply.47357.3 = fmul float %Arg_7.8354.32141, %Arg_6.7356.32157
  %subtract.48361.3 = fsub float 1.000000e+00, %Arg_6.7356.32157
  %multiply.49362.3 = fmul float %multiply.47357.3, %subtract.48361.3
  %add.54.i1054.3 = fadd float %add.54.i1053.3, %multiply.49362.3
  %Arg_7.8.41647 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 4096
  %34 = load <2 x float>, ptr addrspace(1) %Arg_7.8.41647, align 8, !invariant.load !267
  %Arg_7.8346.42142 = extractelement <2 x float> %34, i32 0
  %Arg_7.8354.42143 = extractelement <2 x float> %34, i32 1
  %Arg_6.7.41649 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 4096
  %35 = load <2 x float>, ptr addrspace(1) %Arg_6.7.41649, align 8, !invariant.load !267
  %Arg_6.7347.42158 = extractelement <2 x float> %35, i32 0
  %Arg_6.7356.42159 = extractelement <2 x float> %35, i32 1
  %multiply.47.4 = fmul float %Arg_7.8346.42142, %Arg_6.7347.42158
  %subtract.48.4 = fsub float 1.000000e+00, %Arg_6.7347.42158
  %multiply.49.4 = fmul float %multiply.47.4, %subtract.48.4
  %add.54.i1053.4 = fadd float %add.54.i1054.3, %multiply.49.4
  %multiply.47357.4 = fmul float %Arg_7.8354.42143, %Arg_6.7356.42159
  %subtract.48361.4 = fsub float 1.000000e+00, %Arg_6.7356.42159
  %multiply.49362.4 = fmul float %multiply.47357.4, %subtract.48361.4
  %add.54.i1054.4 = fadd float %add.54.i1053.4, %multiply.49362.4
  %Arg_7.8.51655 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 5120
  %36 = load <2 x float>, ptr addrspace(1) %Arg_7.8.51655, align 8, !invariant.load !267
  %Arg_7.8346.52144 = extractelement <2 x float> %36, i32 0
  %Arg_7.8354.52145 = extractelement <2 x float> %36, i32 1
  %Arg_6.7.51657 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 5120
  %37 = load <2 x float>, ptr addrspace(1) %Arg_6.7.51657, align 8, !invariant.load !267
  %Arg_6.7347.52160 = extractelement <2 x float> %37, i32 0
  %Arg_6.7356.52161 = extractelement <2 x float> %37, i32 1
  %multiply.47.5 = fmul float %Arg_7.8346.52144, %Arg_6.7347.52160
  %subtract.48.5 = fsub float 1.000000e+00, %Arg_6.7347.52160
  %multiply.49.5 = fmul float %multiply.47.5, %subtract.48.5
  %add.54.i1053.5 = fadd float %add.54.i1054.4, %multiply.49.5
  %multiply.47357.5 = fmul float %Arg_7.8354.52145, %Arg_6.7356.52161
  %subtract.48361.5 = fsub float 1.000000e+00, %Arg_6.7356.52161
  %multiply.49362.5 = fmul float %multiply.47357.5, %subtract.48361.5
  %add.54.i1054.5 = fadd float %add.54.i1053.5, %multiply.49362.5
  %Arg_7.8.61663 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 6144
  %38 = load <2 x float>, ptr addrspace(1) %Arg_7.8.61663, align 8, !invariant.load !267
  %Arg_7.8346.62146 = extractelement <2 x float> %38, i32 0
  %Arg_7.8354.62147 = extractelement <2 x float> %38, i32 1
  %Arg_6.7.61665 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 6144
  %39 = load <2 x float>, ptr addrspace(1) %Arg_6.7.61665, align 8, !invariant.load !267
  %Arg_6.7347.62162 = extractelement <2 x float> %39, i32 0
  %Arg_6.7356.62163 = extractelement <2 x float> %39, i32 1
  %multiply.47.6 = fmul float %Arg_7.8346.62146, %Arg_6.7347.62162
  %subtract.48.6 = fsub float 1.000000e+00, %Arg_6.7347.62162
  %multiply.49.6 = fmul float %multiply.47.6, %subtract.48.6
  %add.54.i1053.6 = fadd float %add.54.i1054.5, %multiply.49.6
  %multiply.47357.6 = fmul float %Arg_7.8354.62147, %Arg_6.7356.62163
  %subtract.48361.6 = fsub float 1.000000e+00, %Arg_6.7356.62163
  %multiply.49362.6 = fmul float %multiply.47357.6, %subtract.48361.6
  %add.54.i1054.6 = fadd float %add.54.i1053.6, %multiply.49362.6
  %Arg_7.8.71671 = getelementptr inbounds float, ptr addrspace(1) %Arg_7.8, i64 7168
  %40 = load <2 x float>, ptr addrspace(1) %Arg_7.8.71671, align 8, !invariant.load !267
  %Arg_7.8346.72148 = extractelement <2 x float> %40, i32 0
  %Arg_7.8354.72149 = extractelement <2 x float> %40, i32 1
  %Arg_6.7.71673 = getelementptr inbounds float, ptr addrspace(1) %Arg_6.7, i64 7168
  %41 = load <2 x float>, ptr addrspace(1) %Arg_6.7.71673, align 8, !invariant.load !267
  %Arg_6.7347.72164 = extractelement <2 x float> %41, i32 0
  %Arg_6.7356.72165 = extractelement <2 x float> %41, i32 1
  %multiply.47.7 = fmul float %Arg_7.8346.72148, %Arg_6.7347.72164
  %subtract.48.7 = fsub float 1.000000e+00, %Arg_6.7347.72164
  %multiply.49.7 = fmul float %multiply.47.7, %subtract.48.7
  %add.54.i1053.7 = fadd float %add.54.i1054.6, %multiply.49.7
  %multiply.47357.7 = fmul float %Arg_7.8354.72149, %Arg_6.7356.72165
  %subtract.48361.7 = fsub float 1.000000e+00, %Arg_6.7356.72165
  %multiply.49362.7 = fmul float %multiply.47357.7, %subtract.48361.7
  %add.54.i1054.7 = fadd float %add.54.i1053.7, %multiply.49362.7
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1054.7, i32 16, i32 31)
  %add.54.i = fadd float %add.54.i1054.7, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i, i32 8, i32 31)
  %add.54.i1049 = fadd float %add.54.i, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1049, i32 4, i32 31)
  %add.54.i1050 = fadd float %add.54.i1049, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1050, i32 2, i32 31)
  %add.54.i1051 = fadd float %add.54.i1050, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1051, i32 1, i32 31)
  %47 = icmp eq i32 %.pre1301, 0
  %48 = lshr i32 %.pre1250, 5
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i64 0, i64 0, i64 0, i64 %49
  %add.54.i1052 = fadd float %add.54.i1051, %46
  br i1 %47, label %intra_warp_reduce_write-true414, label %intra_warp_reduce_write-after415

entry.reduce-group-4-true_crit_edge:              ; preds = %entry
  %.pre1302 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1304 = shl nuw nsw i32 %.pre1302, 1
  %.pre1306 = zext i32 %.pre1304 to i64
  %.pre1353 = and i32 %.pre1302, 31
  %Arg_9.10 = getelementptr float, ptr addrspace(1) %arg91528, i64 %.pre1306
  %51 = load <2 x float>, ptr addrspace(1) %Arg_9.10, align 8, !invariant.load !267
  %Arg_9.104652166 = extractelement <2 x float> %51, i32 0
  %Arg_9.104732167 = extractelement <2 x float> %51, i32 1
  %Arg_8.9 = getelementptr float, ptr addrspace(1) %arg81526, i64 %.pre1306
  %52 = load <2 x float>, ptr addrspace(1) %Arg_8.9, align 8, !invariant.load !267
  %Arg_8.94662182 = extractelement <2 x float> %52, i32 0
  %Arg_8.94752183 = extractelement <2 x float> %52, i32 1
  %multiply.56 = fmul float %Arg_9.104652166, %Arg_8.94662182
  %subtract.57 = fsub float 1.000000e+00, %Arg_8.94662182
  %multiply.58 = fmul float %multiply.56, %subtract.57
  %multiply.56476 = fmul float %Arg_9.104732167, %Arg_8.94752183
  %subtract.57480 = fsub float 1.000000e+00, %Arg_8.94752183
  %multiply.58481 = fmul float %multiply.56476, %subtract.57480
  %add.63.i1065 = fadd float %multiply.58, %multiply.58481
  %Arg_9.10.11683 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 1024
  %53 = load <2 x float>, ptr addrspace(1) %Arg_9.10.11683, align 8, !invariant.load !267
  %Arg_9.10465.12168 = extractelement <2 x float> %53, i32 0
  %Arg_9.10473.12169 = extractelement <2 x float> %53, i32 1
  %Arg_8.9.11685 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 1024
  %54 = load <2 x float>, ptr addrspace(1) %Arg_8.9.11685, align 8, !invariant.load !267
  %Arg_8.9466.12184 = extractelement <2 x float> %54, i32 0
  %Arg_8.9475.12185 = extractelement <2 x float> %54, i32 1
  %multiply.56.1 = fmul float %Arg_9.10465.12168, %Arg_8.9466.12184
  %subtract.57.1 = fsub float 1.000000e+00, %Arg_8.9466.12184
  %multiply.58.1 = fmul float %multiply.56.1, %subtract.57.1
  %add.63.i1064.1 = fadd float %add.63.i1065, %multiply.58.1
  %multiply.56476.1 = fmul float %Arg_9.10473.12169, %Arg_8.9475.12185
  %subtract.57480.1 = fsub float 1.000000e+00, %Arg_8.9475.12185
  %multiply.58481.1 = fmul float %multiply.56476.1, %subtract.57480.1
  %add.63.i1065.1 = fadd float %add.63.i1064.1, %multiply.58481.1
  %Arg_9.10.21691 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 2048
  %55 = load <2 x float>, ptr addrspace(1) %Arg_9.10.21691, align 8, !invariant.load !267
  %Arg_9.10465.22170 = extractelement <2 x float> %55, i32 0
  %Arg_9.10473.22171 = extractelement <2 x float> %55, i32 1
  %Arg_8.9.21693 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 2048
  %56 = load <2 x float>, ptr addrspace(1) %Arg_8.9.21693, align 8, !invariant.load !267
  %Arg_8.9466.22186 = extractelement <2 x float> %56, i32 0
  %Arg_8.9475.22187 = extractelement <2 x float> %56, i32 1
  %multiply.56.2 = fmul float %Arg_9.10465.22170, %Arg_8.9466.22186
  %subtract.57.2 = fsub float 1.000000e+00, %Arg_8.9466.22186
  %multiply.58.2 = fmul float %multiply.56.2, %subtract.57.2
  %add.63.i1064.2 = fadd float %add.63.i1065.1, %multiply.58.2
  %multiply.56476.2 = fmul float %Arg_9.10473.22171, %Arg_8.9475.22187
  %subtract.57480.2 = fsub float 1.000000e+00, %Arg_8.9475.22187
  %multiply.58481.2 = fmul float %multiply.56476.2, %subtract.57480.2
  %add.63.i1065.2 = fadd float %add.63.i1064.2, %multiply.58481.2
  %Arg_9.10.31699 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 3072
  %57 = load <2 x float>, ptr addrspace(1) %Arg_9.10.31699, align 8, !invariant.load !267
  %Arg_9.10465.32172 = extractelement <2 x float> %57, i32 0
  %Arg_9.10473.32173 = extractelement <2 x float> %57, i32 1
  %Arg_8.9.31701 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 3072
  %58 = load <2 x float>, ptr addrspace(1) %Arg_8.9.31701, align 8, !invariant.load !267
  %Arg_8.9466.32188 = extractelement <2 x float> %58, i32 0
  %Arg_8.9475.32189 = extractelement <2 x float> %58, i32 1
  %multiply.56.3 = fmul float %Arg_9.10465.32172, %Arg_8.9466.32188
  %subtract.57.3 = fsub float 1.000000e+00, %Arg_8.9466.32188
  %multiply.58.3 = fmul float %multiply.56.3, %subtract.57.3
  %add.63.i1064.3 = fadd float %add.63.i1065.2, %multiply.58.3
  %multiply.56476.3 = fmul float %Arg_9.10473.32173, %Arg_8.9475.32189
  %subtract.57480.3 = fsub float 1.000000e+00, %Arg_8.9475.32189
  %multiply.58481.3 = fmul float %multiply.56476.3, %subtract.57480.3
  %add.63.i1065.3 = fadd float %add.63.i1064.3, %multiply.58481.3
  %Arg_9.10.41707 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 4096
  %59 = load <2 x float>, ptr addrspace(1) %Arg_9.10.41707, align 8, !invariant.load !267
  %Arg_9.10465.42174 = extractelement <2 x float> %59, i32 0
  %Arg_9.10473.42175 = extractelement <2 x float> %59, i32 1
  %Arg_8.9.41709 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 4096
  %60 = load <2 x float>, ptr addrspace(1) %Arg_8.9.41709, align 8, !invariant.load !267
  %Arg_8.9466.42190 = extractelement <2 x float> %60, i32 0
  %Arg_8.9475.42191 = extractelement <2 x float> %60, i32 1
  %multiply.56.4 = fmul float %Arg_9.10465.42174, %Arg_8.9466.42190
  %subtract.57.4 = fsub float 1.000000e+00, %Arg_8.9466.42190
  %multiply.58.4 = fmul float %multiply.56.4, %subtract.57.4
  %add.63.i1064.4 = fadd float %add.63.i1065.3, %multiply.58.4
  %multiply.56476.4 = fmul float %Arg_9.10473.42175, %Arg_8.9475.42191
  %subtract.57480.4 = fsub float 1.000000e+00, %Arg_8.9475.42191
  %multiply.58481.4 = fmul float %multiply.56476.4, %subtract.57480.4
  %add.63.i1065.4 = fadd float %add.63.i1064.4, %multiply.58481.4
  %Arg_9.10.51715 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 5120
  %61 = load <2 x float>, ptr addrspace(1) %Arg_9.10.51715, align 8, !invariant.load !267
  %Arg_9.10465.52176 = extractelement <2 x float> %61, i32 0
  %Arg_9.10473.52177 = extractelement <2 x float> %61, i32 1
  %Arg_8.9.51717 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 5120
  %62 = load <2 x float>, ptr addrspace(1) %Arg_8.9.51717, align 8, !invariant.load !267
  %Arg_8.9466.52192 = extractelement <2 x float> %62, i32 0
  %Arg_8.9475.52193 = extractelement <2 x float> %62, i32 1
  %multiply.56.5 = fmul float %Arg_9.10465.52176, %Arg_8.9466.52192
  %subtract.57.5 = fsub float 1.000000e+00, %Arg_8.9466.52192
  %multiply.58.5 = fmul float %multiply.56.5, %subtract.57.5
  %add.63.i1064.5 = fadd float %add.63.i1065.4, %multiply.58.5
  %multiply.56476.5 = fmul float %Arg_9.10473.52177, %Arg_8.9475.52193
  %subtract.57480.5 = fsub float 1.000000e+00, %Arg_8.9475.52193
  %multiply.58481.5 = fmul float %multiply.56476.5, %subtract.57480.5
  %add.63.i1065.5 = fadd float %add.63.i1064.5, %multiply.58481.5
  %Arg_9.10.61723 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 6144
  %63 = load <2 x float>, ptr addrspace(1) %Arg_9.10.61723, align 8, !invariant.load !267
  %Arg_9.10465.62178 = extractelement <2 x float> %63, i32 0
  %Arg_9.10473.62179 = extractelement <2 x float> %63, i32 1
  %Arg_8.9.61725 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 6144
  %64 = load <2 x float>, ptr addrspace(1) %Arg_8.9.61725, align 8, !invariant.load !267
  %Arg_8.9466.62194 = extractelement <2 x float> %64, i32 0
  %Arg_8.9475.62195 = extractelement <2 x float> %64, i32 1
  %multiply.56.6 = fmul float %Arg_9.10465.62178, %Arg_8.9466.62194
  %subtract.57.6 = fsub float 1.000000e+00, %Arg_8.9466.62194
  %multiply.58.6 = fmul float %multiply.56.6, %subtract.57.6
  %add.63.i1064.6 = fadd float %add.63.i1065.5, %multiply.58.6
  %multiply.56476.6 = fmul float %Arg_9.10473.62179, %Arg_8.9475.62195
  %subtract.57480.6 = fsub float 1.000000e+00, %Arg_8.9475.62195
  %multiply.58481.6 = fmul float %multiply.56476.6, %subtract.57480.6
  %add.63.i1065.6 = fadd float %add.63.i1064.6, %multiply.58481.6
  %Arg_9.10.71731 = getelementptr inbounds float, ptr addrspace(1) %Arg_9.10, i64 7168
  %65 = load <2 x float>, ptr addrspace(1) %Arg_9.10.71731, align 8, !invariant.load !267
  %Arg_9.10465.72180 = extractelement <2 x float> %65, i32 0
  %Arg_9.10473.72181 = extractelement <2 x float> %65, i32 1
  %Arg_8.9.71733 = getelementptr inbounds float, ptr addrspace(1) %Arg_8.9, i64 7168
  %66 = load <2 x float>, ptr addrspace(1) %Arg_8.9.71733, align 8, !invariant.load !267
  %Arg_8.9466.72196 = extractelement <2 x float> %66, i32 0
  %Arg_8.9475.72197 = extractelement <2 x float> %66, i32 1
  %multiply.56.7 = fmul float %Arg_9.10465.72180, %Arg_8.9466.72196
  %subtract.57.7 = fsub float 1.000000e+00, %Arg_8.9466.72196
  %multiply.58.7 = fmul float %multiply.56.7, %subtract.57.7
  %add.63.i1064.7 = fadd float %add.63.i1065.6, %multiply.58.7
  %multiply.56476.7 = fmul float %Arg_9.10473.72181, %Arg_8.9475.72197
  %subtract.57480.7 = fsub float 1.000000e+00, %Arg_8.9475.72197
  %multiply.58481.7 = fmul float %multiply.56476.7, %subtract.57480.7
  %add.63.i1065.7 = fadd float %add.63.i1064.7, %multiply.58481.7
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1065.7, i32 16, i32 31)
  %add.63.i = fadd float %add.63.i1065.7, %67
  %68 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i, i32 8, i32 31)
  %add.63.i1060 = fadd float %add.63.i, %68
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1060, i32 4, i32 31)
  %add.63.i1061 = fadd float %add.63.i1060, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1061, i32 2, i32 31)
  %add.63.i1062 = fadd float %add.63.i1061, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1062, i32 1, i32 31)
  %72 = icmp eq i32 %.pre1353, 0
  %73 = lshr i32 %.pre1302, 5
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i64 0, i64 0, i64 0, i64 %74
  %add.63.i1063 = fadd float %add.63.i1062, %71
  br i1 %72, label %intra_warp_reduce_write-true533, label %intra_warp_reduce_write-after534

entry.reduce-group-5-true_crit_edge:              ; preds = %entry
  %.pre1354 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1356 = shl nuw nsw i32 %.pre1354, 1
  %.pre1358 = zext i32 %.pre1356 to i64
  %.pre1405 = and i32 %.pre1354, 31
  %Arg_11.12 = getelementptr float, ptr addrspace(1) %arg111532, i64 %.pre1358
  %76 = load <2 x float>, ptr addrspace(1) %Arg_11.12, align 8, !invariant.load !267
  %Arg_11.125842198 = extractelement <2 x float> %76, i32 0
  %Arg_11.125922199 = extractelement <2 x float> %76, i32 1
  %Arg_10.11 = getelementptr float, ptr addrspace(1) %arg101530, i64 %.pre1358
  %77 = load <2 x float>, ptr addrspace(1) %Arg_10.11, align 8, !invariant.load !267
  %Arg_10.115852214 = extractelement <2 x float> %77, i32 0
  %Arg_10.115942215 = extractelement <2 x float> %77, i32 1
  %multiply.65 = fmul float %Arg_11.125842198, %Arg_10.115852214
  %subtract.66 = fsub float 1.000000e+00, %Arg_10.115852214
  %multiply.67 = fmul float %multiply.65, %subtract.66
  %multiply.65595 = fmul float %Arg_11.125922199, %Arg_10.115942215
  %subtract.66599 = fsub float 1.000000e+00, %Arg_10.115942215
  %multiply.67600 = fmul float %multiply.65595, %subtract.66599
  %add.72.i1076 = fadd float %multiply.67, %multiply.67600
  %Arg_11.12.11743 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 1024
  %78 = load <2 x float>, ptr addrspace(1) %Arg_11.12.11743, align 8, !invariant.load !267
  %Arg_11.12584.12200 = extractelement <2 x float> %78, i32 0
  %Arg_11.12592.12201 = extractelement <2 x float> %78, i32 1
  %Arg_10.11.11745 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 1024
  %79 = load <2 x float>, ptr addrspace(1) %Arg_10.11.11745, align 8, !invariant.load !267
  %Arg_10.11585.12216 = extractelement <2 x float> %79, i32 0
  %Arg_10.11594.12217 = extractelement <2 x float> %79, i32 1
  %multiply.65.1 = fmul float %Arg_11.12584.12200, %Arg_10.11585.12216
  %subtract.66.1 = fsub float 1.000000e+00, %Arg_10.11585.12216
  %multiply.67.1 = fmul float %multiply.65.1, %subtract.66.1
  %add.72.i1075.1 = fadd float %add.72.i1076, %multiply.67.1
  %multiply.65595.1 = fmul float %Arg_11.12592.12201, %Arg_10.11594.12217
  %subtract.66599.1 = fsub float 1.000000e+00, %Arg_10.11594.12217
  %multiply.67600.1 = fmul float %multiply.65595.1, %subtract.66599.1
  %add.72.i1076.1 = fadd float %add.72.i1075.1, %multiply.67600.1
  %Arg_11.12.21751 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 2048
  %80 = load <2 x float>, ptr addrspace(1) %Arg_11.12.21751, align 8, !invariant.load !267
  %Arg_11.12584.22202 = extractelement <2 x float> %80, i32 0
  %Arg_11.12592.22203 = extractelement <2 x float> %80, i32 1
  %Arg_10.11.21753 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 2048
  %81 = load <2 x float>, ptr addrspace(1) %Arg_10.11.21753, align 8, !invariant.load !267
  %Arg_10.11585.22218 = extractelement <2 x float> %81, i32 0
  %Arg_10.11594.22219 = extractelement <2 x float> %81, i32 1
  %multiply.65.2 = fmul float %Arg_11.12584.22202, %Arg_10.11585.22218
  %subtract.66.2 = fsub float 1.000000e+00, %Arg_10.11585.22218
  %multiply.67.2 = fmul float %multiply.65.2, %subtract.66.2
  %add.72.i1075.2 = fadd float %add.72.i1076.1, %multiply.67.2
  %multiply.65595.2 = fmul float %Arg_11.12592.22203, %Arg_10.11594.22219
  %subtract.66599.2 = fsub float 1.000000e+00, %Arg_10.11594.22219
  %multiply.67600.2 = fmul float %multiply.65595.2, %subtract.66599.2
  %add.72.i1076.2 = fadd float %add.72.i1075.2, %multiply.67600.2
  %Arg_11.12.31759 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 3072
  %82 = load <2 x float>, ptr addrspace(1) %Arg_11.12.31759, align 8, !invariant.load !267
  %Arg_11.12584.32204 = extractelement <2 x float> %82, i32 0
  %Arg_11.12592.32205 = extractelement <2 x float> %82, i32 1
  %Arg_10.11.31761 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 3072
  %83 = load <2 x float>, ptr addrspace(1) %Arg_10.11.31761, align 8, !invariant.load !267
  %Arg_10.11585.32220 = extractelement <2 x float> %83, i32 0
  %Arg_10.11594.32221 = extractelement <2 x float> %83, i32 1
  %multiply.65.3 = fmul float %Arg_11.12584.32204, %Arg_10.11585.32220
  %subtract.66.3 = fsub float 1.000000e+00, %Arg_10.11585.32220
  %multiply.67.3 = fmul float %multiply.65.3, %subtract.66.3
  %add.72.i1075.3 = fadd float %add.72.i1076.2, %multiply.67.3
  %multiply.65595.3 = fmul float %Arg_11.12592.32205, %Arg_10.11594.32221
  %subtract.66599.3 = fsub float 1.000000e+00, %Arg_10.11594.32221
  %multiply.67600.3 = fmul float %multiply.65595.3, %subtract.66599.3
  %add.72.i1076.3 = fadd float %add.72.i1075.3, %multiply.67600.3
  %Arg_11.12.41767 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 4096
  %84 = load <2 x float>, ptr addrspace(1) %Arg_11.12.41767, align 8, !invariant.load !267
  %Arg_11.12584.42206 = extractelement <2 x float> %84, i32 0
  %Arg_11.12592.42207 = extractelement <2 x float> %84, i32 1
  %Arg_10.11.41769 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 4096
  %85 = load <2 x float>, ptr addrspace(1) %Arg_10.11.41769, align 8, !invariant.load !267
  %Arg_10.11585.42222 = extractelement <2 x float> %85, i32 0
  %Arg_10.11594.42223 = extractelement <2 x float> %85, i32 1
  %multiply.65.4 = fmul float %Arg_11.12584.42206, %Arg_10.11585.42222
  %subtract.66.4 = fsub float 1.000000e+00, %Arg_10.11585.42222
  %multiply.67.4 = fmul float %multiply.65.4, %subtract.66.4
  %add.72.i1075.4 = fadd float %add.72.i1076.3, %multiply.67.4
  %multiply.65595.4 = fmul float %Arg_11.12592.42207, %Arg_10.11594.42223
  %subtract.66599.4 = fsub float 1.000000e+00, %Arg_10.11594.42223
  %multiply.67600.4 = fmul float %multiply.65595.4, %subtract.66599.4
  %add.72.i1076.4 = fadd float %add.72.i1075.4, %multiply.67600.4
  %Arg_11.12.51775 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 5120
  %86 = load <2 x float>, ptr addrspace(1) %Arg_11.12.51775, align 8, !invariant.load !267
  %Arg_11.12584.52208 = extractelement <2 x float> %86, i32 0
  %Arg_11.12592.52209 = extractelement <2 x float> %86, i32 1
  %Arg_10.11.51777 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 5120
  %87 = load <2 x float>, ptr addrspace(1) %Arg_10.11.51777, align 8, !invariant.load !267
  %Arg_10.11585.52224 = extractelement <2 x float> %87, i32 0
  %Arg_10.11594.52225 = extractelement <2 x float> %87, i32 1
  %multiply.65.5 = fmul float %Arg_11.12584.52208, %Arg_10.11585.52224
  %subtract.66.5 = fsub float 1.000000e+00, %Arg_10.11585.52224
  %multiply.67.5 = fmul float %multiply.65.5, %subtract.66.5
  %add.72.i1075.5 = fadd float %add.72.i1076.4, %multiply.67.5
  %multiply.65595.5 = fmul float %Arg_11.12592.52209, %Arg_10.11594.52225
  %subtract.66599.5 = fsub float 1.000000e+00, %Arg_10.11594.52225
  %multiply.67600.5 = fmul float %multiply.65595.5, %subtract.66599.5
  %add.72.i1076.5 = fadd float %add.72.i1075.5, %multiply.67600.5
  %Arg_11.12.61783 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 6144
  %88 = load <2 x float>, ptr addrspace(1) %Arg_11.12.61783, align 8, !invariant.load !267
  %Arg_11.12584.62210 = extractelement <2 x float> %88, i32 0
  %Arg_11.12592.62211 = extractelement <2 x float> %88, i32 1
  %Arg_10.11.61785 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 6144
  %89 = load <2 x float>, ptr addrspace(1) %Arg_10.11.61785, align 8, !invariant.load !267
  %Arg_10.11585.62226 = extractelement <2 x float> %89, i32 0
  %Arg_10.11594.62227 = extractelement <2 x float> %89, i32 1
  %multiply.65.6 = fmul float %Arg_11.12584.62210, %Arg_10.11585.62226
  %subtract.66.6 = fsub float 1.000000e+00, %Arg_10.11585.62226
  %multiply.67.6 = fmul float %multiply.65.6, %subtract.66.6
  %add.72.i1075.6 = fadd float %add.72.i1076.5, %multiply.67.6
  %multiply.65595.6 = fmul float %Arg_11.12592.62211, %Arg_10.11594.62227
  %subtract.66599.6 = fsub float 1.000000e+00, %Arg_10.11594.62227
  %multiply.67600.6 = fmul float %multiply.65595.6, %subtract.66599.6
  %add.72.i1076.6 = fadd float %add.72.i1075.6, %multiply.67600.6
  %Arg_11.12.71791 = getelementptr inbounds float, ptr addrspace(1) %Arg_11.12, i64 7168
  %90 = load <2 x float>, ptr addrspace(1) %Arg_11.12.71791, align 8, !invariant.load !267
  %Arg_11.12584.72212 = extractelement <2 x float> %90, i32 0
  %Arg_11.12592.72213 = extractelement <2 x float> %90, i32 1
  %Arg_10.11.71793 = getelementptr inbounds float, ptr addrspace(1) %Arg_10.11, i64 7168
  %91 = load <2 x float>, ptr addrspace(1) %Arg_10.11.71793, align 8, !invariant.load !267
  %Arg_10.11585.72228 = extractelement <2 x float> %91, i32 0
  %Arg_10.11594.72229 = extractelement <2 x float> %91, i32 1
  %multiply.65.7 = fmul float %Arg_11.12584.72212, %Arg_10.11585.72228
  %subtract.66.7 = fsub float 1.000000e+00, %Arg_10.11585.72228
  %multiply.67.7 = fmul float %multiply.65.7, %subtract.66.7
  %add.72.i1075.7 = fadd float %add.72.i1076.6, %multiply.67.7
  %multiply.65595.7 = fmul float %Arg_11.12592.72213, %Arg_10.11594.72229
  %subtract.66599.7 = fsub float 1.000000e+00, %Arg_10.11594.72229
  %multiply.67600.7 = fmul float %multiply.65595.7, %subtract.66599.7
  %add.72.i1076.7 = fadd float %add.72.i1075.7, %multiply.67600.7
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1076.7, i32 16, i32 31)
  %add.72.i = fadd float %add.72.i1076.7, %92
  %93 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i, i32 8, i32 31)
  %add.72.i1071 = fadd float %add.72.i, %93
  %94 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1071, i32 4, i32 31)
  %add.72.i1072 = fadd float %add.72.i1071, %94
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1072, i32 2, i32 31)
  %add.72.i1073 = fadd float %add.72.i1072, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1073, i32 1, i32 31)
  %97 = icmp eq i32 %.pre1405, 0
  %98 = lshr i32 %.pre1354, 5
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i64 0, i64 0, i64 0, i64 %99
  %add.72.i1074 = fadd float %add.72.i1073, %96
  br i1 %97, label %intra_warp_reduce_write-true652, label %intra_warp_reduce_write-after653

entry.reduce-group-6-true_crit_edge:              ; preds = %entry
  %.pre1406 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1408 = shl nuw nsw i32 %.pre1406, 1
  %.pre1410 = zext i32 %.pre1408 to i64
  %.pre1457 = and i32 %.pre1406, 31
  %Arg_13.14 = getelementptr float, ptr addrspace(1) %arg131536, i64 %.pre1410
  %101 = load <2 x float>, ptr addrspace(1) %Arg_13.14, align 8, !invariant.load !267
  %Arg_13.147032230 = extractelement <2 x float> %101, i32 0
  %Arg_13.147112231 = extractelement <2 x float> %101, i32 1
  %Arg_12.13 = getelementptr float, ptr addrspace(1) %arg121534, i64 %.pre1410
  %102 = load <2 x float>, ptr addrspace(1) %Arg_12.13, align 8, !invariant.load !267
  %Arg_12.137042246 = extractelement <2 x float> %102, i32 0
  %Arg_12.137132247 = extractelement <2 x float> %102, i32 1
  %multiply.74 = fmul float %Arg_13.147032230, %Arg_12.137042246
  %subtract.75 = fsub float 1.000000e+00, %Arg_12.137042246
  %multiply.76 = fmul float %multiply.74, %subtract.75
  %multiply.74714 = fmul float %Arg_13.147112231, %Arg_12.137132247
  %subtract.75718 = fsub float 1.000000e+00, %Arg_12.137132247
  %multiply.76719 = fmul float %multiply.74714, %subtract.75718
  %add.81.i1087 = fadd float %multiply.76, %multiply.76719
  %Arg_13.14.11803 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 1024
  %103 = load <2 x float>, ptr addrspace(1) %Arg_13.14.11803, align 8, !invariant.load !267
  %Arg_13.14703.12232 = extractelement <2 x float> %103, i32 0
  %Arg_13.14711.12233 = extractelement <2 x float> %103, i32 1
  %Arg_12.13.11805 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 1024
  %104 = load <2 x float>, ptr addrspace(1) %Arg_12.13.11805, align 8, !invariant.load !267
  %Arg_12.13704.12248 = extractelement <2 x float> %104, i32 0
  %Arg_12.13713.12249 = extractelement <2 x float> %104, i32 1
  %multiply.74.1 = fmul float %Arg_13.14703.12232, %Arg_12.13704.12248
  %subtract.75.1 = fsub float 1.000000e+00, %Arg_12.13704.12248
  %multiply.76.1 = fmul float %multiply.74.1, %subtract.75.1
  %add.81.i1086.1 = fadd float %add.81.i1087, %multiply.76.1
  %multiply.74714.1 = fmul float %Arg_13.14711.12233, %Arg_12.13713.12249
  %subtract.75718.1 = fsub float 1.000000e+00, %Arg_12.13713.12249
  %multiply.76719.1 = fmul float %multiply.74714.1, %subtract.75718.1
  %add.81.i1087.1 = fadd float %add.81.i1086.1, %multiply.76719.1
  %Arg_13.14.21811 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 2048
  %105 = load <2 x float>, ptr addrspace(1) %Arg_13.14.21811, align 8, !invariant.load !267
  %Arg_13.14703.22234 = extractelement <2 x float> %105, i32 0
  %Arg_13.14711.22235 = extractelement <2 x float> %105, i32 1
  %Arg_12.13.21813 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 2048
  %106 = load <2 x float>, ptr addrspace(1) %Arg_12.13.21813, align 8, !invariant.load !267
  %Arg_12.13704.22250 = extractelement <2 x float> %106, i32 0
  %Arg_12.13713.22251 = extractelement <2 x float> %106, i32 1
  %multiply.74.2 = fmul float %Arg_13.14703.22234, %Arg_12.13704.22250
  %subtract.75.2 = fsub float 1.000000e+00, %Arg_12.13704.22250
  %multiply.76.2 = fmul float %multiply.74.2, %subtract.75.2
  %add.81.i1086.2 = fadd float %add.81.i1087.1, %multiply.76.2
  %multiply.74714.2 = fmul float %Arg_13.14711.22235, %Arg_12.13713.22251
  %subtract.75718.2 = fsub float 1.000000e+00, %Arg_12.13713.22251
  %multiply.76719.2 = fmul float %multiply.74714.2, %subtract.75718.2
  %add.81.i1087.2 = fadd float %add.81.i1086.2, %multiply.76719.2
  %Arg_13.14.31819 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 3072
  %107 = load <2 x float>, ptr addrspace(1) %Arg_13.14.31819, align 8, !invariant.load !267
  %Arg_13.14703.32236 = extractelement <2 x float> %107, i32 0
  %Arg_13.14711.32237 = extractelement <2 x float> %107, i32 1
  %Arg_12.13.31821 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 3072
  %108 = load <2 x float>, ptr addrspace(1) %Arg_12.13.31821, align 8, !invariant.load !267
  %Arg_12.13704.32252 = extractelement <2 x float> %108, i32 0
  %Arg_12.13713.32253 = extractelement <2 x float> %108, i32 1
  %multiply.74.3 = fmul float %Arg_13.14703.32236, %Arg_12.13704.32252
  %subtract.75.3 = fsub float 1.000000e+00, %Arg_12.13704.32252
  %multiply.76.3 = fmul float %multiply.74.3, %subtract.75.3
  %add.81.i1086.3 = fadd float %add.81.i1087.2, %multiply.76.3
  %multiply.74714.3 = fmul float %Arg_13.14711.32237, %Arg_12.13713.32253
  %subtract.75718.3 = fsub float 1.000000e+00, %Arg_12.13713.32253
  %multiply.76719.3 = fmul float %multiply.74714.3, %subtract.75718.3
  %add.81.i1087.3 = fadd float %add.81.i1086.3, %multiply.76719.3
  %Arg_13.14.41827 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 4096
  %109 = load <2 x float>, ptr addrspace(1) %Arg_13.14.41827, align 8, !invariant.load !267
  %Arg_13.14703.42238 = extractelement <2 x float> %109, i32 0
  %Arg_13.14711.42239 = extractelement <2 x float> %109, i32 1
  %Arg_12.13.41829 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 4096
  %110 = load <2 x float>, ptr addrspace(1) %Arg_12.13.41829, align 8, !invariant.load !267
  %Arg_12.13704.42254 = extractelement <2 x float> %110, i32 0
  %Arg_12.13713.42255 = extractelement <2 x float> %110, i32 1
  %multiply.74.4 = fmul float %Arg_13.14703.42238, %Arg_12.13704.42254
  %subtract.75.4 = fsub float 1.000000e+00, %Arg_12.13704.42254
  %multiply.76.4 = fmul float %multiply.74.4, %subtract.75.4
  %add.81.i1086.4 = fadd float %add.81.i1087.3, %multiply.76.4
  %multiply.74714.4 = fmul float %Arg_13.14711.42239, %Arg_12.13713.42255
  %subtract.75718.4 = fsub float 1.000000e+00, %Arg_12.13713.42255
  %multiply.76719.4 = fmul float %multiply.74714.4, %subtract.75718.4
  %add.81.i1087.4 = fadd float %add.81.i1086.4, %multiply.76719.4
  %Arg_13.14.51835 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 5120
  %111 = load <2 x float>, ptr addrspace(1) %Arg_13.14.51835, align 8, !invariant.load !267
  %Arg_13.14703.52240 = extractelement <2 x float> %111, i32 0
  %Arg_13.14711.52241 = extractelement <2 x float> %111, i32 1
  %Arg_12.13.51837 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 5120
  %112 = load <2 x float>, ptr addrspace(1) %Arg_12.13.51837, align 8, !invariant.load !267
  %Arg_12.13704.52256 = extractelement <2 x float> %112, i32 0
  %Arg_12.13713.52257 = extractelement <2 x float> %112, i32 1
  %multiply.74.5 = fmul float %Arg_13.14703.52240, %Arg_12.13704.52256
  %subtract.75.5 = fsub float 1.000000e+00, %Arg_12.13704.52256
  %multiply.76.5 = fmul float %multiply.74.5, %subtract.75.5
  %add.81.i1086.5 = fadd float %add.81.i1087.4, %multiply.76.5
  %multiply.74714.5 = fmul float %Arg_13.14711.52241, %Arg_12.13713.52257
  %subtract.75718.5 = fsub float 1.000000e+00, %Arg_12.13713.52257
  %multiply.76719.5 = fmul float %multiply.74714.5, %subtract.75718.5
  %add.81.i1087.5 = fadd float %add.81.i1086.5, %multiply.76719.5
  %Arg_13.14.61843 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 6144
  %113 = load <2 x float>, ptr addrspace(1) %Arg_13.14.61843, align 8, !invariant.load !267
  %Arg_13.14703.62242 = extractelement <2 x float> %113, i32 0
  %Arg_13.14711.62243 = extractelement <2 x float> %113, i32 1
  %Arg_12.13.61845 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 6144
  %114 = load <2 x float>, ptr addrspace(1) %Arg_12.13.61845, align 8, !invariant.load !267
  %Arg_12.13704.62258 = extractelement <2 x float> %114, i32 0
  %Arg_12.13713.62259 = extractelement <2 x float> %114, i32 1
  %multiply.74.6 = fmul float %Arg_13.14703.62242, %Arg_12.13704.62258
  %subtract.75.6 = fsub float 1.000000e+00, %Arg_12.13704.62258
  %multiply.76.6 = fmul float %multiply.74.6, %subtract.75.6
  %add.81.i1086.6 = fadd float %add.81.i1087.5, %multiply.76.6
  %multiply.74714.6 = fmul float %Arg_13.14711.62243, %Arg_12.13713.62259
  %subtract.75718.6 = fsub float 1.000000e+00, %Arg_12.13713.62259
  %multiply.76719.6 = fmul float %multiply.74714.6, %subtract.75718.6
  %add.81.i1087.6 = fadd float %add.81.i1086.6, %multiply.76719.6
  %Arg_13.14.71851 = getelementptr inbounds float, ptr addrspace(1) %Arg_13.14, i64 7168
  %115 = load <2 x float>, ptr addrspace(1) %Arg_13.14.71851, align 8, !invariant.load !267
  %Arg_13.14703.72244 = extractelement <2 x float> %115, i32 0
  %Arg_13.14711.72245 = extractelement <2 x float> %115, i32 1
  %Arg_12.13.71853 = getelementptr inbounds float, ptr addrspace(1) %Arg_12.13, i64 7168
  %116 = load <2 x float>, ptr addrspace(1) %Arg_12.13.71853, align 8, !invariant.load !267
  %Arg_12.13704.72260 = extractelement <2 x float> %116, i32 0
  %Arg_12.13713.72261 = extractelement <2 x float> %116, i32 1
  %multiply.74.7 = fmul float %Arg_13.14703.72244, %Arg_12.13704.72260
  %subtract.75.7 = fsub float 1.000000e+00, %Arg_12.13704.72260
  %multiply.76.7 = fmul float %multiply.74.7, %subtract.75.7
  %add.81.i1086.7 = fadd float %add.81.i1087.6, %multiply.76.7
  %multiply.74714.7 = fmul float %Arg_13.14711.72245, %Arg_12.13713.72261
  %subtract.75718.7 = fsub float 1.000000e+00, %Arg_12.13713.72261
  %multiply.76719.7 = fmul float %multiply.74714.7, %subtract.75718.7
  %add.81.i1087.7 = fadd float %add.81.i1086.7, %multiply.76719.7
  %117 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1087.7, i32 16, i32 31)
  %add.81.i = fadd float %add.81.i1087.7, %117
  %118 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i, i32 8, i32 31)
  %add.81.i1082 = fadd float %add.81.i, %118
  %119 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1082, i32 4, i32 31)
  %add.81.i1083 = fadd float %add.81.i1082, %119
  %120 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1083, i32 2, i32 31)
  %add.81.i1084 = fadd float %add.81.i1083, %120
  %121 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1084, i32 1, i32 31)
  %122 = icmp eq i32 %.pre1457, 0
  %123 = lshr i32 %.pre1406, 5
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i64 0, i64 0, i64 0, i64 %124
  %add.81.i1085 = fadd float %add.81.i1084, %121
  br i1 %122, label %intra_warp_reduce_write-true771, label %intra_warp_reduce_write-after772

entry.reduce-group-7-true_crit_edge:              ; preds = %entry
  %.pre1458 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %.pre1460 = shl nuw nsw i32 %.pre1458, 1
  %.pre1462 = zext i32 %.pre1460 to i64
  %.pre1509 = and i32 %.pre1458, 31
  %Arg_15.16 = getelementptr float, ptr addrspace(1) %arg151540, i64 %.pre1462
  %126 = load <2 x float>, ptr addrspace(1) %Arg_15.16, align 8, !invariant.load !267
  %Arg_15.168222262 = extractelement <2 x float> %126, i32 0
  %Arg_15.168302263 = extractelement <2 x float> %126, i32 1
  %Arg_14.15 = getelementptr float, ptr addrspace(1) %arg141538, i64 %.pre1462
  %127 = load <2 x float>, ptr addrspace(1) %Arg_14.15, align 8, !invariant.load !267
  %Arg_14.158232278 = extractelement <2 x float> %127, i32 0
  %Arg_14.158322279 = extractelement <2 x float> %127, i32 1
  %multiply.83 = fmul float %Arg_15.168222262, %Arg_14.158232278
  %subtract.84 = fsub float 1.000000e+00, %Arg_14.158232278
  %multiply.85 = fmul float %multiply.83, %subtract.84
  %multiply.83833 = fmul float %Arg_15.168302263, %Arg_14.158322279
  %subtract.84837 = fsub float 1.000000e+00, %Arg_14.158322279
  %multiply.85838 = fmul float %multiply.83833, %subtract.84837
  %add.90.i1098 = fadd float %multiply.85, %multiply.85838
  %Arg_15.16.11863 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 1024
  %128 = load <2 x float>, ptr addrspace(1) %Arg_15.16.11863, align 8, !invariant.load !267
  %Arg_15.16822.12264 = extractelement <2 x float> %128, i32 0
  %Arg_15.16830.12265 = extractelement <2 x float> %128, i32 1
  %Arg_14.15.11865 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 1024
  %129 = load <2 x float>, ptr addrspace(1) %Arg_14.15.11865, align 8, !invariant.load !267
  %Arg_14.15823.12280 = extractelement <2 x float> %129, i32 0
  %Arg_14.15832.12281 = extractelement <2 x float> %129, i32 1
  %multiply.83.1 = fmul float %Arg_15.16822.12264, %Arg_14.15823.12280
  %subtract.84.1 = fsub float 1.000000e+00, %Arg_14.15823.12280
  %multiply.85.1 = fmul float %multiply.83.1, %subtract.84.1
  %add.90.i1097.1 = fadd float %add.90.i1098, %multiply.85.1
  %multiply.83833.1 = fmul float %Arg_15.16830.12265, %Arg_14.15832.12281
  %subtract.84837.1 = fsub float 1.000000e+00, %Arg_14.15832.12281
  %multiply.85838.1 = fmul float %multiply.83833.1, %subtract.84837.1
  %add.90.i1098.1 = fadd float %add.90.i1097.1, %multiply.85838.1
  %Arg_15.16.21871 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 2048
  %130 = load <2 x float>, ptr addrspace(1) %Arg_15.16.21871, align 8, !invariant.load !267
  %Arg_15.16822.22266 = extractelement <2 x float> %130, i32 0
  %Arg_15.16830.22267 = extractelement <2 x float> %130, i32 1
  %Arg_14.15.21873 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 2048
  %131 = load <2 x float>, ptr addrspace(1) %Arg_14.15.21873, align 8, !invariant.load !267
  %Arg_14.15823.22282 = extractelement <2 x float> %131, i32 0
  %Arg_14.15832.22283 = extractelement <2 x float> %131, i32 1
  %multiply.83.2 = fmul float %Arg_15.16822.22266, %Arg_14.15823.22282
  %subtract.84.2 = fsub float 1.000000e+00, %Arg_14.15823.22282
  %multiply.85.2 = fmul float %multiply.83.2, %subtract.84.2
  %add.90.i1097.2 = fadd float %add.90.i1098.1, %multiply.85.2
  %multiply.83833.2 = fmul float %Arg_15.16830.22267, %Arg_14.15832.22283
  %subtract.84837.2 = fsub float 1.000000e+00, %Arg_14.15832.22283
  %multiply.85838.2 = fmul float %multiply.83833.2, %subtract.84837.2
  %add.90.i1098.2 = fadd float %add.90.i1097.2, %multiply.85838.2
  %Arg_15.16.31879 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 3072
  %132 = load <2 x float>, ptr addrspace(1) %Arg_15.16.31879, align 8, !invariant.load !267
  %Arg_15.16822.32268 = extractelement <2 x float> %132, i32 0
  %Arg_15.16830.32269 = extractelement <2 x float> %132, i32 1
  %Arg_14.15.31881 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 3072
  %133 = load <2 x float>, ptr addrspace(1) %Arg_14.15.31881, align 8, !invariant.load !267
  %Arg_14.15823.32284 = extractelement <2 x float> %133, i32 0
  %Arg_14.15832.32285 = extractelement <2 x float> %133, i32 1
  %multiply.83.3 = fmul float %Arg_15.16822.32268, %Arg_14.15823.32284
  %subtract.84.3 = fsub float 1.000000e+00, %Arg_14.15823.32284
  %multiply.85.3 = fmul float %multiply.83.3, %subtract.84.3
  %add.90.i1097.3 = fadd float %add.90.i1098.2, %multiply.85.3
  %multiply.83833.3 = fmul float %Arg_15.16830.32269, %Arg_14.15832.32285
  %subtract.84837.3 = fsub float 1.000000e+00, %Arg_14.15832.32285
  %multiply.85838.3 = fmul float %multiply.83833.3, %subtract.84837.3
  %add.90.i1098.3 = fadd float %add.90.i1097.3, %multiply.85838.3
  %Arg_15.16.41887 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 4096
  %134 = load <2 x float>, ptr addrspace(1) %Arg_15.16.41887, align 8, !invariant.load !267
  %Arg_15.16822.42270 = extractelement <2 x float> %134, i32 0
  %Arg_15.16830.42271 = extractelement <2 x float> %134, i32 1
  %Arg_14.15.41889 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 4096
  %135 = load <2 x float>, ptr addrspace(1) %Arg_14.15.41889, align 8, !invariant.load !267
  %Arg_14.15823.42286 = extractelement <2 x float> %135, i32 0
  %Arg_14.15832.42287 = extractelement <2 x float> %135, i32 1
  %multiply.83.4 = fmul float %Arg_15.16822.42270, %Arg_14.15823.42286
  %subtract.84.4 = fsub float 1.000000e+00, %Arg_14.15823.42286
  %multiply.85.4 = fmul float %multiply.83.4, %subtract.84.4
  %add.90.i1097.4 = fadd float %add.90.i1098.3, %multiply.85.4
  %multiply.83833.4 = fmul float %Arg_15.16830.42271, %Arg_14.15832.42287
  %subtract.84837.4 = fsub float 1.000000e+00, %Arg_14.15832.42287
  %multiply.85838.4 = fmul float %multiply.83833.4, %subtract.84837.4
  %add.90.i1098.4 = fadd float %add.90.i1097.4, %multiply.85838.4
  %Arg_15.16.51895 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 5120
  %136 = load <2 x float>, ptr addrspace(1) %Arg_15.16.51895, align 8, !invariant.load !267
  %Arg_15.16822.52272 = extractelement <2 x float> %136, i32 0
  %Arg_15.16830.52273 = extractelement <2 x float> %136, i32 1
  %Arg_14.15.51897 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 5120
  %137 = load <2 x float>, ptr addrspace(1) %Arg_14.15.51897, align 8, !invariant.load !267
  %Arg_14.15823.52288 = extractelement <2 x float> %137, i32 0
  %Arg_14.15832.52289 = extractelement <2 x float> %137, i32 1
  %multiply.83.5 = fmul float %Arg_15.16822.52272, %Arg_14.15823.52288
  %subtract.84.5 = fsub float 1.000000e+00, %Arg_14.15823.52288
  %multiply.85.5 = fmul float %multiply.83.5, %subtract.84.5
  %add.90.i1097.5 = fadd float %add.90.i1098.4, %multiply.85.5
  %multiply.83833.5 = fmul float %Arg_15.16830.52273, %Arg_14.15832.52289
  %subtract.84837.5 = fsub float 1.000000e+00, %Arg_14.15832.52289
  %multiply.85838.5 = fmul float %multiply.83833.5, %subtract.84837.5
  %add.90.i1098.5 = fadd float %add.90.i1097.5, %multiply.85838.5
  %Arg_15.16.61903 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 6144
  %138 = load <2 x float>, ptr addrspace(1) %Arg_15.16.61903, align 8, !invariant.load !267
  %Arg_15.16822.62274 = extractelement <2 x float> %138, i32 0
  %Arg_15.16830.62275 = extractelement <2 x float> %138, i32 1
  %Arg_14.15.61905 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 6144
  %139 = load <2 x float>, ptr addrspace(1) %Arg_14.15.61905, align 8, !invariant.load !267
  %Arg_14.15823.62290 = extractelement <2 x float> %139, i32 0
  %Arg_14.15832.62291 = extractelement <2 x float> %139, i32 1
  %multiply.83.6 = fmul float %Arg_15.16822.62274, %Arg_14.15823.62290
  %subtract.84.6 = fsub float 1.000000e+00, %Arg_14.15823.62290
  %multiply.85.6 = fmul float %multiply.83.6, %subtract.84.6
  %add.90.i1097.6 = fadd float %add.90.i1098.5, %multiply.85.6
  %multiply.83833.6 = fmul float %Arg_15.16830.62275, %Arg_14.15832.62291
  %subtract.84837.6 = fsub float 1.000000e+00, %Arg_14.15832.62291
  %multiply.85838.6 = fmul float %multiply.83833.6, %subtract.84837.6
  %add.90.i1098.6 = fadd float %add.90.i1097.6, %multiply.85838.6
  %Arg_15.16.71911 = getelementptr inbounds float, ptr addrspace(1) %Arg_15.16, i64 7168
  %140 = load <2 x float>, ptr addrspace(1) %Arg_15.16.71911, align 8, !invariant.load !267
  %Arg_15.16822.72276 = extractelement <2 x float> %140, i32 0
  %Arg_15.16830.72277 = extractelement <2 x float> %140, i32 1
  %Arg_14.15.71913 = getelementptr inbounds float, ptr addrspace(1) %Arg_14.15, i64 7168
  %141 = load <2 x float>, ptr addrspace(1) %Arg_14.15.71913, align 8, !invariant.load !267
  %Arg_14.15823.72292 = extractelement <2 x float> %141, i32 0
  %Arg_14.15832.72293 = extractelement <2 x float> %141, i32 1
  %multiply.83.7 = fmul float %Arg_15.16822.72276, %Arg_14.15823.72292
  %subtract.84.7 = fsub float 1.000000e+00, %Arg_14.15823.72292
  %multiply.85.7 = fmul float %multiply.83.7, %subtract.84.7
  %add.90.i1097.7 = fadd float %add.90.i1098.6, %multiply.85.7
  %multiply.83833.7 = fmul float %Arg_15.16830.72277, %Arg_14.15832.72293
  %subtract.84837.7 = fsub float 1.000000e+00, %Arg_14.15832.72293
  %multiply.85838.7 = fmul float %multiply.83833.7, %subtract.84837.7
  %add.90.i1098.7 = fadd float %add.90.i1097.7, %multiply.85838.7
  %142 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1098.7, i32 16, i32 31)
  %add.90.i = fadd float %add.90.i1098.7, %142
  %143 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i, i32 8, i32 31)
  %add.90.i1093 = fadd float %add.90.i, %143
  %144 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1093, i32 4, i32 31)
  %add.90.i1094 = fadd float %add.90.i1093, %144
  %145 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1094, i32 2, i32 31)
  %add.90.i1095 = fadd float %add.90.i1094, %145
  %146 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1095, i32 1, i32 31)
  %147 = icmp eq i32 %.pre1509, 0
  %148 = lshr i32 %.pre1458, 5
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i64 0, i64 0, i64 0, i64 %149
  %add.90.i1096 = fadd float %add.90.i1095, %146
  br i1 %147, label %intra_warp_reduce_write-true890, label %intra_warp_reduce_write-after891

entry.unreachabledefault:                         ; preds = %entry
  unreachable

common.ret:                                       ; preds = %intra_warp_reduce_write-after772, %reduction_write_output-true791, %inter_warp_reduce-true773.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after653, %reduction_write_output-true672, %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after534, %reduction_write_output-true553, %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after415, %reduction_write_output-true434, %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after296, %reduction_write_output-true315, %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after177, %reduction_write_output-true196, %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont, %intra_warp_reduce_write-after, %reduction_write_output-true, %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont, %inter_warp_reduce-true892.cont.cont.cont.cont.cont.cont, %reduction_write_output-true910, %intra_warp_reduce_write-after891
  ret void

reduce-group-0-true:                              ; preds = %entry
  %151 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %152 = shl nuw nsw i32 %151, 1
  %153 = zext i32 %152 to i64
  %Arg_1.2 = getelementptr float, ptr addrspace(1) %arg11512, i64 %153
  %154 = load <2 x float>, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %Arg_1.232038 = extractelement <2 x float> %154, i32 0
  %Arg_1.292039 = extractelement <2 x float> %154, i32 1
  %Arg_0.1 = getelementptr float, ptr addrspace(1) %arg01510, i64 %153
  %155 = load <2 x float>, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %Arg_0.142054 = extractelement <2 x float> %155, i32 0
  %Arg_0.1112055 = extractelement <2 x float> %155, i32 1
  %multiply.17 = fmul float %Arg_1.232038, %Arg_0.142054
  %subtract.20 = fsub float 1.000000e+00, %Arg_0.142054
  %multiply.21 = fmul float %multiply.17, %subtract.20
  %multiply.1712 = fmul float %Arg_1.292039, %Arg_0.1112055
  %subtract.2016 = fsub float 1.000000e+00, %Arg_0.1112055
  %multiply.2117 = fmul float %multiply.1712, %subtract.2016
  %add.27.i1021 = fadd float %multiply.21, %multiply.2117
  %Arg_1.2.11923 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 1024
  %156 = load <2 x float>, ptr addrspace(1) %Arg_1.2.11923, align 8, !invariant.load !267
  %Arg_1.23.12040 = extractelement <2 x float> %156, i32 0
  %Arg_1.29.12041 = extractelement <2 x float> %156, i32 1
  %Arg_0.1.11925 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 1024
  %157 = load <2 x float>, ptr addrspace(1) %Arg_0.1.11925, align 8, !invariant.load !267
  %Arg_0.14.12056 = extractelement <2 x float> %157, i32 0
  %Arg_0.111.12057 = extractelement <2 x float> %157, i32 1
  %multiply.17.1 = fmul float %Arg_1.23.12040, %Arg_0.14.12056
  %subtract.20.1 = fsub float 1.000000e+00, %Arg_0.14.12056
  %multiply.21.1 = fmul float %multiply.17.1, %subtract.20.1
  %add.27.i1020.1 = fadd float %add.27.i1021, %multiply.21.1
  %multiply.1712.1 = fmul float %Arg_1.29.12041, %Arg_0.111.12057
  %subtract.2016.1 = fsub float 1.000000e+00, %Arg_0.111.12057
  %multiply.2117.1 = fmul float %multiply.1712.1, %subtract.2016.1
  %add.27.i1021.1 = fadd float %add.27.i1020.1, %multiply.2117.1
  %Arg_1.2.21931 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 2048
  %158 = load <2 x float>, ptr addrspace(1) %Arg_1.2.21931, align 8, !invariant.load !267
  %Arg_1.23.22042 = extractelement <2 x float> %158, i32 0
  %Arg_1.29.22043 = extractelement <2 x float> %158, i32 1
  %Arg_0.1.21933 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 2048
  %159 = load <2 x float>, ptr addrspace(1) %Arg_0.1.21933, align 8, !invariant.load !267
  %Arg_0.14.22058 = extractelement <2 x float> %159, i32 0
  %Arg_0.111.22059 = extractelement <2 x float> %159, i32 1
  %multiply.17.2 = fmul float %Arg_1.23.22042, %Arg_0.14.22058
  %subtract.20.2 = fsub float 1.000000e+00, %Arg_0.14.22058
  %multiply.21.2 = fmul float %multiply.17.2, %subtract.20.2
  %add.27.i1020.2 = fadd float %add.27.i1021.1, %multiply.21.2
  %multiply.1712.2 = fmul float %Arg_1.29.22043, %Arg_0.111.22059
  %subtract.2016.2 = fsub float 1.000000e+00, %Arg_0.111.22059
  %multiply.2117.2 = fmul float %multiply.1712.2, %subtract.2016.2
  %add.27.i1021.2 = fadd float %add.27.i1020.2, %multiply.2117.2
  %Arg_1.2.31939 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 3072
  %160 = load <2 x float>, ptr addrspace(1) %Arg_1.2.31939, align 8, !invariant.load !267
  %Arg_1.23.32044 = extractelement <2 x float> %160, i32 0
  %Arg_1.29.32045 = extractelement <2 x float> %160, i32 1
  %Arg_0.1.31941 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 3072
  %161 = load <2 x float>, ptr addrspace(1) %Arg_0.1.31941, align 8, !invariant.load !267
  %Arg_0.14.32060 = extractelement <2 x float> %161, i32 0
  %Arg_0.111.32061 = extractelement <2 x float> %161, i32 1
  %multiply.17.3 = fmul float %Arg_1.23.32044, %Arg_0.14.32060
  %subtract.20.3 = fsub float 1.000000e+00, %Arg_0.14.32060
  %multiply.21.3 = fmul float %multiply.17.3, %subtract.20.3
  %add.27.i1020.3 = fadd float %add.27.i1021.2, %multiply.21.3
  %multiply.1712.3 = fmul float %Arg_1.29.32045, %Arg_0.111.32061
  %subtract.2016.3 = fsub float 1.000000e+00, %Arg_0.111.32061
  %multiply.2117.3 = fmul float %multiply.1712.3, %subtract.2016.3
  %add.27.i1021.3 = fadd float %add.27.i1020.3, %multiply.2117.3
  %Arg_1.2.41947 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 4096
  %162 = load <2 x float>, ptr addrspace(1) %Arg_1.2.41947, align 8, !invariant.load !267
  %Arg_1.23.42046 = extractelement <2 x float> %162, i32 0
  %Arg_1.29.42047 = extractelement <2 x float> %162, i32 1
  %Arg_0.1.41949 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 4096
  %163 = load <2 x float>, ptr addrspace(1) %Arg_0.1.41949, align 8, !invariant.load !267
  %Arg_0.14.42062 = extractelement <2 x float> %163, i32 0
  %Arg_0.111.42063 = extractelement <2 x float> %163, i32 1
  %multiply.17.4 = fmul float %Arg_1.23.42046, %Arg_0.14.42062
  %subtract.20.4 = fsub float 1.000000e+00, %Arg_0.14.42062
  %multiply.21.4 = fmul float %multiply.17.4, %subtract.20.4
  %add.27.i1020.4 = fadd float %add.27.i1021.3, %multiply.21.4
  %multiply.1712.4 = fmul float %Arg_1.29.42047, %Arg_0.111.42063
  %subtract.2016.4 = fsub float 1.000000e+00, %Arg_0.111.42063
  %multiply.2117.4 = fmul float %multiply.1712.4, %subtract.2016.4
  %add.27.i1021.4 = fadd float %add.27.i1020.4, %multiply.2117.4
  %Arg_1.2.51955 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 5120
  %164 = load <2 x float>, ptr addrspace(1) %Arg_1.2.51955, align 8, !invariant.load !267
  %Arg_1.23.52048 = extractelement <2 x float> %164, i32 0
  %Arg_1.29.52049 = extractelement <2 x float> %164, i32 1
  %Arg_0.1.51957 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 5120
  %165 = load <2 x float>, ptr addrspace(1) %Arg_0.1.51957, align 8, !invariant.load !267
  %Arg_0.14.52064 = extractelement <2 x float> %165, i32 0
  %Arg_0.111.52065 = extractelement <2 x float> %165, i32 1
  %multiply.17.5 = fmul float %Arg_1.23.52048, %Arg_0.14.52064
  %subtract.20.5 = fsub float 1.000000e+00, %Arg_0.14.52064
  %multiply.21.5 = fmul float %multiply.17.5, %subtract.20.5
  %add.27.i1020.5 = fadd float %add.27.i1021.4, %multiply.21.5
  %multiply.1712.5 = fmul float %Arg_1.29.52049, %Arg_0.111.52065
  %subtract.2016.5 = fsub float 1.000000e+00, %Arg_0.111.52065
  %multiply.2117.5 = fmul float %multiply.1712.5, %subtract.2016.5
  %add.27.i1021.5 = fadd float %add.27.i1020.5, %multiply.2117.5
  %Arg_1.2.61963 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 6144
  %166 = load <2 x float>, ptr addrspace(1) %Arg_1.2.61963, align 8, !invariant.load !267
  %Arg_1.23.62050 = extractelement <2 x float> %166, i32 0
  %Arg_1.29.62051 = extractelement <2 x float> %166, i32 1
  %Arg_0.1.61965 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 6144
  %167 = load <2 x float>, ptr addrspace(1) %Arg_0.1.61965, align 8, !invariant.load !267
  %Arg_0.14.62066 = extractelement <2 x float> %167, i32 0
  %Arg_0.111.62067 = extractelement <2 x float> %167, i32 1
  %multiply.17.6 = fmul float %Arg_1.23.62050, %Arg_0.14.62066
  %subtract.20.6 = fsub float 1.000000e+00, %Arg_0.14.62066
  %multiply.21.6 = fmul float %multiply.17.6, %subtract.20.6
  %add.27.i1020.6 = fadd float %add.27.i1021.5, %multiply.21.6
  %multiply.1712.6 = fmul float %Arg_1.29.62051, %Arg_0.111.62067
  %subtract.2016.6 = fsub float 1.000000e+00, %Arg_0.111.62067
  %multiply.2117.6 = fmul float %multiply.1712.6, %subtract.2016.6
  %add.27.i1021.6 = fadd float %add.27.i1020.6, %multiply.2117.6
  %Arg_1.2.71971 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 7168
  %168 = load <2 x float>, ptr addrspace(1) %Arg_1.2.71971, align 8, !invariant.load !267
  %Arg_1.23.72052 = extractelement <2 x float> %168, i32 0
  %Arg_1.29.72053 = extractelement <2 x float> %168, i32 1
  %Arg_0.1.71973 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 7168
  %169 = load <2 x float>, ptr addrspace(1) %Arg_0.1.71973, align 8, !invariant.load !267
  %Arg_0.14.72068 = extractelement <2 x float> %169, i32 0
  %Arg_0.111.72069 = extractelement <2 x float> %169, i32 1
  %multiply.17.7 = fmul float %Arg_1.23.72052, %Arg_0.14.72068
  %subtract.20.7 = fsub float 1.000000e+00, %Arg_0.14.72068
  %multiply.21.7 = fmul float %multiply.17.7, %subtract.20.7
  %add.27.i1020.7 = fadd float %add.27.i1021.6, %multiply.21.7
  %multiply.1712.7 = fmul float %Arg_1.29.72053, %Arg_0.111.72069
  %subtract.2016.7 = fsub float 1.000000e+00, %Arg_0.111.72069
  %multiply.2117.7 = fmul float %multiply.1712.7, %subtract.2016.7
  %add.27.i1021.7 = fadd float %add.27.i1020.7, %multiply.2117.7
  %lane_id = and i32 %151, 31
  %170 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1021.7, i32 16, i32 31)
  %add.27.i = fadd float %add.27.i1021.7, %170
  %171 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i, i32 8, i32 31)
  %add.27.i1016 = fadd float %add.27.i, %171
  %172 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1016, i32 4, i32 31)
  %add.27.i1017 = fadd float %add.27.i1016, %172
  %173 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1017, i32 2, i32 31)
  %add.27.i1018 = fadd float %add.27.i1017, %173
  %174 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1018, i32 1, i32 31)
  %175 = icmp eq i32 %lane_id, 0
  %176 = lshr i32 %151, 5
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i64 0, i64 0, i64 0, i64 %177
  %add.27.i1019 = fadd float %add.27.i1018, %174
  br i1 %175, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %reduce-group-0-true
  tail call void @llvm.nvvm.barrier0()
  %179 = icmp ult i32 %151, 32
  br i1 %179, label %inter_warp_reduce-true, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %reduce-group-0-true
  store float %add.27.i1019, ptr addrspace(3) %178, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %180 = zext i32 %lane_id to i64
  %181 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i64 0, i64 0, i64 0, i64 %180
  %182 = icmp ult i32 %151, 16
  br i1 %182, label %inter_warp_reduce-true.then1113, label %inter_warp_reduce-true.cont1112

inter_warp_reduce-true.then1113:                  ; preds = %inter_warp_reduce-true
  %partial_reduction_result66.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont1112

inter_warp_reduce-true.cont1112:                  ; preds = %inter_warp_reduce-true, %inter_warp_reduce-true.then1113
  %partial_reduction_result66 = phi float [ %partial_reduction_result66.then.val, %inter_warp_reduce-true.then1113 ], [ -0.000000e+00, %inter_warp_reduce-true ]
  %183 = icmp ult i32 %151, 16
  %184 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  br i1 %183, label %inter_warp_reduce-true.then, label %inter_warp_reduce-true.cont

inter_warp_reduce-true.then:                      ; preds = %inter_warp_reduce-true.cont1112
  %.val924.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont

inter_warp_reduce-true.cont:                      ; preds = %inter_warp_reduce-true.cont1112, %inter_warp_reduce-true.then
  %.val924 = phi float [ %.val924.then.val, %inter_warp_reduce-true.then ], [ -0.000000e+00, %inter_warp_reduce-true.cont1112 ]
  %185 = icmp ult i32 %151, 16
  %add.27.i1022 = fadd float %184, %.val924
  br i1 %185, label %inter_warp_reduce-true.cont.then1111, label %inter_warp_reduce-true.cont.cont1110

inter_warp_reduce-true.cont.then1111:             ; preds = %inter_warp_reduce-true.cont
  store float %add.27.i1022, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont1110

inter_warp_reduce-true.cont.cont1110:             ; preds = %inter_warp_reduce-true.cont, %inter_warp_reduce-true.cont.then1111
  %initial_value_addr.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true.cont.then1111 ], [ %add.27.i1022, %inter_warp_reduce-true.cont ]
  %186 = icmp ult i32 %151, 16
  %187 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1022, i32 8, i32 31)
  br i1 %186, label %inter_warp_reduce-true.cont.then, label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.then:                 ; preds = %inter_warp_reduce-true.cont.cont1110
  %.val923.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.cont:                 ; preds = %inter_warp_reduce-true.cont.cont1110, %inter_warp_reduce-true.cont.then
  %.val923 = phi float [ %.val923.then.val, %inter_warp_reduce-true.cont.then ], [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont1110 ]
  %188 = icmp ult i32 %151, 16
  %add.27.i1023 = fadd float %187, %.val923
  br i1 %188, label %inter_warp_reduce-true.cont.cont.then1109, label %inter_warp_reduce-true.cont.cont.cont1108

inter_warp_reduce-true.cont.cont.then1109:        ; preds = %inter_warp_reduce-true.cont.cont
  store float %add.27.i1023, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont1108

inter_warp_reduce-true.cont.cont.cont1108:        ; preds = %inter_warp_reduce-true.cont.cont, %inter_warp_reduce-true.cont.cont.then1109
  %initial_value_addr.1 = phi float [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont.then1109 ], [ %add.27.i1023, %inter_warp_reduce-true.cont.cont ]
  %189 = icmp ult i32 %151, 16
  %190 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1023, i32 4, i32 31)
  br i1 %189, label %inter_warp_reduce-true.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.then:            ; preds = %inter_warp_reduce-true.cont.cont.cont1108
  %.val922.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont:            ; preds = %inter_warp_reduce-true.cont.cont.cont1108, %inter_warp_reduce-true.cont.cont.then
  %.val922 = phi float [ %.val922.then.val, %inter_warp_reduce-true.cont.cont.then ], [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont1108 ]
  %191 = icmp ult i32 %151, 16
  %add.27.i1024 = fadd float %190, %.val922
  br i1 %191, label %inter_warp_reduce-true.cont.cont.cont.then1107, label %inter_warp_reduce-true.cont.cont.cont.cont1106

inter_warp_reduce-true.cont.cont.cont.then1107:   ; preds = %inter_warp_reduce-true.cont.cont.cont
  store float %add.27.i1024, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont1106

inter_warp_reduce-true.cont.cont.cont.cont1106:   ; preds = %inter_warp_reduce-true.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.then1107
  %initial_value_addr.2 = phi float [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont.then1107 ], [ %add.27.i1024, %inter_warp_reduce-true.cont.cont.cont ]
  %192 = icmp ult i32 %151, 16
  %193 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1024, i32 2, i32 31)
  br i1 %192, label %inter_warp_reduce-true.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.then:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont1106
  %.val921.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont1106, %inter_warp_reduce-true.cont.cont.cont.then
  %.val921 = phi float [ %.val921.then.val, %inter_warp_reduce-true.cont.cont.cont.then ], [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont1106 ]
  %194 = icmp ult i32 %151, 16
  %add.27.i1025 = fadd float %193, %.val921
  br i1 %194, label %inter_warp_reduce-true.cont.cont.cont.cont.then1105, label %inter_warp_reduce-true.cont.cont.cont.cont.cont1104

inter_warp_reduce-true.cont.cont.cont.cont.then1105: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont
  store float %add.27.i1025, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont1104

inter_warp_reduce-true.cont.cont.cont.cont.cont1104: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.then1105
  %initial_value_addr.3 = phi float [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont.then1105 ], [ %add.27.i1025, %inter_warp_reduce-true.cont.cont.cont.cont ]
  %195 = icmp ult i32 %151, 16
  %196 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i1025, i32 1, i32 31)
  br i1 %195, label %inter_warp_reduce-true.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.then:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont1104
  %.val.then.val = load float, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont1104, %inter_warp_reduce-true.cont.cont.cont.cont.then
  %.val = phi float [ %.val.then.val, %inter_warp_reduce-true.cont.cont.cont.cont.then ], [ %initial_value_addr.3, %inter_warp_reduce-true.cont.cont.cont.cont.cont1104 ]
  %197 = icmp ult i32 %151, 16
  %add.27.i1026 = fadd float %196, %.val
  br i1 %197, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont
  store float %add.27.i1026, ptr addrspace(3) %181, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.cont.then
  %198 = icmp eq i32 %151, 0
  br i1 %198, label %reduction_write_output-true, label %common.ret

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont
  store float %add.27.i1026, ptr addrspace(1) %arg161542, align 128
  br label %common.ret

reduce-group-1-true:                              ; preds = %entry
  %199 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %200 = shl nuw nsw i32 %199, 1
  %201 = zext i32 %200 to i64
  %Arg_3.4 = getelementptr float, ptr addrspace(1) %arg31516, i64 %201
  %202 = load <2 x float>, ptr addrspace(1) %Arg_3.4, align 8, !invariant.load !267
  %Arg_3.41082070 = extractelement <2 x float> %202, i32 0
  %Arg_3.41162071 = extractelement <2 x float> %202, i32 1
  %Arg_2.3 = getelementptr float, ptr addrspace(1) %arg21514, i64 %201
  %203 = load <2 x float>, ptr addrspace(1) %Arg_2.3, align 8, !invariant.load !267
  %Arg_2.31092086 = extractelement <2 x float> %203, i32 0
  %Arg_2.31182087 = extractelement <2 x float> %203, i32 1
  %multiply.29 = fmul float %Arg_3.41082070, %Arg_2.31092086
  %subtract.30 = fsub float 1.000000e+00, %Arg_2.31092086
  %multiply.31 = fmul float %multiply.29, %subtract.30
  %multiply.29119 = fmul float %Arg_3.41162071, %Arg_2.31182087
  %subtract.30123 = fsub float 1.000000e+00, %Arg_2.31182087
  %multiply.31124 = fmul float %multiply.29119, %subtract.30123
  %add.36.i1032 = fadd float %multiply.31, %multiply.31124
  %Arg_3.4.11983 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 1024
  %204 = load <2 x float>, ptr addrspace(1) %Arg_3.4.11983, align 8, !invariant.load !267
  %Arg_3.4108.12072 = extractelement <2 x float> %204, i32 0
  %Arg_3.4116.12073 = extractelement <2 x float> %204, i32 1
  %Arg_2.3.11985 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 1024
  %205 = load <2 x float>, ptr addrspace(1) %Arg_2.3.11985, align 8, !invariant.load !267
  %Arg_2.3109.12088 = extractelement <2 x float> %205, i32 0
  %Arg_2.3118.12089 = extractelement <2 x float> %205, i32 1
  %multiply.29.1 = fmul float %Arg_3.4108.12072, %Arg_2.3109.12088
  %subtract.30.1 = fsub float 1.000000e+00, %Arg_2.3109.12088
  %multiply.31.1 = fmul float %multiply.29.1, %subtract.30.1
  %add.36.i1031.1 = fadd float %add.36.i1032, %multiply.31.1
  %multiply.29119.1 = fmul float %Arg_3.4116.12073, %Arg_2.3118.12089
  %subtract.30123.1 = fsub float 1.000000e+00, %Arg_2.3118.12089
  %multiply.31124.1 = fmul float %multiply.29119.1, %subtract.30123.1
  %add.36.i1032.1 = fadd float %add.36.i1031.1, %multiply.31124.1
  %Arg_3.4.21991 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 2048
  %206 = load <2 x float>, ptr addrspace(1) %Arg_3.4.21991, align 8, !invariant.load !267
  %Arg_3.4108.22074 = extractelement <2 x float> %206, i32 0
  %Arg_3.4116.22075 = extractelement <2 x float> %206, i32 1
  %Arg_2.3.21993 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 2048
  %207 = load <2 x float>, ptr addrspace(1) %Arg_2.3.21993, align 8, !invariant.load !267
  %Arg_2.3109.22090 = extractelement <2 x float> %207, i32 0
  %Arg_2.3118.22091 = extractelement <2 x float> %207, i32 1
  %multiply.29.2 = fmul float %Arg_3.4108.22074, %Arg_2.3109.22090
  %subtract.30.2 = fsub float 1.000000e+00, %Arg_2.3109.22090
  %multiply.31.2 = fmul float %multiply.29.2, %subtract.30.2
  %add.36.i1031.2 = fadd float %add.36.i1032.1, %multiply.31.2
  %multiply.29119.2 = fmul float %Arg_3.4116.22075, %Arg_2.3118.22091
  %subtract.30123.2 = fsub float 1.000000e+00, %Arg_2.3118.22091
  %multiply.31124.2 = fmul float %multiply.29119.2, %subtract.30123.2
  %add.36.i1032.2 = fadd float %add.36.i1031.2, %multiply.31124.2
  %Arg_3.4.31999 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 3072
  %208 = load <2 x float>, ptr addrspace(1) %Arg_3.4.31999, align 8, !invariant.load !267
  %Arg_3.4108.32076 = extractelement <2 x float> %208, i32 0
  %Arg_3.4116.32077 = extractelement <2 x float> %208, i32 1
  %Arg_2.3.32001 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 3072
  %209 = load <2 x float>, ptr addrspace(1) %Arg_2.3.32001, align 8, !invariant.load !267
  %Arg_2.3109.32092 = extractelement <2 x float> %209, i32 0
  %Arg_2.3118.32093 = extractelement <2 x float> %209, i32 1
  %multiply.29.3 = fmul float %Arg_3.4108.32076, %Arg_2.3109.32092
  %subtract.30.3 = fsub float 1.000000e+00, %Arg_2.3109.32092
  %multiply.31.3 = fmul float %multiply.29.3, %subtract.30.3
  %add.36.i1031.3 = fadd float %add.36.i1032.2, %multiply.31.3
  %multiply.29119.3 = fmul float %Arg_3.4116.32077, %Arg_2.3118.32093
  %subtract.30123.3 = fsub float 1.000000e+00, %Arg_2.3118.32093
  %multiply.31124.3 = fmul float %multiply.29119.3, %subtract.30123.3
  %add.36.i1032.3 = fadd float %add.36.i1031.3, %multiply.31124.3
  %Arg_3.4.42007 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 4096
  %210 = load <2 x float>, ptr addrspace(1) %Arg_3.4.42007, align 8, !invariant.load !267
  %Arg_3.4108.42078 = extractelement <2 x float> %210, i32 0
  %Arg_3.4116.42079 = extractelement <2 x float> %210, i32 1
  %Arg_2.3.42009 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 4096
  %211 = load <2 x float>, ptr addrspace(1) %Arg_2.3.42009, align 8, !invariant.load !267
  %Arg_2.3109.42094 = extractelement <2 x float> %211, i32 0
  %Arg_2.3118.42095 = extractelement <2 x float> %211, i32 1
  %multiply.29.4 = fmul float %Arg_3.4108.42078, %Arg_2.3109.42094
  %subtract.30.4 = fsub float 1.000000e+00, %Arg_2.3109.42094
  %multiply.31.4 = fmul float %multiply.29.4, %subtract.30.4
  %add.36.i1031.4 = fadd float %add.36.i1032.3, %multiply.31.4
  %multiply.29119.4 = fmul float %Arg_3.4116.42079, %Arg_2.3118.42095
  %subtract.30123.4 = fsub float 1.000000e+00, %Arg_2.3118.42095
  %multiply.31124.4 = fmul float %multiply.29119.4, %subtract.30123.4
  %add.36.i1032.4 = fadd float %add.36.i1031.4, %multiply.31124.4
  %Arg_3.4.52015 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 5120
  %212 = load <2 x float>, ptr addrspace(1) %Arg_3.4.52015, align 8, !invariant.load !267
  %Arg_3.4108.52080 = extractelement <2 x float> %212, i32 0
  %Arg_3.4116.52081 = extractelement <2 x float> %212, i32 1
  %Arg_2.3.52017 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 5120
  %213 = load <2 x float>, ptr addrspace(1) %Arg_2.3.52017, align 8, !invariant.load !267
  %Arg_2.3109.52096 = extractelement <2 x float> %213, i32 0
  %Arg_2.3118.52097 = extractelement <2 x float> %213, i32 1
  %multiply.29.5 = fmul float %Arg_3.4108.52080, %Arg_2.3109.52096
  %subtract.30.5 = fsub float 1.000000e+00, %Arg_2.3109.52096
  %multiply.31.5 = fmul float %multiply.29.5, %subtract.30.5
  %add.36.i1031.5 = fadd float %add.36.i1032.4, %multiply.31.5
  %multiply.29119.5 = fmul float %Arg_3.4116.52081, %Arg_2.3118.52097
  %subtract.30123.5 = fsub float 1.000000e+00, %Arg_2.3118.52097
  %multiply.31124.5 = fmul float %multiply.29119.5, %subtract.30123.5
  %add.36.i1032.5 = fadd float %add.36.i1031.5, %multiply.31124.5
  %Arg_3.4.62023 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 6144
  %214 = load <2 x float>, ptr addrspace(1) %Arg_3.4.62023, align 8, !invariant.load !267
  %Arg_3.4108.62082 = extractelement <2 x float> %214, i32 0
  %Arg_3.4116.62083 = extractelement <2 x float> %214, i32 1
  %Arg_2.3.62025 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 6144
  %215 = load <2 x float>, ptr addrspace(1) %Arg_2.3.62025, align 8, !invariant.load !267
  %Arg_2.3109.62098 = extractelement <2 x float> %215, i32 0
  %Arg_2.3118.62099 = extractelement <2 x float> %215, i32 1
  %multiply.29.6 = fmul float %Arg_3.4108.62082, %Arg_2.3109.62098
  %subtract.30.6 = fsub float 1.000000e+00, %Arg_2.3109.62098
  %multiply.31.6 = fmul float %multiply.29.6, %subtract.30.6
  %add.36.i1031.6 = fadd float %add.36.i1032.5, %multiply.31.6
  %multiply.29119.6 = fmul float %Arg_3.4116.62083, %Arg_2.3118.62099
  %subtract.30123.6 = fsub float 1.000000e+00, %Arg_2.3118.62099
  %multiply.31124.6 = fmul float %multiply.29119.6, %subtract.30123.6
  %add.36.i1032.6 = fadd float %add.36.i1031.6, %multiply.31124.6
  %Arg_3.4.72031 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.4, i64 7168
  %216 = load <2 x float>, ptr addrspace(1) %Arg_3.4.72031, align 8, !invariant.load !267
  %Arg_3.4108.72084 = extractelement <2 x float> %216, i32 0
  %Arg_3.4116.72085 = extractelement <2 x float> %216, i32 1
  %Arg_2.3.72033 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.3, i64 7168
  %217 = load <2 x float>, ptr addrspace(1) %Arg_2.3.72033, align 8, !invariant.load !267
  %Arg_2.3109.72100 = extractelement <2 x float> %217, i32 0
  %Arg_2.3118.72101 = extractelement <2 x float> %217, i32 1
  %multiply.29.7 = fmul float %Arg_3.4108.72084, %Arg_2.3109.72100
  %subtract.30.7 = fsub float 1.000000e+00, %Arg_2.3109.72100
  %multiply.31.7 = fmul float %multiply.29.7, %subtract.30.7
  %add.36.i1031.7 = fadd float %add.36.i1032.6, %multiply.31.7
  %multiply.29119.7 = fmul float %Arg_3.4116.72085, %Arg_2.3118.72101
  %subtract.30123.7 = fsub float 1.000000e+00, %Arg_2.3118.72101
  %multiply.31124.7 = fmul float %multiply.29119.7, %subtract.30123.7
  %add.36.i1032.7 = fadd float %add.36.i1031.7, %multiply.31124.7
  %lane_id86 = and i32 %199, 31
  %218 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1032.7, i32 16, i32 31)
  %add.36.i = fadd float %add.36.i1032.7, %218
  %219 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i, i32 8, i32 31)
  %add.36.i1027 = fadd float %add.36.i, %219
  %220 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1027, i32 4, i32 31)
  %add.36.i1028 = fadd float %add.36.i1027, %220
  %221 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1028, i32 2, i32 31)
  %add.36.i1029 = fadd float %add.36.i1028, %221
  %222 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1029, i32 1, i32 31)
  %223 = icmp eq i32 %lane_id86, 0
  %224 = lshr i32 %199, 5
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i64 0, i64 0, i64 0, i64 %225
  %add.36.i1030 = fadd float %add.36.i1029, %222
  br i1 %223, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %reduce-group-1-true
  tail call void @llvm.nvvm.barrier0()
  %227 = icmp ult i32 %199, 32
  br i1 %227, label %inter_warp_reduce-true178, label %common.ret

intra_warp_reduce_write-true176:                  ; preds = %reduce-group-1-true
  store float %add.36.i1030, ptr addrspace(3) %226, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %228 = zext i32 %lane_id86 to i64
  %229 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i64 0, i64 0, i64 0, i64 %228
  %230 = icmp ult i32 %199, 16
  br i1 %230, label %inter_warp_reduce-true178.then1123, label %inter_warp_reduce-true178.cont1122

inter_warp_reduce-true178.then1123:               ; preds = %inter_warp_reduce-true178
  %partial_reduction_result182.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont1122

inter_warp_reduce-true178.cont1122:               ; preds = %inter_warp_reduce-true178, %inter_warp_reduce-true178.then1123
  %partial_reduction_result182 = phi float [ %partial_reduction_result182.then.val, %inter_warp_reduce-true178.then1123 ], [ -0.000000e+00, %inter_warp_reduce-true178 ]
  %231 = icmp ult i32 %199, 16
  %232 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  br i1 %231, label %inter_warp_reduce-true178.then, label %inter_warp_reduce-true178.cont

inter_warp_reduce-true178.then:                   ; preds = %inter_warp_reduce-true178.cont1122
  %.val936.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont

inter_warp_reduce-true178.cont:                   ; preds = %inter_warp_reduce-true178.cont1122, %inter_warp_reduce-true178.then
  %.val936 = phi float [ %.val936.then.val, %inter_warp_reduce-true178.then ], [ -0.000000e+00, %inter_warp_reduce-true178.cont1122 ]
  %233 = icmp ult i32 %199, 16
  %add.36.i1033 = fadd float %232, %.val936
  br i1 %233, label %inter_warp_reduce-true178.cont.then1121, label %inter_warp_reduce-true178.cont.cont1120

inter_warp_reduce-true178.cont.then1121:          ; preds = %inter_warp_reduce-true178.cont
  store float %add.36.i1033, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont1120

inter_warp_reduce-true178.cont.cont1120:          ; preds = %inter_warp_reduce-true178.cont, %inter_warp_reduce-true178.cont.then1121
  %initial_value_addr180.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true178.cont.then1121 ], [ %add.36.i1033, %inter_warp_reduce-true178.cont ]
  %234 = icmp ult i32 %199, 16
  %235 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1033, i32 8, i32 31)
  br i1 %234, label %inter_warp_reduce-true178.cont.then, label %inter_warp_reduce-true178.cont.cont

inter_warp_reduce-true178.cont.then:              ; preds = %inter_warp_reduce-true178.cont.cont1120
  %.val935.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont

inter_warp_reduce-true178.cont.cont:              ; preds = %inter_warp_reduce-true178.cont.cont1120, %inter_warp_reduce-true178.cont.then
  %.val935 = phi float [ %.val935.then.val, %inter_warp_reduce-true178.cont.then ], [ %initial_value_addr180.0, %inter_warp_reduce-true178.cont.cont1120 ]
  %236 = icmp ult i32 %199, 16
  %add.36.i1034 = fadd float %235, %.val935
  br i1 %236, label %inter_warp_reduce-true178.cont.cont.then1119, label %inter_warp_reduce-true178.cont.cont.cont1118

inter_warp_reduce-true178.cont.cont.then1119:     ; preds = %inter_warp_reduce-true178.cont.cont
  store float %add.36.i1034, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont1118

inter_warp_reduce-true178.cont.cont.cont1118:     ; preds = %inter_warp_reduce-true178.cont.cont, %inter_warp_reduce-true178.cont.cont.then1119
  %initial_value_addr180.1 = phi float [ %initial_value_addr180.0, %inter_warp_reduce-true178.cont.cont.then1119 ], [ %add.36.i1034, %inter_warp_reduce-true178.cont.cont ]
  %237 = icmp ult i32 %199, 16
  %238 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1034, i32 4, i32 31)
  br i1 %237, label %inter_warp_reduce-true178.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont

inter_warp_reduce-true178.cont.cont.then:         ; preds = %inter_warp_reduce-true178.cont.cont.cont1118
  %.val934.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont:         ; preds = %inter_warp_reduce-true178.cont.cont.cont1118, %inter_warp_reduce-true178.cont.cont.then
  %.val934 = phi float [ %.val934.then.val, %inter_warp_reduce-true178.cont.cont.then ], [ %initial_value_addr180.1, %inter_warp_reduce-true178.cont.cont.cont1118 ]
  %239 = icmp ult i32 %199, 16
  %add.36.i1035 = fadd float %238, %.val934
  br i1 %239, label %inter_warp_reduce-true178.cont.cont.cont.then1117, label %inter_warp_reduce-true178.cont.cont.cont.cont1116

inter_warp_reduce-true178.cont.cont.cont.then1117: ; preds = %inter_warp_reduce-true178.cont.cont.cont
  store float %add.36.i1035, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont1116

inter_warp_reduce-true178.cont.cont.cont.cont1116: ; preds = %inter_warp_reduce-true178.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.then1117
  %initial_value_addr180.2 = phi float [ %initial_value_addr180.1, %inter_warp_reduce-true178.cont.cont.cont.then1117 ], [ %add.36.i1035, %inter_warp_reduce-true178.cont.cont.cont ]
  %240 = icmp ult i32 %199, 16
  %241 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1035, i32 2, i32 31)
  br i1 %240, label %inter_warp_reduce-true178.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont1116
  %.val933.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont1116, %inter_warp_reduce-true178.cont.cont.cont.then
  %.val933 = phi float [ %.val933.then.val, %inter_warp_reduce-true178.cont.cont.cont.then ], [ %initial_value_addr180.2, %inter_warp_reduce-true178.cont.cont.cont.cont1116 ]
  %242 = icmp ult i32 %199, 16
  %add.36.i1036 = fadd float %241, %.val933
  br i1 %242, label %inter_warp_reduce-true178.cont.cont.cont.cont.then1115, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont1114

inter_warp_reduce-true178.cont.cont.cont.cont.then1115: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont
  store float %add.36.i1036, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont1114

inter_warp_reduce-true178.cont.cont.cont.cont.cont1114: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.cont.then1115
  %initial_value_addr180.3 = phi float [ %initial_value_addr180.2, %inter_warp_reduce-true178.cont.cont.cont.cont.then1115 ], [ %add.36.i1036, %inter_warp_reduce-true178.cont.cont.cont.cont ]
  %243 = icmp ult i32 %199, 16
  %244 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i1036, i32 1, i32 31)
  br i1 %243, label %inter_warp_reduce-true178.cont.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont1114
  %.val932.then.val = load float, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont1114, %inter_warp_reduce-true178.cont.cont.cont.cont.then
  %.val932 = phi float [ %.val932.then.val, %inter_warp_reduce-true178.cont.cont.cont.cont.then ], [ %initial_value_addr180.3, %inter_warp_reduce-true178.cont.cont.cont.cont.cont1114 ]
  %245 = icmp ult i32 %199, 16
  %add.36.i1037 = fadd float %244, %.val932
  br i1 %245, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont
  store float %add.36.i1037, ptr addrspace(3) %229, align 4
  br label %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont, %inter_warp_reduce-true178.cont.cont.cont.cont.cont.then
  %246 = icmp eq i32 %199, 0
  br i1 %246, label %reduction_write_output-true196, label %common.ret

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178.cont.cont.cont.cont.cont.cont
  store float %add.36.i1037, ptr addrspace(1) %arg171544, align 128
  br label %common.ret

intra_warp_reduce_write-after296:                 ; preds = %intra_warp_reduce_write-true295, %entry.reduce-group-2-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %247 = icmp ult i32 %.pre, 32
  br i1 %247, label %inter_warp_reduce-true297, label %common.ret

intra_warp_reduce_write-true295:                  ; preds = %entry.reduce-group-2-true_crit_edge
  store float %add.45.i1041, ptr addrspace(3) %25, align 4
  br label %intra_warp_reduce_write-after296

inter_warp_reduce-true297:                        ; preds = %intra_warp_reduce_write-after296
  %248 = zext i32 %.pre1249 to i64
  %249 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i64 0, i64 0, i64 0, i64 %248
  %250 = icmp ult i32 %.pre, 16
  br i1 %250, label %inter_warp_reduce-true297.then1133, label %inter_warp_reduce-true297.cont1132

inter_warp_reduce-true297.then1133:               ; preds = %inter_warp_reduce-true297
  %partial_reduction_result301.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont1132

inter_warp_reduce-true297.cont1132:               ; preds = %inter_warp_reduce-true297, %inter_warp_reduce-true297.then1133
  %partial_reduction_result301 = phi float [ %partial_reduction_result301.then.val, %inter_warp_reduce-true297.then1133 ], [ -0.000000e+00, %inter_warp_reduce-true297 ]
  %251 = icmp ult i32 %.pre, 16
  %252 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result301, i32 16, i32 31)
  br i1 %251, label %inter_warp_reduce-true297.then, label %inter_warp_reduce-true297.cont

inter_warp_reduce-true297.then:                   ; preds = %inter_warp_reduce-true297.cont1132
  %.val948.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont

inter_warp_reduce-true297.cont:                   ; preds = %inter_warp_reduce-true297.cont1132, %inter_warp_reduce-true297.then
  %.val948 = phi float [ %.val948.then.val, %inter_warp_reduce-true297.then ], [ -0.000000e+00, %inter_warp_reduce-true297.cont1132 ]
  %253 = icmp ult i32 %.pre, 16
  %add.45.i1044 = fadd float %252, %.val948
  br i1 %253, label %inter_warp_reduce-true297.cont.then1131, label %inter_warp_reduce-true297.cont.cont1130

inter_warp_reduce-true297.cont.then1131:          ; preds = %inter_warp_reduce-true297.cont
  store float %add.45.i1044, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont1130

inter_warp_reduce-true297.cont.cont1130:          ; preds = %inter_warp_reduce-true297.cont, %inter_warp_reduce-true297.cont.then1131
  %initial_value_addr299.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true297.cont.then1131 ], [ %add.45.i1044, %inter_warp_reduce-true297.cont ]
  %254 = icmp ult i32 %.pre, 16
  %255 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1044, i32 8, i32 31)
  br i1 %254, label %inter_warp_reduce-true297.cont.then, label %inter_warp_reduce-true297.cont.cont

inter_warp_reduce-true297.cont.then:              ; preds = %inter_warp_reduce-true297.cont.cont1130
  %.val947.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont

inter_warp_reduce-true297.cont.cont:              ; preds = %inter_warp_reduce-true297.cont.cont1130, %inter_warp_reduce-true297.cont.then
  %.val947 = phi float [ %.val947.then.val, %inter_warp_reduce-true297.cont.then ], [ %initial_value_addr299.0, %inter_warp_reduce-true297.cont.cont1130 ]
  %256 = icmp ult i32 %.pre, 16
  %add.45.i1045 = fadd float %255, %.val947
  br i1 %256, label %inter_warp_reduce-true297.cont.cont.then1129, label %inter_warp_reduce-true297.cont.cont.cont1128

inter_warp_reduce-true297.cont.cont.then1129:     ; preds = %inter_warp_reduce-true297.cont.cont
  store float %add.45.i1045, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont1128

inter_warp_reduce-true297.cont.cont.cont1128:     ; preds = %inter_warp_reduce-true297.cont.cont, %inter_warp_reduce-true297.cont.cont.then1129
  %initial_value_addr299.1 = phi float [ %initial_value_addr299.0, %inter_warp_reduce-true297.cont.cont.then1129 ], [ %add.45.i1045, %inter_warp_reduce-true297.cont.cont ]
  %257 = icmp ult i32 %.pre, 16
  %258 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1045, i32 4, i32 31)
  br i1 %257, label %inter_warp_reduce-true297.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont

inter_warp_reduce-true297.cont.cont.then:         ; preds = %inter_warp_reduce-true297.cont.cont.cont1128
  %.val946.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont:         ; preds = %inter_warp_reduce-true297.cont.cont.cont1128, %inter_warp_reduce-true297.cont.cont.then
  %.val946 = phi float [ %.val946.then.val, %inter_warp_reduce-true297.cont.cont.then ], [ %initial_value_addr299.1, %inter_warp_reduce-true297.cont.cont.cont1128 ]
  %259 = icmp ult i32 %.pre, 16
  %add.45.i1046 = fadd float %258, %.val946
  br i1 %259, label %inter_warp_reduce-true297.cont.cont.cont.then1127, label %inter_warp_reduce-true297.cont.cont.cont.cont1126

inter_warp_reduce-true297.cont.cont.cont.then1127: ; preds = %inter_warp_reduce-true297.cont.cont.cont
  store float %add.45.i1046, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont1126

inter_warp_reduce-true297.cont.cont.cont.cont1126: ; preds = %inter_warp_reduce-true297.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.then1127
  %initial_value_addr299.2 = phi float [ %initial_value_addr299.1, %inter_warp_reduce-true297.cont.cont.cont.then1127 ], [ %add.45.i1046, %inter_warp_reduce-true297.cont.cont.cont ]
  %260 = icmp ult i32 %.pre, 16
  %261 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1046, i32 2, i32 31)
  br i1 %260, label %inter_warp_reduce-true297.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont1126
  %.val945.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont1126, %inter_warp_reduce-true297.cont.cont.cont.then
  %.val945 = phi float [ %.val945.then.val, %inter_warp_reduce-true297.cont.cont.cont.then ], [ %initial_value_addr299.2, %inter_warp_reduce-true297.cont.cont.cont.cont1126 ]
  %262 = icmp ult i32 %.pre, 16
  %add.45.i1047 = fadd float %261, %.val945
  br i1 %262, label %inter_warp_reduce-true297.cont.cont.cont.cont.then1125, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont1124

inter_warp_reduce-true297.cont.cont.cont.cont.then1125: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont
  store float %add.45.i1047, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont1124

inter_warp_reduce-true297.cont.cont.cont.cont.cont1124: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.cont.then1125
  %initial_value_addr299.3 = phi float [ %initial_value_addr299.2, %inter_warp_reduce-true297.cont.cont.cont.cont.then1125 ], [ %add.45.i1047, %inter_warp_reduce-true297.cont.cont.cont.cont ]
  %263 = icmp ult i32 %.pre, 16
  %264 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.45.i1047, i32 1, i32 31)
  br i1 %263, label %inter_warp_reduce-true297.cont.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont1124
  %.val944.then.val = load float, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont1124, %inter_warp_reduce-true297.cont.cont.cont.cont.then
  %.val944 = phi float [ %.val944.then.val, %inter_warp_reduce-true297.cont.cont.cont.cont.then ], [ %initial_value_addr299.3, %inter_warp_reduce-true297.cont.cont.cont.cont.cont1124 ]
  %265 = icmp ult i32 %.pre, 16
  %add.45.i1048 = fadd float %264, %.val944
  br i1 %265, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont
  store float %add.45.i1048, ptr addrspace(3) %249, align 4
  br label %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont, %inter_warp_reduce-true297.cont.cont.cont.cont.cont.then
  %266 = icmp eq i32 %.pre, 0
  br i1 %266, label %reduction_write_output-true315, label %common.ret

reduction_write_output-true315:                   ; preds = %inter_warp_reduce-true297.cont.cont.cont.cont.cont.cont
  store float %add.45.i1048, ptr addrspace(1) %arg181546, align 128
  br label %common.ret

intra_warp_reduce_write-after415:                 ; preds = %intra_warp_reduce_write-true414, %entry.reduce-group-3-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %267 = icmp ult i32 %.pre1250, 32
  br i1 %267, label %inter_warp_reduce-true416, label %common.ret

intra_warp_reduce_write-true414:                  ; preds = %entry.reduce-group-3-true_crit_edge
  store float %add.54.i1052, ptr addrspace(3) %50, align 4
  br label %intra_warp_reduce_write-after415

inter_warp_reduce-true416:                        ; preds = %intra_warp_reduce_write-after415
  %268 = zext i32 %.pre1301 to i64
  %269 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i64 0, i64 0, i64 0, i64 %268
  %270 = icmp ult i32 %.pre1250, 16
  br i1 %270, label %inter_warp_reduce-true416.then1143, label %inter_warp_reduce-true416.cont1142

inter_warp_reduce-true416.then1143:               ; preds = %inter_warp_reduce-true416
  %partial_reduction_result420.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont1142

inter_warp_reduce-true416.cont1142:               ; preds = %inter_warp_reduce-true416, %inter_warp_reduce-true416.then1143
  %partial_reduction_result420 = phi float [ %partial_reduction_result420.then.val, %inter_warp_reduce-true416.then1143 ], [ -0.000000e+00, %inter_warp_reduce-true416 ]
  %271 = icmp ult i32 %.pre1250, 16
  %272 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result420, i32 16, i32 31)
  br i1 %271, label %inter_warp_reduce-true416.then, label %inter_warp_reduce-true416.cont

inter_warp_reduce-true416.then:                   ; preds = %inter_warp_reduce-true416.cont1142
  %.val960.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont

inter_warp_reduce-true416.cont:                   ; preds = %inter_warp_reduce-true416.cont1142, %inter_warp_reduce-true416.then
  %.val960 = phi float [ %.val960.then.val, %inter_warp_reduce-true416.then ], [ -0.000000e+00, %inter_warp_reduce-true416.cont1142 ]
  %273 = icmp ult i32 %.pre1250, 16
  %add.54.i1055 = fadd float %272, %.val960
  br i1 %273, label %inter_warp_reduce-true416.cont.then1141, label %inter_warp_reduce-true416.cont.cont1140

inter_warp_reduce-true416.cont.then1141:          ; preds = %inter_warp_reduce-true416.cont
  store float %add.54.i1055, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont1140

inter_warp_reduce-true416.cont.cont1140:          ; preds = %inter_warp_reduce-true416.cont, %inter_warp_reduce-true416.cont.then1141
  %initial_value_addr418.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true416.cont.then1141 ], [ %add.54.i1055, %inter_warp_reduce-true416.cont ]
  %274 = icmp ult i32 %.pre1250, 16
  %275 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1055, i32 8, i32 31)
  br i1 %274, label %inter_warp_reduce-true416.cont.then, label %inter_warp_reduce-true416.cont.cont

inter_warp_reduce-true416.cont.then:              ; preds = %inter_warp_reduce-true416.cont.cont1140
  %.val959.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont

inter_warp_reduce-true416.cont.cont:              ; preds = %inter_warp_reduce-true416.cont.cont1140, %inter_warp_reduce-true416.cont.then
  %.val959 = phi float [ %.val959.then.val, %inter_warp_reduce-true416.cont.then ], [ %initial_value_addr418.0, %inter_warp_reduce-true416.cont.cont1140 ]
  %276 = icmp ult i32 %.pre1250, 16
  %add.54.i1056 = fadd float %275, %.val959
  br i1 %276, label %inter_warp_reduce-true416.cont.cont.then1139, label %inter_warp_reduce-true416.cont.cont.cont1138

inter_warp_reduce-true416.cont.cont.then1139:     ; preds = %inter_warp_reduce-true416.cont.cont
  store float %add.54.i1056, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont1138

inter_warp_reduce-true416.cont.cont.cont1138:     ; preds = %inter_warp_reduce-true416.cont.cont, %inter_warp_reduce-true416.cont.cont.then1139
  %initial_value_addr418.1 = phi float [ %initial_value_addr418.0, %inter_warp_reduce-true416.cont.cont.then1139 ], [ %add.54.i1056, %inter_warp_reduce-true416.cont.cont ]
  %277 = icmp ult i32 %.pre1250, 16
  %278 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1056, i32 4, i32 31)
  br i1 %277, label %inter_warp_reduce-true416.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont

inter_warp_reduce-true416.cont.cont.then:         ; preds = %inter_warp_reduce-true416.cont.cont.cont1138
  %.val958.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont:         ; preds = %inter_warp_reduce-true416.cont.cont.cont1138, %inter_warp_reduce-true416.cont.cont.then
  %.val958 = phi float [ %.val958.then.val, %inter_warp_reduce-true416.cont.cont.then ], [ %initial_value_addr418.1, %inter_warp_reduce-true416.cont.cont.cont1138 ]
  %279 = icmp ult i32 %.pre1250, 16
  %add.54.i1057 = fadd float %278, %.val958
  br i1 %279, label %inter_warp_reduce-true416.cont.cont.cont.then1137, label %inter_warp_reduce-true416.cont.cont.cont.cont1136

inter_warp_reduce-true416.cont.cont.cont.then1137: ; preds = %inter_warp_reduce-true416.cont.cont.cont
  store float %add.54.i1057, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont1136

inter_warp_reduce-true416.cont.cont.cont.cont1136: ; preds = %inter_warp_reduce-true416.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.then1137
  %initial_value_addr418.2 = phi float [ %initial_value_addr418.1, %inter_warp_reduce-true416.cont.cont.cont.then1137 ], [ %add.54.i1057, %inter_warp_reduce-true416.cont.cont.cont ]
  %280 = icmp ult i32 %.pre1250, 16
  %281 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1057, i32 2, i32 31)
  br i1 %280, label %inter_warp_reduce-true416.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont1136
  %.val957.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont1136, %inter_warp_reduce-true416.cont.cont.cont.then
  %.val957 = phi float [ %.val957.then.val, %inter_warp_reduce-true416.cont.cont.cont.then ], [ %initial_value_addr418.2, %inter_warp_reduce-true416.cont.cont.cont.cont1136 ]
  %282 = icmp ult i32 %.pre1250, 16
  %add.54.i1058 = fadd float %281, %.val957
  br i1 %282, label %inter_warp_reduce-true416.cont.cont.cont.cont.then1135, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont1134

inter_warp_reduce-true416.cont.cont.cont.cont.then1135: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont
  store float %add.54.i1058, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont1134

inter_warp_reduce-true416.cont.cont.cont.cont.cont1134: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.cont.then1135
  %initial_value_addr418.3 = phi float [ %initial_value_addr418.2, %inter_warp_reduce-true416.cont.cont.cont.cont.then1135 ], [ %add.54.i1058, %inter_warp_reduce-true416.cont.cont.cont.cont ]
  %283 = icmp ult i32 %.pre1250, 16
  %284 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.54.i1058, i32 1, i32 31)
  br i1 %283, label %inter_warp_reduce-true416.cont.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont1134
  %.val956.then.val = load float, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont1134, %inter_warp_reduce-true416.cont.cont.cont.cont.then
  %.val956 = phi float [ %.val956.then.val, %inter_warp_reduce-true416.cont.cont.cont.cont.then ], [ %initial_value_addr418.3, %inter_warp_reduce-true416.cont.cont.cont.cont.cont1134 ]
  %285 = icmp ult i32 %.pre1250, 16
  %add.54.i1059 = fadd float %284, %.val956
  br i1 %285, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont
  store float %add.54.i1059, ptr addrspace(3) %269, align 4
  br label %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont, %inter_warp_reduce-true416.cont.cont.cont.cont.cont.then
  %286 = icmp eq i32 %.pre1250, 0
  br i1 %286, label %reduction_write_output-true434, label %common.ret

reduction_write_output-true434:                   ; preds = %inter_warp_reduce-true416.cont.cont.cont.cont.cont.cont
  store float %add.54.i1059, ptr addrspace(1) %arg191548, align 128
  br label %common.ret

intra_warp_reduce_write-after534:                 ; preds = %intra_warp_reduce_write-true533, %entry.reduce-group-4-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %287 = icmp ult i32 %.pre1302, 32
  br i1 %287, label %inter_warp_reduce-true535, label %common.ret

intra_warp_reduce_write-true533:                  ; preds = %entry.reduce-group-4-true_crit_edge
  store float %add.63.i1063, ptr addrspace(3) %75, align 4
  br label %intra_warp_reduce_write-after534

inter_warp_reduce-true535:                        ; preds = %intra_warp_reduce_write-after534
  %288 = zext i32 %.pre1353 to i64
  %289 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i64 0, i64 0, i64 0, i64 %288
  %290 = icmp ult i32 %.pre1302, 16
  br i1 %290, label %inter_warp_reduce-true535.then1153, label %inter_warp_reduce-true535.cont1152

inter_warp_reduce-true535.then1153:               ; preds = %inter_warp_reduce-true535
  %partial_reduction_result539.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont1152

inter_warp_reduce-true535.cont1152:               ; preds = %inter_warp_reduce-true535, %inter_warp_reduce-true535.then1153
  %partial_reduction_result539 = phi float [ %partial_reduction_result539.then.val, %inter_warp_reduce-true535.then1153 ], [ -0.000000e+00, %inter_warp_reduce-true535 ]
  %291 = icmp ult i32 %.pre1302, 16
  %292 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result539, i32 16, i32 31)
  br i1 %291, label %inter_warp_reduce-true535.then, label %inter_warp_reduce-true535.cont

inter_warp_reduce-true535.then:                   ; preds = %inter_warp_reduce-true535.cont1152
  %.val972.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont

inter_warp_reduce-true535.cont:                   ; preds = %inter_warp_reduce-true535.cont1152, %inter_warp_reduce-true535.then
  %.val972 = phi float [ %.val972.then.val, %inter_warp_reduce-true535.then ], [ -0.000000e+00, %inter_warp_reduce-true535.cont1152 ]
  %293 = icmp ult i32 %.pre1302, 16
  %add.63.i1066 = fadd float %292, %.val972
  br i1 %293, label %inter_warp_reduce-true535.cont.then1151, label %inter_warp_reduce-true535.cont.cont1150

inter_warp_reduce-true535.cont.then1151:          ; preds = %inter_warp_reduce-true535.cont
  store float %add.63.i1066, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont1150

inter_warp_reduce-true535.cont.cont1150:          ; preds = %inter_warp_reduce-true535.cont, %inter_warp_reduce-true535.cont.then1151
  %initial_value_addr537.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true535.cont.then1151 ], [ %add.63.i1066, %inter_warp_reduce-true535.cont ]
  %294 = icmp ult i32 %.pre1302, 16
  %295 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1066, i32 8, i32 31)
  br i1 %294, label %inter_warp_reduce-true535.cont.then, label %inter_warp_reduce-true535.cont.cont

inter_warp_reduce-true535.cont.then:              ; preds = %inter_warp_reduce-true535.cont.cont1150
  %.val971.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont

inter_warp_reduce-true535.cont.cont:              ; preds = %inter_warp_reduce-true535.cont.cont1150, %inter_warp_reduce-true535.cont.then
  %.val971 = phi float [ %.val971.then.val, %inter_warp_reduce-true535.cont.then ], [ %initial_value_addr537.0, %inter_warp_reduce-true535.cont.cont1150 ]
  %296 = icmp ult i32 %.pre1302, 16
  %add.63.i1067 = fadd float %295, %.val971
  br i1 %296, label %inter_warp_reduce-true535.cont.cont.then1149, label %inter_warp_reduce-true535.cont.cont.cont1148

inter_warp_reduce-true535.cont.cont.then1149:     ; preds = %inter_warp_reduce-true535.cont.cont
  store float %add.63.i1067, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont1148

inter_warp_reduce-true535.cont.cont.cont1148:     ; preds = %inter_warp_reduce-true535.cont.cont, %inter_warp_reduce-true535.cont.cont.then1149
  %initial_value_addr537.1 = phi float [ %initial_value_addr537.0, %inter_warp_reduce-true535.cont.cont.then1149 ], [ %add.63.i1067, %inter_warp_reduce-true535.cont.cont ]
  %297 = icmp ult i32 %.pre1302, 16
  %298 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1067, i32 4, i32 31)
  br i1 %297, label %inter_warp_reduce-true535.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont

inter_warp_reduce-true535.cont.cont.then:         ; preds = %inter_warp_reduce-true535.cont.cont.cont1148
  %.val970.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont:         ; preds = %inter_warp_reduce-true535.cont.cont.cont1148, %inter_warp_reduce-true535.cont.cont.then
  %.val970 = phi float [ %.val970.then.val, %inter_warp_reduce-true535.cont.cont.then ], [ %initial_value_addr537.1, %inter_warp_reduce-true535.cont.cont.cont1148 ]
  %299 = icmp ult i32 %.pre1302, 16
  %add.63.i1068 = fadd float %298, %.val970
  br i1 %299, label %inter_warp_reduce-true535.cont.cont.cont.then1147, label %inter_warp_reduce-true535.cont.cont.cont.cont1146

inter_warp_reduce-true535.cont.cont.cont.then1147: ; preds = %inter_warp_reduce-true535.cont.cont.cont
  store float %add.63.i1068, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont1146

inter_warp_reduce-true535.cont.cont.cont.cont1146: ; preds = %inter_warp_reduce-true535.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.then1147
  %initial_value_addr537.2 = phi float [ %initial_value_addr537.1, %inter_warp_reduce-true535.cont.cont.cont.then1147 ], [ %add.63.i1068, %inter_warp_reduce-true535.cont.cont.cont ]
  %300 = icmp ult i32 %.pre1302, 16
  %301 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1068, i32 2, i32 31)
  br i1 %300, label %inter_warp_reduce-true535.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont1146
  %.val969.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont1146, %inter_warp_reduce-true535.cont.cont.cont.then
  %.val969 = phi float [ %.val969.then.val, %inter_warp_reduce-true535.cont.cont.cont.then ], [ %initial_value_addr537.2, %inter_warp_reduce-true535.cont.cont.cont.cont1146 ]
  %302 = icmp ult i32 %.pre1302, 16
  %add.63.i1069 = fadd float %301, %.val969
  br i1 %302, label %inter_warp_reduce-true535.cont.cont.cont.cont.then1145, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont1144

inter_warp_reduce-true535.cont.cont.cont.cont.then1145: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont
  store float %add.63.i1069, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont1144

inter_warp_reduce-true535.cont.cont.cont.cont.cont1144: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.cont.then1145
  %initial_value_addr537.3 = phi float [ %initial_value_addr537.2, %inter_warp_reduce-true535.cont.cont.cont.cont.then1145 ], [ %add.63.i1069, %inter_warp_reduce-true535.cont.cont.cont.cont ]
  %303 = icmp ult i32 %.pre1302, 16
  %304 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.63.i1069, i32 1, i32 31)
  br i1 %303, label %inter_warp_reduce-true535.cont.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont1144
  %.val968.then.val = load float, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont1144, %inter_warp_reduce-true535.cont.cont.cont.cont.then
  %.val968 = phi float [ %.val968.then.val, %inter_warp_reduce-true535.cont.cont.cont.cont.then ], [ %initial_value_addr537.3, %inter_warp_reduce-true535.cont.cont.cont.cont.cont1144 ]
  %305 = icmp ult i32 %.pre1302, 16
  %add.63.i1070 = fadd float %304, %.val968
  br i1 %305, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont
  store float %add.63.i1070, ptr addrspace(3) %289, align 4
  br label %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont, %inter_warp_reduce-true535.cont.cont.cont.cont.cont.then
  %306 = icmp eq i32 %.pre1302, 0
  br i1 %306, label %reduction_write_output-true553, label %common.ret

reduction_write_output-true553:                   ; preds = %inter_warp_reduce-true535.cont.cont.cont.cont.cont.cont
  store float %add.63.i1070, ptr addrspace(1) %arg201550, align 128
  br label %common.ret

intra_warp_reduce_write-after653:                 ; preds = %intra_warp_reduce_write-true652, %entry.reduce-group-5-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %307 = icmp ult i32 %.pre1354, 32
  br i1 %307, label %inter_warp_reduce-true654, label %common.ret

intra_warp_reduce_write-true652:                  ; preds = %entry.reduce-group-5-true_crit_edge
  store float %add.72.i1074, ptr addrspace(3) %100, align 4
  br label %intra_warp_reduce_write-after653

inter_warp_reduce-true654:                        ; preds = %intra_warp_reduce_write-after653
  %308 = zext i32 %.pre1405 to i64
  %309 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i64 0, i64 0, i64 0, i64 %308
  %310 = icmp ult i32 %.pre1354, 16
  br i1 %310, label %inter_warp_reduce-true654.then1163, label %inter_warp_reduce-true654.cont1162

inter_warp_reduce-true654.then1163:               ; preds = %inter_warp_reduce-true654
  %partial_reduction_result658.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont1162

inter_warp_reduce-true654.cont1162:               ; preds = %inter_warp_reduce-true654, %inter_warp_reduce-true654.then1163
  %partial_reduction_result658 = phi float [ %partial_reduction_result658.then.val, %inter_warp_reduce-true654.then1163 ], [ -0.000000e+00, %inter_warp_reduce-true654 ]
  %311 = icmp ult i32 %.pre1354, 16
  %312 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result658, i32 16, i32 31)
  br i1 %311, label %inter_warp_reduce-true654.then, label %inter_warp_reduce-true654.cont

inter_warp_reduce-true654.then:                   ; preds = %inter_warp_reduce-true654.cont1162
  %.val984.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont

inter_warp_reduce-true654.cont:                   ; preds = %inter_warp_reduce-true654.cont1162, %inter_warp_reduce-true654.then
  %.val984 = phi float [ %.val984.then.val, %inter_warp_reduce-true654.then ], [ -0.000000e+00, %inter_warp_reduce-true654.cont1162 ]
  %313 = icmp ult i32 %.pre1354, 16
  %add.72.i1077 = fadd float %312, %.val984
  br i1 %313, label %inter_warp_reduce-true654.cont.then1161, label %inter_warp_reduce-true654.cont.cont1160

inter_warp_reduce-true654.cont.then1161:          ; preds = %inter_warp_reduce-true654.cont
  store float %add.72.i1077, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont1160

inter_warp_reduce-true654.cont.cont1160:          ; preds = %inter_warp_reduce-true654.cont, %inter_warp_reduce-true654.cont.then1161
  %initial_value_addr656.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true654.cont.then1161 ], [ %add.72.i1077, %inter_warp_reduce-true654.cont ]
  %314 = icmp ult i32 %.pre1354, 16
  %315 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1077, i32 8, i32 31)
  br i1 %314, label %inter_warp_reduce-true654.cont.then, label %inter_warp_reduce-true654.cont.cont

inter_warp_reduce-true654.cont.then:              ; preds = %inter_warp_reduce-true654.cont.cont1160
  %.val983.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont

inter_warp_reduce-true654.cont.cont:              ; preds = %inter_warp_reduce-true654.cont.cont1160, %inter_warp_reduce-true654.cont.then
  %.val983 = phi float [ %.val983.then.val, %inter_warp_reduce-true654.cont.then ], [ %initial_value_addr656.0, %inter_warp_reduce-true654.cont.cont1160 ]
  %316 = icmp ult i32 %.pre1354, 16
  %add.72.i1078 = fadd float %315, %.val983
  br i1 %316, label %inter_warp_reduce-true654.cont.cont.then1159, label %inter_warp_reduce-true654.cont.cont.cont1158

inter_warp_reduce-true654.cont.cont.then1159:     ; preds = %inter_warp_reduce-true654.cont.cont
  store float %add.72.i1078, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont1158

inter_warp_reduce-true654.cont.cont.cont1158:     ; preds = %inter_warp_reduce-true654.cont.cont, %inter_warp_reduce-true654.cont.cont.then1159
  %initial_value_addr656.1 = phi float [ %initial_value_addr656.0, %inter_warp_reduce-true654.cont.cont.then1159 ], [ %add.72.i1078, %inter_warp_reduce-true654.cont.cont ]
  %317 = icmp ult i32 %.pre1354, 16
  %318 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1078, i32 4, i32 31)
  br i1 %317, label %inter_warp_reduce-true654.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont

inter_warp_reduce-true654.cont.cont.then:         ; preds = %inter_warp_reduce-true654.cont.cont.cont1158
  %.val982.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont:         ; preds = %inter_warp_reduce-true654.cont.cont.cont1158, %inter_warp_reduce-true654.cont.cont.then
  %.val982 = phi float [ %.val982.then.val, %inter_warp_reduce-true654.cont.cont.then ], [ %initial_value_addr656.1, %inter_warp_reduce-true654.cont.cont.cont1158 ]
  %319 = icmp ult i32 %.pre1354, 16
  %add.72.i1079 = fadd float %318, %.val982
  br i1 %319, label %inter_warp_reduce-true654.cont.cont.cont.then1157, label %inter_warp_reduce-true654.cont.cont.cont.cont1156

inter_warp_reduce-true654.cont.cont.cont.then1157: ; preds = %inter_warp_reduce-true654.cont.cont.cont
  store float %add.72.i1079, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont1156

inter_warp_reduce-true654.cont.cont.cont.cont1156: ; preds = %inter_warp_reduce-true654.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.then1157
  %initial_value_addr656.2 = phi float [ %initial_value_addr656.1, %inter_warp_reduce-true654.cont.cont.cont.then1157 ], [ %add.72.i1079, %inter_warp_reduce-true654.cont.cont.cont ]
  %320 = icmp ult i32 %.pre1354, 16
  %321 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1079, i32 2, i32 31)
  br i1 %320, label %inter_warp_reduce-true654.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont1156
  %.val981.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont1156, %inter_warp_reduce-true654.cont.cont.cont.then
  %.val981 = phi float [ %.val981.then.val, %inter_warp_reduce-true654.cont.cont.cont.then ], [ %initial_value_addr656.2, %inter_warp_reduce-true654.cont.cont.cont.cont1156 ]
  %322 = icmp ult i32 %.pre1354, 16
  %add.72.i1080 = fadd float %321, %.val981
  br i1 %322, label %inter_warp_reduce-true654.cont.cont.cont.cont.then1155, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont1154

inter_warp_reduce-true654.cont.cont.cont.cont.then1155: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont
  store float %add.72.i1080, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont1154

inter_warp_reduce-true654.cont.cont.cont.cont.cont1154: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.cont.then1155
  %initial_value_addr656.3 = phi float [ %initial_value_addr656.2, %inter_warp_reduce-true654.cont.cont.cont.cont.then1155 ], [ %add.72.i1080, %inter_warp_reduce-true654.cont.cont.cont.cont ]
  %323 = icmp ult i32 %.pre1354, 16
  %324 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i1080, i32 1, i32 31)
  br i1 %323, label %inter_warp_reduce-true654.cont.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont1154
  %.val980.then.val = load float, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont1154, %inter_warp_reduce-true654.cont.cont.cont.cont.then
  %.val980 = phi float [ %.val980.then.val, %inter_warp_reduce-true654.cont.cont.cont.cont.then ], [ %initial_value_addr656.3, %inter_warp_reduce-true654.cont.cont.cont.cont.cont1154 ]
  %325 = icmp ult i32 %.pre1354, 16
  %add.72.i1081 = fadd float %324, %.val980
  br i1 %325, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont
  store float %add.72.i1081, ptr addrspace(3) %309, align 4
  br label %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont, %inter_warp_reduce-true654.cont.cont.cont.cont.cont.then
  %326 = icmp eq i32 %.pre1354, 0
  br i1 %326, label %reduction_write_output-true672, label %common.ret

reduction_write_output-true672:                   ; preds = %inter_warp_reduce-true654.cont.cont.cont.cont.cont.cont
  store float %add.72.i1081, ptr addrspace(1) %arg211552, align 128
  br label %common.ret

intra_warp_reduce_write-after772:                 ; preds = %intra_warp_reduce_write-true771, %entry.reduce-group-6-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %327 = icmp ult i32 %.pre1406, 32
  br i1 %327, label %inter_warp_reduce-true773, label %common.ret

intra_warp_reduce_write-true771:                  ; preds = %entry.reduce-group-6-true_crit_edge
  store float %add.81.i1085, ptr addrspace(3) %125, align 4
  br label %intra_warp_reduce_write-after772

inter_warp_reduce-true773:                        ; preds = %intra_warp_reduce_write-after772
  %328 = zext i32 %.pre1457 to i64
  %329 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i64 0, i64 0, i64 0, i64 %328
  %330 = icmp ult i32 %.pre1406, 16
  br i1 %330, label %inter_warp_reduce-true773.then1173, label %inter_warp_reduce-true773.cont1172

inter_warp_reduce-true773.then1173:               ; preds = %inter_warp_reduce-true773
  %partial_reduction_result777.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont1172

inter_warp_reduce-true773.cont1172:               ; preds = %inter_warp_reduce-true773, %inter_warp_reduce-true773.then1173
  %partial_reduction_result777 = phi float [ %partial_reduction_result777.then.val, %inter_warp_reduce-true773.then1173 ], [ -0.000000e+00, %inter_warp_reduce-true773 ]
  %331 = icmp ult i32 %.pre1406, 16
  %332 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result777, i32 16, i32 31)
  br i1 %331, label %inter_warp_reduce-true773.then, label %inter_warp_reduce-true773.cont

inter_warp_reduce-true773.then:                   ; preds = %inter_warp_reduce-true773.cont1172
  %.val996.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont

inter_warp_reduce-true773.cont:                   ; preds = %inter_warp_reduce-true773.cont1172, %inter_warp_reduce-true773.then
  %.val996 = phi float [ %.val996.then.val, %inter_warp_reduce-true773.then ], [ -0.000000e+00, %inter_warp_reduce-true773.cont1172 ]
  %333 = icmp ult i32 %.pre1406, 16
  %add.81.i1088 = fadd float %332, %.val996
  br i1 %333, label %inter_warp_reduce-true773.cont.then1171, label %inter_warp_reduce-true773.cont.cont1170

inter_warp_reduce-true773.cont.then1171:          ; preds = %inter_warp_reduce-true773.cont
  store float %add.81.i1088, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont1170

inter_warp_reduce-true773.cont.cont1170:          ; preds = %inter_warp_reduce-true773.cont, %inter_warp_reduce-true773.cont.then1171
  %initial_value_addr775.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true773.cont.then1171 ], [ %add.81.i1088, %inter_warp_reduce-true773.cont ]
  %334 = icmp ult i32 %.pre1406, 16
  %335 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1088, i32 8, i32 31)
  br i1 %334, label %inter_warp_reduce-true773.cont.then, label %inter_warp_reduce-true773.cont.cont

inter_warp_reduce-true773.cont.then:              ; preds = %inter_warp_reduce-true773.cont.cont1170
  %.val995.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont

inter_warp_reduce-true773.cont.cont:              ; preds = %inter_warp_reduce-true773.cont.cont1170, %inter_warp_reduce-true773.cont.then
  %.val995 = phi float [ %.val995.then.val, %inter_warp_reduce-true773.cont.then ], [ %initial_value_addr775.0, %inter_warp_reduce-true773.cont.cont1170 ]
  %336 = icmp ult i32 %.pre1406, 16
  %add.81.i1089 = fadd float %335, %.val995
  br i1 %336, label %inter_warp_reduce-true773.cont.cont.then1169, label %inter_warp_reduce-true773.cont.cont.cont1168

inter_warp_reduce-true773.cont.cont.then1169:     ; preds = %inter_warp_reduce-true773.cont.cont
  store float %add.81.i1089, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont1168

inter_warp_reduce-true773.cont.cont.cont1168:     ; preds = %inter_warp_reduce-true773.cont.cont, %inter_warp_reduce-true773.cont.cont.then1169
  %initial_value_addr775.1 = phi float [ %initial_value_addr775.0, %inter_warp_reduce-true773.cont.cont.then1169 ], [ %add.81.i1089, %inter_warp_reduce-true773.cont.cont ]
  %337 = icmp ult i32 %.pre1406, 16
  %338 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1089, i32 4, i32 31)
  br i1 %337, label %inter_warp_reduce-true773.cont.cont.then, label %inter_warp_reduce-true773.cont.cont.cont

inter_warp_reduce-true773.cont.cont.then:         ; preds = %inter_warp_reduce-true773.cont.cont.cont1168
  %.val994.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont:         ; preds = %inter_warp_reduce-true773.cont.cont.cont1168, %inter_warp_reduce-true773.cont.cont.then
  %.val994 = phi float [ %.val994.then.val, %inter_warp_reduce-true773.cont.cont.then ], [ %initial_value_addr775.1, %inter_warp_reduce-true773.cont.cont.cont1168 ]
  %339 = icmp ult i32 %.pre1406, 16
  %add.81.i1090 = fadd float %338, %.val994
  br i1 %339, label %inter_warp_reduce-true773.cont.cont.cont.then1167, label %inter_warp_reduce-true773.cont.cont.cont.cont1166

inter_warp_reduce-true773.cont.cont.cont.then1167: ; preds = %inter_warp_reduce-true773.cont.cont.cont
  store float %add.81.i1090, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont.cont1166

inter_warp_reduce-true773.cont.cont.cont.cont1166: ; preds = %inter_warp_reduce-true773.cont.cont.cont, %inter_warp_reduce-true773.cont.cont.cont.then1167
  %initial_value_addr775.2 = phi float [ %initial_value_addr775.1, %inter_warp_reduce-true773.cont.cont.cont.then1167 ], [ %add.81.i1090, %inter_warp_reduce-true773.cont.cont.cont ]
  %340 = icmp ult i32 %.pre1406, 16
  %341 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1090, i32 2, i32 31)
  br i1 %340, label %inter_warp_reduce-true773.cont.cont.cont.then, label %inter_warp_reduce-true773.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont1166
  %.val993.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont1166, %inter_warp_reduce-true773.cont.cont.cont.then
  %.val993 = phi float [ %.val993.then.val, %inter_warp_reduce-true773.cont.cont.cont.then ], [ %initial_value_addr775.2, %inter_warp_reduce-true773.cont.cont.cont.cont1166 ]
  %342 = icmp ult i32 %.pre1406, 16
  %add.81.i1091 = fadd float %341, %.val993
  br i1 %342, label %inter_warp_reduce-true773.cont.cont.cont.cont.then1165, label %inter_warp_reduce-true773.cont.cont.cont.cont.cont1164

inter_warp_reduce-true773.cont.cont.cont.cont.then1165: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont
  store float %add.81.i1091, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont.cont.cont1164

inter_warp_reduce-true773.cont.cont.cont.cont.cont1164: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont, %inter_warp_reduce-true773.cont.cont.cont.cont.then1165
  %initial_value_addr775.3 = phi float [ %initial_value_addr775.2, %inter_warp_reduce-true773.cont.cont.cont.cont.then1165 ], [ %add.81.i1091, %inter_warp_reduce-true773.cont.cont.cont.cont ]
  %343 = icmp ult i32 %.pre1406, 16
  %344 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.81.i1091, i32 1, i32 31)
  br i1 %343, label %inter_warp_reduce-true773.cont.cont.cont.cont.then, label %inter_warp_reduce-true773.cont.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont.cont1164
  %.val992.then.val = load float, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont.cont1164, %inter_warp_reduce-true773.cont.cont.cont.cont.then
  %.val992 = phi float [ %.val992.then.val, %inter_warp_reduce-true773.cont.cont.cont.cont.then ], [ %initial_value_addr775.3, %inter_warp_reduce-true773.cont.cont.cont.cont.cont1164 ]
  %345 = icmp ult i32 %.pre1406, 16
  %add.81.i1092 = fadd float %344, %.val992
  br i1 %345, label %inter_warp_reduce-true773.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true773.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont.cont
  store float %add.81.i1092, ptr addrspace(3) %329, align 4
  br label %inter_warp_reduce-true773.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true773.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont.cont, %inter_warp_reduce-true773.cont.cont.cont.cont.cont.then
  %346 = icmp eq i32 %.pre1406, 0
  br i1 %346, label %reduction_write_output-true791, label %common.ret

reduction_write_output-true791:                   ; preds = %inter_warp_reduce-true773.cont.cont.cont.cont.cont.cont
  store float %add.81.i1092, ptr addrspace(1) %arg221554, align 128
  br label %common.ret

intra_warp_reduce_write-after891:                 ; preds = %intra_warp_reduce_write-true890, %entry.reduce-group-7-true_crit_edge
  tail call void @llvm.nvvm.barrier0()
  %347 = icmp ult i32 %.pre1458, 32
  br i1 %347, label %inter_warp_reduce-true892, label %common.ret

intra_warp_reduce_write-true890:                  ; preds = %entry.reduce-group-7-true_crit_edge
  store float %add.90.i1096, ptr addrspace(3) %150, align 4
  br label %intra_warp_reduce_write-after891

inter_warp_reduce-true892:                        ; preds = %intra_warp_reduce_write-after891
  %348 = zext i32 %.pre1509 to i64
  %349 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i64 0, i64 0, i64 0, i64 %348
  %350 = icmp ult i32 %.pre1458, 16
  br i1 %350, label %inter_warp_reduce-true892.then1183, label %inter_warp_reduce-true892.cont1182

inter_warp_reduce-true892.then1183:               ; preds = %inter_warp_reduce-true892
  %partial_reduction_result896.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont1182

inter_warp_reduce-true892.cont1182:               ; preds = %inter_warp_reduce-true892, %inter_warp_reduce-true892.then1183
  %partial_reduction_result896 = phi float [ %partial_reduction_result896.then.val, %inter_warp_reduce-true892.then1183 ], [ -0.000000e+00, %inter_warp_reduce-true892 ]
  %351 = icmp ult i32 %.pre1458, 16
  %352 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result896, i32 16, i32 31)
  br i1 %351, label %inter_warp_reduce-true892.then, label %inter_warp_reduce-true892.cont

inter_warp_reduce-true892.then:                   ; preds = %inter_warp_reduce-true892.cont1182
  %.val1008.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont

inter_warp_reduce-true892.cont:                   ; preds = %inter_warp_reduce-true892.cont1182, %inter_warp_reduce-true892.then
  %.val1008 = phi float [ %.val1008.then.val, %inter_warp_reduce-true892.then ], [ -0.000000e+00, %inter_warp_reduce-true892.cont1182 ]
  %353 = icmp ult i32 %.pre1458, 16
  %add.90.i1099 = fadd float %352, %.val1008
  br i1 %353, label %inter_warp_reduce-true892.cont.then1181, label %inter_warp_reduce-true892.cont.cont1180

inter_warp_reduce-true892.cont.then1181:          ; preds = %inter_warp_reduce-true892.cont
  store float %add.90.i1099, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont1180

inter_warp_reduce-true892.cont.cont1180:          ; preds = %inter_warp_reduce-true892.cont, %inter_warp_reduce-true892.cont.then1181
  %initial_value_addr894.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true892.cont.then1181 ], [ %add.90.i1099, %inter_warp_reduce-true892.cont ]
  %354 = icmp ult i32 %.pre1458, 16
  %355 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1099, i32 8, i32 31)
  br i1 %354, label %inter_warp_reduce-true892.cont.then, label %inter_warp_reduce-true892.cont.cont

inter_warp_reduce-true892.cont.then:              ; preds = %inter_warp_reduce-true892.cont.cont1180
  %.val1007.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont

inter_warp_reduce-true892.cont.cont:              ; preds = %inter_warp_reduce-true892.cont.cont1180, %inter_warp_reduce-true892.cont.then
  %.val1007 = phi float [ %.val1007.then.val, %inter_warp_reduce-true892.cont.then ], [ %initial_value_addr894.0, %inter_warp_reduce-true892.cont.cont1180 ]
  %356 = icmp ult i32 %.pre1458, 16
  %add.90.i1100 = fadd float %355, %.val1007
  br i1 %356, label %inter_warp_reduce-true892.cont.cont.then1179, label %inter_warp_reduce-true892.cont.cont.cont1178

inter_warp_reduce-true892.cont.cont.then1179:     ; preds = %inter_warp_reduce-true892.cont.cont
  store float %add.90.i1100, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont1178

inter_warp_reduce-true892.cont.cont.cont1178:     ; preds = %inter_warp_reduce-true892.cont.cont, %inter_warp_reduce-true892.cont.cont.then1179
  %initial_value_addr894.1 = phi float [ %initial_value_addr894.0, %inter_warp_reduce-true892.cont.cont.then1179 ], [ %add.90.i1100, %inter_warp_reduce-true892.cont.cont ]
  %357 = icmp ult i32 %.pre1458, 16
  %358 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1100, i32 4, i32 31)
  br i1 %357, label %inter_warp_reduce-true892.cont.cont.then, label %inter_warp_reduce-true892.cont.cont.cont

inter_warp_reduce-true892.cont.cont.then:         ; preds = %inter_warp_reduce-true892.cont.cont.cont1178
  %.val1006.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont:         ; preds = %inter_warp_reduce-true892.cont.cont.cont1178, %inter_warp_reduce-true892.cont.cont.then
  %.val1006 = phi float [ %.val1006.then.val, %inter_warp_reduce-true892.cont.cont.then ], [ %initial_value_addr894.1, %inter_warp_reduce-true892.cont.cont.cont1178 ]
  %359 = icmp ult i32 %.pre1458, 16
  %add.90.i1101 = fadd float %358, %.val1006
  br i1 %359, label %inter_warp_reduce-true892.cont.cont.cont.then1177, label %inter_warp_reduce-true892.cont.cont.cont.cont1176

inter_warp_reduce-true892.cont.cont.cont.then1177: ; preds = %inter_warp_reduce-true892.cont.cont.cont
  store float %add.90.i1101, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont.cont1176

inter_warp_reduce-true892.cont.cont.cont.cont1176: ; preds = %inter_warp_reduce-true892.cont.cont.cont, %inter_warp_reduce-true892.cont.cont.cont.then1177
  %initial_value_addr894.2 = phi float [ %initial_value_addr894.1, %inter_warp_reduce-true892.cont.cont.cont.then1177 ], [ %add.90.i1101, %inter_warp_reduce-true892.cont.cont.cont ]
  %360 = icmp ult i32 %.pre1458, 16
  %361 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1101, i32 2, i32 31)
  br i1 %360, label %inter_warp_reduce-true892.cont.cont.cont.then, label %inter_warp_reduce-true892.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.then:    ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont1176
  %.val1005.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.cont:    ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont1176, %inter_warp_reduce-true892.cont.cont.cont.then
  %.val1005 = phi float [ %.val1005.then.val, %inter_warp_reduce-true892.cont.cont.cont.then ], [ %initial_value_addr894.2, %inter_warp_reduce-true892.cont.cont.cont.cont1176 ]
  %362 = icmp ult i32 %.pre1458, 16
  %add.90.i1102 = fadd float %361, %.val1005
  br i1 %362, label %inter_warp_reduce-true892.cont.cont.cont.cont.then1175, label %inter_warp_reduce-true892.cont.cont.cont.cont.cont1174

inter_warp_reduce-true892.cont.cont.cont.cont.then1175: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont
  store float %add.90.i1102, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont.cont.cont1174

inter_warp_reduce-true892.cont.cont.cont.cont.cont1174: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont, %inter_warp_reduce-true892.cont.cont.cont.cont.then1175
  %initial_value_addr894.3 = phi float [ %initial_value_addr894.2, %inter_warp_reduce-true892.cont.cont.cont.cont.then1175 ], [ %add.90.i1102, %inter_warp_reduce-true892.cont.cont.cont.cont ]
  %363 = icmp ult i32 %.pre1458, 16
  %364 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.90.i1102, i32 1, i32 31)
  br i1 %363, label %inter_warp_reduce-true892.cont.cont.cont.cont.then, label %inter_warp_reduce-true892.cont.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont.cont1174
  %.val1004.then.val = load float, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont.cont1174, %inter_warp_reduce-true892.cont.cont.cont.cont.then
  %.val1004 = phi float [ %.val1004.then.val, %inter_warp_reduce-true892.cont.cont.cont.cont.then ], [ %initial_value_addr894.3, %inter_warp_reduce-true892.cont.cont.cont.cont.cont1174 ]
  %365 = icmp ult i32 %.pre1458, 16
  %add.90.i1103 = fadd float %364, %.val1004
  br i1 %365, label %inter_warp_reduce-true892.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true892.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont.cont
  store float %add.90.i1103, ptr addrspace(3) %349, align 4
  br label %inter_warp_reduce-true892.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true892.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont.cont, %inter_warp_reduce-true892.cont.cont.cont.cont.cont.then
  %366 = icmp eq i32 %.pre1458, 0
  br i1 %366, label %reduction_write_output-true910, label %common.ret

reduction_write_output-true910:                   ; preds = %inter_warp_reduce-true892.cont.cont.cont.cont.cont.cont
  store float %add.90.i1103, ptr addrspace(1) %arg231556, align 128
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_662(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg3) local_unnamed_addr #0 {
entry:
  %arg3120 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2118 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1116 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0114 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %1 = shl nuw nsw i32 %0, 1
  %2 = zext i32 %1 to i64
  %Arg_1.2 = getelementptr float, ptr addrspace(1) %arg1116, i64 %2
  %3 = load <2 x float>, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %Arg_1.23197 = extractelement <2 x float> %3, i32 0
  %Arg_1.29198 = extractelement <2 x float> %3, i32 1
  %Arg_0.1 = getelementptr float, ptr addrspace(1) %arg0114, i64 %2
  %4 = load <2 x float>, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %Arg_0.14213 = extractelement <2 x float> %4, i32 0
  %Arg_0.111214 = extractelement <2 x float> %4, i32 1
  %multiply.3 = fmul float %Arg_1.23197, %Arg_0.14213
  %subtract.6 = fsub float 1.000000e+00, %Arg_0.14213
  %multiply.7 = fmul float %multiply.3, %subtract.6
  %5 = getelementptr float, ptr addrspace(1) %arg3120, i64 %2
  %multiply.312 = fmul float %Arg_1.29198, %Arg_0.111214
  %subtract.616 = fsub float 1.000000e+00, %Arg_0.111214
  %multiply.717 = fmul float %multiply.312, %subtract.616
  %add.13.i96 = fadd float %multiply.7, %multiply.717
  %6 = insertelement <2 x float> poison, float %multiply.7, i32 0
  %7 = insertelement <2 x float> %6, float %multiply.717, i32 1
  store <2 x float> %7, ptr addrspace(1) %5, align 8
  %Arg_1.2.1128 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 1024
  %8 = load <2 x float>, ptr addrspace(1) %Arg_1.2.1128, align 8, !invariant.load !267
  %Arg_1.23.1199 = extractelement <2 x float> %8, i32 0
  %Arg_1.29.1200 = extractelement <2 x float> %8, i32 1
  %Arg_0.1.1130 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 1024
  %9 = load <2 x float>, ptr addrspace(1) %Arg_0.1.1130, align 8, !invariant.load !267
  %Arg_0.14.1215 = extractelement <2 x float> %9, i32 0
  %Arg_0.111.1216 = extractelement <2 x float> %9, i32 1
  %multiply.3.1 = fmul float %Arg_1.23.1199, %Arg_0.14.1215
  %subtract.6.1 = fsub float 1.000000e+00, %Arg_0.14.1215
  %multiply.7.1 = fmul float %multiply.3.1, %subtract.6.1
  %add.13.i95.1 = fadd float %add.13.i96, %multiply.7.1
  %10 = getelementptr inbounds float, ptr addrspace(1) %5, i64 1024
  %multiply.312.1 = fmul float %Arg_1.29.1200, %Arg_0.111.1216
  %subtract.616.1 = fsub float 1.000000e+00, %Arg_0.111.1216
  %multiply.717.1 = fmul float %multiply.312.1, %subtract.616.1
  %add.13.i96.1 = fadd float %add.13.i95.1, %multiply.717.1
  %11 = insertelement <2 x float> poison, float %multiply.7.1, i32 0
  %12 = insertelement <2 x float> %11, float %multiply.717.1, i32 1
  store <2 x float> %12, ptr addrspace(1) %10, align 8
  %Arg_1.2.2138 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 2048
  %13 = load <2 x float>, ptr addrspace(1) %Arg_1.2.2138, align 8, !invariant.load !267
  %Arg_1.23.2201 = extractelement <2 x float> %13, i32 0
  %Arg_1.29.2202 = extractelement <2 x float> %13, i32 1
  %Arg_0.1.2140 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 2048
  %14 = load <2 x float>, ptr addrspace(1) %Arg_0.1.2140, align 8, !invariant.load !267
  %Arg_0.14.2217 = extractelement <2 x float> %14, i32 0
  %Arg_0.111.2218 = extractelement <2 x float> %14, i32 1
  %multiply.3.2 = fmul float %Arg_1.23.2201, %Arg_0.14.2217
  %subtract.6.2 = fsub float 1.000000e+00, %Arg_0.14.2217
  %multiply.7.2 = fmul float %multiply.3.2, %subtract.6.2
  %add.13.i95.2 = fadd float %add.13.i96.1, %multiply.7.2
  %15 = getelementptr inbounds float, ptr addrspace(1) %5, i64 2048
  %multiply.312.2 = fmul float %Arg_1.29.2202, %Arg_0.111.2218
  %subtract.616.2 = fsub float 1.000000e+00, %Arg_0.111.2218
  %multiply.717.2 = fmul float %multiply.312.2, %subtract.616.2
  %add.13.i96.2 = fadd float %add.13.i95.2, %multiply.717.2
  %16 = insertelement <2 x float> poison, float %multiply.7.2, i32 0
  %17 = insertelement <2 x float> %16, float %multiply.717.2, i32 1
  store <2 x float> %17, ptr addrspace(1) %15, align 8
  %Arg_1.2.3148 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 3072
  %18 = load <2 x float>, ptr addrspace(1) %Arg_1.2.3148, align 8, !invariant.load !267
  %Arg_1.23.3203 = extractelement <2 x float> %18, i32 0
  %Arg_1.29.3204 = extractelement <2 x float> %18, i32 1
  %Arg_0.1.3150 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 3072
  %19 = load <2 x float>, ptr addrspace(1) %Arg_0.1.3150, align 8, !invariant.load !267
  %Arg_0.14.3219 = extractelement <2 x float> %19, i32 0
  %Arg_0.111.3220 = extractelement <2 x float> %19, i32 1
  %multiply.3.3 = fmul float %Arg_1.23.3203, %Arg_0.14.3219
  %subtract.6.3 = fsub float 1.000000e+00, %Arg_0.14.3219
  %multiply.7.3 = fmul float %multiply.3.3, %subtract.6.3
  %add.13.i95.3 = fadd float %add.13.i96.2, %multiply.7.3
  %20 = getelementptr inbounds float, ptr addrspace(1) %5, i64 3072
  %multiply.312.3 = fmul float %Arg_1.29.3204, %Arg_0.111.3220
  %subtract.616.3 = fsub float 1.000000e+00, %Arg_0.111.3220
  %multiply.717.3 = fmul float %multiply.312.3, %subtract.616.3
  %add.13.i96.3 = fadd float %add.13.i95.3, %multiply.717.3
  %21 = insertelement <2 x float> poison, float %multiply.7.3, i32 0
  %22 = insertelement <2 x float> %21, float %multiply.717.3, i32 1
  store <2 x float> %22, ptr addrspace(1) %20, align 8
  %Arg_1.2.4158 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 4096
  %23 = load <2 x float>, ptr addrspace(1) %Arg_1.2.4158, align 8, !invariant.load !267
  %Arg_1.23.4205 = extractelement <2 x float> %23, i32 0
  %Arg_1.29.4206 = extractelement <2 x float> %23, i32 1
  %Arg_0.1.4160 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 4096
  %24 = load <2 x float>, ptr addrspace(1) %Arg_0.1.4160, align 8, !invariant.load !267
  %Arg_0.14.4221 = extractelement <2 x float> %24, i32 0
  %Arg_0.111.4222 = extractelement <2 x float> %24, i32 1
  %multiply.3.4 = fmul float %Arg_1.23.4205, %Arg_0.14.4221
  %subtract.6.4 = fsub float 1.000000e+00, %Arg_0.14.4221
  %multiply.7.4 = fmul float %multiply.3.4, %subtract.6.4
  %add.13.i95.4 = fadd float %add.13.i96.3, %multiply.7.4
  %25 = getelementptr inbounds float, ptr addrspace(1) %5, i64 4096
  %multiply.312.4 = fmul float %Arg_1.29.4206, %Arg_0.111.4222
  %subtract.616.4 = fsub float 1.000000e+00, %Arg_0.111.4222
  %multiply.717.4 = fmul float %multiply.312.4, %subtract.616.4
  %add.13.i96.4 = fadd float %add.13.i95.4, %multiply.717.4
  %26 = insertelement <2 x float> poison, float %multiply.7.4, i32 0
  %27 = insertelement <2 x float> %26, float %multiply.717.4, i32 1
  store <2 x float> %27, ptr addrspace(1) %25, align 8
  %Arg_1.2.5168 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 5120
  %28 = load <2 x float>, ptr addrspace(1) %Arg_1.2.5168, align 8, !invariant.load !267
  %Arg_1.23.5207 = extractelement <2 x float> %28, i32 0
  %Arg_1.29.5208 = extractelement <2 x float> %28, i32 1
  %Arg_0.1.5170 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 5120
  %29 = load <2 x float>, ptr addrspace(1) %Arg_0.1.5170, align 8, !invariant.load !267
  %Arg_0.14.5223 = extractelement <2 x float> %29, i32 0
  %Arg_0.111.5224 = extractelement <2 x float> %29, i32 1
  %multiply.3.5 = fmul float %Arg_1.23.5207, %Arg_0.14.5223
  %subtract.6.5 = fsub float 1.000000e+00, %Arg_0.14.5223
  %multiply.7.5 = fmul float %multiply.3.5, %subtract.6.5
  %add.13.i95.5 = fadd float %add.13.i96.4, %multiply.7.5
  %30 = getelementptr inbounds float, ptr addrspace(1) %5, i64 5120
  %multiply.312.5 = fmul float %Arg_1.29.5208, %Arg_0.111.5224
  %subtract.616.5 = fsub float 1.000000e+00, %Arg_0.111.5224
  %multiply.717.5 = fmul float %multiply.312.5, %subtract.616.5
  %add.13.i96.5 = fadd float %add.13.i95.5, %multiply.717.5
  %31 = insertelement <2 x float> poison, float %multiply.7.5, i32 0
  %32 = insertelement <2 x float> %31, float %multiply.717.5, i32 1
  store <2 x float> %32, ptr addrspace(1) %30, align 8
  %Arg_1.2.6178 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 6144
  %33 = load <2 x float>, ptr addrspace(1) %Arg_1.2.6178, align 8, !invariant.load !267
  %Arg_1.23.6209 = extractelement <2 x float> %33, i32 0
  %Arg_1.29.6210 = extractelement <2 x float> %33, i32 1
  %Arg_0.1.6180 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 6144
  %34 = load <2 x float>, ptr addrspace(1) %Arg_0.1.6180, align 8, !invariant.load !267
  %Arg_0.14.6225 = extractelement <2 x float> %34, i32 0
  %Arg_0.111.6226 = extractelement <2 x float> %34, i32 1
  %multiply.3.6 = fmul float %Arg_1.23.6209, %Arg_0.14.6225
  %subtract.6.6 = fsub float 1.000000e+00, %Arg_0.14.6225
  %multiply.7.6 = fmul float %multiply.3.6, %subtract.6.6
  %add.13.i95.6 = fadd float %add.13.i96.5, %multiply.7.6
  %35 = getelementptr inbounds float, ptr addrspace(1) %5, i64 6144
  %multiply.312.6 = fmul float %Arg_1.29.6210, %Arg_0.111.6226
  %subtract.616.6 = fsub float 1.000000e+00, %Arg_0.111.6226
  %multiply.717.6 = fmul float %multiply.312.6, %subtract.616.6
  %add.13.i96.6 = fadd float %add.13.i95.6, %multiply.717.6
  %36 = insertelement <2 x float> poison, float %multiply.7.6, i32 0
  %37 = insertelement <2 x float> %36, float %multiply.717.6, i32 1
  store <2 x float> %37, ptr addrspace(1) %35, align 8
  %Arg_1.2.7188 = getelementptr inbounds float, ptr addrspace(1) %Arg_1.2, i64 7168
  %38 = load <2 x float>, ptr addrspace(1) %Arg_1.2.7188, align 8, !invariant.load !267
  %Arg_1.23.7211 = extractelement <2 x float> %38, i32 0
  %Arg_1.29.7212 = extractelement <2 x float> %38, i32 1
  %Arg_0.1.7190 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 7168
  %39 = load <2 x float>, ptr addrspace(1) %Arg_0.1.7190, align 8, !invariant.load !267
  %Arg_0.14.7227 = extractelement <2 x float> %39, i32 0
  %Arg_0.111.7228 = extractelement <2 x float> %39, i32 1
  %multiply.3.7 = fmul float %Arg_1.23.7211, %Arg_0.14.7227
  %subtract.6.7 = fsub float 1.000000e+00, %Arg_0.14.7227
  %multiply.7.7 = fmul float %multiply.3.7, %subtract.6.7
  %add.13.i95.7 = fadd float %add.13.i96.6, %multiply.7.7
  %40 = getelementptr inbounds float, ptr addrspace(1) %5, i64 7168
  %multiply.312.7 = fmul float %Arg_1.29.7212, %Arg_0.111.7228
  %subtract.616.7 = fsub float 1.000000e+00, %Arg_0.111.7228
  %multiply.717.7 = fmul float %multiply.312.7, %subtract.616.7
  %add.13.i96.7 = fadd float %add.13.i95.7, %multiply.717.7
  %41 = insertelement <2 x float> poison, float %multiply.7.7, i32 0
  %42 = insertelement <2 x float> %41, float %multiply.717.7, i32 1
  store <2 x float> %42, ptr addrspace(1) %40, align 8
  %lane_id = and i32 %0, 31
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i96.7, i32 16, i32 31)
  %add.13.i = fadd float %add.13.i96.7, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i, i32 8, i32 31)
  %add.13.i91 = fadd float %add.13.i, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i91, i32 4, i32 31)
  %add.13.i92 = fadd float %add.13.i91, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i92, i32 2, i32 31)
  %add.13.i93 = fadd float %add.13.i92, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i93, i32 1, i32 31)
  %48 = icmp eq i32 %lane_id, 0
  %49 = lshr i32 %0, 5
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i64 0, i64 0, i64 0, i64 %50
  %add.13.i94 = fadd float %add.13.i93, %47
  br i1 %48, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

common.ret:                                       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont, %reduction_write_output-true, %intra_warp_reduce_write-after
  ret void

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %entry
  tail call void @llvm.nvvm.barrier0()
  %52 = icmp ult i32 %0, 32
  br i1 %52, label %inter_warp_reduce-true, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %entry
  store float %add.13.i94, ptr addrspace(3) %51, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %53 = zext i32 %lane_id to i64
  %54 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i64 0, i64 0, i64 0, i64 %53
  %55 = icmp ult i32 %0, 16
  br i1 %55, label %inter_warp_reduce-true.then111, label %inter_warp_reduce-true.cont110

inter_warp_reduce-true.then111:                   ; preds = %inter_warp_reduce-true
  %partial_reduction_result66.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont110

inter_warp_reduce-true.cont110:                   ; preds = %inter_warp_reduce-true, %inter_warp_reduce-true.then111
  %partial_reduction_result66 = phi float [ %partial_reduction_result66.then.val, %inter_warp_reduce-true.then111 ], [ -0.000000e+00, %inter_warp_reduce-true ]
  %56 = icmp ult i32 %0, 16
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  br i1 %56, label %inter_warp_reduce-true.then, label %inter_warp_reduce-true.cont

inter_warp_reduce-true.then:                      ; preds = %inter_warp_reduce-true.cont110
  %.val83.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont

inter_warp_reduce-true.cont:                      ; preds = %inter_warp_reduce-true.cont110, %inter_warp_reduce-true.then
  %.val83 = phi float [ %.val83.then.val, %inter_warp_reduce-true.then ], [ -0.000000e+00, %inter_warp_reduce-true.cont110 ]
  %58 = icmp ult i32 %0, 16
  %add.13.i97 = fadd float %57, %.val83
  br i1 %58, label %inter_warp_reduce-true.cont.then109, label %inter_warp_reduce-true.cont.cont108

inter_warp_reduce-true.cont.then109:              ; preds = %inter_warp_reduce-true.cont
  store float %add.13.i97, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont108

inter_warp_reduce-true.cont.cont108:              ; preds = %inter_warp_reduce-true.cont, %inter_warp_reduce-true.cont.then109
  %initial_value_addr.0 = phi float [ -0.000000e+00, %inter_warp_reduce-true.cont.then109 ], [ %add.13.i97, %inter_warp_reduce-true.cont ]
  %59 = icmp ult i32 %0, 16
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i97, i32 8, i32 31)
  br i1 %59, label %inter_warp_reduce-true.cont.then, label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.then:                 ; preds = %inter_warp_reduce-true.cont.cont108
  %.val82.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont

inter_warp_reduce-true.cont.cont:                 ; preds = %inter_warp_reduce-true.cont.cont108, %inter_warp_reduce-true.cont.then
  %.val82 = phi float [ %.val82.then.val, %inter_warp_reduce-true.cont.then ], [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont108 ]
  %61 = icmp ult i32 %0, 16
  %add.13.i98 = fadd float %60, %.val82
  br i1 %61, label %inter_warp_reduce-true.cont.cont.then107, label %inter_warp_reduce-true.cont.cont.cont106

inter_warp_reduce-true.cont.cont.then107:         ; preds = %inter_warp_reduce-true.cont.cont
  store float %add.13.i98, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont106

inter_warp_reduce-true.cont.cont.cont106:         ; preds = %inter_warp_reduce-true.cont.cont, %inter_warp_reduce-true.cont.cont.then107
  %initial_value_addr.1 = phi float [ %initial_value_addr.0, %inter_warp_reduce-true.cont.cont.then107 ], [ %add.13.i98, %inter_warp_reduce-true.cont.cont ]
  %62 = icmp ult i32 %0, 16
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i98, i32 4, i32 31)
  br i1 %62, label %inter_warp_reduce-true.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.then:            ; preds = %inter_warp_reduce-true.cont.cont.cont106
  %.val81.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont:            ; preds = %inter_warp_reduce-true.cont.cont.cont106, %inter_warp_reduce-true.cont.cont.then
  %.val81 = phi float [ %.val81.then.val, %inter_warp_reduce-true.cont.cont.then ], [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont106 ]
  %64 = icmp ult i32 %0, 16
  %add.13.i99 = fadd float %63, %.val81
  br i1 %64, label %inter_warp_reduce-true.cont.cont.cont.then105, label %inter_warp_reduce-true.cont.cont.cont.cont104

inter_warp_reduce-true.cont.cont.cont.then105:    ; preds = %inter_warp_reduce-true.cont.cont.cont
  store float %add.13.i99, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont104

inter_warp_reduce-true.cont.cont.cont.cont104:    ; preds = %inter_warp_reduce-true.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.then105
  %initial_value_addr.2 = phi float [ %initial_value_addr.1, %inter_warp_reduce-true.cont.cont.cont.then105 ], [ %add.13.i99, %inter_warp_reduce-true.cont.cont.cont ]
  %65 = icmp ult i32 %0, 16
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i99, i32 2, i32 31)
  br i1 %65, label %inter_warp_reduce-true.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.then:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont104
  %.val80.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont:       ; preds = %inter_warp_reduce-true.cont.cont.cont.cont104, %inter_warp_reduce-true.cont.cont.cont.then
  %.val80 = phi float [ %.val80.then.val, %inter_warp_reduce-true.cont.cont.cont.then ], [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont104 ]
  %67 = icmp ult i32 %0, 16
  %add.13.i100 = fadd float %66, %.val80
  br i1 %67, label %inter_warp_reduce-true.cont.cont.cont.cont.then103, label %inter_warp_reduce-true.cont.cont.cont.cont.cont102

inter_warp_reduce-true.cont.cont.cont.cont.then103: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont
  store float %add.13.i100, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont102

inter_warp_reduce-true.cont.cont.cont.cont.cont102: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.then103
  %initial_value_addr.3 = phi float [ %initial_value_addr.2, %inter_warp_reduce-true.cont.cont.cont.cont.then103 ], [ %add.13.i100, %inter_warp_reduce-true.cont.cont.cont.cont ]
  %68 = icmp ult i32 %0, 16
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i100, i32 1, i32 31)
  br i1 %68, label %inter_warp_reduce-true.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.then:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont102
  %.val.then.val = load float, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont:  ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont102, %inter_warp_reduce-true.cont.cont.cont.cont.then
  %.val = phi float [ %.val.then.val, %inter_warp_reduce-true.cont.cont.cont.cont.then ], [ %initial_value_addr.3, %inter_warp_reduce-true.cont.cont.cont.cont.cont102 ]
  %70 = icmp ult i32 %0, 16
  %add.13.i101 = fadd float %69, %.val
  br i1 %70, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.then, label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.then: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont
  store float %add.13.i101, ptr addrspace(3) %54, align 4
  br label %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont

inter_warp_reduce-true.cont.cont.cont.cont.cont.cont: ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont, %inter_warp_reduce-true.cont.cont.cont.cont.cont.then
  %71 = icmp eq i32 %0, 0
  br i1 %71, label %reduction_write_output-true, label %common.ret

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true.cont.cont.cont.cont.cont.cont
  store float %add.13.i101, ptr addrspace(1) %arg2118, align 128
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_544(ptr noalias nocapture readonly align 16 dereferenceable(4) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg30, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg31, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg32, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg33, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg34, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(4) %arg45) local_unnamed_addr #4 {
entry:
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = load float, ptr addrspace(1) %arg01, align 16, !invariant.load !267
  %1 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %2 = load float, ptr addrspace(1) %arg110, align 128, !invariant.load !267
  %multiply.34 = fmul float %1, %2
  %subtract.35 = fsub float %0, %multiply.34
  %3 = load float, ptr addrspace(1) %arg314, align 16, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg416, align 128, !invariant.load !267
  %multiply.37 = fmul float %1, %4
  %subtract.38 = fsub float %3, %multiply.37
  %5 = load float, ptr addrspace(1) %arg518, align 16, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg620, align 128, !invariant.load !267
  %multiply.40 = fmul float %1, %6
  %subtract.41 = fsub float %5, %multiply.40
  %7 = load float, ptr addrspace(1) %arg722, align 16, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg824, align 128, !invariant.load !267
  %multiply.43 = fmul float %1, %8
  %subtract.44 = fsub float %7, %multiply.43
  %9 = load float, ptr addrspace(1) %arg926, align 16, !invariant.load !267
  %10 = load float, ptr addrspace(1) %arg1028, align 128, !invariant.load !267
  %multiply.46 = fmul float %1, %10
  %subtract.47 = fsub float %9, %multiply.46
  %11 = load float, ptr addrspace(1) %arg1130, align 16, !invariant.load !267
  %12 = load float, ptr addrspace(1) %arg1232, align 128, !invariant.load !267
  %multiply.49 = fmul float %1, %12
  %subtract.50 = fsub float %11, %multiply.49
  %13 = load float, ptr addrspace(1) %arg1334, align 16, !invariant.load !267
  %14 = load float, ptr addrspace(1) %arg1436, align 128, !invariant.load !267
  %multiply.52 = fmul float %1, %14
  %subtract.53 = fsub float %13, %multiply.52
  %15 = load float, ptr addrspace(1) %arg1538, align 16, !invariant.load !267
  %16 = load float, ptr addrspace(1) %arg1640, align 128, !invariant.load !267
  %multiply.55 = fmul float %1, %16
  %subtract.56 = fsub float %15, %multiply.55
  %17 = load float, ptr addrspace(1) %arg1742, align 16, !invariant.load !267
  %18 = load float, ptr addrspace(1) %arg1844, align 128, !invariant.load !267
  %multiply.58 = fmul float %1, %18
  %subtract.59 = fsub float %17, %multiply.58
  %19 = load float, ptr addrspace(1) %arg1946, align 16, !invariant.load !267
  %20 = load float, ptr addrspace(1) %arg2048, align 128, !invariant.load !267
  %multiply.61 = fmul float %1, %20
  %subtract.62 = fsub float %19, %multiply.61
  %21 = load float, ptr addrspace(1) %arg2150, align 16, !invariant.load !267
  %22 = load float, ptr addrspace(1) %arg2252, align 128, !invariant.load !267
  %multiply.64 = fmul float %1, %22
  %subtract.65 = fsub float %21, %multiply.64
  %23 = load float, ptr addrspace(1) %arg2354, align 16, !invariant.load !267
  %24 = load float, ptr addrspace(1) %arg2456, align 128, !invariant.load !267
  %multiply.67 = fmul float %1, %24
  %subtract.68 = fsub float %23, %multiply.67
  %25 = load float, ptr addrspace(1) %arg2558, align 16, !invariant.load !267
  %26 = load float, ptr addrspace(1) %arg2660, align 128, !invariant.load !267
  %multiply.70 = fmul float %1, %26
  %subtract.71 = fsub float %25, %multiply.70
  %27 = load float, ptr addrspace(1) %arg2762, align 16, !invariant.load !267
  %28 = load float, ptr addrspace(1) %arg2864, align 128, !invariant.load !267
  %multiply.73 = fmul float %1, %28
  %subtract.74 = fsub float %27, %multiply.73
  %29 = load float, ptr addrspace(1) %arg2966, align 16, !invariant.load !267
  %30 = load float, ptr addrspace(1) %arg3068, align 128, !invariant.load !267
  %multiply.76 = fmul float %1, %30
  %subtract.77 = fsub float %29, %multiply.76
  store float %subtract.35, ptr addrspace(1) %arg3170, align 128
  store float %subtract.38, ptr addrspace(1) %arg3272, align 128
  store float %subtract.41, ptr addrspace(1) %arg3374, align 128
  store float %subtract.44, ptr addrspace(1) %arg3476, align 128
  store float %subtract.47, ptr addrspace(1) %arg3578, align 128
  store float %subtract.50, ptr addrspace(1) %arg3680, align 128
  store float %subtract.53, ptr addrspace(1) %arg3782, align 128
  store float %subtract.56, ptr addrspace(1) %arg3884, align 128
  store float %subtract.59, ptr addrspace(1) %arg3986, align 128
  store float %subtract.62, ptr addrspace(1) %arg4088, align 128
  store float %subtract.65, ptr addrspace(1) %arg4190, align 128
  store float %subtract.68, ptr addrspace(1) %arg4292, align 128
  store float %subtract.71, ptr addrspace(1) %arg4394, align 128
  store float %subtract.74, ptr addrspace(1) %arg4496, align 128
  store float %subtract.77, ptr addrspace(1) %arg4598, align 128
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_338(ptr noalias nocapture readonly align 16 dereferenceable(3072) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(6144) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(1344) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(35904) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(46464) %arg4) local_unnamed_addr #5 {
entry:
  %arg415 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg313 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg211 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg19 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg07 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !269
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %3 = udiv i16 %.lhs.trunc.frozen, 6
  %4 = mul i16 %3, 6
  %.decomposed = sub i16 %.lhs.trunc.frozen, %4
  %.zext6 = zext i16 %3 to i32
  %5 = icmp ult i32 %linear_index, 11616
  br i1 %5, label %concatenate.pivot.384., label %concatenate_338.in_bounds-after

concatenate_338.in_bounds-after:                  ; preds = %concatenate.5.merge, %entry
  ret void

concatenate.pivot.384.:                           ; preds = %entry
  %6 = icmp ult i32 %linear_index, 2304
  br i1 %6, label %concatenate.pivot.128., label %concatenate.pivot.440.

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.384.
  %7 = icmp ult i32 %linear_index, 768
  br i1 %7, label %concatenate.pivot.0., label %concatenate.pivot.128.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  %8 = zext i16 %3 to i64
  %9 = zext i16 %.decomposed to i64
  %10 = getelementptr inbounds [128 x [6 x float]], ptr addrspace(1) %arg07, i64 0, i64 %8, i64 %9
  br label %concatenate.5.merge

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.128.
  %11 = zext i16 %.decomposed to i64
  %12 = sext i32 %.zext6 to i64
  %13 = getelementptr [256 x [6 x float]], ptr addrspace(1) %arg19, i64 0, i64 %12, i64 %11
  %14 = getelementptr inbounds float, ptr addrspace(1) %13, i64 -768
  br label %concatenate.5.merge

concatenate.pivot.440.:                           ; preds = %concatenate.pivot.384.
  %15 = icmp ult i32 %linear_index, 2640
  %16 = zext i16 %.decomposed to i64
  br i1 %15, label %concatenate.pivot.384.2, label %concatenate.pivot.440.3

concatenate.pivot.384.2:                          ; preds = %concatenate.pivot.440.
  %17 = sext i32 %.zext6 to i64
  %18 = getelementptr [56 x [6 x float]], ptr addrspace(1) %arg211, i64 0, i64 %17, i64 %16
  %19 = getelementptr inbounds float, ptr addrspace(1) %18, i64 -2304
  br label %concatenate.5.merge

concatenate.pivot.440.3:                          ; preds = %concatenate.pivot.440.
  %20 = sext i32 %.zext6 to i64
  %21 = getelementptr [1496 x [6 x float]], ptr addrspace(1) %arg313, i64 0, i64 %20, i64 %16
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 -2640
  br label %concatenate.5.merge

concatenate.5.merge:                              ; preds = %concatenate.pivot.440.3, %concatenate.pivot.384.2, %concatenate.pivot.128.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %10, %concatenate.pivot.0. ], [ %14, %concatenate.pivot.128.1 ], [ %19, %concatenate.pivot.384.2 ], [ %22, %concatenate.pivot.440.3 ]
  %23 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %24 = zext i32 %linear_index to i64
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg415, i64 %24
  store float %23, ptr addrspace(1) %25, align 4
  br label %concatenate_338.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_485(ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg2) local_unnamed_addr #0 {
entry:
  %arg284 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg182 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg080 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y51 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 192
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = or i32 %4, %tile_origin.2
  %6 = shl nuw nsw i32 %2, 7
  %7 = zext i32 %5 to i64
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true46
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %y_in_tile.invar_address.078 = phi i32 [ %thread_id.y51, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result50.sroa.4.077 = phi float [ 0.000000e+00, %entry ], [ %add.10.i65, %y_in_tile.loop_body ]
  %partial_reduction_result50.sroa.0.076 = phi float [ 0.000000e+00, %entry ], [ %add.10.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.078, 32
  %8 = add i32 %6, %y_in_tile.invar_address.078
  %9 = and i32 %8, 16777088
  %10 = or i32 %9, %y_in_tile.invar_address.078
  %11 = zext i32 %10 to i64
  %Arg_0.1 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg080, i64 0, i64 %11, i64 %7
  %12 = load <2 x float>, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %Arg_0.1390 = extractelement <2 x float> %12, i32 0
  %Arg_0.1991 = extractelement <2 x float> %12, i32 1
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg182, i64 0, i64 %11
  %Arg_1.24 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.4 = fmul float %Arg_0.1390, %Arg_1.24
  %add.10.i = fadd float %partial_reduction_result50.sroa.0.076, %multiply.4
  %multiply.412 = fmul float %Arg_1.24, %Arg_0.1991
  %add.10.i65 = fadd float %partial_reduction_result50.sroa.4.077, %multiply.412
  %13 = icmp ugt i32 %y_in_tile.invar_address.078, 95
  br i1 %13, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %14 = zext i32 %thread_id.x to i64
  %15 = zext i32 %thread_id.y51 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i64 0, i64 0, i64 0, i64 %14, i64 %15
  store float %add.10.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i64 0, i64 0, i64 0, i64 %15, i64 %14
  %partial_reduction_result14 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 16, i32 31)
  %add.10.i66 = fadd float %partial_reduction_result14, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i66, i32 8, i32 31)
  %add.10.i67 = fadd float %add.10.i66, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i67, i32 4, i32 31)
  %add.10.i68 = fadd float %add.10.i67, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i68, i32 2, i32 31)
  %add.10.i69 = fadd float %add.10.i68, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i69, i32 1, i32 31)
  %add.10.i70 = fadd float %add.10.i69, %20
  store float %add.10.i70, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = shl nuw nsw i32 %thread_id.y51, 1
  %22 = icmp eq i32 %thread_id.x, 0
  %23 = zext i32 %2 to i64
  %24 = or i32 %21, %tile_origin.2
  %25 = zext i32 %24 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg284, i64 0, i64 %23, i64 %25
  br i1 %22, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %26 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address2887 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.10.i65, ptr addrspace(3) %shmem_output_address2887, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr3088 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result32 = load float, ptr addrspace(3) %shmem_transposed_addr3088, align 4
  %27 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result32, i32 16, i32 31)
  %add.10.i71 = fadd float %partial_reduction_result32, %27
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i71, i32 8, i32 31)
  %add.10.i72 = fadd float %add.10.i71, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i72, i32 4, i32 31)
  %add.10.i73 = fadd float %add.10.i72, %29
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i73, i32 2, i32 31)
  %add.10.i74 = fadd float %add.10.i73, %30
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i74, i32 1, i32 31)
  %add.10.i75 = fadd float %add.10.i74, %31
  store float %add.10.i75, ptr addrspace(3) %shmem_transposed_addr3088, align 4
  br i1 %26, label %reduction_write_output-true46, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.10.i70, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true46:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.10.i75, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @reduce_24(ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg2) local_unnamed_addr #0 {
entry:
  %arg278 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg176 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg074 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y47 = lshr i32 %1, 5
  %tile_origin.2 = shl nuw nsw i32 %0, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg176, align 128, !invariant.load !267
  %2 = shl nuw nsw i32 %thread_id.x, 1
  %3 = or i32 %2, %tile_origin.2
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i32 %thread_id.y47, -32
  %6 = zext i32 %1 to i64
  %7 = lshr i64 %6, 5
  %8 = shl nuw nsw i64 %7, 10
  %9 = shl nuw nsw i64 %4, 2
  %10 = add i64 %8, %9
  %11 = add i64 %10, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg074, i64 %11
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true42
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv84 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep85, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %5, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result46.sroa.4.071 = phi float [ %Arg_1.2, %entry ], [ %add.6.i59, %y_in_tile.loop_body ]
  %partial_reduction_result46.sroa.0.070 = phi float [ %Arg_1.2, %entry ], [ %add.6.i, %y_in_tile.loop_body ]
  %scevgep86 = getelementptr i8, ptr addrspace(1) %lsr.iv84, i64 -4
  %12 = load <2 x float>, ptr addrspace(1) %scevgep86, align 8, !invariant.load !267
  %Arg_0.1387 = extractelement <2 x float> %12, i32 0
  %Arg_0.1888 = extractelement <2 x float> %12, i32 1
  %add.6.i = fadd float %partial_reduction_result46.sroa.0.070, %Arg_0.1387
  %add.6.i59 = fadd float %partial_reduction_result46.sroa.4.071, %Arg_0.1888
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep85 = getelementptr i8, ptr addrspace(1) %lsr.iv84, i64 32768
  %13 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %13, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %14 = zext i32 %thread_id.x to i64
  %15 = zext i32 %thread_id.y47 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i64 0, i64 0, i64 0, i64 %14, i64 %15
  store float %add.6.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i64 0, i64 0, i64 0, i64 %15, i64 %14
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.6.i60 = fadd float %partial_reduction_result10, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i60, i32 8, i32 31)
  %add.6.i61 = fadd float %add.6.i60, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i61, i32 4, i32 31)
  %add.6.i62 = fadd float %add.6.i61, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i62, i32 2, i32 31)
  %add.6.i63 = fadd float %add.6.i62, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i63, i32 1, i32 31)
  %add.6.i64 = fadd float %add.6.i63, %20
  store float %add.6.i64, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = shl nuw nsw i32 %thread_id.y47, 1
  %22 = icmp eq i32 %thread_id.x, 0
  %23 = or i32 %21, %tile_origin.2
  %24 = zext i32 %23 to i64
  %output_element_address = getelementptr inbounds [256 x float], ptr addrspace(1) %arg278, i64 0, i64 %24
  br i1 %22, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %25 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address2481 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.6.i59, ptr addrspace(3) %shmem_output_address2481, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr2682 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr2682, align 4
  %26 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.6.i65 = fadd float %partial_reduction_result28, %26
  %27 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i65, i32 8, i32 31)
  %add.6.i66 = fadd float %add.6.i65, %27
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i66, i32 4, i32 31)
  %add.6.i67 = fadd float %add.6.i66, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i67, i32 2, i32 31)
  %add.6.i68 = fadd float %add.6.i67, %29
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i68, i32 1, i32 31)
  %add.6.i69 = fadd float %add.6.i68, %30
  store float %add.6.i69, ptr addrspace(3) %shmem_transposed_addr2682, align 4
  br i1 %25, label %reduction_write_output-true42, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.6.i64, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.6.i69, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_484(ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg3) local_unnamed_addr #6 {
entry:
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.5 = fmul float %4, %6
  %subtract.7 = fsub float %3, %multiply.5
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %1
  store float %subtract.7, ptr addrspace(1) %7, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_479(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg8) local_unnamed_addr #0 {
entry:
  %arg8136 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7134 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6132 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5130 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4128 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3126 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2124 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1122 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0120 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y84 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 96
  %4 = shl nuw nsw i32 %2, 14
  %5 = shl nuw nsw i32 %thread_id.y84, 7
  %6 = add i32 %4, %5
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %thread_id.x
  %9 = zext i32 %8 to i64
  %10 = shl nuw nsw i64 %9, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0120, i64 %10
  %11 = lshr i32 %8, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after59, %reduction_write_output-true80
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv139 = phi i32 [ %11, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep138, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0117 = phi i32 [ %thread_id.y84, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result5.0116 = phi float [ 0.000000e+00, %entry ], [ %add.41.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0115 = phi float [ 0.000000e+00, %entry ], [ %add.15.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0114 = phi float [ 0.000000e+00, %entry ], [ %add.29.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0117, 32
  %12 = and i32 %lsr.iv139, 33554304
  %13 = or i32 %12, %y_in_tile.invar_address.0117
  %Arg_0.19 = load float, ptr addrspace(1) %lsr.iv, align 4, !invariant.load !267
  %14 = zext i32 %13 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1122, i64 0, i64 %14, i64 0
  %Arg_1.210 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.9 = fmul float %Arg_0.19, %Arg_1.210
  %add.15.i = fadd float %partial_reduction_result.0115, %multiply.9
  %Arg_3.4 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg3126, i64 0, i64 %14, i64 0
  %Arg_3.413 = load float, ptr addrspace(1) %Arg_3.4, align 4, !invariant.load !267
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2124, i64 0, i64 %14, i64 0
  %Arg_2.314 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %multiply.17 = fmul float %Arg_3.413, %Arg_2.314
  %subtract.20 = fsub float 1.000000e+00, %Arg_2.314
  %multiply.21 = fmul float %multiply.17, %subtract.20
  %multiply.24 = fmul float %Arg_0.19, %multiply.21
  %add.29.i = fadd float %partial_reduction_result2.0114, %multiply.24
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg5130, i64 0, i64 %14, i64 0
  %Arg_5.620 = load float, ptr addrspace(1) %Arg_5.6, align 4, !invariant.load !267
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg4128, i64 0, i64 %14, i64 0
  %Arg_4.521 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %multiply.31 = fmul float %Arg_5.620, %Arg_4.521
  %subtract.32 = fsub float 1.000000e+00, %Arg_4.521
  %multiply.33 = fmul float %multiply.31, %subtract.32
  %multiply.36 = fmul float %Arg_0.19, %multiply.33
  %add.41.i = fadd float %partial_reduction_result5.0116, %multiply.36
  %scevgep138 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 16384
  %lsr.iv.next = add nuw nsw i32 %lsr.iv139, 32
  %15 = icmp ugt i32 %y_in_tile.invar_address.0117, 95
  br i1 %15, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %16 = zext i32 %thread_id.x to i64
  %17 = zext i32 %thread_id.y84 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache17, i64 0, i64 0, i64 0, i64 %16, i64 %17
  store float %add.15.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache17, i64 0, i64 0, i64 0, i64 %17, i64 %16
  %partial_reduction_result26 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 16, i32 31)
  %add.15.i99 = fadd float %partial_reduction_result26, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i99, i32 8, i32 31)
  %add.15.i100 = fadd float %add.15.i99, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i100, i32 4, i32 31)
  %add.15.i101 = fadd float %add.15.i100, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i101, i32 2, i32 31)
  %add.15.i102 = fadd float %add.15.i101, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i102, i32 1, i32 31)
  %add.15.i103 = fadd float %add.15.i102, %22
  store float %add.15.i103, ptr addrspace(3) %shmem_transposed_addr, align 4
  %23 = icmp eq i32 %thread_id.x, 0
  %24 = zext i32 %2 to i64
  %25 = or i32 %tile_origin.2, %thread_id.y84
  %26 = zext i32 %25 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg6132, i64 0, i64 %24, i64 %26
  br i1 %23, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %27 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address40 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache18, i64 0, i64 0, i64 0, i64 %16, i64 %17
  store float %add.29.i, ptr addrspace(3) %shmem_output_address40, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr42 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache18, i64 0, i64 0, i64 0, i64 %17, i64 %16
  %partial_reduction_result44 = load float, ptr addrspace(3) %shmem_transposed_addr42, align 4
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result44, i32 16, i32 31)
  %add.29.i104 = fadd float %partial_reduction_result44, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.29.i104, i32 8, i32 31)
  %add.29.i105 = fadd float %add.29.i104, %29
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.29.i105, i32 4, i32 31)
  %add.29.i106 = fadd float %add.29.i105, %30
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.29.i106, i32 2, i32 31)
  %add.29.i107 = fadd float %add.29.i106, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.29.i107, i32 1, i32 31)
  %add.29.i108 = fadd float %add.29.i107, %32
  store float %add.29.i108, ptr addrspace(3) %shmem_transposed_addr42, align 4
  %output_element_address60 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg7134, i64 0, i64 %24, i64 %26
  br i1 %27, label %reduction_write_output-true58, label %reduction_write_output-after59

reduction_write_output-after59:                   ; preds = %reduction_write_output-true58, %reduction_write_output-after
  %33 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address62 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache19, i64 0, i64 0, i64 0, i64 %16, i64 %17
  store float %add.41.i, ptr addrspace(3) %shmem_output_address62, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr64 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache19, i64 0, i64 0, i64 0, i64 %17, i64 %16
  %partial_reduction_result66 = load float, ptr addrspace(3) %shmem_transposed_addr64, align 4
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  %add.41.i109 = fadd float %partial_reduction_result66, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i109, i32 8, i32 31)
  %add.41.i110 = fadd float %add.41.i109, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i110, i32 4, i32 31)
  %add.41.i111 = fadd float %add.41.i110, %36
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i111, i32 2, i32 31)
  %add.41.i112 = fadd float %add.41.i111, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i112, i32 1, i32 31)
  %add.41.i113 = fadd float %add.41.i112, %38
  store float %add.41.i113, ptr addrspace(3) %shmem_transposed_addr64, align 4
  %output_element_address82 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg8136, i64 0, i64 %24, i64 %26
  br i1 %33, label %reduction_write_output-true80, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.15.i103, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true58:                    ; preds = %reduction_write_output-after
  store float %add.29.i108, ptr addrspace(1) %output_element_address60, align 4
  br label %reduction_write_output-after59

reduction_write_output-true80:                    ; preds = %reduction_write_output-after59
  store float %add.41.i113, ptr addrspace(1) %output_element_address82, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_307(ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(114688) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !273
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 127
  %4 = lshr i32 %linear_index, 7
  %5 = icmp ult i32 %linear_index, 4096
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [32 x [128 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.96.:                            ; preds = %entry
  %9 = icmp ult i32 %linear_index, 12288
  br i1 %9, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [64 x [128 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -4096
  br label %concatenate.4.merge

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [128 x [128 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -12288
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.32.1 ], [ %15, %concatenate.pivot.96.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_379(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(147456) %arg6) local_unnamed_addr #5 {
entry:
  %arg618 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg516 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg414 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg312 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg210 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg18 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg06 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !274
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 20480
  br i1 %5, label %concatenate.pivot.32., label %concatenate.pivot.96.

concatenate.pivot.32.:                            ; preds = %entry
  %6 = icmp ult i32 %linear_index, 8192
  %7 = zext i32 %3 to i64
  br i1 %6, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds [32 x [256 x float]], ptr addrspace(1) %arg06, i64 0, i64 %8, i64 %7
  br label %concatenate.7.merge

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.32.
  %10 = icmp ult i32 %linear_index, 12288
  br i1 %10, label %concatenate.pivot.32.1, label %concatenate.pivot.48.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.48.
  %11 = sext i32 %4 to i64
  %12 = getelementptr [16 x [256 x float]], ptr addrspace(1) %arg18, i64 0, i64 %11, i64 %7
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 -8192
  br label %concatenate.7.merge

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  %14 = sext i32 %4 to i64
  %15 = getelementptr [32 x [256 x float]], ptr addrspace(1) %arg210, i64 0, i64 %14, i64 %7
  %16 = getelementptr inbounds float, ptr addrspace(1) %15, i64 -12288
  br label %concatenate.7.merge

concatenate.pivot.96.:                            ; preds = %entry
  %17 = icmp ult i32 %linear_index, 24576
  br i1 %17, label %concatenate.pivot.80.3, label %concatenate.pivot.128.

concatenate.pivot.80.3:                           ; preds = %concatenate.pivot.96.
  %18 = zext i32 %3 to i64
  %19 = sext i32 %4 to i64
  %20 = getelementptr [16 x [256 x float]], ptr addrspace(1) %arg312, i64 0, i64 %19, i64 %18
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 -20480
  br label %concatenate.7.merge

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.96.
  %22 = icmp ult i32 %linear_index, 32768
  %23 = zext i32 %3 to i64
  br i1 %22, label %concatenate.pivot.96.4, label %concatenate.pivot.128.5

concatenate.pivot.96.4:                           ; preds = %concatenate.pivot.128.
  %24 = sext i32 %4 to i64
  %25 = getelementptr [32 x [256 x float]], ptr addrspace(1) %arg414, i64 0, i64 %24, i64 %23
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 -24576
  br label %concatenate.7.merge

concatenate.pivot.128.5:                          ; preds = %concatenate.pivot.128.
  %27 = sext i32 %4 to i64
  %28 = getelementptr [16 x [256 x float]], ptr addrspace(1) %arg516, i64 0, i64 %27, i64 %23
  %29 = getelementptr inbounds float, ptr addrspace(1) %28, i64 -32768
  br label %concatenate.7.merge

concatenate.7.merge:                              ; preds = %concatenate.pivot.128.5, %concatenate.pivot.96.4, %concatenate.pivot.80.3, %concatenate.pivot.48.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %9, %concatenate.pivot.0. ], [ %13, %concatenate.pivot.32.1 ], [ %16, %concatenate.pivot.48.2 ], [ %21, %concatenate.pivot.80.3 ], [ %26, %concatenate.pivot.96.4 ], [ %29, %concatenate.pivot.128.5 ]
  %30 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %31 = zext i32 %linear_index to i64
  %32 = getelementptr inbounds float, ptr addrspace(1) %arg618, i64 %31
  store float %30, ptr addrspace(1) %32, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_340(ptr noalias nocapture readonly align 16 dereferenceable(46080) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(92160) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(20160) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(158400) %arg3) local_unnamed_addr #5 {
entry:
  %arg312 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg210 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg18 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg06 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !275
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %3 = udiv i16 %.lhs.trunc.frozen, 90
  %.zext5 = zext i16 %3 to i32
  %4 = icmp ult i32 %linear_index, 39600
  br i1 %4, label %concatenate.pivot.128., label %concatenate_340.in_bounds-after

concatenate_340.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate.pivot.128.:                           ; preds = %entry
  %5 = mul i16 %3, 90
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %6 = icmp ult i32 %linear_index, 11520
  %7 = zext i16 %.decomposed to i64
  br i1 %6, label %concatenate.pivot.0., label %concatenate.pivot.384.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  %8 = zext i16 %3 to i64
  %9 = getelementptr inbounds [128 x [90 x float]], ptr addrspace(1) %arg06, i64 0, i64 %8, i64 %7
  br label %concatenate.4.merge

concatenate.pivot.384.:                           ; preds = %concatenate.pivot.128.
  %10 = icmp ult i32 %linear_index, 34560
  br i1 %10, label %concatenate.pivot.128.1, label %concatenate.pivot.384.2

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.384.
  %11 = sext i32 %.zext5 to i64
  %12 = getelementptr [256 x [90 x float]], ptr addrspace(1) %arg18, i64 0, i64 %11, i64 %7
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 -11520
  br label %concatenate.4.merge

concatenate.pivot.384.2:                          ; preds = %concatenate.pivot.384.
  %14 = sext i32 %.zext5 to i64
  %15 = getelementptr [56 x [90 x float]], ptr addrspace(1) %arg210, i64 0, i64 %14, i64 %7
  %16 = getelementptr inbounds float, ptr addrspace(1) %15, i64 -34560
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.384.2, %concatenate.pivot.128.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %9, %concatenate.pivot.0. ], [ %13, %concatenate.pivot.128.1 ], [ %16, %concatenate.pivot.384.2 ]
  %17 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %18 = zext i32 %linear_index to i64
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg312, i64 %18
  store float %17, ptr addrspace(1) %19, align 4
  br label %concatenate_340.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_333(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(163840) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !276
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 127
  %4 = lshr i32 %linear_index, 7
  %5 = icmp ult i32 %linear_index, 8192
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.192.:                           ; preds = %entry
  %9 = icmp ult i32 %linear_index, 24576
  br i1 %9, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [128 x [128 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -8192
  br label %concatenate.4.merge

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [128 x [128 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -24576
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.64.1 ], [ %15, %concatenate.pivot.192.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_308(ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(180224) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !277
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 127
  %4 = lshr i32 %linear_index, 7
  %5 = icmp ult i32 %linear_index, 4096
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [32 x [128 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.96.:                            ; preds = %entry
  %9 = icmp ult i32 %linear_index, 12288
  br i1 %9, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [64 x [128 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -4096
  br label %concatenate.4.merge

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [256 x [128 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -12288
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.32.1 ], [ %15, %concatenate.pivot.96.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_386(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(196608) %arg2) local_unnamed_addr #5 {
entry:
  %arg26 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg14 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg02 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !278
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 16384
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %entry
  %6 = zext i32 %4 to i64
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg02, i64 0, i64 %6, i64 %7
  br label %concatenate.3.merge

concatenate.pivot.64.1:                           ; preds = %entry
  %9 = zext i32 %3 to i64
  %10 = sext i32 %4 to i64
  %11 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg14, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -16384
  br label %concatenate.3.merge

concatenate.3.merge:                              ; preds = %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.64.1 ]
  %13 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %14 = zext i32 %linear_index to i64
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg26, i64 %14
  store float %13, ptr addrspace(1) %15, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_334(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(229376) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !279
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 127
  %4 = lshr i32 %linear_index, 7
  %5 = icmp ult i32 %linear_index, 8192
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.192.:                           ; preds = %entry
  %9 = icmp ult i32 %linear_index, 24576
  br i1 %9, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [128 x [128 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -8192
  br label %concatenate.4.merge

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [256 x [128 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -24576
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.64.1 ], [ %15, %concatenate.pivot.192.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_350(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(270336) %arg4) local_unnamed_addr #5 {
entry:
  %arg412 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg310 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg28 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !280
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 49152
  br i1 %5, label %concatenate.pivot.64., label %concatenate.pivot.256.

concatenate.pivot.64.:                            ; preds = %entry
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  %7 = zext i32 %4 to i64
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg04, i64 0, i64 %7, i64 %8
  br label %concatenate.5.merge

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  %10 = zext i32 %3 to i64
  %11 = sext i32 %4 to i64
  %12 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg16, i64 0, i64 %11, i64 %10
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 -16384
  br label %concatenate.5.merge

concatenate.pivot.256.:                           ; preds = %entry
  %14 = icmp ult i32 %linear_index, 65536
  %15 = zext i32 %3 to i64
  br i1 %14, label %concatenate.pivot.192.2, label %concatenate.pivot.256.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.256.
  %16 = sext i32 %4 to i64
  %17 = getelementptr [64 x [256 x float]], ptr addrspace(1) %arg28, i64 0, i64 %16, i64 %15
  %18 = getelementptr inbounds float, ptr addrspace(1) %17, i64 -49152
  br label %concatenate.5.merge

concatenate.pivot.256.3:                          ; preds = %concatenate.pivot.256.
  %19 = sext i32 %4 to i64
  %20 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg310, i64 0, i64 %19, i64 %15
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 -65536
  br label %concatenate.5.merge

concatenate.5.merge:                              ; preds = %concatenate.pivot.256.3, %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %9, %concatenate.pivot.0. ], [ %13, %concatenate.pivot.64.1 ], [ %18, %concatenate.pivot.192.2 ], [ %21, %concatenate.pivot.256.3 ]
  %22 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %23 = zext i32 %linear_index to i64
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg412, i64 %23
  store float %22, ptr addrspace(1) %24, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_313(ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(311296) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !281
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 4096
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [16 x [256 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.48.:                            ; preds = %entry
  %9 = icmp ult i32 %linear_index, 12288
  br i1 %9, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [32 x [256 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -4096
  br label %concatenate.4.merge

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -12288
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.48.2, %concatenate.pivot.16.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.16.1 ], [ %15, %concatenate.pivot.48.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_331(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(360448) %arg3) local_unnamed_addr #5 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !282
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 8192
  %6 = zext i32 %3 to i64
  br i1 %5, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %entry
  %7 = zext i32 %4 to i64
  %8 = getelementptr inbounds [32 x [256 x float]], ptr addrspace(1) %arg03, i64 0, i64 %7, i64 %6
  br label %concatenate.4.merge

concatenate.pivot.96.:                            ; preds = %entry
  %9 = icmp ult i32 %linear_index, 24576
  br i1 %9, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  %10 = sext i32 %4 to i64
  %11 = getelementptr [64 x [256 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %6
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 -8192
  br label %concatenate.4.merge

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  %13 = sext i32 %4 to i64
  %14 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg27, i64 0, i64 %13, i64 %6
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 -24576
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %8, %concatenate.pivot.0. ], [ %12, %concatenate.pivot.32.1 ], [ %15, %concatenate.pivot.96.2 ]
  %16 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %17 = zext i32 %linear_index to i64
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %17
  store float %16, ptr addrspace(1) %18, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_312(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(368640) %arg4) local_unnamed_addr #5 {
entry:
  %arg412 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg310 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg28 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 24576
  br i1 %5, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %entry
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %7 = zext i32 %4 to i64
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds [32 x [256 x float]], ptr addrspace(1) %arg04, i64 0, i64 %7, i64 %8
  br label %concatenate.5.merge

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  %10 = zext i32 %3 to i64
  %11 = sext i32 %4 to i64
  %12 = getelementptr [64 x [256 x float]], ptr addrspace(1) %arg16, i64 0, i64 %11, i64 %10
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 -8192
  br label %concatenate.5.merge

concatenate.pivot.104.:                           ; preds = %entry
  %14 = icmp ult i32 %linear_index, 26624
  %15 = zext i32 %3 to i64
  br i1 %14, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  %16 = sext i32 %4 to i64
  %17 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg28, i64 0, i64 %16, i64 %15
  %18 = getelementptr inbounds float, ptr addrspace(1) %17, i64 -24576
  br label %concatenate.5.merge

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  %19 = sext i32 %4 to i64
  %20 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg310, i64 0, i64 %19, i64 %15
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 -26624
  br label %concatenate.5.merge

concatenate.5.merge:                              ; preds = %concatenate.pivot.104.3, %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %9, %concatenate.pivot.0. ], [ %13, %concatenate.pivot.32.1 ], [ %18, %concatenate.pivot.96.2 ], [ %21, %concatenate.pivot.104.3 ]
  %22 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %23 = zext i32 %linear_index to i64
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg412, i64 %23
  store float %22, ptr addrspace(1) %24, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_309(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(24576) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(393216) %arg5) local_unnamed_addr #5 {
entry:
  %arg515 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg413 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg311 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg29 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg17 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg05 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !284
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = icmp ult i32 %linear_index, 24576
  br i1 %5, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %entry
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %7 = zext i32 %4 to i64
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds [32 x [256 x float]], ptr addrspace(1) %arg05, i64 0, i64 %7, i64 %8
  br label %concatenate.6.merge

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  %10 = zext i32 %3 to i64
  %11 = sext i32 %4 to i64
  %12 = getelementptr [64 x [256 x float]], ptr addrspace(1) %arg17, i64 0, i64 %11, i64 %10
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 -8192
  br label %concatenate.6.merge

concatenate.pivot.104.:                           ; preds = %entry
  %14 = icmp ult i32 %linear_index, 26624
  br i1 %14, label %concatenate.pivot.96.2, label %concatenate.pivot.128.

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  %15 = zext i32 %3 to i64
  %16 = sext i32 %4 to i64
  %17 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg29, i64 0, i64 %16, i64 %15
  %18 = getelementptr inbounds float, ptr addrspace(1) %17, i64 -24576
  br label %concatenate.6.merge

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.104.
  %19 = icmp ult i32 %linear_index, 32768
  %20 = zext i32 %3 to i64
  br i1 %19, label %concatenate.pivot.104.3, label %concatenate.pivot.128.4

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.128.
  %21 = sext i32 %4 to i64
  %22 = getelementptr [24 x [256 x float]], ptr addrspace(1) %arg311, i64 0, i64 %21, i64 %20
  %23 = getelementptr inbounds float, ptr addrspace(1) %22, i64 -26624
  br label %concatenate.6.merge

concatenate.pivot.128.4:                          ; preds = %concatenate.pivot.128.
  %24 = sext i32 %4 to i64
  %25 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg413, i64 0, i64 %24, i64 %20
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 -32768
  br label %concatenate.6.merge

concatenate.6.merge:                              ; preds = %concatenate.pivot.128.4, %concatenate.pivot.104.3, %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %9, %concatenate.pivot.0. ], [ %13, %concatenate.pivot.32.1 ], [ %18, %concatenate.pivot.96.2 ], [ %23, %concatenate.pivot.104.3 ], [ %26, %concatenate.pivot.128.4 ]
  %27 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %28 = zext i32 %linear_index to i64
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg515, i64 %28
  store float %27, ptr addrspace(1) %29, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_326(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(458752) %arg3) local_unnamed_addr #5 {
entry:
  %arg345 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg243 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg141 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg039 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !285
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = and i32 %3, 252
  %5 = lshr i32 %linear_index_base, 8
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = and i32 %linear_index1, 253
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = and i32 %linear_index2, 254
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = and i32 %linear_index3, 255
  %9 = icmp ult i32 %linear_index_base, 16384
  %10 = zext i32 %4 to i64
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %entry
  %11 = zext i32 %5 to i64
  %12 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg039, i64 0, i64 %11, i64 %10
  br label %concatenate.4.merge

concatenate.pivot.192.:                           ; preds = %entry
  %13 = icmp ult i32 %linear_index_base, 49152
  br i1 %13, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  %14 = sext i32 %5 to i64
  %15 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg141, i64 0, i64 %14, i64 %10
  %16 = getelementptr inbounds float, ptr addrspace(1) %15, i64 -16384
  br label %concatenate.4.merge

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  %17 = sext i32 %5 to i64
  %18 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg243, i64 0, i64 %17, i64 %10
  %19 = getelementptr inbounds float, ptr addrspace(1) %18, i64 -49152
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %12, %concatenate.pivot.0. ], [ %16, %concatenate.pivot.64.1 ], [ %19, %concatenate.pivot.192.2 ]
  %20 = icmp ult i32 %linear_index_base, 16384
  %21 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %22 = zext i32 %linear_index_base to i64
  %23 = getelementptr float, ptr addrspace(1) %arg345, i64 %22
  store float %21, ptr addrspace(1) %23, align 16
  %24 = zext i32 %6 to i64
  br i1 %20, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %25 = zext i32 %5 to i64
  %26 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg039, i64 0, i64 %25, i64 %24
  br label %concatenate.4.merge3

concatenate.pivot.192.9:                          ; preds = %concatenate.4.merge
  %27 = icmp ult i32 %linear_index_base, 49152
  br i1 %27, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %28 = sext i32 %5 to i64
  %29 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg141, i64 0, i64 %28, i64 %24
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 -16384
  br label %concatenate.4.merge3

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  %31 = sext i32 %5 to i64
  %32 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg243, i64 0, i64 %31, i64 %24
  %33 = getelementptr inbounds float, ptr addrspace(1) %32, i64 -49152
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.192.11, %concatenate.pivot.64.10, %concatenate.pivot.0.8
  %.in36 = phi ptr addrspace(1) [ %26, %concatenate.pivot.0.8 ], [ %30, %concatenate.pivot.64.10 ], [ %33, %concatenate.pivot.192.11 ]
  %34 = icmp ult i32 %linear_index_base, 16384
  %35 = load float, ptr addrspace(1) %.in36, align 4, !invariant.load !267
  %36 = getelementptr inbounds float, ptr addrspace(1) %23, i64 1
  store float %35, ptr addrspace(1) %36, align 4
  %37 = zext i32 %7 to i64
  br i1 %34, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %38 = zext i32 %5 to i64
  %39 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg039, i64 0, i64 %38, i64 %37
  br label %concatenate.4.merge12

concatenate.pivot.192.18:                         ; preds = %concatenate.4.merge3
  %40 = icmp ult i32 %linear_index_base, 49152
  br i1 %40, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  %41 = sext i32 %5 to i64
  %42 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg141, i64 0, i64 %41, i64 %37
  %43 = getelementptr inbounds float, ptr addrspace(1) %42, i64 -16384
  br label %concatenate.4.merge12

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  %44 = sext i32 %5 to i64
  %45 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg243, i64 0, i64 %44, i64 %37
  %46 = getelementptr inbounds float, ptr addrspace(1) %45, i64 -49152
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.192.20, %concatenate.pivot.64.19, %concatenate.pivot.0.17
  %.in37 = phi ptr addrspace(1) [ %39, %concatenate.pivot.0.17 ], [ %43, %concatenate.pivot.64.19 ], [ %46, %concatenate.pivot.192.20 ]
  %47 = icmp ult i32 %linear_index_base, 16384
  %48 = load float, ptr addrspace(1) %.in37, align 4, !invariant.load !267
  %49 = getelementptr inbounds float, ptr addrspace(1) %23, i64 2
  store float %48, ptr addrspace(1) %49, align 8
  %50 = zext i32 %8 to i64
  br i1 %47, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %51 = zext i32 %5 to i64
  %52 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg039, i64 0, i64 %51, i64 %50
  br label %concatenate.4.merge21

concatenate.pivot.192.27:                         ; preds = %concatenate.4.merge12
  %53 = icmp ult i32 %linear_index_base, 49152
  br i1 %53, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  %54 = sext i32 %5 to i64
  %55 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg141, i64 0, i64 %54, i64 %50
  %56 = getelementptr inbounds float, ptr addrspace(1) %55, i64 -16384
  br label %concatenate.4.merge21

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  %57 = sext i32 %5 to i64
  %58 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg243, i64 0, i64 %57, i64 %50
  %59 = getelementptr inbounds float, ptr addrspace(1) %58, i64 -49152
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.192.29, %concatenate.pivot.64.28, %concatenate.pivot.0.26
  %.in38 = phi ptr addrspace(1) [ %52, %concatenate.pivot.0.26 ], [ %56, %concatenate.pivot.64.28 ], [ %59, %concatenate.pivot.192.29 ]
  %60 = load float, ptr addrspace(1) %.in38, align 4, !invariant.load !267
  %61 = getelementptr inbounds float, ptr addrspace(1) %23, i64 3
  store float %60, ptr addrspace(1) %61, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_303(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(24576) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(491520) %arg5) local_unnamed_addr #5 {
entry:
  %arg569 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg467 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg365 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg263 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg161 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg059 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !286
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = and i32 %3, 252
  %5 = lshr i32 %linear_index_base, 8
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = and i32 %linear_index1, 253
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = and i32 %linear_index2, 254
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = and i32 %linear_index3, 255
  %9 = icmp ult i32 %linear_index_base, 49152
  br i1 %9, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %entry
  %10 = icmp ult i32 %linear_index_base, 16384
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  %11 = zext i32 %5 to i64
  %12 = zext i32 %4 to i64
  %13 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg059, i64 0, i64 %11, i64 %12
  br label %concatenate.6.merge

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  %14 = zext i32 %4 to i64
  %15 = sext i32 %5 to i64
  %16 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg161, i64 0, i64 %15, i64 %14
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 -16384
  br label %concatenate.6.merge

concatenate.pivot.200.:                           ; preds = %entry
  %18 = icmp ult i32 %linear_index_base, 51200
  br i1 %18, label %concatenate.pivot.192.2, label %concatenate.pivot.224.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  %19 = zext i32 %4 to i64
  %20 = sext i32 %5 to i64
  %21 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg263, i64 0, i64 %20, i64 %19
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 -49152
  br label %concatenate.6.merge

concatenate.pivot.224.:                           ; preds = %concatenate.pivot.200.
  %23 = icmp ult i32 %linear_index_base, 57344
  %24 = zext i32 %4 to i64
  br i1 %23, label %concatenate.pivot.200.3, label %concatenate.pivot.224.4

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.224.
  %25 = sext i32 %5 to i64
  %26 = getelementptr [24 x [256 x float]], ptr addrspace(1) %arg365, i64 0, i64 %25, i64 %24
  %27 = getelementptr inbounds float, ptr addrspace(1) %26, i64 -51200
  br label %concatenate.6.merge

concatenate.pivot.224.4:                          ; preds = %concatenate.pivot.224.
  %28 = sext i32 %5 to i64
  %29 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg467, i64 0, i64 %28, i64 %24
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 -57344
  br label %concatenate.6.merge

concatenate.6.merge:                              ; preds = %concatenate.pivot.224.4, %concatenate.pivot.200.3, %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %13, %concatenate.pivot.0. ], [ %17, %concatenate.pivot.64.1 ], [ %22, %concatenate.pivot.192.2 ], [ %27, %concatenate.pivot.200.3 ], [ %30, %concatenate.pivot.224.4 ]
  %31 = icmp ult i32 %linear_index_base, 49152
  %32 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %33 = zext i32 %linear_index_base to i64
  %34 = getelementptr float, ptr addrspace(1) %arg569, i64 %33
  store float %32, ptr addrspace(1) %34, align 16
  br i1 %31, label %concatenate.pivot.64.12, label %concatenate.pivot.200.15

concatenate.pivot.64.12:                          ; preds = %concatenate.6.merge
  %35 = icmp ult i32 %linear_index_base, 16384
  br i1 %35, label %concatenate.pivot.0.13, label %concatenate.pivot.64.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.64.12
  %36 = zext i32 %5 to i64
  %37 = zext i32 %6 to i64
  %38 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg059, i64 0, i64 %36, i64 %37
  br label %concatenate.6.merge5

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.64.12
  %39 = zext i32 %6 to i64
  %40 = sext i32 %5 to i64
  %41 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg161, i64 0, i64 %40, i64 %39
  %42 = getelementptr inbounds float, ptr addrspace(1) %41, i64 -16384
  br label %concatenate.6.merge5

concatenate.pivot.200.15:                         ; preds = %concatenate.6.merge
  %43 = icmp ult i32 %linear_index_base, 51200
  br i1 %43, label %concatenate.pivot.192.16, label %concatenate.pivot.224.17

concatenate.pivot.192.16:                         ; preds = %concatenate.pivot.200.15
  %44 = zext i32 %6 to i64
  %45 = sext i32 %5 to i64
  %46 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg263, i64 0, i64 %45, i64 %44
  %47 = getelementptr inbounds float, ptr addrspace(1) %46, i64 -49152
  br label %concatenate.6.merge5

concatenate.pivot.224.17:                         ; preds = %concatenate.pivot.200.15
  %48 = icmp ult i32 %linear_index_base, 57344
  %49 = zext i32 %6 to i64
  br i1 %48, label %concatenate.pivot.200.18, label %concatenate.pivot.224.19

concatenate.pivot.200.18:                         ; preds = %concatenate.pivot.224.17
  %50 = sext i32 %5 to i64
  %51 = getelementptr [24 x [256 x float]], ptr addrspace(1) %arg365, i64 0, i64 %50, i64 %49
  %52 = getelementptr inbounds float, ptr addrspace(1) %51, i64 -51200
  br label %concatenate.6.merge5

concatenate.pivot.224.19:                         ; preds = %concatenate.pivot.224.17
  %53 = sext i32 %5 to i64
  %54 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg467, i64 0, i64 %53, i64 %49
  %55 = getelementptr inbounds float, ptr addrspace(1) %54, i64 -57344
  br label %concatenate.6.merge5

concatenate.6.merge5:                             ; preds = %concatenate.pivot.224.19, %concatenate.pivot.200.18, %concatenate.pivot.192.16, %concatenate.pivot.64.14, %concatenate.pivot.0.13
  %.in56 = phi ptr addrspace(1) [ %38, %concatenate.pivot.0.13 ], [ %42, %concatenate.pivot.64.14 ], [ %47, %concatenate.pivot.192.16 ], [ %52, %concatenate.pivot.200.18 ], [ %55, %concatenate.pivot.224.19 ]
  %56 = icmp ult i32 %linear_index_base, 49152
  %57 = load float, ptr addrspace(1) %.in56, align 4, !invariant.load !267
  %58 = getelementptr inbounds float, ptr addrspace(1) %34, i64 1
  store float %57, ptr addrspace(1) %58, align 4
  br i1 %56, label %concatenate.pivot.64.27, label %concatenate.pivot.200.30

concatenate.pivot.64.27:                          ; preds = %concatenate.6.merge5
  %59 = icmp ult i32 %linear_index_base, 16384
  br i1 %59, label %concatenate.pivot.0.28, label %concatenate.pivot.64.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.64.27
  %60 = zext i32 %5 to i64
  %61 = zext i32 %7 to i64
  %62 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg059, i64 0, i64 %60, i64 %61
  br label %concatenate.6.merge20

concatenate.pivot.64.29:                          ; preds = %concatenate.pivot.64.27
  %63 = zext i32 %7 to i64
  %64 = sext i32 %5 to i64
  %65 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg161, i64 0, i64 %64, i64 %63
  %66 = getelementptr inbounds float, ptr addrspace(1) %65, i64 -16384
  br label %concatenate.6.merge20

concatenate.pivot.200.30:                         ; preds = %concatenate.6.merge5
  %67 = icmp ult i32 %linear_index_base, 51200
  br i1 %67, label %concatenate.pivot.192.31, label %concatenate.pivot.224.32

concatenate.pivot.192.31:                         ; preds = %concatenate.pivot.200.30
  %68 = zext i32 %7 to i64
  %69 = sext i32 %5 to i64
  %70 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg263, i64 0, i64 %69, i64 %68
  %71 = getelementptr inbounds float, ptr addrspace(1) %70, i64 -49152
  br label %concatenate.6.merge20

concatenate.pivot.224.32:                         ; preds = %concatenate.pivot.200.30
  %72 = icmp ult i32 %linear_index_base, 57344
  %73 = zext i32 %7 to i64
  br i1 %72, label %concatenate.pivot.200.33, label %concatenate.pivot.224.34

concatenate.pivot.200.33:                         ; preds = %concatenate.pivot.224.32
  %74 = sext i32 %5 to i64
  %75 = getelementptr [24 x [256 x float]], ptr addrspace(1) %arg365, i64 0, i64 %74, i64 %73
  %76 = getelementptr inbounds float, ptr addrspace(1) %75, i64 -51200
  br label %concatenate.6.merge20

concatenate.pivot.224.34:                         ; preds = %concatenate.pivot.224.32
  %77 = sext i32 %5 to i64
  %78 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg467, i64 0, i64 %77, i64 %73
  %79 = getelementptr inbounds float, ptr addrspace(1) %78, i64 -57344
  br label %concatenate.6.merge20

concatenate.6.merge20:                            ; preds = %concatenate.pivot.224.34, %concatenate.pivot.200.33, %concatenate.pivot.192.31, %concatenate.pivot.64.29, %concatenate.pivot.0.28
  %.in57 = phi ptr addrspace(1) [ %62, %concatenate.pivot.0.28 ], [ %66, %concatenate.pivot.64.29 ], [ %71, %concatenate.pivot.192.31 ], [ %76, %concatenate.pivot.200.33 ], [ %79, %concatenate.pivot.224.34 ]
  %80 = icmp ult i32 %linear_index_base, 49152
  %81 = load float, ptr addrspace(1) %.in57, align 4, !invariant.load !267
  %82 = getelementptr inbounds float, ptr addrspace(1) %34, i64 2
  store float %81, ptr addrspace(1) %82, align 8
  br i1 %80, label %concatenate.pivot.64.42, label %concatenate.pivot.200.45

concatenate.pivot.64.42:                          ; preds = %concatenate.6.merge20
  %83 = icmp ult i32 %linear_index_base, 16384
  br i1 %83, label %concatenate.pivot.0.43, label %concatenate.pivot.64.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.64.42
  %84 = zext i32 %5 to i64
  %85 = zext i32 %8 to i64
  %86 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg059, i64 0, i64 %84, i64 %85
  br label %concatenate.6.merge35

concatenate.pivot.64.44:                          ; preds = %concatenate.pivot.64.42
  %87 = zext i32 %8 to i64
  %88 = sext i32 %5 to i64
  %89 = getelementptr [128 x [256 x float]], ptr addrspace(1) %arg161, i64 0, i64 %88, i64 %87
  %90 = getelementptr inbounds float, ptr addrspace(1) %89, i64 -16384
  br label %concatenate.6.merge35

concatenate.pivot.200.45:                         ; preds = %concatenate.6.merge20
  %91 = icmp ult i32 %linear_index_base, 51200
  br i1 %91, label %concatenate.pivot.192.46, label %concatenate.pivot.224.47

concatenate.pivot.192.46:                         ; preds = %concatenate.pivot.200.45
  %92 = zext i32 %8 to i64
  %93 = sext i32 %5 to i64
  %94 = getelementptr [8 x [256 x float]], ptr addrspace(1) %arg263, i64 0, i64 %93, i64 %92
  %95 = getelementptr inbounds float, ptr addrspace(1) %94, i64 -49152
  br label %concatenate.6.merge35

concatenate.pivot.224.47:                         ; preds = %concatenate.pivot.200.45
  %96 = icmp ult i32 %linear_index_base, 57344
  %97 = zext i32 %8 to i64
  br i1 %96, label %concatenate.pivot.200.48, label %concatenate.pivot.224.49

concatenate.pivot.200.48:                         ; preds = %concatenate.pivot.224.47
  %98 = sext i32 %5 to i64
  %99 = getelementptr [24 x [256 x float]], ptr addrspace(1) %arg365, i64 0, i64 %98, i64 %97
  %100 = getelementptr inbounds float, ptr addrspace(1) %99, i64 -51200
  br label %concatenate.6.merge35

concatenate.pivot.224.49:                         ; preds = %concatenate.pivot.224.47
  %101 = sext i32 %5 to i64
  %102 = getelementptr [256 x [256 x float]], ptr addrspace(1) %arg467, i64 0, i64 %101, i64 %97
  %103 = getelementptr inbounds float, ptr addrspace(1) %102, i64 -57344
  br label %concatenate.6.merge35

concatenate.6.merge35:                            ; preds = %concatenate.pivot.224.49, %concatenate.pivot.200.48, %concatenate.pivot.192.46, %concatenate.pivot.64.44, %concatenate.pivot.0.43
  %.in58 = phi ptr addrspace(1) [ %86, %concatenate.pivot.0.43 ], [ %90, %concatenate.pivot.64.44 ], [ %95, %concatenate.pivot.192.46 ], [ %100, %concatenate.pivot.200.48 ], [ %103, %concatenate.pivot.224.49 ]
  %104 = load float, ptr addrspace(1) %.in58, align 4, !invariant.load !267
  %105 = getelementptr inbounds float, ptr addrspace(1) %34, i64 3
  store float %104, ptr addrspace(1) %105, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_323(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y64, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = lshr i32 %11, 7
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %17
  %scevgep109 = getelementptr i8, ptr addrspace(1) %arg091, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi ptr addrspace(1) [ %scevgep109, %entry ], [ %scevgep111, %y_in_tile.loop_body ]
  %lsr.iv106 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep107, %y_in_tile.loop_body ]
  %lsr.iv104 = phi i32 [ %8, %entry ], [ %lsr.iv.next105, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.12.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.12.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y64, %lsr.iv
  %19 = and i32 %lsr.iv104, 126
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 33554304
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %23, i64 %24
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg091, i64 0, i64 %23, i64 %24
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %25 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.12.i = fadd float %partial_reduction_result63.sroa.0.087, %25
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep108, align 8, !invariant.load !267
  %Arg_1.26113 = extractelement <2 x float> %26, i32 0
  %Arg_1.222114 = extractelement <2 x float> %26, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26113, 0.000000e+00
  %scevgep112 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep112, align 8, !invariant.load !267
  %Arg_0.110115 = extractelement <2 x float> %27, i32 0
  %Arg_0.126116 = extractelement <2 x float> %27, i32 1
  %28 = select i1 %compare.58, float %Arg_0.110115, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv104, 1
  %31 = and i32 %30, 127
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 33554304
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %35, i64 %36
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %Arg_0.118 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg091, i64 0, i64 %35, i64 %36
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118, align 4, !invariant.load !267
  %37 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.12.i76 = fadd float %partial_reduction_result63.sroa.4.088, %37
  %compare.524 = fcmp ogt float %Arg_1.222114, 0.000000e+00
  %38 = select i1 %compare.524, float %Arg_0.126116, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y64, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next105 = add nuw nsw i32 %lsr.iv104, 4096
  %scevgep107 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 16384
  %scevgep111 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 16384
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.12.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.12.i77 = fadd float %partial_reduction_result27, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i77, i32 8, i32 31)
  %add.12.i78 = fadd float %add.12.i77, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i78, i32 4, i32 31)
  %add.12.i79 = fadd float %add.12.i78, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i79, i32 2, i32 31)
  %add.12.i80 = fadd float %add.12.i79, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i80, i32 1, i32 31)
  %add.12.i81 = fadd float %add.12.i80, %49
  store float %add.12.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y64, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg295, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41101 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.12.i76, ptr addrspace(3) %shmem_output_address41101, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43102 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.12.i82 = fadd float %partial_reduction_result45, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i82, i32 8, i32 31)
  %add.12.i83 = fadd float %add.12.i82, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i83, i32 4, i32 31)
  %add.12.i84 = fadd float %add.12.i83, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i84, i32 2, i32 31)
  %add.12.i85 = fadd float %add.12.i84, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i85, i32 1, i32 31)
  %add.12.i86 = fadd float %add.12.i85, %60
  store float %add.12.i86, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  br i1 %55, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.12.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.12.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_462(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6) local_unnamed_addr #0 {
entry:
  %arg6243 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5241 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4239 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3237 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2235 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1233 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0231 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y176 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y176, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg3237, i64 %16
  %17 = lshr i32 %11, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after149, %reduction_write_output-true170
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv257 = phi i32 [ %17, %entry ], [ %lsr.iv.next258, %y_in_tile.loop_body ]
  %lsr.iv254 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep255, %y_in_tile.loop_body ]
  %lsr.iv252 = phi i32 [ %13, %entry ], [ %lsr.iv.next253, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0227 = phi i32 [ %thread_id.y176, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result2174.sroa.4.0226 = phi float [ 0.000000e+00, %entry ], [ %add.31.i202, %y_in_tile.loop_body ]
  %partial_reduction_result175.sroa.0.0225 = phi float [ -0.000000e+00, %entry ], [ %add.24.i, %y_in_tile.loop_body ]
  %partial_reduction_result175.sroa.4.0224 = phi float [ -0.000000e+00, %entry ], [ %add.24.i201, %y_in_tile.loop_body ]
  %partial_reduction_result2174.sroa.0.0223 = phi float [ 0.000000e+00, %entry ], [ %add.31.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0227, 32
  %18 = and i32 %lsr.iv, 126
  %19 = and i32 %lsr.iv257, 33554304
  %20 = or i32 %19, %y_in_tile.invar_address.0227
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3237, i64 0, i64 %21, i64 %22
  %Arg_3.45 = load float, ptr addrspace(1) %Arg_3.4, align 8, !invariant.load !267
  %compare.7 = fcmp ogt float %Arg_3.45, 0.000000e+00
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2235, i64 0, i64 %21, i64 0
  %Arg_2.37 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1233, i64 0, i64 %21, i64 0
  %Arg_1.28 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.8 = fmul float %Arg_2.37, %Arg_1.28
  %subtract.11 = fsub float 1.000000e+00, %Arg_1.28
  %multiply.12 = fmul float %multiply.8, %subtract.11
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0231, i64 0, i64 %22, i64 0
  %Arg_0.111 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %multiply.17 = fmul float %Arg_0.111, %multiply.12
  %23 = select i1 %compare.7, float %multiply.17, float 0.000000e+00
  %add.24.i = fadd float %partial_reduction_result175.sroa.0.0225, %23
  %multiply.26 = fmul float %Arg_3.45, %multiply.12
  %add.31.i = fadd float %partial_reduction_result2174.sroa.0.0223, %multiply.26
  %scevgep256 = getelementptr i8, ptr addrspace(1) %lsr.iv254, i64 -4
  %24 = load <2 x float>, ptr addrspace(1) %scevgep256, align 8, !invariant.load !267
  %Arg_3.426259 = extractelement <2 x float> %24, i32 0
  %Arg_3.478260 = extractelement <2 x float> %24, i32 1
  %compare.728 = fcmp ogt float %Arg_3.426259, 0.000000e+00
  %25 = select i1 %compare.728, float %multiply.17, float 0.000000e+00
  %26 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5241, i64 0, i64 %21, i64 %22
  store float %25, ptr addrspace(1) %26, align 8
  %27 = add i32 %lsr.iv, 1
  %28 = and i32 %27, 127
  %29 = and i32 %lsr.iv252, 33554304
  %30 = or i32 %29, %y_in_tile.invar_address.0227
  %31 = zext i32 %30 to i64
  %32 = zext i32 %28 to i64
  %Arg_3.445 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3237, i64 0, i64 %31, i64 %32
  %Arg_3.446 = load float, ptr addrspace(1) %Arg_3.445, align 4, !invariant.load !267
  %compare.748 = fcmp ogt float %Arg_3.446, 0.000000e+00
  %Arg_2.349 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2235, i64 0, i64 %31, i64 0
  %Arg_2.350 = load float, ptr addrspace(1) %Arg_2.349, align 4, !invariant.load !267
  %Arg_1.251 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1233, i64 0, i64 %31, i64 0
  %Arg_1.252 = load float, ptr addrspace(1) %Arg_1.251, align 4, !invariant.load !267
  %multiply.853 = fmul float %Arg_2.350, %Arg_1.252
  %subtract.1157 = fsub float 1.000000e+00, %Arg_1.252
  %multiply.1258 = fmul float %multiply.853, %subtract.1157
  %Arg_0.159 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0231, i64 0, i64 %32, i64 0
  %Arg_0.160 = load float, ptr addrspace(1) %Arg_0.159, align 4, !invariant.load !267
  %multiply.1761 = fmul float %Arg_0.160, %multiply.1258
  %33 = select i1 %compare.748, float %multiply.1761, float 0.000000e+00
  %add.24.i201 = fadd float %partial_reduction_result175.sroa.4.0224, %33
  %multiply.2675 = fmul float %Arg_3.446, %multiply.1258
  %add.31.i202 = fadd float %partial_reduction_result2174.sroa.4.0226, %multiply.2675
  %compare.780 = fcmp ogt float %Arg_3.478260, 0.000000e+00
  %34 = select i1 %compare.780, float %multiply.1761, float 0.000000e+00
  %35 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5241, i64 0, i64 %31, i64 %32
  store float %34, ptr addrspace(1) %35, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 4096
  %lsr.iv.next253 = add nuw nsw i32 %lsr.iv252, 32
  %scevgep255 = getelementptr i8, ptr addrspace(1) %lsr.iv254, i64 16384
  %lsr.iv.next258 = add nuw nsw i32 %lsr.iv257, 32
  %36 = icmp ugt i32 %y_in_tile.invar_address.0227, 95
  br i1 %36, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %37 = zext i32 %thread_id.x to i64
  %38 = zext i32 %thread_id.y176 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i64 0, i64 0, i64 0, i64 %37, i64 %38
  store float %add.24.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i64 0, i64 0, i64 0, i64 %38, i64 %37
  %partial_reduction_result94 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  %add.24.i203 = fadd float %partial_reduction_result94, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i203, i32 8, i32 31)
  %add.24.i204 = fadd float %add.24.i203, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i204, i32 4, i32 31)
  %add.24.i205 = fadd float %add.24.i204, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i205, i32 2, i32 31)
  %add.24.i206 = fadd float %add.24.i205, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i206, i32 1, i32 31)
  %add.24.i207 = fadd float %add.24.i206, %43
  store float %add.24.i207, ptr addrspace(3) %shmem_transposed_addr, align 4
  %44 = shl nuw nsw i32 %thread_id.y176, 1
  %45 = icmp eq i32 %thread_id.x, 0
  %46 = zext i32 %2 to i64
  %47 = or i32 %44, %tile_origin.2
  %48 = zext i32 %47 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg4239, i64 0, i64 %46, i64 %48
  br i1 %45, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %49 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address108246 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.24.i201, ptr addrspace(3) %shmem_output_address108246, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr110247 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result112 = load float, ptr addrspace(3) %shmem_transposed_addr110247, align 4
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result112, i32 16, i32 31)
  %add.24.i208 = fadd float %partial_reduction_result112, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i208, i32 8, i32 31)
  %add.24.i209 = fadd float %add.24.i208, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i209, i32 4, i32 31)
  %add.24.i210 = fadd float %add.24.i209, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i210, i32 2, i32 31)
  %add.24.i211 = fadd float %add.24.i210, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i211, i32 1, i32 31)
  %add.24.i212 = fadd float %add.24.i211, %54
  store float %add.24.i212, ptr addrspace(3) %shmem_transposed_addr110247, align 4
  br i1 %49, label %reduction_write_output-true126, label %reduction_write_output-after127

reduction_write_output-after127:                  ; preds = %reduction_write_output-true126, %reduction_write_output-after
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address130 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i64 0, i64 0, i64 0, i64 %37, i64 %38
  store float %add.31.i, ptr addrspace(3) %shmem_output_address130, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr132 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i64 0, i64 0, i64 0, i64 %38, i64 %37
  %partial_reduction_result134 = load float, ptr addrspace(3) %shmem_transposed_addr132, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result134, i32 16, i32 31)
  %add.31.i213 = fadd float %partial_reduction_result134, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i213, i32 8, i32 31)
  %add.31.i214 = fadd float %add.31.i213, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i214, i32 4, i32 31)
  %add.31.i215 = fadd float %add.31.i214, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i215, i32 2, i32 31)
  %add.31.i216 = fadd float %add.31.i215, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i216, i32 1, i32 31)
  %add.31.i217 = fadd float %add.31.i216, %60
  store float %add.31.i217, ptr addrspace(3) %shmem_transposed_addr132, align 4
  %output_element_address150 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg6243, i64 0, i64 %46, i64 %48
  br i1 %55, label %reduction_write_output-true148, label %reduction_write_output-after149

reduction_write_output-after149:                  ; preds = %reduction_write_output-true148, %reduction_write_output-after127
  %61 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address152248 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address130, i64 1056
  store float %add.31.i202, ptr addrspace(3) %shmem_output_address152248, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr154249 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr132, i64 1056
  %partial_reduction_result156 = load float, ptr addrspace(3) %shmem_transposed_addr154249, align 4
  %62 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result156, i32 16, i32 31)
  %add.31.i218 = fadd float %partial_reduction_result156, %62
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i218, i32 8, i32 31)
  %add.31.i219 = fadd float %add.31.i218, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i219, i32 4, i32 31)
  %add.31.i220 = fadd float %add.31.i219, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i220, i32 2, i32 31)
  %add.31.i221 = fadd float %add.31.i220, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.31.i221, i32 1, i32 31)
  %add.31.i222 = fadd float %add.31.i221, %66
  store float %add.31.i222, ptr addrspace(3) %shmem_transposed_addr154249, align 4
  br i1 %61, label %reduction_write_output-true170, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.24.i207, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true126:                   ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.24.i212, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after127

reduction_write_output-true148:                   ; preds = %reduction_write_output-after127
  store float %add.31.i217, ptr addrspace(1) %output_element_address150, align 8
  br label %reduction_write_output-after149

reduction_write_output-true170:                   ; preds = %reduction_write_output-after149
  %sunkaddr261 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address150, i64 4
  store float %add.31.i222, ptr addrspace(1) %sunkaddr261, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_699(ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg2) local_unnamed_addr #0 {
entry:
  %arg278 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg176 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg074 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y47 = lshr i32 %1, 5
  %tile_origin.2 = shl nuw nsw i32 %0, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg176, align 128, !invariant.load !267
  %2 = shl nuw nsw i32 %thread_id.x, 1
  %3 = or i32 %2, %tile_origin.2
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i32 %thread_id.y47, -32
  %6 = zext i32 %1 to i64
  %7 = lshr i64 %6, 5
  %8 = shl nuw nsw i64 %7, 9
  %9 = shl nuw nsw i64 %4, 2
  %10 = add i64 %8, %9
  %11 = add i64 %10, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg074, i64 %11
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true42
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv84 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep85, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %5, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result46.sroa.4.071 = phi float [ %Arg_1.2, %entry ], [ %add.6.i59, %y_in_tile.loop_body ]
  %partial_reduction_result46.sroa.0.070 = phi float [ %Arg_1.2, %entry ], [ %add.6.i, %y_in_tile.loop_body ]
  %scevgep86 = getelementptr i8, ptr addrspace(1) %lsr.iv84, i64 -4
  %12 = load <2 x float>, ptr addrspace(1) %scevgep86, align 8, !invariant.load !267
  %Arg_0.1387 = extractelement <2 x float> %12, i32 0
  %Arg_0.1888 = extractelement <2 x float> %12, i32 1
  %add.6.i = fadd float %partial_reduction_result46.sroa.0.070, %Arg_0.1387
  %add.6.i59 = fadd float %partial_reduction_result46.sroa.4.071, %Arg_0.1888
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep85 = getelementptr i8, ptr addrspace(1) %lsr.iv84, i64 16384
  %13 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %13, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %14 = zext i32 %thread_id.x to i64
  %15 = zext i32 %thread_id.y47 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i64 0, i64 0, i64 0, i64 %14, i64 %15
  store float %add.6.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i64 0, i64 0, i64 0, i64 %15, i64 %14
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.6.i60 = fadd float %partial_reduction_result10, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i60, i32 8, i32 31)
  %add.6.i61 = fadd float %add.6.i60, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i61, i32 4, i32 31)
  %add.6.i62 = fadd float %add.6.i61, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i62, i32 2, i32 31)
  %add.6.i63 = fadd float %add.6.i62, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i63, i32 1, i32 31)
  %add.6.i64 = fadd float %add.6.i63, %20
  store float %add.6.i64, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = shl nuw nsw i32 %thread_id.y47, 1
  %22 = icmp eq i32 %thread_id.x, 0
  %23 = or i32 %21, %tile_origin.2
  %24 = zext i32 %23 to i64
  %output_element_address = getelementptr inbounds [128 x float], ptr addrspace(1) %arg278, i64 0, i64 %24
  br i1 %22, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %25 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address2481 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.6.i59, ptr addrspace(3) %shmem_output_address2481, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr2682 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr2682, align 4
  %26 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.6.i65 = fadd float %partial_reduction_result28, %26
  %27 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i65, i32 8, i32 31)
  %add.6.i66 = fadd float %add.6.i65, %27
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i66, i32 4, i32 31)
  %add.6.i67 = fadd float %add.6.i66, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i67, i32 2, i32 31)
  %add.6.i68 = fadd float %add.6.i67, %29
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i68, i32 1, i32 31)
  %add.6.i69 = fadd float %add.6.i68, %30
  store float %add.6.i69, ptr addrspace(3) %shmem_transposed_addr2682, align 4
  br i1 %25, label %reduction_write_output-true42, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.6.i64, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.6.i69, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_434(ptr noalias nocapture readonly align 128 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y64, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = lshr i32 %11, 7
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %17
  %scevgep109 = getelementptr i8, ptr addrspace(1) %arg091, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi ptr addrspace(1) [ %scevgep109, %entry ], [ %scevgep111, %y_in_tile.loop_body ]
  %lsr.iv106 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep107, %y_in_tile.loop_body ]
  %lsr.iv104 = phi i32 [ %8, %entry ], [ %lsr.iv.next105, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.12.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.12.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y64, %lsr.iv
  %19 = and i32 %lsr.iv104, 126
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 33554304
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %23, i64 %24
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg091, i64 0, i64 %23, i64 %24
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %25 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.12.i = fadd float %partial_reduction_result63.sroa.0.087, %25
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep108, align 8, !invariant.load !267
  %Arg_1.26113 = extractelement <2 x float> %26, i32 0
  %Arg_1.222114 = extractelement <2 x float> %26, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26113, 0.000000e+00
  %scevgep112 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep112, align 8, !invariant.load !267
  %Arg_0.110115 = extractelement <2 x float> %27, i32 0
  %Arg_0.126116 = extractelement <2 x float> %27, i32 1
  %28 = select i1 %compare.58, float %Arg_0.110115, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv104, 1
  %31 = and i32 %30, 127
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 33554304
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %35, i64 %36
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %Arg_0.118 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg091, i64 0, i64 %35, i64 %36
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118, align 4, !invariant.load !267
  %37 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.12.i76 = fadd float %partial_reduction_result63.sroa.4.088, %37
  %compare.524 = fcmp ogt float %Arg_1.222114, 0.000000e+00
  %38 = select i1 %compare.524, float %Arg_0.126116, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y64, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next105 = add nuw nsw i32 %lsr.iv104, 4096
  %scevgep107 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 16384
  %scevgep111 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 16384
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.12.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.12.i77 = fadd float %partial_reduction_result27, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i77, i32 8, i32 31)
  %add.12.i78 = fadd float %add.12.i77, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i78, i32 4, i32 31)
  %add.12.i79 = fadd float %add.12.i78, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i79, i32 2, i32 31)
  %add.12.i80 = fadd float %add.12.i79, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i80, i32 1, i32 31)
  %add.12.i81 = fadd float %add.12.i80, %49
  store float %add.12.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y64, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg295, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41101 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.12.i76, ptr addrspace(3) %shmem_output_address41101, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43102 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.12.i82 = fadd float %partial_reduction_result45, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i82, i32 8, i32 31)
  %add.12.i83 = fadd float %add.12.i82, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i83, i32 4, i32 31)
  %add.12.i84 = fadd float %add.12.i83, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i84, i32 2, i32 31)
  %add.12.i85 = fadd float %add.12.i84, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i85, i32 1, i32 31)
  %add.12.i86 = fadd float %add.12.i85, %60
  store float %add.12.i86, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  br i1 %55, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.12.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.12.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_409(ptr noalias nocapture readonly align 128 dereferenceable(8388608) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 192
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 15
  %6 = shl nuw nsw i32 %thread_id.y64, 8
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 8
  %14 = lshr i32 %11, 8
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %17
  %scevgep109 = getelementptr i8, ptr addrspace(1) %arg091, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi ptr addrspace(1) [ %scevgep109, %entry ], [ %scevgep111, %y_in_tile.loop_body ]
  %lsr.iv106 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep107, %y_in_tile.loop_body ]
  %lsr.iv104 = phi i32 [ %8, %entry ], [ %lsr.iv.next105, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.12.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.12.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y64, %lsr.iv
  %19 = and i32 %lsr.iv104, 254
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 16777088
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %23, i64 %24
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg091, i64 0, i64 %23, i64 %24
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %25 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.12.i = fadd float %partial_reduction_result63.sroa.0.087, %25
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep108, align 8, !invariant.load !267
  %Arg_1.26113 = extractelement <2 x float> %26, i32 0
  %Arg_1.222114 = extractelement <2 x float> %26, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26113, 0.000000e+00
  %scevgep112 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep112, align 8, !invariant.load !267
  %Arg_0.110115 = extractelement <2 x float> %27, i32 0
  %Arg_0.126116 = extractelement <2 x float> %27, i32 1
  %28 = select i1 %compare.58, float %Arg_0.110115, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv104, 1
  %31 = and i32 %30, 255
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 16777088
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %35, i64 %36
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %Arg_0.118 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg091, i64 0, i64 %35, i64 %36
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118, align 4, !invariant.load !267
  %37 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.12.i76 = fadd float %partial_reduction_result63.sroa.4.088, %37
  %compare.524 = fcmp ogt float %Arg_1.222114, 0.000000e+00
  %38 = select i1 %compare.524, float %Arg_0.126116, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y64, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next105 = add nuw nsw i32 %lsr.iv104, 8192
  %scevgep107 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 32768
  %scevgep111 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 32768
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.12.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.12.i77 = fadd float %partial_reduction_result27, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i77, i32 8, i32 31)
  %add.12.i78 = fadd float %add.12.i77, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i78, i32 4, i32 31)
  %add.12.i79 = fadd float %add.12.i78, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i79, i32 2, i32 31)
  %add.12.i80 = fadd float %add.12.i79, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i80, i32 1, i32 31)
  %add.12.i81 = fadd float %add.12.i80, %49
  store float %add.12.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y64, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg295, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41101 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.12.i76, ptr addrspace(3) %shmem_output_address41101, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43102 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.12.i82 = fadd float %partial_reduction_result45, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i82, i32 8, i32 31)
  %add.12.i83 = fadd float %add.12.i82, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i83, i32 4, i32 31)
  %add.12.i84 = fadd float %add.12.i83, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i84, i32 2, i32 31)
  %add.12.i85 = fadd float %add.12.i84, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i85, i32 1, i32 31)
  %add.12.i86 = fadd float %add.12.i85, %60
  store float %add.12.i86, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  br i1 %55, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.12.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.12.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_416(ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg9) local_unnamed_addr #6 {
entry:
  %arg919 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg817 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg715 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg613 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg511 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg49 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !289
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = zext i32 %linear_index to i64
  %4 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %3
  %5 = load float, ptr addrspace(1) %4, align 4, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %3
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %multiply.9 = fmul float %6, %8
  %subtract.10 = fsub float %5, %multiply.9
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %3
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg49, i64 %3
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %multiply.11 = fmul float %6, %12
  %subtract.12 = fsub float %10, %multiply.11
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg511, i64 %3
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg613, i64 %3
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %multiply.13 = fmul float %6, %16
  %subtract.14 = fsub float %14, %multiply.13
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg715, i64 %3
  store float %subtract.10, ptr addrspace(1) %17, align 4
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg817, i64 %3
  store float %subtract.12, ptr addrspace(1) %18, align 4
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg919, i64 %3
  store float %subtract.14, ptr addrspace(1) %19, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_725(ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg8) local_unnamed_addr #0 {
entry:
  %arg8439 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7437 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6435 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5433 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4431 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3429 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2427 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1425 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0423 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !272
  switch i32 %0, label %entry.unreachabledefault [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
  ]

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %Arg_1.2206.pre = load float, ptr addrspace(1) %arg1425, align 128, !invariant.load !267
  %.pre415 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %.pre417 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre419 = and i32 %.pre417, 31
  %.pre420 = lshr i32 %.pre417, 5
  %.pre421 = shl nuw nsw i32 %.pre415, 6
  %1 = shl nuw nsw i32 %.pre419, 1
  %2 = or i32 %1, %.pre421
  %3 = zext i32 %2 to i64
  %4 = add i32 %.pre420, -32
  %5 = zext i32 %.pre420 to i64
  %6 = shl nuw nsw i64 %5, 10
  %7 = shl nuw nsw i64 %3, 2
  %8 = add i64 %6, %7
  %9 = add i64 %8, 4
  %scevgep465 = getelementptr i8, ptr addrspace(1) %arg4431, i64 %9
  br label %y_in_tile.loop_body218

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %Arg_1.2127.pre = load float, ptr addrspace(1) %arg1425, align 128, !invariant.load !267
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %.pre410 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre412 = and i32 %.pre410, 31
  %.pre413 = lshr i32 %.pre410, 5
  %.pre414 = shl nuw nsw i32 %.pre, 6
  %10 = shl nuw nsw i32 %.pre412, 1
  %11 = or i32 %10, %.pre414
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i32 %.pre413, -32
  %14 = zext i32 %.pre410 to i64
  %15 = lshr i64 %14, 5
  %16 = shl nuw nsw i64 %15, 10
  %17 = shl nuw nsw i64 %12, 2
  %18 = add i64 %16, %17
  %19 = add i64 %18, 4
  %scevgep471 = getelementptr i8, ptr addrspace(1) %arg3429, i64 %19
  br label %y_in_tile.loop_body139

entry.unreachabledefault:                         ; preds = %entry
  unreachable

common.ret.sink.split:                            ; preds = %reduction_write_output-after258, %reduction_write_output-after100, %reduction_write_output-after
  %.sink = phi i32 [ %45, %reduction_write_output-after ], [ %76, %reduction_write_output-after100 ], [ %114, %reduction_write_output-after258 ]
  %arg6.sink = phi ptr addrspace(1) [ %arg5433, %reduction_write_output-after ], [ %arg6435, %reduction_write_output-after100 ], [ %arg8439, %reduction_write_output-after258 ]
  %add.14.i366.sink = phi float [ %add.9.i355, %reduction_write_output-after ], [ %add.14.i366, %reduction_write_output-after100 ], [ %add.24.i388, %reduction_write_output-after258 ]
  %20 = or i32 %.sink, 1
  %21 = zext i32 %20 to i64
  %output_element_address123 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg6.sink, i64 0, i64 %21
  store float %add.14.i366.sink, ptr addrspace(1) %output_element_address123, align 4
  br label %common.ret

common.ret:                                       ; preds = %reduction_write_output-after201, %common.ret.sink.split, %reduction_write_output-after100, %reduction_write_output-after, %reduction_write_output-after258
  ret void

reduce-group-0-true:                              ; preds = %entry
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %23, 31
  %thread_id.y297 = lshr i32 %23, 5
  %tile_origin.2 = shl nuw nsw i32 %22, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg1425, align 128, !invariant.load !267
  %24 = shl nuw nsw i32 %thread_id.x, 1
  %25 = or i32 %24, %tile_origin.2
  %26 = zext i32 %25 to i64
  %27 = add nuw nsw i32 %thread_id.y297, -32
  %28 = zext i32 %23 to i64
  %29 = lshr i64 %28, 5
  %30 = shl nuw nsw i64 %29, 10
  %31 = shl nuw nsw i64 %26, 2
  %32 = add i64 %30, %31
  %33 = add i64 %32, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0423, i64 %33
  br label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %reduce-group-0-true, %y_in_tile.loop_body
  %lsr.iv454 = phi ptr addrspace(1) [ %scevgep, %reduce-group-0-true ], [ %scevgep455, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %27, %reduce-group-0-true ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result293.sroa.0.0404 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.9.i, %y_in_tile.loop_body ]
  %partial_reduction_result293.sroa.4.0403 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.9.i345, %y_in_tile.loop_body ]
  %scevgep456 = getelementptr i8, ptr addrspace(1) %lsr.iv454, i64 -4
  %34 = load <2 x float>, ptr addrspace(1) %scevgep456, align 8, !invariant.load !267
  %Arg_0.13475 = extractelement <2 x float> %34, i32 0
  %Arg_0.18476 = extractelement <2 x float> %34, i32 1
  %add.9.i = fadd float %partial_reduction_result293.sroa.0.0404, %Arg_0.13475
  %add.9.i345 = fadd float %partial_reduction_result293.sroa.4.0403, %Arg_0.18476
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep455 = getelementptr i8, ptr addrspace(1) %lsr.iv454, i64 32768
  %35 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %35, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %36 = zext i32 %thread_id.x to i64
  %37 = zext i32 %thread_id.y297 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i64 0, i64 0, i64 0, i64 %36, i64 %37
  store float %add.9.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i64 0, i64 0, i64 0, i64 %37, i64 %36
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.9.i346 = fadd float %partial_reduction_result10, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i346, i32 8, i32 31)
  %add.9.i347 = fadd float %add.9.i346, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i347, i32 4, i32 31)
  %add.9.i348 = fadd float %add.9.i347, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i348, i32 2, i32 31)
  %add.9.i349 = fadd float %add.9.i348, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i349, i32 1, i32 31)
  %add.9.i350 = fadd float %add.9.i349, %42
  store float %add.9.i350, ptr addrspace(3) %shmem_transposed_addr, align 4
  %43 = shl nuw nsw i32 %thread_id.y297, 1
  %44 = icmp eq i32 %thread_id.x, 0
  %45 = or i32 %43, %tile_origin.2
  %46 = zext i32 %45 to i64
  %output_element_address = getelementptr inbounds [256 x float], ptr addrspace(1) %arg5433, i64 0, i64 %46
  br i1 %44, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %47 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address24442 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.9.i345, ptr addrspace(3) %shmem_output_address24442, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26443 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr26443, align 4
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.9.i351 = fadd float %partial_reduction_result28, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i351, i32 8, i32 31)
  %add.9.i352 = fadd float %add.9.i351, %49
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i352, i32 4, i32 31)
  %add.9.i353 = fadd float %add.9.i352, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i353, i32 2, i32 31)
  %add.9.i354 = fadd float %add.9.i353, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.9.i354, i32 1, i32 31)
  %add.9.i355 = fadd float %add.9.i354, %52
  store float %add.9.i355, ptr addrspace(3) %shmem_transposed_addr26443, align 4
  br i1 %47, label %common.ret.sink.split, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.9.i350, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %entry
  %53 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %54 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x50 = and i32 %54, 31
  %thread_id.y51296 = lshr i32 %54, 5
  %tile_origin.257 = shl nuw nsw i32 %53, 6
  %Arg_1.248 = load float, ptr addrspace(1) %arg1425, align 128, !invariant.load !267
  %55 = shl nuw nsw i32 %thread_id.x50, 1
  %56 = or i32 %55, %tile_origin.257
  %57 = zext i32 %56 to i64
  %58 = add nuw nsw i32 %thread_id.y51296, -32
  %59 = zext i32 %54 to i64
  %60 = lshr i64 %59, 5
  %61 = shl nuw nsw i64 %60, 10
  %62 = shl nuw nsw i64 %57, 2
  %63 = add i64 %61, %62
  %64 = add i64 %63, 4
  %scevgep459 = getelementptr i8, ptr addrspace(1) %arg2427, i64 %64
  br label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %reduce-group-1-true, %y_in_tile.loop_body60
  %lsr.iv460 = phi ptr addrspace(1) [ %scevgep459, %reduce-group-1-true ], [ %scevgep461, %y_in_tile.loop_body60 ]
  %lsr.iv457 = phi i32 [ %58, %reduce-group-1-true ], [ %lsr.iv.next458, %y_in_tile.loop_body60 ]
  %partial_reduction_result47292.sroa.4.0390 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.14.i356, %y_in_tile.loop_body60 ]
  %partial_reduction_result47292.sroa.0.0389 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.14.i, %y_in_tile.loop_body60 ]
  %scevgep462 = getelementptr i8, ptr addrspace(1) %lsr.iv460, i64 -4
  %65 = load <2 x float>, ptr addrspace(1) %scevgep462, align 8, !invariant.load !267
  %Arg_2.373477 = extractelement <2 x float> %65, i32 0
  %Arg_2.379478 = extractelement <2 x float> %65, i32 1
  %add.14.i = fadd float %partial_reduction_result47292.sroa.0.0389, %Arg_2.373477
  %add.14.i356 = fadd float %partial_reduction_result47292.sroa.4.0390, %Arg_2.379478
  %lsr.iv.next458 = add nsw i32 %lsr.iv457, 32
  %scevgep461 = getelementptr i8, ptr addrspace(1) %lsr.iv460, i64 32768
  %66 = icmp ugt i32 %lsr.iv.next458, 31
  br i1 %66, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_body60
  %67 = zext i32 %thread_id.x50 to i64
  %68 = zext i32 %thread_id.y51296 to i64
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i64 0, i64 0, i64 0, i64 %67, i64 %68
  store float %add.14.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i64 0, i64 0, i64 0, i64 %68, i64 %67
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.14.i357 = fadd float %partial_reduction_result85, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i357, i32 8, i32 31)
  %add.14.i358 = fadd float %add.14.i357, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i358, i32 4, i32 31)
  %add.14.i359 = fadd float %add.14.i358, %71
  %72 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i359, i32 2, i32 31)
  %add.14.i360 = fadd float %add.14.i359, %72
  %73 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i360, i32 1, i32 31)
  %add.14.i361 = fadd float %add.14.i360, %73
  store float %add.14.i361, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %74 = shl nuw nsw i32 %thread_id.y51296, 1
  %75 = icmp eq i32 %thread_id.x50, 0
  %76 = or i32 %74, %tile_origin.257
  %77 = zext i32 %76 to i64
  %output_element_address101 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg6435, i64 0, i64 %77
  br i1 %75, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %78 = icmp eq i32 %thread_id.x50, 0
  %shmem_output_address103445 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address81, i64 1056
  store float %add.14.i356, ptr addrspace(3) %shmem_output_address103445, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105446 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr83, i64 1056
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105446, align 4
  %79 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.14.i362 = fadd float %partial_reduction_result107, %79
  %80 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i362, i32 8, i32 31)
  %add.14.i363 = fadd float %add.14.i362, %80
  %81 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i363, i32 4, i32 31)
  %add.14.i364 = fadd float %add.14.i363, %81
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i364, i32 2, i32 31)
  %add.14.i365 = fadd float %add.14.i364, %82
  %83 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i365, i32 1, i32 31)
  %add.14.i366 = fadd float %add.14.i365, %83
  store float %add.14.i366, ptr addrspace(3) %shmem_transposed_addr105446, align 4
  br i1 %78, label %common.ret.sink.split, label %common.ret

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  store float %add.14.i361, ptr addrspace(1) %output_element_address101, align 8
  br label %reduction_write_output-after100

y_in_tile.loop_body139:                           ; preds = %entry.reduce-group-2-true_crit_edge, %y_in_tile.loop_body139
  %lsr.iv472 = phi ptr addrspace(1) [ %scevgep471, %entry.reduce-group-2-true_crit_edge ], [ %scevgep473, %y_in_tile.loop_body139 ]
  %lsr.iv469 = phi i32 [ %13, %entry.reduce-group-2-true_crit_edge ], [ %lsr.iv.next470, %y_in_tile.loop_body139 ]
  %partial_reduction_result126291.sroa.4.0394 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.19.i367, %y_in_tile.loop_body139 ]
  %partial_reduction_result126291.sroa.0.0393 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.19.i, %y_in_tile.loop_body139 ]
  %scevgep474 = getelementptr i8, ptr addrspace(1) %lsr.iv472, i64 -4
  %84 = load <2 x float>, ptr addrspace(1) %scevgep474, align 8, !invariant.load !267
  %Arg_3.4152481 = extractelement <2 x float> %84, i32 0
  %Arg_3.4158482 = extractelement <2 x float> %84, i32 1
  %add.19.i = fadd float %partial_reduction_result126291.sroa.0.0393, %Arg_3.4152481
  %add.19.i367 = fadd float %partial_reduction_result126291.sroa.4.0394, %Arg_3.4158482
  %lsr.iv.next470 = add nsw i32 %lsr.iv469, 32
  %scevgep473 = getelementptr i8, ptr addrspace(1) %lsr.iv472, i64 32768
  %85 = icmp ugt i32 %lsr.iv.next470, 31
  br i1 %85, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_body139
  %86 = zext i32 %.pre412 to i64
  %87 = zext i32 %.pre413 to i64
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i64 0, i64 0, i64 0, i64 %86, i64 %87
  store float %add.19.i, ptr addrspace(3) %shmem_output_address160, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i64 0, i64 0, i64 0, i64 %87, i64 %86
  %partial_reduction_result164 = load float, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %88 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  %add.19.i368 = fadd float %partial_reduction_result164, %88
  %89 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i368, i32 8, i32 31)
  %add.19.i369 = fadd float %add.19.i368, %89
  %90 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i369, i32 4, i32 31)
  %add.19.i370 = fadd float %add.19.i369, %90
  %91 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i370, i32 2, i32 31)
  %add.19.i371 = fadd float %add.19.i370, %91
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i371, i32 1, i32 31)
  %add.19.i372 = fadd float %add.19.i371, %92
  store float %add.19.i372, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %93 = shl nuw nsw i32 %.pre413, 1
  %94 = icmp eq i32 %.pre412, 0
  %95 = or i32 %93, %.pre414
  %96 = zext i32 %95 to i64
  %output_element_address180 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg7437, i64 0, i64 %96
  br i1 %94, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %97 = icmp eq i32 %.pre412, 0
  %shmem_output_address182448 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address160, i64 1056
  store float %add.19.i367, ptr addrspace(3) %shmem_output_address182448, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184449 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr162, i64 1056
  %partial_reduction_result186 = load float, ptr addrspace(3) %shmem_transposed_addr184449, align 4
  %98 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  %add.19.i373 = fadd float %partial_reduction_result186, %98
  %99 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i373, i32 8, i32 31)
  %add.19.i374 = fadd float %add.19.i373, %99
  %100 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i374, i32 4, i32 31)
  %add.19.i375 = fadd float %add.19.i374, %100
  %101 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i375, i32 2, i32 31)
  %add.19.i376 = fadd float %add.19.i375, %101
  %102 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.19.i376, i32 1, i32 31)
  %add.19.i377 = fadd float %add.19.i376, %102
  store float %add.19.i377, ptr addrspace(3) %shmem_transposed_addr184449, align 4
  br i1 %97, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %common.ret

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  store float %add.19.i372, ptr addrspace(1) %output_element_address180, align 8
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address180, i64 4
  store float %add.19.i377, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after201

y_in_tile.loop_body218:                           ; preds = %entry.reduce-group-3-true_crit_edge, %y_in_tile.loop_body218
  %lsr.iv466 = phi ptr addrspace(1) [ %scevgep465, %entry.reduce-group-3-true_crit_edge ], [ %scevgep467, %y_in_tile.loop_body218 ]
  %lsr.iv463 = phi i32 [ %4, %entry.reduce-group-3-true_crit_edge ], [ %lsr.iv.next464, %y_in_tile.loop_body218 ]
  %partial_reduction_result205290.sroa.4.0399 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.24.i378, %y_in_tile.loop_body218 ]
  %partial_reduction_result205290.sroa.0.0398 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.24.i, %y_in_tile.loop_body218 ]
  %scevgep468 = getelementptr i8, ptr addrspace(1) %lsr.iv466, i64 -4
  %103 = load <2 x float>, ptr addrspace(1) %scevgep468, align 8, !invariant.load !267
  %Arg_4.5231479 = extractelement <2 x float> %103, i32 0
  %Arg_4.5237480 = extractelement <2 x float> %103, i32 1
  %add.24.i = fadd float %partial_reduction_result205290.sroa.0.0398, %Arg_4.5231479
  %add.24.i378 = fadd float %partial_reduction_result205290.sroa.4.0399, %Arg_4.5237480
  %lsr.iv.next464 = add i32 %lsr.iv463, 32
  %scevgep467 = getelementptr i8, ptr addrspace(1) %lsr.iv466, i64 32768
  %104 = icmp ugt i32 %lsr.iv.next464, 31
  br i1 %104, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_body218
  %105 = trunc i64 %5 to i32
  %106 = zext i32 %.pre419 to i64
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i64 0, i64 0, i64 0, i64 %106, i64 %5
  store float %add.24.i, ptr addrspace(3) %shmem_output_address239, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i64 0, i64 0, i64 0, i64 %5, i64 %106
  %partial_reduction_result243 = load float, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %107 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  %add.24.i379 = fadd float %partial_reduction_result243, %107
  %108 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i379, i32 8, i32 31)
  %add.24.i380 = fadd float %add.24.i379, %108
  %109 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i380, i32 4, i32 31)
  %add.24.i381 = fadd float %add.24.i380, %109
  %110 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i381, i32 2, i32 31)
  %add.24.i382 = fadd float %add.24.i381, %110
  %111 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i382, i32 1, i32 31)
  %add.24.i383 = fadd float %add.24.i382, %111
  store float %add.24.i383, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %112 = shl nuw nsw i32 %105, 1
  %113 = icmp eq i32 %.pre419, 0
  %114 = or i32 %112, %.pre421
  %115 = zext i32 %114 to i64
  %output_element_address259 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg8439, i64 0, i64 %115
  br i1 %113, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %116 = icmp eq i32 %.pre419, 0
  %shmem_output_address261452 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address239, i64 1056
  store float %add.24.i378, ptr addrspace(3) %shmem_output_address261452, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263453 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr241, i64 1056
  %partial_reduction_result265 = load float, ptr addrspace(3) %shmem_transposed_addr263453, align 4
  %117 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  %add.24.i384 = fadd float %partial_reduction_result265, %117
  %118 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i384, i32 8, i32 31)
  %add.24.i385 = fadd float %add.24.i384, %118
  %119 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i385, i32 4, i32 31)
  %add.24.i386 = fadd float %add.24.i385, %119
  %120 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i386, i32 2, i32 31)
  %add.24.i387 = fadd float %add.24.i386, %120
  %121 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.24.i387, i32 1, i32 31)
  %add.24.i388 = fadd float %add.24.i387, %121
  store float %add.24.i388, ptr addrspace(3) %shmem_transposed_addr263453, align 4
  br i1 %116, label %common.ret.sink.split, label %common.ret

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  store float %add.24.i383, ptr addrspace(1) %output_element_address259, align 8
  br label %reduction_write_output-after258
}

; Function Attrs: nounwind
define void @fusion_694(ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg10) local_unnamed_addr #0 {
entry:
  %arg10562 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9560 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8558 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7556 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6554 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5552 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4550 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3548 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2546 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1544 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0542 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !290
  switch i32 %0, label %common.ret [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
    i32 4, label %entry.reduce-group-4-true_crit_edge
  ]

entry.reduce-group-4-true_crit_edge:              ; preds = %entry
  %Arg_1.2285.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre534 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %.pre536 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre538 = and i32 %.pre536, 31
  %.pre539 = lshr i32 %.pre536, 5
  %.pre540 = shl nuw nsw i32 %.pre534, 6
  %.pre585 = shl nuw nsw i32 %.pre538, 1
  %.pre587 = or i32 %.pre585, %.pre540
  %.pre589 = zext i32 %.pre587 to i64
  %.pre626 = add nuw nsw i32 %.pre539, -32
  %.pre628 = zext i32 %.pre539 to i64
  %.pre630 = shl nuw nsw i64 %.pre589, 2
  br label %y_in_tile.loop_body297.lr.ph

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %Arg_1.2206.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre527 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %.pre529 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre531 = and i32 %.pre529, 31
  %.pre532 = lshr i32 %.pre529, 5
  %.pre533 = shl nuw nsw i32 %.pre527, 6
  %.pre580 = shl nuw nsw i32 %.pre531, 1
  %.pre581 = or i32 %.pre580, %.pre533
  %.pre583 = zext i32 %.pre581 to i64
  %.pre620 = add nuw nsw i32 %.pre532, -32
  %.pre622 = zext i32 %.pre532 to i64
  %.pre624 = shl nuw nsw i64 %.pre583, 2
  %1 = shl nuw nsw i64 %.pre622, 9
  %2 = add i64 %1, %.pre624
  %3 = add i64 %2, 4
  %scevgep610 = getelementptr i8, ptr addrspace(1) %arg4550, i64 %3
  br label %y_in_tile.loop_body218

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %Arg_1.2127.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %.pre522 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre524 = and i32 %.pre522, 31
  %.pre525 = lshr i32 %.pre522, 5
  %.pre526 = shl nuw nsw i32 %.pre, 6
  %4 = shl nuw nsw i32 %.pre524, 1
  %5 = or i32 %4, %.pre526
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i32 %.pre525, -32
  %8 = zext i32 %.pre522 to i64
  %9 = lshr i64 %8, 5
  %10 = shl nuw nsw i64 %9, 9
  %11 = shl nuw nsw i64 %6, 2
  %12 = add i64 %10, %11
  %13 = add i64 %12, 4
  %scevgep616 = getelementptr i8, ptr addrspace(1) %arg3548, i64 %13
  br label %y_in_tile.loop_body139

common.ret.sink.split:                            ; preds = %reduction_write_output-after337, %reduction_write_output-after100, %reduction_write_output-after
  %.sink = phi i32 [ %39, %reduction_write_output-after ], [ %70, %reduction_write_output-after100 ], [ %131, %reduction_write_output-after337 ]
  %arg7.sink = phi ptr addrspace(1) [ %arg6554, %reduction_write_output-after ], [ %arg7556, %reduction_write_output-after100 ], [ %arg10562, %reduction_write_output-after337 ]
  %add.15.i461.sink = phi float [ %add.10.i450, %reduction_write_output-after ], [ %add.15.i461, %reduction_write_output-after100 ], [ %add.30.i494, %reduction_write_output-after337 ]
  %14 = or i32 %.sink, 1
  %15 = zext i32 %14 to i64
  %output_element_address123 = getelementptr inbounds [128 x float], ptr addrspace(1) %arg7.sink, i64 0, i64 %15
  store float %add.15.i461.sink, ptr addrspace(1) %output_element_address123, align 4
  br label %common.ret

common.ret:                                       ; preds = %reduction_write_output-after201, %common.ret.sink.split, %reduction_write_output-after100, %reduction_write_output-after, %reduction_write_output-after337, %reduction_write_output-after280, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %17, 31
  %thread_id.y380 = lshr i32 %17, 5
  %tile_origin.2 = shl nuw nsw i32 %16, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %18 = shl nuw nsw i32 %thread_id.x, 1
  %19 = or i32 %18, %tile_origin.2
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i32 %thread_id.y380, -32
  %22 = zext i32 %17 to i64
  %23 = lshr i64 %22, 5
  %24 = shl nuw nsw i64 %23, 9
  %25 = shl nuw nsw i64 %20, 2
  %26 = add i64 %24, %25
  %27 = add i64 %26, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0542, i64 %27
  br label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %reduce-group-0-true, %y_in_tile.loop_body
  %lsr.iv591 = phi ptr addrspace(1) [ %scevgep, %reduce-group-0-true ], [ %scevgep592, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %21, %reduce-group-0-true ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.0.0515 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.4.0514 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i440, %y_in_tile.loop_body ]
  %scevgep593 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 -4
  %28 = load <2 x float>, ptr addrspace(1) %scevgep593, align 8, !invariant.load !267
  %Arg_0.13632 = extractelement <2 x float> %28, i32 0
  %Arg_0.18633 = extractelement <2 x float> %28, i32 1
  %add.10.i = fadd float %partial_reduction_result375.sroa.0.0515, %Arg_0.13632
  %add.10.i440 = fadd float %partial_reduction_result375.sroa.4.0514, %Arg_0.18633
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep592 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 16384
  %29 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %29, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %30 = zext i32 %thread_id.x to i64
  %31 = zext i32 %thread_id.y380 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i64 0, i64 0, i64 0, i64 %30, i64 %31
  store float %add.10.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i64 0, i64 0, i64 0, i64 %31, i64 %30
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.10.i441 = fadd float %partial_reduction_result10, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i441, i32 8, i32 31)
  %add.10.i442 = fadd float %add.10.i441, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i442, i32 4, i32 31)
  %add.10.i443 = fadd float %add.10.i442, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i443, i32 2, i32 31)
  %add.10.i444 = fadd float %add.10.i443, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i444, i32 1, i32 31)
  %add.10.i445 = fadd float %add.10.i444, %36
  store float %add.10.i445, ptr addrspace(3) %shmem_transposed_addr, align 4
  %37 = shl nuw nsw i32 %thread_id.y380, 1
  %38 = icmp eq i32 %thread_id.x, 0
  %39 = or i32 %37, %tile_origin.2
  %40 = zext i32 %39 to i64
  %output_element_address = getelementptr inbounds [128 x float], ptr addrspace(1) %arg6554, i64 0, i64 %40
  br i1 %38, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %41 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address24565 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.10.i440, ptr addrspace(3) %shmem_output_address24565, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26566 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.10.i446 = fadd float %partial_reduction_result28, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i446, i32 8, i32 31)
  %add.10.i447 = fadd float %add.10.i446, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i447, i32 4, i32 31)
  %add.10.i448 = fadd float %add.10.i447, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i448, i32 2, i32 31)
  %add.10.i449 = fadd float %add.10.i448, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i449, i32 1, i32 31)
  %add.10.i450 = fadd float %add.10.i449, %46
  store float %add.10.i450, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  br i1 %41, label %common.ret.sink.split, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.10.i445, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %entry
  %47 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %48 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x50 = and i32 %48, 31
  %thread_id.y51379 = lshr i32 %48, 5
  %tile_origin.257 = shl nuw nsw i32 %47, 6
  %Arg_1.248 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %49 = shl nuw nsw i32 %thread_id.x50, 1
  %50 = or i32 %49, %tile_origin.257
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i32 %thread_id.y51379, -32
  %53 = zext i32 %48 to i64
  %54 = lshr i64 %53, 5
  %55 = shl nuw nsw i64 %54, 9
  %56 = shl nuw nsw i64 %51, 2
  %57 = add i64 %55, %56
  %58 = add i64 %57, 4
  %scevgep596 = getelementptr i8, ptr addrspace(1) %arg2546, i64 %58
  br label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %reduce-group-1-true, %y_in_tile.loop_body60
  %lsr.iv597 = phi ptr addrspace(1) [ %scevgep596, %reduce-group-1-true ], [ %scevgep598, %y_in_tile.loop_body60 ]
  %lsr.iv594 = phi i32 [ %52, %reduce-group-1-true ], [ %lsr.iv.next595, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.4.0496 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i451, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.0.0495 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i, %y_in_tile.loop_body60 ]
  %scevgep599 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 -4
  %59 = load <2 x float>, ptr addrspace(1) %scevgep599, align 8, !invariant.load !267
  %Arg_2.373634 = extractelement <2 x float> %59, i32 0
  %Arg_2.379635 = extractelement <2 x float> %59, i32 1
  %add.15.i = fadd float %partial_reduction_result47374.sroa.0.0495, %Arg_2.373634
  %add.15.i451 = fadd float %partial_reduction_result47374.sroa.4.0496, %Arg_2.379635
  %lsr.iv.next595 = add nsw i32 %lsr.iv594, 32
  %scevgep598 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 16384
  %60 = icmp ugt i32 %lsr.iv.next595, 31
  br i1 %60, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_body60
  %61 = zext i32 %thread_id.x50 to i64
  %62 = zext i32 %thread_id.y51379 to i64
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i64 0, i64 0, i64 0, i64 %61, i64 %62
  store float %add.15.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i64 0, i64 0, i64 0, i64 %62, i64 %61
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.15.i452 = fadd float %partial_reduction_result85, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i452, i32 8, i32 31)
  %add.15.i453 = fadd float %add.15.i452, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i453, i32 4, i32 31)
  %add.15.i454 = fadd float %add.15.i453, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i454, i32 2, i32 31)
  %add.15.i455 = fadd float %add.15.i454, %66
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i455, i32 1, i32 31)
  %add.15.i456 = fadd float %add.15.i455, %67
  store float %add.15.i456, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %68 = shl nuw nsw i32 %thread_id.y51379, 1
  %69 = icmp eq i32 %thread_id.x50, 0
  %70 = or i32 %68, %tile_origin.257
  %71 = zext i32 %70 to i64
  %output_element_address101 = getelementptr inbounds [128 x float], ptr addrspace(1) %arg7556, i64 0, i64 %71
  br i1 %69, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %72 = icmp eq i32 %thread_id.x50, 0
  %shmem_output_address103568 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address81, i64 1056
  store float %add.15.i451, ptr addrspace(3) %shmem_output_address103568, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105569 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr83, i64 1056
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  %73 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.15.i457 = fadd float %partial_reduction_result107, %73
  %74 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i457, i32 8, i32 31)
  %add.15.i458 = fadd float %add.15.i457, %74
  %75 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i458, i32 4, i32 31)
  %add.15.i459 = fadd float %add.15.i458, %75
  %76 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i459, i32 2, i32 31)
  %add.15.i460 = fadd float %add.15.i459, %76
  %77 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i460, i32 1, i32 31)
  %add.15.i461 = fadd float %add.15.i460, %77
  store float %add.15.i461, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  br i1 %72, label %common.ret.sink.split, label %common.ret

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  store float %add.15.i456, ptr addrspace(1) %output_element_address101, align 8
  br label %reduction_write_output-after100

y_in_tile.loop_body139:                           ; preds = %entry.reduce-group-2-true_crit_edge, %y_in_tile.loop_body139
  %lsr.iv617 = phi ptr addrspace(1) [ %scevgep616, %entry.reduce-group-2-true_crit_edge ], [ %scevgep618, %y_in_tile.loop_body139 ]
  %lsr.iv614 = phi i32 [ %7, %entry.reduce-group-2-true_crit_edge ], [ %lsr.iv.next615, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.4.0500 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i462, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.0.0499 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i, %y_in_tile.loop_body139 ]
  %scevgep619 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 -4
  %78 = load <2 x float>, ptr addrspace(1) %scevgep619, align 8, !invariant.load !267
  %Arg_3.4152638 = extractelement <2 x float> %78, i32 0
  %Arg_3.4158639 = extractelement <2 x float> %78, i32 1
  %add.20.i = fadd float %partial_reduction_result126373.sroa.0.0499, %Arg_3.4152638
  %add.20.i462 = fadd float %partial_reduction_result126373.sroa.4.0500, %Arg_3.4158639
  %lsr.iv.next615 = add nsw i32 %lsr.iv614, 32
  %scevgep618 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 16384
  %79 = icmp ugt i32 %lsr.iv.next615, 31
  br i1 %79, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_body139
  %80 = zext i32 %.pre524 to i64
  %81 = zext i32 %.pre525 to i64
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i64 0, i64 0, i64 0, i64 %80, i64 %81
  store float %add.20.i, ptr addrspace(3) %shmem_output_address160, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i64 0, i64 0, i64 0, i64 %81, i64 %80
  %partial_reduction_result164 = load float, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  %add.20.i463 = fadd float %partial_reduction_result164, %82
  %83 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i463, i32 8, i32 31)
  %add.20.i464 = fadd float %add.20.i463, %83
  %84 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i464, i32 4, i32 31)
  %add.20.i465 = fadd float %add.20.i464, %84
  %85 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i465, i32 2, i32 31)
  %add.20.i466 = fadd float %add.20.i465, %85
  %86 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i466, i32 1, i32 31)
  %add.20.i467 = fadd float %add.20.i466, %86
  store float %add.20.i467, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %87 = shl nuw nsw i32 %.pre525, 1
  %88 = icmp eq i32 %.pre524, 0
  %89 = or i32 %87, %.pre526
  %90 = zext i32 %89 to i64
  %output_element_address180 = getelementptr inbounds [128 x float], ptr addrspace(1) %arg8558, i64 0, i64 %90
  br i1 %88, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %91 = icmp eq i32 %.pre524, 0
  %shmem_output_address182571 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address160, i64 1056
  store float %add.20.i462, ptr addrspace(3) %shmem_output_address182571, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184572 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr162, i64 1056
  %partial_reduction_result186 = load float, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  %add.20.i468 = fadd float %partial_reduction_result186, %92
  %93 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i468, i32 8, i32 31)
  %add.20.i469 = fadd float %add.20.i468, %93
  %94 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i469, i32 4, i32 31)
  %add.20.i470 = fadd float %add.20.i469, %94
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i470, i32 2, i32 31)
  %add.20.i471 = fadd float %add.20.i470, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i471, i32 1, i32 31)
  %add.20.i472 = fadd float %add.20.i471, %96
  store float %add.20.i472, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  br i1 %91, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %common.ret

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  store float %add.20.i467, ptr addrspace(1) %output_element_address180, align 8
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address180, i64 4
  store float %add.20.i472, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after201

y_in_tile.loop_body218:                           ; preds = %entry.reduce-group-3-true_crit_edge, %y_in_tile.loop_body218
  %lsr.iv611 = phi ptr addrspace(1) [ %scevgep610, %entry.reduce-group-3-true_crit_edge ], [ %scevgep612, %y_in_tile.loop_body218 ]
  %lsr.iv608 = phi i32 [ %.pre620, %entry.reduce-group-3-true_crit_edge ], [ %lsr.iv.next609, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.4.0505 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i473, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.0.0504 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i, %y_in_tile.loop_body218 ]
  %scevgep613 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 -4
  %97 = load <2 x float>, ptr addrspace(1) %scevgep613, align 8, !invariant.load !267
  %Arg_4.5231636 = extractelement <2 x float> %97, i32 0
  %Arg_4.5237637 = extractelement <2 x float> %97, i32 1
  %add.25.i = fadd float %partial_reduction_result205372.sroa.0.0504, %Arg_4.5231636
  %add.25.i473 = fadd float %partial_reduction_result205372.sroa.4.0505, %Arg_4.5237637
  %lsr.iv.next609 = add nsw i32 %lsr.iv608, 32
  %scevgep612 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 16384
  %98 = icmp ugt i32 %lsr.iv.next609, 31
  br i1 %98, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_body218
  %99 = zext i32 %.pre531 to i64
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i64 0, i64 0, i64 0, i64 %99, i64 %.pre622
  store float %add.25.i, ptr addrspace(3) %shmem_output_address239, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i64 0, i64 0, i64 0, i64 %.pre622, i64 %99
  %partial_reduction_result243 = load float, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %100 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  %add.25.i474 = fadd float %partial_reduction_result243, %100
  %101 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i474, i32 8, i32 31)
  %add.25.i475 = fadd float %add.25.i474, %101
  %102 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i475, i32 4, i32 31)
  %add.25.i476 = fadd float %add.25.i475, %102
  %103 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i476, i32 2, i32 31)
  %add.25.i477 = fadd float %add.25.i476, %103
  %104 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i477, i32 1, i32 31)
  %add.25.i478 = fadd float %add.25.i477, %104
  store float %add.25.i478, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %105 = shl nuw nsw i32 %.pre532, 1
  %106 = icmp eq i32 %.pre531, 0
  %107 = or i32 %105, %.pre533
  %108 = zext i32 %107 to i64
  %output_element_address259 = getelementptr [128 x float], ptr addrspace(1) %arg9560, i64 0, i64 %108
  br i1 %106, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %109 = icmp eq i32 %.pre531, 0
  %shmem_output_address261575 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address239, i64 1056
  store float %add.25.i473, ptr addrspace(3) %shmem_output_address261575, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263576 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr241, i64 1056
  %partial_reduction_result265 = load float, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  %110 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  %add.25.i479 = fadd float %partial_reduction_result265, %110
  %111 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i479, i32 8, i32 31)
  %add.25.i480 = fadd float %add.25.i479, %111
  %112 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i480, i32 4, i32 31)
  %add.25.i481 = fadd float %add.25.i480, %112
  %113 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i481, i32 2, i32 31)
  %add.25.i482 = fadd float %add.25.i481, %113
  %114 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i482, i32 1, i32 31)
  %add.25.i483 = fadd float %add.25.i482, %114
  store float %add.25.i483, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  br i1 %109, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  %115 = icmp eq i32 %0, 4
  br i1 %115, label %y_in_tile.loop_body297.lr.ph, label %common.ret

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  store float %add.25.i478, ptr addrspace(1) %output_element_address259, align 8
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %sunkaddr640 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address259, i64 4
  store float %add.25.i483, ptr addrspace(1) %sunkaddr640, align 4
  br label %reduction_write_output-after280

y_in_tile.loop_body297.lr.ph:                     ; preds = %reduction_write_output-after280, %entry.reduce-group-4-true_crit_edge
  %.pre-phi631 = phi i64 [ %.pre630, %entry.reduce-group-4-true_crit_edge ], [ %.pre624, %reduction_write_output-after280 ]
  %.pre-phi629 = phi i64 [ %.pre628, %entry.reduce-group-4-true_crit_edge ], [ %.pre622, %reduction_write_output-after280 ]
  %.pre-phi627 = phi i32 [ %.pre626, %entry.reduce-group-4-true_crit_edge ], [ %.pre620, %reduction_write_output-after280 ]
  %.pre-phi590 = phi i64 [ %.pre589, %entry.reduce-group-4-true_crit_edge ], [ %.pre583, %reduction_write_output-after280 ]
  %.pre-phi588 = phi i32 [ %.pre587, %entry.reduce-group-4-true_crit_edge ], [ %.pre581, %reduction_write_output-after280 ]
  %tile_origin.2294.pre-phi = phi i32 [ %.pre540, %entry.reduce-group-4-true_crit_edge ], [ %.pre533, %reduction_write_output-after280 ]
  %thread_id.y288376.pre-phi = phi i32 [ %.pre539, %entry.reduce-group-4-true_crit_edge ], [ %.pre532, %reduction_write_output-after280 ]
  %thread_id.x287.pre-phi = phi i32 [ %.pre538, %entry.reduce-group-4-true_crit_edge ], [ %.pre531, %reduction_write_output-after280 ]
  %Arg_1.2285 = phi float [ %Arg_1.2285.pre, %entry.reduce-group-4-true_crit_edge ], [ %Arg_1.2206.pre, %reduction_write_output-after280 ]
  %116 = or i32 %.pre-phi588, 1
  %117 = zext i32 %116 to i64
  %118 = shl nuw nsw i64 %.pre-phi629, 9
  %119 = add nuw nsw i64 %118, %.pre-phi631
  %scevgep602 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %119
  %120 = shl nuw nsw i64 %117, 2
  %121 = add nuw nsw i64 %118, %120
  %scevgep605 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %121
  br label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_body297.lr.ph, %y_in_tile.loop_body297
  %lsr.iv606 = phi ptr addrspace(1) [ %scevgep605, %y_in_tile.loop_body297.lr.ph ], [ %scevgep607, %y_in_tile.loop_body297 ]
  %lsr.iv603 = phi ptr addrspace(1) [ %scevgep602, %y_in_tile.loop_body297.lr.ph ], [ %scevgep604, %y_in_tile.loop_body297 ]
  %lsr.iv600 = phi i32 [ %.pre-phi627, %y_in_tile.loop_body297.lr.ph ], [ %lsr.iv.next601, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.4.0510 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i484, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.0.0509 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i, %y_in_tile.loop_body297 ]
  %Arg_5.6310 = load float, ptr addrspace(1) %lsr.iv603, align 8, !invariant.load !267
  %add.30.i = fadd float %partial_reduction_result284371.sroa.0.0509, %Arg_5.6310
  %Arg_5.6316 = load float, ptr addrspace(1) %lsr.iv606, align 4, !invariant.load !267
  %add.30.i484 = fadd float %partial_reduction_result284371.sroa.4.0510, %Arg_5.6316
  %lsr.iv.next601 = add nsw i32 %lsr.iv600, 32
  %scevgep604 = getelementptr i8, ptr addrspace(1) %lsr.iv603, i64 16384
  %scevgep607 = getelementptr i8, ptr addrspace(1) %lsr.iv606, i64 16384
  %122 = icmp ugt i32 %lsr.iv.next601, 31
  br i1 %122, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_body297
  %123 = zext i32 %thread_id.x287.pre-phi to i64
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i64 0, i64 0, i64 0, i64 %123, i64 %.pre-phi629
  store float %add.30.i, ptr addrspace(3) %shmem_output_address318, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i64 0, i64 0, i64 0, i64 %.pre-phi629, i64 %123
  %partial_reduction_result322 = load float, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %124 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  %add.30.i485 = fadd float %partial_reduction_result322, %124
  %125 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i485, i32 8, i32 31)
  %add.30.i486 = fadd float %add.30.i485, %125
  %126 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i486, i32 4, i32 31)
  %add.30.i487 = fadd float %add.30.i486, %126
  %127 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i487, i32 2, i32 31)
  %add.30.i488 = fadd float %add.30.i487, %127
  %128 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i488, i32 1, i32 31)
  %add.30.i489 = fadd float %add.30.i488, %128
  store float %add.30.i489, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %129 = shl nuw nsw i32 %thread_id.y288376.pre-phi, 1
  %130 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %131 = or i32 %129, %tile_origin.2294.pre-phi
  %132 = zext i32 %131 to i64
  %output_element_address338 = getelementptr inbounds [128 x float], ptr addrspace(1) %arg10562, i64 0, i64 %132
  br i1 %130, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %133 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %shmem_output_address340578 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address318, i64 1056
  store float %add.30.i484, ptr addrspace(3) %shmem_output_address340578, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342579 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr320, i64 1056
  %partial_reduction_result344 = load float, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  %134 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  %add.30.i490 = fadd float %partial_reduction_result344, %134
  %135 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i490, i32 8, i32 31)
  %add.30.i491 = fadd float %add.30.i490, %135
  %136 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i491, i32 4, i32 31)
  %add.30.i492 = fadd float %add.30.i491, %136
  %137 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i492, i32 2, i32 31)
  %add.30.i493 = fadd float %add.30.i492, %137
  %138 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i493, i32 1, i32 31)
  %add.30.i494 = fadd float %add.30.i493, %138
  store float %add.30.i494, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  br i1 %133, label %common.ret.sink.split, label %common.ret

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  store float %add.30.i489, ptr addrspace(1) %output_element_address338, align 8
  br label %reduction_write_output-after337
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_450(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg13, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg18) local_unnamed_addr #6 {
entry:
  %arg1843 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1741 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1639 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1537 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1435 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1333 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1231 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1129 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1027 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg925 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg823 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg721 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg619 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg517 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg415 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg313 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg211 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg19 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg211, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg19, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.15 = fmul float %4, %6
  %subtract.16 = fsub float %3, %multiply.15
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg313, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg415, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.17 = fmul float %4, %10
  %subtract.18 = fsub float %8, %multiply.17
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg517, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg619, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.19 = fmul float %4, %14
  %subtract.20 = fsub float %12, %multiply.19
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg721, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg823, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.21 = fmul float %4, %18
  %subtract.22 = fsub float %16, %multiply.21
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg925, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1027, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.23 = fmul float %4, %22
  %subtract.24 = fsub float %20, %multiply.23
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1129, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1231, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.25 = fmul float %4, %26
  %subtract.26 = fsub float %24, %multiply.25
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1333, i64 %1
  store float %subtract.16, ptr addrspace(1) %27, align 4
  %28 = getelementptr inbounds float, ptr addrspace(1) %arg1435, i64 %1
  store float %subtract.18, ptr addrspace(1) %28, align 4
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1537, i64 %1
  store float %subtract.20, ptr addrspace(1) %29, align 4
  %30 = getelementptr inbounds float, ptr addrspace(1) %arg1639, i64 %1
  store float %subtract.22, ptr addrspace(1) %30, align 4
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1741, i64 %1
  store float %subtract.24, ptr addrspace(1) %31, align 4
  %32 = getelementptr inbounds float, ptr addrspace(1) %arg1843, i64 %1
  store float %subtract.26, ptr addrspace(1) %32, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_449(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg5) local_unnamed_addr #0 {
entry:
  %arg5198 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4196 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3194 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2192 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1190 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0188 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y133 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y133, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg2192, i64 %16
  %17 = lshr i32 %11, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after106, %reduction_write_output-true127
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv212 = phi i32 [ %17, %entry ], [ %lsr.iv.next213, %y_in_tile.loop_body ]
  %lsr.iv209 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep210, %y_in_tile.loop_body ]
  %lsr.iv207 = phi i32 [ %13, %entry ], [ %lsr.iv.next208, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0184 = phi i32 [ %thread_id.y133, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result2131.sroa.4.0183 = phi float [ 0.000000e+00, %entry ], [ %add.25.i159, %y_in_tile.loop_body ]
  %partial_reduction_result132.sroa.0.0182 = phi float [ -0.000000e+00, %entry ], [ %add.18.i, %y_in_tile.loop_body ]
  %partial_reduction_result132.sroa.4.0181 = phi float [ -0.000000e+00, %entry ], [ %add.18.i158, %y_in_tile.loop_body ]
  %partial_reduction_result2131.sroa.0.0180 = phi float [ 0.000000e+00, %entry ], [ %add.25.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0184, 32
  %18 = and i32 %lsr.iv, 126
  %19 = and i32 %lsr.iv212, 33554304
  %20 = or i32 %19, %y_in_tile.invar_address.0184
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_2.3 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg2192, i64 0, i64 %21, i64 %22
  %Arg_2.35 = load float, ptr addrspace(1) %Arg_2.3, align 8, !invariant.load !267
  %compare.6 = fcmp ogt float %Arg_2.35, 0.000000e+00
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1190, i64 0, i64 %21, i64 0
  %Arg_1.27 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0188, i64 0, i64 %22, i64 0
  %Arg_0.18 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %multiply.11 = fmul float %Arg_1.27, %Arg_0.18
  %23 = select i1 %compare.6, float %multiply.11, float 0.000000e+00
  %add.18.i = fadd float %partial_reduction_result132.sroa.0.0182, %23
  %multiply.20 = fmul float %Arg_2.35, %Arg_1.27
  %add.25.i = fadd float %partial_reduction_result2131.sroa.0.0180, %multiply.20
  %scevgep211 = getelementptr i8, ptr addrspace(1) %lsr.iv209, i64 -4
  %24 = load <2 x float>, ptr addrspace(1) %scevgep211, align 8, !invariant.load !267
  %Arg_2.315214 = extractelement <2 x float> %24, i32 0
  %Arg_2.343215 = extractelement <2 x float> %24, i32 1
  %compare.617 = fcmp ogt float %Arg_2.315214, 0.000000e+00
  %25 = select i1 %compare.617, float %multiply.11, float 0.000000e+00
  %26 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg4196, i64 0, i64 %21, i64 %22
  store float %25, ptr addrspace(1) %26, align 8
  %27 = add i32 %lsr.iv, 1
  %28 = and i32 %27, 127
  %29 = and i32 %lsr.iv207, 33554304
  %30 = or i32 %29, %y_in_tile.invar_address.0184
  %31 = zext i32 %30 to i64
  %32 = zext i32 %28 to i64
  %Arg_2.326 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg2192, i64 0, i64 %31, i64 %32
  %Arg_2.327 = load float, ptr addrspace(1) %Arg_2.326, align 4, !invariant.load !267
  %compare.629 = fcmp ogt float %Arg_2.327, 0.000000e+00
  %Arg_1.230 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1190, i64 0, i64 %31, i64 0
  %Arg_1.231 = load float, ptr addrspace(1) %Arg_1.230, align 4, !invariant.load !267
  %Arg_0.132 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0188, i64 0, i64 %32, i64 0
  %Arg_0.133 = load float, ptr addrspace(1) %Arg_0.132, align 4, !invariant.load !267
  %multiply.1134 = fmul float %Arg_1.231, %Arg_0.133
  %33 = select i1 %compare.629, float %multiply.1134, float 0.000000e+00
  %add.18.i158 = fadd float %partial_reduction_result132.sroa.4.0181, %33
  %multiply.2040 = fmul float %Arg_2.327, %Arg_1.231
  %add.25.i159 = fadd float %partial_reduction_result2131.sroa.4.0183, %multiply.2040
  %compare.645 = fcmp ogt float %Arg_2.343215, 0.000000e+00
  %34 = select i1 %compare.645, float %multiply.1134, float 0.000000e+00
  %35 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg4196, i64 0, i64 %31, i64 %32
  store float %34, ptr addrspace(1) %35, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 4096
  %lsr.iv.next208 = add nuw nsw i32 %lsr.iv207, 32
  %scevgep210 = getelementptr i8, ptr addrspace(1) %lsr.iv209, i64 16384
  %lsr.iv.next213 = add nuw nsw i32 %lsr.iv212, 32
  %36 = icmp ugt i32 %y_in_tile.invar_address.0184, 95
  br i1 %36, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %37 = zext i32 %thread_id.x to i64
  %38 = zext i32 %thread_id.y133 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i64 0, i64 0, i64 0, i64 %37, i64 %38
  store float %add.18.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i64 0, i64 0, i64 0, i64 %38, i64 %37
  %partial_reduction_result51 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  %add.18.i160 = fadd float %partial_reduction_result51, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i160, i32 8, i32 31)
  %add.18.i161 = fadd float %add.18.i160, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i161, i32 4, i32 31)
  %add.18.i162 = fadd float %add.18.i161, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i162, i32 2, i32 31)
  %add.18.i163 = fadd float %add.18.i162, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i163, i32 1, i32 31)
  %add.18.i164 = fadd float %add.18.i163, %43
  store float %add.18.i164, ptr addrspace(3) %shmem_transposed_addr, align 4
  %44 = shl nuw nsw i32 %thread_id.y133, 1
  %45 = icmp eq i32 %thread_id.x, 0
  %46 = zext i32 %2 to i64
  %47 = or i32 %44, %tile_origin.2
  %48 = zext i32 %47 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg3194, i64 0, i64 %46, i64 %48
  br i1 %45, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %49 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address65201 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.18.i158, ptr addrspace(3) %shmem_output_address65201, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr67202 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result69 = load float, ptr addrspace(3) %shmem_transposed_addr67202, align 4
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 16, i32 31)
  %add.18.i165 = fadd float %partial_reduction_result69, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i165, i32 8, i32 31)
  %add.18.i166 = fadd float %add.18.i165, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i166, i32 4, i32 31)
  %add.18.i167 = fadd float %add.18.i166, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i167, i32 2, i32 31)
  %add.18.i168 = fadd float %add.18.i167, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i168, i32 1, i32 31)
  %add.18.i169 = fadd float %add.18.i168, %54
  store float %add.18.i169, ptr addrspace(3) %shmem_transposed_addr67202, align 4
  br i1 %49, label %reduction_write_output-true83, label %reduction_write_output-after84

reduction_write_output-after84:                   ; preds = %reduction_write_output-true83, %reduction_write_output-after
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address87 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i64 0, i64 0, i64 0, i64 %37, i64 %38
  store float %add.25.i, ptr addrspace(3) %shmem_output_address87, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr89 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i64 0, i64 0, i64 0, i64 %38, i64 %37
  %partial_reduction_result91 = load float, ptr addrspace(3) %shmem_transposed_addr89, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 16, i32 31)
  %add.25.i170 = fadd float %partial_reduction_result91, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i170, i32 8, i32 31)
  %add.25.i171 = fadd float %add.25.i170, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i171, i32 4, i32 31)
  %add.25.i172 = fadd float %add.25.i171, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i172, i32 2, i32 31)
  %add.25.i173 = fadd float %add.25.i172, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i173, i32 1, i32 31)
  %add.25.i174 = fadd float %add.25.i173, %60
  store float %add.25.i174, ptr addrspace(3) %shmem_transposed_addr89, align 4
  %output_element_address107 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg5198, i64 0, i64 %46, i64 %48
  br i1 %55, label %reduction_write_output-true105, label %reduction_write_output-after106

reduction_write_output-after106:                  ; preds = %reduction_write_output-true105, %reduction_write_output-after84
  %61 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address109203 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address87, i64 1056
  store float %add.25.i159, ptr addrspace(3) %shmem_output_address109203, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr111204 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr89, i64 1056
  %partial_reduction_result113 = load float, ptr addrspace(3) %shmem_transposed_addr111204, align 4
  %62 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 16, i32 31)
  %add.25.i175 = fadd float %partial_reduction_result113, %62
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i175, i32 8, i32 31)
  %add.25.i176 = fadd float %add.25.i175, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i176, i32 4, i32 31)
  %add.25.i177 = fadd float %add.25.i176, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i177, i32 2, i32 31)
  %add.25.i178 = fadd float %add.25.i177, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i178, i32 1, i32 31)
  %add.25.i179 = fadd float %add.25.i178, %66
  store float %add.25.i179, ptr addrspace(3) %shmem_transposed_addr111204, align 4
  br i1 %61, label %reduction_write_output-true127, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.18.i164, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true83:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.18.i169, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after84

reduction_write_output-true105:                   ; preds = %reduction_write_output-after84
  store float %add.25.i174, ptr addrspace(1) %output_element_address107, align 8
  br label %reduction_write_output-after106

reduction_write_output-true127:                   ; preds = %reduction_write_output-after106
  %sunkaddr216 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address107, i64 4
  store float %add.25.i179, ptr addrspace(1) %sunkaddr216, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_319(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6) local_unnamed_addr #0 {
entry:
  %arg6210 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5208 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4206 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3204 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2202 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1200 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0198 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y143 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y143, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = lshr i32 %11, 7
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg3204, i64 %17
  %scevgep225 = getelementptr i8, ptr addrspace(1) %arg0198, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after116, %reduction_write_output-true137
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv226 = phi ptr addrspace(1) [ %scevgep225, %entry ], [ %scevgep227, %y_in_tile.loop_body ]
  %lsr.iv222 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep223, %y_in_tile.loop_body ]
  %lsr.iv220 = phi i32 [ %8, %entry ], [ %lsr.iv.next221, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result2141.sroa.4.0193 = phi float [ 0.000000e+00, %entry ], [ %add.27.i169, %y_in_tile.loop_body ]
  %partial_reduction_result142.sroa.0.0192 = phi float [ -0.000000e+00, %entry ], [ %add.20.i, %y_in_tile.loop_body ]
  %partial_reduction_result142.sroa.4.0191 = phi float [ -0.000000e+00, %entry ], [ %add.20.i168, %y_in_tile.loop_body ]
  %partial_reduction_result2141.sroa.0.0190 = phi float [ 0.000000e+00, %entry ], [ %add.27.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y143, %lsr.iv
  %19 = and i32 %lsr.iv220, 126
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 33554304
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3204, i64 0, i64 %23, i64 %24
  %Arg_3.45 = load float, ptr addrspace(1) %Arg_3.4, align 8, !invariant.load !267
  %compare.7 = fcmp ogt float %Arg_3.45, 0.000000e+00
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2202, i64 0, i64 %23, i64 0
  %Arg_2.37 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg1200, i64 0, i64 %24, i64 0
  %Arg_1.28 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %multiply.12 = fmul float %Arg_2.37, %Arg_1.28
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg0198, i64 0, i64 %23, i64 %24
  %Arg_0.19 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %add.13 = fadd float %multiply.12, %Arg_0.19
  %25 = select i1 %compare.7, float %add.13, float 0.000000e+00
  %add.20.i = fadd float %partial_reduction_result142.sroa.0.0192, %25
  %multiply.22 = fmul float %Arg_3.45, %Arg_2.37
  %add.27.i = fadd float %partial_reduction_result2141.sroa.0.0190, %multiply.22
  %scevgep224 = getelementptr i8, ptr addrspace(1) %lsr.iv222, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep224, align 8, !invariant.load !267
  %Arg_3.416229 = extractelement <2 x float> %26, i32 0
  %Arg_3.450230 = extractelement <2 x float> %26, i32 1
  %compare.718 = fcmp ogt float %Arg_3.416229, 0.000000e+00
  %scevgep228 = getelementptr i8, ptr addrspace(1) %lsr.iv226, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep228, align 8, !invariant.load !267
  %Arg_0.125231 = extractelement <2 x float> %27, i32 0
  %Arg_0.159232 = extractelement <2 x float> %27, i32 1
  %add.1326 = fadd float %multiply.12, %Arg_0.125231
  %28 = select i1 %compare.718, float %add.1326, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5208, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv220, 1
  %31 = and i32 %30, 127
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 33554304
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_3.430 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3204, i64 0, i64 %35, i64 %36
  %Arg_3.431 = load float, ptr addrspace(1) %Arg_3.430, align 4, !invariant.load !267
  %compare.733 = fcmp ogt float %Arg_3.431, 0.000000e+00
  %Arg_2.334 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2202, i64 0, i64 %35, i64 0
  %Arg_2.335 = load float, ptr addrspace(1) %Arg_2.334, align 4, !invariant.load !267
  %Arg_1.236 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg1200, i64 0, i64 %36, i64 0
  %Arg_1.237 = load float, ptr addrspace(1) %Arg_1.236, align 4, !invariant.load !267
  %multiply.1238 = fmul float %Arg_2.335, %Arg_1.237
  %Arg_0.139 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg0198, i64 0, i64 %35, i64 %36
  %Arg_0.140 = load float, ptr addrspace(1) %Arg_0.139, align 4, !invariant.load !267
  %add.1341 = fadd float %multiply.1238, %Arg_0.140
  %37 = select i1 %compare.733, float %add.1341, float 0.000000e+00
  %add.20.i168 = fadd float %partial_reduction_result142.sroa.4.0191, %37
  %multiply.2247 = fmul float %Arg_3.431, %Arg_2.335
  %add.27.i169 = fadd float %partial_reduction_result2141.sroa.4.0193, %multiply.2247
  %compare.752 = fcmp ogt float %Arg_3.450230, 0.000000e+00
  %add.1360 = fadd float %multiply.1238, %Arg_0.159232
  %38 = select i1 %compare.752, float %add.1360, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5208, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y143, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next221 = add nuw nsw i32 %lsr.iv220, 4096
  %scevgep223 = getelementptr i8, ptr addrspace(1) %lsr.iv222, i64 16384
  %scevgep227 = getelementptr i8, ptr addrspace(1) %lsr.iv226, i64 16384
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y143 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.20.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result61 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  %add.20.i170 = fadd float %partial_reduction_result61, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i170, i32 8, i32 31)
  %add.20.i171 = fadd float %add.20.i170, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i171, i32 4, i32 31)
  %add.20.i172 = fadd float %add.20.i171, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i172, i32 2, i32 31)
  %add.20.i173 = fadd float %add.20.i172, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i173, i32 1, i32 31)
  %add.20.i174 = fadd float %add.20.i173, %49
  store float %add.20.i174, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y143, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg4206, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address75214 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.20.i168, ptr addrspace(3) %shmem_output_address75214, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr77215 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result79 = load float, ptr addrspace(3) %shmem_transposed_addr77215, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 16, i32 31)
  %add.20.i175 = fadd float %partial_reduction_result79, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i175, i32 8, i32 31)
  %add.20.i176 = fadd float %add.20.i175, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i176, i32 4, i32 31)
  %add.20.i177 = fadd float %add.20.i176, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i177, i32 2, i32 31)
  %add.20.i178 = fadd float %add.20.i177, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i178, i32 1, i32 31)
  %add.20.i179 = fadd float %add.20.i178, %60
  store float %add.20.i179, ptr addrspace(3) %shmem_transposed_addr77215, align 4
  br i1 %55, label %reduction_write_output-true93, label %reduction_write_output-after94

reduction_write_output-after94:                   ; preds = %reduction_write_output-true93, %reduction_write_output-after
  %61 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address97 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.27.i, ptr addrspace(3) %shmem_output_address97, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr99 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result101 = load float, ptr addrspace(3) %shmem_transposed_addr99, align 4
  %62 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result101, i32 16, i32 31)
  %add.27.i180 = fadd float %partial_reduction_result101, %62
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i180, i32 8, i32 31)
  %add.27.i181 = fadd float %add.27.i180, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i181, i32 4, i32 31)
  %add.27.i182 = fadd float %add.27.i181, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i182, i32 2, i32 31)
  %add.27.i183 = fadd float %add.27.i182, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i183, i32 1, i32 31)
  %add.27.i184 = fadd float %add.27.i183, %66
  store float %add.27.i184, ptr addrspace(3) %shmem_transposed_addr99, align 4
  %output_element_address117 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg6210, i64 0, i64 %52, i64 %54
  br i1 %61, label %reduction_write_output-true115, label %reduction_write_output-after116

reduction_write_output-after116:                  ; preds = %reduction_write_output-true115, %reduction_write_output-after94
  %67 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address119216 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address97, i64 1056
  store float %add.27.i169, ptr addrspace(3) %shmem_output_address119216, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr121217 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr99, i64 1056
  %partial_reduction_result123 = load float, ptr addrspace(3) %shmem_transposed_addr121217, align 4
  %68 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result123, i32 16, i32 31)
  %add.27.i185 = fadd float %partial_reduction_result123, %68
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i185, i32 8, i32 31)
  %add.27.i186 = fadd float %add.27.i185, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i186, i32 4, i32 31)
  %add.27.i187 = fadd float %add.27.i186, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i187, i32 2, i32 31)
  %add.27.i188 = fadd float %add.27.i187, %71
  %72 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i188, i32 1, i32 31)
  %add.27.i189 = fadd float %add.27.i188, %72
  store float %add.27.i189, ptr addrspace(3) %shmem_transposed_addr121217, align 4
  br i1 %67, label %reduction_write_output-true137, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.20.i174, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true93:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.20.i179, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after94

reduction_write_output-true115:                   ; preds = %reduction_write_output-after94
  store float %add.27.i184, ptr addrspace(1) %output_element_address117, align 8
  br label %reduction_write_output-after116

reduction_write_output-true137:                   ; preds = %reduction_write_output-after116
  %sunkaddr233 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address117, i64 4
  store float %add.27.i189, ptr addrspace(1) %sunkaddr233, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_317(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6) local_unnamed_addr #0 {
entry:
  %arg6210 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5208 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4206 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3204 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2202 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1200 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0198 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y143 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y143, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = lshr i32 %11, 7
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg3204, i64 %17
  %scevgep225 = getelementptr i8, ptr addrspace(1) %arg0198, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after116, %reduction_write_output-true137
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv226 = phi ptr addrspace(1) [ %scevgep225, %entry ], [ %scevgep227, %y_in_tile.loop_body ]
  %lsr.iv222 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep223, %y_in_tile.loop_body ]
  %lsr.iv220 = phi i32 [ %8, %entry ], [ %lsr.iv.next221, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result2141.sroa.4.0193 = phi float [ 0.000000e+00, %entry ], [ %add.27.i169, %y_in_tile.loop_body ]
  %partial_reduction_result142.sroa.0.0192 = phi float [ -0.000000e+00, %entry ], [ %add.20.i, %y_in_tile.loop_body ]
  %partial_reduction_result142.sroa.4.0191 = phi float [ -0.000000e+00, %entry ], [ %add.20.i168, %y_in_tile.loop_body ]
  %partial_reduction_result2141.sroa.0.0190 = phi float [ 0.000000e+00, %entry ], [ %add.27.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y143, %lsr.iv
  %19 = and i32 %lsr.iv220, 126
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 33554304
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3204, i64 0, i64 %23, i64 %24
  %Arg_3.45 = load float, ptr addrspace(1) %Arg_3.4, align 8, !invariant.load !267
  %compare.7 = fcmp ogt float %Arg_3.45, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg0198, i64 0, i64 %23, i64 %24
  %Arg_0.17 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2202, i64 0, i64 %23, i64 0
  %Arg_2.38 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg1200, i64 0, i64 %24, i64 0
  %Arg_1.29 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %multiply.12 = fmul float %Arg_2.38, %Arg_1.29
  %add.13 = fadd float %Arg_0.17, %multiply.12
  %25 = select i1 %compare.7, float %add.13, float 0.000000e+00
  %add.20.i = fadd float %partial_reduction_result142.sroa.0.0192, %25
  %multiply.22 = fmul float %Arg_3.45, %Arg_2.38
  %add.27.i = fadd float %partial_reduction_result2141.sroa.0.0190, %multiply.22
  %scevgep224 = getelementptr i8, ptr addrspace(1) %lsr.iv222, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep224, align 8, !invariant.load !267
  %Arg_3.416229 = extractelement <2 x float> %26, i32 0
  %Arg_3.450230 = extractelement <2 x float> %26, i32 1
  %compare.718 = fcmp ogt float %Arg_3.416229, 0.000000e+00
  %scevgep228 = getelementptr i8, ptr addrspace(1) %lsr.iv226, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep228, align 8, !invariant.load !267
  %Arg_0.120231 = extractelement <2 x float> %27, i32 0
  %Arg_0.154232 = extractelement <2 x float> %27, i32 1
  %add.1326 = fadd float %multiply.12, %Arg_0.120231
  %28 = select i1 %compare.718, float %add.1326, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5208, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv220, 1
  %31 = and i32 %30, 127
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 33554304
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_3.430 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg3204, i64 0, i64 %35, i64 %36
  %Arg_3.431 = load float, ptr addrspace(1) %Arg_3.430, align 4, !invariant.load !267
  %compare.733 = fcmp ogt float %Arg_3.431, 0.000000e+00
  %Arg_0.134 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg0198, i64 0, i64 %35, i64 %36
  %Arg_0.135 = load float, ptr addrspace(1) %Arg_0.134, align 4, !invariant.load !267
  %Arg_2.336 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2202, i64 0, i64 %35, i64 0
  %Arg_2.337 = load float, ptr addrspace(1) %Arg_2.336, align 4, !invariant.load !267
  %Arg_1.238 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg1200, i64 0, i64 %36, i64 0
  %Arg_1.239 = load float, ptr addrspace(1) %Arg_1.238, align 4, !invariant.load !267
  %multiply.1240 = fmul float %Arg_2.337, %Arg_1.239
  %add.1341 = fadd float %Arg_0.135, %multiply.1240
  %37 = select i1 %compare.733, float %add.1341, float 0.000000e+00
  %add.20.i168 = fadd float %partial_reduction_result142.sroa.4.0191, %37
  %multiply.2247 = fmul float %Arg_3.431, %Arg_2.337
  %add.27.i169 = fadd float %partial_reduction_result2141.sroa.4.0193, %multiply.2247
  %compare.752 = fcmp ogt float %Arg_3.450230, 0.000000e+00
  %add.1360 = fadd float %multiply.1240, %Arg_0.154232
  %38 = select i1 %compare.752, float %add.1360, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg5208, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y143, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next221 = add nuw nsw i32 %lsr.iv220, 4096
  %scevgep223 = getelementptr i8, ptr addrspace(1) %lsr.iv222, i64 16384
  %scevgep227 = getelementptr i8, ptr addrspace(1) %lsr.iv226, i64 16384
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y143 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.20.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result61 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  %add.20.i170 = fadd float %partial_reduction_result61, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i170, i32 8, i32 31)
  %add.20.i171 = fadd float %add.20.i170, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i171, i32 4, i32 31)
  %add.20.i172 = fadd float %add.20.i171, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i172, i32 2, i32 31)
  %add.20.i173 = fadd float %add.20.i172, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i173, i32 1, i32 31)
  %add.20.i174 = fadd float %add.20.i173, %49
  store float %add.20.i174, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y143, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg4206, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address75214 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.20.i168, ptr addrspace(3) %shmem_output_address75214, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr77215 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result79 = load float, ptr addrspace(3) %shmem_transposed_addr77215, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 16, i32 31)
  %add.20.i175 = fadd float %partial_reduction_result79, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i175, i32 8, i32 31)
  %add.20.i176 = fadd float %add.20.i175, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i176, i32 4, i32 31)
  %add.20.i177 = fadd float %add.20.i176, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i177, i32 2, i32 31)
  %add.20.i178 = fadd float %add.20.i177, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i178, i32 1, i32 31)
  %add.20.i179 = fadd float %add.20.i178, %60
  store float %add.20.i179, ptr addrspace(3) %shmem_transposed_addr77215, align 4
  br i1 %55, label %reduction_write_output-true93, label %reduction_write_output-after94

reduction_write_output-after94:                   ; preds = %reduction_write_output-true93, %reduction_write_output-after
  %61 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address97 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.27.i, ptr addrspace(3) %shmem_output_address97, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr99 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result101 = load float, ptr addrspace(3) %shmem_transposed_addr99, align 4
  %62 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result101, i32 16, i32 31)
  %add.27.i180 = fadd float %partial_reduction_result101, %62
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i180, i32 8, i32 31)
  %add.27.i181 = fadd float %add.27.i180, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i181, i32 4, i32 31)
  %add.27.i182 = fadd float %add.27.i181, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i182, i32 2, i32 31)
  %add.27.i183 = fadd float %add.27.i182, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i183, i32 1, i32 31)
  %add.27.i184 = fadd float %add.27.i183, %66
  store float %add.27.i184, ptr addrspace(3) %shmem_transposed_addr99, align 4
  %output_element_address117 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg6210, i64 0, i64 %52, i64 %54
  br i1 %61, label %reduction_write_output-true115, label %reduction_write_output-after116

reduction_write_output-after116:                  ; preds = %reduction_write_output-true115, %reduction_write_output-after94
  %67 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address119216 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address97, i64 1056
  store float %add.27.i169, ptr addrspace(3) %shmem_output_address119216, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr121217 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr99, i64 1056
  %partial_reduction_result123 = load float, ptr addrspace(3) %shmem_transposed_addr121217, align 4
  %68 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result123, i32 16, i32 31)
  %add.27.i185 = fadd float %partial_reduction_result123, %68
  %69 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i185, i32 8, i32 31)
  %add.27.i186 = fadd float %add.27.i185, %69
  %70 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i186, i32 4, i32 31)
  %add.27.i187 = fadd float %add.27.i186, %70
  %71 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i187, i32 2, i32 31)
  %add.27.i188 = fadd float %add.27.i187, %71
  %72 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i188, i32 1, i32 31)
  %add.27.i189 = fadd float %add.27.i188, %72
  store float %add.27.i189, ptr addrspace(3) %shmem_transposed_addr121217, align 4
  br i1 %67, label %reduction_write_output-true137, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.20.i174, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true93:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.20.i179, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after94

reduction_write_output-true115:                   ; preds = %reduction_write_output-after94
  store float %add.27.i184, ptr addrspace(1) %output_element_address117, align 8
  br label %reduction_write_output-after116

reduction_write_output-true137:                   ; preds = %reduction_write_output-after116
  %sunkaddr233 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address117, i64 4
  store float %add.27.i189, ptr addrspace(1) %sunkaddr233, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_445(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg10) local_unnamed_addr #0 {
entry:
  %arg10190 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9188 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8186 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7184 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6182 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5180 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4178 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3176 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2174 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1172 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0170 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y134 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 96
  %4 = shl nuw nsw i32 %2, 14
  %5 = or i32 %tile_origin.2, %thread_id.x
  %6 = zext i32 %5 to i64
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg3176, i64 0, i64 %6, i64 0
  %Arg_3.414 = load float, ptr addrspace(1) %Arg_3.4, align 4, !invariant.load !267
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0170, i64 0, i64 %6, i64 0
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.1, align 4, !invariant.load !267
  %7 = shl nuw nsw i32 %thread_id.y134, 7
  %8 = add i32 %4, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg6182, i64 %12
  %scevgep193 = getelementptr i8, ptr addrspace(1) %arg8186, i64 %12
  %13 = lshr i32 %10, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after109, %reduction_write_output-true130
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv196 = phi i32 [ %13, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv194 = phi ptr addrspace(1) [ %scevgep193, %entry ], [ %scevgep195, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep192, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0167 = phi i32 [ %thread_id.y134, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result4.0166 = phi float [ 0.000000e+00, %entry ], [ %add.50.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0165 = phi float [ -0.000000e+00, %entry ], [ %add.36.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0164 = phi float [ 0.000000e+00, %entry ], [ %add.43.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0167, 32
  %14 = and i32 %lsr.iv196, 33554304
  %15 = or i32 %14, %y_in_tile.invar_address.0167
  %Arg_6.78 = load float, ptr addrspace(1) %lsr.iv, align 4, !invariant.load !267
  %compare.10 = fcmp ogt float %Arg_6.78, 0.000000e+00
  %16 = zext i32 %15 to i64
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg5180, i64 0, i64 %16, i64 0
  %Arg_5.610 = load float, ptr addrspace(1) %Arg_5.6, align 4, !invariant.load !267
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg4178, i64 0, i64 %16, i64 0
  %Arg_4.511 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %multiply.11 = fmul float %Arg_5.610, %Arg_4.511
  %subtract.14 = fsub float 1.000000e+00, %Arg_4.511
  %multiply.15 = fmul float %multiply.11, %subtract.14
  %multiply.20 = fmul float %Arg_3.414, %multiply.15
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2174, i64 0, i64 %16, i64 0
  %Arg_2.315 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1172, i64 0, i64 %16, i64 0
  %Arg_1.216 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.21 = fmul float %Arg_2.315, %Arg_1.216
  %subtract.22 = fsub float 1.000000e+00, %Arg_1.216
  %multiply.23 = fmul float %multiply.21, %subtract.22
  %multiply.28 = fmul float %Arg_0.119, %multiply.23
  %add.29 = fadd float %multiply.20, %multiply.28
  %17 = select i1 %compare.10, float %add.29, float 0.000000e+00
  %add.36.i = fadd float %partial_reduction_result.0165, %17
  %multiply.38 = fmul float %Arg_6.78, %multiply.15
  %add.43.i = fadd float %partial_reduction_result2.0164, %multiply.38
  %multiply.45 = fmul float %Arg_6.78, %multiply.23
  %add.50.i = fadd float %partial_reduction_result4.0166, %multiply.45
  store float %17, ptr addrspace(1) %lsr.iv194, align 4
  %scevgep192 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 16384
  %scevgep195 = getelementptr i8, ptr addrspace(1) %lsr.iv194, i64 16384
  %lsr.iv.next = add nuw nsw i32 %lsr.iv196, 32
  %18 = icmp ugt i32 %y_in_tile.invar_address.0167, 95
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %19 = zext i32 %thread_id.x to i64
  %20 = zext i32 %thread_id.y134 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.36.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result76 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 16, i32 31)
  %add.36.i149 = fadd float %partial_reduction_result76, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i149, i32 8, i32 31)
  %add.36.i150 = fadd float %add.36.i149, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i150, i32 4, i32 31)
  %add.36.i151 = fadd float %add.36.i150, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i151, i32 2, i32 31)
  %add.36.i152 = fadd float %add.36.i151, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i152, i32 1, i32 31)
  %add.36.i153 = fadd float %add.36.i152, %25
  store float %add.36.i153, ptr addrspace(3) %shmem_transposed_addr, align 4
  %26 = icmp eq i32 %thread_id.x, 0
  %27 = zext i32 %2 to i64
  %28 = or i32 %tile_origin.2, %thread_id.y134
  %29 = zext i32 %28 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg7184, i64 0, i64 %27, i64 %29
  br i1 %26, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %30 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address90 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.43.i, ptr addrspace(3) %shmem_output_address90, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr92 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result94 = load float, ptr addrspace(3) %shmem_transposed_addr92, align 4
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  %add.43.i154 = fadd float %partial_reduction_result94, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.43.i154, i32 8, i32 31)
  %add.43.i155 = fadd float %add.43.i154, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.43.i155, i32 4, i32 31)
  %add.43.i156 = fadd float %add.43.i155, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.43.i156, i32 2, i32 31)
  %add.43.i157 = fadd float %add.43.i156, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.43.i157, i32 1, i32 31)
  %add.43.i158 = fadd float %add.43.i157, %35
  store float %add.43.i158, ptr addrspace(3) %shmem_transposed_addr92, align 4
  %output_element_address110 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg9188, i64 0, i64 %27, i64 %29
  br i1 %30, label %reduction_write_output-true108, label %reduction_write_output-after109

reduction_write_output-after109:                  ; preds = %reduction_write_output-true108, %reduction_write_output-after
  %36 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address112 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.50.i, ptr addrspace(3) %shmem_output_address112, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr114 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result116 = load float, ptr addrspace(3) %shmem_transposed_addr114, align 4
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 16, i32 31)
  %add.50.i159 = fadd float %partial_reduction_result116, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i159, i32 8, i32 31)
  %add.50.i160 = fadd float %add.50.i159, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i160, i32 4, i32 31)
  %add.50.i161 = fadd float %add.50.i160, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i161, i32 2, i32 31)
  %add.50.i162 = fadd float %add.50.i161, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.50.i162, i32 1, i32 31)
  %add.50.i163 = fadd float %add.50.i162, %41
  store float %add.50.i163, ptr addrspace(3) %shmem_transposed_addr114, align 4
  %output_element_address132 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg10190, i64 0, i64 %27, i64 %29
  br i1 %36, label %reduction_write_output-true130, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.36.i153, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true108:                   ; preds = %reduction_write_output-after
  store float %add.43.i158, ptr addrspace(1) %output_element_address110, align 4
  br label %reduction_write_output-after109

reduction_write_output-true130:                   ; preds = %reduction_write_output-after109
  store float %add.50.i163, ptr addrspace(1) %output_element_address132, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_321(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg9) local_unnamed_addr #0 {
entry:
  %arg9155 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8153 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7151 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6149 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5147 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4145 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3143 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2141 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1139 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0137 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y101 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 96
  %4 = shl nuw nsw i32 %2, 14
  %5 = or i32 %tile_origin.2, %thread_id.x
  %6 = zext i32 %5 to i64
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg3143, i64 0, i64 %6, i64 0
  %Arg_3.411 = load float, ptr addrspace(1) %Arg_3.4, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg1139, i64 0, i64 %6, i64 0
  %Arg_1.213 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %7 = shl nuw nsw i32 %thread_id.y101, 7
  %8 = add i32 %4, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg5147, i64 %12
  %scevgep158 = getelementptr i8, ptr addrspace(1) %arg0137, i64 %12
  %scevgep161 = getelementptr i8, ptr addrspace(1) %arg7151, i64 %12
  %13 = lshr i32 %10, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after76, %reduction_write_output-true97
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv164 = phi i32 [ %13, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv162 = phi ptr addrspace(1) [ %scevgep161, %entry ], [ %scevgep163, %y_in_tile.loop_body ]
  %lsr.iv159 = phi ptr addrspace(1) [ %scevgep158, %entry ], [ %scevgep160, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep157, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0134 = phi i32 [ %thread_id.y101, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result4.0133 = phi float [ 0.000000e+00, %entry ], [ %add.42.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0132 = phi float [ -0.000000e+00, %entry ], [ %add.28.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0131 = phi float [ 0.000000e+00, %entry ], [ %add.35.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0134, 32
  %14 = and i32 %lsr.iv164, 33554304
  %15 = or i32 %14, %y_in_tile.invar_address.0134
  %Arg_5.68 = load float, ptr addrspace(1) %lsr.iv, align 4, !invariant.load !267
  %compare.9 = fcmp ogt float %Arg_5.68, 0.000000e+00
  %16 = zext i32 %15 to i64
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg4145, i64 0, i64 %16, i64 0
  %Arg_4.510 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %multiply.14 = fmul float %Arg_4.510, %Arg_3.411
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2141, i64 0, i64 %16, i64 0
  %Arg_2.312 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %multiply.19 = fmul float %Arg_2.312, %Arg_1.213
  %add.20 = fadd float %multiply.14, %multiply.19
  %Arg_0.114 = load float, ptr addrspace(1) %lsr.iv159, align 4, !invariant.load !267
  %add.21 = fadd float %Arg_0.114, %add.20
  %17 = select i1 %compare.9, float %add.21, float 0.000000e+00
  %add.28.i = fadd float %partial_reduction_result.0132, %17
  %multiply.30 = fmul float %Arg_5.68, %Arg_2.312
  %add.35.i = fadd float %partial_reduction_result2.0131, %multiply.30
  %multiply.37 = fmul float %Arg_5.68, %Arg_4.510
  %add.42.i = fadd float %partial_reduction_result4.0133, %multiply.37
  store float %17, ptr addrspace(1) %lsr.iv162, align 4
  %scevgep157 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 16384
  %scevgep160 = getelementptr i8, ptr addrspace(1) %lsr.iv159, i64 16384
  %scevgep163 = getelementptr i8, ptr addrspace(1) %lsr.iv162, i64 16384
  %lsr.iv.next = add nuw nsw i32 %lsr.iv164, 32
  %18 = icmp ugt i32 %y_in_tile.invar_address.0134, 95
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %19 = zext i32 %thread_id.x to i64
  %20 = zext i32 %thread_id.y101 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.28.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result43 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result43, i32 16, i32 31)
  %add.28.i116 = fadd float %partial_reduction_result43, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i116, i32 8, i32 31)
  %add.28.i117 = fadd float %add.28.i116, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i117, i32 4, i32 31)
  %add.28.i118 = fadd float %add.28.i117, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i118, i32 2, i32 31)
  %add.28.i119 = fadd float %add.28.i118, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i119, i32 1, i32 31)
  %add.28.i120 = fadd float %add.28.i119, %25
  store float %add.28.i120, ptr addrspace(3) %shmem_transposed_addr, align 4
  %26 = icmp eq i32 %thread_id.x, 0
  %27 = zext i32 %2 to i64
  %28 = or i32 %tile_origin.2, %thread_id.y101
  %29 = zext i32 %28 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg6149, i64 0, i64 %27, i64 %29
  br i1 %26, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %30 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address57 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.35.i, ptr addrspace(3) %shmem_output_address57, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr59 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result61 = load float, ptr addrspace(3) %shmem_transposed_addr59, align 4
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  %add.35.i121 = fadd float %partial_reduction_result61, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.35.i121, i32 8, i32 31)
  %add.35.i122 = fadd float %add.35.i121, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.35.i122, i32 4, i32 31)
  %add.35.i123 = fadd float %add.35.i122, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.35.i123, i32 2, i32 31)
  %add.35.i124 = fadd float %add.35.i123, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.35.i124, i32 1, i32 31)
  %add.35.i125 = fadd float %add.35.i124, %35
  store float %add.35.i125, ptr addrspace(3) %shmem_transposed_addr59, align 4
  %output_element_address77 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg8153, i64 0, i64 %27, i64 %29
  br i1 %30, label %reduction_write_output-true75, label %reduction_write_output-after76

reduction_write_output-after76:                   ; preds = %reduction_write_output-true75, %reduction_write_output-after
  %36 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address79 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.42.i, ptr addrspace(3) %shmem_output_address79, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr81 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result83 = load float, ptr addrspace(3) %shmem_transposed_addr81, align 4
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result83, i32 16, i32 31)
  %add.42.i126 = fadd float %partial_reduction_result83, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.42.i126, i32 8, i32 31)
  %add.42.i127 = fadd float %add.42.i126, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.42.i127, i32 4, i32 31)
  %add.42.i128 = fadd float %add.42.i127, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.42.i128, i32 2, i32 31)
  %add.42.i129 = fadd float %add.42.i128, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.42.i129, i32 1, i32 31)
  %add.42.i130 = fadd float %add.42.i129, %41
  store float %add.42.i130, ptr addrspace(3) %shmem_transposed_addr81, align 4
  %output_element_address99 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg9155, i64 0, i64 %27, i64 %29
  br i1 %36, label %reduction_write_output-true97, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.28.i120, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true75:                    ; preds = %reduction_write_output-after
  store float %add.35.i125, ptr addrspace(1) %output_element_address77, align 4
  br label %reduction_write_output-after76

reduction_write_output-true97:                    ; preds = %reduction_write_output-after76
  store float %add.42.i130, ptr addrspace(1) %output_element_address99, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_309(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg17, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg19, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg23, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg24, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg25, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg26, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg27) local_unnamed_addr #0 {
entry:
  %arg27408 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg26406 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg25404 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg24402 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg23400 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg22398 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg21396 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg20394 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg19392 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg18390 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg17388 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg16386 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg15384 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14382 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13380 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12378 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11376 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10374 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9372 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8370 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7368 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6366 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5364 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4362 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3360 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2358 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1356 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0354 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y294 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 96
  %4 = shl nuw nsw i32 %2, 14
  %5 = or i32 %tile_origin.2, %thread_id.x
  %6 = zext i32 %5 to i64
  %Arg_18.19 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg18390, i64 0, i64 %6, i64 0
  %Arg_18.1920 = load float, ptr addrspace(1) %Arg_18.19, align 4, !invariant.load !267
  %Arg_16.17 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg16386, i64 0, i64 %6, i64 0
  %Arg_16.1722 = load float, ptr addrspace(1) %Arg_16.17, align 4, !invariant.load !267
  %Arg_12.13 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg12378, i64 0, i64 %6, i64 0
  %Arg_12.1328 = load float, ptr addrspace(1) %Arg_12.13, align 4, !invariant.load !267
  %Arg_9.10 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg9372, i64 0, i64 %6, i64 0
  %Arg_9.1033 = load float, ptr addrspace(1) %Arg_9.10, align 4, !invariant.load !267
  %Arg_6.7 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg6366, i64 0, i64 %6, i64 0
  %Arg_6.738 = load float, ptr addrspace(1) %Arg_6.7, align 4, !invariant.load !267
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg3360, i64 0, i64 %6, i64 0
  %Arg_3.443 = load float, ptr addrspace(1) %Arg_3.4, align 4, !invariant.load !267
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg0354, i64 0, i64 %6, i64 0
  %Arg_0.148 = load float, ptr addrspace(1) %Arg_0.1, align 4, !invariant.load !267
  %7 = shl nuw nsw i32 %thread_id.y294, 7
  %8 = add i32 %4, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg21396, i64 %12
  %scevgep411 = getelementptr i8, ptr addrspace(1) %arg15384, i64 %12
  %scevgep414 = getelementptr i8, ptr addrspace(1) %arg23400, i64 %12
  %13 = lshr i32 %10, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after269, %reduction_write_output-true290
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv417 = phi i32 [ %13, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv415 = phi ptr addrspace(1) [ %scevgep414, %entry ], [ %scevgep416, %y_in_tile.loop_body ]
  %lsr.iv412 = phi ptr addrspace(1) [ %scevgep411, %entry ], [ %scevgep413, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep410, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0349 = phi i32 [ %thread_id.y294, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result10.0348 = phi float [ 0.000000e+00, %entry ], [ %add.122.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0347 = phi float [ -0.000000e+00, %entry ], [ %add.94.i, %y_in_tile.loop_body ]
  %partial_reduction_result7.0346 = phi float [ 0.000000e+00, %entry ], [ %add.115.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0345 = phi float [ 0.000000e+00, %entry ], [ %add.101.i, %y_in_tile.loop_body ]
  %partial_reduction_result4.0344 = phi float [ 0.000000e+00, %entry ], [ %add.108.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0349, 32
  %14 = and i32 %lsr.iv417, 33554304
  %15 = or i32 %14, %y_in_tile.invar_address.0349
  %Arg_21.2214 = load float, ptr addrspace(1) %lsr.iv, align 4, !invariant.load !267
  %compare.25 = fcmp ogt float %Arg_21.2214, 0.000000e+00
  %16 = zext i32 %15 to i64
  %Arg_20.21 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg20394, i64 0, i64 %16, i64 0
  %Arg_20.2116 = load float, ptr addrspace(1) %Arg_20.21, align 4, !invariant.load !267
  %Arg_19.20 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg19392, i64 0, i64 %16, i64 0
  %Arg_19.2017 = load float, ptr addrspace(1) %Arg_19.20, align 4, !invariant.load !267
  %multiply.26 = fmul float %Arg_20.2116, %Arg_19.2017
  %subtract.29 = fsub float 1.000000e+00, %Arg_19.2017
  %multiply.30 = fmul float %multiply.26, %subtract.29
  %multiply.35 = fmul float %Arg_18.1920, %multiply.30
  %Arg_17.18 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg17388, i64 0, i64 %16, i64 0
  %Arg_17.1821 = load float, ptr addrspace(1) %Arg_17.18, align 4, !invariant.load !267
  %multiply.40 = fmul float %Arg_17.1821, %Arg_16.1722
  %add.41 = fadd float %multiply.35, %multiply.40
  %Arg_15.1623 = load float, ptr addrspace(1) %lsr.iv412, align 4, !invariant.load !267
  %add.42 = fadd float %Arg_15.1623, %add.41
  %Arg_14.15 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg14382, i64 0, i64 %16, i64 0
  %Arg_14.1524 = load float, ptr addrspace(1) %Arg_14.15, align 4, !invariant.load !267
  %Arg_13.14 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg13380, i64 0, i64 %16, i64 0
  %Arg_13.1425 = load float, ptr addrspace(1) %Arg_13.14, align 4, !invariant.load !267
  %multiply.43 = fmul float %Arg_14.1524, %Arg_13.1425
  %subtract.44 = fsub float 1.000000e+00, %Arg_13.1425
  %multiply.45 = fmul float %multiply.43, %subtract.44
  %multiply.50 = fmul float %Arg_12.1328, %multiply.45
  %add.51 = fadd float %add.42, %multiply.50
  %Arg_11.12 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg11376, i64 0, i64 %16, i64 0
  %Arg_11.1229 = load float, ptr addrspace(1) %Arg_11.12, align 4, !invariant.load !267
  %Arg_10.11 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg10374, i64 0, i64 %16, i64 0
  %Arg_10.1130 = load float, ptr addrspace(1) %Arg_10.11, align 4, !invariant.load !267
  %multiply.52 = fmul float %Arg_11.1229, %Arg_10.1130
  %subtract.53 = fsub float 1.000000e+00, %Arg_10.1130
  %multiply.54 = fmul float %multiply.52, %subtract.53
  %multiply.59 = fmul float %Arg_9.1033, %multiply.54
  %add.60 = fadd float %add.51, %multiply.59
  %Arg_8.9 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg8370, i64 0, i64 %16, i64 0
  %Arg_8.934 = load float, ptr addrspace(1) %Arg_8.9, align 4, !invariant.load !267
  %Arg_7.8 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg7368, i64 0, i64 %16, i64 0
  %Arg_7.835 = load float, ptr addrspace(1) %Arg_7.8, align 4, !invariant.load !267
  %multiply.61 = fmul float %Arg_8.934, %Arg_7.835
  %subtract.62 = fsub float 1.000000e+00, %Arg_7.835
  %multiply.63 = fmul float %multiply.61, %subtract.62
  %multiply.68 = fmul float %Arg_6.738, %multiply.63
  %add.69 = fadd float %add.60, %multiply.68
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg5364, i64 0, i64 %16, i64 0
  %Arg_5.639 = load float, ptr addrspace(1) %Arg_5.6, align 4, !invariant.load !267
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg4362, i64 0, i64 %16, i64 0
  %Arg_4.540 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %multiply.70 = fmul float %Arg_5.639, %Arg_4.540
  %subtract.71 = fsub float 1.000000e+00, %Arg_4.540
  %multiply.72 = fmul float %multiply.70, %subtract.71
  %multiply.77 = fmul float %Arg_3.443, %multiply.72
  %add.78 = fadd float %add.69, %multiply.77
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg2358, i64 0, i64 %16, i64 0
  %Arg_2.344 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1356, i64 0, i64 %16, i64 0
  %Arg_1.245 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.79 = fmul float %Arg_2.344, %Arg_1.245
  %subtract.80 = fsub float 1.000000e+00, %Arg_1.245
  %multiply.81 = fmul float %multiply.79, %subtract.80
  %multiply.86 = fmul float %Arg_0.148, %multiply.81
  %add.87 = fadd float %add.78, %multiply.86
  %17 = select i1 %compare.25, float %add.87, float 0.000000e+00
  %add.94.i = fadd float %partial_reduction_result.0347, %17
  %multiply.96 = fmul float %Arg_21.2214, %multiply.30
  %add.101.i = fadd float %partial_reduction_result2.0345, %multiply.96
  %multiply.103 = fmul float %Arg_21.2214, %multiply.45
  %add.108.i = fadd float %partial_reduction_result4.0344, %multiply.103
  %multiply.110 = fmul float %Arg_21.2214, %multiply.54
  %add.115.i = fadd float %partial_reduction_result7.0346, %multiply.110
  %multiply.117 = fmul float %Arg_21.2214, %multiply.63
  %add.122.i = fadd float %partial_reduction_result10.0348, %multiply.117
  store float %17, ptr addrspace(1) %lsr.iv415, align 4
  %scevgep410 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 16384
  %scevgep413 = getelementptr i8, ptr addrspace(1) %lsr.iv412, i64 16384
  %scevgep416 = getelementptr i8, ptr addrspace(1) %lsr.iv415, i64 16384
  %lsr.iv.next = add nuw nsw i32 %lsr.iv417, 32
  %18 = icmp ugt i32 %y_in_tile.invar_address.0349, 95
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %19 = zext i32 %thread_id.x to i64
  %20 = zext i32 %thread_id.y294 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.94.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result192 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 16, i32 31)
  %add.94.i319 = fadd float %partial_reduction_result192, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.94.i319, i32 8, i32 31)
  %add.94.i320 = fadd float %add.94.i319, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.94.i320, i32 4, i32 31)
  %add.94.i321 = fadd float %add.94.i320, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.94.i321, i32 2, i32 31)
  %add.94.i322 = fadd float %add.94.i321, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.94.i322, i32 1, i32 31)
  %add.94.i323 = fadd float %add.94.i322, %25
  store float %add.94.i323, ptr addrspace(3) %shmem_transposed_addr, align 4
  %26 = icmp eq i32 %thread_id.x, 0
  %27 = zext i32 %2 to i64
  %28 = or i32 %tile_origin.2, %thread_id.y294
  %29 = zext i32 %28 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg22398, i64 0, i64 %27, i64 %29
  br i1 %26, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %30 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address206 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.101.i, ptr addrspace(3) %shmem_output_address206, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr208 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result210 = load float, ptr addrspace(3) %shmem_transposed_addr208, align 4
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result210, i32 16, i32 31)
  %add.101.i324 = fadd float %partial_reduction_result210, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.101.i324, i32 8, i32 31)
  %add.101.i325 = fadd float %add.101.i324, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.101.i325, i32 4, i32 31)
  %add.101.i326 = fadd float %add.101.i325, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.101.i326, i32 2, i32 31)
  %add.101.i327 = fadd float %add.101.i326, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.101.i327, i32 1, i32 31)
  %add.101.i328 = fadd float %add.101.i327, %35
  store float %add.101.i328, ptr addrspace(3) %shmem_transposed_addr208, align 4
  %output_element_address226 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg24402, i64 0, i64 %27, i64 %29
  br i1 %30, label %reduction_write_output-true224, label %reduction_write_output-after225

reduction_write_output-after225:                  ; preds = %reduction_write_output-true224, %reduction_write_output-after
  %36 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address228 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.108.i, ptr addrspace(3) %shmem_output_address228, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr230 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result232 = load float, ptr addrspace(3) %shmem_transposed_addr230, align 4
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result232, i32 16, i32 31)
  %add.108.i329 = fadd float %partial_reduction_result232, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.108.i329, i32 8, i32 31)
  %add.108.i330 = fadd float %add.108.i329, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.108.i330, i32 4, i32 31)
  %add.108.i331 = fadd float %add.108.i330, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.108.i331, i32 2, i32 31)
  %add.108.i332 = fadd float %add.108.i331, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.108.i332, i32 1, i32 31)
  %add.108.i333 = fadd float %add.108.i332, %41
  store float %add.108.i333, ptr addrspace(3) %shmem_transposed_addr230, align 4
  %output_element_address248 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg25404, i64 0, i64 %27, i64 %29
  br i1 %36, label %reduction_write_output-true246, label %reduction_write_output-after247

reduction_write_output-after247:                  ; preds = %reduction_write_output-true246, %reduction_write_output-after225
  %42 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address250 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.115.i, ptr addrspace(3) %shmem_output_address250, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr252 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result254 = load float, ptr addrspace(3) %shmem_transposed_addr252, align 4
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result254, i32 16, i32 31)
  %add.115.i334 = fadd float %partial_reduction_result254, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.115.i334, i32 8, i32 31)
  %add.115.i335 = fadd float %add.115.i334, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.115.i335, i32 4, i32 31)
  %add.115.i336 = fadd float %add.115.i335, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.115.i336, i32 2, i32 31)
  %add.115.i337 = fadd float %add.115.i336, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.115.i337, i32 1, i32 31)
  %add.115.i338 = fadd float %add.115.i337, %47
  store float %add.115.i338, ptr addrspace(3) %shmem_transposed_addr252, align 4
  %output_element_address270 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg26406, i64 0, i64 %27, i64 %29
  br i1 %42, label %reduction_write_output-true268, label %reduction_write_output-after269

reduction_write_output-after269:                  ; preds = %reduction_write_output-true268, %reduction_write_output-after247
  %48 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address272 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i64 0, i64 0, i64 0, i64 %19, i64 %20
  store float %add.122.i, ptr addrspace(3) %shmem_output_address272, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr274 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i64 0, i64 0, i64 0, i64 %20, i64 %19
  %partial_reduction_result276 = load float, ptr addrspace(3) %shmem_transposed_addr274, align 4
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result276, i32 16, i32 31)
  %add.122.i339 = fadd float %partial_reduction_result276, %49
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.122.i339, i32 8, i32 31)
  %add.122.i340 = fadd float %add.122.i339, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.122.i340, i32 4, i32 31)
  %add.122.i341 = fadd float %add.122.i340, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.122.i341, i32 2, i32 31)
  %add.122.i342 = fadd float %add.122.i341, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.122.i342, i32 1, i32 31)
  %add.122.i343 = fadd float %add.122.i342, %53
  store float %add.122.i343, ptr addrspace(3) %shmem_transposed_addr274, align 4
  %output_element_address292 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg27408, i64 0, i64 %27, i64 %29
  br i1 %48, label %reduction_write_output-true290, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.94.i323, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true224:                   ; preds = %reduction_write_output-after
  store float %add.101.i328, ptr addrspace(1) %output_element_address226, align 4
  br label %reduction_write_output-after225

reduction_write_output-true246:                   ; preds = %reduction_write_output-after225
  store float %add.108.i333, ptr addrspace(1) %output_element_address248, align 4
  br label %reduction_write_output-after247

reduction_write_output-true268:                   ; preds = %reduction_write_output-after247
  store float %add.115.i338, ptr addrspace(1) %output_element_address270, align 4
  br label %reduction_write_output-after269

reduction_write_output-true290:                   ; preds = %reduction_write_output-after269
  store float %add.122.i343, ptr addrspace(1) %output_element_address292, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_500(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg23, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg24, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg25, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg26, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg27, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg28, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg29, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg30, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg31, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg32, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg33) local_unnamed_addr #6 {
entry:
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.25 = fmul float %4, %6
  %subtract.27 = fsub float %3, %multiply.25
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.28 = fmul float %4, %10
  %subtract.30 = fsub float %8, %multiply.28
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.31 = fmul float %4, %14
  %subtract.33 = fsub float %12, %multiply.31
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.34 = fmul float %4, %18
  %subtract.36 = fsub float %16, %multiply.34
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.37 = fmul float %4, %22
  %subtract.39 = fsub float %20, %multiply.37
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.40 = fmul float %4, %26
  %subtract.42 = fsub float %24, %multiply.40
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %multiply.43 = fmul float %4, %30
  %subtract.45 = fsub float %28, %multiply.43
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %multiply.46 = fmul float %4, %34
  %subtract.48 = fsub float %32, %multiply.46
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.49 = fmul float %4, %38
  %subtract.51 = fsub float %36, %multiply.49
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %multiply.52 = fmul float %4, %42
  %subtract.54 = fsub float %40, %multiply.52
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %multiply.55 = fmul float %4, %46
  %subtract.57 = fsub float %44, %multiply.55
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  store float %subtract.27, ptr addrspace(1) %47, align 4
  %48 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  store float %subtract.30, ptr addrspace(1) %48, align 4
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  store float %subtract.33, ptr addrspace(1) %49, align 4
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  store float %subtract.36, ptr addrspace(1) %50, align 4
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  store float %subtract.39, ptr addrspace(1) %51, align 4
  %52 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %1
  store float %subtract.42, ptr addrspace(1) %52, align 4
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %1
  store float %subtract.45, ptr addrspace(1) %53, align 4
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %1
  store float %subtract.48, ptr addrspace(1) %54, align 4
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %1
  store float %subtract.51, ptr addrspace(1) %55, align 4
  %56 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %1
  store float %subtract.54, ptr addrspace(1) %56, align 4
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %1
  store float %subtract.57, ptr addrspace(1) %57, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_343(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(4718592) %arg6) local_unnamed_addr #5 {
entry:
  %arg688 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg586 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg484 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg382 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg280 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg178 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg076 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !291
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 144
  %5 = mul i32 %4, 144
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 144
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 144
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 144
  %9 = icmp ult i32 %.decomposed, 80
  br i1 %9, label %concatenate.pivot.32., label %concatenate.pivot.96.

concatenate.pivot.32.:                            ; preds = %entry
  %10 = icmp ult i32 %.decomposed, 32
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %11 = udiv i32 %linear_index_base, 144
  %12 = shl nuw nsw i32 %11, 5
  %13 = add nuw nsw i32 %12, %.decomposed
  br label %concatenate.7.merge

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.32.
  %14 = icmp ult i32 %.decomposed, 48
  %15 = udiv i32 %linear_index_base, 144
  br i1 %14, label %concatenate.pivot.32.1, label %concatenate.pivot.48.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.48.
  %16 = add nsw i32 %.decomposed, -32
  %17 = shl nuw nsw i32 %15, 4
  %18 = add nuw nsw i32 %16, %17
  br label %concatenate.7.merge

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  %19 = add nsw i32 %.decomposed, -48
  %20 = shl nuw nsw i32 %15, 5
  %21 = add nuw nsw i32 %19, %20
  br label %concatenate.7.merge

concatenate.pivot.96.:                            ; preds = %entry
  %22 = icmp ult i32 %.decomposed, 96
  %23 = udiv i32 %linear_index_base, 144
  br i1 %22, label %concatenate.pivot.80.3, label %concatenate.pivot.128.

concatenate.pivot.80.3:                           ; preds = %concatenate.pivot.96.
  %24 = add nsw i32 %.decomposed, -80
  %25 = shl nuw nsw i32 %23, 4
  %26 = add nuw nsw i32 %24, %25
  br label %concatenate.7.merge

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.96.
  %27 = icmp ult i32 %.decomposed, 128
  br i1 %27, label %concatenate.pivot.96.4, label %concatenate.pivot.128.5

concatenate.pivot.96.4:                           ; preds = %concatenate.pivot.128.
  %28 = add nsw i32 %.decomposed, -96
  %29 = shl nuw nsw i32 %23, 5
  %30 = add nuw nsw i32 %28, %29
  br label %concatenate.7.merge

concatenate.pivot.128.5:                          ; preds = %concatenate.pivot.128.
  %31 = add nsw i32 %.decomposed, -128
  %32 = shl nuw nsw i32 %23, 4
  %33 = add nuw nsw i32 %31, %32
  br label %concatenate.7.merge

concatenate.7.merge:                              ; preds = %concatenate.pivot.128.5, %concatenate.pivot.96.4, %concatenate.pivot.80.3, %concatenate.pivot.48.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.sink69 = phi i32 [ %33, %concatenate.pivot.128.5 ], [ %30, %concatenate.pivot.96.4 ], [ %26, %concatenate.pivot.80.3 ], [ %21, %concatenate.pivot.48.2 ], [ %18, %concatenate.pivot.32.1 ], [ %13, %concatenate.pivot.0. ]
  %arg5.sink = phi ptr addrspace(1) [ %arg586, %concatenate.pivot.128.5 ], [ %arg484, %concatenate.pivot.96.4 ], [ %arg382, %concatenate.pivot.80.3 ], [ %arg280, %concatenate.pivot.48.2 ], [ %arg178, %concatenate.pivot.32.1 ], [ %arg076, %concatenate.pivot.0. ]
  %34 = zext i32 %.sink69 to i64
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg5.sink, i64 %34
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = zext i32 %linear_index_base to i64
  %38 = getelementptr float, ptr addrspace(1) %arg688, i64 %37
  store float %36, ptr addrspace(1) %38, align 16
  %39 = icmp ult i32 %6, 80
  br i1 %39, label %concatenate.pivot.32.14, label %concatenate.pivot.96.19

concatenate.pivot.32.14:                          ; preds = %concatenate.7.merge
  %40 = icmp ult i32 %6, 32
  br i1 %40, label %concatenate.pivot.0.15, label %concatenate.pivot.48.16

concatenate.pivot.0.15:                           ; preds = %concatenate.pivot.32.14
  %41 = udiv i32 %linear_index_base, 144
  %42 = shl nuw nsw i32 %41, 5
  %43 = add nuw nsw i32 %42, %6
  br label %concatenate.7.merge6

concatenate.pivot.48.16:                          ; preds = %concatenate.pivot.32.14
  %44 = icmp ult i32 %6, 48
  %45 = udiv i32 %linear_index_base, 144
  br i1 %44, label %concatenate.pivot.32.17, label %concatenate.pivot.48.18

concatenate.pivot.32.17:                          ; preds = %concatenate.pivot.48.16
  %46 = add nsw i32 %6, -32
  %47 = shl nuw nsw i32 %45, 4
  %48 = add nuw nsw i32 %46, %47
  br label %concatenate.7.merge6

concatenate.pivot.48.18:                          ; preds = %concatenate.pivot.48.16
  %49 = add nsw i32 %6, -48
  %50 = shl nuw nsw i32 %45, 5
  %51 = add nuw nsw i32 %49, %50
  br label %concatenate.7.merge6

concatenate.pivot.96.19:                          ; preds = %concatenate.7.merge
  %52 = icmp ult i32 %6, 96
  %53 = udiv i32 %linear_index_base, 144
  br i1 %52, label %concatenate.pivot.80.20, label %concatenate.pivot.128.21

concatenate.pivot.80.20:                          ; preds = %concatenate.pivot.96.19
  %54 = add nsw i32 %6, -80
  %55 = shl nuw nsw i32 %53, 4
  %56 = add nuw nsw i32 %54, %55
  br label %concatenate.7.merge6

concatenate.pivot.128.21:                         ; preds = %concatenate.pivot.96.19
  %57 = icmp ult i32 %6, 128
  br i1 %57, label %concatenate.pivot.96.22, label %concatenate.pivot.128.23

concatenate.pivot.96.22:                          ; preds = %concatenate.pivot.128.21
  %58 = add nsw i32 %6, -96
  %59 = shl nuw nsw i32 %53, 5
  %60 = add nuw nsw i32 %58, %59
  br label %concatenate.7.merge6

concatenate.pivot.128.23:                         ; preds = %concatenate.pivot.128.21
  %61 = add nsw i32 %6, -128
  %62 = shl nuw nsw i32 %53, 4
  %63 = add nuw nsw i32 %61, %62
  br label %concatenate.7.merge6

concatenate.7.merge6:                             ; preds = %concatenate.pivot.128.23, %concatenate.pivot.96.22, %concatenate.pivot.80.20, %concatenate.pivot.48.18, %concatenate.pivot.32.17, %concatenate.pivot.0.15
  %.sink71 = phi i32 [ %63, %concatenate.pivot.128.23 ], [ %60, %concatenate.pivot.96.22 ], [ %56, %concatenate.pivot.80.20 ], [ %51, %concatenate.pivot.48.18 ], [ %48, %concatenate.pivot.32.17 ], [ %43, %concatenate.pivot.0.15 ]
  %arg5.sink70 = phi ptr addrspace(1) [ %arg586, %concatenate.pivot.128.23 ], [ %arg484, %concatenate.pivot.96.22 ], [ %arg382, %concatenate.pivot.80.20 ], [ %arg280, %concatenate.pivot.48.18 ], [ %arg178, %concatenate.pivot.32.17 ], [ %arg076, %concatenate.pivot.0.15 ]
  %64 = zext i32 %.sink71 to i64
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg5.sink70, i64 %64
  %66 = load float, ptr addrspace(1) %65, align 4, !invariant.load !267
  %67 = getelementptr inbounds float, ptr addrspace(1) %38, i64 1
  store float %66, ptr addrspace(1) %67, align 4
  %68 = icmp ult i32 %7, 80
  br i1 %68, label %concatenate.pivot.32.32, label %concatenate.pivot.96.37

concatenate.pivot.32.32:                          ; preds = %concatenate.7.merge6
  %69 = icmp ult i32 %7, 32
  br i1 %69, label %concatenate.pivot.0.33, label %concatenate.pivot.48.34

concatenate.pivot.0.33:                           ; preds = %concatenate.pivot.32.32
  %70 = udiv i32 %linear_index_base, 144
  %71 = shl nuw nsw i32 %70, 5
  %72 = add nuw nsw i32 %71, %7
  br label %concatenate.7.merge24

concatenate.pivot.48.34:                          ; preds = %concatenate.pivot.32.32
  %73 = icmp ult i32 %7, 48
  %74 = udiv i32 %linear_index_base, 144
  br i1 %73, label %concatenate.pivot.32.35, label %concatenate.pivot.48.36

concatenate.pivot.32.35:                          ; preds = %concatenate.pivot.48.34
  %75 = add nsw i32 %7, -32
  %76 = shl nuw nsw i32 %74, 4
  %77 = add nuw nsw i32 %75, %76
  br label %concatenate.7.merge24

concatenate.pivot.48.36:                          ; preds = %concatenate.pivot.48.34
  %78 = add nsw i32 %7, -48
  %79 = shl nuw nsw i32 %74, 5
  %80 = add nuw nsw i32 %78, %79
  br label %concatenate.7.merge24

concatenate.pivot.96.37:                          ; preds = %concatenate.7.merge6
  %81 = icmp ult i32 %7, 96
  %82 = udiv i32 %linear_index_base, 144
  br i1 %81, label %concatenate.pivot.80.38, label %concatenate.pivot.128.39

concatenate.pivot.80.38:                          ; preds = %concatenate.pivot.96.37
  %83 = add nsw i32 %7, -80
  %84 = shl nuw nsw i32 %82, 4
  %85 = add nuw nsw i32 %83, %84
  br label %concatenate.7.merge24

concatenate.pivot.128.39:                         ; preds = %concatenate.pivot.96.37
  %86 = icmp ult i32 %7, 128
  br i1 %86, label %concatenate.pivot.96.40, label %concatenate.pivot.128.41

concatenate.pivot.96.40:                          ; preds = %concatenate.pivot.128.39
  %87 = add nsw i32 %7, -96
  %88 = shl nuw nsw i32 %82, 5
  %89 = add nuw nsw i32 %87, %88
  br label %concatenate.7.merge24

concatenate.pivot.128.41:                         ; preds = %concatenate.pivot.128.39
  %90 = add nsw i32 %7, -128
  %91 = shl nuw nsw i32 %82, 4
  %92 = add nuw nsw i32 %90, %91
  br label %concatenate.7.merge24

concatenate.7.merge24:                            ; preds = %concatenate.pivot.128.41, %concatenate.pivot.96.40, %concatenate.pivot.80.38, %concatenate.pivot.48.36, %concatenate.pivot.32.35, %concatenate.pivot.0.33
  %.sink73 = phi i32 [ %92, %concatenate.pivot.128.41 ], [ %89, %concatenate.pivot.96.40 ], [ %85, %concatenate.pivot.80.38 ], [ %80, %concatenate.pivot.48.36 ], [ %77, %concatenate.pivot.32.35 ], [ %72, %concatenate.pivot.0.33 ]
  %arg5.sink72 = phi ptr addrspace(1) [ %arg586, %concatenate.pivot.128.41 ], [ %arg484, %concatenate.pivot.96.40 ], [ %arg382, %concatenate.pivot.80.38 ], [ %arg280, %concatenate.pivot.48.36 ], [ %arg178, %concatenate.pivot.32.35 ], [ %arg076, %concatenate.pivot.0.33 ]
  %93 = zext i32 %.sink73 to i64
  %94 = getelementptr inbounds float, ptr addrspace(1) %arg5.sink72, i64 %93
  %95 = load float, ptr addrspace(1) %94, align 4, !invariant.load !267
  %96 = getelementptr inbounds float, ptr addrspace(1) %38, i64 2
  store float %95, ptr addrspace(1) %96, align 8
  %97 = icmp ult i32 %8, 80
  br i1 %97, label %concatenate.pivot.32.50, label %concatenate.pivot.96.55

concatenate.pivot.32.50:                          ; preds = %concatenate.7.merge24
  %98 = icmp ult i32 %8, 32
  br i1 %98, label %concatenate.pivot.0.51, label %concatenate.pivot.48.52

concatenate.pivot.0.51:                           ; preds = %concatenate.pivot.32.50
  %99 = udiv i32 %linear_index_base, 144
  %100 = shl nuw nsw i32 %99, 5
  %101 = add nuw nsw i32 %100, %8
  br label %concatenate.7.merge42

concatenate.pivot.48.52:                          ; preds = %concatenate.pivot.32.50
  %102 = icmp ult i32 %8, 48
  %103 = udiv i32 %linear_index_base, 144
  br i1 %102, label %concatenate.pivot.32.53, label %concatenate.pivot.48.54

concatenate.pivot.32.53:                          ; preds = %concatenate.pivot.48.52
  %104 = add nsw i32 %8, -32
  %105 = shl nuw nsw i32 %103, 4
  %106 = add nuw nsw i32 %104, %105
  br label %concatenate.7.merge42

concatenate.pivot.48.54:                          ; preds = %concatenate.pivot.48.52
  %107 = add nsw i32 %8, -48
  %108 = shl nuw nsw i32 %103, 5
  %109 = add nuw nsw i32 %107, %108
  br label %concatenate.7.merge42

concatenate.pivot.96.55:                          ; preds = %concatenate.7.merge24
  %110 = icmp ult i32 %8, 96
  br i1 %110, label %concatenate.pivot.80.56, label %concatenate.pivot.128.57

concatenate.pivot.80.56:                          ; preds = %concatenate.pivot.96.55
  %111 = add nsw i32 %8, -80
  %112 = shl nuw nsw i32 %4, 4
  %113 = add nuw nsw i32 %111, %112
  br label %concatenate.7.merge42

concatenate.pivot.128.57:                         ; preds = %concatenate.pivot.96.55
  %114 = icmp ult i32 %8, 128
  br i1 %114, label %concatenate.pivot.96.58, label %concatenate.pivot.128.59

concatenate.pivot.96.58:                          ; preds = %concatenate.pivot.128.57
  %115 = add nsw i32 %8, -96
  %116 = shl nuw nsw i32 %4, 5
  %117 = add nuw nsw i32 %115, %116
  br label %concatenate.7.merge42

concatenate.pivot.128.59:                         ; preds = %concatenate.pivot.128.57
  %118 = add nsw i32 %8, -128
  %119 = shl nuw nsw i32 %4, 4
  %120 = add nuw nsw i32 %118, %119
  br label %concatenate.7.merge42

concatenate.7.merge42:                            ; preds = %concatenate.pivot.128.59, %concatenate.pivot.96.58, %concatenate.pivot.80.56, %concatenate.pivot.48.54, %concatenate.pivot.32.53, %concatenate.pivot.0.51
  %.sink75 = phi i32 [ %120, %concatenate.pivot.128.59 ], [ %117, %concatenate.pivot.96.58 ], [ %113, %concatenate.pivot.80.56 ], [ %109, %concatenate.pivot.48.54 ], [ %106, %concatenate.pivot.32.53 ], [ %101, %concatenate.pivot.0.51 ]
  %arg5.sink74 = phi ptr addrspace(1) [ %arg586, %concatenate.pivot.128.59 ], [ %arg484, %concatenate.pivot.96.58 ], [ %arg382, %concatenate.pivot.80.56 ], [ %arg280, %concatenate.pivot.48.54 ], [ %arg178, %concatenate.pivot.32.53 ], [ %arg076, %concatenate.pivot.0.51 ]
  %121 = zext i32 %.sink75 to i64
  %122 = getelementptr inbounds float, ptr addrspace(1) %arg5.sink74, i64 %121
  %123 = load float, ptr addrspace(1) %122, align 4, !invariant.load !267
  %124 = getelementptr inbounds float, ptr addrspace(1) %38, i64 3
  store float %123, ptr addrspace(1) %124, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_237(ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y64, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %16
  %17 = lshr i32 %11, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi i32 [ %17, %entry ], [ %lsr.iv.next111, %y_in_tile.loop_body ]
  %lsr.iv107 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep108, %y_in_tile.loop_body ]
  %lsr.iv105 = phi i32 [ %13, %entry ], [ %lsr.iv.next106, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.089 = phi i32 [ %thread_id.y64, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.13.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.13.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.089, 32
  %18 = and i32 %lsr.iv, 126
  %19 = and i32 %lsr.iv110, 33554304
  %20 = or i32 %19, %y_in_tile.invar_address.089
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %21, i64 %22
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %23 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg091, i64 0, i64 %21, i64 %22
  %Arg_0.199 = getelementptr inbounds float, ptr addrspace(1) %23, i64 96
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.199, align 8, !invariant.load !267
  %24 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.13.i = fadd float %partial_reduction_result63.sroa.0.087, %24
  %scevgep109 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 -4
  %25 = load <2 x float>, ptr addrspace(1) %scevgep109, align 8, !invariant.load !267
  %Arg_1.26112 = extractelement <2 x float> %25, i32 0
  %Arg_1.222113 = extractelement <2 x float> %25, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26112, 0.000000e+00
  %26 = select i1 %compare.58, float %Arg_0.14, float 0.000000e+00
  %27 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %21, i64 %22
  store float %26, ptr addrspace(1) %27, align 8
  %28 = add i32 %lsr.iv, 1
  %29 = and i32 %28, 127
  %30 = and i32 %lsr.iv105, 33554304
  %31 = or i32 %30, %y_in_tile.invar_address.089
  %32 = zext i32 %31 to i64
  %33 = zext i32 %29 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %32, i64 %33
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %34 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg091, i64 0, i64 %32, i64 %33
  %Arg_0.118100 = getelementptr inbounds float, ptr addrspace(1) %34, i64 96
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118100, align 4, !invariant.load !267
  %35 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.13.i76 = fadd float %partial_reduction_result63.sroa.4.088, %35
  %compare.524 = fcmp ogt float %Arg_1.222113, 0.000000e+00
  %36 = select i1 %compare.524, float %Arg_0.119, float 0.000000e+00
  %37 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %32, i64 %33
  store float %36, ptr addrspace(1) %37, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 4096
  %lsr.iv.next106 = add nuw nsw i32 %lsr.iv105, 32
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 16384
  %lsr.iv.next111 = add nuw nsw i32 %lsr.iv110, 32
  %38 = icmp ugt i32 %y_in_tile.invar_address.089, 95
  br i1 %38, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %39 = zext i32 %thread_id.x to i64
  %40 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i64 0, i64 0, i64 0, i64 %39, i64 %40
  store float %add.13.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i64 0, i64 0, i64 0, i64 %40, i64 %39
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.13.i77 = fadd float %partial_reduction_result27, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i77, i32 8, i32 31)
  %add.13.i78 = fadd float %add.13.i77, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i78, i32 4, i32 31)
  %add.13.i79 = fadd float %add.13.i78, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i79, i32 2, i32 31)
  %add.13.i80 = fadd float %add.13.i79, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i80, i32 1, i32 31)
  %add.13.i81 = fadd float %add.13.i80, %45
  store float %add.13.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %46 = shl nuw nsw i32 %thread_id.y64, 1
  %47 = icmp eq i32 %thread_id.x, 0
  %48 = zext i32 %2 to i64
  %49 = or i32 %46, %tile_origin.2
  %50 = zext i32 %49 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg295, i64 0, i64 %48, i64 %50
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %51 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41102 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.13.i76, ptr addrspace(3) %shmem_output_address41102, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43103 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.13.i82 = fadd float %partial_reduction_result45, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i82, i32 8, i32 31)
  %add.13.i83 = fadd float %add.13.i82, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i83, i32 4, i32 31)
  %add.13.i84 = fadd float %add.13.i83, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i84, i32 2, i32 31)
  %add.13.i85 = fadd float %add.13.i84, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i85, i32 1, i32 31)
  %add.13.i86 = fadd float %add.13.i85, %56
  store float %add.13.i86, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  br i1 %51, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.13.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.13.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_358(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(7340032) %arg3) local_unnamed_addr #5 {
entry:
  %arg352 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !292
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 224
  %5 = mul i32 %4, 224
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 224
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 224
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 224
  %9 = icmp ult i32 %.decomposed, 32
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 224
  %11 = shl nuw nsw i32 %10, 5
  %12 = add nuw nsw i32 %11, %.decomposed
  br label %concatenate.4.merge

concatenate.pivot.96.:                            ; preds = %entry
  %13 = icmp ult i32 %.decomposed, 96
  %14 = udiv i32 %linear_index_base, 224
  br i1 %13, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  %15 = add nsw i32 %.decomposed, -32
  %16 = shl nuw nsw i32 %14, 6
  %17 = add nuw nsw i32 %15, %16
  br label %concatenate.4.merge

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  %18 = add nsw i32 %.decomposed, -96
  %19 = shl nuw nsw i32 %14, 7
  %20 = add nuw nsw i32 %18, %19
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.sink39 = phi i32 [ %20, %concatenate.pivot.96.2 ], [ %17, %concatenate.pivot.32.1 ], [ %12, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.2 ], [ %arg148, %concatenate.pivot.32.1 ], [ %arg046, %concatenate.pivot.0. ]
  %21 = zext i32 %.sink39 to i64
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = zext i32 %linear_index_base to i64
  %25 = getelementptr float, ptr addrspace(1) %arg352, i64 %24
  store float %23, ptr addrspace(1) %25, align 16
  %26 = icmp ult i32 %6, 32
  br i1 %26, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %27 = udiv i32 %linear_index_base, 224
  %28 = shl nuw nsw i32 %27, 5
  %29 = add nuw nsw i32 %28, %6
  br label %concatenate.4.merge3

concatenate.pivot.96.9:                           ; preds = %concatenate.4.merge
  %30 = icmp ult i32 %6, 96
  %31 = udiv i32 %linear_index_base, 224
  br i1 %30, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  %32 = add nsw i32 %6, -32
  %33 = shl nuw nsw i32 %31, 6
  %34 = add nuw nsw i32 %32, %33
  br label %concatenate.4.merge3

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  %35 = add nsw i32 %6, -96
  %36 = shl nuw nsw i32 %31, 7
  %37 = add nuw nsw i32 %35, %36
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.96.11, %concatenate.pivot.32.10, %concatenate.pivot.0.8
  %.sink41 = phi i32 [ %37, %concatenate.pivot.96.11 ], [ %34, %concatenate.pivot.32.10 ], [ %29, %concatenate.pivot.0.8 ]
  %arg2.sink40 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.11 ], [ %arg148, %concatenate.pivot.32.10 ], [ %arg046, %concatenate.pivot.0.8 ]
  %38 = zext i32 %.sink41 to i64
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink40, i64 %38
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %25, i64 1
  store float %40, ptr addrspace(1) %41, align 4
  %42 = icmp ult i32 %7, 32
  br i1 %42, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %43 = udiv i32 %linear_index_base, 224
  %44 = shl nuw nsw i32 %43, 5
  %45 = add nuw nsw i32 %44, %7
  br label %concatenate.4.merge12

concatenate.pivot.96.18:                          ; preds = %concatenate.4.merge3
  %46 = icmp ult i32 %7, 96
  %47 = udiv i32 %linear_index_base, 224
  br i1 %46, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  %48 = add nsw i32 %7, -32
  %49 = shl nuw nsw i32 %47, 6
  %50 = add nuw nsw i32 %48, %49
  br label %concatenate.4.merge12

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  %51 = add nsw i32 %7, -96
  %52 = shl nuw nsw i32 %47, 7
  %53 = add nuw nsw i32 %51, %52
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.96.20, %concatenate.pivot.32.19, %concatenate.pivot.0.17
  %.sink43 = phi i32 [ %53, %concatenate.pivot.96.20 ], [ %50, %concatenate.pivot.32.19 ], [ %45, %concatenate.pivot.0.17 ]
  %arg2.sink42 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.20 ], [ %arg148, %concatenate.pivot.32.19 ], [ %arg046, %concatenate.pivot.0.17 ]
  %54 = zext i32 %.sink43 to i64
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink42, i64 %54
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %25, i64 2
  store float %56, ptr addrspace(1) %57, align 8
  %58 = icmp ult i32 %8, 32
  br i1 %58, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %59 = udiv i32 %linear_index_base, 224
  %60 = shl nuw nsw i32 %59, 5
  %61 = add nuw nsw i32 %60, %8
  br label %concatenate.4.merge21

concatenate.pivot.96.27:                          ; preds = %concatenate.4.merge12
  %62 = icmp ult i32 %8, 96
  br i1 %62, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  %63 = add nsw i32 %8, -32
  %64 = shl nuw nsw i32 %4, 6
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.4.merge21

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  %66 = add nsw i32 %8, -96
  %67 = shl nuw nsw i32 %4, 7
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.96.29, %concatenate.pivot.32.28, %concatenate.pivot.0.26
  %.sink45 = phi i32 [ %68, %concatenate.pivot.96.29 ], [ %65, %concatenate.pivot.32.28 ], [ %61, %concatenate.pivot.0.26 ]
  %arg2.sink44 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.29 ], [ %arg148, %concatenate.pivot.32.28 ], [ %arg046, %concatenate.pivot.0.26 ]
  %69 = zext i32 %.sink45 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink44, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %25, i64 3
  store float %71, ptr addrspace(1) %72, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_363(ptr noalias nocapture readonly align 128 dereferenceable(16777216) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(16777216) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(16777216) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 3
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 448
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 16
  %6 = shl nuw nsw i32 %thread_id.y64, 9
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 9
  %14 = lshr i32 %11, 9
  %15 = zext i32 %11 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %17
  %scevgep109 = getelementptr i8, ptr addrspace(1) %arg091, i64 %17
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi ptr addrspace(1) [ %scevgep109, %entry ], [ %scevgep111, %y_in_tile.loop_body ]
  %lsr.iv106 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep107, %y_in_tile.loop_body ]
  %lsr.iv104 = phi i32 [ %8, %entry ], [ %lsr.iv.next105, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ 0, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.12.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.12.i, %y_in_tile.loop_body ]
  %18 = add i32 %thread_id.y64, %lsr.iv
  %19 = and i32 %lsr.iv104, 510
  %20 = add i32 %14, %lsr.iv
  %21 = and i32 %20, 8388480
  %22 = or i32 %21, %18
  %23 = zext i32 %22 to i64
  %24 = zext i32 %19 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg193, i64 0, i64 %23, i64 %24
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %Arg_0.1 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg091, i64 0, i64 %23, i64 %24
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.1, align 8, !invariant.load !267
  %25 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.12.i = fadd float %partial_reduction_result63.sroa.0.087, %25
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 -4
  %26 = load <2 x float>, ptr addrspace(1) %scevgep108, align 8, !invariant.load !267
  %Arg_1.26113 = extractelement <2 x float> %26, i32 0
  %Arg_1.222114 = extractelement <2 x float> %26, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26113, 0.000000e+00
  %scevgep112 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 -4
  %27 = load <2 x float>, ptr addrspace(1) %scevgep112, align 8, !invariant.load !267
  %Arg_0.110115 = extractelement <2 x float> %27, i32 0
  %Arg_0.126116 = extractelement <2 x float> %27, i32 1
  %28 = select i1 %compare.58, float %Arg_0.110115, float 0.000000e+00
  %29 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg397, i64 0, i64 %23, i64 %24
  store float %28, ptr addrspace(1) %29, align 8
  %30 = add i32 %lsr.iv104, 1
  %31 = and i32 %30, 511
  %32 = add i32 %13, %lsr.iv
  %33 = and i32 %32, 8388480
  %34 = or i32 %33, %18
  %35 = zext i32 %34 to i64
  %36 = zext i32 %31 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg193, i64 0, i64 %35, i64 %36
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %Arg_0.118 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg091, i64 0, i64 %35, i64 %36
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118, align 4, !invariant.load !267
  %37 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.12.i76 = fadd float %partial_reduction_result63.sroa.4.088, %37
  %compare.524 = fcmp ogt float %Arg_1.222114, 0.000000e+00
  %38 = select i1 %compare.524, float %Arg_0.126116, float 0.000000e+00
  %39 = getelementptr inbounds [8192 x [512 x float]], ptr addrspace(1) %arg397, i64 0, i64 %35, i64 %36
  store float %38, ptr addrspace(1) %39, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 32
  %40 = add i32 %thread_id.y64, %lsr.iv.next
  %41 = add i32 %40, -32
  %lsr.iv.next105 = add nuw nsw i32 %lsr.iv104, 16384
  %scevgep107 = getelementptr i8, ptr addrspace(1) %lsr.iv106, i64 65536
  %scevgep111 = getelementptr i8, ptr addrspace(1) %lsr.iv110, i64 65536
  %42 = icmp ugt i32 %41, 95
  br i1 %42, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %43 = zext i32 %thread_id.x to i64
  %44 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i64 0, i64 0, i64 0, i64 %43, i64 %44
  store float %add.12.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i64 0, i64 0, i64 0, i64 %44, i64 %43
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.12.i77 = fadd float %partial_reduction_result27, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i77, i32 8, i32 31)
  %add.12.i78 = fadd float %add.12.i77, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i78, i32 4, i32 31)
  %add.12.i79 = fadd float %add.12.i78, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i79, i32 2, i32 31)
  %add.12.i80 = fadd float %add.12.i79, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i80, i32 1, i32 31)
  %add.12.i81 = fadd float %add.12.i80, %49
  store float %add.12.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %50 = shl nuw nsw i32 %thread_id.y64, 1
  %51 = icmp eq i32 %thread_id.x, 0
  %52 = zext i32 %2 to i64
  %53 = or i32 %50, %tile_origin.2
  %54 = zext i32 %53 to i64
  %output_element_address = getelementptr inbounds [64 x [512 x float]], ptr addrspace(1) %arg295, i64 0, i64 %52, i64 %54
  br i1 %51, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %55 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41101 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.12.i76, ptr addrspace(3) %shmem_output_address41101, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43102 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.12.i82 = fadd float %partial_reduction_result45, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i82, i32 8, i32 31)
  %add.12.i83 = fadd float %add.12.i82, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i83, i32 4, i32 31)
  %add.12.i84 = fadd float %add.12.i83, %58
  %59 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i84, i32 2, i32 31)
  %add.12.i85 = fadd float %add.12.i84, %59
  %60 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i85, i32 1, i32 31)
  %add.12.i86 = fadd float %add.12.i85, %60
  store float %add.12.i86, ptr addrspace(3) %shmem_transposed_addr43102, align 4
  br i1 %55, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.12.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.12.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_351(ptr noalias nocapture readonly align 16 dereferenceable(4210688) %arg0, ptr noalias nocapture align 128 dereferenceable(4210688) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2) local_unnamed_addr #6 {
entry:
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg08 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !293
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %2 = shl nuw nsw i32 %0, 9
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = load float, ptr addrspace(1) %arg212, align 16
  %5 = zext i32 %linear_index_base to i64
  %6 = getelementptr float, ptr addrspace(1) %arg08, i64 %5
  %7 = load <4 x float>, ptr addrspace(1) %6, align 16, !invariant.load !267
  %8 = extractelement <4 x float> %7, i32 0
  %9 = extractelement <4 x float> %7, i32 1
  %10 = extractelement <4 x float> %7, i32 2
  %11 = extractelement <4 x float> %7, i32 3
  %12 = getelementptr float, ptr addrspace(1) %arg110, i64 %5
  %13 = load <4 x float>, ptr addrspace(1) %12, align 16
  %14 = extractelement <4 x float> %13, i32 0
  %15 = extractelement <4 x float> %13, i32 1
  %16 = extractelement <4 x float> %13, i32 2
  %17 = extractelement <4 x float> %13, i32 3
  %multiply.5 = fmul float %4, %14
  %subtract.6 = fsub float %8, %multiply.5
  %18 = getelementptr inbounds float, ptr addrspace(1) %6, i64 1
  %19 = getelementptr inbounds float, ptr addrspace(1) %12, i64 1
  %multiply.51 = fmul float %4, %15
  %subtract.62 = fsub float %9, %multiply.51
  %20 = getelementptr inbounds float, ptr addrspace(1) %6, i64 2
  %21 = getelementptr inbounds float, ptr addrspace(1) %12, i64 2
  %multiply.53 = fmul float %4, %16
  %subtract.64 = fsub float %10, %multiply.53
  %22 = getelementptr inbounds float, ptr addrspace(1) %6, i64 3
  %23 = getelementptr inbounds float, ptr addrspace(1) %12, i64 3
  %multiply.55 = fmul float %4, %17
  %subtract.66 = fsub float %11, %multiply.55
  %24 = insertelement <4 x float> poison, float %subtract.6, i32 0
  %25 = insertelement <4 x float> %24, float %subtract.62, i32 1
  %26 = insertelement <4 x float> %25, float %subtract.64, i32 2
  %27 = insertelement <4 x float> %26, float %subtract.66, i32 3
  store <4 x float> %27, ptr addrspace(1) %12, align 16
  %28 = getelementptr inbounds float, ptr addrspace(1) %6, i64 442368
  %29 = load <4 x float>, ptr addrspace(1) %28, align 16, !invariant.load !267
  %30 = extractelement <4 x float> %29, i32 0
  %31 = extractelement <4 x float> %29, i32 1
  %32 = extractelement <4 x float> %29, i32 2
  %33 = extractelement <4 x float> %29, i32 3
  %34 = getelementptr inbounds float, ptr addrspace(1) %12, i64 442368
  %35 = load <4 x float>, ptr addrspace(1) %34, align 16
  %36 = extractelement <4 x float> %35, i32 0
  %37 = extractelement <4 x float> %35, i32 1
  %38 = extractelement <4 x float> %35, i32 2
  %39 = extractelement <4 x float> %35, i32 3
  %multiply.5.1 = fmul float %4, %36
  %subtract.6.1 = fsub float %30, %multiply.5.1
  %multiply.51.1 = fmul float %4, %37
  %subtract.62.1 = fsub float %31, %multiply.51.1
  %multiply.53.1 = fmul float %4, %38
  %subtract.64.1 = fsub float %32, %multiply.53.1
  %multiply.55.1 = fmul float %4, %39
  %subtract.66.1 = fsub float %33, %multiply.55.1
  %40 = insertelement <4 x float> poison, float %subtract.6.1, i32 0
  %41 = insertelement <4 x float> %40, float %subtract.62.1, i32 1
  %42 = insertelement <4 x float> %41, float %subtract.64.1, i32 2
  %43 = insertelement <4 x float> %42, float %subtract.66.1, i32 3
  store <4 x float> %43, ptr addrspace(1) %34, align 16
  %44 = icmp ult i32 %linear_index_base, 167936
  br i1 %44, label %fusion_351.in_bounds-true.2, label %fusion_351.in_bounds-after.2

fusion_351.in_bounds-true.2:                      ; preds = %entry
  %45 = getelementptr inbounds float, ptr addrspace(1) %6, i64 884736
  %46 = load <4 x float>, ptr addrspace(1) %45, align 16, !invariant.load !267
  %47 = extractelement <4 x float> %46, i32 0
  %48 = extractelement <4 x float> %46, i32 1
  %49 = extractelement <4 x float> %46, i32 2
  %50 = extractelement <4 x float> %46, i32 3
  %51 = getelementptr inbounds float, ptr addrspace(1) %12, i64 884736
  %52 = load <4 x float>, ptr addrspace(1) %51, align 16
  %53 = extractelement <4 x float> %52, i32 0
  %54 = extractelement <4 x float> %52, i32 1
  %55 = extractelement <4 x float> %52, i32 2
  %56 = extractelement <4 x float> %52, i32 3
  %multiply.5.2 = fmul float %4, %53
  %subtract.6.2 = fsub float %47, %multiply.5.2
  %multiply.51.2 = fmul float %4, %54
  %subtract.62.2 = fsub float %48, %multiply.51.2
  %multiply.53.2 = fmul float %4, %55
  %subtract.64.2 = fsub float %49, %multiply.53.2
  %multiply.55.2 = fmul float %4, %56
  %subtract.66.2 = fsub float %50, %multiply.55.2
  %57 = insertelement <4 x float> poison, float %subtract.6.2, i32 0
  %58 = insertelement <4 x float> %57, float %subtract.62.2, i32 1
  %59 = insertelement <4 x float> %58, float %subtract.64.2, i32 2
  %60 = insertelement <4 x float> %59, float %subtract.66.2, i32 3
  store <4 x float> %60, ptr addrspace(1) %51, align 16
  br label %fusion_351.in_bounds-after.2

fusion_351.in_bounds-after.2:                     ; preds = %fusion_351.in_bounds-true.2, %entry
  ret void
}

; Function Attrs: nounwind
define void @fusion_299(ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg10, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg11, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg13, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg15) local_unnamed_addr #0 {
entry:
  %arg15233 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14231 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13229 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12227 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11225 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10223 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9221 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8219 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7217 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6215 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5213 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4211 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3209 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2207 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1205 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0203 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y155 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 96
  %4 = shl nuw nsw i32 %2, 14
  %5 = or i32 %tile_origin.2, %thread_id.x
  %6 = zext i32 %5 to i64
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg3209, i64 0, i64 %6, i64 0
  %Arg_3.414 = load float, ptr addrspace(1) %Arg_3.4, align 4, !invariant.load !267
  %Arg_0.1 = getelementptr inbounds [256 x [1 x float]], ptr addrspace(1) %arg0203, i64 0, i64 %6, i64 0
  %Arg_0.117 = load float, ptr addrspace(1) %Arg_0.1, align 4, !invariant.load !267
  %Arg_9.10 = getelementptr inbounds [128 x [1 x float]], ptr addrspace(1) %arg9221, i64 0, i64 %6, i64 0
  %Arg_9.1021 = load float, ptr addrspace(1) %Arg_9.10, align 4, !invariant.load !267
  %Arg_0.125235 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 128
  %Arg_0.126 = load float, ptr addrspace(1) %Arg_0.125235, align 4, !invariant.load !267
  %7 = shl nuw nsw i32 %thread_id.y155, 7
  %8 = add i32 %4, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = lshr i32 %10, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after130, %reduction_write_output-true151
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv252 = phi i32 [ %13, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv249 = phi ptr addrspace(1) [ %arg11225, %entry ], [ %scevgep250, %y_in_tile.loop_body ]
  %lsr.iv246 = phi ptr addrspace(1) [ %arg13229, %entry ], [ %scevgep247, %y_in_tile.loop_body ]
  %lsr.iv243 = phi ptr addrspace(1) [ %arg8219, %entry ], [ %scevgep244, %y_in_tile.loop_body ]
  %lsr.iv240 = phi ptr addrspace(1) [ %arg6215, %entry ], [ %scevgep241, %y_in_tile.loop_body ]
  %lsr.iv237 = phi ptr addrspace(1) [ %arg2207, %entry ], [ %scevgep238, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %arg5213, %entry ], [ %scevgep, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0199 = phi i32 [ %thread_id.y155, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result7.0198 = phi float [ 0.000000e+00, %entry ], [ %add.62.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0197 = phi float [ -0.000000e+00, %entry ], [ %add.32.i, %y_in_tile.loop_body ]
  %partial_reduction_result5.0196 = phi float [ 0.000000e+00, %entry ], [ %add.55.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0195 = phi float [ -0.000000e+00, %entry ], [ %add.48.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0199, 32
  %14 = and i32 %lsr.iv252, 33554304
  %15 = or i32 %14, %y_in_tile.invar_address.0199
  %scevgep236 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 %12
  %Arg_5.611 = load float, ptr addrspace(1) %scevgep236, align 4, !invariant.load !267
  %compare.13 = fcmp ogt float %Arg_5.611, 0.000000e+00
  %16 = zext i32 %15 to i64
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg4211, i64 0, i64 %16, i64 0
  %Arg_4.513 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %multiply.18 = fmul float %Arg_4.513, %Arg_3.414
  %scevgep239 = getelementptr i8, ptr addrspace(1) %lsr.iv237, i64 %12
  %Arg_2.315 = load float, ptr addrspace(1) %scevgep239, align 4, !invariant.load !267
  %add.19 = fadd float %multiply.18, %Arg_2.315
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg1205, i64 0, i64 %16
  %Arg_1.216 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %multiply.23 = fmul float %Arg_1.216, %Arg_0.117
  %add.25 = fadd float %add.19, %multiply.23
  %17 = select i1 %compare.13, float %add.25, float 0.000000e+00
  %add.32.i = fadd float %partial_reduction_result.0197, %17
  %scevgep242 = getelementptr i8, ptr addrspace(1) %lsr.iv240, i64 %12
  %Arg_6.718 = load float, ptr addrspace(1) %scevgep242, align 4, !invariant.load !267
  %compare.34 = fcmp ogt float %Arg_6.718, 0.000000e+00
  %Arg_7.8 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg7217, i64 0, i64 %16, i64 0
  %Arg_7.820 = load float, ptr addrspace(1) %Arg_7.8, align 4, !invariant.load !267
  %multiply.39 = fmul float %Arg_7.820, %Arg_9.1021
  %scevgep245 = getelementptr i8, ptr addrspace(1) %lsr.iv243, i64 %12
  %Arg_8.922 = load float, ptr addrspace(1) %scevgep245, align 4, !invariant.load !267
  %add.40 = fadd float %multiply.39, %Arg_8.922
  %multiply.2327 = fmul float %Arg_1.216, %Arg_0.126
  %add.42 = fadd float %add.40, %multiply.2327
  %18 = select i1 %compare.34, float %add.42, float 0.000000e+00
  %add.48.i = fadd float %partial_reduction_result2.0195, %18
  %multiply.50 = fmul float %Arg_6.718, %Arg_7.820
  %add.55.i = fadd float %partial_reduction_result5.0196, %multiply.50
  %multiply.57 = fmul float %Arg_5.611, %Arg_4.513
  %add.62.i = fadd float %partial_reduction_result7.0198, %multiply.57
  %scevgep248 = getelementptr i8, ptr addrspace(1) %lsr.iv246, i64 %12
  store float %18, ptr addrspace(1) %scevgep248, align 4
  %scevgep251 = getelementptr i8, ptr addrspace(1) %lsr.iv249, i64 %12
  store float %17, ptr addrspace(1) %scevgep251, align 4
  %scevgep = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 16384
  %scevgep238 = getelementptr i8, ptr addrspace(1) %lsr.iv237, i64 16384
  %scevgep241 = getelementptr i8, ptr addrspace(1) %lsr.iv240, i64 16384
  %scevgep244 = getelementptr i8, ptr addrspace(1) %lsr.iv243, i64 16384
  %scevgep247 = getelementptr i8, ptr addrspace(1) %lsr.iv246, i64 16384
  %scevgep250 = getelementptr i8, ptr addrspace(1) %lsr.iv249, i64 16384
  %lsr.iv.next = add nuw nsw i32 %lsr.iv252, 32
  %19 = icmp ugt i32 %y_in_tile.invar_address.0199, 95
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %20 = zext i32 %thread_id.x to i64
  %21 = zext i32 %thread_id.y155 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i64 0, i64 0, i64 0, i64 %20, i64 %21
  store float %add.32.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i64 0, i64 0, i64 0, i64 %21, i64 %20
  %partial_reduction_result75 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 16, i32 31)
  %add.32.i175 = fadd float %partial_reduction_result75, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i175, i32 8, i32 31)
  %add.32.i176 = fadd float %add.32.i175, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i176, i32 4, i32 31)
  %add.32.i177 = fadd float %add.32.i176, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i177, i32 2, i32 31)
  %add.32.i178 = fadd float %add.32.i177, %25
  %26 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.32.i178, i32 1, i32 31)
  %add.32.i179 = fadd float %add.32.i178, %26
  store float %add.32.i179, ptr addrspace(3) %shmem_transposed_addr, align 4
  %27 = icmp eq i32 %thread_id.x, 0
  %28 = zext i32 %2 to i64
  %29 = or i32 %tile_origin.2, %thread_id.y155
  %30 = zext i32 %29 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg10223, i64 0, i64 %28, i64 %30
  br i1 %27, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %31 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address89 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i64 0, i64 0, i64 0, i64 %20, i64 %21
  store float %add.48.i, ptr addrspace(3) %shmem_output_address89, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr91 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i64 0, i64 0, i64 0, i64 %21, i64 %20
  %partial_reduction_result93 = load float, ptr addrspace(3) %shmem_transposed_addr91, align 4
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result93, i32 16, i32 31)
  %add.48.i180 = fadd float %partial_reduction_result93, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i180, i32 8, i32 31)
  %add.48.i181 = fadd float %add.48.i180, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i181, i32 4, i32 31)
  %add.48.i182 = fadd float %add.48.i181, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i182, i32 2, i32 31)
  %add.48.i183 = fadd float %add.48.i182, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i183, i32 1, i32 31)
  %add.48.i184 = fadd float %add.48.i183, %36
  store float %add.48.i184, ptr addrspace(3) %shmem_transposed_addr91, align 4
  %output_element_address109 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg12227, i64 0, i64 %28, i64 %30
  br i1 %31, label %reduction_write_output-true107, label %reduction_write_output-after108

reduction_write_output-after108:                  ; preds = %reduction_write_output-true107, %reduction_write_output-after
  %37 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address111 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i64 0, i64 0, i64 0, i64 %20, i64 %21
  store float %add.55.i, ptr addrspace(3) %shmem_output_address111, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr113 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i64 0, i64 0, i64 0, i64 %21, i64 %20
  %partial_reduction_result115 = load float, ptr addrspace(3) %shmem_transposed_addr113, align 4
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result115, i32 16, i32 31)
  %add.55.i185 = fadd float %partial_reduction_result115, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.55.i185, i32 8, i32 31)
  %add.55.i186 = fadd float %add.55.i185, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.55.i186, i32 4, i32 31)
  %add.55.i187 = fadd float %add.55.i186, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.55.i187, i32 2, i32 31)
  %add.55.i188 = fadd float %add.55.i187, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.55.i188, i32 1, i32 31)
  %add.55.i189 = fadd float %add.55.i188, %42
  store float %add.55.i189, ptr addrspace(3) %shmem_transposed_addr113, align 4
  %output_element_address131 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg14231, i64 0, i64 %28, i64 %30
  br i1 %37, label %reduction_write_output-true129, label %reduction_write_output-after130

reduction_write_output-after130:                  ; preds = %reduction_write_output-true129, %reduction_write_output-after108
  %43 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address133 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i64 0, i64 0, i64 0, i64 %20, i64 %21
  store float %add.62.i, ptr addrspace(3) %shmem_output_address133, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr135 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i64 0, i64 0, i64 0, i64 %21, i64 %20
  %partial_reduction_result137 = load float, ptr addrspace(3) %shmem_transposed_addr135, align 4
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result137, i32 16, i32 31)
  %add.62.i190 = fadd float %partial_reduction_result137, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.62.i190, i32 8, i32 31)
  %add.62.i191 = fadd float %add.62.i190, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.62.i191, i32 4, i32 31)
  %add.62.i192 = fadd float %add.62.i191, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.62.i192, i32 2, i32 31)
  %add.62.i193 = fadd float %add.62.i192, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.62.i193, i32 1, i32 31)
  %add.62.i194 = fadd float %add.62.i193, %48
  store float %add.62.i194, ptr addrspace(3) %shmem_transposed_addr135, align 4
  %output_element_address153 = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg15233, i64 0, i64 %28, i64 %30
  br i1 %43, label %reduction_write_output-true151, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.32.i179, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true107:                   ; preds = %reduction_write_output-after
  store float %add.48.i184, ptr addrspace(1) %output_element_address109, align 4
  br label %reduction_write_output-after108

reduction_write_output-true129:                   ; preds = %reduction_write_output-after108
  store float %add.55.i189, ptr addrspace(1) %output_element_address131, align 4
  br label %reduction_write_output-after130

reduction_write_output-true151:                   ; preds = %reduction_write_output-after130
  store float %add.62.i194, ptr addrspace(1) %output_element_address153, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_526(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg35, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg37, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg39, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg50, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg51, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg52, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg53, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg54, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg55, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg56, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg57, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg58, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg59, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg60) local_unnamed_addr #6 {
entry:
  %arg60128 = addrspacecast ptr %arg60 to ptr addrspace(1)
  %arg59126 = addrspacecast ptr %arg59 to ptr addrspace(1)
  %arg58124 = addrspacecast ptr %arg58 to ptr addrspace(1)
  %arg57122 = addrspacecast ptr %arg57 to ptr addrspace(1)
  %arg56120 = addrspacecast ptr %arg56 to ptr addrspace(1)
  %arg55118 = addrspacecast ptr %arg55 to ptr addrspace(1)
  %arg54116 = addrspacecast ptr %arg54 to ptr addrspace(1)
  %arg53114 = addrspacecast ptr %arg53 to ptr addrspace(1)
  %arg52112 = addrspacecast ptr %arg52 to ptr addrspace(1)
  %arg51110 = addrspacecast ptr %arg51 to ptr addrspace(1)
  %arg50108 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49106 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.43 = fmul float %4, %6
  %subtract.45 = fsub float %3, %multiply.43
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.46 = fmul float %4, %10
  %subtract.48 = fsub float %8, %multiply.46
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.49 = fmul float %4, %14
  %subtract.51 = fsub float %12, %multiply.49
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.52 = fmul float %4, %18
  %subtract.54 = fsub float %16, %multiply.52
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.55 = fmul float %4, %22
  %subtract.57 = fsub float %20, %multiply.55
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.58 = fmul float %4, %26
  %subtract.60 = fsub float %24, %multiply.58
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %multiply.61 = fmul float %4, %30
  %subtract.63 = fsub float %28, %multiply.61
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %multiply.64 = fmul float %4, %34
  %subtract.66 = fsub float %32, %multiply.64
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.67 = fmul float %4, %38
  %subtract.69 = fsub float %36, %multiply.67
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %multiply.70 = fmul float %4, %42
  %subtract.72 = fsub float %40, %multiply.70
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %multiply.73 = fmul float %4, %46
  %subtract.75 = fsub float %44, %multiply.73
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %multiply.76 = fmul float %4, %50
  %subtract.78 = fsub float %48, %multiply.76
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  %52 = load float, ptr addrspace(1) %51, align 4, !invariant.load !267
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  %54 = load float, ptr addrspace(1) %53, align 4, !invariant.load !267
  %multiply.79 = fmul float %4, %54
  %subtract.81 = fsub float %52, %multiply.79
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %1
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %multiply.82 = fmul float %4, %58
  %subtract.84 = fsub float %56, %multiply.82
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %1
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %1
  %62 = load float, ptr addrspace(1) %61, align 4, !invariant.load !267
  %multiply.85 = fmul float %4, %62
  %subtract.87 = fsub float %60, %multiply.85
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %1
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %1
  %66 = load float, ptr addrspace(1) %65, align 4, !invariant.load !267
  %multiply.88 = fmul float %4, %66
  %subtract.90 = fsub float %64, %multiply.88
  %67 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %1
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %1
  %70 = load float, ptr addrspace(1) %69, align 4, !invariant.load !267
  %multiply.91 = fmul float %4, %70
  %subtract.93 = fsub float %68, %multiply.91
  %71 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %1
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %1
  %74 = load float, ptr addrspace(1) %73, align 4, !invariant.load !267
  %multiply.94 = fmul float %4, %74
  %subtract.96 = fsub float %72, %multiply.94
  %75 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %1
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %1
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %multiply.97 = fmul float %4, %78
  %subtract.99 = fsub float %76, %multiply.97
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %1
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %1
  %82 = load float, ptr addrspace(1) %81, align 4, !invariant.load !267
  %multiply.100 = fmul float %4, %82
  %subtract.102 = fsub float %80, %multiply.100
  %83 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %1
  store float %subtract.45, ptr addrspace(1) %83, align 4
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %1
  store float %subtract.48, ptr addrspace(1) %84, align 4
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %1
  store float %subtract.51, ptr addrspace(1) %85, align 4
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %1
  store float %subtract.54, ptr addrspace(1) %86, align 4
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %1
  store float %subtract.57, ptr addrspace(1) %87, align 4
  %88 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %1
  store float %subtract.60, ptr addrspace(1) %88, align 4
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %1
  store float %subtract.63, ptr addrspace(1) %89, align 4
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %1
  store float %subtract.66, ptr addrspace(1) %90, align 4
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg49106, i64 %1
  store float %subtract.69, ptr addrspace(1) %91, align 4
  %92 = getelementptr inbounds float, ptr addrspace(1) %arg50108, i64 %1
  store float %subtract.72, ptr addrspace(1) %92, align 4
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg51110, i64 %1
  store float %subtract.75, ptr addrspace(1) %93, align 4
  %94 = getelementptr inbounds float, ptr addrspace(1) %arg52112, i64 %1
  store float %subtract.78, ptr addrspace(1) %94, align 4
  %95 = getelementptr inbounds float, ptr addrspace(1) %arg53114, i64 %1
  store float %subtract.81, ptr addrspace(1) %95, align 4
  %96 = getelementptr inbounds float, ptr addrspace(1) %arg54116, i64 %1
  store float %subtract.84, ptr addrspace(1) %96, align 4
  %97 = getelementptr inbounds float, ptr addrspace(1) %arg55118, i64 %1
  store float %subtract.87, ptr addrspace(1) %97, align 4
  %98 = getelementptr inbounds float, ptr addrspace(1) %arg56120, i64 %1
  store float %subtract.90, ptr addrspace(1) %98, align 4
  %99 = getelementptr inbounds float, ptr addrspace(1) %arg57122, i64 %1
  store float %subtract.93, ptr addrspace(1) %99, align 4
  %100 = getelementptr inbounds float, ptr addrspace(1) %arg58124, i64 %1
  store float %subtract.96, ptr addrspace(1) %100, align 4
  %101 = getelementptr inbounds float, ptr addrspace(1) %arg59126, i64 %1
  store float %subtract.99, ptr addrspace(1) %101, align 4
  %102 = getelementptr inbounds float, ptr addrspace(1) %arg60128, i64 %1
  store float %subtract.102, ptr addrspace(1) %102, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_349(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(8650752) %arg4) local_unnamed_addr #5 {
entry:
  %arg464 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg362 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg260 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg158 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg056 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !294
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 264
  %5 = mul i32 %4, 264
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 264
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 264
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 264
  %9 = icmp ult i32 %.decomposed, 192
  br i1 %9, label %concatenate.pivot.64., label %concatenate.pivot.256.

concatenate.pivot.64.:                            ; preds = %entry
  %10 = icmp ult i32 %.decomposed, 64
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  %11 = udiv i32 %linear_index_base, 264
  %12 = shl nuw nsw i32 %11, 6
  %13 = add nuw nsw i32 %12, %.decomposed
  br label %concatenate.5.merge

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  %14 = add nsw i32 %.decomposed, -64
  %15 = udiv i32 %linear_index_base, 264
  %16 = shl nuw nsw i32 %15, 7
  %17 = add nuw nsw i32 %14, %16
  br label %concatenate.5.merge

concatenate.pivot.256.:                           ; preds = %entry
  %18 = icmp ult i32 %.decomposed, 256
  %19 = udiv i32 %linear_index_base, 264
  br i1 %18, label %concatenate.pivot.192.2, label %concatenate.pivot.256.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.256.
  %20 = add nsw i32 %.decomposed, -192
  %21 = shl nuw nsw i32 %19, 6
  %22 = add nuw nsw i32 %20, %21
  br label %concatenate.5.merge

concatenate.pivot.256.3:                          ; preds = %concatenate.pivot.256.
  %23 = add nsw i32 %.decomposed, -256
  %24 = shl nuw nsw i32 %19, 3
  %25 = add nuw nsw i32 %23, %24
  br label %concatenate.5.merge

concatenate.5.merge:                              ; preds = %concatenate.pivot.256.3, %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.sink49 = phi i32 [ %25, %concatenate.pivot.256.3 ], [ %22, %concatenate.pivot.192.2 ], [ %17, %concatenate.pivot.64.1 ], [ %13, %concatenate.pivot.0. ]
  %arg3.sink = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.256.3 ], [ %arg260, %concatenate.pivot.192.2 ], [ %arg158, %concatenate.pivot.64.1 ], [ %arg056, %concatenate.pivot.0. ]
  %26 = zext i32 %.sink49 to i64
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink, i64 %26
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = zext i32 %linear_index_base to i64
  %30 = getelementptr float, ptr addrspace(1) %arg464, i64 %29
  store float %28, ptr addrspace(1) %30, align 16
  %31 = icmp ult i32 %6, 192
  br i1 %31, label %concatenate.pivot.64.10, label %concatenate.pivot.256.13

concatenate.pivot.64.10:                          ; preds = %concatenate.5.merge
  %32 = icmp ult i32 %6, 64
  br i1 %32, label %concatenate.pivot.0.11, label %concatenate.pivot.64.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.64.10
  %33 = udiv i32 %linear_index_base, 264
  %34 = shl nuw nsw i32 %33, 6
  %35 = add nuw nsw i32 %34, %6
  br label %concatenate.5.merge4

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.64.10
  %36 = add nsw i32 %6, -64
  %37 = udiv i32 %linear_index_base, 264
  %38 = shl nuw nsw i32 %37, 7
  %39 = add nuw nsw i32 %36, %38
  br label %concatenate.5.merge4

concatenate.pivot.256.13:                         ; preds = %concatenate.5.merge
  %40 = icmp ult i32 %6, 256
  %41 = udiv i32 %linear_index_base, 264
  br i1 %40, label %concatenate.pivot.192.14, label %concatenate.pivot.256.15

concatenate.pivot.192.14:                         ; preds = %concatenate.pivot.256.13
  %42 = add nsw i32 %6, -192
  %43 = shl nuw nsw i32 %41, 6
  %44 = add nuw nsw i32 %42, %43
  br label %concatenate.5.merge4

concatenate.pivot.256.15:                         ; preds = %concatenate.pivot.256.13
  %45 = add nsw i32 %6, -256
  %46 = shl nuw nsw i32 %41, 3
  %47 = add nuw nsw i32 %45, %46
  br label %concatenate.5.merge4

concatenate.5.merge4:                             ; preds = %concatenate.pivot.256.15, %concatenate.pivot.192.14, %concatenate.pivot.64.12, %concatenate.pivot.0.11
  %.sink51 = phi i32 [ %47, %concatenate.pivot.256.15 ], [ %44, %concatenate.pivot.192.14 ], [ %39, %concatenate.pivot.64.12 ], [ %35, %concatenate.pivot.0.11 ]
  %arg3.sink50 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.256.15 ], [ %arg260, %concatenate.pivot.192.14 ], [ %arg158, %concatenate.pivot.64.12 ], [ %arg056, %concatenate.pivot.0.11 ]
  %48 = zext i32 %.sink51 to i64
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink50, i64 %48
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %51 = getelementptr inbounds float, ptr addrspace(1) %30, i64 1
  store float %50, ptr addrspace(1) %51, align 4
  %52 = icmp ult i32 %7, 192
  br i1 %52, label %concatenate.pivot.64.22, label %concatenate.pivot.256.25

concatenate.pivot.64.22:                          ; preds = %concatenate.5.merge4
  %53 = icmp ult i32 %7, 64
  br i1 %53, label %concatenate.pivot.0.23, label %concatenate.pivot.64.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.64.22
  %54 = udiv i32 %linear_index_base, 264
  %55 = shl nuw nsw i32 %54, 6
  %56 = add nuw nsw i32 %55, %7
  br label %concatenate.5.merge16

concatenate.pivot.64.24:                          ; preds = %concatenate.pivot.64.22
  %57 = add nsw i32 %7, -64
  %58 = udiv i32 %linear_index_base, 264
  %59 = shl nuw nsw i32 %58, 7
  %60 = add nuw nsw i32 %57, %59
  br label %concatenate.5.merge16

concatenate.pivot.256.25:                         ; preds = %concatenate.5.merge4
  %61 = icmp ult i32 %7, 256
  %62 = udiv i32 %linear_index_base, 264
  br i1 %61, label %concatenate.pivot.192.26, label %concatenate.pivot.256.27

concatenate.pivot.192.26:                         ; preds = %concatenate.pivot.256.25
  %63 = add nsw i32 %7, -192
  %64 = shl nuw nsw i32 %62, 6
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.5.merge16

concatenate.pivot.256.27:                         ; preds = %concatenate.pivot.256.25
  %66 = add nsw i32 %7, -256
  %67 = shl nuw nsw i32 %62, 3
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.5.merge16

concatenate.5.merge16:                            ; preds = %concatenate.pivot.256.27, %concatenate.pivot.192.26, %concatenate.pivot.64.24, %concatenate.pivot.0.23
  %.sink53 = phi i32 [ %68, %concatenate.pivot.256.27 ], [ %65, %concatenate.pivot.192.26 ], [ %60, %concatenate.pivot.64.24 ], [ %56, %concatenate.pivot.0.23 ]
  %arg3.sink52 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.256.27 ], [ %arg260, %concatenate.pivot.192.26 ], [ %arg158, %concatenate.pivot.64.24 ], [ %arg056, %concatenate.pivot.0.23 ]
  %69 = zext i32 %.sink53 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink52, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %30, i64 2
  store float %71, ptr addrspace(1) %72, align 8
  %73 = icmp ult i32 %8, 192
  br i1 %73, label %concatenate.pivot.64.34, label %concatenate.pivot.256.37

concatenate.pivot.64.34:                          ; preds = %concatenate.5.merge16
  %74 = icmp ult i32 %8, 64
  br i1 %74, label %concatenate.pivot.0.35, label %concatenate.pivot.64.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.64.34
  %75 = udiv i32 %linear_index_base, 264
  %76 = shl nuw nsw i32 %75, 6
  %77 = add nuw nsw i32 %76, %8
  br label %concatenate.5.merge28

concatenate.pivot.64.36:                          ; preds = %concatenate.pivot.64.34
  %78 = add nsw i32 %8, -64
  %79 = udiv i32 %linear_index_base, 264
  %80 = shl nuw nsw i32 %79, 7
  %81 = add nuw nsw i32 %78, %80
  br label %concatenate.5.merge28

concatenate.pivot.256.37:                         ; preds = %concatenate.5.merge16
  %82 = icmp ult i32 %8, 256
  br i1 %82, label %concatenate.pivot.192.38, label %concatenate.pivot.256.39

concatenate.pivot.192.38:                         ; preds = %concatenate.pivot.256.37
  %83 = add nsw i32 %8, -192
  %84 = shl nuw nsw i32 %4, 6
  %85 = add nuw nsw i32 %83, %84
  br label %concatenate.5.merge28

concatenate.pivot.256.39:                         ; preds = %concatenate.pivot.256.37
  %86 = add nsw i32 %8, -256
  %87 = shl nuw nsw i32 %4, 3
  %88 = add nuw nsw i32 %86, %87
  br label %concatenate.5.merge28

concatenate.5.merge28:                            ; preds = %concatenate.pivot.256.39, %concatenate.pivot.192.38, %concatenate.pivot.64.36, %concatenate.pivot.0.35
  %.sink55 = phi i32 [ %88, %concatenate.pivot.256.39 ], [ %85, %concatenate.pivot.192.38 ], [ %81, %concatenate.pivot.64.36 ], [ %77, %concatenate.pivot.0.35 ]
  %arg3.sink54 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.256.39 ], [ %arg260, %concatenate.pivot.192.38 ], [ %arg158, %concatenate.pivot.64.36 ], [ %arg056, %concatenate.pivot.0.35 ]
  %89 = zext i32 %.sink55 to i64
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink54, i64 %89
  %91 = load float, ptr addrspace(1) %90, align 4, !invariant.load !267
  %92 = getelementptr inbounds float, ptr addrspace(1) %30, i64 3
  store float %91, ptr addrspace(1) %92, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_370(ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(9961472) %arg3) local_unnamed_addr #5 {
entry:
  %arg352 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !295
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 304
  %5 = mul i32 %4, 304
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 304
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 304
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 304
  %9 = icmp ult i32 %.decomposed, 16
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 304
  %11 = shl nuw nsw i32 %10, 4
  %12 = add nuw nsw i32 %11, %.decomposed
  br label %concatenate.4.merge

concatenate.pivot.48.:                            ; preds = %entry
  %13 = icmp ult i32 %.decomposed, 48
  %14 = udiv i32 %linear_index_base, 304
  br i1 %13, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  %15 = add nsw i32 %.decomposed, -16
  %16 = shl nuw nsw i32 %14, 5
  %17 = add nuw nsw i32 %15, %16
  br label %concatenate.4.merge

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  %18 = add nsw i32 %.decomposed, -48
  %19 = shl nuw nsw i32 %14, 8
  %20 = add nuw nsw i32 %18, %19
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.48.2, %concatenate.pivot.16.1, %concatenate.pivot.0.
  %.sink39 = phi i32 [ %20, %concatenate.pivot.48.2 ], [ %17, %concatenate.pivot.16.1 ], [ %12, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.48.2 ], [ %arg148, %concatenate.pivot.16.1 ], [ %arg046, %concatenate.pivot.0. ]
  %21 = zext i32 %.sink39 to i64
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = zext i32 %linear_index_base to i64
  %25 = getelementptr float, ptr addrspace(1) %arg352, i64 %24
  store float %23, ptr addrspace(1) %25, align 16
  %26 = icmp ult i32 %6, 16
  br i1 %26, label %concatenate.pivot.0.8, label %concatenate.pivot.48.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %27 = udiv i32 %linear_index_base, 304
  %28 = shl nuw nsw i32 %27, 4
  %29 = add nuw nsw i32 %28, %6
  br label %concatenate.4.merge3

concatenate.pivot.48.9:                           ; preds = %concatenate.4.merge
  %30 = icmp ult i32 %6, 48
  %31 = udiv i32 %linear_index_base, 304
  br i1 %30, label %concatenate.pivot.16.10, label %concatenate.pivot.48.11

concatenate.pivot.16.10:                          ; preds = %concatenate.pivot.48.9
  %32 = add nsw i32 %6, -16
  %33 = shl nuw nsw i32 %31, 5
  %34 = add nuw nsw i32 %32, %33
  br label %concatenate.4.merge3

concatenate.pivot.48.11:                          ; preds = %concatenate.pivot.48.9
  %35 = add nsw i32 %6, -48
  %36 = shl nuw nsw i32 %31, 8
  %37 = add nuw nsw i32 %35, %36
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.48.11, %concatenate.pivot.16.10, %concatenate.pivot.0.8
  %.sink41 = phi i32 [ %37, %concatenate.pivot.48.11 ], [ %34, %concatenate.pivot.16.10 ], [ %29, %concatenate.pivot.0.8 ]
  %arg2.sink40 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.48.11 ], [ %arg148, %concatenate.pivot.16.10 ], [ %arg046, %concatenate.pivot.0.8 ]
  %38 = zext i32 %.sink41 to i64
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink40, i64 %38
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %25, i64 1
  store float %40, ptr addrspace(1) %41, align 4
  %42 = icmp ult i32 %7, 16
  br i1 %42, label %concatenate.pivot.0.17, label %concatenate.pivot.48.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %43 = udiv i32 %linear_index_base, 304
  %44 = shl nuw nsw i32 %43, 4
  %45 = add nuw nsw i32 %44, %7
  br label %concatenate.4.merge12

concatenate.pivot.48.18:                          ; preds = %concatenate.4.merge3
  %46 = icmp ult i32 %7, 48
  %47 = udiv i32 %linear_index_base, 304
  br i1 %46, label %concatenate.pivot.16.19, label %concatenate.pivot.48.20

concatenate.pivot.16.19:                          ; preds = %concatenate.pivot.48.18
  %48 = add nsw i32 %7, -16
  %49 = shl nuw nsw i32 %47, 5
  %50 = add nuw nsw i32 %48, %49
  br label %concatenate.4.merge12

concatenate.pivot.48.20:                          ; preds = %concatenate.pivot.48.18
  %51 = add nsw i32 %7, -48
  %52 = shl nuw nsw i32 %47, 8
  %53 = add nuw nsw i32 %51, %52
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.48.20, %concatenate.pivot.16.19, %concatenate.pivot.0.17
  %.sink43 = phi i32 [ %53, %concatenate.pivot.48.20 ], [ %50, %concatenate.pivot.16.19 ], [ %45, %concatenate.pivot.0.17 ]
  %arg2.sink42 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.48.20 ], [ %arg148, %concatenate.pivot.16.19 ], [ %arg046, %concatenate.pivot.0.17 ]
  %54 = zext i32 %.sink43 to i64
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink42, i64 %54
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %25, i64 2
  store float %56, ptr addrspace(1) %57, align 8
  %58 = icmp ult i32 %8, 16
  br i1 %58, label %concatenate.pivot.0.26, label %concatenate.pivot.48.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %59 = udiv i32 %linear_index_base, 304
  %60 = shl nuw nsw i32 %59, 4
  %61 = add nuw nsw i32 %60, %8
  br label %concatenate.4.merge21

concatenate.pivot.48.27:                          ; preds = %concatenate.4.merge12
  %62 = icmp ult i32 %8, 48
  br i1 %62, label %concatenate.pivot.16.28, label %concatenate.pivot.48.29

concatenate.pivot.16.28:                          ; preds = %concatenate.pivot.48.27
  %63 = add nsw i32 %8, -16
  %64 = shl nuw nsw i32 %4, 5
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.4.merge21

concatenate.pivot.48.29:                          ; preds = %concatenate.pivot.48.27
  %66 = add nsw i32 %8, -48
  %67 = shl nuw nsw i32 %4, 8
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.48.29, %concatenate.pivot.16.28, %concatenate.pivot.0.26
  %.sink45 = phi i32 [ %68, %concatenate.pivot.48.29 ], [ %65, %concatenate.pivot.16.28 ], [ %61, %concatenate.pivot.0.26 ]
  %arg2.sink44 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.48.29 ], [ %arg148, %concatenate.pivot.16.28 ], [ %arg046, %concatenate.pivot.0.26 ]
  %69 = zext i32 %.sink45 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink44, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %25, i64 3
  store float %71, ptr addrspace(1) %72, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_390(ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(147456) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg22) local_unnamed_addr #6 {
entry:
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %2, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [144 x [256 x float]], ptr addrspace(1) %arg110, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 32768
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.18 = fmul float %8, %13
  %subtract.19 = fsub float %7, %multiply.18
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr inbounds float, ptr addrspace(1) %11, i64 8192
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %multiply.21 = fmul float %8, %17
  %subtract.22 = fsub float %15, %multiply.21
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %5
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %20 = getelementptr inbounds float, ptr addrspace(1) %11, i64 20480
  %21 = load float, ptr addrspace(1) %20, align 4, !invariant.load !267
  %multiply.24 = fmul float %8, %21
  %subtract.25 = fsub float %19, %multiply.24
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = getelementptr inbounds [304 x [256 x float]], ptr addrspace(1) %arg620, i64 0, i64 %10, i64 %9
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  %multiply.27 = fmul float %8, %25
  %subtract.28 = fsub float %23, %multiply.27
  %26 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = getelementptr inbounds [304 x [256 x float]], ptr addrspace(1) %arg824, i64 0, i64 %10, i64 %9
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %multiply.30 = fmul float %8, %29
  %subtract.31 = fsub float %27, %multiply.30
  %30 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %32 = getelementptr inbounds [304 x [256 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %10, i64 %9
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %multiply.33 = fmul float %8, %33
  %subtract.34 = fsub float %31, %multiply.33
  %34 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %36 = getelementptr inbounds [304 x [256 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %10, i64 %9
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  %multiply.36 = fmul float %8, %37
  %subtract.37 = fsub float %35, %multiply.36
  %38 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %39 = load float, ptr addrspace(1) %38, align 4, !invariant.load !267
  %40 = getelementptr inbounds [304 x [256 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %10, i64 %9
  %41 = load float, ptr addrspace(1) %40, align 4, !invariant.load !267
  %multiply.39 = fmul float %8, %41
  %subtract.40 = fsub float %39, %multiply.39
  %42 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  store float %subtract.19, ptr addrspace(1) %42, align 4
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %5
  store float %subtract.22, ptr addrspace(1) %43, align 4
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  store float %subtract.25, ptr addrspace(1) %44, align 4
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  store float %subtract.28, ptr addrspace(1) %45, align 4
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  store float %subtract.31, ptr addrspace(1) %46, align 4
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %5
  store float %subtract.34, ptr addrspace(1) %47, align 4
  %48 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  store float %subtract.37, ptr addrspace(1) %48, align 4
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %5
  store float %subtract.40, ptr addrspace(1) %49, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_235(ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 1
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 64
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 14
  %6 = shl nuw nsw i32 %thread_id.y64, 7
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 7
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %16
  %17 = lshr i32 %11, 7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi i32 [ %17, %entry ], [ %lsr.iv.next111, %y_in_tile.loop_body ]
  %lsr.iv107 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep108, %y_in_tile.loop_body ]
  %lsr.iv105 = phi i32 [ %13, %entry ], [ %lsr.iv.next106, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.089 = phi i32 [ %thread_id.y64, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.13.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.13.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.089, 32
  %18 = and i32 %lsr.iv, 126
  %19 = and i32 %lsr.iv110, 33554304
  %20 = or i32 %19, %y_in_tile.invar_address.089
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %21, i64 %22
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %23 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg091, i64 0, i64 %21, i64 %22
  %Arg_0.199 = getelementptr inbounds float, ptr addrspace(1) %23, i64 192
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.199, align 8, !invariant.load !267
  %24 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.13.i = fadd float %partial_reduction_result63.sroa.0.087, %24
  %scevgep109 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 -4
  %25 = load <2 x float>, ptr addrspace(1) %scevgep109, align 8, !invariant.load !267
  %Arg_1.26112 = extractelement <2 x float> %25, i32 0
  %Arg_1.222113 = extractelement <2 x float> %25, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26112, 0.000000e+00
  %26 = select i1 %compare.58, float %Arg_0.14, float 0.000000e+00
  %27 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %21, i64 %22
  store float %26, ptr addrspace(1) %27, align 8
  %28 = add i32 %lsr.iv, 1
  %29 = and i32 %28, 127
  %30 = and i32 %lsr.iv105, 33554304
  %31 = or i32 %30, %y_in_tile.invar_address.089
  %32 = zext i32 %31 to i64
  %33 = zext i32 %29 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg193, i64 0, i64 %32, i64 %33
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %34 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg091, i64 0, i64 %32, i64 %33
  %Arg_0.118100 = getelementptr inbounds float, ptr addrspace(1) %34, i64 192
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118100, align 4, !invariant.load !267
  %35 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.13.i76 = fadd float %partial_reduction_result63.sroa.4.088, %35
  %compare.524 = fcmp ogt float %Arg_1.222113, 0.000000e+00
  %36 = select i1 %compare.524, float %Arg_0.119, float 0.000000e+00
  %37 = getelementptr inbounds [8192 x [128 x float]], ptr addrspace(1) %arg397, i64 0, i64 %32, i64 %33
  store float %36, ptr addrspace(1) %37, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 4096
  %lsr.iv.next106 = add nuw nsw i32 %lsr.iv105, 32
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 16384
  %lsr.iv.next111 = add nuw nsw i32 %lsr.iv110, 32
  %38 = icmp ugt i32 %y_in_tile.invar_address.089, 95
  br i1 %38, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %39 = zext i32 %thread_id.x to i64
  %40 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i64 0, i64 0, i64 0, i64 %39, i64 %40
  store float %add.13.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i64 0, i64 0, i64 0, i64 %40, i64 %39
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.13.i77 = fadd float %partial_reduction_result27, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i77, i32 8, i32 31)
  %add.13.i78 = fadd float %add.13.i77, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i78, i32 4, i32 31)
  %add.13.i79 = fadd float %add.13.i78, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i79, i32 2, i32 31)
  %add.13.i80 = fadd float %add.13.i79, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i80, i32 1, i32 31)
  %add.13.i81 = fadd float %add.13.i80, %45
  store float %add.13.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %46 = shl nuw nsw i32 %thread_id.y64, 1
  %47 = icmp eq i32 %thread_id.x, 0
  %48 = zext i32 %2 to i64
  %49 = or i32 %46, %tile_origin.2
  %50 = zext i32 %49 to i64
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr addrspace(1) %arg295, i64 0, i64 %48, i64 %50
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %51 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41102 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.13.i76, ptr addrspace(3) %shmem_output_address41102, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43103 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.13.i82 = fadd float %partial_reduction_result45, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i82, i32 8, i32 31)
  %add.13.i83 = fadd float %add.13.i82, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i83, i32 4, i32 31)
  %add.13.i84 = fadd float %add.13.i83, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i84, i32 2, i32 31)
  %add.13.i85 = fadd float %add.13.i84, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i85, i32 1, i32 31)
  %add.13.i86 = fadd float %add.13.i85, %56
  store float %add.13.i86, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  br i1 %51, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.13.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.13.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_304(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture align 128 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture align 128 dereferenceable(512) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg5, ptr noalias nocapture align 128 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg7, ptr noalias nocapture align 128 dereferenceable(512) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture align 128 dereferenceable(512) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg11, ptr noalias nocapture align 128 dereferenceable(512) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg13, ptr noalias nocapture align 128 dereferenceable(512) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg15, ptr noalias nocapture align 128 dereferenceable(512) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg17, ptr noalias nocapture align 128 dereferenceable(512) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg19, ptr noalias nocapture align 128 dereferenceable(512) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg23, ptr noalias nocapture align 128 dereferenceable(512) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg25, ptr noalias nocapture align 128 dereferenceable(512) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg27, ptr noalias nocapture align 128 dereferenceable(512) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg29, ptr noalias nocapture align 128 dereferenceable(512) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg31, ptr noalias nocapture align 128 dereferenceable(512) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg35, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg37, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg39, ptr noalias nocapture readonly align 128 dereferenceable(512) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(512) %arg45) local_unnamed_addr #6 {
entry:
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.43 = fmul float %4, %6
  %subtract.44 = fsub float %3, %multiply.43
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4
  %multiply.45 = fmul float %4, %10
  %subtract.46 = fsub float %8, %multiply.45
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4
  %multiply.47 = fmul float %4, %14
  %subtract.48 = fsub float %12, %multiply.47
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4
  %multiply.49 = fmul float %4, %18
  %subtract.50 = fsub float %16, %multiply.49
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4
  %multiply.51 = fmul float %4, %22
  %subtract.52 = fsub float %20, %multiply.51
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4
  %multiply.53 = fmul float %4, %26
  %subtract.54 = fsub float %24, %multiply.53
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4
  %multiply.55 = fmul float %4, %30
  %subtract.56 = fsub float %28, %multiply.55
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4
  %multiply.57 = fmul float %4, %34
  %subtract.58 = fsub float %32, %multiply.57
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4
  %multiply.59 = fmul float %4, %38
  %subtract.60 = fsub float %36, %multiply.59
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  %42 = load float, ptr addrspace(1) %41, align 4
  %multiply.61 = fmul float %4, %42
  %subtract.62 = fsub float %40, %multiply.61
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %multiply.63 = fmul float %4, %46
  %subtract.64 = fsub float %44, %multiply.63
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  %50 = load float, ptr addrspace(1) %49, align 4
  %multiply.65 = fmul float %4, %50
  %subtract.66 = fsub float %48, %multiply.65
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  %52 = load float, ptr addrspace(1) %51, align 4, !invariant.load !267
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  %54 = load float, ptr addrspace(1) %53, align 4
  %multiply.67 = fmul float %4, %54
  %subtract.68 = fsub float %52, %multiply.67
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %1
  %58 = load float, ptr addrspace(1) %57, align 4
  %multiply.69 = fmul float %4, %58
  %subtract.70 = fsub float %56, %multiply.69
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %1
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %1
  %62 = load float, ptr addrspace(1) %61, align 4
  %multiply.71 = fmul float %4, %62
  %subtract.72 = fsub float %60, %multiply.71
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %1
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %1
  %66 = load float, ptr addrspace(1) %65, align 4
  %multiply.73 = fmul float %4, %66
  %subtract.74 = fsub float %64, %multiply.73
  %67 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %1
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %1
  %70 = load float, ptr addrspace(1) %69, align 4, !invariant.load !267
  %multiply.75 = fmul float %4, %70
  %subtract.76 = fsub float %68, %multiply.75
  %71 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %1
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %1
  %74 = load float, ptr addrspace(1) %73, align 4, !invariant.load !267
  %multiply.77 = fmul float %4, %74
  %subtract.78 = fsub float %72, %multiply.77
  %75 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %1
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %1
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %multiply.79 = fmul float %4, %78
  %subtract.80 = fsub float %76, %multiply.79
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %1
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %1
  %82 = load float, ptr addrspace(1) %81, align 4, !invariant.load !267
  %multiply.81 = fmul float %4, %82
  %subtract.82 = fsub float %80, %multiply.81
  %83 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %1
  store float %subtract.44, ptr addrspace(1) %83, align 4
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %1
  store float %subtract.46, ptr addrspace(1) %84, align 4
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %1
  store float %subtract.48, ptr addrspace(1) %85, align 4
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %1
  store float %subtract.50, ptr addrspace(1) %86, align 4
  store float %subtract.52, ptr addrspace(1) %49, align 4
  store float %subtract.54, ptr addrspace(1) %53, align 4
  store float %subtract.56, ptr addrspace(1) %57, align 4
  store float %subtract.58, ptr addrspace(1) %61, align 4
  store float %subtract.60, ptr addrspace(1) %65, align 4
  store float %subtract.62, ptr addrspace(1) %9, align 4
  store float %subtract.64, ptr addrspace(1) %13, align 4
  store float %subtract.66, ptr addrspace(1) %17, align 4
  store float %subtract.68, ptr addrspace(1) %21, align 4
  store float %subtract.70, ptr addrspace(1) %25, align 4
  store float %subtract.72, ptr addrspace(1) %29, align 4
  store float %subtract.74, ptr addrspace(1) %33, align 4
  store float %subtract.76, ptr addrspace(1) %37, align 4
  store float %subtract.78, ptr addrspace(1) %41, align 4
  store float %subtract.80, ptr addrspace(1) %5, align 4
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %1
  store float %subtract.82, ptr addrspace(1) %87, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_232(ptr noalias nocapture readonly align 16 dereferenceable(512) %arg0, ptr noalias nocapture align 128 dereferenceable(512) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg3, ptr noalias nocapture align 128 dereferenceable(512) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg5, ptr noalias nocapture align 128 dereferenceable(512) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg7, ptr noalias nocapture align 128 dereferenceable(512) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg9, ptr noalias nocapture align 128 dereferenceable(512) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg11, ptr noalias nocapture align 128 dereferenceable(512) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg13, ptr noalias nocapture align 128 dereferenceable(512) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg15, ptr noalias nocapture align 128 dereferenceable(512) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg17, ptr noalias nocapture align 128 dereferenceable(512) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg19, ptr noalias nocapture align 128 dereferenceable(512) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg21, ptr noalias nocapture align 128 dereferenceable(512) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg23, ptr noalias nocapture align 128 dereferenceable(512) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg25, ptr noalias nocapture align 128 dereferenceable(512) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg27, ptr noalias nocapture align 128 dereferenceable(512) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg29, ptr noalias nocapture align 128 dereferenceable(512) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg31, ptr noalias nocapture align 128 dereferenceable(512) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg33, ptr noalias nocapture align 128 dereferenceable(512) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg35, ptr noalias nocapture align 128 dereferenceable(512) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg37, ptr noalias nocapture align 128 dereferenceable(512) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(512) %arg39, ptr noalias nocapture align 128 dereferenceable(512) %arg40) local_unnamed_addr #6 {
entry:
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.43 = fmul float %4, %6
  %subtract.44 = fsub float %3, %multiply.43
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4
  %multiply.45 = fmul float %4, %10
  %subtract.46 = fsub float %8, %multiply.45
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4
  %multiply.47 = fmul float %4, %14
  %subtract.48 = fsub float %12, %multiply.47
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4
  %multiply.49 = fmul float %4, %18
  %subtract.50 = fsub float %16, %multiply.49
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4
  %multiply.51 = fmul float %4, %22
  %subtract.52 = fsub float %20, %multiply.51
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4
  %multiply.53 = fmul float %4, %26
  %subtract.54 = fsub float %24, %multiply.53
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4
  %multiply.55 = fmul float %4, %30
  %subtract.56 = fsub float %28, %multiply.55
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4
  %multiply.57 = fmul float %4, %34
  %subtract.58 = fsub float %32, %multiply.57
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4
  %multiply.59 = fmul float %4, %38
  %subtract.60 = fsub float %36, %multiply.59
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  %42 = load float, ptr addrspace(1) %41, align 4
  %multiply.61 = fmul float %4, %42
  %subtract.62 = fsub float %40, %multiply.61
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  %46 = load float, ptr addrspace(1) %45, align 4
  %multiply.63 = fmul float %4, %46
  %subtract.64 = fsub float %44, %multiply.63
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  %50 = load float, ptr addrspace(1) %49, align 4
  %multiply.65 = fmul float %4, %50
  %subtract.66 = fsub float %48, %multiply.65
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  %52 = load float, ptr addrspace(1) %51, align 4, !invariant.load !267
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  %54 = load float, ptr addrspace(1) %53, align 4
  %multiply.67 = fmul float %4, %54
  %subtract.68 = fsub float %52, %multiply.67
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %1
  %58 = load float, ptr addrspace(1) %57, align 4
  %multiply.69 = fmul float %4, %58
  %subtract.70 = fsub float %56, %multiply.69
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %1
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %1
  %62 = load float, ptr addrspace(1) %61, align 4
  %multiply.71 = fmul float %4, %62
  %subtract.72 = fsub float %60, %multiply.71
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %1
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %1
  %66 = load float, ptr addrspace(1) %65, align 4
  %multiply.73 = fmul float %4, %66
  %subtract.74 = fsub float %64, %multiply.73
  %67 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %1
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %1
  %70 = load float, ptr addrspace(1) %69, align 4
  %multiply.75 = fmul float %4, %70
  %subtract.76 = fsub float %68, %multiply.75
  %71 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %1
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %1
  %74 = load float, ptr addrspace(1) %73, align 4
  %multiply.77 = fmul float %4, %74
  %subtract.78 = fsub float %72, %multiply.77
  %75 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %1
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %1
  %78 = load float, ptr addrspace(1) %77, align 4
  %multiply.79 = fmul float %4, %78
  %subtract.80 = fsub float %76, %multiply.79
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %1
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %1
  %82 = load float, ptr addrspace(1) %81, align 4
  %multiply.81 = fmul float %4, %82
  %subtract.82 = fsub float %80, %multiply.81
  store float %subtract.44, ptr addrspace(1) %49, align 4
  store float %subtract.46, ptr addrspace(1) %53, align 4
  store float %subtract.48, ptr addrspace(1) %57, align 4
  store float %subtract.50, ptr addrspace(1) %61, align 4
  store float %subtract.52, ptr addrspace(1) %65, align 4
  store float %subtract.54, ptr addrspace(1) %69, align 4
  store float %subtract.56, ptr addrspace(1) %73, align 4
  store float %subtract.58, ptr addrspace(1) %77, align 4
  store float %subtract.60, ptr addrspace(1) %81, align 4
  store float %subtract.62, ptr addrspace(1) %45, align 4
  store float %subtract.64, ptr addrspace(1) %29, align 4
  store float %subtract.66, ptr addrspace(1) %33, align 4
  store float %subtract.68, ptr addrspace(1) %37, align 4
  store float %subtract.70, ptr addrspace(1) %41, align 4
  store float %subtract.72, ptr addrspace(1) %5, align 4
  store float %subtract.74, ptr addrspace(1) %9, align 4
  store float %subtract.76, ptr addrspace(1) %13, align 4
  store float %subtract.78, ptr addrspace(1) %17, align 4
  store float %subtract.80, ptr addrspace(1) %21, align 4
  store float %subtract.82, ptr addrspace(1) %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_341(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(10485760) %arg3) local_unnamed_addr #5 {
entry:
  %arg352 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !296
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 320
  %5 = mul i32 %4, 320
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 320
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 320
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 320
  %9 = icmp ult i32 %.decomposed, 64
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 320
  %11 = shl nuw nsw i32 %10, 6
  %12 = add nuw nsw i32 %11, %.decomposed
  br label %concatenate.4.merge

concatenate.pivot.192.:                           ; preds = %entry
  %13 = icmp ult i32 %.decomposed, 192
  %14 = udiv i32 %linear_index_base, 320
  %15 = shl nuw nsw i32 %14, 7
  br i1 %13, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  %16 = add nsw i32 %.decomposed, -64
  %17 = add nuw nsw i32 %16, %15
  br label %concatenate.4.merge

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  %18 = add nsw i32 %.decomposed, -192
  %19 = add nuw nsw i32 %18, %15
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.sink39 = phi i32 [ %19, %concatenate.pivot.192.2 ], [ %17, %concatenate.pivot.64.1 ], [ %12, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.2 ], [ %arg148, %concatenate.pivot.64.1 ], [ %arg046, %concatenate.pivot.0. ]
  %20 = zext i32 %.sink39 to i64
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %20
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = zext i32 %linear_index_base to i64
  %24 = getelementptr float, ptr addrspace(1) %arg352, i64 %23
  store float %22, ptr addrspace(1) %24, align 16
  %25 = icmp ult i32 %6, 64
  br i1 %25, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %26 = udiv i32 %linear_index_base, 320
  %27 = shl nuw nsw i32 %26, 6
  %28 = add nuw nsw i32 %27, %6
  br label %concatenate.4.merge3

concatenate.pivot.192.9:                          ; preds = %concatenate.4.merge
  %29 = icmp ult i32 %6, 192
  %30 = udiv i32 %linear_index_base, 320
  %31 = shl nuw nsw i32 %30, 7
  br i1 %29, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %32 = add nsw i32 %6, -64
  %33 = add nuw nsw i32 %32, %31
  br label %concatenate.4.merge3

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  %34 = add nsw i32 %6, -192
  %35 = add nuw nsw i32 %34, %31
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.192.11, %concatenate.pivot.64.10, %concatenate.pivot.0.8
  %.sink41 = phi i32 [ %35, %concatenate.pivot.192.11 ], [ %33, %concatenate.pivot.64.10 ], [ %28, %concatenate.pivot.0.8 ]
  %arg2.sink40 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.11 ], [ %arg148, %concatenate.pivot.64.10 ], [ %arg046, %concatenate.pivot.0.8 ]
  %36 = zext i32 %.sink41 to i64
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink40, i64 %36
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %39 = getelementptr inbounds float, ptr addrspace(1) %24, i64 1
  store float %38, ptr addrspace(1) %39, align 4
  %40 = icmp ult i32 %7, 64
  br i1 %40, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %41 = udiv i32 %linear_index_base, 320
  %42 = shl nuw nsw i32 %41, 6
  %43 = add nuw nsw i32 %42, %7
  br label %concatenate.4.merge12

concatenate.pivot.192.18:                         ; preds = %concatenate.4.merge3
  %44 = icmp ult i32 %7, 192
  %45 = udiv i32 %linear_index_base, 320
  %46 = shl nuw nsw i32 %45, 7
  br i1 %44, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  %47 = add nsw i32 %7, -64
  %48 = add nuw nsw i32 %47, %46
  br label %concatenate.4.merge12

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  %49 = add nsw i32 %7, -192
  %50 = add nuw nsw i32 %49, %46
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.192.20, %concatenate.pivot.64.19, %concatenate.pivot.0.17
  %.sink43 = phi i32 [ %50, %concatenate.pivot.192.20 ], [ %48, %concatenate.pivot.64.19 ], [ %43, %concatenate.pivot.0.17 ]
  %arg2.sink42 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.20 ], [ %arg148, %concatenate.pivot.64.19 ], [ %arg046, %concatenate.pivot.0.17 ]
  %51 = zext i32 %.sink43 to i64
  %52 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink42, i64 %51
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %54 = getelementptr inbounds float, ptr addrspace(1) %24, i64 2
  store float %53, ptr addrspace(1) %54, align 8
  %55 = icmp ult i32 %8, 64
  br i1 %55, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %56 = udiv i32 %linear_index_base, 320
  %57 = shl nuw nsw i32 %56, 6
  %58 = add nuw nsw i32 %57, %8
  br label %concatenate.4.merge21

concatenate.pivot.192.27:                         ; preds = %concatenate.4.merge12
  %59 = icmp ult i32 %8, 192
  %60 = shl nuw nsw i32 %4, 7
  br i1 %59, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  %61 = add nsw i32 %8, -64
  %62 = add nuw nsw i32 %61, %60
  br label %concatenate.4.merge21

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  %63 = add nsw i32 %8, -192
  %64 = add nuw nsw i32 %63, %60
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.192.29, %concatenate.pivot.64.28, %concatenate.pivot.0.26
  %.sink45 = phi i32 [ %64, %concatenate.pivot.192.29 ], [ %62, %concatenate.pivot.64.28 ], [ %58, %concatenate.pivot.0.26 ]
  %arg2.sink44 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.29 ], [ %arg148, %concatenate.pivot.64.28 ], [ %arg046, %concatenate.pivot.0.26 ]
  %65 = zext i32 %.sink45 to i64
  %66 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink44, i64 %65
  %67 = load float, ptr addrspace(1) %66, align 4, !invariant.load !267
  %68 = getelementptr inbounds float, ptr addrspace(1) %24, i64 3
  store float %67, ptr addrspace(1) %68, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_185(ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 192
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 15
  %6 = shl nuw nsw i32 %thread_id.y64, 8
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 8
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %16
  %17 = lshr i32 %11, 8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi i32 [ %17, %entry ], [ %lsr.iv.next111, %y_in_tile.loop_body ]
  %lsr.iv107 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep108, %y_in_tile.loop_body ]
  %lsr.iv105 = phi i32 [ %13, %entry ], [ %lsr.iv.next106, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.089 = phi i32 [ %thread_id.y64, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.13.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.13.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.089, 32
  %18 = and i32 %lsr.iv, 254
  %19 = and i32 %lsr.iv110, 16777088
  %20 = or i32 %19, %y_in_tile.invar_address.089
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %21, i64 %22
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %23 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg091, i64 0, i64 %21, i64 %22
  %Arg_0.199 = getelementptr inbounds float, ptr addrspace(1) %23, i64 96
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.199, align 8, !invariant.load !267
  %24 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.13.i = fadd float %partial_reduction_result63.sroa.0.087, %24
  %scevgep109 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 -4
  %25 = load <2 x float>, ptr addrspace(1) %scevgep109, align 8, !invariant.load !267
  %Arg_1.26112 = extractelement <2 x float> %25, i32 0
  %Arg_1.222113 = extractelement <2 x float> %25, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26112, 0.000000e+00
  %26 = select i1 %compare.58, float %Arg_0.14, float 0.000000e+00
  %27 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %21, i64 %22
  store float %26, ptr addrspace(1) %27, align 8
  %28 = add i32 %lsr.iv, 1
  %29 = and i32 %28, 255
  %30 = and i32 %lsr.iv105, 16777088
  %31 = or i32 %30, %y_in_tile.invar_address.089
  %32 = zext i32 %31 to i64
  %33 = zext i32 %29 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %32, i64 %33
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %34 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg091, i64 0, i64 %32, i64 %33
  %Arg_0.118100 = getelementptr inbounds float, ptr addrspace(1) %34, i64 96
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118100, align 4, !invariant.load !267
  %35 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.13.i76 = fadd float %partial_reduction_result63.sroa.4.088, %35
  %compare.524 = fcmp ogt float %Arg_1.222113, 0.000000e+00
  %36 = select i1 %compare.524, float %Arg_0.119, float 0.000000e+00
  %37 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %32, i64 %33
  store float %36, ptr addrspace(1) %37, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 8192
  %lsr.iv.next106 = add nuw nsw i32 %lsr.iv105, 32
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 32768
  %lsr.iv.next111 = add nuw nsw i32 %lsr.iv110, 32
  %38 = icmp ugt i32 %y_in_tile.invar_address.089, 95
  br i1 %38, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %39 = zext i32 %thread_id.x to i64
  %40 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i64 0, i64 0, i64 0, i64 %39, i64 %40
  store float %add.13.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i64 0, i64 0, i64 0, i64 %40, i64 %39
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.13.i77 = fadd float %partial_reduction_result27, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i77, i32 8, i32 31)
  %add.13.i78 = fadd float %add.13.i77, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i78, i32 4, i32 31)
  %add.13.i79 = fadd float %add.13.i78, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i79, i32 2, i32 31)
  %add.13.i80 = fadd float %add.13.i79, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i80, i32 1, i32 31)
  %add.13.i81 = fadd float %add.13.i80, %45
  store float %add.13.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %46 = shl nuw nsw i32 %thread_id.y64, 1
  %47 = icmp eq i32 %thread_id.x, 0
  %48 = zext i32 %2 to i64
  %49 = or i32 %46, %tile_origin.2
  %50 = zext i32 %49 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg295, i64 0, i64 %48, i64 %50
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %51 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41102 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.13.i76, ptr addrspace(3) %shmem_output_address41102, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43103 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.13.i82 = fadd float %partial_reduction_result45, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i82, i32 8, i32 31)
  %add.13.i83 = fadd float %add.13.i82, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i83, i32 4, i32 31)
  %add.13.i84 = fadd float %add.13.i83, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i84, i32 2, i32 31)
  %add.13.i85 = fadd float %add.13.i84, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i85, i32 1, i32 31)
  %add.13.i86 = fadd float %add.13.i85, %56
  store float %add.13.i86, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  br i1 %51, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.13.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.13.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_756(ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg10) local_unnamed_addr #0 {
entry:
  %arg10562 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9560 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8558 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7556 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6554 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5552 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4550 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3548 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2546 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1544 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0542 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !290
  switch i32 %0, label %common.ret [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
    i32 4, label %entry.reduce-group-4-true_crit_edge
  ]

entry.reduce-group-4-true_crit_edge:              ; preds = %entry
  %Arg_1.2285.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre534 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %.pre536 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre538 = and i32 %.pre536, 31
  %.pre539 = lshr i32 %.pre536, 5
  %.pre540 = shl nuw nsw i32 %.pre534, 6
  %.pre585 = shl nuw nsw i32 %.pre538, 1
  %.pre587 = or i32 %.pre585, %.pre540
  %.pre589 = zext i32 %.pre587 to i64
  %.pre626 = add nuw nsw i32 %.pre539, -32
  %.pre628 = zext i32 %.pre539 to i64
  %.pre630 = shl nuw nsw i64 %.pre589, 2
  br label %y_in_tile.loop_body297.lr.ph

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %Arg_1.2206.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre527 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %.pre529 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre531 = and i32 %.pre529, 31
  %.pre532 = lshr i32 %.pre529, 5
  %.pre533 = shl nuw nsw i32 %.pre527, 6
  %.pre580 = shl nuw nsw i32 %.pre531, 1
  %.pre581 = or i32 %.pre580, %.pre533
  %.pre583 = zext i32 %.pre581 to i64
  %.pre620 = add nuw nsw i32 %.pre532, -32
  %.pre622 = zext i32 %.pre532 to i64
  %.pre624 = shl nuw nsw i64 %.pre583, 2
  %1 = shl nuw nsw i64 %.pre622, 10
  %2 = add i64 %1, %.pre624
  %3 = add i64 %2, 4
  %scevgep610 = getelementptr i8, ptr addrspace(1) %arg4550, i64 %3
  br label %y_in_tile.loop_body218

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %Arg_1.2127.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %.pre522 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre524 = and i32 %.pre522, 31
  %.pre525 = lshr i32 %.pre522, 5
  %.pre526 = shl nuw nsw i32 %.pre, 6
  %4 = shl nuw nsw i32 %.pre524, 1
  %5 = or i32 %4, %.pre526
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i32 %.pre525, -32
  %8 = zext i32 %.pre522 to i64
  %9 = lshr i64 %8, 5
  %10 = shl nuw nsw i64 %9, 10
  %11 = shl nuw nsw i64 %6, 2
  %12 = add i64 %10, %11
  %13 = add i64 %12, 4
  %scevgep616 = getelementptr i8, ptr addrspace(1) %arg3548, i64 %13
  br label %y_in_tile.loop_body139

common.ret.sink.split:                            ; preds = %reduction_write_output-after337, %reduction_write_output-after100, %reduction_write_output-after
  %.sink = phi i32 [ %39, %reduction_write_output-after ], [ %70, %reduction_write_output-after100 ], [ %131, %reduction_write_output-after337 ]
  %arg7.sink = phi ptr addrspace(1) [ %arg6554, %reduction_write_output-after ], [ %arg7556, %reduction_write_output-after100 ], [ %arg10562, %reduction_write_output-after337 ]
  %add.15.i461.sink = phi float [ %add.10.i450, %reduction_write_output-after ], [ %add.15.i461, %reduction_write_output-after100 ], [ %add.30.i494, %reduction_write_output-after337 ]
  %14 = or i32 %.sink, 1
  %15 = zext i32 %14 to i64
  %output_element_address123 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg7.sink, i64 0, i64 %15
  store float %add.15.i461.sink, ptr addrspace(1) %output_element_address123, align 4
  br label %common.ret

common.ret:                                       ; preds = %reduction_write_output-after201, %common.ret.sink.split, %reduction_write_output-after100, %reduction_write_output-after, %reduction_write_output-after337, %reduction_write_output-after280, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %17, 31
  %thread_id.y380 = lshr i32 %17, 5
  %tile_origin.2 = shl nuw nsw i32 %16, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %18 = shl nuw nsw i32 %thread_id.x, 1
  %19 = or i32 %18, %tile_origin.2
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i32 %thread_id.y380, -32
  %22 = zext i32 %17 to i64
  %23 = lshr i64 %22, 5
  %24 = shl nuw nsw i64 %23, 10
  %25 = shl nuw nsw i64 %20, 2
  %26 = add i64 %24, %25
  %27 = add i64 %26, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0542, i64 %27
  br label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %reduce-group-0-true, %y_in_tile.loop_body
  %lsr.iv591 = phi ptr addrspace(1) [ %scevgep, %reduce-group-0-true ], [ %scevgep592, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %21, %reduce-group-0-true ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.0.0515 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.4.0514 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i440, %y_in_tile.loop_body ]
  %scevgep593 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 -4
  %28 = load <2 x float>, ptr addrspace(1) %scevgep593, align 8, !invariant.load !267
  %Arg_0.13632 = extractelement <2 x float> %28, i32 0
  %Arg_0.18633 = extractelement <2 x float> %28, i32 1
  %add.10.i = fadd float %partial_reduction_result375.sroa.0.0515, %Arg_0.13632
  %add.10.i440 = fadd float %partial_reduction_result375.sroa.4.0514, %Arg_0.18633
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep592 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 32768
  %29 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %29, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %30 = zext i32 %thread_id.x to i64
  %31 = zext i32 %thread_id.y380 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i64 0, i64 0, i64 0, i64 %30, i64 %31
  store float %add.10.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i64 0, i64 0, i64 0, i64 %31, i64 %30
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.10.i441 = fadd float %partial_reduction_result10, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i441, i32 8, i32 31)
  %add.10.i442 = fadd float %add.10.i441, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i442, i32 4, i32 31)
  %add.10.i443 = fadd float %add.10.i442, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i443, i32 2, i32 31)
  %add.10.i444 = fadd float %add.10.i443, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i444, i32 1, i32 31)
  %add.10.i445 = fadd float %add.10.i444, %36
  store float %add.10.i445, ptr addrspace(3) %shmem_transposed_addr, align 4
  %37 = shl nuw nsw i32 %thread_id.y380, 1
  %38 = icmp eq i32 %thread_id.x, 0
  %39 = or i32 %37, %tile_origin.2
  %40 = zext i32 %39 to i64
  %output_element_address = getelementptr inbounds [256 x float], ptr addrspace(1) %arg6554, i64 0, i64 %40
  br i1 %38, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %41 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address24565 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.10.i440, ptr addrspace(3) %shmem_output_address24565, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26566 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.10.i446 = fadd float %partial_reduction_result28, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i446, i32 8, i32 31)
  %add.10.i447 = fadd float %add.10.i446, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i447, i32 4, i32 31)
  %add.10.i448 = fadd float %add.10.i447, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i448, i32 2, i32 31)
  %add.10.i449 = fadd float %add.10.i448, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i449, i32 1, i32 31)
  %add.10.i450 = fadd float %add.10.i449, %46
  store float %add.10.i450, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  br i1 %41, label %common.ret.sink.split, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.10.i445, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %entry
  %47 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %48 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x50 = and i32 %48, 31
  %thread_id.y51379 = lshr i32 %48, 5
  %tile_origin.257 = shl nuw nsw i32 %47, 6
  %Arg_1.248 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %49 = shl nuw nsw i32 %thread_id.x50, 1
  %50 = or i32 %49, %tile_origin.257
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i32 %thread_id.y51379, -32
  %53 = zext i32 %48 to i64
  %54 = lshr i64 %53, 5
  %55 = shl nuw nsw i64 %54, 10
  %56 = shl nuw nsw i64 %51, 2
  %57 = add i64 %55, %56
  %58 = add i64 %57, 4
  %scevgep596 = getelementptr i8, ptr addrspace(1) %arg2546, i64 %58
  br label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %reduce-group-1-true, %y_in_tile.loop_body60
  %lsr.iv597 = phi ptr addrspace(1) [ %scevgep596, %reduce-group-1-true ], [ %scevgep598, %y_in_tile.loop_body60 ]
  %lsr.iv594 = phi i32 [ %52, %reduce-group-1-true ], [ %lsr.iv.next595, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.4.0496 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i451, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.0.0495 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i, %y_in_tile.loop_body60 ]
  %scevgep599 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 -4
  %59 = load <2 x float>, ptr addrspace(1) %scevgep599, align 8, !invariant.load !267
  %Arg_2.373634 = extractelement <2 x float> %59, i32 0
  %Arg_2.379635 = extractelement <2 x float> %59, i32 1
  %add.15.i = fadd float %partial_reduction_result47374.sroa.0.0495, %Arg_2.373634
  %add.15.i451 = fadd float %partial_reduction_result47374.sroa.4.0496, %Arg_2.379635
  %lsr.iv.next595 = add nsw i32 %lsr.iv594, 32
  %scevgep598 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 32768
  %60 = icmp ugt i32 %lsr.iv.next595, 31
  br i1 %60, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_body60
  %61 = zext i32 %thread_id.x50 to i64
  %62 = zext i32 %thread_id.y51379 to i64
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i64 0, i64 0, i64 0, i64 %61, i64 %62
  store float %add.15.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i64 0, i64 0, i64 0, i64 %62, i64 %61
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.15.i452 = fadd float %partial_reduction_result85, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i452, i32 8, i32 31)
  %add.15.i453 = fadd float %add.15.i452, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i453, i32 4, i32 31)
  %add.15.i454 = fadd float %add.15.i453, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i454, i32 2, i32 31)
  %add.15.i455 = fadd float %add.15.i454, %66
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i455, i32 1, i32 31)
  %add.15.i456 = fadd float %add.15.i455, %67
  store float %add.15.i456, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %68 = shl nuw nsw i32 %thread_id.y51379, 1
  %69 = icmp eq i32 %thread_id.x50, 0
  %70 = or i32 %68, %tile_origin.257
  %71 = zext i32 %70 to i64
  %output_element_address101 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg7556, i64 0, i64 %71
  br i1 %69, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %72 = icmp eq i32 %thread_id.x50, 0
  %shmem_output_address103568 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address81, i64 1056
  store float %add.15.i451, ptr addrspace(3) %shmem_output_address103568, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105569 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr83, i64 1056
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  %73 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.15.i457 = fadd float %partial_reduction_result107, %73
  %74 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i457, i32 8, i32 31)
  %add.15.i458 = fadd float %add.15.i457, %74
  %75 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i458, i32 4, i32 31)
  %add.15.i459 = fadd float %add.15.i458, %75
  %76 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i459, i32 2, i32 31)
  %add.15.i460 = fadd float %add.15.i459, %76
  %77 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i460, i32 1, i32 31)
  %add.15.i461 = fadd float %add.15.i460, %77
  store float %add.15.i461, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  br i1 %72, label %common.ret.sink.split, label %common.ret

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  store float %add.15.i456, ptr addrspace(1) %output_element_address101, align 8
  br label %reduction_write_output-after100

y_in_tile.loop_body139:                           ; preds = %entry.reduce-group-2-true_crit_edge, %y_in_tile.loop_body139
  %lsr.iv617 = phi ptr addrspace(1) [ %scevgep616, %entry.reduce-group-2-true_crit_edge ], [ %scevgep618, %y_in_tile.loop_body139 ]
  %lsr.iv614 = phi i32 [ %7, %entry.reduce-group-2-true_crit_edge ], [ %lsr.iv.next615, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.4.0500 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i462, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.0.0499 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i, %y_in_tile.loop_body139 ]
  %scevgep619 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 -4
  %78 = load <2 x float>, ptr addrspace(1) %scevgep619, align 8, !invariant.load !267
  %Arg_3.4152638 = extractelement <2 x float> %78, i32 0
  %Arg_3.4158639 = extractelement <2 x float> %78, i32 1
  %add.20.i = fadd float %partial_reduction_result126373.sroa.0.0499, %Arg_3.4152638
  %add.20.i462 = fadd float %partial_reduction_result126373.sroa.4.0500, %Arg_3.4158639
  %lsr.iv.next615 = add nsw i32 %lsr.iv614, 32
  %scevgep618 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 32768
  %79 = icmp ugt i32 %lsr.iv.next615, 31
  br i1 %79, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_body139
  %80 = zext i32 %.pre524 to i64
  %81 = zext i32 %.pre525 to i64
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i64 0, i64 0, i64 0, i64 %80, i64 %81
  store float %add.20.i, ptr addrspace(3) %shmem_output_address160, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i64 0, i64 0, i64 0, i64 %81, i64 %80
  %partial_reduction_result164 = load float, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  %add.20.i463 = fadd float %partial_reduction_result164, %82
  %83 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i463, i32 8, i32 31)
  %add.20.i464 = fadd float %add.20.i463, %83
  %84 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i464, i32 4, i32 31)
  %add.20.i465 = fadd float %add.20.i464, %84
  %85 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i465, i32 2, i32 31)
  %add.20.i466 = fadd float %add.20.i465, %85
  %86 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i466, i32 1, i32 31)
  %add.20.i467 = fadd float %add.20.i466, %86
  store float %add.20.i467, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %87 = shl nuw nsw i32 %.pre525, 1
  %88 = icmp eq i32 %.pre524, 0
  %89 = or i32 %87, %.pre526
  %90 = zext i32 %89 to i64
  %output_element_address180 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg8558, i64 0, i64 %90
  br i1 %88, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %91 = icmp eq i32 %.pre524, 0
  %shmem_output_address182571 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address160, i64 1056
  store float %add.20.i462, ptr addrspace(3) %shmem_output_address182571, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184572 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr162, i64 1056
  %partial_reduction_result186 = load float, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  %add.20.i468 = fadd float %partial_reduction_result186, %92
  %93 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i468, i32 8, i32 31)
  %add.20.i469 = fadd float %add.20.i468, %93
  %94 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i469, i32 4, i32 31)
  %add.20.i470 = fadd float %add.20.i469, %94
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i470, i32 2, i32 31)
  %add.20.i471 = fadd float %add.20.i470, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i471, i32 1, i32 31)
  %add.20.i472 = fadd float %add.20.i471, %96
  store float %add.20.i472, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  br i1 %91, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %common.ret

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  store float %add.20.i467, ptr addrspace(1) %output_element_address180, align 8
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address180, i64 4
  store float %add.20.i472, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after201

y_in_tile.loop_body218:                           ; preds = %entry.reduce-group-3-true_crit_edge, %y_in_tile.loop_body218
  %lsr.iv611 = phi ptr addrspace(1) [ %scevgep610, %entry.reduce-group-3-true_crit_edge ], [ %scevgep612, %y_in_tile.loop_body218 ]
  %lsr.iv608 = phi i32 [ %.pre620, %entry.reduce-group-3-true_crit_edge ], [ %lsr.iv.next609, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.4.0505 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i473, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.0.0504 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i, %y_in_tile.loop_body218 ]
  %scevgep613 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 -4
  %97 = load <2 x float>, ptr addrspace(1) %scevgep613, align 8, !invariant.load !267
  %Arg_4.5231636 = extractelement <2 x float> %97, i32 0
  %Arg_4.5237637 = extractelement <2 x float> %97, i32 1
  %add.25.i = fadd float %partial_reduction_result205372.sroa.0.0504, %Arg_4.5231636
  %add.25.i473 = fadd float %partial_reduction_result205372.sroa.4.0505, %Arg_4.5237637
  %lsr.iv.next609 = add nsw i32 %lsr.iv608, 32
  %scevgep612 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 32768
  %98 = icmp ugt i32 %lsr.iv.next609, 31
  br i1 %98, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_body218
  %99 = zext i32 %.pre531 to i64
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i64 0, i64 0, i64 0, i64 %99, i64 %.pre622
  store float %add.25.i, ptr addrspace(3) %shmem_output_address239, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i64 0, i64 0, i64 0, i64 %.pre622, i64 %99
  %partial_reduction_result243 = load float, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %100 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  %add.25.i474 = fadd float %partial_reduction_result243, %100
  %101 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i474, i32 8, i32 31)
  %add.25.i475 = fadd float %add.25.i474, %101
  %102 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i475, i32 4, i32 31)
  %add.25.i476 = fadd float %add.25.i475, %102
  %103 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i476, i32 2, i32 31)
  %add.25.i477 = fadd float %add.25.i476, %103
  %104 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i477, i32 1, i32 31)
  %add.25.i478 = fadd float %add.25.i477, %104
  store float %add.25.i478, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %105 = shl nuw nsw i32 %.pre532, 1
  %106 = icmp eq i32 %.pre531, 0
  %107 = or i32 %105, %.pre533
  %108 = zext i32 %107 to i64
  %output_element_address259 = getelementptr [256 x float], ptr addrspace(1) %arg9560, i64 0, i64 %108
  br i1 %106, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %109 = icmp eq i32 %.pre531, 0
  %shmem_output_address261575 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address239, i64 1056
  store float %add.25.i473, ptr addrspace(3) %shmem_output_address261575, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263576 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr241, i64 1056
  %partial_reduction_result265 = load float, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  %110 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  %add.25.i479 = fadd float %partial_reduction_result265, %110
  %111 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i479, i32 8, i32 31)
  %add.25.i480 = fadd float %add.25.i479, %111
  %112 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i480, i32 4, i32 31)
  %add.25.i481 = fadd float %add.25.i480, %112
  %113 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i481, i32 2, i32 31)
  %add.25.i482 = fadd float %add.25.i481, %113
  %114 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i482, i32 1, i32 31)
  %add.25.i483 = fadd float %add.25.i482, %114
  store float %add.25.i483, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  br i1 %109, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  %115 = icmp eq i32 %0, 4
  br i1 %115, label %y_in_tile.loop_body297.lr.ph, label %common.ret

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  store float %add.25.i478, ptr addrspace(1) %output_element_address259, align 8
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %sunkaddr640 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address259, i64 4
  store float %add.25.i483, ptr addrspace(1) %sunkaddr640, align 4
  br label %reduction_write_output-after280

y_in_tile.loop_body297.lr.ph:                     ; preds = %reduction_write_output-after280, %entry.reduce-group-4-true_crit_edge
  %.pre-phi631 = phi i64 [ %.pre630, %entry.reduce-group-4-true_crit_edge ], [ %.pre624, %reduction_write_output-after280 ]
  %.pre-phi629 = phi i64 [ %.pre628, %entry.reduce-group-4-true_crit_edge ], [ %.pre622, %reduction_write_output-after280 ]
  %.pre-phi627 = phi i32 [ %.pre626, %entry.reduce-group-4-true_crit_edge ], [ %.pre620, %reduction_write_output-after280 ]
  %.pre-phi590 = phi i64 [ %.pre589, %entry.reduce-group-4-true_crit_edge ], [ %.pre583, %reduction_write_output-after280 ]
  %.pre-phi588 = phi i32 [ %.pre587, %entry.reduce-group-4-true_crit_edge ], [ %.pre581, %reduction_write_output-after280 ]
  %tile_origin.2294.pre-phi = phi i32 [ %.pre540, %entry.reduce-group-4-true_crit_edge ], [ %.pre533, %reduction_write_output-after280 ]
  %thread_id.y288376.pre-phi = phi i32 [ %.pre539, %entry.reduce-group-4-true_crit_edge ], [ %.pre532, %reduction_write_output-after280 ]
  %thread_id.x287.pre-phi = phi i32 [ %.pre538, %entry.reduce-group-4-true_crit_edge ], [ %.pre531, %reduction_write_output-after280 ]
  %Arg_1.2285 = phi float [ %Arg_1.2285.pre, %entry.reduce-group-4-true_crit_edge ], [ %Arg_1.2206.pre, %reduction_write_output-after280 ]
  %116 = or i32 %.pre-phi588, 1
  %117 = zext i32 %116 to i64
  %118 = shl nuw nsw i64 %.pre-phi629, 10
  %119 = add nuw nsw i64 %118, %.pre-phi631
  %scevgep602 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %119
  %120 = shl nuw nsw i64 %117, 2
  %121 = add nuw nsw i64 %118, %120
  %scevgep605 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %121
  br label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_body297.lr.ph, %y_in_tile.loop_body297
  %lsr.iv606 = phi ptr addrspace(1) [ %scevgep605, %y_in_tile.loop_body297.lr.ph ], [ %scevgep607, %y_in_tile.loop_body297 ]
  %lsr.iv603 = phi ptr addrspace(1) [ %scevgep602, %y_in_tile.loop_body297.lr.ph ], [ %scevgep604, %y_in_tile.loop_body297 ]
  %lsr.iv600 = phi i32 [ %.pre-phi627, %y_in_tile.loop_body297.lr.ph ], [ %lsr.iv.next601, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.4.0510 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i484, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.0.0509 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i, %y_in_tile.loop_body297 ]
  %Arg_5.6310 = load float, ptr addrspace(1) %lsr.iv603, align 8, !invariant.load !267
  %add.30.i = fadd float %partial_reduction_result284371.sroa.0.0509, %Arg_5.6310
  %Arg_5.6316 = load float, ptr addrspace(1) %lsr.iv606, align 4, !invariant.load !267
  %add.30.i484 = fadd float %partial_reduction_result284371.sroa.4.0510, %Arg_5.6316
  %lsr.iv.next601 = add nsw i32 %lsr.iv600, 32
  %scevgep604 = getelementptr i8, ptr addrspace(1) %lsr.iv603, i64 32768
  %scevgep607 = getelementptr i8, ptr addrspace(1) %lsr.iv606, i64 32768
  %122 = icmp ugt i32 %lsr.iv.next601, 31
  br i1 %122, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_body297
  %123 = zext i32 %thread_id.x287.pre-phi to i64
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i64 0, i64 0, i64 0, i64 %123, i64 %.pre-phi629
  store float %add.30.i, ptr addrspace(3) %shmem_output_address318, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i64 0, i64 0, i64 0, i64 %.pre-phi629, i64 %123
  %partial_reduction_result322 = load float, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %124 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  %add.30.i485 = fadd float %partial_reduction_result322, %124
  %125 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i485, i32 8, i32 31)
  %add.30.i486 = fadd float %add.30.i485, %125
  %126 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i486, i32 4, i32 31)
  %add.30.i487 = fadd float %add.30.i486, %126
  %127 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i487, i32 2, i32 31)
  %add.30.i488 = fadd float %add.30.i487, %127
  %128 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i488, i32 1, i32 31)
  %add.30.i489 = fadd float %add.30.i488, %128
  store float %add.30.i489, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %129 = shl nuw nsw i32 %thread_id.y288376.pre-phi, 1
  %130 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %131 = or i32 %129, %tile_origin.2294.pre-phi
  %132 = zext i32 %131 to i64
  %output_element_address338 = getelementptr inbounds [256 x float], ptr addrspace(1) %arg10562, i64 0, i64 %132
  br i1 %130, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %133 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %shmem_output_address340578 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address318, i64 1056
  store float %add.30.i484, ptr addrspace(3) %shmem_output_address340578, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342579 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr320, i64 1056
  %partial_reduction_result344 = load float, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  %134 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  %add.30.i490 = fadd float %partial_reduction_result344, %134
  %135 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i490, i32 8, i32 31)
  %add.30.i491 = fadd float %add.30.i490, %135
  %136 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i491, i32 4, i32 31)
  %add.30.i492 = fadd float %add.30.i491, %136
  %137 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i492, i32 2, i32 31)
  %add.30.i493 = fadd float %add.30.i492, %137
  %138 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i493, i32 1, i32 31)
  %add.30.i494 = fadd float %add.30.i493, %138
  store float %add.30.i494, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  br i1 %133, label %common.ret.sink.split, label %common.ret

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  store float %add.30.i489, ptr addrspace(1) %output_element_address338, align 8
  br label %reduction_write_output-after337
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_344(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(11534336) %arg3) local_unnamed_addr #5 {
entry:
  %arg352 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !297
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 352
  %5 = mul i32 %4, 352
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 352
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 352
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 352
  %9 = icmp ult i32 %.decomposed, 32
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 352
  %11 = shl nuw nsw i32 %10, 5
  %12 = add nuw nsw i32 %11, %.decomposed
  br label %concatenate.4.merge

concatenate.pivot.96.:                            ; preds = %entry
  %13 = icmp ult i32 %.decomposed, 96
  %14 = udiv i32 %linear_index_base, 352
  br i1 %13, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  %15 = add nsw i32 %.decomposed, -32
  %16 = shl nuw nsw i32 %14, 6
  %17 = add nuw nsw i32 %15, %16
  br label %concatenate.4.merge

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  %18 = add nsw i32 %.decomposed, -96
  %19 = shl nuw nsw i32 %14, 8
  %20 = add nuw nsw i32 %18, %19
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.sink39 = phi i32 [ %20, %concatenate.pivot.96.2 ], [ %17, %concatenate.pivot.32.1 ], [ %12, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.2 ], [ %arg148, %concatenate.pivot.32.1 ], [ %arg046, %concatenate.pivot.0. ]
  %21 = zext i32 %.sink39 to i64
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = zext i32 %linear_index_base to i64
  %25 = getelementptr float, ptr addrspace(1) %arg352, i64 %24
  store float %23, ptr addrspace(1) %25, align 16
  %26 = icmp ult i32 %6, 32
  br i1 %26, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %27 = udiv i32 %linear_index_base, 352
  %28 = shl nuw nsw i32 %27, 5
  %29 = add nuw nsw i32 %28, %6
  br label %concatenate.4.merge3

concatenate.pivot.96.9:                           ; preds = %concatenate.4.merge
  %30 = icmp ult i32 %6, 96
  %31 = udiv i32 %linear_index_base, 352
  br i1 %30, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  %32 = add nsw i32 %6, -32
  %33 = shl nuw nsw i32 %31, 6
  %34 = add nuw nsw i32 %32, %33
  br label %concatenate.4.merge3

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  %35 = add nsw i32 %6, -96
  %36 = shl nuw nsw i32 %31, 8
  %37 = add nuw nsw i32 %35, %36
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.96.11, %concatenate.pivot.32.10, %concatenate.pivot.0.8
  %.sink41 = phi i32 [ %37, %concatenate.pivot.96.11 ], [ %34, %concatenate.pivot.32.10 ], [ %29, %concatenate.pivot.0.8 ]
  %arg2.sink40 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.11 ], [ %arg148, %concatenate.pivot.32.10 ], [ %arg046, %concatenate.pivot.0.8 ]
  %38 = zext i32 %.sink41 to i64
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink40, i64 %38
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %25, i64 1
  store float %40, ptr addrspace(1) %41, align 4
  %42 = icmp ult i32 %7, 32
  br i1 %42, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %43 = udiv i32 %linear_index_base, 352
  %44 = shl nuw nsw i32 %43, 5
  %45 = add nuw nsw i32 %44, %7
  br label %concatenate.4.merge12

concatenate.pivot.96.18:                          ; preds = %concatenate.4.merge3
  %46 = icmp ult i32 %7, 96
  %47 = udiv i32 %linear_index_base, 352
  br i1 %46, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  %48 = add nsw i32 %7, -32
  %49 = shl nuw nsw i32 %47, 6
  %50 = add nuw nsw i32 %48, %49
  br label %concatenate.4.merge12

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  %51 = add nsw i32 %7, -96
  %52 = shl nuw nsw i32 %47, 8
  %53 = add nuw nsw i32 %51, %52
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.96.20, %concatenate.pivot.32.19, %concatenate.pivot.0.17
  %.sink43 = phi i32 [ %53, %concatenate.pivot.96.20 ], [ %50, %concatenate.pivot.32.19 ], [ %45, %concatenate.pivot.0.17 ]
  %arg2.sink42 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.20 ], [ %arg148, %concatenate.pivot.32.19 ], [ %arg046, %concatenate.pivot.0.17 ]
  %54 = zext i32 %.sink43 to i64
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink42, i64 %54
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %25, i64 2
  store float %56, ptr addrspace(1) %57, align 8
  %58 = icmp ult i32 %8, 32
  br i1 %58, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %59 = udiv i32 %linear_index_base, 352
  %60 = shl nuw nsw i32 %59, 5
  %61 = add nuw nsw i32 %60, %8
  br label %concatenate.4.merge21

concatenate.pivot.96.27:                          ; preds = %concatenate.4.merge12
  %62 = icmp ult i32 %8, 96
  br i1 %62, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  %63 = add nsw i32 %8, -32
  %64 = shl nuw nsw i32 %4, 6
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.4.merge21

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  %66 = add nsw i32 %8, -96
  %67 = shl nuw nsw i32 %4, 8
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.96.29, %concatenate.pivot.32.28, %concatenate.pivot.0.26
  %.sink45 = phi i32 [ %68, %concatenate.pivot.96.29 ], [ %65, %concatenate.pivot.32.28 ], [ %61, %concatenate.pivot.0.26 ]
  %arg2.sink44 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.96.29 ], [ %arg148, %concatenate.pivot.32.28 ], [ %arg046, %concatenate.pivot.0.26 ]
  %69 = zext i32 %.sink45 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink44, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %25, i64 3
  store float %71, ptr addrspace(1) %72, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_279(ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(16384) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg23, ptr noalias nocapture writeonly align 128 dereferenceable(16384) %arg24) local_unnamed_addr #6 {
entry:
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 7
  %4 = and i32 %2, 127
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %3 to i64
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds [224 x [128 x float]], ptr addrspace(1) %arg110, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %multiply.20 = fmul float %8, %12
  %subtract.21 = fsub float %7, %multiply.20
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds [352 x [128 x float]], ptr addrspace(1) %arg416, i64 0, i64 %9, i64 %10
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %multiply.23 = fmul float %8, %16
  %subtract.24 = fsub float %14, %multiply.23
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = getelementptr inbounds [352 x [128 x float]], ptr addrspace(1) %arg620, i64 0, i64 %9, i64 %10
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %multiply.26 = fmul float %8, %20
  %subtract.27 = fsub float %18, %multiply.26
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = getelementptr inbounds [352 x [128 x float]], ptr addrspace(1) %arg824, i64 0, i64 %9, i64 %10
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %multiply.29 = fmul float %8, %24
  %subtract.30 = fsub float %22, %multiply.29
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %27 = getelementptr inbounds [352 x [128 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %9, i64 %10
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.32 = fmul float %8, %28
  %subtract.33 = fsub float %26, %multiply.32
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr inbounds [224 x [128 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %9, i64 %10
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %multiply.35 = fmul float %8, %32
  %subtract.36 = fsub float %30, %multiply.35
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %35 = getelementptr inbounds [224 x [128 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %9, i64 %10
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %multiply.38 = fmul float %8, %36
  %subtract.39 = fsub float %34, %multiply.38
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %39 = getelementptr inbounds [224 x [128 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %9, i64 %10
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %multiply.41 = fmul float %8, %40
  %subtract.42 = fsub float %38, %multiply.41
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  store float %subtract.21, ptr addrspace(1) %41, align 4
  %42 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  store float %subtract.24, ptr addrspace(1) %42, align 4
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  store float %subtract.27, ptr addrspace(1) %43, align 4
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %5
  store float %subtract.30, ptr addrspace(1) %44, align 4
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  store float %subtract.33, ptr addrspace(1) %45, align 4
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %5
  store float %subtract.36, ptr addrspace(1) %46, align 4
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  store float %subtract.39, ptr addrspace(1) %47, align 4
  %48 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %5
  store float %subtract.42, ptr addrspace(1) %48, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_382(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(11796480) %arg4) local_unnamed_addr #5 {
entry:
  %arg464 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg362 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg260 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg158 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg056 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !298
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 360
  %5 = mul i32 %4, 360
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 360
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 360
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 360
  %9 = icmp ult i32 %.decomposed, 96
  br i1 %9, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %entry
  %10 = icmp ult i32 %.decomposed, 32
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %11 = udiv i32 %linear_index_base, 360
  %12 = shl nuw nsw i32 %11, 5
  %13 = add nuw nsw i32 %12, %.decomposed
  br label %concatenate.5.merge

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  %14 = add nsw i32 %.decomposed, -32
  %15 = udiv i32 %linear_index_base, 360
  %16 = shl nuw nsw i32 %15, 6
  %17 = add nuw nsw i32 %14, %16
  br label %concatenate.5.merge

concatenate.pivot.104.:                           ; preds = %entry
  %18 = icmp ult i32 %.decomposed, 104
  %19 = udiv i32 %linear_index_base, 360
  br i1 %18, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  %20 = add nsw i32 %.decomposed, -96
  %21 = shl nuw nsw i32 %19, 3
  %22 = add nuw nsw i32 %20, %21
  br label %concatenate.5.merge

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  %23 = add nsw i32 %.decomposed, -104
  %24 = shl nuw nsw i32 %19, 8
  %25 = add nuw nsw i32 %23, %24
  br label %concatenate.5.merge

concatenate.5.merge:                              ; preds = %concatenate.pivot.104.3, %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.sink49 = phi i32 [ %25, %concatenate.pivot.104.3 ], [ %22, %concatenate.pivot.96.2 ], [ %17, %concatenate.pivot.32.1 ], [ %13, %concatenate.pivot.0. ]
  %arg3.sink = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.104.3 ], [ %arg260, %concatenate.pivot.96.2 ], [ %arg158, %concatenate.pivot.32.1 ], [ %arg056, %concatenate.pivot.0. ]
  %26 = zext i32 %.sink49 to i64
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink, i64 %26
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = zext i32 %linear_index_base to i64
  %30 = getelementptr float, ptr addrspace(1) %arg464, i64 %29
  store float %28, ptr addrspace(1) %30, align 16
  %31 = icmp ult i32 %6, 96
  br i1 %31, label %concatenate.pivot.32.10, label %concatenate.pivot.104.13

concatenate.pivot.32.10:                          ; preds = %concatenate.5.merge
  %32 = icmp ult i32 %6, 32
  br i1 %32, label %concatenate.pivot.0.11, label %concatenate.pivot.32.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.32.10
  %33 = udiv i32 %linear_index_base, 360
  %34 = shl nuw nsw i32 %33, 5
  %35 = add nuw nsw i32 %34, %6
  br label %concatenate.5.merge4

concatenate.pivot.32.12:                          ; preds = %concatenate.pivot.32.10
  %36 = add nsw i32 %6, -32
  %37 = udiv i32 %linear_index_base, 360
  %38 = shl nuw nsw i32 %37, 6
  %39 = add nuw nsw i32 %36, %38
  br label %concatenate.5.merge4

concatenate.pivot.104.13:                         ; preds = %concatenate.5.merge
  %40 = icmp ult i32 %6, 104
  %41 = udiv i32 %linear_index_base, 360
  br i1 %40, label %concatenate.pivot.96.14, label %concatenate.pivot.104.15

concatenate.pivot.96.14:                          ; preds = %concatenate.pivot.104.13
  %42 = add nsw i32 %6, -96
  %43 = shl nuw nsw i32 %41, 3
  %44 = add nuw nsw i32 %42, %43
  br label %concatenate.5.merge4

concatenate.pivot.104.15:                         ; preds = %concatenate.pivot.104.13
  %45 = add nsw i32 %6, -104
  %46 = shl nuw nsw i32 %41, 8
  %47 = add nuw nsw i32 %45, %46
  br label %concatenate.5.merge4

concatenate.5.merge4:                             ; preds = %concatenate.pivot.104.15, %concatenate.pivot.96.14, %concatenate.pivot.32.12, %concatenate.pivot.0.11
  %.sink51 = phi i32 [ %47, %concatenate.pivot.104.15 ], [ %44, %concatenate.pivot.96.14 ], [ %39, %concatenate.pivot.32.12 ], [ %35, %concatenate.pivot.0.11 ]
  %arg3.sink50 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.104.15 ], [ %arg260, %concatenate.pivot.96.14 ], [ %arg158, %concatenate.pivot.32.12 ], [ %arg056, %concatenate.pivot.0.11 ]
  %48 = zext i32 %.sink51 to i64
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink50, i64 %48
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %51 = getelementptr inbounds float, ptr addrspace(1) %30, i64 1
  store float %50, ptr addrspace(1) %51, align 4
  %52 = icmp ult i32 %7, 96
  br i1 %52, label %concatenate.pivot.32.22, label %concatenate.pivot.104.25

concatenate.pivot.32.22:                          ; preds = %concatenate.5.merge4
  %53 = icmp ult i32 %7, 32
  br i1 %53, label %concatenate.pivot.0.23, label %concatenate.pivot.32.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.32.22
  %54 = udiv i32 %linear_index_base, 360
  %55 = shl nuw nsw i32 %54, 5
  %56 = add nuw nsw i32 %55, %7
  br label %concatenate.5.merge16

concatenate.pivot.32.24:                          ; preds = %concatenate.pivot.32.22
  %57 = add nsw i32 %7, -32
  %58 = udiv i32 %linear_index_base, 360
  %59 = shl nuw nsw i32 %58, 6
  %60 = add nuw nsw i32 %57, %59
  br label %concatenate.5.merge16

concatenate.pivot.104.25:                         ; preds = %concatenate.5.merge4
  %61 = icmp ult i32 %7, 104
  %62 = udiv i32 %linear_index_base, 360
  br i1 %61, label %concatenate.pivot.96.26, label %concatenate.pivot.104.27

concatenate.pivot.96.26:                          ; preds = %concatenate.pivot.104.25
  %63 = add nsw i32 %7, -96
  %64 = shl nuw nsw i32 %62, 3
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.5.merge16

concatenate.pivot.104.27:                         ; preds = %concatenate.pivot.104.25
  %66 = add nsw i32 %7, -104
  %67 = shl nuw nsw i32 %62, 8
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.5.merge16

concatenate.5.merge16:                            ; preds = %concatenate.pivot.104.27, %concatenate.pivot.96.26, %concatenate.pivot.32.24, %concatenate.pivot.0.23
  %.sink53 = phi i32 [ %68, %concatenate.pivot.104.27 ], [ %65, %concatenate.pivot.96.26 ], [ %60, %concatenate.pivot.32.24 ], [ %56, %concatenate.pivot.0.23 ]
  %arg3.sink52 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.104.27 ], [ %arg260, %concatenate.pivot.96.26 ], [ %arg158, %concatenate.pivot.32.24 ], [ %arg056, %concatenate.pivot.0.23 ]
  %69 = zext i32 %.sink53 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink52, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %30, i64 2
  store float %71, ptr addrspace(1) %72, align 8
  %73 = icmp ult i32 %8, 96
  br i1 %73, label %concatenate.pivot.32.34, label %concatenate.pivot.104.37

concatenate.pivot.32.34:                          ; preds = %concatenate.5.merge16
  %74 = icmp ult i32 %8, 32
  br i1 %74, label %concatenate.pivot.0.35, label %concatenate.pivot.32.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.32.34
  %75 = udiv i32 %linear_index_base, 360
  %76 = shl nuw nsw i32 %75, 5
  %77 = add nuw nsw i32 %76, %8
  br label %concatenate.5.merge28

concatenate.pivot.32.36:                          ; preds = %concatenate.pivot.32.34
  %78 = add nsw i32 %8, -32
  %79 = udiv i32 %linear_index_base, 360
  %80 = shl nuw nsw i32 %79, 6
  %81 = add nuw nsw i32 %78, %80
  br label %concatenate.5.merge28

concatenate.pivot.104.37:                         ; preds = %concatenate.5.merge16
  %82 = icmp ult i32 %8, 104
  br i1 %82, label %concatenate.pivot.96.38, label %concatenate.pivot.104.39

concatenate.pivot.96.38:                          ; preds = %concatenate.pivot.104.37
  %83 = add nsw i32 %8, -96
  %84 = shl nuw nsw i32 %4, 3
  %85 = add nuw nsw i32 %83, %84
  br label %concatenate.5.merge28

concatenate.pivot.104.39:                         ; preds = %concatenate.pivot.104.37
  %86 = add nsw i32 %8, -104
  %87 = shl nuw nsw i32 %4, 8
  %88 = add nuw nsw i32 %86, %87
  br label %concatenate.5.merge28

concatenate.5.merge28:                            ; preds = %concatenate.pivot.104.39, %concatenate.pivot.96.38, %concatenate.pivot.32.36, %concatenate.pivot.0.35
  %.sink55 = phi i32 [ %88, %concatenate.pivot.104.39 ], [ %85, %concatenate.pivot.96.38 ], [ %81, %concatenate.pivot.32.36 ], [ %77, %concatenate.pivot.0.35 ]
  %arg3.sink54 = phi ptr addrspace(1) [ %arg362, %concatenate.pivot.104.39 ], [ %arg260, %concatenate.pivot.96.38 ], [ %arg158, %concatenate.pivot.32.36 ], [ %arg056, %concatenate.pivot.0.35 ]
  %89 = zext i32 %.sink55 to i64
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg3.sink54, i64 %89
  %91 = load float, ptr addrspace(1) %90, align 4, !invariant.load !267
  %92 = getelementptr inbounds float, ptr addrspace(1) %30, i64 3
  store float %91, ptr addrspace(1) %92, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_381(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(786432) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(12582912) %arg5) local_unnamed_addr #5 {
entry:
  %arg576 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg474 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg372 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg270 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg168 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg066 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !299
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 384
  %5 = mul i32 %4, 384
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 384
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 384
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 384
  %9 = icmp ult i32 %.decomposed, 96
  br i1 %9, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %entry
  %10 = icmp ult i32 %.decomposed, 32
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  %11 = udiv i32 %linear_index_base, 384
  %12 = shl nuw nsw i32 %11, 5
  %13 = add nuw nsw i32 %12, %.decomposed
  br label %concatenate.6.merge

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  %14 = add nsw i32 %.decomposed, -32
  %15 = udiv i32 %linear_index_base, 384
  %16 = shl nuw nsw i32 %15, 6
  %17 = add nuw nsw i32 %14, %16
  br label %concatenate.6.merge

concatenate.pivot.104.:                           ; preds = %entry
  %18 = icmp ult i32 %.decomposed, 104
  %19 = udiv i32 %linear_index_base, 384
  br i1 %18, label %concatenate.pivot.96.2, label %concatenate.pivot.128.

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  %20 = add nsw i32 %.decomposed, -96
  %21 = shl nuw nsw i32 %19, 3
  %22 = add nuw nsw i32 %20, %21
  br label %concatenate.6.merge

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.104.
  %23 = icmp ult i32 %.decomposed, 128
  br i1 %23, label %concatenate.pivot.104.3, label %concatenate.pivot.128.4

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.128.
  %24 = add nsw i32 %.decomposed, -104
  %25 = mul nuw nsw i32 %19, 24
  %26 = add nuw nsw i32 %24, %25
  br label %concatenate.6.merge

concatenate.pivot.128.4:                          ; preds = %concatenate.pivot.128.
  %27 = add nsw i32 %.decomposed, -128
  %28 = shl nuw nsw i32 %19, 8
  %29 = add nuw nsw i32 %27, %28
  br label %concatenate.6.merge

concatenate.6.merge:                              ; preds = %concatenate.pivot.128.4, %concatenate.pivot.104.3, %concatenate.pivot.96.2, %concatenate.pivot.32.1, %concatenate.pivot.0.
  %.sink59 = phi i32 [ %29, %concatenate.pivot.128.4 ], [ %26, %concatenate.pivot.104.3 ], [ %22, %concatenate.pivot.96.2 ], [ %17, %concatenate.pivot.32.1 ], [ %13, %concatenate.pivot.0. ]
  %arg4.sink = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.128.4 ], [ %arg372, %concatenate.pivot.104.3 ], [ %arg270, %concatenate.pivot.96.2 ], [ %arg168, %concatenate.pivot.32.1 ], [ %arg066, %concatenate.pivot.0. ]
  %30 = zext i32 %.sink59 to i64
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink, i64 %30
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = zext i32 %linear_index_base to i64
  %34 = getelementptr float, ptr addrspace(1) %arg576, i64 %33
  store float %32, ptr addrspace(1) %34, align 16
  %35 = icmp ult i32 %6, 96
  br i1 %35, label %concatenate.pivot.32.12, label %concatenate.pivot.104.15

concatenate.pivot.32.12:                          ; preds = %concatenate.6.merge
  %36 = icmp ult i32 %6, 32
  br i1 %36, label %concatenate.pivot.0.13, label %concatenate.pivot.32.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.32.12
  %37 = udiv i32 %linear_index_base, 384
  %38 = shl nuw nsw i32 %37, 5
  %39 = add nuw nsw i32 %38, %6
  br label %concatenate.6.merge5

concatenate.pivot.32.14:                          ; preds = %concatenate.pivot.32.12
  %40 = add nsw i32 %6, -32
  %41 = udiv i32 %linear_index_base, 384
  %42 = shl nuw nsw i32 %41, 6
  %43 = add nuw nsw i32 %40, %42
  br label %concatenate.6.merge5

concatenate.pivot.104.15:                         ; preds = %concatenate.6.merge
  %44 = icmp ult i32 %6, 104
  %45 = udiv i32 %linear_index_base, 384
  br i1 %44, label %concatenate.pivot.96.16, label %concatenate.pivot.128.17

concatenate.pivot.96.16:                          ; preds = %concatenate.pivot.104.15
  %46 = add nsw i32 %6, -96
  %47 = shl nuw nsw i32 %45, 3
  %48 = add nuw nsw i32 %46, %47
  br label %concatenate.6.merge5

concatenate.pivot.128.17:                         ; preds = %concatenate.pivot.104.15
  %49 = icmp ult i32 %6, 128
  br i1 %49, label %concatenate.pivot.104.18, label %concatenate.pivot.128.19

concatenate.pivot.104.18:                         ; preds = %concatenate.pivot.128.17
  %50 = add nsw i32 %6, -104
  %51 = mul nuw nsw i32 %45, 24
  %52 = add nuw nsw i32 %50, %51
  br label %concatenate.6.merge5

concatenate.pivot.128.19:                         ; preds = %concatenate.pivot.128.17
  %53 = add nsw i32 %6, -128
  %54 = shl nuw nsw i32 %45, 8
  %55 = add nuw nsw i32 %53, %54
  br label %concatenate.6.merge5

concatenate.6.merge5:                             ; preds = %concatenate.pivot.128.19, %concatenate.pivot.104.18, %concatenate.pivot.96.16, %concatenate.pivot.32.14, %concatenate.pivot.0.13
  %.sink61 = phi i32 [ %55, %concatenate.pivot.128.19 ], [ %52, %concatenate.pivot.104.18 ], [ %48, %concatenate.pivot.96.16 ], [ %43, %concatenate.pivot.32.14 ], [ %39, %concatenate.pivot.0.13 ]
  %arg4.sink60 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.128.19 ], [ %arg372, %concatenate.pivot.104.18 ], [ %arg270, %concatenate.pivot.96.16 ], [ %arg168, %concatenate.pivot.32.14 ], [ %arg066, %concatenate.pivot.0.13 ]
  %56 = zext i32 %.sink61 to i64
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink60, i64 %56
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %59 = getelementptr inbounds float, ptr addrspace(1) %34, i64 1
  store float %58, ptr addrspace(1) %59, align 4
  %60 = icmp ult i32 %7, 96
  br i1 %60, label %concatenate.pivot.32.27, label %concatenate.pivot.104.30

concatenate.pivot.32.27:                          ; preds = %concatenate.6.merge5
  %61 = icmp ult i32 %7, 32
  br i1 %61, label %concatenate.pivot.0.28, label %concatenate.pivot.32.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.32.27
  %62 = udiv i32 %linear_index_base, 384
  %63 = shl nuw nsw i32 %62, 5
  %64 = add nuw nsw i32 %63, %7
  br label %concatenate.6.merge20

concatenate.pivot.32.29:                          ; preds = %concatenate.pivot.32.27
  %65 = add nsw i32 %7, -32
  %66 = udiv i32 %linear_index_base, 384
  %67 = shl nuw nsw i32 %66, 6
  %68 = add nuw nsw i32 %65, %67
  br label %concatenate.6.merge20

concatenate.pivot.104.30:                         ; preds = %concatenate.6.merge5
  %69 = icmp ult i32 %7, 104
  %70 = udiv i32 %linear_index_base, 384
  br i1 %69, label %concatenate.pivot.96.31, label %concatenate.pivot.128.32

concatenate.pivot.96.31:                          ; preds = %concatenate.pivot.104.30
  %71 = add nsw i32 %7, -96
  %72 = shl nuw nsw i32 %70, 3
  %73 = add nuw nsw i32 %71, %72
  br label %concatenate.6.merge20

concatenate.pivot.128.32:                         ; preds = %concatenate.pivot.104.30
  %74 = icmp ult i32 %7, 128
  br i1 %74, label %concatenate.pivot.104.33, label %concatenate.pivot.128.34

concatenate.pivot.104.33:                         ; preds = %concatenate.pivot.128.32
  %75 = add nsw i32 %7, -104
  %76 = mul nuw nsw i32 %70, 24
  %77 = add nuw nsw i32 %75, %76
  br label %concatenate.6.merge20

concatenate.pivot.128.34:                         ; preds = %concatenate.pivot.128.32
  %78 = add nsw i32 %7, -128
  %79 = shl nuw nsw i32 %70, 8
  %80 = add nuw nsw i32 %78, %79
  br label %concatenate.6.merge20

concatenate.6.merge20:                            ; preds = %concatenate.pivot.128.34, %concatenate.pivot.104.33, %concatenate.pivot.96.31, %concatenate.pivot.32.29, %concatenate.pivot.0.28
  %.sink63 = phi i32 [ %80, %concatenate.pivot.128.34 ], [ %77, %concatenate.pivot.104.33 ], [ %73, %concatenate.pivot.96.31 ], [ %68, %concatenate.pivot.32.29 ], [ %64, %concatenate.pivot.0.28 ]
  %arg4.sink62 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.128.34 ], [ %arg372, %concatenate.pivot.104.33 ], [ %arg270, %concatenate.pivot.96.31 ], [ %arg168, %concatenate.pivot.32.29 ], [ %arg066, %concatenate.pivot.0.28 ]
  %81 = zext i32 %.sink63 to i64
  %82 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink62, i64 %81
  %83 = load float, ptr addrspace(1) %82, align 4, !invariant.load !267
  %84 = getelementptr inbounds float, ptr addrspace(1) %34, i64 2
  store float %83, ptr addrspace(1) %84, align 8
  %85 = icmp ult i32 %8, 96
  br i1 %85, label %concatenate.pivot.32.42, label %concatenate.pivot.104.45

concatenate.pivot.32.42:                          ; preds = %concatenate.6.merge20
  %86 = icmp ult i32 %8, 32
  br i1 %86, label %concatenate.pivot.0.43, label %concatenate.pivot.32.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.32.42
  %87 = udiv i32 %linear_index_base, 384
  %88 = shl nuw nsw i32 %87, 5
  %89 = add nuw nsw i32 %88, %8
  br label %concatenate.6.merge35

concatenate.pivot.32.44:                          ; preds = %concatenate.pivot.32.42
  %90 = add nsw i32 %8, -32
  %91 = udiv i32 %linear_index_base, 384
  %92 = shl nuw nsw i32 %91, 6
  %93 = add nuw nsw i32 %90, %92
  br label %concatenate.6.merge35

concatenate.pivot.104.45:                         ; preds = %concatenate.6.merge20
  %94 = icmp ult i32 %8, 104
  br i1 %94, label %concatenate.pivot.96.46, label %concatenate.pivot.128.47

concatenate.pivot.96.46:                          ; preds = %concatenate.pivot.104.45
  %95 = add nsw i32 %8, -96
  %96 = shl nuw nsw i32 %4, 3
  %97 = add nuw nsw i32 %95, %96
  br label %concatenate.6.merge35

concatenate.pivot.128.47:                         ; preds = %concatenate.pivot.104.45
  %98 = icmp ult i32 %8, 128
  br i1 %98, label %concatenate.pivot.104.48, label %concatenate.pivot.128.49

concatenate.pivot.104.48:                         ; preds = %concatenate.pivot.128.47
  %99 = add nsw i32 %8, -104
  %100 = mul nuw nsw i32 %4, 24
  %101 = add nuw nsw i32 %99, %100
  br label %concatenate.6.merge35

concatenate.pivot.128.49:                         ; preds = %concatenate.pivot.128.47
  %102 = add nsw i32 %8, -128
  %103 = shl nuw nsw i32 %4, 8
  %104 = add nuw nsw i32 %102, %103
  br label %concatenate.6.merge35

concatenate.6.merge35:                            ; preds = %concatenate.pivot.128.49, %concatenate.pivot.104.48, %concatenate.pivot.96.46, %concatenate.pivot.32.44, %concatenate.pivot.0.43
  %.sink65 = phi i32 [ %104, %concatenate.pivot.128.49 ], [ %101, %concatenate.pivot.104.48 ], [ %97, %concatenate.pivot.96.46 ], [ %93, %concatenate.pivot.32.44 ], [ %89, %concatenate.pivot.0.43 ]
  %arg4.sink64 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.128.49 ], [ %arg372, %concatenate.pivot.104.48 ], [ %arg270, %concatenate.pivot.96.46 ], [ %arg168, %concatenate.pivot.32.44 ], [ %arg066, %concatenate.pivot.0.43 ]
  %105 = zext i32 %.sink65 to i64
  %106 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink64, i64 %105
  %107 = load float, ptr addrspace(1) %106, align 4, !invariant.load !267
  %108 = getelementptr inbounds float, ptr addrspace(1) %34, i64 3
  store float %107, ptr addrspace(1) %108, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_389(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(147456) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(393216) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg30, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg31, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg32, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg33, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg34, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg46) local_unnamed_addr #6 {
entry:
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %2, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %3 to i64
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds [144 x [256 x float]], ptr addrspace(1) %arg110, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %multiply.34 = fmul float %8, %12
  %subtract.35 = fsub float %7, %multiply.34
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds float, ptr addrspace(1) %11, i64 12288
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %multiply.37 = fmul float %8, %16
  %subtract.38 = fsub float %14, %multiply.37
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %5
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = getelementptr inbounds float, ptr addrspace(1) %11, i64 24576
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %multiply.40 = fmul float %8, %20
  %subtract.41 = fsub float %18, %multiply.40
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = getelementptr inbounds [352 x [256 x float]], ptr addrspace(1) %arg620, i64 0, i64 %9, i64 %10
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %multiply.43 = fmul float %8, %24
  %subtract.44 = fsub float %22, %multiply.43
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %27 = getelementptr inbounds [360 x [256 x float]], ptr addrspace(1) %arg824, i64 0, i64 %9, i64 %10
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.46 = fmul float %8, %28
  %subtract.47 = fsub float %26, %multiply.46
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr inbounds [360 x [256 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %9, i64 %10
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %multiply.49 = fmul float %8, %32
  %subtract.50 = fsub float %30, %multiply.49
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %35 = getelementptr inbounds [384 x [256 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %9, i64 %10
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %multiply.52 = fmul float %8, %36
  %subtract.53 = fsub float %34, %multiply.52
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %39 = getelementptr inbounds [352 x [256 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %9, i64 %10
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %multiply.55 = fmul float %8, %40
  %subtract.56 = fsub float %38, %multiply.55
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %43 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %9, i64 %10
  %44 = getelementptr inbounds float, ptr addrspace(1) %43, i64 4096
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %multiply.58 = fmul float %8, %45
  %subtract.59 = fsub float %42, %multiply.58
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %47 = load float, ptr addrspace(1) %46, align 4, !invariant.load !267
  %48 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg1844, i64 0, i64 %9, i64 %10
  %49 = getelementptr inbounds float, ptr addrspace(1) %48, i64 4096
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %multiply.61 = fmul float %8, %50
  %subtract.62 = fsub float %47, %multiply.61
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  %52 = load float, ptr addrspace(1) %51, align 4, !invariant.load !267
  %53 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2048, i64 0, i64 %9, i64 %10
  %54 = getelementptr inbounds float, ptr addrspace(1) %53, i64 4096
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %multiply.64 = fmul float %8, %55
  %subtract.65 = fsub float %52, %multiply.64
  %56 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  %57 = load float, ptr addrspace(1) %56, align 4, !invariant.load !267
  %58 = getelementptr inbounds [352 x [256 x float]], ptr addrspace(1) %arg2252, i64 0, i64 %9, i64 %10
  %59 = load float, ptr addrspace(1) %58, align 4, !invariant.load !267
  %multiply.67 = fmul float %8, %59
  %subtract.68 = fsub float %57, %multiply.67
  %60 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  %61 = load float, ptr addrspace(1) %60, align 4, !invariant.load !267
  %62 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2456, i64 0, i64 %9, i64 %10
  %63 = getelementptr inbounds float, ptr addrspace(1) %62, i64 4096
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %multiply.70 = fmul float %8, %64
  %subtract.71 = fsub float %61, %multiply.70
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %5
  %66 = load float, ptr addrspace(1) %65, align 4, !invariant.load !267
  %67 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2660, i64 0, i64 %9, i64 %10
  %68 = getelementptr inbounds float, ptr addrspace(1) %67, i64 4096
  %69 = load float, ptr addrspace(1) %68, align 4, !invariant.load !267
  %multiply.73 = fmul float %8, %69
  %subtract.74 = fsub float %66, %multiply.73
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %5
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds [352 x [256 x float]], ptr addrspace(1) %arg2864, i64 0, i64 %9, i64 %10
  %73 = load float, ptr addrspace(1) %72, align 4, !invariant.load !267
  %multiply.76 = fmul float %8, %73
  %subtract.77 = fsub float %71, %multiply.76
  %74 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %5
  %75 = load float, ptr addrspace(1) %74, align 4, !invariant.load !267
  %76 = getelementptr inbounds [352 x [256 x float]], ptr addrspace(1) %arg3068, i64 0, i64 %9, i64 %10
  %77 = load float, ptr addrspace(1) %76, align 4, !invariant.load !267
  %multiply.79 = fmul float %8, %77
  %subtract.80 = fsub float %75, %multiply.79
  %78 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %5
  store float %subtract.35, ptr addrspace(1) %78, align 4
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %5
  store float %subtract.38, ptr addrspace(1) %79, align 4
  %80 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %5
  store float %subtract.41, ptr addrspace(1) %80, align 4
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %5
  store float %subtract.44, ptr addrspace(1) %81, align 4
  %82 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  store float %subtract.47, ptr addrspace(1) %82, align 4
  %83 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %5
  store float %subtract.50, ptr addrspace(1) %83, align 4
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  store float %subtract.53, ptr addrspace(1) %84, align 4
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %5
  store float %subtract.56, ptr addrspace(1) %85, align 4
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  store float %subtract.59, ptr addrspace(1) %86, align 4
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %5
  store float %subtract.62, ptr addrspace(1) %87, align 4
  %88 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.65, ptr addrspace(1) %88, align 4
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.68, ptr addrspace(1) %89, align 4
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.71, ptr addrspace(1) %90, align 4
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.74, ptr addrspace(1) %91, align 4
  %92 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.77, ptr addrspace(1) %92, align 4
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.80, ptr addrspace(1) %93, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_137(ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(4718592) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg10, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg17, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg18, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg20, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg21, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg22, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg24, ptr noalias nocapture readonly align 128 dereferenceable(12582912) %arg25, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg26, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg27, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg28, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg29, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg30, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg31, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg32, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg33, ptr noalias nocapture readonly align 16 dereferenceable(1048576) %arg34, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(1048576) %arg48) local_unnamed_addr #6 {
entry:
  %arg48208 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47206 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46204 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg45202 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg44200 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg43198 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg42196 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg41194 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg40192 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg39190 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg38188 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg37186 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg36184 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg35182 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg34180 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg33178 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg32176 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg31174 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg30172 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg29170 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg28168 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg27166 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg26164 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg25162 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg24160 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg23158 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg22156 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg21154 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg20152 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg19150 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg18148 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg17146 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg16144 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg15142 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14140 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13138 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12136 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11134 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10132 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9130 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8128 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7126 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6124 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5122 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4120 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3118 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2116 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1114 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0112 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 5
  %5 = and i32 %linear_index3, 31
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 30
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 29
  %8 = and i32 %3, 28
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg0112, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg3118, align 16, !invariant.load !267
  %17 = zext i32 %4 to i64
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds [8192 x [144 x float]], ptr addrspace(1) %arg2116, i64 0, i64 %17, i64 %18
  %20 = load <2 x float>, ptr addrspace(1) %19, align 16, !invariant.load !267
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %23 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1114, i64 0, i64 %17, i64 %18
  %24 = getelementptr inbounds float, ptr addrspace(1) %23, i64 16
  %25 = load <2 x float>, ptr addrspace(1) %24, align 16, !invariant.load !267
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %add.40 = fadd float %21, %26
  %multiply.41 = fmul float %16, %add.40
  %subtract.42 = fsub float %12, %multiply.41
  %28 = getelementptr float, ptr addrspace(1) %arg4120, i64 %9
  %29 = load <4 x float>, ptr addrspace(1) %28, align 16, !invariant.load !267
  %30 = extractelement <4 x float> %29, i32 0
  %31 = extractelement <4 x float> %29, i32 1
  %32 = extractelement <4 x float> %29, i32 2
  %33 = extractelement <4 x float> %29, i32 3
  %34 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg5122, i64 0, i64 %17, i64 %18
  %35 = getelementptr inbounds float, ptr addrspace(1) %34, i64 16
  %36 = load <2 x float>, ptr addrspace(1) %35, align 16, !invariant.load !267
  %37 = extractelement <2 x float> %36, i32 0
  %38 = extractelement <2 x float> %36, i32 1
  %39 = getelementptr inbounds float, ptr addrspace(1) %19, i64 48
  %40 = load <2 x float>, ptr addrspace(1) %39, align 16, !invariant.load !267
  %41 = extractelement <2 x float> %40, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %add.45 = fadd float %37, %41
  %multiply.46 = fmul float %16, %add.45
  %subtract.47 = fsub float %30, %multiply.46
  %43 = getelementptr float, ptr addrspace(1) %arg6124, i64 %9
  %44 = load <4 x float>, ptr addrspace(1) %43, align 16, !invariant.load !267
  %45 = extractelement <4 x float> %44, i32 0
  %46 = extractelement <4 x float> %44, i32 1
  %47 = extractelement <4 x float> %44, i32 2
  %48 = extractelement <4 x float> %44, i32 3
  %49 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg7126, i64 0, i64 %17, i64 %18
  %50 = getelementptr inbounds float, ptr addrspace(1) %49, i64 16
  %51 = load <2 x float>, ptr addrspace(1) %50, align 16, !invariant.load !267
  %52 = extractelement <2 x float> %51, i32 0
  %53 = extractelement <2 x float> %51, i32 1
  %54 = getelementptr inbounds float, ptr addrspace(1) %19, i64 96
  %55 = load <2 x float>, ptr addrspace(1) %54, align 16, !invariant.load !267
  %56 = extractelement <2 x float> %55, i32 0
  %57 = extractelement <2 x float> %55, i32 1
  %add.50 = fadd float %52, %56
  %multiply.51 = fmul float %16, %add.50
  %subtract.52 = fsub float %45, %multiply.51
  %58 = getelementptr float, ptr addrspace(1) %arg8128, i64 %9
  %59 = load <4 x float>, ptr addrspace(1) %58, align 16, !invariant.load !267
  %60 = extractelement <4 x float> %59, i32 0
  %61 = extractelement <4 x float> %59, i32 1
  %62 = extractelement <4 x float> %59, i32 2
  %63 = extractelement <4 x float> %59, i32 3
  %64 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg9130, i64 0, i64 %17, i64 %18
  %65 = load <2 x float>, ptr addrspace(1) %64, align 16, !invariant.load !267
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %multiply.54 = fmul float %16, %66
  %subtract.55 = fsub float %60, %multiply.54
  %68 = getelementptr float, ptr addrspace(1) %arg10132, i64 %9
  %69 = load <4 x float>, ptr addrspace(1) %68, align 16, !invariant.load !267
  %70 = extractelement <4 x float> %69, i32 0
  %71 = extractelement <4 x float> %69, i32 1
  %72 = extractelement <4 x float> %69, i32 2
  %73 = extractelement <4 x float> %69, i32 3
  %74 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg13138, i64 0, i64 %17, i64 %18
  %75 = load <2 x float>, ptr addrspace(1) %74, align 16, !invariant.load !267
  %76 = extractelement <2 x float> %75, i32 0
  %77 = extractelement <2 x float> %75, i32 1
  %78 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg12136, i64 0, i64 %17, i64 %18
  %79 = load <2 x float>, ptr addrspace(1) %78, align 16, !invariant.load !267
  %80 = extractelement <2 x float> %79, i32 0
  %81 = extractelement <2 x float> %79, i32 1
  %add.58 = fadd float %76, %80
  %82 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg11134, i64 0, i64 %17, i64 %18
  %83 = load <2 x float>, ptr addrspace(1) %82, align 16, !invariant.load !267
  %84 = extractelement <2 x float> %83, i32 0
  %85 = extractelement <2 x float> %83, i32 1
  %add.60 = fadd float %add.58, %84
  %multiply.62 = fmul float %16, %add.60
  %subtract.63 = fsub float %70, %multiply.62
  %86 = getelementptr float, ptr addrspace(1) %arg14140, i64 %9
  %87 = load <4 x float>, ptr addrspace(1) %86, align 16, !invariant.load !267
  %88 = extractelement <4 x float> %87, i32 0
  %89 = extractelement <4 x float> %87, i32 1
  %90 = extractelement <4 x float> %87, i32 2
  %91 = extractelement <4 x float> %87, i32 3
  %92 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg17146, i64 0, i64 %17, i64 %18
  %93 = load <2 x float>, ptr addrspace(1) %92, align 16, !invariant.load !267
  %94 = extractelement <2 x float> %93, i32 0
  %95 = extractelement <2 x float> %93, i32 1
  %96 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg16144, i64 0, i64 %17, i64 %18
  %97 = load <2 x float>, ptr addrspace(1) %96, align 16, !invariant.load !267
  %98 = extractelement <2 x float> %97, i32 0
  %99 = extractelement <2 x float> %97, i32 1
  %add.66 = fadd float %94, %98
  %100 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg15142, i64 0, i64 %17, i64 %18
  %101 = load <2 x float>, ptr addrspace(1) %100, align 16, !invariant.load !267
  %102 = extractelement <2 x float> %101, i32 0
  %103 = extractelement <2 x float> %101, i32 1
  %add.68 = fadd float %add.66, %102
  %multiply.70 = fmul float %16, %add.68
  %subtract.71 = fsub float %88, %multiply.70
  %104 = getelementptr float, ptr addrspace(1) %arg18148, i64 %9
  %105 = load <4 x float>, ptr addrspace(1) %104, align 16, !invariant.load !267
  %106 = extractelement <4 x float> %105, i32 0
  %107 = extractelement <4 x float> %105, i32 1
  %108 = extractelement <4 x float> %105, i32 2
  %109 = extractelement <4 x float> %105, i32 3
  %110 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg21154, i64 0, i64 %17, i64 %18
  %111 = load <2 x float>, ptr addrspace(1) %110, align 16, !invariant.load !267
  %112 = extractelement <2 x float> %111, i32 0
  %113 = extractelement <2 x float> %111, i32 1
  %114 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg20152, i64 0, i64 %17, i64 %18
  %115 = load <2 x float>, ptr addrspace(1) %114, align 16, !invariant.load !267
  %116 = extractelement <2 x float> %115, i32 0
  %117 = extractelement <2 x float> %115, i32 1
  %add.74 = fadd float %112, %116
  %118 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg19150, i64 0, i64 %17, i64 %18
  %119 = load <2 x float>, ptr addrspace(1) %118, align 16, !invariant.load !267
  %120 = extractelement <2 x float> %119, i32 0
  %121 = extractelement <2 x float> %119, i32 1
  %add.76 = fadd float %add.74, %120
  %multiply.78 = fmul float %16, %add.76
  %subtract.79 = fsub float %106, %multiply.78
  %122 = getelementptr float, ptr addrspace(1) %arg22156, i64 %9
  %123 = load <4 x float>, ptr addrspace(1) %122, align 16, !invariant.load !267
  %124 = extractelement <4 x float> %123, i32 0
  %125 = extractelement <4 x float> %123, i32 1
  %126 = extractelement <4 x float> %123, i32 2
  %127 = extractelement <4 x float> %123, i32 3
  %128 = getelementptr inbounds [8192 x [384 x float]], ptr addrspace(1) %arg25162, i64 0, i64 %17, i64 %18
  %129 = load <2 x float>, ptr addrspace(1) %128, align 16, !invariant.load !267
  %130 = extractelement <2 x float> %129, i32 0
  %131 = extractelement <2 x float> %129, i32 1
  %132 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg24160, i64 0, i64 %17, i64 %18
  %133 = load <2 x float>, ptr addrspace(1) %132, align 16, !invariant.load !267
  %134 = extractelement <2 x float> %133, i32 0
  %135 = extractelement <2 x float> %133, i32 1
  %add.82 = fadd float %130, %134
  %136 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg23158, i64 0, i64 %17, i64 %18
  %137 = load <2 x float>, ptr addrspace(1) %136, align 16, !invariant.load !267
  %138 = extractelement <2 x float> %137, i32 0
  %139 = extractelement <2 x float> %137, i32 1
  %add.84 = fadd float %add.82, %138
  %multiply.86 = fmul float %16, %add.84
  %subtract.87 = fsub float %124, %multiply.86
  %140 = getelementptr float, ptr addrspace(1) %arg26164, i64 %9
  %141 = load <4 x float>, ptr addrspace(1) %140, align 16, !invariant.load !267
  %142 = extractelement <4 x float> %141, i32 0
  %143 = extractelement <4 x float> %141, i32 1
  %144 = extractelement <4 x float> %141, i32 2
  %145 = extractelement <4 x float> %141, i32 3
  %146 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg27166, i64 0, i64 %17, i64 %18
  %147 = load <2 x float>, ptr addrspace(1) %146, align 16, !invariant.load !267
  %148 = extractelement <2 x float> %147, i32 0
  %149 = extractelement <2 x float> %147, i32 1
  %multiply.89 = fmul float %16, %148
  %subtract.90 = fsub float %142, %multiply.89
  %150 = getelementptr float, ptr addrspace(1) %arg28168, i64 %9
  %151 = load <4 x float>, ptr addrspace(1) %150, align 16, !invariant.load !267
  %152 = extractelement <4 x float> %151, i32 0
  %153 = extractelement <4 x float> %151, i32 1
  %154 = extractelement <4 x float> %151, i32 2
  %155 = extractelement <4 x float> %151, i32 3
  %156 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg29170, i64 0, i64 %17, i64 %18
  %157 = getelementptr inbounds float, ptr addrspace(1) %156, i64 16
  %158 = load <2 x float>, ptr addrspace(1) %157, align 16, !invariant.load !267
  %159 = extractelement <2 x float> %158, i32 0
  %160 = extractelement <2 x float> %158, i32 1
  %multiply.92 = fmul float %16, %159
  %subtract.93 = fsub float %152, %multiply.92
  %161 = getelementptr float, ptr addrspace(1) %arg30172, i64 %9
  %162 = load <4 x float>, ptr addrspace(1) %161, align 16, !invariant.load !267
  %163 = extractelement <4 x float> %162, i32 0
  %164 = extractelement <4 x float> %162, i32 1
  %165 = extractelement <4 x float> %162, i32 2
  %166 = extractelement <4 x float> %162, i32 3
  %167 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg31174, i64 0, i64 %17, i64 %18
  %168 = load <2 x float>, ptr addrspace(1) %167, align 16, !invariant.load !267
  %169 = extractelement <2 x float> %168, i32 0
  %170 = extractelement <2 x float> %168, i32 1
  %multiply.95 = fmul float %16, %169
  %subtract.96 = fsub float %163, %multiply.95
  %171 = getelementptr float, ptr addrspace(1) %arg32176, i64 %9
  %172 = load <4 x float>, ptr addrspace(1) %171, align 16, !invariant.load !267
  %173 = extractelement <4 x float> %172, i32 0
  %174 = extractelement <4 x float> %172, i32 1
  %175 = extractelement <4 x float> %172, i32 2
  %176 = extractelement <4 x float> %172, i32 3
  %177 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg33178, i64 0, i64 %17, i64 %18
  %178 = getelementptr inbounds float, ptr addrspace(1) %177, i64 16
  %179 = load <2 x float>, ptr addrspace(1) %178, align 16, !invariant.load !267
  %180 = extractelement <2 x float> %179, i32 0
  %181 = extractelement <2 x float> %179, i32 1
  %multiply.98 = fmul float %16, %180
  %subtract.99 = fsub float %173, %multiply.98
  %182 = getelementptr float, ptr addrspace(1) %arg34180, i64 %9
  %183 = load <4 x float>, ptr addrspace(1) %182, align 16, !invariant.load !267
  %184 = extractelement <4 x float> %183, i32 0
  %185 = extractelement <4 x float> %183, i32 1
  %186 = extractelement <4 x float> %183, i32 2
  %187 = extractelement <4 x float> %183, i32 3
  %188 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg35182, i64 0, i64 %17, i64 %18
  %189 = load <2 x float>, ptr addrspace(1) %188, align 16, !invariant.load !267
  %190 = extractelement <2 x float> %189, i32 0
  %191 = extractelement <2 x float> %189, i32 1
  %multiply.101 = fmul float %16, %190
  %subtract.102 = fsub float %184, %multiply.101
  %192 = getelementptr float, ptr addrspace(1) %arg36184, i64 %9
  %193 = getelementptr float, ptr addrspace(1) %arg37186, i64 %9
  %194 = getelementptr float, ptr addrspace(1) %arg38188, i64 %9
  %195 = getelementptr float, ptr addrspace(1) %arg39190, i64 %9
  %196 = getelementptr float, ptr addrspace(1) %arg40192, i64 %9
  %197 = getelementptr float, ptr addrspace(1) %arg41194, i64 %9
  %198 = getelementptr float, ptr addrspace(1) %arg42196, i64 %9
  %199 = getelementptr float, ptr addrspace(1) %arg43198, i64 %9
  %200 = getelementptr float, ptr addrspace(1) %arg44200, i64 %9
  %201 = getelementptr float, ptr addrspace(1) %arg45202, i64 %9
  %202 = getelementptr float, ptr addrspace(1) %arg46204, i64 %9
  %203 = getelementptr float, ptr addrspace(1) %arg47206, i64 %9
  %204 = getelementptr float, ptr addrspace(1) %arg48208, i64 %9
  %205 = zext i32 %7 to i64
  %206 = getelementptr inbounds [8192 x [144 x float]], ptr addrspace(1) %arg2116, i64 0, i64 %17, i64 %205
  %207 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1114, i64 0, i64 %17, i64 %205
  %add.401 = fadd float %22, %27
  %multiply.412 = fmul float %16, %add.401
  %subtract.423 = fsub float %13, %multiply.412
  %208 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg5122, i64 0, i64 %17, i64 %205
  %add.454 = fadd float %38, %42
  %multiply.465 = fmul float %16, %add.454
  %subtract.476 = fsub float %31, %multiply.465
  %209 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg7126, i64 0, i64 %17, i64 %205
  %add.507 = fadd float %53, %57
  %multiply.518 = fmul float %16, %add.507
  %subtract.529 = fsub float %46, %multiply.518
  %multiply.5410 = fmul float %16, %67
  %subtract.5511 = fsub float %61, %multiply.5410
  %add.5812 = fadd float %77, %81
  %add.6013 = fadd float %add.5812, %85
  %multiply.6214 = fmul float %16, %add.6013
  %subtract.6315 = fsub float %71, %multiply.6214
  %add.6616 = fadd float %95, %99
  %add.6817 = fadd float %add.6616, %103
  %multiply.7018 = fmul float %16, %add.6817
  %subtract.7119 = fsub float %89, %multiply.7018
  %add.7420 = fadd float %113, %117
  %add.7621 = fadd float %add.7420, %121
  %multiply.7822 = fmul float %16, %add.7621
  %subtract.7923 = fsub float %107, %multiply.7822
  %add.8224 = fadd float %131, %135
  %add.8425 = fadd float %add.8224, %139
  %multiply.8626 = fmul float %16, %add.8425
  %subtract.8727 = fsub float %125, %multiply.8626
  %multiply.8928 = fmul float %16, %149
  %subtract.9029 = fsub float %143, %multiply.8928
  %210 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg29170, i64 0, i64 %17, i64 %205
  %multiply.9230 = fmul float %16, %160
  %subtract.9331 = fsub float %153, %multiply.9230
  %multiply.9532 = fmul float %16, %170
  %subtract.9633 = fsub float %164, %multiply.9532
  %211 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg33178, i64 0, i64 %17, i64 %205
  %multiply.9834 = fmul float %16, %181
  %subtract.9935 = fsub float %174, %multiply.9834
  %multiply.10136 = fmul float %16, %191
  %subtract.10237 = fsub float %185, %multiply.10136
  %212 = zext i32 %6 to i64
  %213 = getelementptr inbounds [8192 x [144 x float]], ptr addrspace(1) %arg2116, i64 0, i64 %17, i64 %212
  %214 = load float, ptr addrspace(1) %213, align 8, !invariant.load !267
  %215 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1114, i64 0, i64 %17, i64 %212
  %216 = getelementptr inbounds float, ptr addrspace(1) %215, i64 16
  %217 = load float, ptr addrspace(1) %216, align 8, !invariant.load !267
  %add.4038 = fadd float %214, %217
  %multiply.4139 = fmul float %16, %add.4038
  %subtract.4240 = fsub float %14, %multiply.4139
  %218 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg5122, i64 0, i64 %17, i64 %212
  %219 = getelementptr inbounds float, ptr addrspace(1) %218, i64 16
  %220 = load float, ptr addrspace(1) %219, align 8, !invariant.load !267
  %221 = getelementptr inbounds float, ptr addrspace(1) %213, i64 48
  %222 = load float, ptr addrspace(1) %221, align 8, !invariant.load !267
  %add.4541 = fadd float %220, %222
  %multiply.4642 = fmul float %16, %add.4541
  %subtract.4743 = fsub float %32, %multiply.4642
  %223 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg7126, i64 0, i64 %17, i64 %212
  %224 = getelementptr inbounds float, ptr addrspace(1) %223, i64 16
  %225 = load float, ptr addrspace(1) %224, align 8, !invariant.load !267
  %226 = getelementptr inbounds float, ptr addrspace(1) %213, i64 96
  %227 = load float, ptr addrspace(1) %226, align 8, !invariant.load !267
  %add.5044 = fadd float %225, %227
  %multiply.5145 = fmul float %16, %add.5044
  %subtract.5246 = fsub float %47, %multiply.5145
  %228 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg9130, i64 0, i64 %17, i64 %212
  %229 = load float, ptr addrspace(1) %228, align 8, !invariant.load !267
  %multiply.5447 = fmul float %16, %229
  %subtract.5548 = fsub float %62, %multiply.5447
  %230 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg13138, i64 0, i64 %17, i64 %212
  %231 = load float, ptr addrspace(1) %230, align 8, !invariant.load !267
  %232 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg12136, i64 0, i64 %17, i64 %212
  %233 = load float, ptr addrspace(1) %232, align 8, !invariant.load !267
  %add.5849 = fadd float %231, %233
  %234 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg11134, i64 0, i64 %17, i64 %212
  %235 = load float, ptr addrspace(1) %234, align 8, !invariant.load !267
  %add.6050 = fadd float %add.5849, %235
  %multiply.6251 = fmul float %16, %add.6050
  %subtract.6352 = fsub float %72, %multiply.6251
  %236 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg17146, i64 0, i64 %17, i64 %212
  %237 = load float, ptr addrspace(1) %236, align 8, !invariant.load !267
  %238 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg16144, i64 0, i64 %17, i64 %212
  %239 = load float, ptr addrspace(1) %238, align 8, !invariant.load !267
  %add.6653 = fadd float %237, %239
  %240 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg15142, i64 0, i64 %17, i64 %212
  %241 = load float, ptr addrspace(1) %240, align 8, !invariant.load !267
  %add.6854 = fadd float %add.6653, %241
  %multiply.7055 = fmul float %16, %add.6854
  %subtract.7156 = fsub float %90, %multiply.7055
  %242 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg21154, i64 0, i64 %17, i64 %212
  %243 = load float, ptr addrspace(1) %242, align 8, !invariant.load !267
  %244 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg20152, i64 0, i64 %17, i64 %212
  %245 = load float, ptr addrspace(1) %244, align 8, !invariant.load !267
  %add.7457 = fadd float %243, %245
  %246 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg19150, i64 0, i64 %17, i64 %212
  %247 = load float, ptr addrspace(1) %246, align 8, !invariant.load !267
  %add.7658 = fadd float %add.7457, %247
  %multiply.7859 = fmul float %16, %add.7658
  %subtract.7960 = fsub float %108, %multiply.7859
  %248 = getelementptr inbounds [8192 x [384 x float]], ptr addrspace(1) %arg25162, i64 0, i64 %17, i64 %212
  %249 = load float, ptr addrspace(1) %248, align 8, !invariant.load !267
  %250 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg24160, i64 0, i64 %17, i64 %212
  %251 = load float, ptr addrspace(1) %250, align 8, !invariant.load !267
  %add.8261 = fadd float %249, %251
  %252 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg23158, i64 0, i64 %17, i64 %212
  %253 = load float, ptr addrspace(1) %252, align 8, !invariant.load !267
  %add.8462 = fadd float %add.8261, %253
  %multiply.8663 = fmul float %16, %add.8462
  %subtract.8764 = fsub float %126, %multiply.8663
  %254 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg27166, i64 0, i64 %17, i64 %212
  %255 = load float, ptr addrspace(1) %254, align 8, !invariant.load !267
  %multiply.8965 = fmul float %16, %255
  %subtract.9066 = fsub float %144, %multiply.8965
  %256 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg29170, i64 0, i64 %17, i64 %212
  %257 = getelementptr inbounds float, ptr addrspace(1) %256, i64 16
  %258 = load float, ptr addrspace(1) %257, align 8, !invariant.load !267
  %multiply.9267 = fmul float %16, %258
  %subtract.9368 = fsub float %154, %multiply.9267
  %259 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg31174, i64 0, i64 %17, i64 %212
  %260 = load float, ptr addrspace(1) %259, align 8, !invariant.load !267
  %multiply.9569 = fmul float %16, %260
  %subtract.9670 = fsub float %165, %multiply.9569
  %261 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg33178, i64 0, i64 %17, i64 %212
  %262 = getelementptr inbounds float, ptr addrspace(1) %261, i64 16
  %263 = load float, ptr addrspace(1) %262, align 8, !invariant.load !267
  %multiply.9871 = fmul float %16, %263
  %subtract.9972 = fsub float %175, %multiply.9871
  %264 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg35182, i64 0, i64 %17, i64 %212
  %265 = load float, ptr addrspace(1) %264, align 8, !invariant.load !267
  %multiply.10173 = fmul float %16, %265
  %subtract.10274 = fsub float %186, %multiply.10173
  %266 = zext i32 %5 to i64
  %267 = getelementptr inbounds [8192 x [144 x float]], ptr addrspace(1) %arg2116, i64 0, i64 %17, i64 %266
  %268 = load float, ptr addrspace(1) %267, align 4, !invariant.load !267
  %269 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1114, i64 0, i64 %17, i64 %266
  %270 = getelementptr inbounds float, ptr addrspace(1) %269, i64 16
  %271 = load float, ptr addrspace(1) %270, align 4, !invariant.load !267
  %add.4075 = fadd float %268, %271
  %multiply.4176 = fmul float %16, %add.4075
  %subtract.4277 = fsub float %15, %multiply.4176
  %272 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg5122, i64 0, i64 %17, i64 %266
  %273 = getelementptr inbounds float, ptr addrspace(1) %272, i64 16
  %274 = load float, ptr addrspace(1) %273, align 4, !invariant.load !267
  %275 = getelementptr inbounds float, ptr addrspace(1) %267, i64 48
  %276 = load float, ptr addrspace(1) %275, align 4, !invariant.load !267
  %add.4578 = fadd float %274, %276
  %multiply.4679 = fmul float %16, %add.4578
  %subtract.4780 = fsub float %33, %multiply.4679
  %277 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg7126, i64 0, i64 %17, i64 %266
  %278 = getelementptr inbounds float, ptr addrspace(1) %277, i64 16
  %279 = load float, ptr addrspace(1) %278, align 4, !invariant.load !267
  %280 = getelementptr inbounds float, ptr addrspace(1) %267, i64 96
  %281 = load float, ptr addrspace(1) %280, align 4, !invariant.load !267
  %add.5081 = fadd float %279, %281
  %multiply.5182 = fmul float %16, %add.5081
  %subtract.5283 = fsub float %48, %multiply.5182
  %282 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg9130, i64 0, i64 %17, i64 %266
  %283 = load float, ptr addrspace(1) %282, align 4, !invariant.load !267
  %multiply.5484 = fmul float %16, %283
  %subtract.5585 = fsub float %63, %multiply.5484
  %284 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg13138, i64 0, i64 %17, i64 %266
  %285 = load float, ptr addrspace(1) %284, align 4, !invariant.load !267
  %286 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg12136, i64 0, i64 %17, i64 %266
  %287 = load float, ptr addrspace(1) %286, align 4, !invariant.load !267
  %add.5886 = fadd float %285, %287
  %288 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg11134, i64 0, i64 %17, i64 %266
  %289 = load float, ptr addrspace(1) %288, align 4, !invariant.load !267
  %add.6087 = fadd float %add.5886, %289
  %multiply.6288 = fmul float %16, %add.6087
  %subtract.6389 = fsub float %73, %multiply.6288
  %290 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg17146, i64 0, i64 %17, i64 %266
  %291 = load float, ptr addrspace(1) %290, align 4, !invariant.load !267
  %292 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg16144, i64 0, i64 %17, i64 %266
  %293 = load float, ptr addrspace(1) %292, align 4, !invariant.load !267
  %add.6690 = fadd float %291, %293
  %294 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg15142, i64 0, i64 %17, i64 %266
  %295 = load float, ptr addrspace(1) %294, align 4, !invariant.load !267
  %add.6891 = fadd float %add.6690, %295
  %multiply.7092 = fmul float %16, %add.6891
  %subtract.7193 = fsub float %91, %multiply.7092
  %296 = getelementptr inbounds [8192 x [360 x float]], ptr addrspace(1) %arg21154, i64 0, i64 %17, i64 %266
  %297 = load float, ptr addrspace(1) %296, align 4, !invariant.load !267
  %298 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg20152, i64 0, i64 %17, i64 %266
  %299 = load float, ptr addrspace(1) %298, align 4, !invariant.load !267
  %add.7494 = fadd float %297, %299
  %300 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg19150, i64 0, i64 %17, i64 %266
  %301 = load float, ptr addrspace(1) %300, align 4, !invariant.load !267
  %add.7695 = fadd float %add.7494, %301
  %multiply.7896 = fmul float %16, %add.7695
  %subtract.7997 = fsub float %109, %multiply.7896
  %302 = getelementptr inbounds [8192 x [384 x float]], ptr addrspace(1) %arg25162, i64 0, i64 %17, i64 %266
  %303 = load float, ptr addrspace(1) %302, align 4, !invariant.load !267
  %304 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg24160, i64 0, i64 %17, i64 %266
  %305 = load float, ptr addrspace(1) %304, align 4, !invariant.load !267
  %add.8298 = fadd float %303, %305
  %306 = getelementptr inbounds [8192 x [224 x float]], ptr addrspace(1) %arg23158, i64 0, i64 %17, i64 %266
  %307 = load float, ptr addrspace(1) %306, align 4, !invariant.load !267
  %add.8499 = fadd float %add.8298, %307
  %multiply.86100 = fmul float %16, %add.8499
  %subtract.87101 = fsub float %127, %multiply.86100
  %308 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg27166, i64 0, i64 %17, i64 %266
  %309 = load float, ptr addrspace(1) %308, align 4, !invariant.load !267
  %multiply.89102 = fmul float %16, %309
  %subtract.90103 = fsub float %145, %multiply.89102
  %310 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg29170, i64 0, i64 %17, i64 %266
  %311 = getelementptr inbounds float, ptr addrspace(1) %310, i64 16
  %312 = load float, ptr addrspace(1) %311, align 4, !invariant.load !267
  %multiply.92104 = fmul float %16, %312
  %subtract.93105 = fsub float %155, %multiply.92104
  %313 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg31174, i64 0, i64 %17, i64 %266
  %314 = load float, ptr addrspace(1) %313, align 4, !invariant.load !267
  %multiply.95106 = fmul float %16, %314
  %subtract.96107 = fsub float %166, %multiply.95106
  %315 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg33178, i64 0, i64 %17, i64 %266
  %316 = getelementptr inbounds float, ptr addrspace(1) %315, i64 16
  %317 = load float, ptr addrspace(1) %316, align 4, !invariant.load !267
  %multiply.98108 = fmul float %16, %317
  %subtract.99109 = fsub float %176, %multiply.98108
  %318 = getelementptr inbounds [8192 x [352 x float]], ptr addrspace(1) %arg35182, i64 0, i64 %17, i64 %266
  %319 = load float, ptr addrspace(1) %318, align 4, !invariant.load !267
  %multiply.101110 = fmul float %16, %319
  %subtract.102111 = fsub float %187, %multiply.101110
  %320 = insertelement <4 x float> poison, float %subtract.42, i32 0
  %321 = insertelement <4 x float> %320, float %subtract.423, i32 1
  %322 = insertelement <4 x float> %321, float %subtract.4240, i32 2
  %323 = insertelement <4 x float> %322, float %subtract.4277, i32 3
  store <4 x float> %323, ptr addrspace(1) %192, align 16
  %324 = insertelement <4 x float> poison, float %subtract.47, i32 0
  %325 = insertelement <4 x float> %324, float %subtract.476, i32 1
  %326 = insertelement <4 x float> %325, float %subtract.4743, i32 2
  %327 = insertelement <4 x float> %326, float %subtract.4780, i32 3
  store <4 x float> %327, ptr addrspace(1) %193, align 16
  %328 = insertelement <4 x float> poison, float %subtract.52, i32 0
  %329 = insertelement <4 x float> %328, float %subtract.529, i32 1
  %330 = insertelement <4 x float> %329, float %subtract.5246, i32 2
  %331 = insertelement <4 x float> %330, float %subtract.5283, i32 3
  store <4 x float> %331, ptr addrspace(1) %194, align 16
  %332 = insertelement <4 x float> poison, float %subtract.55, i32 0
  %333 = insertelement <4 x float> %332, float %subtract.5511, i32 1
  %334 = insertelement <4 x float> %333, float %subtract.5548, i32 2
  %335 = insertelement <4 x float> %334, float %subtract.5585, i32 3
  store <4 x float> %335, ptr addrspace(1) %195, align 16
  %336 = insertelement <4 x float> poison, float %subtract.63, i32 0
  %337 = insertelement <4 x float> %336, float %subtract.6315, i32 1
  %338 = insertelement <4 x float> %337, float %subtract.6352, i32 2
  %339 = insertelement <4 x float> %338, float %subtract.6389, i32 3
  store <4 x float> %339, ptr addrspace(1) %196, align 16
  %340 = insertelement <4 x float> poison, float %subtract.71, i32 0
  %341 = insertelement <4 x float> %340, float %subtract.7119, i32 1
  %342 = insertelement <4 x float> %341, float %subtract.7156, i32 2
  %343 = insertelement <4 x float> %342, float %subtract.7193, i32 3
  store <4 x float> %343, ptr addrspace(1) %197, align 16
  %344 = insertelement <4 x float> poison, float %subtract.79, i32 0
  %345 = insertelement <4 x float> %344, float %subtract.7923, i32 1
  %346 = insertelement <4 x float> %345, float %subtract.7960, i32 2
  %347 = insertelement <4 x float> %346, float %subtract.7997, i32 3
  store <4 x float> %347, ptr addrspace(1) %198, align 16
  %348 = insertelement <4 x float> poison, float %subtract.87, i32 0
  %349 = insertelement <4 x float> %348, float %subtract.8727, i32 1
  %350 = insertelement <4 x float> %349, float %subtract.8764, i32 2
  %351 = insertelement <4 x float> %350, float %subtract.87101, i32 3
  store <4 x float> %351, ptr addrspace(1) %199, align 16
  %352 = insertelement <4 x float> poison, float %subtract.90, i32 0
  %353 = insertelement <4 x float> %352, float %subtract.9029, i32 1
  %354 = insertelement <4 x float> %353, float %subtract.9066, i32 2
  %355 = insertelement <4 x float> %354, float %subtract.90103, i32 3
  store <4 x float> %355, ptr addrspace(1) %200, align 16
  %356 = insertelement <4 x float> poison, float %subtract.93, i32 0
  %357 = insertelement <4 x float> %356, float %subtract.9331, i32 1
  %358 = insertelement <4 x float> %357, float %subtract.9368, i32 2
  %359 = insertelement <4 x float> %358, float %subtract.93105, i32 3
  store <4 x float> %359, ptr addrspace(1) %201, align 16
  %360 = insertelement <4 x float> poison, float %subtract.96, i32 0
  %361 = insertelement <4 x float> %360, float %subtract.9633, i32 1
  %362 = insertelement <4 x float> %361, float %subtract.9670, i32 2
  %363 = insertelement <4 x float> %362, float %subtract.96107, i32 3
  store <4 x float> %363, ptr addrspace(1) %202, align 16
  %364 = insertelement <4 x float> poison, float %subtract.99, i32 0
  %365 = insertelement <4 x float> %364, float %subtract.9935, i32 1
  %366 = insertelement <4 x float> %365, float %subtract.9972, i32 2
  %367 = insertelement <4 x float> %366, float %subtract.99109, i32 3
  store <4 x float> %367, ptr addrspace(1) %203, align 16
  %368 = insertelement <4 x float> poison, float %subtract.102, i32 0
  %369 = insertelement <4 x float> %368, float %subtract.10237, i32 1
  %370 = insertelement <4 x float> %369, float %subtract.10274, i32 2
  %371 = insertelement <4 x float> %370, float %subtract.102111, i32 3
  store <4 x float> %371, ptr addrspace(1) %204, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_370(ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 192
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 15
  %6 = shl nuw nsw i32 %thread_id.y64, 8
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 8
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %16
  %17 = lshr i32 %11, 8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi i32 [ %17, %entry ], [ %lsr.iv.next111, %y_in_tile.loop_body ]
  %lsr.iv107 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep108, %y_in_tile.loop_body ]
  %lsr.iv105 = phi i32 [ %13, %entry ], [ %lsr.iv.next106, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.089 = phi i32 [ %thread_id.y64, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.13.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.13.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.089, 32
  %18 = and i32 %lsr.iv, 254
  %19 = and i32 %lsr.iv110, 16777088
  %20 = or i32 %19, %y_in_tile.invar_address.089
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %21, i64 %22
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %23 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg091, i64 0, i64 %21, i64 %22
  %Arg_0.199 = getelementptr inbounds float, ptr addrspace(1) %23, i64 192
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.199, align 8, !invariant.load !267
  %24 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.13.i = fadd float %partial_reduction_result63.sroa.0.087, %24
  %scevgep109 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 -4
  %25 = load <2 x float>, ptr addrspace(1) %scevgep109, align 8, !invariant.load !267
  %Arg_1.26112 = extractelement <2 x float> %25, i32 0
  %Arg_1.222113 = extractelement <2 x float> %25, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26112, 0.000000e+00
  %26 = select i1 %compare.58, float %Arg_0.14, float 0.000000e+00
  %27 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %21, i64 %22
  store float %26, ptr addrspace(1) %27, align 8
  %28 = add i32 %lsr.iv, 1
  %29 = and i32 %28, 255
  %30 = and i32 %lsr.iv105, 16777088
  %31 = or i32 %30, %y_in_tile.invar_address.089
  %32 = zext i32 %31 to i64
  %33 = zext i32 %29 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %32, i64 %33
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %34 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg091, i64 0, i64 %32, i64 %33
  %Arg_0.118100 = getelementptr inbounds float, ptr addrspace(1) %34, i64 192
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118100, align 4, !invariant.load !267
  %35 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.13.i76 = fadd float %partial_reduction_result63.sroa.4.088, %35
  %compare.524 = fcmp ogt float %Arg_1.222113, 0.000000e+00
  %36 = select i1 %compare.524, float %Arg_0.119, float 0.000000e+00
  %37 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %32, i64 %33
  store float %36, ptr addrspace(1) %37, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 8192
  %lsr.iv.next106 = add nuw nsw i32 %lsr.iv105, 32
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 32768
  %lsr.iv.next111 = add nuw nsw i32 %lsr.iv110, 32
  %38 = icmp ugt i32 %y_in_tile.invar_address.089, 95
  br i1 %38, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %39 = zext i32 %thread_id.x to i64
  %40 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i64 0, i64 0, i64 0, i64 %39, i64 %40
  store float %add.13.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i64 0, i64 0, i64 0, i64 %40, i64 %39
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.13.i77 = fadd float %partial_reduction_result27, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i77, i32 8, i32 31)
  %add.13.i78 = fadd float %add.13.i77, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i78, i32 4, i32 31)
  %add.13.i79 = fadd float %add.13.i78, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i79, i32 2, i32 31)
  %add.13.i80 = fadd float %add.13.i79, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i80, i32 1, i32 31)
  %add.13.i81 = fadd float %add.13.i80, %45
  store float %add.13.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %46 = shl nuw nsw i32 %thread_id.y64, 1
  %47 = icmp eq i32 %thread_id.x, 0
  %48 = zext i32 %2 to i64
  %49 = or i32 %46, %tile_origin.2
  %50 = zext i32 %49 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg295, i64 0, i64 %48, i64 %50
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %51 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41102 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.13.i76, ptr addrspace(3) %shmem_output_address41102, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43103 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.13.i82 = fadd float %partial_reduction_result45, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i82, i32 8, i32 31)
  %add.13.i83 = fadd float %add.13.i82, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i83, i32 4, i32 31)
  %add.13.i84 = fadd float %add.13.i83, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i84, i32 2, i32 31)
  %add.13.i85 = fadd float %add.13.i84, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i85, i32 1, i32 31)
  %add.13.i86 = fadd float %add.13.i85, %56
  store float %add.13.i86, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  br i1 %51, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.13.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.13.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_213(ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(1024) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg23, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg24, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg25, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg26, ptr noalias nocapture writeonly align 128 dereferenceable(1024) %arg27) local_unnamed_addr #6 {
entry:
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.21 = fmul float %4, %6
  %subtract.22 = fsub float %3, %multiply.21
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.23 = fmul float %4, %10
  %subtract.24 = fsub float %8, %multiply.23
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.25 = fmul float %4, %14
  %subtract.26 = fsub float %12, %multiply.25
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.27 = fmul float %4, %18
  %subtract.28 = fsub float %16, %multiply.27
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.29 = fmul float %4, %22
  %subtract.30 = fsub float %20, %multiply.29
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.31 = fmul float %4, %26
  %subtract.32 = fsub float %24, %multiply.31
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %multiply.33 = fmul float %4, %30
  %subtract.34 = fsub float %28, %multiply.33
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %multiply.35 = fmul float %4, %34
  %subtract.36 = fsub float %32, %multiply.35
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.37 = fmul float %4, %38
  %subtract.38 = fsub float %36, %multiply.37
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  store float %subtract.22, ptr addrspace(1) %39, align 4
  %40 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  store float %subtract.24, ptr addrspace(1) %40, align 4
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  store float %subtract.26, ptr addrspace(1) %41, align 4
  %42 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  store float %subtract.28, ptr addrspace(1) %42, align 4
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  store float %subtract.30, ptr addrspace(1) %43, align 4
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  store float %subtract.32, ptr addrspace(1) %44, align 4
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  store float %subtract.34, ptr addrspace(1) %45, align 4
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  store float %subtract.36, ptr addrspace(1) %46, align 4
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  store float %subtract.38, ptr addrspace(1) %47, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_342(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(14680064) %arg3) local_unnamed_addr #5 {
entry:
  %arg352 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !300
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 448
  %5 = mul i32 %4, 448
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 448
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 448
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 448
  %9 = icmp ult i32 %.decomposed, 64
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 448
  %11 = shl nuw nsw i32 %10, 6
  %12 = add nuw nsw i32 %11, %.decomposed
  br label %concatenate.4.merge

concatenate.pivot.192.:                           ; preds = %entry
  %13 = icmp ult i32 %.decomposed, 192
  %14 = udiv i32 %linear_index_base, 448
  br i1 %13, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  %15 = add nsw i32 %.decomposed, -64
  %16 = shl nuw nsw i32 %14, 7
  %17 = add nuw nsw i32 %15, %16
  br label %concatenate.4.merge

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  %18 = add nsw i32 %.decomposed, -192
  %19 = shl nuw nsw i32 %14, 8
  %20 = add nuw nsw i32 %18, %19
  br label %concatenate.4.merge

concatenate.4.merge:                              ; preds = %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.sink39 = phi i32 [ %20, %concatenate.pivot.192.2 ], [ %17, %concatenate.pivot.64.1 ], [ %12, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.2 ], [ %arg148, %concatenate.pivot.64.1 ], [ %arg046, %concatenate.pivot.0. ]
  %21 = zext i32 %.sink39 to i64
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = zext i32 %linear_index_base to i64
  %25 = getelementptr float, ptr addrspace(1) %arg352, i64 %24
  store float %23, ptr addrspace(1) %25, align 16
  %26 = icmp ult i32 %6, 64
  br i1 %26, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.4.merge
  %27 = udiv i32 %linear_index_base, 448
  %28 = shl nuw nsw i32 %27, 6
  %29 = add nuw nsw i32 %28, %6
  br label %concatenate.4.merge3

concatenate.pivot.192.9:                          ; preds = %concatenate.4.merge
  %30 = icmp ult i32 %6, 192
  %31 = udiv i32 %linear_index_base, 448
  br i1 %30, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %32 = add nsw i32 %6, -64
  %33 = shl nuw nsw i32 %31, 7
  %34 = add nuw nsw i32 %32, %33
  br label %concatenate.4.merge3

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  %35 = add nsw i32 %6, -192
  %36 = shl nuw nsw i32 %31, 8
  %37 = add nuw nsw i32 %35, %36
  br label %concatenate.4.merge3

concatenate.4.merge3:                             ; preds = %concatenate.pivot.192.11, %concatenate.pivot.64.10, %concatenate.pivot.0.8
  %.sink41 = phi i32 [ %37, %concatenate.pivot.192.11 ], [ %34, %concatenate.pivot.64.10 ], [ %29, %concatenate.pivot.0.8 ]
  %arg2.sink40 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.11 ], [ %arg148, %concatenate.pivot.64.10 ], [ %arg046, %concatenate.pivot.0.8 ]
  %38 = zext i32 %.sink41 to i64
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink40, i64 %38
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %25, i64 1
  store float %40, ptr addrspace(1) %41, align 4
  %42 = icmp ult i32 %7, 64
  br i1 %42, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.4.merge3
  %43 = udiv i32 %linear_index_base, 448
  %44 = shl nuw nsw i32 %43, 6
  %45 = add nuw nsw i32 %44, %7
  br label %concatenate.4.merge12

concatenate.pivot.192.18:                         ; preds = %concatenate.4.merge3
  %46 = icmp ult i32 %7, 192
  %47 = udiv i32 %linear_index_base, 448
  br i1 %46, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  %48 = add nsw i32 %7, -64
  %49 = shl nuw nsw i32 %47, 7
  %50 = add nuw nsw i32 %48, %49
  br label %concatenate.4.merge12

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  %51 = add nsw i32 %7, -192
  %52 = shl nuw nsw i32 %47, 8
  %53 = add nuw nsw i32 %51, %52
  br label %concatenate.4.merge12

concatenate.4.merge12:                            ; preds = %concatenate.pivot.192.20, %concatenate.pivot.64.19, %concatenate.pivot.0.17
  %.sink43 = phi i32 [ %53, %concatenate.pivot.192.20 ], [ %50, %concatenate.pivot.64.19 ], [ %45, %concatenate.pivot.0.17 ]
  %arg2.sink42 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.20 ], [ %arg148, %concatenate.pivot.64.19 ], [ %arg046, %concatenate.pivot.0.17 ]
  %54 = zext i32 %.sink43 to i64
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink42, i64 %54
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %25, i64 2
  store float %56, ptr addrspace(1) %57, align 8
  %58 = icmp ult i32 %8, 64
  br i1 %58, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.4.merge12
  %59 = udiv i32 %linear_index_base, 448
  %60 = shl nuw nsw i32 %59, 6
  %61 = add nuw nsw i32 %60, %8
  br label %concatenate.4.merge21

concatenate.pivot.192.27:                         ; preds = %concatenate.4.merge12
  %62 = icmp ult i32 %8, 192
  br i1 %62, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  %63 = add nsw i32 %8, -64
  %64 = shl nuw nsw i32 %4, 7
  %65 = add nuw nsw i32 %63, %64
  br label %concatenate.4.merge21

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  %66 = add nsw i32 %8, -192
  %67 = shl nuw nsw i32 %4, 8
  %68 = add nuw nsw i32 %66, %67
  br label %concatenate.4.merge21

concatenate.4.merge21:                            ; preds = %concatenate.pivot.192.29, %concatenate.pivot.64.28, %concatenate.pivot.0.26
  %.sink45 = phi i32 [ %68, %concatenate.pivot.192.29 ], [ %65, %concatenate.pivot.64.28 ], [ %61, %concatenate.pivot.0.26 ]
  %arg2.sink44 = phi ptr addrspace(1) [ %arg250, %concatenate.pivot.192.29 ], [ %arg148, %concatenate.pivot.64.28 ], [ %arg046, %concatenate.pivot.0.26 ]
  %69 = zext i32 %.sink45 to i64
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink44, i64 %69
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %72 = getelementptr inbounds float, ptr addrspace(1) %25, i64 3
  store float %71, ptr addrspace(1) %72, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_289(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture align 128 dereferenceable(65536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg3, ptr noalias nocapture align 128 dereferenceable(65536) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg7, ptr noalias nocapture align 128 dereferenceable(65536) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg9, ptr noalias nocapture align 128 dereferenceable(65536) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg11, ptr noalias nocapture align 128 dereferenceable(65536) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg13, ptr noalias nocapture align 128 dereferenceable(65536) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg15, ptr noalias nocapture align 128 dereferenceable(65536) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg17, ptr noalias nocapture align 128 dereferenceable(65536) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg19) local_unnamed_addr #6 {
entry:
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !301
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 7
  %4 = and i32 %2, 127
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %5
  %10 = load float, ptr addrspace(1) %9, align 4
  %multiply.21 = fmul float %8, %10
  %subtract.22 = fsub float %7, %multiply.21
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %5
  %14 = load float, ptr addrspace(1) %13, align 4
  %multiply.23 = fmul float %8, %14
  %subtract.24 = fsub float %12, %multiply.23
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = zext i32 %4 to i64
  %18 = zext i32 %3 to i64
  %19 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg620, i64 0, i64 %18, i64 %17
  %20 = getelementptr inbounds float, ptr addrspace(1) %19, i64 8192
  %21 = load float, ptr addrspace(1) %20, align 4, !invariant.load !267
  %multiply.26 = fmul float %8, %21
  %subtract.27 = fsub float %16, %multiply.26
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %5
  %25 = load float, ptr addrspace(1) %24, align 4
  %multiply.28 = fmul float %8, %25
  %subtract.29 = fsub float %23, %multiply.28
  %26 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %5
  %29 = load float, ptr addrspace(1) %28, align 4
  %multiply.30 = fmul float %8, %29
  %subtract.31 = fsub float %27, %multiply.30
  %30 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %32 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %5
  %33 = load float, ptr addrspace(1) %32, align 4
  %multiply.32 = fmul float %8, %33
  %subtract.33 = fsub float %31, %multiply.32
  %34 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %36 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %5
  %37 = load float, ptr addrspace(1) %36, align 4
  %multiply.34 = fmul float %8, %37
  %subtract.35 = fsub float %35, %multiply.34
  %38 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %39 = load float, ptr addrspace(1) %38, align 4, !invariant.load !267
  %40 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %5
  %41 = load float, ptr addrspace(1) %40, align 4
  %multiply.36 = fmul float %8, %41
  %subtract.37 = fsub float %39, %multiply.36
  %42 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %43 = load float, ptr addrspace(1) %42, align 4, !invariant.load !267
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  %45 = load float, ptr addrspace(1) %44, align 4
  %multiply.38 = fmul float %8, %45
  %subtract.39 = fsub float %43, %multiply.38
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  store float %subtract.22, ptr addrspace(1) %46, align 4
  store float %subtract.24, ptr addrspace(1) %44, align 4
  store float %subtract.27, ptr addrspace(1) %40, align 4
  store float %subtract.29, ptr addrspace(1) %36, align 4
  store float %subtract.31, ptr addrspace(1) %32, align 4
  store float %subtract.33, ptr addrspace(1) %28, align 4
  store float %subtract.35, ptr addrspace(1) %24, align 4
  store float %subtract.37, ptr addrspace(1) %13, align 4
  store float %subtract.39, ptr addrspace(1) %9, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_438(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg32, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg33, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg34, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg48) local_unnamed_addr #6 {
entry:
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 7
  %4 = and i32 %2, 127
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %3 to i64
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds [320 x [128 x float]], ptr addrspace(1) %arg110, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %multiply.36 = fmul float %8, %12
  %subtract.37 = fsub float %7, %multiply.36
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg416, i64 0, i64 %9, i64 %10
  %16 = getelementptr inbounds float, ptr addrspace(1) %15, i64 4096
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %multiply.39 = fmul float %8, %17
  %subtract.40 = fsub float %14, %multiply.39
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %20 = getelementptr inbounds [448 x [128 x float]], ptr addrspace(1) %arg620, i64 0, i64 %9, i64 %10
  %21 = load float, ptr addrspace(1) %20, align 4, !invariant.load !267
  %multiply.42 = fmul float %8, %21
  %subtract.43 = fsub float %19, %multiply.42
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg824, i64 0, i64 %9, i64 %10
  %25 = getelementptr inbounds float, ptr addrspace(1) %24, i64 4096
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.45 = fmul float %8, %26
  %subtract.46 = fsub float %23, %multiply.45
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %9, i64 %10
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 4096
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %multiply.48 = fmul float %8, %31
  %subtract.49 = fsub float %28, %multiply.48
  %32 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %34 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %9, i64 %10
  %35 = getelementptr inbounds float, ptr addrspace(1) %34, i64 4096
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %multiply.51 = fmul float %8, %36
  %subtract.52 = fsub float %33, %multiply.51
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %39 = getelementptr inbounds [448 x [128 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %9, i64 %10
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %multiply.54 = fmul float %8, %40
  %subtract.55 = fsub float %38, %multiply.54
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %43 = getelementptr inbounds [448 x [128 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %9, i64 %10
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %multiply.57 = fmul float %8, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %47 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg1844, i64 0, i64 %9, i64 %10
  %48 = getelementptr inbounds float, ptr addrspace(1) %47, i64 4096
  %49 = load float, ptr addrspace(1) %48, align 4, !invariant.load !267
  %multiply.60 = fmul float %8, %49
  %subtract.61 = fsub float %46, %multiply.60
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  %51 = load float, ptr addrspace(1) %50, align 4, !invariant.load !267
  %52 = getelementptr inbounds [320 x [128 x float]], ptr addrspace(1) %arg2048, i64 0, i64 %9, i64 %10
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %multiply.63 = fmul float %8, %53
  %subtract.64 = fsub float %51, %multiply.63
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %56 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2252, i64 0, i64 %9, i64 %10
  %57 = getelementptr inbounds float, ptr addrspace(1) %56, i64 4096
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %multiply.66 = fmul float %8, %58
  %subtract.67 = fsub float %55, %multiply.66
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2456, i64 0, i64 %9, i64 %10
  %62 = getelementptr inbounds float, ptr addrspace(1) %61, i64 4096
  %63 = load float, ptr addrspace(1) %62, align 4, !invariant.load !267
  %multiply.69 = fmul float %8, %63
  %subtract.70 = fsub float %60, %multiply.69
  %64 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %5
  %65 = load float, ptr addrspace(1) %64, align 4, !invariant.load !267
  %66 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2660, i64 0, i64 %9, i64 %10
  %67 = getelementptr inbounds float, ptr addrspace(1) %66, i64 4096
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %multiply.72 = fmul float %8, %68
  %subtract.73 = fsub float %65, %multiply.72
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %5
  %70 = load float, ptr addrspace(1) %69, align 4, !invariant.load !267
  %71 = getelementptr inbounds [320 x [128 x float]], ptr addrspace(1) %arg2864, i64 0, i64 %9, i64 %10
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %multiply.75 = fmul float %8, %72
  %subtract.76 = fsub float %70, %multiply.75
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %5
  %74 = load float, ptr addrspace(1) %73, align 4, !invariant.load !267
  %75 = getelementptr inbounds [320 x [128 x float]], ptr addrspace(1) %arg3068, i64 0, i64 %9, i64 %10
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %multiply.78 = fmul float %8, %76
  %subtract.79 = fsub float %74, %multiply.78
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %5
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %79 = getelementptr inbounds [448 x [128 x float]], ptr addrspace(1) %arg3272, i64 0, i64 %9, i64 %10
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %multiply.81 = fmul float %8, %80
  %subtract.82 = fsub float %78, %multiply.81
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %5
  store float %subtract.37, ptr addrspace(1) %81, align 4
  %82 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %5
  store float %subtract.40, ptr addrspace(1) %82, align 4
  %83 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  store float %subtract.43, ptr addrspace(1) %83, align 4
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %5
  store float %subtract.46, ptr addrspace(1) %84, align 4
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  store float %subtract.49, ptr addrspace(1) %85, align 4
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %5
  store float %subtract.52, ptr addrspace(1) %86, align 4
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  store float %subtract.55, ptr addrspace(1) %87, align 4
  %88 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %5
  store float %subtract.58, ptr addrspace(1) %88, align 4
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.61, ptr addrspace(1) %89, align 4
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.64, ptr addrspace(1) %90, align 4
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.67, ptr addrspace(1) %91, align 4
  %92 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.70, ptr addrspace(1) %92, align 4
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.73, ptr addrspace(1) %93, align 4
  %94 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.76, ptr addrspace(1) %94, align 4
  %95 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %5
  store float %subtract.79, ptr addrspace(1) %95, align 4
  %96 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %5
  store float %subtract.82, ptr addrspace(1) %96, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_270(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg10, ptr noalias nocapture readonly align 128 dereferenceable(163840) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(114688) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg35, ptr noalias nocapture readonly align 128 dereferenceable(65536) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg37, ptr noalias nocapture align 128 dereferenceable(65536) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg39, ptr noalias nocapture align 128 dereferenceable(65536) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg50, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg51, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg52, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg53, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg54, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg55, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg56, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg57, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg58, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg59, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg60) local_unnamed_addr #6 {
entry:
  %arg60128 = addrspacecast ptr %arg60 to ptr addrspace(1)
  %arg59126 = addrspacecast ptr %arg59 to ptr addrspace(1)
  %arg58124 = addrspacecast ptr %arg58 to ptr addrspace(1)
  %arg57122 = addrspacecast ptr %arg57 to ptr addrspace(1)
  %arg56120 = addrspacecast ptr %arg56 to ptr addrspace(1)
  %arg55118 = addrspacecast ptr %arg55 to ptr addrspace(1)
  %arg54116 = addrspacecast ptr %arg54 to ptr addrspace(1)
  %arg53114 = addrspacecast ptr %arg53 to ptr addrspace(1)
  %arg52112 = addrspacecast ptr %arg52 to ptr addrspace(1)
  %arg51110 = addrspacecast ptr %arg51 to ptr addrspace(1)
  %arg50108 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49106 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !301
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = lshr i32 %linear_index, 7
  %4 = and i32 %1, 127
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [320 x [128 x float]], ptr addrspace(1) %arg110, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 24576
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.44 = fmul float %8, %13
  %subtract.45 = fsub float %7, %multiply.44
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr inbounds float, ptr addrspace(1) %11, i64 8192
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %multiply.47 = fmul float %8, %17
  %subtract.48 = fsub float %15, %multiply.47
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %5
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %20 = getelementptr [320 x [128 x float]], ptr addrspace(1) %arg518, i64 0, i64 %10, i64 %9
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 8192
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.50 = fmul float %8, %22
  %subtract.51 = fsub float %19, %multiply.50
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %5
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %20, i64 24576
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.53 = fmul float %8, %26
  %subtract.54 = fsub float %24, %multiply.53
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr [320 x [128 x float]], ptr addrspace(1) %arg824, i64 0, i64 %10, i64 %9
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 8192
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %multiply.56 = fmul float %8, %31
  %subtract.57 = fsub float %28, %multiply.56
  %32 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %34 = getelementptr inbounds float, ptr addrspace(1) %29, i64 24576
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %multiply.59 = fmul float %8, %35
  %subtract.60 = fsub float %33, %multiply.59
  %36 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %5
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  %38 = getelementptr [320 x [128 x float]], ptr addrspace(1) %arg1130, i64 0, i64 %10, i64 %9
  %39 = getelementptr inbounds float, ptr addrspace(1) %38, i64 8192
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %multiply.62 = fmul float %8, %40
  %subtract.63 = fsub float %37, %multiply.62
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %5
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %43 = getelementptr inbounds float, ptr addrspace(1) %38, i64 24576
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %multiply.65 = fmul float %8, %44
  %subtract.66 = fsub float %42, %multiply.65
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %5
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %multiply.67 = fmul float %8, %48
  %subtract.68 = fsub float %46, %multiply.67
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %51 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %10, i64 %9
  %52 = getelementptr inbounds float, ptr addrspace(1) %51, i64 8192
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %multiply.70 = fmul float %8, %53
  %subtract.71 = fsub float %50, %multiply.70
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %56 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg1844, i64 0, i64 %10, i64 %9
  %57 = getelementptr inbounds float, ptr addrspace(1) %56, i64 8192
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %multiply.73 = fmul float %8, %58
  %subtract.74 = fsub float %55, %multiply.73
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg2048, i64 0, i64 %10, i64 %9
  %62 = getelementptr inbounds float, ptr addrspace(1) %61, i64 8192
  %63 = load float, ptr addrspace(1) %62, align 4, !invariant.load !267
  %multiply.76 = fmul float %8, %63
  %subtract.77 = fsub float %60, %multiply.76
  %64 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  %65 = load float, ptr addrspace(1) %64, align 4, !invariant.load !267
  %66 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2252, i64 0, i64 %10, i64 %9
  %67 = getelementptr inbounds float, ptr addrspace(1) %66, i64 12288
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %multiply.79 = fmul float %8, %68
  %subtract.80 = fsub float %65, %multiply.79
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  %70 = load float, ptr addrspace(1) %69, align 4, !invariant.load !267
  %71 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2456, i64 0, i64 %10, i64 %9
  %72 = getelementptr inbounds float, ptr addrspace(1) %71, i64 12288
  %73 = load float, ptr addrspace(1) %72, align 4, !invariant.load !267
  %multiply.82 = fmul float %8, %73
  %subtract.83 = fsub float %70, %multiply.82
  %74 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %5
  %75 = load float, ptr addrspace(1) %74, align 4, !invariant.load !267
  %76 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2660, i64 0, i64 %10, i64 %9
  %77 = getelementptr inbounds float, ptr addrspace(1) %76, i64 12288
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %multiply.85 = fmul float %8, %78
  %subtract.86 = fsub float %75, %multiply.85
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %5
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr [224 x [128 x float]], ptr addrspace(1) %arg2864, i64 0, i64 %10, i64 %9
  %82 = getelementptr inbounds float, ptr addrspace(1) %81, i64 12288
  %83 = load float, ptr addrspace(1) %82, align 4, !invariant.load !267
  %multiply.88 = fmul float %8, %83
  %subtract.89 = fsub float %80, %multiply.88
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %5
  %85 = load float, ptr addrspace(1) %84, align 4, !invariant.load !267
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %5
  %87 = load float, ptr addrspace(1) %86, align 4, !invariant.load !267
  %multiply.90 = fmul float %8, %87
  %subtract.91 = fsub float %85, %multiply.90
  %88 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %5
  %89 = load float, ptr addrspace(1) %88, align 4, !invariant.load !267
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %5
  %91 = load float, ptr addrspace(1) %90, align 4, !invariant.load !267
  %multiply.92 = fmul float %8, %91
  %subtract.93 = fsub float %89, %multiply.92
  %92 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %5
  %93 = load float, ptr addrspace(1) %92, align 4, !invariant.load !267
  %94 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %5
  %95 = load float, ptr addrspace(1) %94, align 4, !invariant.load !267
  %multiply.94 = fmul float %8, %95
  %subtract.95 = fsub float %93, %multiply.94
  %96 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  %97 = load float, ptr addrspace(1) %96, align 4, !invariant.load !267
  %98 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %5
  %99 = load float, ptr addrspace(1) %98, align 4, !invariant.load !267
  %multiply.96 = fmul float %8, %99
  %subtract.97 = fsub float %97, %multiply.96
  %100 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  %101 = load float, ptr addrspace(1) %100, align 4, !invariant.load !267
  %102 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %5
  %103 = load float, ptr addrspace(1) %102, align 4
  %multiply.98 = fmul float %8, %103
  %subtract.99 = fsub float %101, %multiply.98
  %104 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  %105 = load float, ptr addrspace(1) %104, align 4, !invariant.load !267
  %106 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %5
  %107 = load float, ptr addrspace(1) %106, align 4
  %multiply.100 = fmul float %8, %107
  %subtract.101 = fsub float %105, %multiply.100
  %108 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.45, ptr addrspace(1) %108, align 4
  %109 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.48, ptr addrspace(1) %109, align 4
  %110 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.51, ptr addrspace(1) %110, align 4
  %111 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.54, ptr addrspace(1) %111, align 4
  %112 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.57, ptr addrspace(1) %112, align 4
  %113 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.60, ptr addrspace(1) %113, align 4
  %114 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %5
  store float %subtract.63, ptr addrspace(1) %114, align 4
  %115 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %5
  store float %subtract.66, ptr addrspace(1) %115, align 4
  %116 = getelementptr inbounds float, ptr addrspace(1) %arg49106, i64 %5
  store float %subtract.68, ptr addrspace(1) %116, align 4
  %117 = getelementptr inbounds float, ptr addrspace(1) %arg50108, i64 %5
  store float %subtract.71, ptr addrspace(1) %117, align 4
  %118 = getelementptr inbounds float, ptr addrspace(1) %arg51110, i64 %5
  store float %subtract.74, ptr addrspace(1) %118, align 4
  %119 = getelementptr inbounds float, ptr addrspace(1) %arg52112, i64 %5
  store float %subtract.77, ptr addrspace(1) %119, align 4
  %120 = getelementptr inbounds float, ptr addrspace(1) %arg53114, i64 %5
  store float %subtract.80, ptr addrspace(1) %120, align 4
  %121 = getelementptr inbounds float, ptr addrspace(1) %arg54116, i64 %5
  store float %subtract.83, ptr addrspace(1) %121, align 4
  %122 = getelementptr inbounds float, ptr addrspace(1) %arg55118, i64 %5
  store float %subtract.86, ptr addrspace(1) %122, align 4
  %123 = getelementptr inbounds float, ptr addrspace(1) %arg56120, i64 %5
  store float %subtract.89, ptr addrspace(1) %123, align 4
  %124 = getelementptr inbounds float, ptr addrspace(1) %arg57122, i64 %5
  store float %subtract.91, ptr addrspace(1) %124, align 4
  %125 = getelementptr inbounds float, ptr addrspace(1) %arg58124, i64 %5
  store float %subtract.93, ptr addrspace(1) %125, align 4
  %126 = getelementptr inbounds float, ptr addrspace(1) %arg59126, i64 %5
  store float %subtract.95, ptr addrspace(1) %126, align 4
  %127 = getelementptr inbounds float, ptr addrspace(1) %arg60128, i64 %5
  store float %subtract.97, ptr addrspace(1) %127, align 4
  store float %subtract.99, ptr addrspace(1) %106, align 4
  store float %subtract.101, ptr addrspace(1) %102, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_421(ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(180224) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg31, ptr noalias nocapture align 128 dereferenceable(131072) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(229376) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg35, ptr noalias nocapture align 128 dereferenceable(131072) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg37, ptr noalias nocapture align 128 dereferenceable(131072) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg39, ptr noalias nocapture align 128 dereferenceable(131072) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg50, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg51, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg52, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg53, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg54, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg55, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg56) local_unnamed_addr #6 {
entry:
  %arg56120 = addrspacecast ptr %arg56 to ptr addrspace(1)
  %arg55118 = addrspacecast ptr %arg55 to ptr addrspace(1)
  %arg54116 = addrspacecast ptr %arg54 to ptr addrspace(1)
  %arg53114 = addrspacecast ptr %arg53 to ptr addrspace(1)
  %arg52112 = addrspacecast ptr %arg52 to ptr addrspace(1)
  %arg51110 = addrspacecast ptr %arg51 to ptr addrspace(1)
  %arg50108 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49106 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !289
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = lshr i32 %linear_index, 7
  %4 = and i32 %1, 127
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %5
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.43 = fmul float %8, %10
  %subtract.44 = fsub float %7, %multiply.43
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = zext i32 %4 to i64
  %14 = zext i32 %3 to i64
  %15 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg416, i64 0, i64 %14, i64 %13
  %16 = getelementptr inbounds float, ptr addrspace(1) %15, i64 12288
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %multiply.46 = fmul float %8, %17
  %subtract.47 = fsub float %12, %multiply.46
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %20 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg620, i64 0, i64 %14, i64 %13
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 24576
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %multiply.49 = fmul float %8, %22
  %subtract.50 = fsub float %19, %multiply.49
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg824, i64 0, i64 %14, i64 %13
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 12288
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %multiply.52 = fmul float %8, %27
  %subtract.53 = fsub float %24, %multiply.52
  %28 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %30 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %14, i64 %13
  %31 = getelementptr inbounds float, ptr addrspace(1) %30, i64 12288
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %multiply.55 = fmul float %8, %32
  %subtract.56 = fsub float %29, %multiply.55
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %35 = getelementptr [352 x [128 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %14, i64 %13
  %36 = getelementptr inbounds float, ptr addrspace(1) %35, i64 12288
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  %multiply.58 = fmul float %8, %37
  %subtract.59 = fsub float %34, %multiply.58
  %38 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %39 = load float, ptr addrspace(1) %38, align 4, !invariant.load !267
  %40 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %14, i64 %13
  %41 = getelementptr inbounds float, ptr addrspace(1) %40, i64 24576
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %multiply.61 = fmul float %8, %42
  %subtract.62 = fsub float %39, %multiply.61
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %14, i64 %13
  %46 = getelementptr inbounds float, ptr addrspace(1) %45, i64 24576
  %47 = load float, ptr addrspace(1) %46, align 4, !invariant.load !267
  %multiply.64 = fmul float %8, %47
  %subtract.65 = fsub float %44, %multiply.64
  %48 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %49 = load float, ptr addrspace(1) %48, align 4, !invariant.load !267
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  %51 = load float, ptr addrspace(1) %50, align 4, !invariant.load !267
  %multiply.66 = fmul float %8, %51
  %subtract.67 = fsub float %49, %multiply.66
  %52 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %5
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %multiply.68 = fmul float %8, %55
  %subtract.69 = fsub float %53, %multiply.68
  %56 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  %57 = load float, ptr addrspace(1) %56, align 4, !invariant.load !267
  %58 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %5
  %59 = load float, ptr addrspace(1) %58, align 4, !invariant.load !267
  %multiply.70 = fmul float %8, %59
  %subtract.71 = fsub float %57, %multiply.70
  %60 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  %61 = load float, ptr addrspace(1) %60, align 4, !invariant.load !267
  %62 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %5
  %63 = load float, ptr addrspace(1) %62, align 4, !invariant.load !267
  %multiply.72 = fmul float %8, %63
  %subtract.73 = fsub float %61, %multiply.72
  %64 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %5
  %65 = load float, ptr addrspace(1) %64, align 4, !invariant.load !267
  %66 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %5
  %67 = load float, ptr addrspace(1) %66, align 4, !invariant.load !267
  %multiply.74 = fmul float %8, %67
  %subtract.75 = fsub float %65, %multiply.74
  %68 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %5
  %69 = load float, ptr addrspace(1) %68, align 4, !invariant.load !267
  %70 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %5
  %71 = load float, ptr addrspace(1) %70, align 4, !invariant.load !267
  %multiply.76 = fmul float %8, %71
  %subtract.77 = fsub float %69, %multiply.76
  %72 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %5
  %73 = load float, ptr addrspace(1) %72, align 4, !invariant.load !267
  %74 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %5
  %75 = load float, ptr addrspace(1) %74, align 4, !invariant.load !267
  %multiply.78 = fmul float %8, %75
  %subtract.79 = fsub float %73, %multiply.78
  %76 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %5
  %77 = load float, ptr addrspace(1) %76, align 4, !invariant.load !267
  %78 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %5
  %79 = load float, ptr addrspace(1) %78, align 4
  %multiply.80 = fmul float %8, %79
  %subtract.81 = fsub float %77, %multiply.80
  %80 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %5
  %81 = load float, ptr addrspace(1) %80, align 4, !invariant.load !267
  %82 = getelementptr [448 x [128 x float]], ptr addrspace(1) %arg3476, i64 0, i64 %14, i64 %13
  %83 = getelementptr inbounds float, ptr addrspace(1) %82, i64 24576
  %84 = load float, ptr addrspace(1) %83, align 4, !invariant.load !267
  %multiply.83 = fmul float %8, %84
  %subtract.84 = fsub float %81, %multiply.83
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  %86 = load float, ptr addrspace(1) %85, align 4, !invariant.load !267
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %5
  %88 = load float, ptr addrspace(1) %87, align 4
  %multiply.85 = fmul float %8, %88
  %subtract.86 = fsub float %86, %multiply.85
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  %90 = load float, ptr addrspace(1) %89, align 4, !invariant.load !267
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %5
  %92 = load float, ptr addrspace(1) %91, align 4
  %multiply.87 = fmul float %8, %92
  %subtract.88 = fsub float %90, %multiply.87
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  %94 = load float, ptr addrspace(1) %93, align 4, !invariant.load !267
  %95 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %5
  %96 = load float, ptr addrspace(1) %95, align 4
  %multiply.89 = fmul float %8, %96
  %subtract.90 = fsub float %94, %multiply.89
  %97 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.44, ptr addrspace(1) %97, align 4
  %98 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.47, ptr addrspace(1) %98, align 4
  %99 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.50, ptr addrspace(1) %99, align 4
  %100 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.53, ptr addrspace(1) %100, align 4
  %101 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.56, ptr addrspace(1) %101, align 4
  %102 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.59, ptr addrspace(1) %102, align 4
  %103 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %5
  store float %subtract.62, ptr addrspace(1) %103, align 4
  %104 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %5
  store float %subtract.65, ptr addrspace(1) %104, align 4
  %105 = getelementptr inbounds float, ptr addrspace(1) %arg49106, i64 %5
  store float %subtract.67, ptr addrspace(1) %105, align 4
  %106 = getelementptr inbounds float, ptr addrspace(1) %arg50108, i64 %5
  store float %subtract.69, ptr addrspace(1) %106, align 4
  %107 = getelementptr inbounds float, ptr addrspace(1) %arg51110, i64 %5
  store float %subtract.71, ptr addrspace(1) %107, align 4
  %108 = getelementptr inbounds float, ptr addrspace(1) %arg52112, i64 %5
  store float %subtract.73, ptr addrspace(1) %108, align 4
  %109 = getelementptr inbounds float, ptr addrspace(1) %arg53114, i64 %5
  store float %subtract.75, ptr addrspace(1) %109, align 4
  %110 = getelementptr inbounds float, ptr addrspace(1) %arg54116, i64 %5
  store float %subtract.77, ptr addrspace(1) %110, align 4
  %111 = getelementptr inbounds float, ptr addrspace(1) %arg55118, i64 %5
  store float %subtract.79, ptr addrspace(1) %111, align 4
  %112 = getelementptr inbounds float, ptr addrspace(1) %arg56120, i64 %5
  store float %subtract.81, ptr addrspace(1) %112, align 4
  store float %subtract.84, ptr addrspace(1) %95, align 4
  store float %subtract.86, ptr addrspace(1) %91, align 4
  store float %subtract.88, ptr addrspace(1) %87, align 4
  store float %subtract.90, ptr addrspace(1) %78, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_104(ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(6291456) %arg6) local_unnamed_addr #6 {
entry:
  %arg628 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg526 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg424 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg322 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg220 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg118 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg016 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !302
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 192
  %5 = urem i32 %linear_index3, 192
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = urem i32 %linear_index2, 192
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = urem i32 %linear_index1, 192
  %8 = mul i32 %4, 192
  %.decomposed = sub i32 %linear_index_base.frozen, %8
  %9 = zext i32 %4 to i64
  %10 = zext i32 %.decomposed to i64
  %11 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg526, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg424, i64 0, i64 %9, i64 %10
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %add.9 = fadd float %12, %14
  %15 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg322, i64 0, i64 %9, i64 %10
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %add.11 = fadd float %add.9, %16
  %17 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg220, i64 0, i64 %9, i64 %10
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %add.13 = fadd float %add.11, %18
  %19 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg118, i64 0, i64 %9, i64 %10
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %add.15 = fadd float %add.13, %20
  %21 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg016, i64 0, i64 %9, i64 %10
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %add.17 = fadd float %add.15, %22
  %23 = zext i32 %linear_index_base to i64
  %24 = getelementptr float, ptr addrspace(1) %arg628, i64 %23
  %25 = zext i32 %7 to i64
  %26 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg526, i64 0, i64 %9, i64 %25
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg424, i64 0, i64 %9, i64 %25
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %add.91 = fadd float %27, %29
  %30 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg322, i64 0, i64 %9, i64 %25
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %add.112 = fadd float %add.91, %31
  %32 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg220, i64 0, i64 %9, i64 %25
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %add.133 = fadd float %add.112, %33
  %34 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg118, i64 0, i64 %9, i64 %25
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %add.154 = fadd float %add.133, %35
  %36 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg016, i64 0, i64 %9, i64 %25
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  %add.175 = fadd float %add.154, %37
  %38 = zext i32 %6 to i64
  %39 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg526, i64 0, i64 %9, i64 %38
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg424, i64 0, i64 %9, i64 %38
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %add.96 = fadd float %40, %42
  %43 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg322, i64 0, i64 %9, i64 %38
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %add.117 = fadd float %add.96, %44
  %45 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg220, i64 0, i64 %9, i64 %38
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %add.138 = fadd float %add.117, %46
  %47 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg118, i64 0, i64 %9, i64 %38
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %add.159 = fadd float %add.138, %48
  %49 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg016, i64 0, i64 %9, i64 %38
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %add.1710 = fadd float %add.159, %50
  %51 = zext i32 %5 to i64
  %52 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg526, i64 0, i64 %9, i64 %51
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %54 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg424, i64 0, i64 %9, i64 %51
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %add.911 = fadd float %53, %55
  %56 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg322, i64 0, i64 %9, i64 %51
  %57 = load float, ptr addrspace(1) %56, align 4, !invariant.load !267
  %add.1112 = fadd float %add.911, %57
  %58 = getelementptr inbounds [8192 x [480 x float]], ptr addrspace(1) %arg220, i64 0, i64 %9, i64 %51
  %59 = load float, ptr addrspace(1) %58, align 4, !invariant.load !267
  %add.1313 = fadd float %add.1112, %59
  %60 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg118, i64 0, i64 %9, i64 %51
  %61 = load float, ptr addrspace(1) %60, align 4, !invariant.load !267
  %add.1514 = fadd float %add.1313, %61
  %62 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg016, i64 0, i64 %9, i64 %51
  %63 = load float, ptr addrspace(1) %62, align 4, !invariant.load !267
  %add.1715 = fadd float %add.1514, %63
  %64 = insertelement <4 x float> poison, float %add.17, i32 0
  %65 = insertelement <4 x float> %64, float %add.175, i32 1
  %66 = insertelement <4 x float> %65, float %add.1710, i32 2
  %67 = insertelement <4 x float> %66, float %add.1715, i32 3
  store <4 x float> %67, ptr addrspace(1) %24, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_378(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(786432) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(15728640) %arg5) local_unnamed_addr #5 {
entry:
  %arg576 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg474 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg372 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg270 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg168 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg066 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !303
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 480
  %5 = mul i32 %4, 480
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 480
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 480
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 480
  %9 = icmp ult i32 %.decomposed, 192
  br i1 %9, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %entry
  %10 = icmp ult i32 %.decomposed, 64
  br i1 %10, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  %11 = udiv i32 %linear_index_base, 480
  %12 = shl nuw nsw i32 %11, 6
  %13 = add nuw nsw i32 %12, %.decomposed
  br label %concatenate.6.merge

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  %14 = add nsw i32 %.decomposed, -64
  %15 = udiv i32 %linear_index_base, 480
  %16 = shl nuw nsw i32 %15, 7
  %17 = add nuw nsw i32 %14, %16
  br label %concatenate.6.merge

concatenate.pivot.200.:                           ; preds = %entry
  %18 = icmp ult i32 %.decomposed, 200
  %19 = udiv i32 %linear_index_base, 480
  br i1 %18, label %concatenate.pivot.192.2, label %concatenate.pivot.224.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  %20 = add nsw i32 %.decomposed, -192
  %21 = shl nuw nsw i32 %19, 3
  %22 = add nuw nsw i32 %20, %21
  br label %concatenate.6.merge

concatenate.pivot.224.:                           ; preds = %concatenate.pivot.200.
  %23 = icmp ult i32 %.decomposed, 224
  br i1 %23, label %concatenate.pivot.200.3, label %concatenate.pivot.224.4

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.224.
  %24 = add nsw i32 %.decomposed, -200
  %25 = mul nuw nsw i32 %19, 24
  %26 = add nuw nsw i32 %24, %25
  br label %concatenate.6.merge

concatenate.pivot.224.4:                          ; preds = %concatenate.pivot.224.
  %27 = add nsw i32 %.decomposed, -224
  %28 = shl nuw nsw i32 %19, 8
  %29 = add nuw nsw i32 %27, %28
  br label %concatenate.6.merge

concatenate.6.merge:                              ; preds = %concatenate.pivot.224.4, %concatenate.pivot.200.3, %concatenate.pivot.192.2, %concatenate.pivot.64.1, %concatenate.pivot.0.
  %.sink59 = phi i32 [ %29, %concatenate.pivot.224.4 ], [ %26, %concatenate.pivot.200.3 ], [ %22, %concatenate.pivot.192.2 ], [ %17, %concatenate.pivot.64.1 ], [ %13, %concatenate.pivot.0. ]
  %arg4.sink = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.224.4 ], [ %arg372, %concatenate.pivot.200.3 ], [ %arg270, %concatenate.pivot.192.2 ], [ %arg168, %concatenate.pivot.64.1 ], [ %arg066, %concatenate.pivot.0. ]
  %30 = zext i32 %.sink59 to i64
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink, i64 %30
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = zext i32 %linear_index_base to i64
  %34 = getelementptr float, ptr addrspace(1) %arg576, i64 %33
  store float %32, ptr addrspace(1) %34, align 16
  %35 = icmp ult i32 %6, 192
  br i1 %35, label %concatenate.pivot.64.12, label %concatenate.pivot.200.15

concatenate.pivot.64.12:                          ; preds = %concatenate.6.merge
  %36 = icmp ult i32 %6, 64
  br i1 %36, label %concatenate.pivot.0.13, label %concatenate.pivot.64.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.64.12
  %37 = udiv i32 %linear_index_base, 480
  %38 = shl nuw nsw i32 %37, 6
  %39 = add nuw nsw i32 %38, %6
  br label %concatenate.6.merge5

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.64.12
  %40 = add nsw i32 %6, -64
  %41 = udiv i32 %linear_index_base, 480
  %42 = shl nuw nsw i32 %41, 7
  %43 = add nuw nsw i32 %40, %42
  br label %concatenate.6.merge5

concatenate.pivot.200.15:                         ; preds = %concatenate.6.merge
  %44 = icmp ult i32 %6, 200
  %45 = udiv i32 %linear_index_base, 480
  br i1 %44, label %concatenate.pivot.192.16, label %concatenate.pivot.224.17

concatenate.pivot.192.16:                         ; preds = %concatenate.pivot.200.15
  %46 = add nsw i32 %6, -192
  %47 = shl nuw nsw i32 %45, 3
  %48 = add nuw nsw i32 %46, %47
  br label %concatenate.6.merge5

concatenate.pivot.224.17:                         ; preds = %concatenate.pivot.200.15
  %49 = icmp ult i32 %6, 224
  br i1 %49, label %concatenate.pivot.200.18, label %concatenate.pivot.224.19

concatenate.pivot.200.18:                         ; preds = %concatenate.pivot.224.17
  %50 = add nsw i32 %6, -200
  %51 = mul nuw nsw i32 %45, 24
  %52 = add nuw nsw i32 %50, %51
  br label %concatenate.6.merge5

concatenate.pivot.224.19:                         ; preds = %concatenate.pivot.224.17
  %53 = add nsw i32 %6, -224
  %54 = shl nuw nsw i32 %45, 8
  %55 = add nuw nsw i32 %53, %54
  br label %concatenate.6.merge5

concatenate.6.merge5:                             ; preds = %concatenate.pivot.224.19, %concatenate.pivot.200.18, %concatenate.pivot.192.16, %concatenate.pivot.64.14, %concatenate.pivot.0.13
  %.sink61 = phi i32 [ %55, %concatenate.pivot.224.19 ], [ %52, %concatenate.pivot.200.18 ], [ %48, %concatenate.pivot.192.16 ], [ %43, %concatenate.pivot.64.14 ], [ %39, %concatenate.pivot.0.13 ]
  %arg4.sink60 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.224.19 ], [ %arg372, %concatenate.pivot.200.18 ], [ %arg270, %concatenate.pivot.192.16 ], [ %arg168, %concatenate.pivot.64.14 ], [ %arg066, %concatenate.pivot.0.13 ]
  %56 = zext i32 %.sink61 to i64
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink60, i64 %56
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %59 = getelementptr inbounds float, ptr addrspace(1) %34, i64 1
  store float %58, ptr addrspace(1) %59, align 4
  %60 = icmp ult i32 %7, 192
  br i1 %60, label %concatenate.pivot.64.27, label %concatenate.pivot.200.30

concatenate.pivot.64.27:                          ; preds = %concatenate.6.merge5
  %61 = icmp ult i32 %7, 64
  br i1 %61, label %concatenate.pivot.0.28, label %concatenate.pivot.64.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.64.27
  %62 = udiv i32 %linear_index_base, 480
  %63 = shl nuw nsw i32 %62, 6
  %64 = add nuw nsw i32 %63, %7
  br label %concatenate.6.merge20

concatenate.pivot.64.29:                          ; preds = %concatenate.pivot.64.27
  %65 = add nsw i32 %7, -64
  %66 = udiv i32 %linear_index_base, 480
  %67 = shl nuw nsw i32 %66, 7
  %68 = add nuw nsw i32 %65, %67
  br label %concatenate.6.merge20

concatenate.pivot.200.30:                         ; preds = %concatenate.6.merge5
  %69 = icmp ult i32 %7, 200
  %70 = udiv i32 %linear_index_base, 480
  br i1 %69, label %concatenate.pivot.192.31, label %concatenate.pivot.224.32

concatenate.pivot.192.31:                         ; preds = %concatenate.pivot.200.30
  %71 = add nsw i32 %7, -192
  %72 = shl nuw nsw i32 %70, 3
  %73 = add nuw nsw i32 %71, %72
  br label %concatenate.6.merge20

concatenate.pivot.224.32:                         ; preds = %concatenate.pivot.200.30
  %74 = icmp ult i32 %7, 224
  br i1 %74, label %concatenate.pivot.200.33, label %concatenate.pivot.224.34

concatenate.pivot.200.33:                         ; preds = %concatenate.pivot.224.32
  %75 = add nsw i32 %7, -200
  %76 = mul nuw nsw i32 %70, 24
  %77 = add nuw nsw i32 %75, %76
  br label %concatenate.6.merge20

concatenate.pivot.224.34:                         ; preds = %concatenate.pivot.224.32
  %78 = add nsw i32 %7, -224
  %79 = shl nuw nsw i32 %70, 8
  %80 = add nuw nsw i32 %78, %79
  br label %concatenate.6.merge20

concatenate.6.merge20:                            ; preds = %concatenate.pivot.224.34, %concatenate.pivot.200.33, %concatenate.pivot.192.31, %concatenate.pivot.64.29, %concatenate.pivot.0.28
  %.sink63 = phi i32 [ %80, %concatenate.pivot.224.34 ], [ %77, %concatenate.pivot.200.33 ], [ %73, %concatenate.pivot.192.31 ], [ %68, %concatenate.pivot.64.29 ], [ %64, %concatenate.pivot.0.28 ]
  %arg4.sink62 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.224.34 ], [ %arg372, %concatenate.pivot.200.33 ], [ %arg270, %concatenate.pivot.192.31 ], [ %arg168, %concatenate.pivot.64.29 ], [ %arg066, %concatenate.pivot.0.28 ]
  %81 = zext i32 %.sink63 to i64
  %82 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink62, i64 %81
  %83 = load float, ptr addrspace(1) %82, align 4, !invariant.load !267
  %84 = getelementptr inbounds float, ptr addrspace(1) %34, i64 2
  store float %83, ptr addrspace(1) %84, align 8
  %85 = icmp ult i32 %8, 192
  br i1 %85, label %concatenate.pivot.64.42, label %concatenate.pivot.200.45

concatenate.pivot.64.42:                          ; preds = %concatenate.6.merge20
  %86 = icmp ult i32 %8, 64
  br i1 %86, label %concatenate.pivot.0.43, label %concatenate.pivot.64.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.64.42
  %87 = udiv i32 %linear_index_base, 480
  %88 = shl nuw nsw i32 %87, 6
  %89 = add nuw nsw i32 %88, %8
  br label %concatenate.6.merge35

concatenate.pivot.64.44:                          ; preds = %concatenate.pivot.64.42
  %90 = add nsw i32 %8, -64
  %91 = udiv i32 %linear_index_base, 480
  %92 = shl nuw nsw i32 %91, 7
  %93 = add nuw nsw i32 %90, %92
  br label %concatenate.6.merge35

concatenate.pivot.200.45:                         ; preds = %concatenate.6.merge20
  %94 = icmp ult i32 %8, 200
  br i1 %94, label %concatenate.pivot.192.46, label %concatenate.pivot.224.47

concatenate.pivot.192.46:                         ; preds = %concatenate.pivot.200.45
  %95 = add nsw i32 %8, -192
  %96 = shl nuw nsw i32 %4, 3
  %97 = add nuw nsw i32 %95, %96
  br label %concatenate.6.merge35

concatenate.pivot.224.47:                         ; preds = %concatenate.pivot.200.45
  %98 = icmp ult i32 %8, 224
  br i1 %98, label %concatenate.pivot.200.48, label %concatenate.pivot.224.49

concatenate.pivot.200.48:                         ; preds = %concatenate.pivot.224.47
  %99 = add nsw i32 %8, -200
  %100 = mul nuw nsw i32 %4, 24
  %101 = add nuw nsw i32 %99, %100
  br label %concatenate.6.merge35

concatenate.pivot.224.49:                         ; preds = %concatenate.pivot.224.47
  %102 = add nsw i32 %8, -224
  %103 = shl nuw nsw i32 %4, 8
  %104 = add nuw nsw i32 %102, %103
  br label %concatenate.6.merge35

concatenate.6.merge35:                            ; preds = %concatenate.pivot.224.49, %concatenate.pivot.200.48, %concatenate.pivot.192.46, %concatenate.pivot.64.44, %concatenate.pivot.0.43
  %.sink65 = phi i32 [ %104, %concatenate.pivot.224.49 ], [ %101, %concatenate.pivot.200.48 ], [ %97, %concatenate.pivot.192.46 ], [ %93, %concatenate.pivot.64.44 ], [ %89, %concatenate.pivot.0.43 ]
  %arg4.sink64 = phi ptr addrspace(1) [ %arg474, %concatenate.pivot.224.49 ], [ %arg372, %concatenate.pivot.200.48 ], [ %arg270, %concatenate.pivot.192.46 ], [ %arg168, %concatenate.pivot.64.44 ], [ %arg066, %concatenate.pivot.0.43 ]
  %105 = zext i32 %.sink65 to i64
  %106 = getelementptr inbounds float, ptr addrspace(1) %arg4.sink64, i64 %105
  %107 = load float, ptr addrspace(1) %106, align 4, !invariant.load !267
  %108 = getelementptr inbounds float, ptr addrspace(1) %34, i64 3
  store float %107, ptr addrspace(1) %108, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_356(ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(270336) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(393216) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(8192) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg13, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(8192) %arg18) local_unnamed_addr #6 {
entry:
  %arg1843 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1741 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1639 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1537 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1435 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1333 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1231 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1129 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1027 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg925 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg823 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg721 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg619 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg517 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg415 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg313 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg211 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg19 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %2, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg211, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [264 x [256 x float]], ptr addrspace(1) %arg19, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 65536
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.16 = fmul float %8, %13
  %subtract.17 = fsub float %7, %multiply.16
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg313, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg415, i64 0, i64 %10, i64 %9
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 24576
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.19 = fmul float %8, %18
  %subtract.20 = fsub float %15, %multiply.19
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg517, i64 %5
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg619, i64 0, i64 %10, i64 %9
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 24576
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %multiply.22 = fmul float %8, %23
  %subtract.23 = fsub float %20, %multiply.22
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg721, i64 %5
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  %26 = getelementptr [384 x [256 x float]], ptr addrspace(1) %arg823, i64 0, i64 %10, i64 %9
  %27 = getelementptr inbounds float, ptr addrspace(1) %26, i64 24576
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.25 = fmul float %8, %28
  %subtract.26 = fsub float %25, %multiply.25
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg925, i64 %5
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg1027, i64 0, i64 %10, i64 %9
  %32 = getelementptr inbounds float, ptr addrspace(1) %31, i64 49152
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %multiply.28 = fmul float %8, %33
  %subtract.29 = fsub float %30, %multiply.28
  %34 = getelementptr inbounds float, ptr addrspace(1) %arg1129, i64 %5
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %36 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg1231, i64 0, i64 %10, i64 %9
  %37 = getelementptr inbounds float, ptr addrspace(1) %36, i64 49152
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.31 = fmul float %8, %38
  %subtract.32 = fsub float %35, %multiply.31
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1333, i64 %5
  store float %subtract.17, ptr addrspace(1) %39, align 4
  %40 = getelementptr inbounds float, ptr addrspace(1) %arg1435, i64 %5
  store float %subtract.20, ptr addrspace(1) %40, align 4
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1537, i64 %5
  store float %subtract.23, ptr addrspace(1) %41, align 4
  %42 = getelementptr inbounds float, ptr addrspace(1) %arg1639, i64 %5
  store float %subtract.26, ptr addrspace(1) %42, align 4
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg1741, i64 %5
  store float %subtract.29, ptr addrspace(1) %43, align 4
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg1843, i64 %5
  store float %subtract.32, ptr addrspace(1) %44, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_140(ptr noalias nocapture readonly align 16 dereferenceable(24576) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(24576) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(393216) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(24576) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(24576) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(24576) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(24576) %arg9) local_unnamed_addr #6 {
entry:
  %arg919 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg817 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg715 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg613 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg511 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg49 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !265
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %2, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg13, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 51200
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.10 = fmul float %8, %13
  %subtract.11 = fsub float %7, %multiply.10
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr [384 x [256 x float]], ptr addrspace(1) %arg49, i64 0, i64 %10, i64 %9
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 26624
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.13 = fmul float %8, %18
  %subtract.14 = fsub float %15, %multiply.13
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg511, i64 %5
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg613, i64 0, i64 %10, i64 %9
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 51200
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %multiply.16 = fmul float %8, %23
  %subtract.17 = fsub float %20, %multiply.16
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg715, i64 %5
  store float %subtract.11, ptr addrspace(1) %24, align 4
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg817, i64 %5
  store float %subtract.14, ptr addrspace(1) %25, align 4
  %26 = getelementptr inbounds float, ptr addrspace(1) %arg919, i64 %5
  store float %subtract.17, ptr addrspace(1) %26, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_377(ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(270336) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(131072) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg23, ptr noalias nocapture writeonly align 128 dereferenceable(131072) %arg24) local_unnamed_addr #6 {
entry:
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !289
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %2, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg110, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 16384
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.20 = fmul float %8, %13
  %subtract.21 = fsub float %7, %multiply.20
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg416, i64 0, i64 %10, i64 %9
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 16384
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.23 = fmul float %8, %18
  %subtract.24 = fsub float %15, %multiply.23
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg620, i64 0, i64 %10, i64 %9
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 16384
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %multiply.26 = fmul float %8, %23
  %subtract.27 = fsub float %20, %multiply.26
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  %26 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg824, i64 0, i64 %10, i64 %9
  %27 = getelementptr inbounds float, ptr addrspace(1) %26, i64 16384
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.29 = fmul float %8, %28
  %subtract.30 = fsub float %25, %multiply.29
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %10, i64 %9
  %32 = getelementptr inbounds float, ptr addrspace(1) %31, i64 16384
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %multiply.32 = fmul float %8, %33
  %subtract.33 = fsub float %30, %multiply.32
  %34 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %36 = getelementptr [264 x [256 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %10, i64 %9
  %37 = getelementptr inbounds float, ptr addrspace(1) %36, i64 16384
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.35 = fmul float %8, %38
  %subtract.36 = fsub float %35, %multiply.35
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %10, i64 %9
  %42 = getelementptr inbounds float, ptr addrspace(1) %41, i64 16384
  %43 = load float, ptr addrspace(1) %42, align 4, !invariant.load !267
  %multiply.38 = fmul float %8, %43
  %subtract.39 = fsub float %40, %multiply.38
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %46 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %10, i64 %9
  %47 = getelementptr inbounds float, ptr addrspace(1) %46, i64 16384
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %multiply.41 = fmul float %8, %48
  %subtract.42 = fsub float %45, %multiply.41
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  store float %subtract.21, ptr addrspace(1) %49, align 4
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  store float %subtract.24, ptr addrspace(1) %50, align 4
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  store float %subtract.27, ptr addrspace(1) %51, align 4
  %52 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %5
  store float %subtract.30, ptr addrspace(1) %52, align 4
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  store float %subtract.33, ptr addrspace(1) %53, align 4
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %5
  store float %subtract.36, ptr addrspace(1) %54, align 4
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  store float %subtract.39, ptr addrspace(1) %55, align 4
  %56 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %5
  store float %subtract.42, ptr addrspace(1) %56, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_361(ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(270336) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg10, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(393216) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg17, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg18, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg19, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg20, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg21, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg22, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg23, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg24, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg25, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg26, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg27, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg28, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg29, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg30, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg31, ptr noalias nocapture readonly align 16 dereferenceable(65536) %arg32, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg33, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg34, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg50) local_unnamed_addr #6 {
entry:
  %arg50108 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49106 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !301
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %1, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %3 to i64
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds [264 x [256 x float]], ptr addrspace(1) %arg110, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %multiply.37 = fmul float %8, %12
  %subtract.38 = fsub float %7, %multiply.37
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds float, ptr addrspace(1) %11, i64 49152
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %multiply.40 = fmul float %8, %16
  %subtract.41 = fsub float %14, %multiply.40
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %5
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg518, i64 0, i64 %9, i64 %10
  %20 = getelementptr inbounds float, ptr addrspace(1) %19, i64 8192
  %21 = load float, ptr addrspace(1) %20, align 4, !invariant.load !267
  %multiply.43 = fmul float %8, %21
  %subtract.44 = fsub float %18, %multiply.43
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %5
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg722, i64 0, i64 %9, i64 %10
  %25 = getelementptr inbounds float, ptr addrspace(1) %24, i64 8192
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %multiply.46 = fmul float %8, %26
  %subtract.47 = fsub float %23, %multiply.46
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %5
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds [448 x [256 x float]], ptr addrspace(1) %arg926, i64 0, i64 %9, i64 %10
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %multiply.49 = fmul float %8, %30
  %subtract.50 = fsub float %28, %multiply.49
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %5
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg1130, i64 0, i64 %9, i64 %10
  %34 = getelementptr inbounds float, ptr addrspace(1) %33, i64 8192
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %multiply.52 = fmul float %8, %35
  %subtract.53 = fsub float %32, %multiply.52
  %36 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %5
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  %38 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg1334, i64 0, i64 %9, i64 %10
  %39 = getelementptr inbounds float, ptr addrspace(1) %38, i64 8192
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %multiply.55 = fmul float %8, %40
  %subtract.56 = fsub float %37, %multiply.55
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %5
  %42 = load float, ptr addrspace(1) %41, align 4, !invariant.load !267
  %43 = getelementptr [384 x [256 x float]], ptr addrspace(1) %arg1538, i64 0, i64 %9, i64 %10
  %44 = getelementptr inbounds float, ptr addrspace(1) %43, i64 8192
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %multiply.58 = fmul float %8, %45
  %subtract.59 = fsub float %42, %multiply.58
  %46 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %5
  %47 = load float, ptr addrspace(1) %46, align 4, !invariant.load !267
  %48 = getelementptr inbounds [480 x [256 x float]], ptr addrspace(1) %arg1742, i64 0, i64 %9, i64 %10
  %49 = load float, ptr addrspace(1) %48, align 4, !invariant.load !267
  %multiply.61 = fmul float %8, %49
  %subtract.62 = fsub float %47, %multiply.61
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %5
  %51 = load float, ptr addrspace(1) %50, align 4, !invariant.load !267
  %52 = getelementptr inbounds [480 x [256 x float]], ptr addrspace(1) %arg1946, i64 0, i64 %9, i64 %10
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %multiply.64 = fmul float %8, %53
  %subtract.65 = fsub float %51, %multiply.64
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %5
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %56 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg2150, i64 0, i64 %9, i64 %10
  %57 = getelementptr inbounds float, ptr addrspace(1) %56, i64 8192
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %multiply.67 = fmul float %8, %58
  %subtract.68 = fsub float %55, %multiply.67
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %5
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr inbounds [448 x [256 x float]], ptr addrspace(1) %arg2354, i64 0, i64 %9, i64 %10
  %62 = load float, ptr addrspace(1) %61, align 4, !invariant.load !267
  %multiply.70 = fmul float %8, %62
  %subtract.71 = fsub float %60, %multiply.70
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %5
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg2558, i64 0, i64 %9, i64 %10
  %66 = getelementptr inbounds float, ptr addrspace(1) %65, i64 8192
  %67 = load float, ptr addrspace(1) %66, align 4, !invariant.load !267
  %multiply.73 = fmul float %8, %67
  %subtract.74 = fsub float %64, %multiply.73
  %68 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %5
  %69 = load float, ptr addrspace(1) %68, align 4, !invariant.load !267
  %70 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg2762, i64 0, i64 %9, i64 %10
  %71 = getelementptr inbounds float, ptr addrspace(1) %70, i64 8192
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %multiply.76 = fmul float %8, %72
  %subtract.77 = fsub float %69, %multiply.76
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %5
  %74 = load float, ptr addrspace(1) %73, align 4, !invariant.load !267
  %75 = getelementptr inbounds [448 x [256 x float]], ptr addrspace(1) %arg2966, i64 0, i64 %9, i64 %10
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %multiply.79 = fmul float %8, %76
  %subtract.80 = fsub float %74, %multiply.79
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %5
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %79 = getelementptr inbounds [448 x [256 x float]], ptr addrspace(1) %arg3170, i64 0, i64 %9, i64 %10
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %multiply.82 = fmul float %8, %80
  %subtract.83 = fsub float %78, %multiply.82
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %5
  %82 = load float, ptr addrspace(1) %81, align 4, !invariant.load !267
  %83 = getelementptr inbounds [448 x [256 x float]], ptr addrspace(1) %arg3374, i64 0, i64 %9, i64 %10
  %84 = load float, ptr addrspace(1) %83, align 4, !invariant.load !267
  %multiply.85 = fmul float %8, %84
  %subtract.86 = fsub float %82, %multiply.85
  %85 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %5
  store float %subtract.38, ptr addrspace(1) %85, align 4
  %86 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  store float %subtract.41, ptr addrspace(1) %86, align 4
  %87 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %5
  store float %subtract.44, ptr addrspace(1) %87, align 4
  %88 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  store float %subtract.47, ptr addrspace(1) %88, align 4
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %5
  store float %subtract.50, ptr addrspace(1) %89, align 4
  %90 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  store float %subtract.53, ptr addrspace(1) %90, align 4
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %5
  store float %subtract.56, ptr addrspace(1) %91, align 4
  %92 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.59, ptr addrspace(1) %92, align 4
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.62, ptr addrspace(1) %93, align 4
  %94 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.65, ptr addrspace(1) %94, align 4
  %95 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.68, ptr addrspace(1) %95, align 4
  %96 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.71, ptr addrspace(1) %96, align 4
  %97 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.74, ptr addrspace(1) %97, align 4
  %98 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %5
  store float %subtract.77, ptr addrspace(1) %98, align 4
  %99 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %5
  store float %subtract.80, ptr addrspace(1) %99, align 4
  %100 = getelementptr inbounds float, ptr addrspace(1) %arg49106, i64 %5
  store float %subtract.83, ptr addrspace(1) %100, align 4
  %101 = getelementptr inbounds float, ptr addrspace(1) %arg50108, i64 %5
  store float %subtract.86, ptr addrspace(1) %101, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_380(ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(368640) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(393216) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg27, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg29, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(311296) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg33, ptr noalias nocapture align 128 dereferenceable(262144) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg35, ptr noalias nocapture readonly align 128 dereferenceable(360448) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg37, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg39, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg50, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg51, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg52, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg53, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg54, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg55, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg56, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg57, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg58, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg59) local_unnamed_addr #6 {
entry:
  %arg59126 = addrspacecast ptr %arg59 to ptr addrspace(1)
  %arg58124 = addrspacecast ptr %arg58 to ptr addrspace(1)
  %arg57122 = addrspacecast ptr %arg57 to ptr addrspace(1)
  %arg56120 = addrspacecast ptr %arg56 to ptr addrspace(1)
  %arg55118 = addrspacecast ptr %arg55 to ptr addrspace(1)
  %arg54116 = addrspacecast ptr %arg54 to ptr addrspace(1)
  %arg53114 = addrspacecast ptr %arg53 to ptr addrspace(1)
  %arg52112 = addrspacecast ptr %arg52 to ptr addrspace(1)
  %arg51110 = addrspacecast ptr %arg51 to ptr addrspace(1)
  %arg50108 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49106 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48104 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47102 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46100 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg4598 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg4496 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg4394 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg4292 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg4190 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !304
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = lshr i32 %linear_index, 8
  %4 = and i32 %1, 255
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %9 = zext i32 %4 to i64
  %10 = zext i32 %3 to i64
  %11 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg110, i64 0, i64 %10, i64 %9
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 24576
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.44 = fmul float %8, %13
  %subtract.45 = fsub float %7, %multiply.44
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %5
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg416, i64 0, i64 %10, i64 %9
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 24576
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %multiply.47 = fmul float %8, %18
  %subtract.48 = fsub float %15, %multiply.47
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %5
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg620, i64 0, i64 %10, i64 %9
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 49152
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %multiply.50 = fmul float %8, %23
  %subtract.51 = fsub float %20, %multiply.50
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %5
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  %26 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg824, i64 0, i64 %10, i64 %9
  %27 = getelementptr inbounds float, ptr addrspace(1) %26, i64 26624
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.53 = fmul float %8, %28
  %subtract.54 = fsub float %25, %multiply.53
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %5
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr [360 x [256 x float]], ptr addrspace(1) %arg1028, i64 0, i64 %10, i64 %9
  %32 = getelementptr inbounds float, ptr addrspace(1) %31, i64 26624
  %33 = load float, ptr addrspace(1) %32, align 4, !invariant.load !267
  %multiply.56 = fmul float %8, %33
  %subtract.57 = fsub float %30, %multiply.56
  %34 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %5
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %36 = getelementptr [384 x [256 x float]], ptr addrspace(1) %arg1232, i64 0, i64 %10, i64 %9
  %37 = getelementptr inbounds float, ptr addrspace(1) %36, i64 32768
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %multiply.59 = fmul float %8, %38
  %subtract.60 = fsub float %35, %multiply.59
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %5
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg1436, i64 0, i64 %10, i64 %9
  %42 = getelementptr inbounds float, ptr addrspace(1) %41, i64 57344
  %43 = load float, ptr addrspace(1) %42, align 4, !invariant.load !267
  %multiply.62 = fmul float %8, %43
  %subtract.63 = fsub float %40, %multiply.62
  %44 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %5
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %46 = getelementptr [480 x [256 x float]], ptr addrspace(1) %arg1640, i64 0, i64 %10, i64 %9
  %47 = getelementptr inbounds float, ptr addrspace(1) %46, i64 57344
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %multiply.65 = fmul float %8, %48
  %subtract.66 = fsub float %45, %multiply.65
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %5
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %51 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg1844, i64 0, i64 %10, i64 %9
  %52 = getelementptr inbounds float, ptr addrspace(1) %51, i64 24576
  %53 = load float, ptr addrspace(1) %52, align 4, !invariant.load !267
  %multiply.68 = fmul float %8, %53
  %subtract.69 = fsub float %50, %multiply.68
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %5
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %56 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2048, i64 0, i64 %10, i64 %9
  %57 = getelementptr inbounds float, ptr addrspace(1) %56, i64 12288
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %multiply.71 = fmul float %8, %58
  %subtract.72 = fsub float %55, %multiply.71
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %5
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2252, i64 0, i64 %10, i64 %9
  %62 = getelementptr inbounds float, ptr addrspace(1) %61, i64 12288
  %63 = load float, ptr addrspace(1) %62, align 4, !invariant.load !267
  %multiply.74 = fmul float %8, %63
  %subtract.75 = fsub float %60, %multiply.74
  %64 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %5
  %65 = load float, ptr addrspace(1) %64, align 4, !invariant.load !267
  %66 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg2456, i64 0, i64 %10, i64 %9
  %67 = getelementptr inbounds float, ptr addrspace(1) %66, i64 49152
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %multiply.77 = fmul float %8, %68
  %subtract.78 = fsub float %65, %multiply.77
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %5
  %70 = load float, ptr addrspace(1) %69, align 4, !invariant.load !267
  %71 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg2660, i64 0, i64 %10, i64 %9
  %72 = getelementptr inbounds float, ptr addrspace(1) %71, i64 12288
  %73 = load float, ptr addrspace(1) %72, align 4, !invariant.load !267
  %multiply.80 = fmul float %8, %73
  %subtract.81 = fsub float %70, %multiply.80
  %74 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %5
  %75 = load float, ptr addrspace(1) %74, align 4, !invariant.load !267
  %76 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg2864, i64 0, i64 %10, i64 %9
  %77 = getelementptr inbounds float, ptr addrspace(1) %76, i64 24576
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  %multiply.83 = fmul float %8, %78
  %subtract.84 = fsub float %75, %multiply.83
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %5
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg3068, i64 0, i64 %10, i64 %9
  %82 = getelementptr inbounds float, ptr addrspace(1) %81, i64 12288
  %83 = load float, ptr addrspace(1) %82, align 4, !invariant.load !267
  %multiply.86 = fmul float %8, %83
  %subtract.87 = fsub float %80, %multiply.86
  %84 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %5
  %85 = load float, ptr addrspace(1) %84, align 4, !invariant.load !267
  %86 = getelementptr [304 x [256 x float]], ptr addrspace(1) %arg3272, i64 0, i64 %10, i64 %9
  %87 = getelementptr inbounds float, ptr addrspace(1) %86, i64 12288
  %88 = load float, ptr addrspace(1) %87, align 4, !invariant.load !267
  %multiply.89 = fmul float %8, %88
  %subtract.90 = fsub float %85, %multiply.89
  %89 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %5
  %90 = load float, ptr addrspace(1) %89, align 4, !invariant.load !267
  %91 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %5
  %92 = load float, ptr addrspace(1) %91, align 4
  %multiply.91 = fmul float %8, %92
  %subtract.92 = fsub float %90, %multiply.91
  %93 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %5
  %94 = load float, ptr addrspace(1) %93, align 4, !invariant.load !267
  %95 = getelementptr [352 x [256 x float]], ptr addrspace(1) %arg3680, i64 0, i64 %10, i64 %9
  %96 = getelementptr inbounds float, ptr addrspace(1) %95, i64 24576
  %97 = load float, ptr addrspace(1) %96, align 4, !invariant.load !267
  %multiply.94 = fmul float %8, %97
  %subtract.95 = fsub float %94, %multiply.94
  %98 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %5
  %99 = load float, ptr addrspace(1) %98, align 4, !invariant.load !267
  %100 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg3884, i64 0, i64 %10, i64 %9
  %101 = getelementptr inbounds float, ptr addrspace(1) %100, i64 49152
  %102 = load float, ptr addrspace(1) %101, align 4, !invariant.load !267
  %multiply.97 = fmul float %8, %102
  %subtract.98 = fsub float %99, %multiply.97
  %103 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %5
  %104 = load float, ptr addrspace(1) %103, align 4, !invariant.load !267
  %105 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg4088, i64 0, i64 %10, i64 %9
  %106 = getelementptr inbounds float, ptr addrspace(1) %105, i64 49152
  %107 = load float, ptr addrspace(1) %106, align 4, !invariant.load !267
  %multiply.100 = fmul float %8, %107
  %subtract.101 = fsub float %104, %multiply.100
  %108 = getelementptr inbounds float, ptr addrspace(1) %arg4190, i64 %5
  store float %subtract.45, ptr addrspace(1) %108, align 4
  %109 = getelementptr inbounds float, ptr addrspace(1) %arg4292, i64 %5
  store float %subtract.48, ptr addrspace(1) %109, align 4
  %110 = getelementptr inbounds float, ptr addrspace(1) %arg4394, i64 %5
  store float %subtract.51, ptr addrspace(1) %110, align 4
  %111 = getelementptr inbounds float, ptr addrspace(1) %arg4496, i64 %5
  store float %subtract.54, ptr addrspace(1) %111, align 4
  %112 = getelementptr inbounds float, ptr addrspace(1) %arg4598, i64 %5
  store float %subtract.57, ptr addrspace(1) %112, align 4
  %113 = getelementptr inbounds float, ptr addrspace(1) %arg46100, i64 %5
  store float %subtract.60, ptr addrspace(1) %113, align 4
  %114 = getelementptr inbounds float, ptr addrspace(1) %arg47102, i64 %5
  store float %subtract.63, ptr addrspace(1) %114, align 4
  %115 = getelementptr inbounds float, ptr addrspace(1) %arg48104, i64 %5
  store float %subtract.66, ptr addrspace(1) %115, align 4
  %116 = getelementptr inbounds float, ptr addrspace(1) %arg49106, i64 %5
  store float %subtract.69, ptr addrspace(1) %116, align 4
  %117 = getelementptr inbounds float, ptr addrspace(1) %arg50108, i64 %5
  store float %subtract.72, ptr addrspace(1) %117, align 4
  %118 = getelementptr inbounds float, ptr addrspace(1) %arg51110, i64 %5
  store float %subtract.75, ptr addrspace(1) %118, align 4
  %119 = getelementptr inbounds float, ptr addrspace(1) %arg52112, i64 %5
  store float %subtract.78, ptr addrspace(1) %119, align 4
  %120 = getelementptr inbounds float, ptr addrspace(1) %arg53114, i64 %5
  store float %subtract.81, ptr addrspace(1) %120, align 4
  %121 = getelementptr inbounds float, ptr addrspace(1) %arg54116, i64 %5
  store float %subtract.84, ptr addrspace(1) %121, align 4
  %122 = getelementptr inbounds float, ptr addrspace(1) %arg55118, i64 %5
  store float %subtract.87, ptr addrspace(1) %122, align 4
  %123 = getelementptr inbounds float, ptr addrspace(1) %arg56120, i64 %5
  store float %subtract.90, ptr addrspace(1) %123, align 4
  %124 = getelementptr inbounds float, ptr addrspace(1) %arg57122, i64 %5
  store float %subtract.92, ptr addrspace(1) %124, align 4
  %125 = getelementptr inbounds float, ptr addrspace(1) %arg58124, i64 %5
  store float %subtract.95, ptr addrspace(1) %125, align 4
  %126 = getelementptr inbounds float, ptr addrspace(1) %arg59126, i64 %5
  store float %subtract.98, ptr addrspace(1) %126, align 4
  store float %subtract.101, ptr addrspace(1) %91, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @concatenate_389(ptr noalias nocapture readonly align 16 dereferenceable(1835008) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(49020928) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(50855936) %arg2) local_unnamed_addr #5 {
entry:
  %arg250 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg148 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg046 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !305
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 1552
  %5 = mul i32 %4, 1552
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 1552
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 1552
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 1552
  %9 = icmp ult i32 %.decomposed, 56
  br i1 %9, label %concatenate.pivot.0., label %concatenate.pivot.56.1

concatenate.pivot.0.:                             ; preds = %entry
  %10 = udiv i32 %linear_index_base, 1552
  %11 = mul nuw nsw i32 %10, 56
  br label %concatenate.3.merge

concatenate.pivot.56.1:                           ; preds = %entry
  %12 = add nsw i32 %.decomposed, -56
  %13 = udiv i32 %linear_index_base, 1552
  %14 = mul nuw nsw i32 %13, 1496
  br label %concatenate.3.merge

concatenate.3.merge:                              ; preds = %concatenate.pivot.56.1, %concatenate.pivot.0.
  %.sink30 = phi i32 [ %14, %concatenate.pivot.56.1 ], [ %.decomposed, %concatenate.pivot.0. ]
  %.sink = phi i32 [ %12, %concatenate.pivot.56.1 ], [ %11, %concatenate.pivot.0. ]
  %arg1.sink = phi ptr addrspace(1) [ %arg148, %concatenate.pivot.56.1 ], [ %arg046, %concatenate.pivot.0. ]
  %15 = add nuw nsw i32 %.sink, %.sink30
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg1.sink, i64 %16
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = zext i32 %linear_index_base to i64
  %20 = getelementptr float, ptr addrspace(1) %arg250, i64 %19
  store float %18, ptr addrspace(1) %20, align 16
  %21 = icmp ult i32 %6, 56
  br i1 %21, label %concatenate.pivot.0.6, label %concatenate.pivot.56.7

concatenate.pivot.0.6:                            ; preds = %concatenate.3.merge
  %22 = udiv i32 %linear_index_base, 1552
  %23 = mul nuw nsw i32 %22, 56
  br label %concatenate.3.merge2

concatenate.pivot.56.7:                           ; preds = %concatenate.3.merge
  %24 = add nsw i32 %6, -56
  %25 = udiv i32 %linear_index_base, 1552
  %26 = mul nuw nsw i32 %25, 1496
  br label %concatenate.3.merge2

concatenate.3.merge2:                             ; preds = %concatenate.pivot.56.7, %concatenate.pivot.0.6
  %.sink35 = phi i32 [ %26, %concatenate.pivot.56.7 ], [ %6, %concatenate.pivot.0.6 ]
  %.sink34 = phi i32 [ %24, %concatenate.pivot.56.7 ], [ %23, %concatenate.pivot.0.6 ]
  %arg1.sink31 = phi ptr addrspace(1) [ %arg148, %concatenate.pivot.56.7 ], [ %arg046, %concatenate.pivot.0.6 ]
  %27 = add nuw nsw i32 %.sink34, %.sink35
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1.sink31, i64 %28
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = getelementptr inbounds float, ptr addrspace(1) %20, i64 1
  store float %30, ptr addrspace(1) %31, align 4
  %32 = icmp ult i32 %7, 56
  br i1 %32, label %concatenate.pivot.0.12, label %concatenate.pivot.56.13

concatenate.pivot.0.12:                           ; preds = %concatenate.3.merge2
  %33 = udiv i32 %linear_index_base, 1552
  %34 = mul nuw nsw i32 %33, 56
  br label %concatenate.3.merge8

concatenate.pivot.56.13:                          ; preds = %concatenate.3.merge2
  %35 = add nsw i32 %7, -56
  %36 = udiv i32 %linear_index_base, 1552
  %37 = mul nuw nsw i32 %36, 1496
  br label %concatenate.3.merge8

concatenate.3.merge8:                             ; preds = %concatenate.pivot.56.13, %concatenate.pivot.0.12
  %.sink40 = phi i32 [ %37, %concatenate.pivot.56.13 ], [ %7, %concatenate.pivot.0.12 ]
  %.sink39 = phi i32 [ %35, %concatenate.pivot.56.13 ], [ %34, %concatenate.pivot.0.12 ]
  %arg1.sink36 = phi ptr addrspace(1) [ %arg148, %concatenate.pivot.56.13 ], [ %arg046, %concatenate.pivot.0.12 ]
  %38 = add nuw nsw i32 %.sink39, %.sink40
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds float, ptr addrspace(1) %arg1.sink36, i64 %39
  %41 = load float, ptr addrspace(1) %40, align 4, !invariant.load !267
  %42 = getelementptr inbounds float, ptr addrspace(1) %20, i64 2
  store float %41, ptr addrspace(1) %42, align 8
  %43 = icmp ult i32 %8, 56
  br i1 %43, label %concatenate.pivot.0.18, label %concatenate.pivot.56.19

concatenate.pivot.0.18:                           ; preds = %concatenate.3.merge8
  %44 = udiv i32 %linear_index_base, 1552
  %45 = mul nuw nsw i32 %44, 56
  br label %concatenate.3.merge14

concatenate.pivot.56.19:                          ; preds = %concatenate.3.merge8
  %46 = add nsw i32 %8, -56
  %47 = mul nuw nsw i32 %4, 1496
  br label %concatenate.3.merge14

concatenate.3.merge14:                            ; preds = %concatenate.pivot.56.19, %concatenate.pivot.0.18
  %.sink45 = phi i32 [ %47, %concatenate.pivot.56.19 ], [ %8, %concatenate.pivot.0.18 ]
  %.sink44 = phi i32 [ %46, %concatenate.pivot.56.19 ], [ %45, %concatenate.pivot.0.18 ]
  %arg1.sink41 = phi ptr addrspace(1) [ %arg148, %concatenate.pivot.56.19 ], [ %arg046, %concatenate.pivot.0.18 ]
  %48 = add nuw nsw i32 %.sink44, %.sink45
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds float, ptr addrspace(1) %arg1.sink41, i64 %49
  %51 = load float, ptr addrspace(1) %50, align 4, !invariant.load !267
  %52 = getelementptr inbounds float, ptr addrspace(1) %20, i64 3
  store float %51, ptr addrspace(1) %52, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_340(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg10) local_unnamed_addr #0 {
entry:
  %arg10260 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9258 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8256 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7254 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6252 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5250 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4248 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3246 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2244 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1242 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0240 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !284
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !306
  %2 = and i32 %0, 31
  %3 = lshr i32 %0, 5
  %4 = mul nuw nsw i32 %1, 3
  %5 = add nuw nsw i32 %4, %3
  %6 = icmp ult i32 %5, 8192
  br i1 %6, label %tile_loop.loop_header34.preheader, label %common.ret

tile_loop.loop_header34.preheader:                ; preds = %entry
  %7 = zext i32 %5 to i64
  %8 = zext i32 %2 to i64
  %Arg_0.140 = getelementptr inbounds [8192 x [64 x float]], ptr addrspace(1) %arg0240, i64 0, i64 %7, i64 %8
  %Arg_0.141 = load float, ptr addrspace(1) %Arg_0.140, align 4, !invariant.load !267
  %9 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg1242, i64 0, i64 %7, i64 %8
  %Arg_1.242262 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1688
  %Arg_1.243 = load float, ptr addrspace(1) %Arg_1.242262, align 4, !invariant.load !267
  %multiply.844 = fmul float %Arg_0.141, %Arg_1.243
  %add.13.i229 = fadd float %multiply.844, 0.000000e+00
  %Arg_2.346 = getelementptr inbounds [8192 x [64 x float]], ptr addrspace(1) %arg2244, i64 0, i64 %7, i64 %8
  %Arg_2.347 = load float, ptr addrspace(1) %Arg_2.346, align 4, !invariant.load !267
  %Arg_1.248263 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1752
  %Arg_1.249 = load float, ptr addrspace(1) %Arg_1.248263, align 4, !invariant.load !267
  %multiply.1650 = fmul float %Arg_2.347, %Arg_1.249
  %add.20.i230 = fadd float %multiply.1650, 0.000000e+00
  %Arg_3.452 = getelementptr inbounds [8192 x [64 x float]], ptr addrspace(1) %arg3246, i64 0, i64 %7, i64 %8
  %Arg_3.453 = load float, ptr addrspace(1) %Arg_3.452, align 4, !invariant.load !267
  %Arg_1.254264 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1496
  %Arg_1.255 = load float, ptr addrspace(1) %Arg_1.254264, align 4, !invariant.load !267
  %multiply.2356 = fmul float %Arg_3.453, %Arg_1.255
  %add.27.i231 = fadd float %multiply.2356, 0.000000e+00
  %Arg_4.558 = getelementptr inbounds [8192 x [64 x float]], ptr addrspace(1) %arg4248, i64 0, i64 %7, i64 %8
  %Arg_4.559 = load float, ptr addrspace(1) %Arg_4.558, align 4, !invariant.load !267
  %Arg_1.260265 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1560
  %Arg_1.261 = load float, ptr addrspace(1) %Arg_1.260265, align 4, !invariant.load !267
  %multiply.3062 = fmul float %Arg_4.559, %Arg_1.261
  %add.34.i232 = fadd float %multiply.3062, 0.000000e+00
  %Arg_5.664 = getelementptr inbounds [8192 x [64 x float]], ptr addrspace(1) %arg5250, i64 0, i64 %7, i64 %8
  %Arg_5.665 = load float, ptr addrspace(1) %Arg_5.664, align 4, !invariant.load !267
  %Arg_1.266266 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1624
  %Arg_1.267 = load float, ptr addrspace(1) %Arg_1.266266, align 4, !invariant.load !267
  %multiply.3768 = fmul float %Arg_5.665, %Arg_1.267
  %add.41.i233 = fadd float %multiply.3768, 0.000000e+00
  %Arg_0.140.1268 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.140, i64 32
  %Arg_0.141.1 = load float, ptr addrspace(1) %Arg_0.140.1268, align 4, !invariant.load !267
  %Arg_1.242.1269 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1720
  %Arg_1.243.1 = load float, ptr addrspace(1) %Arg_1.242.1269, align 4, !invariant.load !267
  %multiply.844.1 = fmul float %Arg_0.141.1, %Arg_1.243.1
  %add.13.i229.1 = fadd float %add.13.i229, %multiply.844.1
  %Arg_2.346.1271 = getelementptr inbounds float, ptr addrspace(1) %Arg_2.346, i64 32
  %Arg_2.347.1 = load float, ptr addrspace(1) %Arg_2.346.1271, align 4, !invariant.load !267
  %Arg_1.248.1272 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1784
  %Arg_1.249.1 = load float, ptr addrspace(1) %Arg_1.248.1272, align 4, !invariant.load !267
  %multiply.1650.1 = fmul float %Arg_2.347.1, %Arg_1.249.1
  %add.20.i230.1 = fadd float %add.20.i230, %multiply.1650.1
  %Arg_3.452.1274 = getelementptr inbounds float, ptr addrspace(1) %Arg_3.452, i64 32
  %Arg_3.453.1 = load float, ptr addrspace(1) %Arg_3.452.1274, align 4, !invariant.load !267
  %Arg_1.254.1275 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1528
  %Arg_1.255.1 = load float, ptr addrspace(1) %Arg_1.254.1275, align 4, !invariant.load !267
  %multiply.2356.1 = fmul float %Arg_3.453.1, %Arg_1.255.1
  %add.27.i231.1 = fadd float %add.27.i231, %multiply.2356.1
  %Arg_4.558.1277 = getelementptr inbounds float, ptr addrspace(1) %Arg_4.558, i64 32
  %Arg_4.559.1 = load float, ptr addrspace(1) %Arg_4.558.1277, align 4, !invariant.load !267
  %Arg_1.260.1278 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1592
  %Arg_1.261.1 = load float, ptr addrspace(1) %Arg_1.260.1278, align 4, !invariant.load !267
  %multiply.3062.1 = fmul float %Arg_4.559.1, %Arg_1.261.1
  %add.34.i232.1 = fadd float %add.34.i232, %multiply.3062.1
  %Arg_5.664.1280 = getelementptr inbounds float, ptr addrspace(1) %Arg_5.664, i64 32
  %Arg_5.665.1 = load float, ptr addrspace(1) %Arg_5.664.1280, align 4, !invariant.load !267
  %Arg_1.266.1281 = getelementptr inbounds float, ptr addrspace(1) %9, i64 1656
  %Arg_1.267.1 = load float, ptr addrspace(1) %Arg_1.266.1281, align 4, !invariant.load !267
  %multiply.3768.1 = fmul float %Arg_5.665.1, %Arg_1.267.1
  %add.41.i233.1 = fadd float %add.41.i233, %multiply.3768.1
  %10 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i229.1, i32 16, i32 31)
  %add.13.i = fadd float %add.13.i229.1, %10
  %11 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i, i32 8, i32 31)
  %add.13.i209 = fadd float %add.13.i, %11
  %12 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i209, i32 4, i32 31)
  %add.13.i210 = fadd float %add.13.i209, %12
  %13 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i210, i32 2, i32 31)
  %add.13.i211 = fadd float %add.13.i210, %13
  %14 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i211, i32 1, i32 31)
  %15 = icmp eq i32 %2, 0
  %16 = zext i32 %3 to i64
  %17 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache66, i64 0, i64 %16, i64 0, i64 0
  %add.13.i212 = fadd float %add.13.i211, %14
  br i1 %15, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

common.ret:                                       ; preds = %intra_warp_reduce_write-after176, %reduction_write_output-true180, %entry
  ret void

intra_warp_reduce_write-after:                    ; preds = %tile_loop.loop_header34.preheader, %intra_warp_reduce_write-true
  %18 = icmp eq i32 %2, 0
  tail call void @llvm.nvvm.barrier0()
  %output_element_address = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg6252, i64 0, i64 %7
  %19 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache66, i64 0, i64 %16, i64 0, i64 %8
  br i1 %18, label %reduction_write_output-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %intra_warp_reduce_write-after, %reduction_write_output-true
  %20 = icmp eq i32 %2, 0
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i230.1, i32 16, i32 31)
  %add.20.i = fadd float %add.20.i230.1, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i, i32 8, i32 31)
  %add.20.i213 = fadd float %add.20.i, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i213, i32 4, i32 31)
  %add.20.i214 = fadd float %add.20.i213, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i214, i32 2, i32 31)
  %add.20.i215 = fadd float %add.20.i214, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i215, i32 1, i32 31)
  %26 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache67, i64 0, i64 %16, i64 0, i64 0
  %add.20.i216 = fadd float %add.20.i215, %25
  br i1 %20, label %intra_warp_reduce_write-true100, label %intra_warp_reduce_write-after101

intra_warp_reduce_write-after101:                 ; preds = %intra_warp_reduce_write-true100, %inter_warp_reduce-after
  %27 = icmp eq i32 %2, 0
  tail call void @llvm.nvvm.barrier0()
  %output_element_address107 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg7254, i64 0, i64 %7
  %28 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache67, i64 0, i64 %16, i64 0, i64 %8
  br i1 %27, label %reduction_write_output-true105, label %inter_warp_reduce-after103

inter_warp_reduce-after103:                       ; preds = %intra_warp_reduce_write-after101, %reduction_write_output-true105
  %29 = icmp eq i32 %2, 0
  %30 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i231.1, i32 16, i32 31)
  %add.27.i = fadd float %add.27.i231.1, %30
  %31 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i, i32 8, i32 31)
  %add.27.i217 = fadd float %add.27.i, %31
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i217, i32 4, i32 31)
  %add.27.i218 = fadd float %add.27.i217, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i218, i32 2, i32 31)
  %add.27.i219 = fadd float %add.27.i218, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.27.i219, i32 1, i32 31)
  %35 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache68, i64 0, i64 %16, i64 0, i64 0
  %add.27.i220 = fadd float %add.27.i219, %34
  br i1 %29, label %intra_warp_reduce_write-true125, label %intra_warp_reduce_write-after126

intra_warp_reduce_write-after126:                 ; preds = %intra_warp_reduce_write-true125, %inter_warp_reduce-after103
  %36 = icmp eq i32 %2, 0
  tail call void @llvm.nvvm.barrier0()
  %output_element_address132 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg8256, i64 0, i64 %7
  %37 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache68, i64 0, i64 %16, i64 0, i64 %8
  br i1 %36, label %reduction_write_output-true130, label %inter_warp_reduce-after128

inter_warp_reduce-after128:                       ; preds = %intra_warp_reduce_write-after126, %reduction_write_output-true130
  %38 = icmp eq i32 %2, 0
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.34.i232.1, i32 16, i32 31)
  %add.34.i = fadd float %add.34.i232.1, %39
  %40 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.34.i, i32 8, i32 31)
  %add.34.i221 = fadd float %add.34.i, %40
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.34.i221, i32 4, i32 31)
  %add.34.i222 = fadd float %add.34.i221, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.34.i222, i32 2, i32 31)
  %add.34.i223 = fadd float %add.34.i222, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.34.i223, i32 1, i32 31)
  %44 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache69, i64 0, i64 %16, i64 0, i64 0
  %add.34.i224 = fadd float %add.34.i223, %43
  br i1 %38, label %intra_warp_reduce_write-true150, label %intra_warp_reduce_write-after151

intra_warp_reduce_write-after151:                 ; preds = %intra_warp_reduce_write-true150, %inter_warp_reduce-after128
  %45 = icmp eq i32 %2, 0
  tail call void @llvm.nvvm.barrier0()
  %output_element_address157 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg9258, i64 0, i64 %7
  %46 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache69, i64 0, i64 %16, i64 0, i64 %8
  br i1 %45, label %reduction_write_output-true155, label %inter_warp_reduce-after153

inter_warp_reduce-after153:                       ; preds = %intra_warp_reduce_write-after151, %reduction_write_output-true155
  %47 = icmp eq i32 %2, 0
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i233.1, i32 16, i32 31)
  %add.41.i = fadd float %add.41.i233.1, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i, i32 8, i32 31)
  %add.41.i225 = fadd float %add.41.i, %49
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i225, i32 4, i32 31)
  %add.41.i226 = fadd float %add.41.i225, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i226, i32 2, i32 31)
  %add.41.i227 = fadd float %add.41.i226, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.41.i227, i32 1, i32 31)
  %53 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache70, i64 0, i64 %16, i64 0, i64 0
  %add.41.i228 = fadd float %add.41.i227, %52
  br i1 %47, label %intra_warp_reduce_write-true175, label %intra_warp_reduce_write-after176

intra_warp_reduce_write-after176:                 ; preds = %intra_warp_reduce_write-true175, %inter_warp_reduce-after153
  %54 = icmp eq i32 %2, 0
  tail call void @llvm.nvvm.barrier0()
  %output_element_address182 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg10260, i64 0, i64 %7
  %55 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache70, i64 0, i64 %16, i64 0, i64 %8
  br i1 %54, label %reduction_write_output-true180, label %common.ret

intra_warp_reduce_write-true:                     ; preds = %tile_loop.loop_header34.preheader
  store float %add.13.i212, ptr addrspace(3) %17, align 4
  br label %intra_warp_reduce_write-after

reduction_write_output-true:                      ; preds = %intra_warp_reduce_write-after
  %output.then.val = load float, ptr addrspace(3) %19, align 4
  store float %output.then.val, ptr addrspace(1) %output_element_address, align 4
  br label %inter_warp_reduce-after

intra_warp_reduce_write-true100:                  ; preds = %inter_warp_reduce-after
  store float %add.20.i216, ptr addrspace(3) %26, align 4
  br label %intra_warp_reduce_write-after101

reduction_write_output-true105:                   ; preds = %intra_warp_reduce_write-after101
  %output108.then.val = load float, ptr addrspace(3) %28, align 4
  store float %output108.then.val, ptr addrspace(1) %output_element_address107, align 4
  br label %inter_warp_reduce-after103

intra_warp_reduce_write-true125:                  ; preds = %inter_warp_reduce-after103
  store float %add.27.i220, ptr addrspace(3) %35, align 4
  br label %intra_warp_reduce_write-after126

reduction_write_output-true130:                   ; preds = %intra_warp_reduce_write-after126
  %output133.then.val = load float, ptr addrspace(3) %37, align 4
  store float %output133.then.val, ptr addrspace(1) %output_element_address132, align 4
  br label %inter_warp_reduce-after128

intra_warp_reduce_write-true150:                  ; preds = %inter_warp_reduce-after128
  store float %add.34.i224, ptr addrspace(3) %44, align 4
  br label %intra_warp_reduce_write-after151

reduction_write_output-true155:                   ; preds = %intra_warp_reduce_write-after151
  %output158.then.val = load float, ptr addrspace(3) %46, align 4
  store float %output158.then.val, ptr addrspace(1) %output_element_address157, align 4
  br label %inter_warp_reduce-after153

intra_warp_reduce_write-true175:                  ; preds = %inter_warp_reduce-after153
  store float %add.41.i228, ptr addrspace(3) %53, align 4
  br label %intra_warp_reduce_write-after176

reduction_write_output-true180:                   ; preds = %intra_warp_reduce_write-after176
  %output183.then.val = load float, ptr addrspace(3) %55, align 4
  store float %output183.then.val, ptr addrspace(1) %output_element_address182, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_956(ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 4
  %5 = and i32 %linear_index3, 15
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 14
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 13
  %8 = and i32 %3, 12
  %9 = zext i32 %4 to i64
  %10 = zext i32 %8 to i64
  %11 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 1480
  %13 = load <2 x float>, ptr addrspace(1) %12, align 16, !invariant.load !267
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = zext i32 %linear_index_base to i64
  %17 = getelementptr float, ptr addrspace(1) %arg13, i64 %16
  %18 = zext i32 %7 to i64
  %19 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = zext i32 %6 to i64
  %21 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %20
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 1480
  %23 = load float, ptr addrspace(1) %22, align 8, !invariant.load !267
  %24 = zext i32 %5 to i64
  %25 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %24
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 1480
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = insertelement <4 x float> poison, float %14, i32 0
  %29 = insertelement <4 x float> %28, float %15, i32 1
  %30 = insertelement <4 x float> %29, float %23, i32 2
  %31 = insertelement <4 x float> %30, float %27, i32 3
  store <4 x float> %31, ptr addrspace(1) %17, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @fusion_346(ptr noalias nocapture readonly align 16 dereferenceable(786432) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(786432) %arg6) local_unnamed_addr #5 {
entry:
  %arg670 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg568 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg466 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg364 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg262 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg160 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg058 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !307
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 24
  %5 = mul i32 %4, 24
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 24
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = urem i32 %linear_index2, 24
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = urem i32 %linear_index3, 24
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg058, i64 %9
  %11 = load float, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = load float, ptr addrspace(1) %arg466, align 16, !invariant.load !267
  %13 = icmp ult i32 %.decomposed, 8
  br i1 %13, label %concatenate.pivot.0., label %concatenate.pivot.16.

concatenate.pivot.0.:                             ; preds = %entry
  %14 = zext i32 %4 to i64
  %15 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg364, i64 0, i64 %14, i64 0
  %16 = zext i32 %.decomposed to i64
  %17 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %14, i64 %16
  %18 = getelementptr inbounds float, ptr addrspace(1) %17, i64 1832
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  br label %concatenate.20.merge

concatenate.pivot.16.:                            ; preds = %entry
  %20 = icmp ult i32 %.decomposed, 16
  %21 = zext i32 %4 to i64
  %22 = zext i32 %.decomposed to i64
  %23 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %21, i64 %22
  %24 = getelementptr inbounds float, ptr addrspace(1) %23, i64 1832
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  br i1 %20, label %concatenate.pivot.8.1, label %concatenate.pivot.16.2

concatenate.pivot.8.1:                            ; preds = %concatenate.pivot.16.
  %26 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg262, i64 0, i64 %21, i64 0
  br label %concatenate.20.merge

concatenate.pivot.16.2:                           ; preds = %concatenate.pivot.16.
  %27 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg160, i64 0, i64 %21, i64 0
  br label %concatenate.20.merge

concatenate.20.merge:                             ; preds = %concatenate.pivot.16.2, %concatenate.pivot.8.1, %concatenate.pivot.0.
  %.sink51 = phi float [ %25, %concatenate.pivot.16.2 ], [ %25, %concatenate.pivot.8.1 ], [ %19, %concatenate.pivot.0. ]
  %.sink.in = phi ptr addrspace(1) [ %27, %concatenate.pivot.16.2 ], [ %26, %concatenate.pivot.8.1 ], [ %15, %concatenate.pivot.0. ]
  %.sink = load float, ptr addrspace(1) %.sink.in, align 4, !invariant.load !267
  %multiply.19 = fmul float %.sink, %.sink51
  %multiply.21 = fmul float %12, %multiply.19
  %subtract.22 = fsub float %11, %multiply.21
  %28 = getelementptr float, ptr addrspace(1) %arg670, i64 %9
  store float %subtract.22, ptr addrspace(1) %28, align 16
  %29 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1
  %30 = load float, ptr addrspace(1) %29, align 4, !invariant.load !267
  %31 = icmp ult i32 %6, 8
  br i1 %31, label %concatenate.pivot.0.11, label %concatenate.pivot.16.12

concatenate.pivot.0.11:                           ; preds = %concatenate.20.merge
  %32 = zext i32 %4 to i64
  %33 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg364, i64 0, i64 %32, i64 0
  %34 = zext i32 %6 to i64
  %35 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %32, i64 %34
  %36 = getelementptr inbounds float, ptr addrspace(1) %35, i64 1832
  %37 = load float, ptr addrspace(1) %36, align 4, !invariant.load !267
  br label %concatenate.20.merge3

concatenate.pivot.16.12:                          ; preds = %concatenate.20.merge
  %38 = icmp ult i32 %6, 16
  %39 = zext i32 %4 to i64
  %40 = zext i32 %6 to i64
  %41 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %39, i64 %40
  %42 = getelementptr inbounds float, ptr addrspace(1) %41, i64 1832
  %43 = load float, ptr addrspace(1) %42, align 4, !invariant.load !267
  br i1 %38, label %concatenate.pivot.8.13, label %concatenate.pivot.16.14

concatenate.pivot.8.13:                           ; preds = %concatenate.pivot.16.12
  %44 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg262, i64 0, i64 %39, i64 0
  br label %concatenate.20.merge3

concatenate.pivot.16.14:                          ; preds = %concatenate.pivot.16.12
  %45 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg160, i64 0, i64 %39, i64 0
  br label %concatenate.20.merge3

concatenate.20.merge3:                            ; preds = %concatenate.pivot.16.14, %concatenate.pivot.8.13, %concatenate.pivot.0.11
  %.sink53 = phi float [ %43, %concatenate.pivot.16.14 ], [ %43, %concatenate.pivot.8.13 ], [ %37, %concatenate.pivot.0.11 ]
  %.sink52.in = phi ptr addrspace(1) [ %45, %concatenate.pivot.16.14 ], [ %44, %concatenate.pivot.8.13 ], [ %33, %concatenate.pivot.0.11 ]
  %.sink52 = load float, ptr addrspace(1) %.sink52.in, align 4, !invariant.load !267
  %multiply.199 = fmul float %.sink52, %.sink53
  %multiply.2115 = fmul float %12, %multiply.199
  %subtract.2216 = fsub float %30, %multiply.2115
  %46 = getelementptr inbounds float, ptr addrspace(1) %28, i64 1
  store float %subtract.2216, ptr addrspace(1) %46, align 4
  %47 = getelementptr inbounds float, ptr addrspace(1) %10, i64 2
  %48 = load float, ptr addrspace(1) %47, align 8, !invariant.load !267
  %49 = icmp ult i32 %7, 8
  br i1 %49, label %concatenate.pivot.0.25, label %concatenate.pivot.16.26

concatenate.pivot.0.25:                           ; preds = %concatenate.20.merge3
  %50 = zext i32 %4 to i64
  %51 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg364, i64 0, i64 %50, i64 0
  %52 = zext i32 %7 to i64
  %53 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %50, i64 %52
  %54 = getelementptr inbounds float, ptr addrspace(1) %53, i64 1832
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  br label %concatenate.20.merge17

concatenate.pivot.16.26:                          ; preds = %concatenate.20.merge3
  %56 = icmp ult i32 %7, 16
  %57 = zext i32 %4 to i64
  %58 = zext i32 %7 to i64
  %59 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %57, i64 %58
  %60 = getelementptr inbounds float, ptr addrspace(1) %59, i64 1832
  %61 = load float, ptr addrspace(1) %60, align 4, !invariant.load !267
  br i1 %56, label %concatenate.pivot.8.27, label %concatenate.pivot.16.28

concatenate.pivot.8.27:                           ; preds = %concatenate.pivot.16.26
  %62 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg262, i64 0, i64 %57, i64 0
  br label %concatenate.20.merge17

concatenate.pivot.16.28:                          ; preds = %concatenate.pivot.16.26
  %63 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg160, i64 0, i64 %57, i64 0
  br label %concatenate.20.merge17

concatenate.20.merge17:                           ; preds = %concatenate.pivot.16.28, %concatenate.pivot.8.27, %concatenate.pivot.0.25
  %.sink55 = phi float [ %61, %concatenate.pivot.16.28 ], [ %61, %concatenate.pivot.8.27 ], [ %55, %concatenate.pivot.0.25 ]
  %.sink54.in = phi ptr addrspace(1) [ %63, %concatenate.pivot.16.28 ], [ %62, %concatenate.pivot.8.27 ], [ %51, %concatenate.pivot.0.25 ]
  %.sink54 = load float, ptr addrspace(1) %.sink54.in, align 4, !invariant.load !267
  %multiply.1923 = fmul float %.sink54, %.sink55
  %multiply.2129 = fmul float %12, %multiply.1923
  %subtract.2230 = fsub float %48, %multiply.2129
  %64 = getelementptr inbounds float, ptr addrspace(1) %28, i64 2
  store float %subtract.2230, ptr addrspace(1) %64, align 8
  %65 = getelementptr inbounds float, ptr addrspace(1) %10, i64 3
  %66 = load float, ptr addrspace(1) %65, align 4, !invariant.load !267
  %67 = icmp ult i32 %8, 8
  br i1 %67, label %concatenate.pivot.0.39, label %concatenate.pivot.16.40

concatenate.pivot.0.39:                           ; preds = %concatenate.20.merge17
  %68 = zext i32 %4 to i64
  %69 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg364, i64 0, i64 %68, i64 0
  %70 = zext i32 %8 to i64
  %71 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %68, i64 %70
  %72 = getelementptr inbounds float, ptr addrspace(1) %71, i64 1832
  %73 = load float, ptr addrspace(1) %72, align 4, !invariant.load !267
  br label %concatenate.20.merge31

concatenate.pivot.16.40:                          ; preds = %concatenate.20.merge17
  %74 = icmp ult i32 %8, 16
  %75 = zext i32 %4 to i64
  %76 = zext i32 %8 to i64
  %77 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg568, i64 0, i64 %75, i64 %76
  %78 = getelementptr inbounds float, ptr addrspace(1) %77, i64 1832
  %79 = load float, ptr addrspace(1) %78, align 4, !invariant.load !267
  br i1 %74, label %concatenate.pivot.8.41, label %concatenate.pivot.16.42

concatenate.pivot.8.41:                           ; preds = %concatenate.pivot.16.40
  %80 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg262, i64 0, i64 %75, i64 0
  br label %concatenate.20.merge31

concatenate.pivot.16.42:                          ; preds = %concatenate.pivot.16.40
  %81 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg160, i64 0, i64 %75, i64 0
  br label %concatenate.20.merge31

concatenate.20.merge31:                           ; preds = %concatenate.pivot.16.42, %concatenate.pivot.8.41, %concatenate.pivot.0.39
  %.sink57 = phi float [ %79, %concatenate.pivot.16.42 ], [ %79, %concatenate.pivot.8.41 ], [ %73, %concatenate.pivot.0.39 ]
  %.sink56.in = phi ptr addrspace(1) [ %81, %concatenate.pivot.16.42 ], [ %80, %concatenate.pivot.8.41 ], [ %69, %concatenate.pivot.0.39 ]
  %.sink56 = load float, ptr addrspace(1) %.sink56.in, align 4, !invariant.load !267
  %multiply.1937 = fmul float %.sink56, %.sink57
  %multiply.2143 = fmul float %12, %multiply.1937
  %subtract.2244 = fsub float %66, %multiply.2143
  %82 = getelementptr inbounds float, ptr addrspace(1) %28, i64 3
  store float %subtract.2244, ptr addrspace(1) %82, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @fusion_345(ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg7) local_unnamed_addr #5 {
entry:
  %arg795 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg693 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg591 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg489 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg387 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg285 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg183 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg081 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !308
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = and i32 %3, 252
  %5 = lshr i32 %linear_index_base, 8
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = and i32 %linear_index1, 253
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = and i32 %linear_index2, 254
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = and i32 %linear_index3, 255
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg081, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg591, align 16, !invariant.load !267
  %17 = icmp ult i32 %4, 128
  %18 = zext i32 %5 to i64
  %19 = zext i32 %4 to i64
  %20 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg693, i64 0, i64 %18, i64 %19
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 1496
  %22 = load <2 x float>, ptr addrspace(1) %21, align 16, !invariant.load !267
  %23 = extractelement <2 x float> %22, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = icmp ult i32 %4, 64
  %arg4.arg3 = select i1 %25, ptr addrspace(1) %arg489, ptr addrspace(1) %arg387
  %26 = icmp ult i32 %4, 192
  %arg2.arg1 = select i1 %26, ptr addrspace(1) %arg285, ptr addrspace(1) %arg183
  %arg1.sink = select i1 %17, ptr addrspace(1) %arg4.arg3, ptr addrspace(1) %arg2.arg1
  %27 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1.sink, i64 0, i64 %18, i64 0
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %multiply.24 = fmul float %28, %23
  %multiply.26 = fmul float %16, %multiply.24
  %subtract.27 = fsub float %12, %multiply.26
  %29 = getelementptr float, ptr addrspace(1) %arg795, i64 %9
  %30 = icmp ult i32 %6, 128
  %31 = zext i32 %6 to i64
  %32 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg693, i64 0, i64 %18, i64 %31
  %33 = icmp ult i32 %6, 64
  %arg4.arg376 = select i1 %33, ptr addrspace(1) %arg489, ptr addrspace(1) %arg387
  %34 = icmp ult i32 %6, 192
  %arg2.arg177 = select i1 %34, ptr addrspace(1) %arg285, ptr addrspace(1) %arg183
  %arg1.sink75 = select i1 %30, ptr addrspace(1) %arg4.arg376, ptr addrspace(1) %arg2.arg177
  %35 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1.sink75, i64 0, i64 %18, i64 0
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %multiply.2412 = fmul float %36, %24
  %multiply.2620 = fmul float %16, %multiply.2412
  %subtract.2721 = fsub float %13, %multiply.2620
  %37 = icmp ult i32 %7, 128
  %38 = zext i32 %7 to i64
  %39 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg693, i64 0, i64 %18, i64 %38
  %40 = getelementptr inbounds float, ptr addrspace(1) %39, i64 1496
  %41 = load float, ptr addrspace(1) %40, align 8, !invariant.load !267
  %42 = icmp ult i32 %7, 64
  %arg4.arg373 = select i1 %42, ptr addrspace(1) %arg489, ptr addrspace(1) %arg387
  %43 = icmp ult i32 %7, 192
  %arg2.arg174 = select i1 %43, ptr addrspace(1) %arg285, ptr addrspace(1) %arg183
  %arg1.sink72 = select i1 %37, ptr addrspace(1) %arg4.arg373, ptr addrspace(1) %arg2.arg174
  %44 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1.sink72, i64 0, i64 %18, i64 0
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %multiply.2430 = fmul float %45, %41
  %multiply.2638 = fmul float %16, %multiply.2430
  %subtract.2739 = fsub float %14, %multiply.2638
  %46 = icmp ult i32 %8, 128
  %47 = zext i32 %8 to i64
  %48 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg693, i64 0, i64 %18, i64 %47
  %49 = getelementptr inbounds float, ptr addrspace(1) %48, i64 1496
  %50 = load float, ptr addrspace(1) %49, align 4, !invariant.load !267
  %51 = icmp ult i32 %8, 64
  %arg4.arg379 = select i1 %51, ptr addrspace(1) %arg489, ptr addrspace(1) %arg387
  %52 = icmp ult i32 %8, 192
  %arg2.arg180 = select i1 %52, ptr addrspace(1) %arg285, ptr addrspace(1) %arg183
  %arg1.sink78 = select i1 %46, ptr addrspace(1) %arg4.arg379, ptr addrspace(1) %arg2.arg180
  %53 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg1.sink78, i64 0, i64 %18, i64 0
  %54 = load float, ptr addrspace(1) %53, align 4, !invariant.load !267
  %multiply.2448 = fmul float %54, %50
  %multiply.2656 = fmul float %16, %multiply.2448
  %subtract.2757 = fsub float %15, %multiply.2656
  %55 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %56 = insertelement <4 x float> %55, float %subtract.2721, i32 1
  %57 = insertelement <4 x float> %56, float %subtract.2739, i32 2
  %58 = insertelement <4 x float> %57, float %subtract.2757, i32 3
  store <4 x float> %58, ptr addrspace(1) %29, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_612(ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(48496640) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !309
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 1480
  %5 = urem i32 %linear_index3, 1480
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = urem i32 %linear_index2, 1480
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = urem i32 %linear_index1, 1480
  %8 = mul i32 %4, 1480
  %.decomposed = sub i32 %linear_index_base.frozen, %8
  %9 = zext i32 %4 to i64
  %10 = zext i32 %.decomposed to i64
  %11 = getelementptr inbounds [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = zext i32 %linear_index_base to i64
  %14 = getelementptr float, ptr addrspace(1) %arg13, i64 %13
  %15 = zext i32 %7 to i64
  %16 = getelementptr inbounds [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %15
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %18 = zext i32 %6 to i64
  %19 = getelementptr inbounds [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds [8192 x [2056 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = insertelement <4 x float> poison, float %12, i32 0
  %25 = insertelement <4 x float> %24, float %17, i32 1
  %26 = insertelement <4 x float> %25, float %20, i32 2
  %27 = insertelement <4 x float> %26, float %23, i32 3
  store <4 x float> %27, ptr addrspace(1) %14, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_565(ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(8388608) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg10, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(12582912) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg15, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(142606336) %arg19) local_unnamed_addr #6 {
entry:
  %arg1957 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1855 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1753 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1651 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1549 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1447 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1345 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1243 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1141 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1039 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg937 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg835 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg733 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg631 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg529 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg427 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg325 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg223 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg121 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg019 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !310
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = and i32 %1, 255
  %4 = lshr i32 %linear_index, 8
  %5 = urem i32 %4, 17
  %6 = udiv i32 %linear_index, 4352
  %7 = icmp ult i32 %5, 8
  br i1 %7, label %concatenate.pivot.4., label %concatenate.pivot.12.

concatenate.pivot.4.:                             ; preds = %entry
  %8 = icmp ult i32 %5, 4
  %9 = zext i32 %6 to i64
  br i1 %8, label %concatenate.pivot.2., label %concatenate.pivot.6.

concatenate.pivot.2.:                             ; preds = %concatenate.pivot.4.
  %10 = icmp ult i32 %5, 2
  br i1 %10, label %concatenate.pivot.1., label %concatenate.pivot.3.

concatenate.pivot.1.:                             ; preds = %concatenate.pivot.2.
  %11 = icmp eq i32 %5, 0
  br i1 %11, label %concatenate.pivot.0., label %concatenate.pivot.1.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.1.
  %12 = zext i32 %3 to i64
  %13 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg1651, i64 0, i64 %9, i64 %12
  %14 = getelementptr inbounds float, ptr addrspace(1) %13, i64 224
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %16 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg1549, i64 0, i64 %9, i64 %12
  %17 = getelementptr inbounds float, ptr addrspace(1) %16, i64 224
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %add.22 = fadd float %15, %18
  br label %concatenate.56.merge

concatenate.pivot.1.1:                            ; preds = %concatenate.pivot.1.
  %19 = zext i32 %3 to i64
  %20 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg1447, i64 0, i64 %9, i64 %19
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 128
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.3.:                             ; preds = %concatenate.pivot.2.
  %23 = icmp eq i32 %5, 2
  br i1 %23, label %concatenate.pivot.2.2, label %concatenate.pivot.3.3

concatenate.pivot.2.2:                            ; preds = %concatenate.pivot.3.
  %24 = zext i32 %3 to i64
  %25 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg1345, i64 0, i64 %9, i64 %24
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 104
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.3.3:                            ; preds = %concatenate.pivot.3.
  %28 = zext i32 %3 to i64
  %29 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1243, i64 0, i64 %9, i64 %28
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 48
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.6.:                             ; preds = %concatenate.pivot.4.
  %32 = icmp ult i32 %5, 6
  br i1 %32, label %concatenate.pivot.5., label %concatenate.pivot.7.

concatenate.pivot.5.:                             ; preds = %concatenate.pivot.6.
  %.not18 = icmp eq i32 %5, 5
  br i1 %.not18, label %concatenate.pivot.5.5, label %concatenate.pivot.4.4

concatenate.pivot.4.4:                            ; preds = %concatenate.pivot.5.
  %33 = zext i32 %3 to i64
  %34 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg1141, i64 0, i64 %9, i64 %33
  %35 = getelementptr inbounds float, ptr addrspace(1) %34, i64 48
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.5.5:                            ; preds = %concatenate.pivot.5.
  %37 = zext i32 %3 to i64
  %38 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg1039, i64 0, i64 %9, i64 %37
  %39 = getelementptr inbounds float, ptr addrspace(1) %38, i64 96
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.7.:                             ; preds = %concatenate.pivot.6.
  %41 = icmp eq i32 %5, 6
  br i1 %41, label %concatenate.pivot.6.6, label %concatenate.pivot.7.7

concatenate.pivot.6.6:                            ; preds = %concatenate.pivot.7.
  %42 = zext i32 %3 to i64
  %43 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg937, i64 0, i64 %9, i64 %42
  %44 = getelementptr inbounds float, ptr addrspace(1) %43, i64 104
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.7.7:                            ; preds = %concatenate.pivot.7.
  %46 = zext i32 %3 to i64
  %47 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg835, i64 0, i64 %9, i64 %46
  %48 = getelementptr inbounds float, ptr addrspace(1) %47, i64 192
  %49 = load float, ptr addrspace(1) %48, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.12.:                            ; preds = %entry
  %50 = icmp ult i32 %5, 12
  br i1 %50, label %concatenate.pivot.10., label %concatenate.pivot.14.

concatenate.pivot.10.:                            ; preds = %concatenate.pivot.12.
  %51 = icmp ult i32 %5, 10
  %52 = zext i32 %6 to i64
  br i1 %51, label %concatenate.pivot.9., label %concatenate.pivot.11.

concatenate.pivot.9.:                             ; preds = %concatenate.pivot.10.
  %.not17 = icmp eq i32 %5, 9
  br i1 %.not17, label %concatenate.pivot.9.9, label %concatenate.pivot.8.8

concatenate.pivot.8.8:                            ; preds = %concatenate.pivot.9.
  %53 = zext i32 %3 to i64
  %54 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg733, i64 0, i64 %52, i64 %53
  %55 = getelementptr inbounds float, ptr addrspace(1) %54, i64 96
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.9.9:                            ; preds = %concatenate.pivot.9.
  %57 = zext i32 %3 to i64
  %58 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg631, i64 0, i64 %52, i64 %57
  %59 = getelementptr inbounds float, ptr addrspace(1) %58, i64 48
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.11.:                            ; preds = %concatenate.pivot.10.
  %61 = icmp eq i32 %5, 10
  br i1 %61, label %concatenate.pivot.10.10, label %concatenate.pivot.11.11

concatenate.pivot.10.10:                          ; preds = %concatenate.pivot.11.
  %62 = zext i32 %3 to i64
  %63 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1753, i64 0, i64 %52, i64 %62
  %64 = getelementptr inbounds float, ptr addrspace(1) %63, i64 192
  %65 = load float, ptr addrspace(1) %64, align 4, !invariant.load !267
  %66 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1855, i64 0, i64 %52, i64 %62
  %67 = getelementptr inbounds float, ptr addrspace(1) %66, i64 192
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %add.42 = fadd float %65, %68
  br label %concatenate.56.merge

concatenate.pivot.11.11:                          ; preds = %concatenate.pivot.11.
  %69 = zext i32 %3 to i64
  %70 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg529, i64 0, i64 %52, i64 %69
  %71 = getelementptr inbounds float, ptr addrspace(1) %70, i64 96
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.14.:                            ; preds = %concatenate.pivot.12.
  %73 = icmp ult i32 %5, 14
  br i1 %73, label %concatenate.pivot.13., label %concatenate.pivot.15.

concatenate.pivot.13.:                            ; preds = %concatenate.pivot.14.
  %.not = icmp eq i32 %5, 13
  %74 = zext i32 %6 to i64
  br i1 %.not, label %concatenate.pivot.13.13, label %concatenate.pivot.12.12

concatenate.pivot.12.12:                          ; preds = %concatenate.pivot.13.
  %75 = zext i32 %3 to i64
  %76 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg427, i64 0, i64 %74, i64 %75
  %77 = getelementptr inbounds float, ptr addrspace(1) %76, i64 48
  %78 = load float, ptr addrspace(1) %77, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.13.13:                          ; preds = %concatenate.pivot.13.
  %79 = zext i32 %3 to i64
  %80 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg325, i64 0, i64 %74, i64 %79
  %81 = getelementptr inbounds float, ptr addrspace(1) %80, i64 96
  %82 = load float, ptr addrspace(1) %81, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.15.:                            ; preds = %concatenate.pivot.14.
  %83 = icmp eq i32 %5, 14
  br i1 %83, label %concatenate.pivot.14.14, label %concatenate.pivot.16.

concatenate.pivot.14.14:                          ; preds = %concatenate.pivot.15.
  %84 = zext i32 %6 to i64
  %85 = zext i32 %3 to i64
  %86 = getelementptr [8192 x [304 x float]], ptr addrspace(1) %arg223, i64 0, i64 %84, i64 %85
  %87 = getelementptr inbounds float, ptr addrspace(1) %86, i64 48
  %88 = load float, ptr addrspace(1) %87, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.16.:                            ; preds = %concatenate.pivot.15.
  %89 = icmp ult i32 %5, 16
  br i1 %89, label %concatenate.pivot.15.15, label %concatenate.pivot.16.16

concatenate.pivot.15.15:                          ; preds = %concatenate.pivot.16.
  %90 = zext i32 %6 to i64
  %91 = zext i32 %3 to i64
  %92 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg121, i64 0, i64 %90, i64 %91
  %93 = load float, ptr addrspace(1) %92, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.pivot.16.16:                          ; preds = %concatenate.pivot.16.
  %94 = zext i32 %6 to i64
  %95 = zext i32 %3 to i64
  %96 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg019, i64 0, i64 %94, i64 %95
  %97 = getelementptr inbounds float, ptr addrspace(1) %96, i64 96
  %98 = load float, ptr addrspace(1) %97, align 4, !invariant.load !267
  br label %concatenate.56.merge

concatenate.56.merge:                             ; preds = %concatenate.pivot.16.16, %concatenate.pivot.15.15, %concatenate.pivot.14.14, %concatenate.pivot.13.13, %concatenate.pivot.12.12, %concatenate.pivot.11.11, %concatenate.pivot.10.10, %concatenate.pivot.9.9, %concatenate.pivot.8.8, %concatenate.pivot.7.7, %concatenate.pivot.6.6, %concatenate.pivot.5.5, %concatenate.pivot.4.4, %concatenate.pivot.3.3, %concatenate.pivot.2.2, %concatenate.pivot.1.1, %concatenate.pivot.0.
  %99 = phi float [ %add.22, %concatenate.pivot.0. ], [ %22, %concatenate.pivot.1.1 ], [ %27, %concatenate.pivot.2.2 ], [ %31, %concatenate.pivot.3.3 ], [ %36, %concatenate.pivot.4.4 ], [ %40, %concatenate.pivot.5.5 ], [ %45, %concatenate.pivot.6.6 ], [ %49, %concatenate.pivot.7.7 ], [ %56, %concatenate.pivot.8.8 ], [ %60, %concatenate.pivot.9.9 ], [ %add.42, %concatenate.pivot.10.10 ], [ %72, %concatenate.pivot.11.11 ], [ %78, %concatenate.pivot.12.12 ], [ %82, %concatenate.pivot.13.13 ], [ %88, %concatenate.pivot.14.14 ], [ %93, %concatenate.pivot.15.15 ], [ %98, %concatenate.pivot.16.16 ]
  %100 = zext i32 %linear_index to i64
  %101 = getelementptr inbounds float, ptr addrspace(1) %arg1957, i64 %100
  store float %99, ptr addrspace(1) %101, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_552(ptr noalias nocapture readonly align 16 dereferenceable(196608) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(3342336) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(196608) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg4) local_unnamed_addr #6 {
entry:
  %arg422 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg320 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg218 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg116 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg014 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = zext i32 %linear_index to i64
  %4 = getelementptr [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg116, i64 0, i64 %3, i64 0, i64 0
  %5 = getelementptr inbounds float, ptr addrspace(1) %4, i64 90
  %6 = load <2 x float>, ptr addrspace(1) %5, align 8, !invariant.load !267
  %7 = extractelement <2 x float> %6, i32 0
  %8 = extractelement <2 x float> %6, i32 1
  %9 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr addrspace(1) %arg014, i64 0, i64 %3, i64 0, i64 0
  %10 = load <2 x float>, ptr addrspace(1) %9, align 8, !invariant.load !267
  %11 = extractelement <2 x float> %10, i32 0
  %12 = extractelement <2 x float> %10, i32 1
  %multiply.5 = fmul float %7, %11
  %multiply.5.1 = fmul float %8, %12
  %13 = getelementptr inbounds float, ptr addrspace(1) %4, i64 92
  %14 = load <2 x float>, ptr addrspace(1) %13, align 8, !invariant.load !267
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = getelementptr inbounds float, ptr addrspace(1) %9, i64 2
  %18 = load <2 x float>, ptr addrspace(1) %17, align 8, !invariant.load !267
  %19 = extractelement <2 x float> %18, i32 0
  %20 = extractelement <2 x float> %18, i32 1
  %multiply.5.2 = fmul float %15, %19
  %multiply.5.3 = fmul float %16, %20
  %21 = getelementptr inbounds float, ptr addrspace(1) %4, i64 94
  %22 = load <2 x float>, ptr addrspace(1) %21, align 8, !invariant.load !267
  %23 = extractelement <2 x float> %22, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = getelementptr inbounds float, ptr addrspace(1) %9, i64 4
  %26 = load <2 x float>, ptr addrspace(1) %25, align 8, !invariant.load !267
  %27 = extractelement <2 x float> %26, i32 0
  %28 = extractelement <2 x float> %26, i32 1
  %multiply.5.4 = fmul float %23, %27
  %multiply.5.5 = fmul float %24, %28
  %29 = getelementptr inbounds float, ptr addrspace(1) %4, i64 96
  %30 = load <2 x float>, ptr addrspace(1) %29, align 8, !invariant.load !267
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr addrspace(1) %arg218, i64 0, i64 %3, i64 0, i64 0
  %34 = load <2 x float>, ptr addrspace(1) %33, align 8, !invariant.load !267
  %35 = extractelement <2 x float> %34, i32 0
  %36 = extractelement <2 x float> %34, i32 1
  %multiply.14 = fmul float %31, %35
  %add.19.i = fadd float %multiply.14, 0.000000e+00
  %multiply.14.1 = fmul float %32, %36
  %add.19.i.1 = fadd float %add.19.i, %multiply.14.1
  %37 = getelementptr inbounds float, ptr addrspace(1) %4, i64 98
  %38 = load <2 x float>, ptr addrspace(1) %37, align 8, !invariant.load !267
  %39 = extractelement <2 x float> %38, i32 0
  %40 = extractelement <2 x float> %38, i32 1
  %41 = getelementptr inbounds float, ptr addrspace(1) %33, i64 2
  %42 = load <2 x float>, ptr addrspace(1) %41, align 8, !invariant.load !267
  %43 = extractelement <2 x float> %42, i32 0
  %44 = extractelement <2 x float> %42, i32 1
  %multiply.14.2 = fmul float %39, %43
  %add.19.i.2 = fadd float %add.19.i.1, %multiply.14.2
  %multiply.14.3 = fmul float %40, %44
  %add.19.i.3 = fadd float %add.19.i.2, %multiply.14.3
  %45 = getelementptr inbounds float, ptr addrspace(1) %4, i64 100
  %46 = load <2 x float>, ptr addrspace(1) %45, align 8, !invariant.load !267
  %47 = extractelement <2 x float> %46, i32 0
  %48 = extractelement <2 x float> %46, i32 1
  %49 = getelementptr inbounds float, ptr addrspace(1) %33, i64 4
  %50 = load <2 x float>, ptr addrspace(1) %49, align 8, !invariant.load !267
  %51 = extractelement <2 x float> %50, i32 0
  %52 = extractelement <2 x float> %50, i32 1
  %multiply.14.4 = fmul float %47, %51
  %add.19.i.4 = fadd float %add.19.i.3, %multiply.14.4
  %multiply.14.5 = fmul float %48, %52
  %add.19.i.5 = fadd float %add.19.i.4, %multiply.14.5
  %add.11.i = fadd float %multiply.5, 0.000000e+00
  %add.11.i.1 = fadd float %add.11.i, %multiply.5.1
  %add.11.i.2 = fadd float %add.11.i.1, %multiply.5.2
  %add.11.i.3 = fadd float %add.11.i.2, %multiply.5.3
  %add.11.i.4 = fadd float %add.11.i.3, %multiply.5.4
  %add.11.i.5 = fadd float %add.11.i.4, %multiply.5.5
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg320, i64 %3
  store float %add.11.i.5, ptr addrspace(1) %53, align 4
  %54 = getelementptr inbounds float, ptr addrspace(1) %arg422, i64 %3
  store float %add.19.i.5, ptr addrspace(1) %54, align 4
  ret void
}

; Function Attrs: nounwind
define void @fusion_15(ptr noalias nocapture readonly align 16 dereferenceable(196608) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(3342336) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(196608) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(1536) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(196608) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(1536) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(196608) %arg8) local_unnamed_addr #0 {
entry:
  %arg8110 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7108 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6106 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5104 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4102 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3100 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg298 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg196 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg094 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !304
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y66 = lshr i32 %1, 5
  %2 = mul i32 %0, 768
  %3 = add nuw nsw i32 %thread_id.y66, -32
  %4 = mul nuw nsw i32 %thread_id.y66, 6
  %5 = add i32 %2, %4
  %6 = add i32 %5, %thread_id.x
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg094, i64 %8
  %scevgep118 = getelementptr i8, ptr addrspace(1) %arg3100, i64 %8
  %scevgep121 = getelementptr i8, ptr addrspace(1) %arg6106, i64 %8
  %scevgep124 = getelementptr i8, ptr addrspace(1) %arg8110, i64 %8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true62
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv125 = phi ptr addrspace(1) [ %scevgep124, %entry ], [ %scevgep126, %x_in_tile-after ]
  %lsr.iv122 = phi ptr addrspace(1) [ %scevgep121, %entry ], [ %scevgep123, %x_in_tile-after ]
  %lsr.iv119 = phi ptr addrspace(1) [ %scevgep118, %entry ], [ %scevgep120, %x_in_tile-after ]
  %lsr.iv116 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep117, %x_in_tile-after ]
  %lsr.iv114 = phi i32 [ %6, %entry ], [ %lsr.iv.next115, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %3, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result2.087 = phi float [ -0.000000e+00, %entry ], [ %partial_reduction_result2.1, %x_in_tile-after ]
  %partial_reduction_result.086 = phi float [ -0.000000e+00, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %9 = icmp ult i32 %thread_id.x, 6
  br i1 %9, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.15.i84, %x_in_tile-true ], [ %partial_reduction_result.086, %y_in_tile.loop_body ]
  %partial_reduction_result2.1 = phi float [ %add.25.i85, %x_in_tile-true ], [ %partial_reduction_result2.087, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %lsr.iv.next115 = add nuw nsw i32 %lsr.iv114, 192
  %scevgep117 = getelementptr i8, ptr addrspace(1) %lsr.iv116, i64 768
  %scevgep120 = getelementptr i8, ptr addrspace(1) %lsr.iv119, i64 768
  %scevgep123 = getelementptr i8, ptr addrspace(1) %lsr.iv122, i64 768
  %scevgep126 = getelementptr i8, ptr addrspace(1) %lsr.iv125, i64 768
  %10 = icmp ugt i32 %lsr.iv.next, 95
  br i1 %10, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %11 = zext i32 %thread_id.x to i64
  %12 = zext i32 %thread_id.y66 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i64 0, i64 0, i64 0, i64 %11, i64 %12
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i64 0, i64 0, i64 0, i64 %12, i64 %11
  %partial_reduction_result30 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %13 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 16, i32 31)
  %add.15.i = fadd float %partial_reduction_result30, %13
  %14 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i, i32 8, i32 31)
  %add.15.i76 = fadd float %add.15.i, %14
  %15 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i76, i32 4, i32 31)
  %add.15.i77 = fadd float %add.15.i76, %15
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i77, i32 2, i32 31)
  %add.15.i78 = fadd float %add.15.i77, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i78, i32 1, i32 31)
  %add.15.i79 = fadd float %add.15.i78, %17
  store float %add.15.i79, ptr addrspace(3) %shmem_transposed_addr, align 4
  %18 = icmp ult i32 %1, 192
  %19 = icmp eq i32 %thread_id.x, 0
  %20 = and i1 %18, %19
  br i1 %20, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address44 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i64 0, i64 0, i64 0, i64 %11, i64 %12
  store float %partial_reduction_result2.1, ptr addrspace(3) %shmem_output_address44, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr46 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i64 0, i64 0, i64 0, i64 %12, i64 %11
  %partial_reduction_result48 = load float, ptr addrspace(3) %shmem_transposed_addr46, align 4
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 16, i32 31)
  %add.25.i = fadd float %partial_reduction_result48, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i, i32 8, i32 31)
  %add.25.i80 = fadd float %add.25.i, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i80, i32 4, i32 31)
  %add.25.i81 = fadd float %add.25.i80, %23
  %24 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i81, i32 2, i32 31)
  %add.25.i82 = fadd float %add.25.i81, %24
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i82, i32 1, i32 31)
  %add.25.i83 = fadd float %add.25.i82, %25
  store float %add.25.i83, ptr addrspace(3) %shmem_transposed_addr46, align 4
  br i1 %20, label %reduction_write_output-true62, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %.frozen = freeze i32 %lsr.iv114
  %26 = udiv i32 %.frozen, 6
  %27 = mul i32 %26, 6
  %.decomposed = sub i32 %.frozen, %27
  %28 = and i32 %26, 127
  %29 = udiv i32 %lsr.iv114, 768
  %30 = shl nuw nsw i32 %29, 7
  %31 = or i32 %28, %30
  %32 = zext i32 %31 to i64
  %33 = zext i32 %.decomposed to i64
  %34 = getelementptr [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg298, i64 0, i64 %32, i64 0, i64 %33
  %Arg_2.3112 = getelementptr inbounds float, ptr addrspace(1) %34, i64 96
  %Arg_2.36 = load float, ptr addrspace(1) %Arg_2.3112, align 4, !invariant.load !267
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg196, i64 0, i64 %32
  %Arg_1.27 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %subtract.8 = fsub float %Arg_2.36, %Arg_1.27
  %Arg_0.18 = load float, ptr addrspace(1) %lsr.iv116, align 4, !invariant.load !267
  %multiply.9 = fmul float %subtract.8, %Arg_0.18
  %add.15.i84 = fadd float %partial_reduction_result.086, %multiply.9
  %Arg_2.39113 = getelementptr inbounds float, ptr addrspace(1) %34, i64 90
  %Arg_2.310 = load float, ptr addrspace(1) %Arg_2.39113, align 4, !invariant.load !267
  %Arg_4.5 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg4102, i64 0, i64 %32
  %Arg_4.511 = load float, ptr addrspace(1) %Arg_4.5, align 4, !invariant.load !267
  %subtract.19 = fsub float %Arg_2.310, %Arg_4.511
  %Arg_3.412 = load float, ptr addrspace(1) %lsr.iv119, align 4, !invariant.load !267
  %multiply.20 = fmul float %subtract.19, %Arg_3.412
  %add.25.i85 = fadd float %partial_reduction_result2.087, %multiply.20
  store float %multiply.9, ptr addrspace(1) %lsr.iv122, align 4
  store float %multiply.20, ptr addrspace(1) %lsr.iv125, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %35 = mul nuw nsw i32 %0, 6
  %36 = add nuw nsw i32 %35, %thread_id.y66
  %.frozen90 = freeze i32 %36
  %37 = udiv i32 %.frozen90, 6
  %38 = mul i32 %37, 6
  %.decomposed91 = sub i32 %.frozen90, %38
  %39 = zext i32 %37 to i64
  %40 = zext i32 %.decomposed91 to i64
  %output_element_address = getelementptr inbounds [64 x [6 x float]], ptr addrspace(1) %arg5104, i64 0, i64 %39, i64 %40
  store float %add.15.i79, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true62:                    ; preds = %reduction_write_output-after
  %41 = mul nuw nsw i32 %0, 6
  %42 = add nuw nsw i32 %41, %thread_id.y66
  %.frozen92 = freeze i32 %42
  %43 = udiv i32 %.frozen92, 6
  %44 = mul i32 %43, 6
  %.decomposed93 = sub i32 %.frozen92, %44
  %45 = zext i32 %43 to i64
  %46 = zext i32 %.decomposed93 to i64
  %output_element_address64 = getelementptr inbounds [64 x [6 x float]], ptr addrspace(1) %arg7108, i64 0, i64 %45, i64 %46
  store float %add.25.i83, ptr addrspace(1) %output_element_address64, align 4
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind memory(argmem: readwrite)
define void @fusion_16(ptr noalias nocapture readonly align 16 dereferenceable(24) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(1536) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(24) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(1536) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(24) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(24) %arg6) local_unnamed_addr #7 {
entry:
  %arg627 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg525 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg423 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg321 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg219 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg117 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg015 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg015, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg219, align 16, !invariant.load !267
  %5 = shl nuw nsw i64 %1, 2
  %scevgep58 = getelementptr i8, ptr addrspace(1) %arg117, i64 %5
  br label %reduce.12.inner.loop_body.reduction_dim.0

reduce.12.inner.loop_body.reduction_dim.0:        ; preds = %reduce.12.inner.loop_body.reduction_dim.0, %entry
  %lsr.iv55 = phi i64 [ %lsr.iv.next56, %reduce.12.inner.loop_body.reduction_dim.0 ], [ 96, %entry ]
  %accumulator_0.011 = phi float [ -0.000000e+00, %entry ], [ %add.11.i.7, %reduce.12.inner.loop_body.reduction_dim.0 ]
  %scevgep60 = getelementptr i8, ptr addrspace(1) %scevgep58, i64 %lsr.iv55
  %scevgep61 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 -96
  %6 = load float, ptr addrspace(1) %scevgep61, align 4, !invariant.load !267
  %add.11.i = fadd float %accumulator_0.011, %6
  %scevgep64 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 -72
  %7 = load float, ptr addrspace(1) %scevgep64, align 4, !invariant.load !267
  %add.11.i.1 = fadd float %add.11.i, %7
  %scevgep66 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 -48
  %8 = load float, ptr addrspace(1) %scevgep66, align 4, !invariant.load !267
  %add.11.i.2 = fadd float %add.11.i.1, %8
  %scevgep67 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 -24
  %9 = load float, ptr addrspace(1) %scevgep67, align 4, !invariant.load !267
  %add.11.i.3 = fadd float %add.11.i.2, %9
  %10 = load float, ptr addrspace(1) %scevgep60, align 4, !invariant.load !267
  %add.11.i.4 = fadd float %add.11.i.3, %10
  %scevgep70 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 24
  %11 = load float, ptr addrspace(1) %scevgep70, align 4, !invariant.load !267
  %add.11.i.5 = fadd float %add.11.i.4, %11
  %scevgep69 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 48
  %12 = load float, ptr addrspace(1) %scevgep69, align 4, !invariant.load !267
  %add.11.i.6 = fadd float %add.11.i.5, %12
  %scevgep63 = getelementptr i8, ptr addrspace(1) %scevgep60, i64 72
  %13 = load float, ptr addrspace(1) %scevgep63, align 4, !invariant.load !267
  %add.11.i.7 = fadd float %add.11.i.6, %13
  %lsr.iv.next56 = add nuw nsw i64 %lsr.iv55, 192
  %tmp57 = trunc i64 %lsr.iv.next56 to i32
  %exitcond.7 = icmp eq i32 %tmp57, 1632
  br i1 %exitcond.7, label %reduce.12.inner.loop_exit.reduction_dim.0, label %reduce.12.inner.loop_body.reduction_dim.0

reduce.12.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.12.inner.loop_body.reduction_dim.0
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg321, i64 %1
  %15 = load float, ptr addrspace(1) %14, align 4, !invariant.load !267
  %scevgep = getelementptr i8, ptr addrspace(1) %arg423, i64 %5
  br label %reduce.19.inner.loop_body.reduction_dim.0

reduce.19.inner.loop_body.reduction_dim.0:        ; preds = %reduce.19.inner.loop_body.reduction_dim.0, %reduce.12.inner.loop_exit.reduction_dim.0
  %lsr.iv = phi i64 [ %lsr.iv.next, %reduce.19.inner.loop_body.reduction_dim.0 ], [ 96, %reduce.12.inner.loop_exit.reduction_dim.0 ]
  %accumulator_02.013 = phi float [ -0.000000e+00, %reduce.12.inner.loop_exit.reduction_dim.0 ], [ %add.18.i.7, %reduce.19.inner.loop_body.reduction_dim.0 ]
  %scevgep44 = getelementptr i8, ptr addrspace(1) %scevgep, i64 %lsr.iv
  %scevgep45 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 -96
  %16 = load float, ptr addrspace(1) %scevgep45, align 4, !invariant.load !267
  %add.18.i = fadd float %accumulator_02.013, %16
  %scevgep48 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 -72
  %17 = load float, ptr addrspace(1) %scevgep48, align 4, !invariant.load !267
  %add.18.i.1 = fadd float %add.18.i, %17
  %scevgep50 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 -48
  %18 = load float, ptr addrspace(1) %scevgep50, align 4, !invariant.load !267
  %add.18.i.2 = fadd float %add.18.i.1, %18
  %scevgep51 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 -24
  %19 = load float, ptr addrspace(1) %scevgep51, align 4, !invariant.load !267
  %add.18.i.3 = fadd float %add.18.i.2, %19
  %20 = load float, ptr addrspace(1) %scevgep44, align 4, !invariant.load !267
  %add.18.i.4 = fadd float %add.18.i.3, %20
  %scevgep54 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 24
  %21 = load float, ptr addrspace(1) %scevgep54, align 4, !invariant.load !267
  %add.18.i.5 = fadd float %add.18.i.4, %21
  %scevgep53 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 48
  %22 = load float, ptr addrspace(1) %scevgep53, align 4, !invariant.load !267
  %add.18.i.6 = fadd float %add.18.i.5, %22
  %scevgep47 = getelementptr i8, ptr addrspace(1) %scevgep44, i64 72
  %23 = load float, ptr addrspace(1) %scevgep47, align 4, !invariant.load !267
  %add.18.i.7 = fadd float %add.18.i.6, %23
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 192
  %tmp = trunc i64 %lsr.iv.next to i32
  %exitcond14.7 = icmp eq i32 %tmp, 1632
  br i1 %exitcond14.7, label %reduce.19.inner.loop_exit.reduction_dim.0, label %reduce.19.inner.loop_body.reduction_dim.0

reduce.19.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.19.inner.loop_body.reduction_dim.0
  %multiply.13 = fmul float %4, %add.11.i.7
  %subtract.14 = fsub float %3, %multiply.13
  %multiply.20 = fmul float %4, %add.18.i.7
  %subtract.21 = fsub float %15, %multiply.20
  %24 = getelementptr inbounds float, ptr addrspace(1) %arg525, i64 %1
  store float %subtract.14, ptr addrspace(1) %24, align 4
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg627, i64 %1
  store float %subtract.21, ptr addrspace(1) %25, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_6(ptr noalias nocapture readonly align 16 dereferenceable(1344) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(37248) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(1344) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(37248) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(1344) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(1344) %arg6) local_unnamed_addr #6 {
entry:
  %arg615 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg513 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg411 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !311
  %.lhs.trunc = trunc i32 %0 to i16
  %1 = udiv i16 %.lhs.trunc, 6
  %2 = mul i16 %1, 6
  %.decomposed = sub i16 %.lhs.trunc, %2
  %3 = zext i32 %0 to i64
  %4 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %3
  %5 = load float, ptr addrspace(1) %4, align 4, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %7 = zext i16 %1 to i64
  %8 = zext i16 %.decomposed to i64
  %9 = getelementptr inbounds [1552 x [6 x float]], ptr addrspace(1) %arg15, i64 0, i64 %7, i64 %8
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %multiply.8 = fmul float %6, %10
  %subtract.9 = fsub float %5, %multiply.8
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %3
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds [1552 x [6 x float]], ptr addrspace(1) %arg411, i64 0, i64 %7, i64 %8
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.11 = fmul float %6, %14
  %subtract.12 = fsub float %12, %multiply.11
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg513, i64 %3
  store float %subtract.9, ptr addrspace(1) %15, align 4
  %16 = getelementptr inbounds float, ptr addrspace(1) %arg615, i64 %3
  store float %subtract.12, ptr addrspace(1) %16, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_9(ptr noalias nocapture readonly align 16 dereferenceable(35904) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(37248) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(35904) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(37248) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(35904) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(35904) %arg6) local_unnamed_addr #6 {
entry:
  %arg615 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg513 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg411 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !312
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 8976
  br i1 %3, label %fusion_9.in_bounds-true, label %fusion_9.in_bounds-after

fusion_9.in_bounds-after:                         ; preds = %fusion_9.in_bounds-true, %entry
  ret void

fusion_9.in_bounds-true:                          ; preds = %entry
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %4 = udiv i16 %.lhs.trunc.frozen, 6
  %5 = mul i16 %4, 6
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %6 = zext i32 %linear_index to i64
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %6
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %10 = zext i16 %.decomposed to i64
  %11 = zext i16 %4 to i64
  %12 = getelementptr [1552 x [6 x float]], ptr addrspace(1) %arg15, i64 0, i64 %11, i64 %10
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 336
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.8 = fmul float %9, %14
  %subtract.9 = fsub float %8, %multiply.8
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %6
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr [1552 x [6 x float]], ptr addrspace(1) %arg411, i64 0, i64 %11, i64 %10
  %18 = getelementptr inbounds float, ptr addrspace(1) %17, i64 336
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %multiply.11 = fmul float %9, %19
  %subtract.12 = fsub float %16, %multiply.11
  %20 = getelementptr inbounds float, ptr addrspace(1) %arg513, i64 %6
  store float %subtract.9, ptr addrspace(1) %20, align 4
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg615, i64 %6
  store float %subtract.12, ptr addrspace(1) %21, align 4
  br label %fusion_9.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_548(ptr noalias nocapture readonly align 16 dereferenceable(2949120) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(3342336) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(491520) %arg2) local_unnamed_addr #6 {
entry:
  %arg260 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg158 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg056 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !286
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 15
  %5 = mul i32 %4, 15
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index1.frozen = freeze i32 %linear_index1
  %6 = udiv i32 %linear_index1.frozen, 15
  %7 = mul i32 %6, 15
  %.decomposed53 = sub i32 %linear_index1.frozen, %7
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index2.frozen = freeze i32 %linear_index2
  %8 = udiv i32 %linear_index2.frozen, 15
  %9 = mul i32 %8, 15
  %.decomposed54 = sub i32 %linear_index2.frozen, %9
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index3.frozen = freeze i32 %linear_index3
  %10 = udiv i32 %linear_index3.frozen, 15
  %11 = mul i32 %10, 15
  %.decomposed55 = sub i32 %linear_index3.frozen, %11
  %12 = zext i32 %4 to i64
  %13 = zext i32 %.decomposed to i64
  %14 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg158, i64 0, i64 %12, i64 %13, i64 0
  %15 = load <2 x float>, ptr addrspace(1) %14, align 8, !invariant.load !267
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %18 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr addrspace(1) %arg056, i64 0, i64 %12, i64 %13, i64 0
  %19 = load <2 x float>, ptr addrspace(1) %18, align 8, !invariant.load !267
  %20 = extractelement <2 x float> %19, i32 0
  %21 = extractelement <2 x float> %19, i32 1
  %multiply.4 = fmul float %16, %20
  %add.9.i = fadd float %multiply.4, 0.000000e+00
  %multiply.4.1 = fmul float %17, %21
  %add.9.i.1 = fadd float %add.9.i, %multiply.4.1
  %22 = getelementptr inbounds float, ptr addrspace(1) %14, i64 2
  %23 = load <2 x float>, ptr addrspace(1) %22, align 8, !invariant.load !267
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = getelementptr inbounds float, ptr addrspace(1) %18, i64 2
  %27 = load <2 x float>, ptr addrspace(1) %26, align 8, !invariant.load !267
  %28 = extractelement <2 x float> %27, i32 0
  %29 = extractelement <2 x float> %27, i32 1
  %multiply.4.2 = fmul float %24, %28
  %add.9.i.2 = fadd float %add.9.i.1, %multiply.4.2
  %multiply.4.3 = fmul float %25, %29
  %add.9.i.3 = fadd float %add.9.i.2, %multiply.4.3
  %30 = getelementptr inbounds float, ptr addrspace(1) %14, i64 4
  %31 = load <2 x float>, ptr addrspace(1) %30, align 8, !invariant.load !267
  %32 = extractelement <2 x float> %31, i32 0
  %33 = extractelement <2 x float> %31, i32 1
  %34 = getelementptr inbounds float, ptr addrspace(1) %18, i64 4
  %35 = load <2 x float>, ptr addrspace(1) %34, align 8, !invariant.load !267
  %36 = extractelement <2 x float> %35, i32 0
  %37 = extractelement <2 x float> %35, i32 1
  %multiply.4.4 = fmul float %32, %36
  %add.9.i.4 = fadd float %add.9.i.3, %multiply.4.4
  %multiply.4.5 = fmul float %33, %37
  %add.9.i.5 = fadd float %add.9.i.4, %multiply.4.5
  %38 = zext i32 %linear_index_base to i64
  %39 = getelementptr float, ptr addrspace(1) %arg260, i64 %38
  %40 = zext i32 %6 to i64
  %41 = zext i32 %.decomposed53 to i64
  %42 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg158, i64 0, i64 %40, i64 %41, i64 0
  %43 = load <2 x float>, ptr addrspace(1) %42, align 8, !invariant.load !267
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr addrspace(1) %arg056, i64 0, i64 %40, i64 %41, i64 0
  %47 = load <2 x float>, ptr addrspace(1) %46, align 8, !invariant.load !267
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %multiply.410 = fmul float %44, %48
  %add.9.i42 = fadd float %multiply.410, 0.000000e+00
  %multiply.410.1 = fmul float %45, %49
  %add.9.i42.1 = fadd float %add.9.i42, %multiply.410.1
  %50 = getelementptr inbounds float, ptr addrspace(1) %42, i64 2
  %51 = load <2 x float>, ptr addrspace(1) %50, align 8, !invariant.load !267
  %52 = extractelement <2 x float> %51, i32 0
  %53 = extractelement <2 x float> %51, i32 1
  %54 = getelementptr inbounds float, ptr addrspace(1) %46, i64 2
  %55 = load <2 x float>, ptr addrspace(1) %54, align 8, !invariant.load !267
  %56 = extractelement <2 x float> %55, i32 0
  %57 = extractelement <2 x float> %55, i32 1
  %multiply.410.2 = fmul float %52, %56
  %add.9.i42.2 = fadd float %add.9.i42.1, %multiply.410.2
  %multiply.410.3 = fmul float %53, %57
  %add.9.i42.3 = fadd float %add.9.i42.2, %multiply.410.3
  %58 = getelementptr inbounds float, ptr addrspace(1) %42, i64 4
  %59 = load <2 x float>, ptr addrspace(1) %58, align 8, !invariant.load !267
  %60 = extractelement <2 x float> %59, i32 0
  %61 = extractelement <2 x float> %59, i32 1
  %62 = getelementptr inbounds float, ptr addrspace(1) %46, i64 4
  %63 = load <2 x float>, ptr addrspace(1) %62, align 8, !invariant.load !267
  %64 = extractelement <2 x float> %63, i32 0
  %65 = extractelement <2 x float> %63, i32 1
  %multiply.410.4 = fmul float %60, %64
  %add.9.i42.4 = fadd float %add.9.i42.3, %multiply.410.4
  %multiply.410.5 = fmul float %61, %65
  %add.9.i42.5 = fadd float %add.9.i42.4, %multiply.410.5
  %66 = zext i32 %8 to i64
  %67 = zext i32 %.decomposed54 to i64
  %68 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg158, i64 0, i64 %66, i64 %67, i64 0
  %69 = load <2 x float>, ptr addrspace(1) %68, align 8, !invariant.load !267
  %70 = extractelement <2 x float> %69, i32 0
  %71 = extractelement <2 x float> %69, i32 1
  %72 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr addrspace(1) %arg056, i64 0, i64 %66, i64 %67, i64 0
  %73 = load <2 x float>, ptr addrspace(1) %72, align 8, !invariant.load !267
  %74 = extractelement <2 x float> %73, i32 0
  %75 = extractelement <2 x float> %73, i32 1
  %multiply.422 = fmul float %70, %74
  %add.9.i43 = fadd float %multiply.422, 0.000000e+00
  %multiply.422.1 = fmul float %71, %75
  %add.9.i43.1 = fadd float %add.9.i43, %multiply.422.1
  %76 = getelementptr inbounds float, ptr addrspace(1) %68, i64 2
  %77 = load <2 x float>, ptr addrspace(1) %76, align 8, !invariant.load !267
  %78 = extractelement <2 x float> %77, i32 0
  %79 = extractelement <2 x float> %77, i32 1
  %80 = getelementptr inbounds float, ptr addrspace(1) %72, i64 2
  %81 = load <2 x float>, ptr addrspace(1) %80, align 8, !invariant.load !267
  %82 = extractelement <2 x float> %81, i32 0
  %83 = extractelement <2 x float> %81, i32 1
  %multiply.422.2 = fmul float %78, %82
  %add.9.i43.2 = fadd float %add.9.i43.1, %multiply.422.2
  %multiply.422.3 = fmul float %79, %83
  %add.9.i43.3 = fadd float %add.9.i43.2, %multiply.422.3
  %84 = getelementptr inbounds float, ptr addrspace(1) %68, i64 4
  %85 = load <2 x float>, ptr addrspace(1) %84, align 8, !invariant.load !267
  %86 = extractelement <2 x float> %85, i32 0
  %87 = extractelement <2 x float> %85, i32 1
  %88 = getelementptr inbounds float, ptr addrspace(1) %72, i64 4
  %89 = load <2 x float>, ptr addrspace(1) %88, align 8, !invariant.load !267
  %90 = extractelement <2 x float> %89, i32 0
  %91 = extractelement <2 x float> %89, i32 1
  %multiply.422.4 = fmul float %86, %90
  %add.9.i43.4 = fadd float %add.9.i43.3, %multiply.422.4
  %multiply.422.5 = fmul float %87, %91
  %add.9.i43.5 = fadd float %add.9.i43.4, %multiply.422.5
  %92 = zext i32 %10 to i64
  %93 = zext i32 %.decomposed55 to i64
  %94 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg158, i64 0, i64 %92, i64 %93, i64 0
  %95 = load <2 x float>, ptr addrspace(1) %94, align 8, !invariant.load !267
  %96 = extractelement <2 x float> %95, i32 0
  %97 = extractelement <2 x float> %95, i32 1
  %98 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr addrspace(1) %arg056, i64 0, i64 %92, i64 %93, i64 0
  %99 = load <2 x float>, ptr addrspace(1) %98, align 8, !invariant.load !267
  %100 = extractelement <2 x float> %99, i32 0
  %101 = extractelement <2 x float> %99, i32 1
  %multiply.434 = fmul float %96, %100
  %add.9.i44 = fadd float %multiply.434, 0.000000e+00
  %multiply.434.1 = fmul float %97, %101
  %add.9.i44.1 = fadd float %add.9.i44, %multiply.434.1
  %102 = getelementptr inbounds float, ptr addrspace(1) %94, i64 2
  %103 = load <2 x float>, ptr addrspace(1) %102, align 8, !invariant.load !267
  %104 = extractelement <2 x float> %103, i32 0
  %105 = extractelement <2 x float> %103, i32 1
  %106 = getelementptr inbounds float, ptr addrspace(1) %98, i64 2
  %107 = load <2 x float>, ptr addrspace(1) %106, align 8, !invariant.load !267
  %108 = extractelement <2 x float> %107, i32 0
  %109 = extractelement <2 x float> %107, i32 1
  %multiply.434.2 = fmul float %104, %108
  %add.9.i44.2 = fadd float %add.9.i44.1, %multiply.434.2
  %multiply.434.3 = fmul float %105, %109
  %add.9.i44.3 = fadd float %add.9.i44.2, %multiply.434.3
  %110 = getelementptr inbounds float, ptr addrspace(1) %94, i64 4
  %111 = load <2 x float>, ptr addrspace(1) %110, align 8, !invariant.load !267
  %112 = extractelement <2 x float> %111, i32 0
  %113 = extractelement <2 x float> %111, i32 1
  %114 = getelementptr inbounds float, ptr addrspace(1) %98, i64 4
  %115 = load <2 x float>, ptr addrspace(1) %114, align 8, !invariant.load !267
  %116 = extractelement <2 x float> %115, i32 0
  %117 = extractelement <2 x float> %115, i32 1
  %multiply.434.4 = fmul float %112, %116
  %add.9.i44.4 = fadd float %add.9.i44.3, %multiply.434.4
  %multiply.434.5 = fmul float %113, %117
  %add.9.i44.5 = fadd float %add.9.i44.4, %multiply.434.5
  %118 = insertelement <4 x float> poison, float %add.9.i.5, i32 0
  %119 = insertelement <4 x float> %118, float %add.9.i42.5, i32 1
  %120 = insertelement <4 x float> %119, float %add.9.i43.5, i32 2
  %121 = insertelement <4 x float> %120, float %add.9.i44.5, i32 3
  store <4 x float> %121, ptr addrspace(1) %39, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_19(ptr noalias nocapture readonly align 16 dereferenceable(2949120) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(491520) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(3342336) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(23040) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(2949120) %arg4) local_unnamed_addr #0 {
entry:
  %arg453 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg351 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg249 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg147 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg045 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !307
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y28 = lshr i32 %1, 5
  %.lhs.trunc = trunc i32 %0 to i8
  %2 = udiv i8 %.lhs.trunc, 3
  %3 = mul i8 %2, 3
  %.decomposed = sub i8 %.lhs.trunc, %3
  %.zext39 = zext i8 %2 to i32
  %4 = icmp eq i8 %.decomposed, 2
  %tile_bound1 = select i1 %4, i32 26, i32 32
  %5 = shl nuw nsw i8 %.decomposed, 5
  %tile_origin.2 = zext i8 %5 to i32
  %6 = mul i32 %.zext39, 11520
  %7 = add nuw nsw i32 %thread_id.y28, -32
  %8 = mul nuw nsw i32 %thread_id.y28, 90
  %9 = add i32 %6, %8
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %thread_id.x
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg045, i64 %13
  %scevgep59 = getelementptr i8, ptr addrspace(1) %arg453, i64 %13
  %14 = udiv i32 %11, 90
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv62 = phi i32 [ %14, %entry ], [ %lsr.iv.next63, %x_in_tile-after ]
  %lsr.iv60 = phi ptr addrspace(1) [ %scevgep59, %entry ], [ %scevgep61, %x_in_tile-after ]
  %lsr.iv57 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep58, %x_in_tile-after ]
  %lsr.iv55 = phi i32 [ %11, %entry ], [ %lsr.iv.next56, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %7, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.040 = phi float [ -0.000000e+00, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %15 = icmp ult i32 %thread_id.x, %tile_bound1
  br i1 %15, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.13.i37, %x_in_tile-true ], [ %partial_reduction_result.040, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %lsr.iv.next56 = add nuw nsw i32 %lsr.iv55, 2880
  %scevgep58 = getelementptr i8, ptr addrspace(1) %lsr.iv57, i64 11520
  %scevgep61 = getelementptr i8, ptr addrspace(1) %lsr.iv60, i64 11520
  %lsr.iv.next63 = add nuw nsw i32 %lsr.iv62, 32
  %16 = icmp ugt i32 %lsr.iv.next, 95
  br i1 %16, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %17 = zext i32 %thread_id.x to i64
  %18 = zext i32 %thread_id.y28 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i64 0, i64 0, i64 0, i64 %17, i64 %18
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i64 0, i64 0, i64 0, i64 %18, i64 %17
  %partial_reduction_result14 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 16, i32 31)
  %add.13.i = fadd float %partial_reduction_result14, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i, i32 8, i32 31)
  %add.13.i33 = fadd float %add.13.i, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i33, i32 4, i32 31)
  %add.13.i34 = fadd float %add.13.i33, %21
  %22 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i34, i32 2, i32 31)
  %add.13.i35 = fadd float %add.13.i34, %22
  %23 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.13.i35, i32 1, i32 31)
  %add.13.i36 = fadd float %add.13.i35, %23
  store float %add.13.i36, ptr addrspace(3) %shmem_transposed_addr, align 4
  %24 = icmp ult i32 %thread_id.y28, %tile_bound1
  %25 = icmp eq i32 %thread_id.x, 0
  %26 = and i1 %25, %24
  br i1 %26, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %.frozen = freeze i32 %lsr.iv55
  %27 = udiv i32 %.frozen, 6
  %28 = mul i32 %27, 6
  %.decomposed42 = sub i32 %.frozen, %28
  %29 = urem i32 %27, 15
  %30 = and i32 %lsr.iv62, 127
  %31 = udiv i32 %lsr.iv55, 11520
  %32 = shl nuw nsw i32 %31, 7
  %33 = or i32 %30, %32
  %34 = zext i32 %33 to i64
  %35 = zext i32 %29 to i64
  %36 = zext i32 %.decomposed42 to i64
  %Arg_2.3 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr addrspace(1) %arg249, i64 0, i64 %34, i64 %35, i64 %36
  %Arg_2.33 = load float, ptr addrspace(1) %Arg_2.3, align 4, !invariant.load !267
  %37 = zext i32 %27 to i64
  %Arg_1.2 = getelementptr inbounds float, ptr addrspace(1) %arg147, i64 %37
  %Arg_1.24 = load float, ptr addrspace(1) %Arg_1.2, align 4, !invariant.load !267
  %subtract.6 = fsub float %Arg_2.33, %Arg_1.24
  %Arg_0.15 = load float, ptr addrspace(1) %lsr.iv57, align 4, !invariant.load !267
  %multiply.7 = fmul float %subtract.6, %Arg_0.15
  %add.13.i37 = fadd float %partial_reduction_result.040, %multiply.7
  store float %multiply.7, ptr addrspace(1) %lsr.iv60, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %38 = or i32 %thread_id.y28, %tile_origin.2
  %39 = mul nuw nsw i32 %.zext39, 90
  %40 = add nuw nsw i32 %38, %39
  %.frozen43 = freeze i32 %40
  %41 = udiv i32 %.frozen43, 6
  %42 = mul i32 %41, 6
  %.decomposed44 = sub i32 %.frozen43, %42
  %43 = urem i32 %41, 15
  %44 = udiv i32 %40, 90
  %45 = zext i32 %44 to i64
  %46 = zext i32 %43 to i64
  %47 = zext i32 %.decomposed44 to i64
  %output_element_address = getelementptr inbounds [64 x [15 x [6 x float]]], ptr addrspace(1) %arg351, i64 0, i64 %45, i64 %46, i64 %47
  store float %add.13.i36, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @reduce(ptr noalias nocapture readonly align 128 dereferenceable(23040) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(360) %arg2) local_unnamed_addr #0 {
entry:
  %arg234 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg132 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg030 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !313
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y18 = lshr i32 %1, 5
  %2 = icmp eq i32 %0, 2
  %tile_bound1 = select i1 %2, i32 26, i32 32
  %tile_origin.2 = shl i32 %0, 5
  %Arg_1.2 = load float, ptr addrspace(1) %arg132, align 128, !invariant.load !267
  %3 = add nuw nsw i32 %thread_id.y18, -32
  %4 = mul nuw nsw i32 %thread_id.y18, 90
  %5 = add i32 %4, %tile_origin.2
  %6 = add i32 %5, %thread_id.x
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg030, i64 %8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv36 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep37, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %3, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.028 = phi float [ %Arg_1.2, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %9 = icmp ult i32 %thread_id.x, %tile_bound1
  br i1 %9, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.6.i27, %x_in_tile-true ], [ %partial_reduction_result.028, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep37 = getelementptr i8, ptr addrspace(1) %lsr.iv36, i64 11520
  %10 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %10, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %11 = zext i32 %thread_id.x to i64
  %12 = zext i32 %thread_id.y18 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i64 0, i64 0, i64 0, i64 %11, i64 %12
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i64 0, i64 0, i64 0, i64 %12, i64 %11
  %partial_reduction_result4 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %13 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  %add.6.i = fadd float %partial_reduction_result4, %13
  %14 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i, i32 8, i32 31)
  %add.6.i23 = fadd float %add.6.i, %14
  %15 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i23, i32 4, i32 31)
  %add.6.i24 = fadd float %add.6.i23, %15
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i24, i32 2, i32 31)
  %add.6.i25 = fadd float %add.6.i24, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i25, i32 1, i32 31)
  %add.6.i26 = fadd float %add.6.i25, %17
  store float %add.6.i26, ptr addrspace(3) %shmem_transposed_addr, align 4
  %18 = icmp ult i32 %thread_id.y18, %tile_bound1
  %19 = icmp eq i32 %thread_id.x, 0
  %20 = and i1 %19, %18
  br i1 %20, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %Arg_0.13 = load float, ptr addrspace(1) %lsr.iv36, align 4, !invariant.load !267
  %add.6.i27 = fadd float %partial_reduction_result.028, %Arg_0.13
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %21 = or i32 %tile_origin.2, %thread_id.y18
  %22 = udiv i32 %21, 6
  %23 = mul i32 %22, 6
  %.decomposed = sub i32 %21, %23
  %24 = zext i32 %22 to i64
  %25 = zext i32 %.decomposed to i64
  %output_element_address = getelementptr inbounds [15 x [6 x float]], ptr addrspace(1) %arg234, i64 0, i64 %24, i64 %25
  store float %add.6.i26, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_18(ptr noalias nocapture readonly align 16 dereferenceable(360) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(360) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(360) %arg3) local_unnamed_addr #6 {
entry:
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %multiply.5 = fmul float %4, %6
  %subtract.7 = fsub float %3, %multiply.5
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %1
  store float %subtract.7, ptr addrspace(1) %7, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_10(ptr noalias nocapture readonly align 16 dereferenceable(20160) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(558720) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(20160) %arg3) local_unnamed_addr #6 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !290
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 5040
  br i1 %3, label %fusion_10.in_bounds-true, label %fusion_10.in_bounds-after

fusion_10.in_bounds-after:                        ; preds = %fusion_10.in_bounds-true, %entry
  ret void

fusion_10.in_bounds-true:                         ; preds = %entry
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %4 = udiv i16 %.lhs.trunc.frozen, 90
  %5 = mul i16 %4, 90
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %6 = zext i32 %linear_index to i64
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %6
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %10 = zext i16 %4 to i64
  %11 = zext i16 %.decomposed to i64
  %12 = getelementptr inbounds [1552 x [90 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %11
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %multiply.6 = fmul float %9, %13
  %subtract.7 = fsub float %8, %multiply.6
  %14 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %6
  store float %subtract.7, ptr addrspace(1) %14, align 4
  br label %fusion_10.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_13(ptr noalias nocapture readonly align 16 dereferenceable(538560) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(558720) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(538560) %arg3) local_unnamed_addr #6 {
entry:
  %arg315 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg213 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg111 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg09 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !314
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = icmp ult i32 %linear_index_base, 134640
  br i1 %4, label %fusion_13.in_bounds-true, label %fusion_13.in_bounds-after

fusion_13.in_bounds-after:                        ; preds = %fusion_13.in_bounds-true, %entry
  ret void

fusion_13.in_bounds-true:                         ; preds = %entry
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index3.frozen = freeze i32 %linear_index3
  %5 = udiv i32 %linear_index3.frozen, 90
  %6 = mul i32 %5, 90
  %.decomposed = sub i32 %linear_index3.frozen, %6
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index2.frozen = freeze i32 %linear_index2
  %7 = udiv i32 %linear_index2.frozen, 90
  %8 = mul i32 %7, 90
  %.decomposed7 = sub i32 %linear_index2.frozen, %8
  %linear_index1 = or i32 %linear_index_base, 1
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %9 = udiv i32 %linear_index_base.frozen, 90
  %10 = urem i32 %linear_index1, 90
  %11 = mul i32 %9, 90
  %.decomposed8 = sub i32 %linear_index_base.frozen, %11
  %12 = zext i32 %linear_index_base to i64
  %13 = getelementptr float, ptr addrspace(1) %arg09, i64 %12
  %14 = load <4 x float>, ptr addrspace(1) %13, align 16, !invariant.load !267
  %15 = extractelement <4 x float> %14, i32 0
  %16 = extractelement <4 x float> %14, i32 1
  %17 = extractelement <4 x float> %14, i32 2
  %18 = extractelement <4 x float> %14, i32 3
  %19 = load float, ptr addrspace(1) %arg213, align 16, !invariant.load !267
  %20 = zext i32 %.decomposed8 to i64
  %21 = zext i32 %9 to i64
  %22 = getelementptr [1552 x [90 x float]], ptr addrspace(1) %arg111, i64 0, i64 %21, i64 %20
  %23 = getelementptr inbounds float, ptr addrspace(1) %22, i64 5040
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %multiply.6 = fmul float %19, %24
  %subtract.7 = fsub float %15, %multiply.6
  %25 = getelementptr float, ptr addrspace(1) %arg315, i64 %12
  %26 = zext i32 %10 to i64
  %27 = getelementptr [1552 x [90 x float]], ptr addrspace(1) %arg111, i64 0, i64 %21, i64 %26
  %28 = getelementptr inbounds float, ptr addrspace(1) %27, i64 5040
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %multiply.61 = fmul float %19, %29
  %subtract.72 = fsub float %16, %multiply.61
  %30 = zext i32 %.decomposed7 to i64
  %31 = zext i32 %7 to i64
  %32 = getelementptr [1552 x [90 x float]], ptr addrspace(1) %arg111, i64 0, i64 %31, i64 %30
  %33 = getelementptr inbounds float, ptr addrspace(1) %32, i64 5040
  %34 = load float, ptr addrspace(1) %33, align 4, !invariant.load !267
  %multiply.63 = fmul float %19, %34
  %subtract.74 = fsub float %17, %multiply.63
  %35 = zext i32 %.decomposed to i64
  %36 = zext i32 %5 to i64
  %37 = getelementptr [1552 x [90 x float]], ptr addrspace(1) %arg111, i64 0, i64 %36, i64 %35
  %38 = getelementptr inbounds float, ptr addrspace(1) %37, i64 5040
  %39 = load float, ptr addrspace(1) %38, align 4, !invariant.load !267
  %multiply.65 = fmul float %19, %39
  %subtract.76 = fsub float %18, %multiply.65
  %40 = insertelement <4 x float> poison, float %subtract.7, i32 0
  %41 = insertelement <4 x float> %40, float %subtract.72, i32 1
  %42 = insertelement <4 x float> %41, float %subtract.74, i32 2
  %43 = insertelement <4 x float> %42, float %subtract.76, i32 3
  store <4 x float> %43, ptr addrspace(1) %25, align 16
  br label %fusion_13.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_69(ptr noalias nocapture readonly align 128 dereferenceable(50331648) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg3) local_unnamed_addr #0 {
entry:
  %arg397 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg295 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg193 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg091 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y64 = lshr i32 %1, 5
  %2 = lshr i32 %0, 2
  %3 = shl nuw nsw i32 %0, 6
  %tile_origin.2 = and i32 %3, 192
  %4 = shl nuw nsw i32 %thread_id.x, 1
  %5 = shl nuw nsw i32 %2, 15
  %6 = shl nuw nsw i32 %thread_id.y64, 8
  %7 = add i32 %6, %tile_origin.2
  %8 = add i32 %7, %4
  %9 = add i32 %5, %6
  %10 = add i32 %9, %tile_origin.2
  %11 = add i32 %10, %4
  %12 = add i32 %11, 1
  %13 = lshr i32 %12, 8
  %14 = zext i32 %11 to i64
  %15 = shl nuw nsw i64 %14, 2
  %16 = add nuw nsw i64 %15, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg193, i64 %16
  %17 = lshr i32 %11, 8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after, %reduction_write_output-true59
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv110 = phi i32 [ %17, %entry ], [ %lsr.iv.next111, %y_in_tile.loop_body ]
  %lsr.iv107 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep108, %y_in_tile.loop_body ]
  %lsr.iv105 = phi i32 [ %13, %entry ], [ %lsr.iv.next106, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %8, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.089 = phi i32 [ %thread_id.y64, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.4.088 = phi float [ -0.000000e+00, %entry ], [ %add.14.i76, %y_in_tile.loop_body ]
  %partial_reduction_result63.sroa.0.087 = phi float [ -0.000000e+00, %entry ], [ %add.14.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.089, 32
  %18 = and i32 %lsr.iv, 254
  %19 = and i32 %lsr.iv110, 16777088
  %20 = or i32 %19, %y_in_tile.invar_address.089
  %21 = zext i32 %20 to i64
  %22 = zext i32 %18 to i64
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %21, i64 %22
  %Arg_1.23 = load float, ptr addrspace(1) %Arg_1.2, align 8, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %23 = getelementptr [8192 x [6 x [256 x float]]], ptr addrspace(1) %arg091, i64 0, i64 %21, i64 0, i64 %22
  %Arg_0.199 = getelementptr inbounds float, ptr addrspace(1) %23, i64 1280
  %Arg_0.14 = load float, ptr addrspace(1) %Arg_0.199, align 8, !invariant.load !267
  %24 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.14.i = fadd float %partial_reduction_result63.sroa.0.087, %24
  %scevgep109 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 -4
  %25 = load <2 x float>, ptr addrspace(1) %scevgep109, align 8, !invariant.load !267
  %Arg_1.26112 = extractelement <2 x float> %25, i32 0
  %Arg_1.222113 = extractelement <2 x float> %25, i32 1
  %compare.58 = fcmp ogt float %Arg_1.26112, 0.000000e+00
  %26 = select i1 %compare.58, float %Arg_0.14, float 0.000000e+00
  %27 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %21, i64 %22
  store float %26, ptr addrspace(1) %27, align 8
  %28 = add i32 %lsr.iv, 1
  %29 = and i32 %28, 255
  %30 = and i32 %lsr.iv105, 16777088
  %31 = or i32 %30, %y_in_tile.invar_address.089
  %32 = zext i32 %31 to i64
  %33 = zext i32 %29 to i64
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg193, i64 0, i64 %32, i64 %33
  %Arg_1.215 = load float, ptr addrspace(1) %Arg_1.214, align 4, !invariant.load !267
  %compare.517 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %34 = getelementptr [8192 x [6 x [256 x float]]], ptr addrspace(1) %arg091, i64 0, i64 %32, i64 0, i64 %33
  %Arg_0.118100 = getelementptr inbounds float, ptr addrspace(1) %34, i64 1280
  %Arg_0.119 = load float, ptr addrspace(1) %Arg_0.118100, align 4, !invariant.load !267
  %35 = select i1 %compare.517, float %Arg_0.119, float 0.000000e+00
  %add.14.i76 = fadd float %partial_reduction_result63.sroa.4.088, %35
  %compare.524 = fcmp ogt float %Arg_1.222113, 0.000000e+00
  %36 = select i1 %compare.524, float %Arg_0.119, float 0.000000e+00
  %37 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg397, i64 0, i64 %32, i64 %33
  store float %36, ptr addrspace(1) %37, align 4
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 8192
  %lsr.iv.next106 = add nuw nsw i32 %lsr.iv105, 32
  %scevgep108 = getelementptr i8, ptr addrspace(1) %lsr.iv107, i64 32768
  %lsr.iv.next111 = add nuw nsw i32 %lsr.iv110, 32
  %38 = icmp ugt i32 %y_in_tile.invar_address.089, 95
  br i1 %38, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %39 = zext i32 %thread_id.x to i64
  %40 = zext i32 %thread_id.y64 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i64 0, i64 0, i64 0, i64 %39, i64 %40
  store float %add.14.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i64 0, i64 0, i64 0, i64 %40, i64 %39
  %partial_reduction_result27 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  %add.14.i77 = fadd float %partial_reduction_result27, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i77, i32 8, i32 31)
  %add.14.i78 = fadd float %add.14.i77, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i78, i32 4, i32 31)
  %add.14.i79 = fadd float %add.14.i78, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i79, i32 2, i32 31)
  %add.14.i80 = fadd float %add.14.i79, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i80, i32 1, i32 31)
  %add.14.i81 = fadd float %add.14.i80, %45
  store float %add.14.i81, ptr addrspace(3) %shmem_transposed_addr, align 4
  %46 = shl nuw nsw i32 %thread_id.y64, 1
  %47 = icmp eq i32 %thread_id.x, 0
  %48 = zext i32 %2 to i64
  %49 = or i32 %46, %tile_origin.2
  %50 = zext i32 %49 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg295, i64 0, i64 %48, i64 %50
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %51 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address41102 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.14.i76, ptr addrspace(3) %shmem_output_address41102, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43103 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result45 = load float, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  %add.14.i82 = fadd float %partial_reduction_result45, %52
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i82, i32 8, i32 31)
  %add.14.i83 = fadd float %add.14.i82, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i83, i32 4, i32 31)
  %add.14.i84 = fadd float %add.14.i83, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i84, i32 2, i32 31)
  %add.14.i85 = fadd float %add.14.i84, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.14.i85, i32 1, i32 31)
  %add.14.i86 = fadd float %add.14.i85, %56
  store float %add.14.i86, ptr addrspace(3) %shmem_transposed_addr43103, align 4
  br i1 %51, label %reduction_write_output-true59, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.14.i81, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address, i64 4
  store float %add.14.i86, ptr addrspace(1) %sunkaddr, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_79(ptr noalias nocapture readonly align 128 dereferenceable(50331648) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(8388608) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg10, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg11, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg13, ptr noalias nocapture writeonly align 128 dereferenceable(65536) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg15) local_unnamed_addr #0 {
entry:
  %arg15259 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14257 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13255 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12253 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11251 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10249 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9247 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8245 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7243 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6241 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5239 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4237 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3235 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2233 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1231 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0229 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y169 = lshr i32 %1, 5
  %2 = lshr i32 %0, 3
  %3 = shl nuw nsw i32 %0, 5
  %tile_origin.2 = and i32 %3, 224
  %4 = shl nuw nsw i32 %2, 15
  %5 = or i32 %tile_origin.2, %thread_id.x
  %6 = zext i32 %5 to i64
  %7 = shl nuw nsw i32 %thread_id.y169, 8
  %8 = add i32 %4, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = lshr i32 %10, 8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %reduction_write_output-after144, %reduction_write_output-true165
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %y_in_tile.loop_body
  %lsr.iv293 = phi i32 [ %13, %entry ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %lsr.iv290 = phi ptr addrspace(1) [ %arg11251, %entry ], [ %scevgep291, %y_in_tile.loop_body ]
  %lsr.iv287 = phi ptr addrspace(1) [ %arg15259, %entry ], [ %scevgep288, %y_in_tile.loop_body ]
  %lsr.iv284 = phi ptr addrspace(1) [ %arg13255, %entry ], [ %scevgep285, %y_in_tile.loop_body ]
  %lsr.iv281 = phi ptr addrspace(1) [ %arg7243, %entry ], [ %scevgep282, %y_in_tile.loop_body ]
  %lsr.iv278 = phi ptr addrspace(1) [ %arg9247, %entry ], [ %scevgep279, %y_in_tile.loop_body ]
  %lsr.iv275 = phi ptr addrspace(1) [ %arg5239, %entry ], [ %scevgep276, %y_in_tile.loop_body ]
  %lsr.iv272 = phi ptr addrspace(1) [ %arg4237, %entry ], [ %scevgep273, %y_in_tile.loop_body ]
  %lsr.iv269 = phi ptr addrspace(1) [ %arg3235, %entry ], [ %scevgep270, %y_in_tile.loop_body ]
  %lsr.iv266 = phi ptr addrspace(1) [ %arg2233, %entry ], [ %scevgep267, %y_in_tile.loop_body ]
  %lsr.iv = phi ptr addrspace(1) [ %arg1231, %entry ], [ %scevgep, %y_in_tile.loop_body ]
  %y_in_tile.invar_address.0224 = phi i32 [ %thread_id.y169, %entry ], [ %invar.inc, %y_in_tile.loop_body ]
  %partial_reduction_result11.0223 = phi float [ -0.000000e+00, %entry ], [ %add.58.i, %y_in_tile.loop_body ]
  %partial_reduction_result.0222 = phi float [ -0.000000e+00, %entry ], [ %add.18.i, %y_in_tile.loop_body ]
  %partial_reduction_result8.0221 = phi float [ -0.000000e+00, %entry ], [ %add.48.i, %y_in_tile.loop_body ]
  %partial_reduction_result2.0220 = phi float [ -0.000000e+00, %entry ], [ %add.28.i, %y_in_tile.loop_body ]
  %partial_reduction_result5.0219 = phi float [ -0.000000e+00, %entry ], [ %add.38.i, %y_in_tile.loop_body ]
  %invar.inc = add nuw nsw i32 %y_in_tile.invar_address.0224, 32
  %14 = and i32 %lsr.iv293, 16777088
  %15 = or i32 %14, %y_in_tile.invar_address.0224
  %scevgep265 = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 %12
  %Arg_1.215 = load float, ptr addrspace(1) %scevgep265, align 4, !invariant.load !267
  %compare.9 = fcmp ogt float %Arg_1.215, 0.000000e+00
  %16 = zext i32 %15 to i64
  %Arg_0.1 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr addrspace(1) %arg0229, i64 0, i64 %16, i64 0, i64 %6
  %Arg_0.116 = load float, ptr addrspace(1) %Arg_0.1, align 4, !invariant.load !267
  %17 = select i1 %compare.9, float %Arg_0.116, float 0.000000e+00
  %add.18.i = fadd float %partial_reduction_result.0222, %17
  %scevgep268 = getelementptr i8, ptr addrspace(1) %lsr.iv266, i64 %12
  %Arg_2.317 = load float, ptr addrspace(1) %scevgep268, align 4, !invariant.load !267
  %compare.20 = fcmp ogt float %Arg_2.317, 0.000000e+00
  %Arg_0.119261 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 256
  %Arg_0.120 = load float, ptr addrspace(1) %Arg_0.119261, align 4, !invariant.load !267
  %18 = select i1 %compare.20, float %Arg_0.120, float 0.000000e+00
  %add.28.i = fadd float %partial_reduction_result2.0220, %18
  %scevgep271 = getelementptr i8, ptr addrspace(1) %lsr.iv269, i64 %12
  %Arg_3.422 = load float, ptr addrspace(1) %scevgep271, align 4, !invariant.load !267
  %compare.30 = fcmp ogt float %Arg_3.422, 0.000000e+00
  %Arg_0.124262 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 512
  %Arg_0.125 = load float, ptr addrspace(1) %Arg_0.124262, align 4, !invariant.load !267
  %19 = select i1 %compare.30, float %Arg_0.125, float 0.000000e+00
  %add.38.i = fadd float %partial_reduction_result5.0219, %19
  %scevgep274 = getelementptr i8, ptr addrspace(1) %lsr.iv272, i64 %12
  %Arg_4.527 = load float, ptr addrspace(1) %scevgep274, align 4, !invariant.load !267
  %compare.40 = fcmp ogt float %Arg_4.527, 0.000000e+00
  %Arg_0.129263 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 768
  %Arg_0.130 = load float, ptr addrspace(1) %Arg_0.129263, align 4, !invariant.load !267
  %20 = select i1 %compare.40, float %Arg_0.130, float 0.000000e+00
  %add.48.i = fadd float %partial_reduction_result8.0221, %20
  %scevgep277 = getelementptr i8, ptr addrspace(1) %lsr.iv275, i64 %12
  %Arg_5.632 = load float, ptr addrspace(1) %scevgep277, align 4, !invariant.load !267
  %compare.50 = fcmp ogt float %Arg_5.632, 0.000000e+00
  %Arg_0.134264 = getelementptr inbounds float, ptr addrspace(1) %Arg_0.1, i64 1024
  %Arg_0.135 = load float, ptr addrspace(1) %Arg_0.134264, align 4, !invariant.load !267
  %21 = select i1 %compare.50, float %Arg_0.135, float 0.000000e+00
  %add.58.i = fadd float %partial_reduction_result11.0223, %21
  %scevgep280 = getelementptr i8, ptr addrspace(1) %lsr.iv278, i64 %12
  store float %18, ptr addrspace(1) %scevgep280, align 4
  %scevgep283 = getelementptr i8, ptr addrspace(1) %lsr.iv281, i64 %12
  store float %17, ptr addrspace(1) %scevgep283, align 4
  %scevgep286 = getelementptr i8, ptr addrspace(1) %lsr.iv284, i64 %12
  store float %20, ptr addrspace(1) %scevgep286, align 4
  %scevgep289 = getelementptr i8, ptr addrspace(1) %lsr.iv287, i64 %12
  store float %21, ptr addrspace(1) %scevgep289, align 4
  %scevgep292 = getelementptr i8, ptr addrspace(1) %lsr.iv290, i64 %12
  store float %19, ptr addrspace(1) %scevgep292, align 4
  %scevgep = getelementptr i8, ptr addrspace(1) %lsr.iv, i64 32768
  %scevgep267 = getelementptr i8, ptr addrspace(1) %lsr.iv266, i64 32768
  %scevgep270 = getelementptr i8, ptr addrspace(1) %lsr.iv269, i64 32768
  %scevgep273 = getelementptr i8, ptr addrspace(1) %lsr.iv272, i64 32768
  %scevgep276 = getelementptr i8, ptr addrspace(1) %lsr.iv275, i64 32768
  %scevgep279 = getelementptr i8, ptr addrspace(1) %lsr.iv278, i64 32768
  %scevgep282 = getelementptr i8, ptr addrspace(1) %lsr.iv281, i64 32768
  %scevgep285 = getelementptr i8, ptr addrspace(1) %lsr.iv284, i64 32768
  %scevgep288 = getelementptr i8, ptr addrspace(1) %lsr.iv287, i64 32768
  %scevgep291 = getelementptr i8, ptr addrspace(1) %lsr.iv290, i64 32768
  %lsr.iv.next = add nuw nsw i32 %lsr.iv293, 32
  %22 = icmp ugt i32 %y_in_tile.invar_address.0224, 95
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %23 = zext i32 %thread_id.x to i64
  %24 = zext i32 %thread_id.y169 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.18.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result67 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 16, i32 31)
  %add.18.i194 = fadd float %partial_reduction_result67, %25
  %26 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i194, i32 8, i32 31)
  %add.18.i195 = fadd float %add.18.i194, %26
  %27 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i195, i32 4, i32 31)
  %add.18.i196 = fadd float %add.18.i195, %27
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i196, i32 2, i32 31)
  %add.18.i197 = fadd float %add.18.i196, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.18.i197, i32 1, i32 31)
  %add.18.i198 = fadd float %add.18.i197, %29
  store float %add.18.i198, ptr addrspace(3) %shmem_transposed_addr, align 4
  %30 = icmp eq i32 %thread_id.x, 0
  %31 = zext i32 %2 to i64
  %32 = or i32 %tile_origin.2, %thread_id.y169
  %33 = zext i32 %32 to i64
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg6241, i64 0, i64 %31, i64 %33
  br i1 %30, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %34 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address81 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.28.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.28.i199 = fadd float %partial_reduction_result85, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i199, i32 8, i32 31)
  %add.28.i200 = fadd float %add.28.i199, %36
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i200, i32 4, i32 31)
  %add.28.i201 = fadd float %add.28.i200, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i201, i32 2, i32 31)
  %add.28.i202 = fadd float %add.28.i201, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.28.i202, i32 1, i32 31)
  %add.28.i203 = fadd float %add.28.i202, %39
  store float %add.28.i203, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %output_element_address101 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg8245, i64 0, i64 %31, i64 %33
  br i1 %34, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %reduction_write_output-after
  %40 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address103 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.38.i, ptr addrspace(3) %shmem_output_address103, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105, align 4
  %41 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.38.i204 = fadd float %partial_reduction_result107, %41
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.38.i204, i32 8, i32 31)
  %add.38.i205 = fadd float %add.38.i204, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.38.i205, i32 4, i32 31)
  %add.38.i206 = fadd float %add.38.i205, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.38.i206, i32 2, i32 31)
  %add.38.i207 = fadd float %add.38.i206, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.38.i207, i32 1, i32 31)
  %add.38.i208 = fadd float %add.38.i207, %45
  store float %add.38.i208, ptr addrspace(3) %shmem_transposed_addr105, align 4
  %output_element_address123 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg10249, i64 0, i64 %31, i64 %33
  br i1 %40, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  %46 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address125 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache79, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.48.i, ptr addrspace(3) %shmem_output_address125, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr127 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache79, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result129 = load float, ptr addrspace(3) %shmem_transposed_addr127, align 4
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 16, i32 31)
  %add.48.i209 = fadd float %partial_reduction_result129, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i209, i32 8, i32 31)
  %add.48.i210 = fadd float %add.48.i209, %48
  %49 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i210, i32 4, i32 31)
  %add.48.i211 = fadd float %add.48.i210, %49
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i211, i32 2, i32 31)
  %add.48.i212 = fadd float %add.48.i211, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.48.i212, i32 1, i32 31)
  %add.48.i213 = fadd float %add.48.i212, %51
  store float %add.48.i213, ptr addrspace(3) %shmem_transposed_addr127, align 4
  %output_element_address145 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg12253, i64 0, i64 %31, i64 %33
  br i1 %46, label %reduction_write_output-true143, label %reduction_write_output-after144

reduction_write_output-after144:                  ; preds = %reduction_write_output-true143, %reduction_write_output-after122
  %52 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address147 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache80, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.58.i, ptr addrspace(3) %shmem_output_address147, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr149 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache80, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result151 = load float, ptr addrspace(3) %shmem_transposed_addr149, align 4
  %53 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result151, i32 16, i32 31)
  %add.58.i214 = fadd float %partial_reduction_result151, %53
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.58.i214, i32 8, i32 31)
  %add.58.i215 = fadd float %add.58.i214, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.58.i215, i32 4, i32 31)
  %add.58.i216 = fadd float %add.58.i215, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.58.i216, i32 2, i32 31)
  %add.58.i217 = fadd float %add.58.i216, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.58.i217, i32 1, i32 31)
  %add.58.i218 = fadd float %add.58.i217, %57
  store float %add.58.i218, ptr addrspace(3) %shmem_transposed_addr149, align 4
  %output_element_address167 = getelementptr inbounds [64 x [256 x float]], ptr addrspace(1) %arg14257, i64 0, i64 %31, i64 %33
  br i1 %52, label %reduction_write_output-true165, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.18.i198, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true99:                    ; preds = %reduction_write_output-after
  store float %add.28.i203, ptr addrspace(1) %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  store float %add.38.i208, ptr addrspace(1) %output_element_address123, align 4
  br label %reduction_write_output-after122

reduction_write_output-true143:                   ; preds = %reduction_write_output-after122
  store float %add.48.i213, ptr addrspace(1) %output_element_address145, align 4
  br label %reduction_write_output-after144

reduction_write_output-true165:                   ; preds = %reduction_write_output-after144
  store float %add.58.i218, ptr addrspace(1) %output_element_address167, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_68(ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg0, ptr noalias nocapture align 128 dereferenceable(1024) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg3, ptr noalias nocapture align 128 dereferenceable(1024) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg5, ptr noalias nocapture align 128 dereferenceable(1024) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg7, ptr noalias nocapture align 128 dereferenceable(1024) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg9, ptr noalias nocapture align 128 dereferenceable(1024) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg11, ptr noalias nocapture align 128 dereferenceable(1024) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg13, ptr noalias nocapture align 128 dereferenceable(1024) %arg14, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg15, ptr noalias nocapture align 128 dereferenceable(1024) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg17, ptr noalias nocapture align 128 dereferenceable(1024) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg19, ptr noalias nocapture align 128 dereferenceable(1024) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg21, ptr noalias nocapture align 128 dereferenceable(1024) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg23, ptr noalias nocapture align 128 dereferenceable(1024) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg25, ptr noalias nocapture align 128 dereferenceable(1024) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg27, ptr noalias nocapture align 128 dereferenceable(1024) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg29, ptr noalias nocapture align 128 dereferenceable(1024) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg31, ptr noalias nocapture align 128 dereferenceable(1024) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg33, ptr noalias nocapture align 128 dereferenceable(1024) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg35, ptr noalias nocapture align 128 dereferenceable(1024) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg37, ptr noalias nocapture align 128 dereferenceable(1024) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(1024) %arg39, ptr noalias nocapture align 128 dereferenceable(1024) %arg40) local_unnamed_addr #6 {
entry:
  %arg4088 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg3986 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg3884 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg3782 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg3680 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg3578 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg3476 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg3374 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg3272 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg3170 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg3068 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg2966 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg2864 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg2762 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg2660 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg2558 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg2456 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg2354 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2252 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2150 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2048 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1946 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1844 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1742 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1640 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1538 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1436 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1334 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1232 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1130 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1028 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg926 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg824 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg722 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg620 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg518 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg416 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg314 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg212 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg110 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg212, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg110, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.43 = fmul float %4, %6
  %subtract.44 = fsub float %3, %multiply.43
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg314, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg416, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4
  %multiply.45 = fmul float %4, %10
  %subtract.46 = fsub float %8, %multiply.45
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg518, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg620, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4
  %multiply.47 = fmul float %4, %14
  %subtract.48 = fsub float %12, %multiply.47
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg722, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg824, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4
  %multiply.49 = fmul float %4, %18
  %subtract.50 = fsub float %16, %multiply.49
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg926, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1028, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4
  %multiply.51 = fmul float %4, %22
  %subtract.52 = fsub float %20, %multiply.51
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1130, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1232, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4
  %multiply.53 = fmul float %4, %26
  %subtract.54 = fsub float %24, %multiply.53
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1334, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1436, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4
  %multiply.55 = fmul float %4, %30
  %subtract.56 = fsub float %28, %multiply.55
  %31 = getelementptr inbounds float, ptr addrspace(1) %arg1538, i64 %1
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %33 = getelementptr inbounds float, ptr addrspace(1) %arg1640, i64 %1
  %34 = load float, ptr addrspace(1) %33, align 4
  %multiply.57 = fmul float %4, %34
  %subtract.58 = fsub float %32, %multiply.57
  %35 = getelementptr inbounds float, ptr addrspace(1) %arg1742, i64 %1
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr inbounds float, ptr addrspace(1) %arg1844, i64 %1
  %38 = load float, ptr addrspace(1) %37, align 4
  %multiply.59 = fmul float %4, %38
  %subtract.60 = fsub float %36, %multiply.59
  %39 = getelementptr inbounds float, ptr addrspace(1) %arg1946, i64 %1
  %40 = load float, ptr addrspace(1) %39, align 4, !invariant.load !267
  %41 = getelementptr inbounds float, ptr addrspace(1) %arg2048, i64 %1
  %42 = load float, ptr addrspace(1) %41, align 4
  %multiply.61 = fmul float %4, %42
  %subtract.62 = fsub float %40, %multiply.61
  %43 = getelementptr inbounds float, ptr addrspace(1) %arg2150, i64 %1
  %44 = load float, ptr addrspace(1) %43, align 4, !invariant.load !267
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2252, i64 %1
  %46 = load float, ptr addrspace(1) %45, align 4
  %multiply.63 = fmul float %4, %46
  %subtract.64 = fsub float %44, %multiply.63
  %47 = getelementptr inbounds float, ptr addrspace(1) %arg2354, i64 %1
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %49 = getelementptr inbounds float, ptr addrspace(1) %arg2456, i64 %1
  %50 = load float, ptr addrspace(1) %49, align 4
  %multiply.65 = fmul float %4, %50
  %subtract.66 = fsub float %48, %multiply.65
  %51 = getelementptr inbounds float, ptr addrspace(1) %arg2558, i64 %1
  %52 = load float, ptr addrspace(1) %51, align 4, !invariant.load !267
  %53 = getelementptr inbounds float, ptr addrspace(1) %arg2660, i64 %1
  %54 = load float, ptr addrspace(1) %53, align 4
  %multiply.67 = fmul float %4, %54
  %subtract.68 = fsub float %52, %multiply.67
  %55 = getelementptr inbounds float, ptr addrspace(1) %arg2762, i64 %1
  %56 = load float, ptr addrspace(1) %55, align 4, !invariant.load !267
  %57 = getelementptr inbounds float, ptr addrspace(1) %arg2864, i64 %1
  %58 = load float, ptr addrspace(1) %57, align 4
  %multiply.69 = fmul float %4, %58
  %subtract.70 = fsub float %56, %multiply.69
  %59 = getelementptr inbounds float, ptr addrspace(1) %arg2966, i64 %1
  %60 = load float, ptr addrspace(1) %59, align 4, !invariant.load !267
  %61 = getelementptr inbounds float, ptr addrspace(1) %arg3068, i64 %1
  %62 = load float, ptr addrspace(1) %61, align 4
  %multiply.71 = fmul float %4, %62
  %subtract.72 = fsub float %60, %multiply.71
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg3170, i64 %1
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr inbounds float, ptr addrspace(1) %arg3272, i64 %1
  %66 = load float, ptr addrspace(1) %65, align 4
  %multiply.73 = fmul float %4, %66
  %subtract.74 = fsub float %64, %multiply.73
  %67 = getelementptr inbounds float, ptr addrspace(1) %arg3374, i64 %1
  %68 = load float, ptr addrspace(1) %67, align 4, !invariant.load !267
  %69 = getelementptr inbounds float, ptr addrspace(1) %arg3476, i64 %1
  %70 = load float, ptr addrspace(1) %69, align 4
  %multiply.75 = fmul float %4, %70
  %subtract.76 = fsub float %68, %multiply.75
  %71 = getelementptr inbounds float, ptr addrspace(1) %arg3578, i64 %1
  %72 = load float, ptr addrspace(1) %71, align 4, !invariant.load !267
  %73 = getelementptr inbounds float, ptr addrspace(1) %arg3680, i64 %1
  %74 = load float, ptr addrspace(1) %73, align 4
  %multiply.77 = fmul float %4, %74
  %subtract.78 = fsub float %72, %multiply.77
  %75 = getelementptr inbounds float, ptr addrspace(1) %arg3782, i64 %1
  %76 = load float, ptr addrspace(1) %75, align 4, !invariant.load !267
  %77 = getelementptr inbounds float, ptr addrspace(1) %arg3884, i64 %1
  %78 = load float, ptr addrspace(1) %77, align 4
  %multiply.79 = fmul float %4, %78
  %subtract.80 = fsub float %76, %multiply.79
  %79 = getelementptr inbounds float, ptr addrspace(1) %arg3986, i64 %1
  %80 = load float, ptr addrspace(1) %79, align 4, !invariant.load !267
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg4088, i64 %1
  %82 = load float, ptr addrspace(1) %81, align 4
  %multiply.81 = fmul float %4, %82
  %subtract.82 = fsub float %80, %multiply.81
  store float %subtract.44, ptr addrspace(1) %49, align 4
  store float %subtract.46, ptr addrspace(1) %53, align 4
  store float %subtract.48, ptr addrspace(1) %57, align 4
  store float %subtract.50, ptr addrspace(1) %61, align 4
  store float %subtract.52, ptr addrspace(1) %65, align 4
  store float %subtract.54, ptr addrspace(1) %69, align 4
  store float %subtract.56, ptr addrspace(1) %73, align 4
  store float %subtract.58, ptr addrspace(1) %77, align 4
  store float %subtract.60, ptr addrspace(1) %81, align 4
  store float %subtract.62, ptr addrspace(1) %45, align 4
  store float %subtract.64, ptr addrspace(1) %9, align 4
  store float %subtract.66, ptr addrspace(1) %13, align 4
  store float %subtract.68, ptr addrspace(1) %17, align 4
  store float %subtract.70, ptr addrspace(1) %21, align 4
  store float %subtract.72, ptr addrspace(1) %25, align 4
  store float %subtract.74, ptr addrspace(1) %29, align 4
  store float %subtract.76, ptr addrspace(1) %33, align 4
  store float %subtract.78, ptr addrspace(1) %37, align 4
  store float %subtract.80, ptr addrspace(1) %41, align 4
  store float %subtract.82, ptr addrspace(1) %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_391(ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg14, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg15, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg16, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg21) local_unnamed_addr #6 {
entry:
  %arg2185 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2083 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1981 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1879 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1777 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1675 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1573 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1471 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1369 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1267 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1165 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1063 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg961 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg859 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg757 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg655 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg553 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg451 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg349 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg247 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg145 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg043 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = zext i32 %linear_index_base to i64
  %5 = getelementptr float, ptr addrspace(1) %arg043, i64 %4
  %6 = load <4 x float>, ptr addrspace(1) %5, align 16, !invariant.load !267
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = load float, ptr addrspace(1) %arg247, align 16, !invariant.load !267
  %12 = getelementptr float, ptr addrspace(1) %arg145, i64 %4
  %13 = load <4 x float>, ptr addrspace(1) %12, align 16, !invariant.load !267
  %14 = extractelement <4 x float> %13, i32 0
  %15 = extractelement <4 x float> %13, i32 1
  %16 = extractelement <4 x float> %13, i32 2
  %17 = extractelement <4 x float> %13, i32 3
  %multiply.17 = fmul float %11, %14
  %subtract.18 = fsub float %7, %multiply.17
  %18 = getelementptr float, ptr addrspace(1) %arg349, i64 %4
  %19 = load <4 x float>, ptr addrspace(1) %18, align 16, !invariant.load !267
  %20 = extractelement <4 x float> %19, i32 0
  %21 = extractelement <4 x float> %19, i32 1
  %22 = extractelement <4 x float> %19, i32 2
  %23 = extractelement <4 x float> %19, i32 3
  %24 = getelementptr float, ptr addrspace(1) %arg451, i64 %4
  %25 = load <4 x float>, ptr addrspace(1) %24, align 16, !invariant.load !267
  %26 = extractelement <4 x float> %25, i32 0
  %27 = extractelement <4 x float> %25, i32 1
  %28 = extractelement <4 x float> %25, i32 2
  %29 = extractelement <4 x float> %25, i32 3
  %multiply.19 = fmul float %11, %26
  %subtract.20 = fsub float %20, %multiply.19
  %30 = getelementptr float, ptr addrspace(1) %arg553, i64 %4
  %31 = load <4 x float>, ptr addrspace(1) %30, align 16, !invariant.load !267
  %32 = extractelement <4 x float> %31, i32 0
  %33 = extractelement <4 x float> %31, i32 1
  %34 = extractelement <4 x float> %31, i32 2
  %35 = extractelement <4 x float> %31, i32 3
  %36 = getelementptr float, ptr addrspace(1) %arg655, i64 %4
  %37 = load <4 x float>, ptr addrspace(1) %36, align 16, !invariant.load !267
  %38 = extractelement <4 x float> %37, i32 0
  %39 = extractelement <4 x float> %37, i32 1
  %40 = extractelement <4 x float> %37, i32 2
  %41 = extractelement <4 x float> %37, i32 3
  %multiply.21 = fmul float %11, %38
  %subtract.22 = fsub float %32, %multiply.21
  %42 = getelementptr float, ptr addrspace(1) %arg757, i64 %4
  %43 = load <4 x float>, ptr addrspace(1) %42, align 16, !invariant.load !267
  %44 = extractelement <4 x float> %43, i32 0
  %45 = extractelement <4 x float> %43, i32 1
  %46 = extractelement <4 x float> %43, i32 2
  %47 = extractelement <4 x float> %43, i32 3
  %48 = getelementptr float, ptr addrspace(1) %arg859, i64 %4
  %49 = load <4 x float>, ptr addrspace(1) %48, align 16, !invariant.load !267
  %50 = extractelement <4 x float> %49, i32 0
  %51 = extractelement <4 x float> %49, i32 1
  %52 = extractelement <4 x float> %49, i32 2
  %53 = extractelement <4 x float> %49, i32 3
  %multiply.23 = fmul float %11, %50
  %subtract.24 = fsub float %44, %multiply.23
  %54 = getelementptr float, ptr addrspace(1) %arg961, i64 %4
  %55 = load <4 x float>, ptr addrspace(1) %54, align 16, !invariant.load !267
  %56 = extractelement <4 x float> %55, i32 0
  %57 = extractelement <4 x float> %55, i32 1
  %58 = extractelement <4 x float> %55, i32 2
  %59 = extractelement <4 x float> %55, i32 3
  %60 = getelementptr float, ptr addrspace(1) %arg1063, i64 %4
  %61 = load <4 x float>, ptr addrspace(1) %60, align 16, !invariant.load !267
  %62 = extractelement <4 x float> %61, i32 0
  %63 = extractelement <4 x float> %61, i32 1
  %64 = extractelement <4 x float> %61, i32 2
  %65 = extractelement <4 x float> %61, i32 3
  %multiply.25 = fmul float %11, %62
  %subtract.26 = fsub float %56, %multiply.25
  %66 = getelementptr float, ptr addrspace(1) %arg1165, i64 %4
  %67 = load <4 x float>, ptr addrspace(1) %66, align 16, !invariant.load !267
  %68 = extractelement <4 x float> %67, i32 0
  %69 = extractelement <4 x float> %67, i32 1
  %70 = extractelement <4 x float> %67, i32 2
  %71 = extractelement <4 x float> %67, i32 3
  %72 = getelementptr float, ptr addrspace(1) %arg1267, i64 %4
  %73 = load <4 x float>, ptr addrspace(1) %72, align 16, !invariant.load !267
  %74 = extractelement <4 x float> %73, i32 0
  %75 = extractelement <4 x float> %73, i32 1
  %76 = extractelement <4 x float> %73, i32 2
  %77 = extractelement <4 x float> %73, i32 3
  %multiply.27 = fmul float %11, %74
  %subtract.28 = fsub float %68, %multiply.27
  %78 = getelementptr float, ptr addrspace(1) %arg1369, i64 %4
  %79 = load <4 x float>, ptr addrspace(1) %78, align 16, !invariant.load !267
  %80 = extractelement <4 x float> %79, i32 0
  %81 = extractelement <4 x float> %79, i32 1
  %82 = extractelement <4 x float> %79, i32 2
  %83 = extractelement <4 x float> %79, i32 3
  %84 = getelementptr float, ptr addrspace(1) %arg1471, i64 %4
  %85 = load <4 x float>, ptr addrspace(1) %84, align 16, !invariant.load !267
  %86 = extractelement <4 x float> %85, i32 0
  %87 = extractelement <4 x float> %85, i32 1
  %88 = extractelement <4 x float> %85, i32 2
  %89 = extractelement <4 x float> %85, i32 3
  %multiply.29 = fmul float %11, %86
  %subtract.30 = fsub float %80, %multiply.29
  %90 = getelementptr float, ptr addrspace(1) %arg1573, i64 %4
  %91 = getelementptr float, ptr addrspace(1) %arg1675, i64 %4
  %92 = getelementptr float, ptr addrspace(1) %arg1777, i64 %4
  %93 = getelementptr float, ptr addrspace(1) %arg1879, i64 %4
  %94 = getelementptr float, ptr addrspace(1) %arg1981, i64 %4
  %95 = getelementptr float, ptr addrspace(1) %arg2083, i64 %4
  %96 = getelementptr float, ptr addrspace(1) %arg2185, i64 %4
  %multiply.171 = fmul float %11, %15
  %subtract.182 = fsub float %8, %multiply.171
  %multiply.193 = fmul float %11, %27
  %subtract.204 = fsub float %21, %multiply.193
  %multiply.215 = fmul float %11, %39
  %subtract.226 = fsub float %33, %multiply.215
  %multiply.237 = fmul float %11, %51
  %subtract.248 = fsub float %45, %multiply.237
  %multiply.259 = fmul float %11, %63
  %subtract.2610 = fsub float %57, %multiply.259
  %multiply.2711 = fmul float %11, %75
  %subtract.2812 = fsub float %69, %multiply.2711
  %multiply.2913 = fmul float %11, %87
  %subtract.3014 = fsub float %81, %multiply.2913
  %multiply.1715 = fmul float %11, %16
  %subtract.1816 = fsub float %9, %multiply.1715
  %multiply.1917 = fmul float %11, %28
  %subtract.2018 = fsub float %22, %multiply.1917
  %multiply.2119 = fmul float %11, %40
  %subtract.2220 = fsub float %34, %multiply.2119
  %multiply.2321 = fmul float %11, %52
  %subtract.2422 = fsub float %46, %multiply.2321
  %multiply.2523 = fmul float %11, %64
  %subtract.2624 = fsub float %58, %multiply.2523
  %multiply.2725 = fmul float %11, %76
  %subtract.2826 = fsub float %70, %multiply.2725
  %multiply.2927 = fmul float %11, %88
  %subtract.3028 = fsub float %82, %multiply.2927
  %multiply.1729 = fmul float %11, %17
  %subtract.1830 = fsub float %10, %multiply.1729
  %multiply.1931 = fmul float %11, %29
  %subtract.2032 = fsub float %23, %multiply.1931
  %multiply.2133 = fmul float %11, %41
  %subtract.2234 = fsub float %35, %multiply.2133
  %multiply.2335 = fmul float %11, %53
  %subtract.2436 = fsub float %47, %multiply.2335
  %multiply.2537 = fmul float %11, %65
  %subtract.2638 = fsub float %59, %multiply.2537
  %multiply.2739 = fmul float %11, %77
  %subtract.2840 = fsub float %71, %multiply.2739
  %multiply.2941 = fmul float %11, %89
  %subtract.3042 = fsub float %83, %multiply.2941
  %97 = insertelement <4 x float> poison, float %subtract.18, i32 0
  %98 = insertelement <4 x float> %97, float %subtract.182, i32 1
  %99 = insertelement <4 x float> %98, float %subtract.1816, i32 2
  %100 = insertelement <4 x float> %99, float %subtract.1830, i32 3
  store <4 x float> %100, ptr addrspace(1) %90, align 16
  %101 = insertelement <4 x float> poison, float %subtract.20, i32 0
  %102 = insertelement <4 x float> %101, float %subtract.204, i32 1
  %103 = insertelement <4 x float> %102, float %subtract.2018, i32 2
  %104 = insertelement <4 x float> %103, float %subtract.2032, i32 3
  store <4 x float> %104, ptr addrspace(1) %91, align 16
  %105 = insertelement <4 x float> poison, float %subtract.22, i32 0
  %106 = insertelement <4 x float> %105, float %subtract.226, i32 1
  %107 = insertelement <4 x float> %106, float %subtract.2220, i32 2
  %108 = insertelement <4 x float> %107, float %subtract.2234, i32 3
  store <4 x float> %108, ptr addrspace(1) %92, align 16
  %109 = insertelement <4 x float> poison, float %subtract.24, i32 0
  %110 = insertelement <4 x float> %109, float %subtract.248, i32 1
  %111 = insertelement <4 x float> %110, float %subtract.2422, i32 2
  %112 = insertelement <4 x float> %111, float %subtract.2436, i32 3
  store <4 x float> %112, ptr addrspace(1) %93, align 16
  %113 = insertelement <4 x float> poison, float %subtract.26, i32 0
  %114 = insertelement <4 x float> %113, float %subtract.2610, i32 1
  %115 = insertelement <4 x float> %114, float %subtract.2624, i32 2
  %116 = insertelement <4 x float> %115, float %subtract.2638, i32 3
  store <4 x float> %116, ptr addrspace(1) %94, align 16
  %117 = insertelement <4 x float> poison, float %subtract.28, i32 0
  %118 = insertelement <4 x float> %117, float %subtract.2812, i32 1
  %119 = insertelement <4 x float> %118, float %subtract.2826, i32 2
  %120 = insertelement <4 x float> %119, float %subtract.2840, i32 3
  store <4 x float> %120, ptr addrspace(1) %95, align 16
  %121 = insertelement <4 x float> poison, float %subtract.30, i32 0
  %122 = insertelement <4 x float> %121, float %subtract.3014, i32 1
  %123 = insertelement <4 x float> %122, float %subtract.3028, i32 2
  %124 = insertelement <4 x float> %123, float %subtract.3042, i32 3
  store <4 x float> %124, ptr addrspace(1) %96, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_734(ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg4) local_unnamed_addr #0 {
entry:
  %arg4197 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3195 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2193 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1191 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0189 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !288
  %trunc.not = icmp eq i32 %0, 0
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %2, 31
  %thread_id.y131 = lshr i32 %2, 5
  %tile_origin.2 = shl nuw nsw i32 %1, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg1191, align 128, !invariant.load !267
  %3 = shl nuw nsw i32 %thread_id.x, 1
  %4 = or i32 %3, %tile_origin.2
  %5 = zext i32 %4 to i64
  br i1 %trunc.not, label %y_in_tile.loop_body.preheader, label %y_in_tile.loop_body60.preheader

y_in_tile.loop_body60.preheader:                  ; preds = %entry
  %6 = add nuw nsw i32 %thread_id.y131, -32
  %7 = zext i32 %2 to i64
  %8 = lshr i64 %7, 5
  %9 = shl nuw nsw i64 %8, 11
  %10 = shl nuw nsw i64 %5, 2
  %11 = add i64 %9, %10
  %12 = add i64 %11, 4
  %scevgep212 = getelementptr i8, ptr addrspace(1) %arg2193, i64 %12
  br label %y_in_tile.loop_body60

y_in_tile.loop_body.preheader:                    ; preds = %entry
  %13 = add nuw nsw i32 %thread_id.y131, -32
  %14 = zext i32 %2 to i64
  %15 = lshr i64 %14, 5
  %16 = shl nuw nsw i64 %15, 11
  %17 = shl nuw nsw i64 %5, 2
  %18 = add i64 %16, %17
  %19 = add i64 %18, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0189, i64 %19
  br label %y_in_tile.loop_body

common.ret.sink.split:                            ; preds = %reduction_write_output-after100, %reduction_write_output-after
  %.pre-phi206 = phi i64 [ %52, %reduction_write_output-after100 ], [ %33, %reduction_write_output-after ]
  %arg3.sink = phi ptr addrspace(1) [ %arg3195, %reduction_write_output-after ], [ %arg4197, %reduction_write_output-after100 ]
  %add.7.i166.sink = phi float [ %add.7.i166, %reduction_write_output-after ], [ %add.12.i177, %reduction_write_output-after100 ]
  %20 = getelementptr [512 x float], ptr addrspace(1) %arg3.sink, i64 0, i64 %.pre-phi206
  %output_element_address44199 = getelementptr inbounds float, ptr addrspace(1) %20, i64 1
  store float %add.7.i166.sink, ptr addrspace(1) %output_element_address44199, align 4
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %reduction_write_output-after, %reduction_write_output-after100
  ret void

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_body.preheader, %y_in_tile.loop_body
  %lsr.iv207 = phi ptr addrspace(1) [ %scevgep, %y_in_tile.loop_body.preheader ], [ %scevgep208, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %13, %y_in_tile.loop_body.preheader ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result129.sroa.0.0183 = phi float [ %add.7.i, %y_in_tile.loop_body ], [ %Arg_1.2, %y_in_tile.loop_body.preheader ]
  %partial_reduction_result129.sroa.4.0182 = phi float [ %add.7.i156, %y_in_tile.loop_body ], [ %Arg_1.2, %y_in_tile.loop_body.preheader ]
  %scevgep209 = getelementptr i8, ptr addrspace(1) %lsr.iv207, i64 -4
  %21 = load <2 x float>, ptr addrspace(1) %scevgep209, align 8, !invariant.load !267
  %Arg_0.13216 = extractelement <2 x float> %21, i32 0
  %Arg_0.18217 = extractelement <2 x float> %21, i32 1
  %add.7.i = fadd float %partial_reduction_result129.sroa.0.0183, %Arg_0.13216
  %add.7.i156 = fadd float %partial_reduction_result129.sroa.4.0182, %Arg_0.18217
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep208 = getelementptr i8, ptr addrspace(1) %lsr.iv207, i64 65536
  %22 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %23 = zext i32 %thread_id.x to i64
  %24 = zext i32 %thread_id.y131 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i64 0, i64 0, i64 0, i64 %23, i64 %24
  store float %add.7.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i64 0, i64 0, i64 0, i64 %24, i64 %23
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %25 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.7.i157 = fadd float %partial_reduction_result10, %25
  %26 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i157, i32 8, i32 31)
  %add.7.i158 = fadd float %add.7.i157, %26
  %27 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i158, i32 4, i32 31)
  %add.7.i159 = fadd float %add.7.i158, %27
  %28 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i159, i32 2, i32 31)
  %add.7.i160 = fadd float %add.7.i159, %28
  %29 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i160, i32 1, i32 31)
  %add.7.i161 = fadd float %add.7.i160, %29
  store float %add.7.i161, ptr addrspace(3) %shmem_transposed_addr, align 4
  %30 = shl nuw nsw i32 %thread_id.y131, 1
  %31 = icmp eq i32 %thread_id.x, 0
  %32 = or i32 %30, %tile_origin.2
  %33 = zext i32 %32 to i64
  %output_element_address = getelementptr inbounds [512 x float], ptr addrspace(1) %arg3195, i64 0, i64 %33
  br i1 %31, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %34 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address24201 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.7.i156, ptr addrspace(3) %shmem_output_address24201, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26202 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr26202, align 4
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.7.i162 = fadd float %partial_reduction_result28, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i162, i32 8, i32 31)
  %add.7.i163 = fadd float %add.7.i162, %36
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i163, i32 4, i32 31)
  %add.7.i164 = fadd float %add.7.i163, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i164, i32 2, i32 31)
  %add.7.i165 = fadd float %add.7.i164, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.7.i165, i32 1, i32 31)
  %add.7.i166 = fadd float %add.7.i165, %39
  store float %add.7.i166, ptr addrspace(3) %shmem_transposed_addr26202, align 4
  br i1 %34, label %common.ret.sink.split, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.7.i161, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_body60.preheader, %y_in_tile.loop_body60
  %lsr.iv213 = phi ptr addrspace(1) [ %scevgep212, %y_in_tile.loop_body60.preheader ], [ %scevgep214, %y_in_tile.loop_body60 ]
  %lsr.iv210 = phi i32 [ %6, %y_in_tile.loop_body60.preheader ], [ %lsr.iv.next211, %y_in_tile.loop_body60 ]
  %partial_reduction_result47128.sroa.4.0179 = phi float [ %add.12.i167, %y_in_tile.loop_body60 ], [ %Arg_1.2, %y_in_tile.loop_body60.preheader ]
  %partial_reduction_result47128.sroa.0.0178 = phi float [ %add.12.i, %y_in_tile.loop_body60 ], [ %Arg_1.2, %y_in_tile.loop_body60.preheader ]
  %scevgep215 = getelementptr i8, ptr addrspace(1) %lsr.iv213, i64 -4
  %40 = load <2 x float>, ptr addrspace(1) %scevgep215, align 8, !invariant.load !267
  %Arg_2.373218 = extractelement <2 x float> %40, i32 0
  %Arg_2.379219 = extractelement <2 x float> %40, i32 1
  %add.12.i = fadd float %partial_reduction_result47128.sroa.0.0178, %Arg_2.373218
  %add.12.i167 = fadd float %partial_reduction_result47128.sroa.4.0179, %Arg_2.379219
  %lsr.iv.next211 = add nsw i32 %lsr.iv210, 32
  %scevgep214 = getelementptr i8, ptr addrspace(1) %lsr.iv213, i64 65536
  %41 = icmp ugt i32 %lsr.iv.next211, 31
  br i1 %41, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_body60
  %42 = zext i32 %thread_id.x to i64
  %43 = zext i32 %thread_id.y131 to i64
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i64 0, i64 0, i64 0, i64 %42, i64 %43
  store float %add.12.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i64 0, i64 0, i64 0, i64 %43, i64 %42
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.12.i168 = fadd float %partial_reduction_result85, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i168, i32 8, i32 31)
  %add.12.i169 = fadd float %add.12.i168, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i169, i32 4, i32 31)
  %add.12.i170 = fadd float %add.12.i169, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i170, i32 2, i32 31)
  %add.12.i171 = fadd float %add.12.i170, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i171, i32 1, i32 31)
  %add.12.i172 = fadd float %add.12.i171, %48
  store float %add.12.i172, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %49 = shl nuw nsw i32 %thread_id.y131, 1
  %50 = icmp eq i32 %thread_id.x, 0
  %51 = or i32 %49, %tile_origin.2
  %52 = zext i32 %51 to i64
  %output_element_address101 = getelementptr inbounds [512 x float], ptr addrspace(1) %arg4197, i64 0, i64 %52
  br i1 %50, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %53 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address103204 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address81, i64 1056
  store float %add.12.i167, ptr addrspace(3) %shmem_output_address103204, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105205 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr83, i64 1056
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105205, align 4
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.12.i173 = fadd float %partial_reduction_result107, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i173, i32 8, i32 31)
  %add.12.i174 = fadd float %add.12.i173, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i174, i32 4, i32 31)
  %add.12.i175 = fadd float %add.12.i174, %56
  %57 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i175, i32 2, i32 31)
  %add.12.i176 = fadd float %add.12.i175, %57
  %58 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i176, i32 1, i32 31)
  %add.12.i177 = fadd float %add.12.i176, %58
  store float %add.12.i177, ptr addrspace(3) %shmem_transposed_addr105205, align 4
  br i1 %53, label %common.ret.sink.split, label %common.ret

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  store float %add.12.i172, ptr addrspace(1) %output_element_address101, align 8
  br label %reduction_write_output-after100
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @add_225(ptr noalias nocapture align 128 dereferenceable(524288) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(524288) %arg1) local_unnamed_addr #6 {
entry:
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = zext i32 %linear_index_base to i64
  %5 = getelementptr float, ptr addrspace(1) %arg04, i64 %4
  %6 = load <4 x float>, ptr addrspace(1) %5, align 16
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = getelementptr float, ptr addrspace(1) %arg16, i64 %4
  %12 = load <4 x float>, ptr addrspace(1) %11, align 16, !invariant.load !267
  %13 = extractelement <4 x float> %12, i32 0
  %14 = extractelement <4 x float> %12, i32 1
  %15 = extractelement <4 x float> %12, i32 2
  %16 = extractelement <4 x float> %12, i32 3
  %add.3 = fadd float %7, %13
  %add.31 = fadd float %8, %14
  %add.32 = fadd float %9, %15
  %add.33 = fadd float %10, %16
  %17 = insertelement <4 x float> poison, float %add.3, i32 0
  %18 = insertelement <4 x float> %17, float %add.31, i32 1
  %19 = insertelement <4 x float> %18, float %add.32, i32 2
  %20 = insertelement <4 x float> %19, float %add.33, i32 3
  store <4 x float> %20, ptr addrspace(1) %5, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @add_220(ptr noalias nocapture align 128 dereferenceable(1835008) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(1835008) %arg1) local_unnamed_addr #6 {
entry:
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !315
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = zext i32 %linear_index_base to i64
  %5 = getelementptr float, ptr addrspace(1) %arg04, i64 %4
  %6 = load <4 x float>, ptr addrspace(1) %5, align 16
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = getelementptr float, ptr addrspace(1) %arg16, i64 %4
  %12 = load <4 x float>, ptr addrspace(1) %11, align 16, !invariant.load !267
  %13 = extractelement <4 x float> %12, i32 0
  %14 = extractelement <4 x float> %12, i32 1
  %15 = extractelement <4 x float> %12, i32 2
  %16 = extractelement <4 x float> %12, i32 3
  %add.3 = fadd float %7, %13
  %add.31 = fadd float %8, %14
  %add.32 = fadd float %9, %15
  %add.33 = fadd float %10, %16
  %17 = insertelement <4 x float> poison, float %add.3, i32 0
  %18 = insertelement <4 x float> %17, float %add.31, i32 1
  %19 = insertelement <4 x float> %18, float %add.32, i32 2
  %20 = insertelement <4 x float> %19, float %add.33, i32 3
  store <4 x float> %20, ptr addrspace(1) %5, align 16
  ret void
}

; Function Attrs: nounwind
define void @fusion_729(ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(131072) %arg5, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg6, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg7, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg8, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg9, ptr noalias nocapture writeonly align 128 dereferenceable(2048) %arg10) local_unnamed_addr #0 {
entry:
  %arg10562 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9560 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8558 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7556 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6554 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5552 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4550 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3548 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2546 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1544 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0542 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !290
  switch i32 %0, label %common.ret [
    i32 0, label %reduce-group-0-true
    i32 1, label %reduce-group-1-true
    i32 2, label %entry.reduce-group-2-true_crit_edge
    i32 3, label %entry.reduce-group-3-true_crit_edge
    i32 4, label %entry.reduce-group-4-true_crit_edge
  ]

entry.reduce-group-4-true_crit_edge:              ; preds = %entry
  %Arg_1.2285.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre534 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %.pre536 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre538 = and i32 %.pre536, 31
  %.pre539 = lshr i32 %.pre536, 5
  %.pre540 = shl nuw nsw i32 %.pre534, 6
  %.pre585 = shl nuw nsw i32 %.pre538, 1
  %.pre587 = or i32 %.pre585, %.pre540
  %.pre589 = zext i32 %.pre587 to i64
  %.pre626 = add nuw nsw i32 %.pre539, -32
  %.pre628 = zext i32 %.pre539 to i64
  %.pre630 = shl nuw nsw i64 %.pre589, 2
  br label %y_in_tile.loop_body297.lr.ph

entry.reduce-group-3-true_crit_edge:              ; preds = %entry
  %Arg_1.2206.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre527 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %.pre529 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre531 = and i32 %.pre529, 31
  %.pre532 = lshr i32 %.pre529, 5
  %.pre533 = shl nuw nsw i32 %.pre527, 6
  %.pre580 = shl nuw nsw i32 %.pre531, 1
  %.pre581 = or i32 %.pre580, %.pre533
  %.pre583 = zext i32 %.pre581 to i64
  %.pre620 = add nuw nsw i32 %.pre532, -32
  %.pre622 = zext i32 %.pre532 to i64
  %.pre624 = shl nuw nsw i64 %.pre583, 2
  %1 = shl nuw nsw i64 %.pre622, 11
  %2 = add i64 %1, %.pre624
  %3 = add i64 %2, 4
  %scevgep610 = getelementptr i8, ptr addrspace(1) %arg4550, i64 %3
  br label %y_in_tile.loop_body218

entry.reduce-group-2-true_crit_edge:              ; preds = %entry
  %Arg_1.2127.pre = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %.pre = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %.pre522 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %.pre524 = and i32 %.pre522, 31
  %.pre525 = lshr i32 %.pre522, 5
  %.pre526 = shl nuw nsw i32 %.pre, 6
  %4 = shl nuw nsw i32 %.pre524, 1
  %5 = or i32 %4, %.pre526
  %6 = zext i32 %5 to i64
  %7 = add nuw nsw i32 %.pre525, -32
  %8 = zext i32 %.pre522 to i64
  %9 = lshr i64 %8, 5
  %10 = shl nuw nsw i64 %9, 11
  %11 = shl nuw nsw i64 %6, 2
  %12 = add i64 %10, %11
  %13 = add i64 %12, 4
  %scevgep616 = getelementptr i8, ptr addrspace(1) %arg3548, i64 %13
  br label %y_in_tile.loop_body139

common.ret.sink.split:                            ; preds = %reduction_write_output-after337, %reduction_write_output-after100, %reduction_write_output-after
  %.sink = phi i32 [ %39, %reduction_write_output-after ], [ %70, %reduction_write_output-after100 ], [ %131, %reduction_write_output-after337 ]
  %arg7.sink = phi ptr addrspace(1) [ %arg6554, %reduction_write_output-after ], [ %arg7556, %reduction_write_output-after100 ], [ %arg10562, %reduction_write_output-after337 ]
  %add.15.i461.sink = phi float [ %add.10.i450, %reduction_write_output-after ], [ %add.15.i461, %reduction_write_output-after100 ], [ %add.30.i494, %reduction_write_output-after337 ]
  %14 = or i32 %.sink, 1
  %15 = zext i32 %14 to i64
  %output_element_address123 = getelementptr inbounds [512 x float], ptr addrspace(1) %arg7.sink, i64 0, i64 %15
  store float %add.15.i461.sink, ptr addrspace(1) %output_element_address123, align 4
  br label %common.ret

common.ret:                                       ; preds = %reduction_write_output-after201, %common.ret.sink.split, %reduction_write_output-after100, %reduction_write_output-after, %reduction_write_output-after337, %reduction_write_output-after280, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %17, 31
  %thread_id.y380 = lshr i32 %17, 5
  %tile_origin.2 = shl nuw nsw i32 %16, 6
  %Arg_1.2 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %18 = shl nuw nsw i32 %thread_id.x, 1
  %19 = or i32 %18, %tile_origin.2
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i32 %thread_id.y380, -32
  %22 = zext i32 %17 to i64
  %23 = lshr i64 %22, 5
  %24 = shl nuw nsw i64 %23, 11
  %25 = shl nuw nsw i64 %20, 2
  %26 = add i64 %24, %25
  %27 = add i64 %26, 4
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0542, i64 %27
  br label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %reduce-group-0-true, %y_in_tile.loop_body
  %lsr.iv591 = phi ptr addrspace(1) [ %scevgep, %reduce-group-0-true ], [ %scevgep592, %y_in_tile.loop_body ]
  %lsr.iv = phi i32 [ %21, %reduce-group-0-true ], [ %lsr.iv.next, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.0.0515 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i, %y_in_tile.loop_body ]
  %partial_reduction_result375.sroa.4.0514 = phi float [ %Arg_1.2, %reduce-group-0-true ], [ %add.10.i440, %y_in_tile.loop_body ]
  %scevgep593 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 -4
  %28 = load <2 x float>, ptr addrspace(1) %scevgep593, align 8, !invariant.load !267
  %Arg_0.13632 = extractelement <2 x float> %28, i32 0
  %Arg_0.18633 = extractelement <2 x float> %28, i32 1
  %add.10.i = fadd float %partial_reduction_result375.sroa.0.0515, %Arg_0.13632
  %add.10.i440 = fadd float %partial_reduction_result375.sroa.4.0514, %Arg_0.18633
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep592 = getelementptr i8, ptr addrspace(1) %lsr.iv591, i64 65536
  %29 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %29, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_body
  %30 = zext i32 %thread_id.x to i64
  %31 = zext i32 %thread_id.y380 to i64
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i64 0, i64 0, i64 0, i64 %30, i64 %31
  store float %add.10.i, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i64 0, i64 0, i64 0, i64 %31, i64 %30
  %partial_reduction_result10 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %32 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  %add.10.i441 = fadd float %partial_reduction_result10, %32
  %33 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i441, i32 8, i32 31)
  %add.10.i442 = fadd float %add.10.i441, %33
  %34 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i442, i32 4, i32 31)
  %add.10.i443 = fadd float %add.10.i442, %34
  %35 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i443, i32 2, i32 31)
  %add.10.i444 = fadd float %add.10.i443, %35
  %36 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i444, i32 1, i32 31)
  %add.10.i445 = fadd float %add.10.i444, %36
  store float %add.10.i445, ptr addrspace(3) %shmem_transposed_addr, align 4
  %37 = shl nuw nsw i32 %thread_id.y380, 1
  %38 = icmp eq i32 %thread_id.x, 0
  %39 = or i32 %37, %tile_origin.2
  %40 = zext i32 %39 to i64
  %output_element_address = getelementptr inbounds [512 x float], ptr addrspace(1) %arg6554, i64 0, i64 %40
  br i1 %38, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %41 = icmp eq i32 %thread_id.x, 0
  %shmem_output_address24565 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address, i64 1056
  store float %add.10.i440, ptr addrspace(3) %shmem_output_address24565, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26566 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr, i64 1056
  %partial_reduction_result28 = load float, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  %add.10.i446 = fadd float %partial_reduction_result28, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i446, i32 8, i32 31)
  %add.10.i447 = fadd float %add.10.i446, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i447, i32 4, i32 31)
  %add.10.i448 = fadd float %add.10.i447, %44
  %45 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i448, i32 2, i32 31)
  %add.10.i449 = fadd float %add.10.i448, %45
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.10.i449, i32 1, i32 31)
  %add.10.i450 = fadd float %add.10.i449, %46
  store float %add.10.i450, ptr addrspace(3) %shmem_transposed_addr26566, align 4
  br i1 %41, label %common.ret.sink.split, label %common.ret

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.10.i445, ptr addrspace(1) %output_element_address, align 8
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %entry
  %47 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %48 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x50 = and i32 %48, 31
  %thread_id.y51379 = lshr i32 %48, 5
  %tile_origin.257 = shl nuw nsw i32 %47, 6
  %Arg_1.248 = load float, ptr addrspace(1) %arg1544, align 128, !invariant.load !267
  %49 = shl nuw nsw i32 %thread_id.x50, 1
  %50 = or i32 %49, %tile_origin.257
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i32 %thread_id.y51379, -32
  %53 = zext i32 %48 to i64
  %54 = lshr i64 %53, 5
  %55 = shl nuw nsw i64 %54, 11
  %56 = shl nuw nsw i64 %51, 2
  %57 = add i64 %55, %56
  %58 = add i64 %57, 4
  %scevgep596 = getelementptr i8, ptr addrspace(1) %arg2546, i64 %58
  br label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %reduce-group-1-true, %y_in_tile.loop_body60
  %lsr.iv597 = phi ptr addrspace(1) [ %scevgep596, %reduce-group-1-true ], [ %scevgep598, %y_in_tile.loop_body60 ]
  %lsr.iv594 = phi i32 [ %52, %reduce-group-1-true ], [ %lsr.iv.next595, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.4.0496 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i451, %y_in_tile.loop_body60 ]
  %partial_reduction_result47374.sroa.0.0495 = phi float [ %Arg_1.248, %reduce-group-1-true ], [ %add.15.i, %y_in_tile.loop_body60 ]
  %scevgep599 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 -4
  %59 = load <2 x float>, ptr addrspace(1) %scevgep599, align 8, !invariant.load !267
  %Arg_2.373634 = extractelement <2 x float> %59, i32 0
  %Arg_2.379635 = extractelement <2 x float> %59, i32 1
  %add.15.i = fadd float %partial_reduction_result47374.sroa.0.0495, %Arg_2.373634
  %add.15.i451 = fadd float %partial_reduction_result47374.sroa.4.0496, %Arg_2.379635
  %lsr.iv.next595 = add nsw i32 %lsr.iv594, 32
  %scevgep598 = getelementptr i8, ptr addrspace(1) %lsr.iv597, i64 65536
  %60 = icmp ugt i32 %lsr.iv.next595, 31
  br i1 %60, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_body60
  %61 = zext i32 %thread_id.x50 to i64
  %62 = zext i32 %thread_id.y51379 to i64
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i64 0, i64 0, i64 0, i64 %61, i64 %62
  store float %add.15.i, ptr addrspace(3) %shmem_output_address81, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i64 0, i64 0, i64 0, i64 %62, i64 %61
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %63 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.15.i452 = fadd float %partial_reduction_result85, %63
  %64 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i452, i32 8, i32 31)
  %add.15.i453 = fadd float %add.15.i452, %64
  %65 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i453, i32 4, i32 31)
  %add.15.i454 = fadd float %add.15.i453, %65
  %66 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i454, i32 2, i32 31)
  %add.15.i455 = fadd float %add.15.i454, %66
  %67 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i455, i32 1, i32 31)
  %add.15.i456 = fadd float %add.15.i455, %67
  store float %add.15.i456, ptr addrspace(3) %shmem_transposed_addr83, align 4
  %68 = shl nuw nsw i32 %thread_id.y51379, 1
  %69 = icmp eq i32 %thread_id.x50, 0
  %70 = or i32 %68, %tile_origin.257
  %71 = zext i32 %70 to i64
  %output_element_address101 = getelementptr inbounds [512 x float], ptr addrspace(1) %arg7556, i64 0, i64 %71
  br i1 %69, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %72 = icmp eq i32 %thread_id.x50, 0
  %shmem_output_address103568 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address81, i64 1056
  store float %add.15.i451, ptr addrspace(3) %shmem_output_address103568, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105569 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr83, i64 1056
  %partial_reduction_result107 = load float, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  %73 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  %add.15.i457 = fadd float %partial_reduction_result107, %73
  %74 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i457, i32 8, i32 31)
  %add.15.i458 = fadd float %add.15.i457, %74
  %75 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i458, i32 4, i32 31)
  %add.15.i459 = fadd float %add.15.i458, %75
  %76 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i459, i32 2, i32 31)
  %add.15.i460 = fadd float %add.15.i459, %76
  %77 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.15.i460, i32 1, i32 31)
  %add.15.i461 = fadd float %add.15.i460, %77
  store float %add.15.i461, ptr addrspace(3) %shmem_transposed_addr105569, align 4
  br i1 %72, label %common.ret.sink.split, label %common.ret

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  store float %add.15.i456, ptr addrspace(1) %output_element_address101, align 8
  br label %reduction_write_output-after100

y_in_tile.loop_body139:                           ; preds = %entry.reduce-group-2-true_crit_edge, %y_in_tile.loop_body139
  %lsr.iv617 = phi ptr addrspace(1) [ %scevgep616, %entry.reduce-group-2-true_crit_edge ], [ %scevgep618, %y_in_tile.loop_body139 ]
  %lsr.iv614 = phi i32 [ %7, %entry.reduce-group-2-true_crit_edge ], [ %lsr.iv.next615, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.4.0500 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i462, %y_in_tile.loop_body139 ]
  %partial_reduction_result126373.sroa.0.0499 = phi float [ %Arg_1.2127.pre, %entry.reduce-group-2-true_crit_edge ], [ %add.20.i, %y_in_tile.loop_body139 ]
  %scevgep619 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 -4
  %78 = load <2 x float>, ptr addrspace(1) %scevgep619, align 8, !invariant.load !267
  %Arg_3.4152638 = extractelement <2 x float> %78, i32 0
  %Arg_3.4158639 = extractelement <2 x float> %78, i32 1
  %add.20.i = fadd float %partial_reduction_result126373.sroa.0.0499, %Arg_3.4152638
  %add.20.i462 = fadd float %partial_reduction_result126373.sroa.4.0500, %Arg_3.4158639
  %lsr.iv.next615 = add nsw i32 %lsr.iv614, 32
  %scevgep618 = getelementptr i8, ptr addrspace(1) %lsr.iv617, i64 65536
  %79 = icmp ugt i32 %lsr.iv.next615, 31
  br i1 %79, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_body139
  %80 = zext i32 %.pre524 to i64
  %81 = zext i32 %.pre525 to i64
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i64 0, i64 0, i64 0, i64 %80, i64 %81
  store float %add.20.i, ptr addrspace(3) %shmem_output_address160, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i64 0, i64 0, i64 0, i64 %81, i64 %80
  %partial_reduction_result164 = load float, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %82 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  %add.20.i463 = fadd float %partial_reduction_result164, %82
  %83 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i463, i32 8, i32 31)
  %add.20.i464 = fadd float %add.20.i463, %83
  %84 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i464, i32 4, i32 31)
  %add.20.i465 = fadd float %add.20.i464, %84
  %85 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i465, i32 2, i32 31)
  %add.20.i466 = fadd float %add.20.i465, %85
  %86 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i466, i32 1, i32 31)
  %add.20.i467 = fadd float %add.20.i466, %86
  store float %add.20.i467, ptr addrspace(3) %shmem_transposed_addr162, align 4
  %87 = shl nuw nsw i32 %.pre525, 1
  %88 = icmp eq i32 %.pre524, 0
  %89 = or i32 %87, %.pre526
  %90 = zext i32 %89 to i64
  %output_element_address180 = getelementptr inbounds [512 x float], ptr addrspace(1) %arg8558, i64 0, i64 %90
  br i1 %88, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %91 = icmp eq i32 %.pre524, 0
  %shmem_output_address182571 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address160, i64 1056
  store float %add.20.i462, ptr addrspace(3) %shmem_output_address182571, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184572 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr162, i64 1056
  %partial_reduction_result186 = load float, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  %92 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  %add.20.i468 = fadd float %partial_reduction_result186, %92
  %93 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i468, i32 8, i32 31)
  %add.20.i469 = fadd float %add.20.i468, %93
  %94 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i469, i32 4, i32 31)
  %add.20.i470 = fadd float %add.20.i469, %94
  %95 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i470, i32 2, i32 31)
  %add.20.i471 = fadd float %add.20.i470, %95
  %96 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.20.i471, i32 1, i32 31)
  %add.20.i472 = fadd float %add.20.i471, %96
  store float %add.20.i472, ptr addrspace(3) %shmem_transposed_addr184572, align 4
  br i1 %91, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %common.ret

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  store float %add.20.i467, ptr addrspace(1) %output_element_address180, align 8
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %sunkaddr = getelementptr inbounds i8, ptr addrspace(1) %output_element_address180, i64 4
  store float %add.20.i472, ptr addrspace(1) %sunkaddr, align 4
  br label %reduction_write_output-after201

y_in_tile.loop_body218:                           ; preds = %entry.reduce-group-3-true_crit_edge, %y_in_tile.loop_body218
  %lsr.iv611 = phi ptr addrspace(1) [ %scevgep610, %entry.reduce-group-3-true_crit_edge ], [ %scevgep612, %y_in_tile.loop_body218 ]
  %lsr.iv608 = phi i32 [ %.pre620, %entry.reduce-group-3-true_crit_edge ], [ %lsr.iv.next609, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.4.0505 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i473, %y_in_tile.loop_body218 ]
  %partial_reduction_result205372.sroa.0.0504 = phi float [ %Arg_1.2206.pre, %entry.reduce-group-3-true_crit_edge ], [ %add.25.i, %y_in_tile.loop_body218 ]
  %scevgep613 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 -4
  %97 = load <2 x float>, ptr addrspace(1) %scevgep613, align 8, !invariant.load !267
  %Arg_4.5231636 = extractelement <2 x float> %97, i32 0
  %Arg_4.5237637 = extractelement <2 x float> %97, i32 1
  %add.25.i = fadd float %partial_reduction_result205372.sroa.0.0504, %Arg_4.5231636
  %add.25.i473 = fadd float %partial_reduction_result205372.sroa.4.0505, %Arg_4.5237637
  %lsr.iv.next609 = add nsw i32 %lsr.iv608, 32
  %scevgep612 = getelementptr i8, ptr addrspace(1) %lsr.iv611, i64 65536
  %98 = icmp ugt i32 %lsr.iv.next609, 31
  br i1 %98, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_body218
  %99 = zext i32 %.pre531 to i64
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i64 0, i64 0, i64 0, i64 %99, i64 %.pre622
  store float %add.25.i, ptr addrspace(3) %shmem_output_address239, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i64 0, i64 0, i64 0, i64 %.pre622, i64 %99
  %partial_reduction_result243 = load float, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %100 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  %add.25.i474 = fadd float %partial_reduction_result243, %100
  %101 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i474, i32 8, i32 31)
  %add.25.i475 = fadd float %add.25.i474, %101
  %102 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i475, i32 4, i32 31)
  %add.25.i476 = fadd float %add.25.i475, %102
  %103 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i476, i32 2, i32 31)
  %add.25.i477 = fadd float %add.25.i476, %103
  %104 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i477, i32 1, i32 31)
  %add.25.i478 = fadd float %add.25.i477, %104
  store float %add.25.i478, ptr addrspace(3) %shmem_transposed_addr241, align 4
  %105 = shl nuw nsw i32 %.pre532, 1
  %106 = icmp eq i32 %.pre531, 0
  %107 = or i32 %105, %.pre533
  %108 = zext i32 %107 to i64
  %output_element_address259 = getelementptr [512 x float], ptr addrspace(1) %arg9560, i64 0, i64 %108
  br i1 %106, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %109 = icmp eq i32 %.pre531, 0
  %shmem_output_address261575 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address239, i64 1056
  store float %add.25.i473, ptr addrspace(3) %shmem_output_address261575, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263576 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr241, i64 1056
  %partial_reduction_result265 = load float, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  %110 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  %add.25.i479 = fadd float %partial_reduction_result265, %110
  %111 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i479, i32 8, i32 31)
  %add.25.i480 = fadd float %add.25.i479, %111
  %112 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i480, i32 4, i32 31)
  %add.25.i481 = fadd float %add.25.i480, %112
  %113 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i481, i32 2, i32 31)
  %add.25.i482 = fadd float %add.25.i481, %113
  %114 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.25.i482, i32 1, i32 31)
  %add.25.i483 = fadd float %add.25.i482, %114
  store float %add.25.i483, ptr addrspace(3) %shmem_transposed_addr263576, align 4
  br i1 %109, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  %115 = icmp eq i32 %0, 4
  br i1 %115, label %y_in_tile.loop_body297.lr.ph, label %common.ret

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  store float %add.25.i478, ptr addrspace(1) %output_element_address259, align 8
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %sunkaddr640 = getelementptr inbounds i8, ptr addrspace(1) %output_element_address259, i64 4
  store float %add.25.i483, ptr addrspace(1) %sunkaddr640, align 4
  br label %reduction_write_output-after280

y_in_tile.loop_body297.lr.ph:                     ; preds = %reduction_write_output-after280, %entry.reduce-group-4-true_crit_edge
  %.pre-phi631 = phi i64 [ %.pre630, %entry.reduce-group-4-true_crit_edge ], [ %.pre624, %reduction_write_output-after280 ]
  %.pre-phi629 = phi i64 [ %.pre628, %entry.reduce-group-4-true_crit_edge ], [ %.pre622, %reduction_write_output-after280 ]
  %.pre-phi627 = phi i32 [ %.pre626, %entry.reduce-group-4-true_crit_edge ], [ %.pre620, %reduction_write_output-after280 ]
  %.pre-phi590 = phi i64 [ %.pre589, %entry.reduce-group-4-true_crit_edge ], [ %.pre583, %reduction_write_output-after280 ]
  %.pre-phi588 = phi i32 [ %.pre587, %entry.reduce-group-4-true_crit_edge ], [ %.pre581, %reduction_write_output-after280 ]
  %tile_origin.2294.pre-phi = phi i32 [ %.pre540, %entry.reduce-group-4-true_crit_edge ], [ %.pre533, %reduction_write_output-after280 ]
  %thread_id.y288376.pre-phi = phi i32 [ %.pre539, %entry.reduce-group-4-true_crit_edge ], [ %.pre532, %reduction_write_output-after280 ]
  %thread_id.x287.pre-phi = phi i32 [ %.pre538, %entry.reduce-group-4-true_crit_edge ], [ %.pre531, %reduction_write_output-after280 ]
  %Arg_1.2285 = phi float [ %Arg_1.2285.pre, %entry.reduce-group-4-true_crit_edge ], [ %Arg_1.2206.pre, %reduction_write_output-after280 ]
  %116 = or i32 %.pre-phi588, 1
  %117 = zext i32 %116 to i64
  %118 = shl nuw nsw i64 %.pre-phi629, 11
  %119 = add nuw nsw i64 %118, %.pre-phi631
  %scevgep602 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %119
  %120 = shl nuw nsw i64 %117, 2
  %121 = add nuw nsw i64 %118, %120
  %scevgep605 = getelementptr i8, ptr addrspace(1) %arg5552, i64 %121
  br label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_body297.lr.ph, %y_in_tile.loop_body297
  %lsr.iv606 = phi ptr addrspace(1) [ %scevgep605, %y_in_tile.loop_body297.lr.ph ], [ %scevgep607, %y_in_tile.loop_body297 ]
  %lsr.iv603 = phi ptr addrspace(1) [ %scevgep602, %y_in_tile.loop_body297.lr.ph ], [ %scevgep604, %y_in_tile.loop_body297 ]
  %lsr.iv600 = phi i32 [ %.pre-phi627, %y_in_tile.loop_body297.lr.ph ], [ %lsr.iv.next601, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.4.0510 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i484, %y_in_tile.loop_body297 ]
  %partial_reduction_result284371.sroa.0.0509 = phi float [ %Arg_1.2285, %y_in_tile.loop_body297.lr.ph ], [ %add.30.i, %y_in_tile.loop_body297 ]
  %Arg_5.6310 = load float, ptr addrspace(1) %lsr.iv603, align 8, !invariant.load !267
  %add.30.i = fadd float %partial_reduction_result284371.sroa.0.0509, %Arg_5.6310
  %Arg_5.6316 = load float, ptr addrspace(1) %lsr.iv606, align 4, !invariant.load !267
  %add.30.i484 = fadd float %partial_reduction_result284371.sroa.4.0510, %Arg_5.6316
  %lsr.iv.next601 = add nsw i32 %lsr.iv600, 32
  %scevgep604 = getelementptr i8, ptr addrspace(1) %lsr.iv603, i64 65536
  %scevgep607 = getelementptr i8, ptr addrspace(1) %lsr.iv606, i64 65536
  %122 = icmp ugt i32 %lsr.iv.next601, 31
  br i1 %122, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_body297
  %123 = zext i32 %thread_id.x287.pre-phi to i64
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i64 0, i64 0, i64 0, i64 %123, i64 %.pre-phi629
  store float %add.30.i, ptr addrspace(3) %shmem_output_address318, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i64 0, i64 0, i64 0, i64 %.pre-phi629, i64 %123
  %partial_reduction_result322 = load float, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %124 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  %add.30.i485 = fadd float %partial_reduction_result322, %124
  %125 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i485, i32 8, i32 31)
  %add.30.i486 = fadd float %add.30.i485, %125
  %126 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i486, i32 4, i32 31)
  %add.30.i487 = fadd float %add.30.i486, %126
  %127 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i487, i32 2, i32 31)
  %add.30.i488 = fadd float %add.30.i487, %127
  %128 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i488, i32 1, i32 31)
  %add.30.i489 = fadd float %add.30.i488, %128
  store float %add.30.i489, ptr addrspace(3) %shmem_transposed_addr320, align 4
  %129 = shl nuw nsw i32 %thread_id.y288376.pre-phi, 1
  %130 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %131 = or i32 %129, %tile_origin.2294.pre-phi
  %132 = zext i32 %131 to i64
  %output_element_address338 = getelementptr inbounds [512 x float], ptr addrspace(1) %arg10562, i64 0, i64 %132
  br i1 %130, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %133 = icmp eq i32 %thread_id.x287.pre-phi, 0
  %shmem_output_address340578 = getelementptr inbounds float, ptr addrspace(3) %shmem_output_address318, i64 1056
  store float %add.30.i484, ptr addrspace(3) %shmem_output_address340578, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342579 = getelementptr inbounds float, ptr addrspace(3) %shmem_transposed_addr320, i64 1056
  %partial_reduction_result344 = load float, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  %134 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  %add.30.i490 = fadd float %partial_reduction_result344, %134
  %135 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i490, i32 8, i32 31)
  %add.30.i491 = fadd float %add.30.i490, %135
  %136 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i491, i32 4, i32 31)
  %add.30.i492 = fadd float %add.30.i491, %136
  %137 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i492, i32 2, i32 31)
  %add.30.i493 = fadd float %add.30.i492, %137
  %138 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.30.i493, i32 1, i32 31)
  %add.30.i494 = fadd float %add.30.i493, %138
  store float %add.30.i494, ptr addrspace(3) %shmem_transposed_addr342579, align 4
  br i1 %133, label %common.ret.sink.split, label %common.ret

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  store float %add.30.i489, ptr addrspace(1) %output_element_address338, align 8
  br label %reduction_write_output-after337
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_362(ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg0, ptr noalias nocapture align 128 dereferenceable(2048) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg3, ptr noalias nocapture align 128 dereferenceable(2048) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg5, ptr noalias nocapture align 128 dereferenceable(2048) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg7, ptr noalias nocapture align 128 dereferenceable(2048) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg9, ptr noalias nocapture align 128 dereferenceable(2048) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg11, ptr noalias nocapture align 128 dereferenceable(2048) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(2048) %arg13, ptr noalias nocapture align 128 dereferenceable(2048) %arg14) local_unnamed_addr #6 {
entry:
  %arg1431 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1329 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1227 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1125 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1023 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg921 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg819 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg717 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg615 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg513 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg411 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg15, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.17 = fmul float %4, %6
  %subtract.18 = fsub float %3, %multiply.17
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %1
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg411, i64 %1
  %10 = load float, ptr addrspace(1) %9, align 4
  %multiply.19 = fmul float %4, %10
  %subtract.20 = fsub float %8, %multiply.19
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg513, i64 %1
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg615, i64 %1
  %14 = load float, ptr addrspace(1) %13, align 4
  %multiply.21 = fmul float %4, %14
  %subtract.22 = fsub float %12, %multiply.21
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg717, i64 %1
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg819, i64 %1
  %18 = load float, ptr addrspace(1) %17, align 4
  %multiply.23 = fmul float %4, %18
  %subtract.24 = fsub float %16, %multiply.23
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg921, i64 %1
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg1023, i64 %1
  %22 = load float, ptr addrspace(1) %21, align 4
  %multiply.25 = fmul float %4, %22
  %subtract.26 = fsub float %20, %multiply.25
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1125, i64 %1
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1227, i64 %1
  %26 = load float, ptr addrspace(1) %25, align 4
  %multiply.27 = fmul float %4, %26
  %subtract.28 = fsub float %24, %multiply.27
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1329, i64 %1
  %28 = load float, ptr addrspace(1) %27, align 4, !invariant.load !267
  %29 = getelementptr inbounds float, ptr addrspace(1) %arg1431, i64 %1
  %30 = load float, ptr addrspace(1) %29, align 4
  %multiply.29 = fmul float %4, %30
  %subtract.30 = fsub float %28, %multiply.29
  store float %subtract.18, ptr addrspace(1) %29, align 4
  store float %subtract.20, ptr addrspace(1) %25, align 4
  store float %subtract.22, ptr addrspace(1) %21, align 4
  store float %subtract.24, ptr addrspace(1) %17, align 4
  store float %subtract.26, ptr addrspace(1) %13, align 4
  store float %subtract.28, ptr addrspace(1) %9, align 4
  store float %subtract.30, ptr addrspace(1) %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_48(ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg0, ptr noalias nocapture align 128 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg3, ptr noalias nocapture align 128 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg5, ptr noalias nocapture align 128 dereferenceable(32768) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg7, ptr noalias nocapture align 128 dereferenceable(32768) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg9, ptr noalias nocapture align 128 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture align 128 dereferenceable(32768) %arg12) local_unnamed_addr #6 {
entry:
  %arg1225 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1123 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1021 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg919 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg817 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg715 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg613 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg511 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg49 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = zext i32 %linear_index to i64
  %4 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %3
  %5 = load float, ptr addrspace(1) %4, align 4, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %3
  %8 = load float, ptr addrspace(1) %7, align 4
  %multiply.15 = fmul float %6, %8
  %subtract.16 = fsub float %5, %multiply.15
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %3
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg49, i64 %3
  %12 = load float, ptr addrspace(1) %11, align 4
  %multiply.17 = fmul float %6, %12
  %subtract.18 = fsub float %10, %multiply.17
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg511, i64 %3
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg613, i64 %3
  %16 = load float, ptr addrspace(1) %15, align 4
  %multiply.19 = fmul float %6, %16
  %subtract.20 = fsub float %14, %multiply.19
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg715, i64 %3
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg817, i64 %3
  %20 = load float, ptr addrspace(1) %19, align 4
  %multiply.21 = fmul float %6, %20
  %subtract.22 = fsub float %18, %multiply.21
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg919, i64 %3
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1021, i64 %3
  %24 = load float, ptr addrspace(1) %23, align 4
  %multiply.23 = fmul float %6, %24
  %subtract.24 = fsub float %22, %multiply.23
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1123, i64 %3
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1225, i64 %3
  %28 = load float, ptr addrspace(1) %27, align 4
  %multiply.25 = fmul float %6, %28
  %subtract.26 = fsub float %26, %multiply.25
  store float %subtract.16, ptr addrspace(1) %27, align 4
  store float %subtract.18, ptr addrspace(1) %23, align 4
  store float %subtract.20, ptr addrspace(1) %19, align 4
  store float %subtract.22, ptr addrspace(1) %15, align 4
  store float %subtract.24, ptr addrspace(1) %11, align 4
  store float %subtract.26, ptr addrspace(1) %7, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_45(ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg0, ptr noalias nocapture align 128 dereferenceable(114688) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg3, ptr noalias nocapture align 128 dereferenceable(114688) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg5, ptr noalias nocapture align 128 dereferenceable(114688) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg7, ptr noalias nocapture align 128 dereferenceable(114688) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg9, ptr noalias nocapture align 128 dereferenceable(114688) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(114688) %arg11, ptr noalias nocapture align 128 dereferenceable(114688) %arg12) local_unnamed_addr #6 {
entry:
  %arg1225 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1123 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1021 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg919 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg817 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg715 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg613 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg511 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg49 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg37 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !273
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %linear_index = or i32 %1, %2
  %3 = zext i32 %linear_index to i64
  %4 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %3
  %5 = load float, ptr addrspace(1) %4, align 4, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %3
  %8 = load float, ptr addrspace(1) %7, align 4
  %multiply.15 = fmul float %6, %8
  %subtract.16 = fsub float %5, %multiply.15
  %9 = getelementptr inbounds float, ptr addrspace(1) %arg37, i64 %3
  %10 = load float, ptr addrspace(1) %9, align 4, !invariant.load !267
  %11 = getelementptr inbounds float, ptr addrspace(1) %arg49, i64 %3
  %12 = load float, ptr addrspace(1) %11, align 4
  %multiply.17 = fmul float %6, %12
  %subtract.18 = fsub float %10, %multiply.17
  %13 = getelementptr inbounds float, ptr addrspace(1) %arg511, i64 %3
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg613, i64 %3
  %16 = load float, ptr addrspace(1) %15, align 4
  %multiply.19 = fmul float %6, %16
  %subtract.20 = fsub float %14, %multiply.19
  %17 = getelementptr inbounds float, ptr addrspace(1) %arg715, i64 %3
  %18 = load float, ptr addrspace(1) %17, align 4, !invariant.load !267
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg817, i64 %3
  %20 = load float, ptr addrspace(1) %19, align 4
  %multiply.21 = fmul float %6, %20
  %subtract.22 = fsub float %18, %multiply.21
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg919, i64 %3
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = getelementptr inbounds float, ptr addrspace(1) %arg1021, i64 %3
  %24 = load float, ptr addrspace(1) %23, align 4
  %multiply.23 = fmul float %6, %24
  %subtract.24 = fsub float %22, %multiply.23
  %25 = getelementptr inbounds float, ptr addrspace(1) %arg1123, i64 %3
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %27 = getelementptr inbounds float, ptr addrspace(1) %arg1225, i64 %3
  %28 = load float, ptr addrspace(1) %27, align 4
  %multiply.25 = fmul float %6, %28
  %subtract.26 = fsub float %26, %multiply.25
  store float %subtract.16, ptr addrspace(1) %27, align 4
  store float %subtract.18, ptr addrspace(1) %23, align 4
  store float %subtract.20, ptr addrspace(1) %19, align 4
  store float %subtract.22, ptr addrspace(1) %15, align 4
  store float %subtract.24, ptr addrspace(1) %11, align 4
  store float %subtract.26, ptr addrspace(1) %7, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_49(ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg0, ptr noalias nocapture align 128 dereferenceable(3031040) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg3, ptr noalias nocapture align 128 dereferenceable(3031040) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg5, ptr noalias nocapture align 128 dereferenceable(3031040) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg7, ptr noalias nocapture align 128 dereferenceable(3031040) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg9, ptr noalias nocapture align 128 dereferenceable(3031040) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(3031040) %arg11, ptr noalias nocapture align 128 dereferenceable(3031040) %arg12) local_unnamed_addr #6 {
entry:
  %arg1261 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1159 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1057 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg955 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg853 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg751 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg649 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg547 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg445 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg343 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg241 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg139 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg037 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !316
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %4 = zext i32 %linear_index_base to i64
  %5 = getelementptr float, ptr addrspace(1) %arg037, i64 %4
  %6 = load <4 x float>, ptr addrspace(1) %5, align 16, !invariant.load !267
  %7 = extractelement <4 x float> %6, i32 0
  %8 = extractelement <4 x float> %6, i32 1
  %9 = extractelement <4 x float> %6, i32 2
  %10 = extractelement <4 x float> %6, i32 3
  %11 = load float, ptr addrspace(1) %arg241, align 16, !invariant.load !267
  %12 = getelementptr float, ptr addrspace(1) %arg139, i64 %4
  %13 = load <4 x float>, ptr addrspace(1) %12, align 16
  %14 = extractelement <4 x float> %13, i32 0
  %15 = extractelement <4 x float> %13, i32 1
  %16 = extractelement <4 x float> %13, i32 2
  %17 = extractelement <4 x float> %13, i32 3
  %multiply.15 = fmul float %11, %14
  %subtract.16 = fsub float %7, %multiply.15
  %18 = getelementptr float, ptr addrspace(1) %arg343, i64 %4
  %19 = load <4 x float>, ptr addrspace(1) %18, align 16, !invariant.load !267
  %20 = extractelement <4 x float> %19, i32 0
  %21 = extractelement <4 x float> %19, i32 1
  %22 = extractelement <4 x float> %19, i32 2
  %23 = extractelement <4 x float> %19, i32 3
  %24 = getelementptr float, ptr addrspace(1) %arg445, i64 %4
  %25 = load <4 x float>, ptr addrspace(1) %24, align 16
  %26 = extractelement <4 x float> %25, i32 0
  %27 = extractelement <4 x float> %25, i32 1
  %28 = extractelement <4 x float> %25, i32 2
  %29 = extractelement <4 x float> %25, i32 3
  %multiply.17 = fmul float %11, %26
  %subtract.18 = fsub float %20, %multiply.17
  %30 = getelementptr float, ptr addrspace(1) %arg547, i64 %4
  %31 = load <4 x float>, ptr addrspace(1) %30, align 16, !invariant.load !267
  %32 = extractelement <4 x float> %31, i32 0
  %33 = extractelement <4 x float> %31, i32 1
  %34 = extractelement <4 x float> %31, i32 2
  %35 = extractelement <4 x float> %31, i32 3
  %36 = getelementptr float, ptr addrspace(1) %arg649, i64 %4
  %37 = load <4 x float>, ptr addrspace(1) %36, align 16
  %38 = extractelement <4 x float> %37, i32 0
  %39 = extractelement <4 x float> %37, i32 1
  %40 = extractelement <4 x float> %37, i32 2
  %41 = extractelement <4 x float> %37, i32 3
  %multiply.19 = fmul float %11, %38
  %subtract.20 = fsub float %32, %multiply.19
  %42 = getelementptr float, ptr addrspace(1) %arg751, i64 %4
  %43 = load <4 x float>, ptr addrspace(1) %42, align 16, !invariant.load !267
  %44 = extractelement <4 x float> %43, i32 0
  %45 = extractelement <4 x float> %43, i32 1
  %46 = extractelement <4 x float> %43, i32 2
  %47 = extractelement <4 x float> %43, i32 3
  %48 = getelementptr float, ptr addrspace(1) %arg853, i64 %4
  %49 = load <4 x float>, ptr addrspace(1) %48, align 16
  %50 = extractelement <4 x float> %49, i32 0
  %51 = extractelement <4 x float> %49, i32 1
  %52 = extractelement <4 x float> %49, i32 2
  %53 = extractelement <4 x float> %49, i32 3
  %multiply.21 = fmul float %11, %50
  %subtract.22 = fsub float %44, %multiply.21
  %54 = getelementptr float, ptr addrspace(1) %arg955, i64 %4
  %55 = load <4 x float>, ptr addrspace(1) %54, align 16, !invariant.load !267
  %56 = extractelement <4 x float> %55, i32 0
  %57 = extractelement <4 x float> %55, i32 1
  %58 = extractelement <4 x float> %55, i32 2
  %59 = extractelement <4 x float> %55, i32 3
  %60 = getelementptr float, ptr addrspace(1) %arg1057, i64 %4
  %61 = load <4 x float>, ptr addrspace(1) %60, align 16
  %62 = extractelement <4 x float> %61, i32 0
  %63 = extractelement <4 x float> %61, i32 1
  %64 = extractelement <4 x float> %61, i32 2
  %65 = extractelement <4 x float> %61, i32 3
  %multiply.23 = fmul float %11, %62
  %subtract.24 = fsub float %56, %multiply.23
  %66 = getelementptr float, ptr addrspace(1) %arg1159, i64 %4
  %67 = load <4 x float>, ptr addrspace(1) %66, align 16, !invariant.load !267
  %68 = extractelement <4 x float> %67, i32 0
  %69 = extractelement <4 x float> %67, i32 1
  %70 = extractelement <4 x float> %67, i32 2
  %71 = extractelement <4 x float> %67, i32 3
  %72 = getelementptr float, ptr addrspace(1) %arg1261, i64 %4
  %73 = load <4 x float>, ptr addrspace(1) %72, align 16
  %74 = extractelement <4 x float> %73, i32 0
  %75 = extractelement <4 x float> %73, i32 1
  %76 = extractelement <4 x float> %73, i32 2
  %77 = extractelement <4 x float> %73, i32 3
  %multiply.25 = fmul float %11, %74
  %subtract.26 = fsub float %68, %multiply.25
  %multiply.151 = fmul float %11, %15
  %subtract.162 = fsub float %8, %multiply.151
  %multiply.173 = fmul float %11, %27
  %subtract.184 = fsub float %21, %multiply.173
  %multiply.195 = fmul float %11, %39
  %subtract.206 = fsub float %33, %multiply.195
  %multiply.217 = fmul float %11, %51
  %subtract.228 = fsub float %45, %multiply.217
  %multiply.239 = fmul float %11, %63
  %subtract.2410 = fsub float %57, %multiply.239
  %multiply.2511 = fmul float %11, %75
  %subtract.2612 = fsub float %69, %multiply.2511
  %multiply.1513 = fmul float %11, %16
  %subtract.1614 = fsub float %9, %multiply.1513
  %multiply.1715 = fmul float %11, %28
  %subtract.1816 = fsub float %22, %multiply.1715
  %multiply.1917 = fmul float %11, %40
  %subtract.2018 = fsub float %34, %multiply.1917
  %multiply.2119 = fmul float %11, %52
  %subtract.2220 = fsub float %46, %multiply.2119
  %multiply.2321 = fmul float %11, %64
  %subtract.2422 = fsub float %58, %multiply.2321
  %multiply.2523 = fmul float %11, %76
  %subtract.2624 = fsub float %70, %multiply.2523
  %multiply.1525 = fmul float %11, %17
  %subtract.1626 = fsub float %10, %multiply.1525
  %multiply.1727 = fmul float %11, %29
  %subtract.1828 = fsub float %23, %multiply.1727
  %multiply.1929 = fmul float %11, %41
  %subtract.2030 = fsub float %35, %multiply.1929
  %multiply.2131 = fmul float %11, %53
  %subtract.2232 = fsub float %47, %multiply.2131
  %multiply.2333 = fmul float %11, %65
  %subtract.2434 = fsub float %59, %multiply.2333
  %multiply.2535 = fmul float %11, %77
  %subtract.2636 = fsub float %71, %multiply.2535
  %78 = insertelement <4 x float> poison, float %subtract.16, i32 0
  %79 = insertelement <4 x float> %78, float %subtract.162, i32 1
  %80 = insertelement <4 x float> %79, float %subtract.1614, i32 2
  %81 = insertelement <4 x float> %80, float %subtract.1626, i32 3
  store <4 x float> %81, ptr addrspace(1) %72, align 16
  %82 = insertelement <4 x float> poison, float %subtract.18, i32 0
  %83 = insertelement <4 x float> %82, float %subtract.184, i32 1
  %84 = insertelement <4 x float> %83, float %subtract.1816, i32 2
  %85 = insertelement <4 x float> %84, float %subtract.1828, i32 3
  store <4 x float> %85, ptr addrspace(1) %60, align 16
  %86 = insertelement <4 x float> poison, float %subtract.20, i32 0
  %87 = insertelement <4 x float> %86, float %subtract.206, i32 1
  %88 = insertelement <4 x float> %87, float %subtract.2018, i32 2
  %89 = insertelement <4 x float> %88, float %subtract.2030, i32 3
  store <4 x float> %89, ptr addrspace(1) %48, align 16
  %90 = insertelement <4 x float> poison, float %subtract.22, i32 0
  %91 = insertelement <4 x float> %90, float %subtract.228, i32 1
  %92 = insertelement <4 x float> %91, float %subtract.2220, i32 2
  %93 = insertelement <4 x float> %92, float %subtract.2232, i32 3
  store <4 x float> %93, ptr addrspace(1) %36, align 16
  %94 = insertelement <4 x float> poison, float %subtract.24, i32 0
  %95 = insertelement <4 x float> %94, float %subtract.2410, i32 1
  %96 = insertelement <4 x float> %95, float %subtract.2422, i32 2
  %97 = insertelement <4 x float> %96, float %subtract.2434, i32 3
  store <4 x float> %97, ptr addrspace(1) %24, align 16
  %98 = insertelement <4 x float> poison, float %subtract.26, i32 0
  %99 = insertelement <4 x float> %98, float %subtract.2612, i32 1
  %100 = insertelement <4 x float> %99, float %subtract.2624, i32 2
  %101 = insertelement <4 x float> %100, float %subtract.2636, i32 3
  store <4 x float> %101, ptr addrspace(1) %12, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_662(ptr noalias nocapture readonly align 128 dereferenceable(14417920) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !270
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 7
  %5 = and i32 %linear_index3, 127
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 126
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 125
  %8 = and i32 %3, 124
  %9 = zext i32 %4 to i64
  %10 = zext i32 %8 to i64
  %11 = getelementptr inbounds [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = load <2 x float>, ptr addrspace(1) %11, align 16, !invariant.load !267
  %13 = extractelement <2 x float> %12, i32 0
  %14 = extractelement <2 x float> %12, i32 1
  %15 = zext i32 %linear_index_base to i64
  %16 = getelementptr float, ptr addrspace(1) %arg13, i64 %15
  %17 = zext i32 %7 to i64
  %18 = zext i32 %6 to i64
  %19 = getelementptr inbounds [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = load float, ptr addrspace(1) %19, align 8, !invariant.load !267
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = insertelement <4 x float> poison, float %13, i32 0
  %25 = insertelement <4 x float> %24, float %14, i32 1
  %26 = insertelement <4 x float> %25, float %20, i32 2
  %27 = insertelement <4 x float> %26, float %23, i32 3
  store <4 x float> %27, ptr addrspace(1) %16, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_665(ptr noalias nocapture readonly align 128 dereferenceable(14417920) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !308
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 8
  %5 = and i32 %linear_index3, 255
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 254
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 253
  %8 = and i32 %3, 252
  %9 = zext i32 %4 to i64
  %10 = zext i32 %8 to i64
  %11 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 128
  %13 = load <2 x float>, ptr addrspace(1) %12, align 16, !invariant.load !267
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = zext i32 %linear_index_base to i64
  %17 = getelementptr float, ptr addrspace(1) %arg13, i64 %16
  %18 = zext i32 %7 to i64
  %19 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = zext i32 %6 to i64
  %21 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %20
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 128
  %23 = load float, ptr addrspace(1) %22, align 8, !invariant.load !267
  %24 = zext i32 %5 to i64
  %25 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %24
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 128
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = insertelement <4 x float> poison, float %14, i32 0
  %29 = insertelement <4 x float> %28, float %15, i32 1
  %30 = insertelement <4 x float> %29, float %23, i32 2
  %31 = insertelement <4 x float> %30, float %27, i32 3
  store <4 x float> %31, ptr addrspace(1) %17, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @fusion_644(ptr noalias nocapture readonly align 128 dereferenceable(16777216) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(2949120) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(196608) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(196608) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(20119552) %arg4) local_unnamed_addr #5 {
entry:
  %arg466 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg364 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg262 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg160 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg058 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !317
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 614
  %5 = mul i32 %4, 614
  %.decomposed = sub i32 %linear_index_base.frozen, %5
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = urem i32 %linear_index1, 614
  %linear_index2 = or i32 %linear_index_base, 2
  %linear_index2.frozen = freeze i32 %linear_index2
  %7 = udiv i32 %linear_index2.frozen, 614
  %8 = mul i32 %7, 614
  %.decomposed56 = sub i32 %linear_index2.frozen, %8
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index3.frozen = freeze i32 %linear_index3
  %9 = udiv i32 %linear_index3.frozen, 614
  %10 = mul i32 %9, 614
  %.decomposed57 = sub i32 %linear_index3.frozen, %10
  %11 = icmp ult i32 %.decomposed, 518
  br i1 %11, label %concatenate.pivot.512., label %concatenate.pivot.608.

concatenate.pivot.512.:                           ; preds = %entry
  %12 = icmp ult i32 %.decomposed, 512
  br i1 %12, label %concatenate.pivot.0., label %concatenate.pivot.512.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.512.
  %13 = shl nuw nsw i32 %4, 9
  %14 = add nuw nsw i32 %13, %.decomposed
  br label %concatenate.8.merge

concatenate.pivot.512.1:                          ; preds = %concatenate.pivot.512.
  %15 = add nsw i32 %.decomposed, -512
  %16 = mul nuw nsw i32 %4, 6
  %17 = add nuw nsw i32 %15, %16
  br label %concatenate.8.merge

concatenate.pivot.608.:                           ; preds = %entry
  %18 = icmp ult i32 %.decomposed, 608
  br i1 %18, label %concatenate.pivot.518.2, label %concatenate.pivot.608.3

concatenate.pivot.518.2:                          ; preds = %concatenate.pivot.608.
  %19 = add nsw i32 %.decomposed, -518
  %20 = mul nuw nsw i32 %4, 90
  %21 = add nuw nsw i32 %19, %20
  br label %concatenate.8.merge

concatenate.pivot.608.3:                          ; preds = %concatenate.pivot.608.
  %22 = add nsw i32 %.decomposed, -608
  %23 = mul nuw nsw i32 %4, 6
  %24 = add nuw nsw i32 %22, %23
  br label %concatenate.8.merge

concatenate.8.merge:                              ; preds = %concatenate.pivot.608.3, %concatenate.pivot.518.2, %concatenate.pivot.512.1, %concatenate.pivot.0.
  %.sink49 = phi i32 [ %24, %concatenate.pivot.608.3 ], [ %21, %concatenate.pivot.518.2 ], [ %17, %concatenate.pivot.512.1 ], [ %14, %concatenate.pivot.0. ]
  %arg2.sink = phi ptr addrspace(1) [ %arg262, %concatenate.pivot.608.3 ], [ %arg160, %concatenate.pivot.518.2 ], [ %arg364, %concatenate.pivot.512.1 ], [ %arg058, %concatenate.pivot.0. ]
  %25 = zext i32 %.sink49 to i64
  %26 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink, i64 %25
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = zext i32 %linear_index_base to i64
  %29 = getelementptr float, ptr addrspace(1) %arg466, i64 %28
  store float %27, ptr addrspace(1) %29, align 16
  %30 = icmp ult i32 %6, 518
  br i1 %30, label %concatenate.pivot.512.10, label %concatenate.pivot.608.13

concatenate.pivot.512.10:                         ; preds = %concatenate.8.merge
  %31 = icmp ult i32 %6, 512
  br i1 %31, label %concatenate.pivot.0.11, label %concatenate.pivot.512.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.512.10
  %32 = shl nuw nsw i32 %4, 9
  %33 = add nuw nsw i32 %32, %6
  br label %concatenate.8.merge4

concatenate.pivot.512.12:                         ; preds = %concatenate.pivot.512.10
  %34 = add nsw i32 %6, -512
  %35 = mul nuw nsw i32 %4, 6
  %36 = add nuw nsw i32 %34, %35
  br label %concatenate.8.merge4

concatenate.pivot.608.13:                         ; preds = %concatenate.8.merge
  %37 = icmp ult i32 %6, 608
  br i1 %37, label %concatenate.pivot.518.14, label %concatenate.pivot.608.15

concatenate.pivot.518.14:                         ; preds = %concatenate.pivot.608.13
  %38 = add nsw i32 %6, -518
  %39 = mul nuw nsw i32 %4, 90
  %40 = add nuw nsw i32 %38, %39
  br label %concatenate.8.merge4

concatenate.pivot.608.15:                         ; preds = %concatenate.pivot.608.13
  %41 = add nsw i32 %6, -608
  %42 = mul nuw nsw i32 %4, 6
  %43 = add nuw nsw i32 %41, %42
  br label %concatenate.8.merge4

concatenate.8.merge4:                             ; preds = %concatenate.pivot.608.15, %concatenate.pivot.518.14, %concatenate.pivot.512.12, %concatenate.pivot.0.11
  %.sink51 = phi i32 [ %43, %concatenate.pivot.608.15 ], [ %40, %concatenate.pivot.518.14 ], [ %36, %concatenate.pivot.512.12 ], [ %33, %concatenate.pivot.0.11 ]
  %arg2.sink50 = phi ptr addrspace(1) [ %arg262, %concatenate.pivot.608.15 ], [ %arg160, %concatenate.pivot.518.14 ], [ %arg364, %concatenate.pivot.512.12 ], [ %arg058, %concatenate.pivot.0.11 ]
  %44 = zext i32 %.sink51 to i64
  %45 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink50, i64 %44
  %46 = load float, ptr addrspace(1) %45, align 4, !invariant.load !267
  %47 = getelementptr inbounds float, ptr addrspace(1) %29, i64 1
  store float %46, ptr addrspace(1) %47, align 4
  %48 = icmp ult i32 %.decomposed56, 518
  br i1 %48, label %concatenate.pivot.512.22, label %concatenate.pivot.608.25

concatenate.pivot.512.22:                         ; preds = %concatenate.8.merge4
  %49 = icmp ult i32 %.decomposed56, 512
  br i1 %49, label %concatenate.pivot.0.23, label %concatenate.pivot.512.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.512.22
  %50 = shl nuw nsw i32 %7, 9
  %51 = add nuw nsw i32 %50, %.decomposed56
  br label %concatenate.8.merge16

concatenate.pivot.512.24:                         ; preds = %concatenate.pivot.512.22
  %52 = add nsw i32 %.decomposed56, -512
  %53 = mul nuw nsw i32 %7, 6
  %54 = add nuw nsw i32 %52, %53
  br label %concatenate.8.merge16

concatenate.pivot.608.25:                         ; preds = %concatenate.8.merge4
  %55 = icmp ult i32 %.decomposed56, 608
  br i1 %55, label %concatenate.pivot.518.26, label %concatenate.pivot.608.27

concatenate.pivot.518.26:                         ; preds = %concatenate.pivot.608.25
  %56 = add nsw i32 %.decomposed56, -518
  %57 = mul nuw nsw i32 %7, 90
  %58 = add nuw nsw i32 %56, %57
  br label %concatenate.8.merge16

concatenate.pivot.608.27:                         ; preds = %concatenate.pivot.608.25
  %59 = add nsw i32 %.decomposed56, -608
  %60 = mul nuw nsw i32 %7, 6
  %61 = add nuw nsw i32 %59, %60
  br label %concatenate.8.merge16

concatenate.8.merge16:                            ; preds = %concatenate.pivot.608.27, %concatenate.pivot.518.26, %concatenate.pivot.512.24, %concatenate.pivot.0.23
  %.sink53 = phi i32 [ %61, %concatenate.pivot.608.27 ], [ %58, %concatenate.pivot.518.26 ], [ %54, %concatenate.pivot.512.24 ], [ %51, %concatenate.pivot.0.23 ]
  %arg2.sink52 = phi ptr addrspace(1) [ %arg262, %concatenate.pivot.608.27 ], [ %arg160, %concatenate.pivot.518.26 ], [ %arg364, %concatenate.pivot.512.24 ], [ %arg058, %concatenate.pivot.0.23 ]
  %62 = zext i32 %.sink53 to i64
  %63 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink52, i64 %62
  %64 = load float, ptr addrspace(1) %63, align 4, !invariant.load !267
  %65 = getelementptr inbounds float, ptr addrspace(1) %29, i64 2
  store float %64, ptr addrspace(1) %65, align 8
  %66 = icmp ult i32 %.decomposed57, 518
  br i1 %66, label %concatenate.pivot.512.34, label %concatenate.pivot.608.37

concatenate.pivot.512.34:                         ; preds = %concatenate.8.merge16
  %67 = icmp ult i32 %.decomposed57, 512
  br i1 %67, label %concatenate.pivot.0.35, label %concatenate.pivot.512.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.512.34
  %68 = shl nuw nsw i32 %9, 9
  %69 = add nuw nsw i32 %68, %.decomposed57
  br label %concatenate.8.merge28

concatenate.pivot.512.36:                         ; preds = %concatenate.pivot.512.34
  %70 = add nsw i32 %.decomposed57, -512
  %71 = mul nuw nsw i32 %9, 6
  %72 = add nuw nsw i32 %70, %71
  br label %concatenate.8.merge28

concatenate.pivot.608.37:                         ; preds = %concatenate.8.merge16
  %73 = icmp ult i32 %.decomposed57, 608
  br i1 %73, label %concatenate.pivot.518.38, label %concatenate.pivot.608.39

concatenate.pivot.518.38:                         ; preds = %concatenate.pivot.608.37
  %74 = add nsw i32 %.decomposed57, -518
  %75 = mul nuw nsw i32 %9, 90
  %76 = add nuw nsw i32 %74, %75
  br label %concatenate.8.merge28

concatenate.pivot.608.39:                         ; preds = %concatenate.pivot.608.37
  %77 = add nsw i32 %.decomposed57, -608
  %78 = mul nuw nsw i32 %9, 6
  %79 = add nuw nsw i32 %77, %78
  br label %concatenate.8.merge28

concatenate.8.merge28:                            ; preds = %concatenate.pivot.608.39, %concatenate.pivot.518.38, %concatenate.pivot.512.36, %concatenate.pivot.0.35
  %.sink55 = phi i32 [ %79, %concatenate.pivot.608.39 ], [ %76, %concatenate.pivot.518.38 ], [ %72, %concatenate.pivot.512.36 ], [ %69, %concatenate.pivot.0.35 ]
  %arg2.sink54 = phi ptr addrspace(1) [ %arg262, %concatenate.pivot.608.39 ], [ %arg160, %concatenate.pivot.518.38 ], [ %arg364, %concatenate.pivot.512.36 ], [ %arg058, %concatenate.pivot.0.35 ]
  %80 = zext i32 %.sink55 to i64
  %81 = getelementptr inbounds float, ptr addrspace(1) %arg2.sink54, i64 %80
  %82 = load float, ptr addrspace(1) %81, align 4, !invariant.load !267
  %83 = getelementptr inbounds float, ptr addrspace(1) %29, i64 3
  store float %82, ptr addrspace(1) %83, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_8(ptr noalias nocapture readonly align 16 dereferenceable(3072) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(314368) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(3072) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(3072) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(3072) %arg5) local_unnamed_addr #6 {
entry:
  %arg513 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg411 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %.lhs.trunc = trunc i32 %0 to i16
  %1 = udiv i16 %.lhs.trunc, 6
  %2 = mul i16 %1, 6
  %.decomposed = sub i16 %.lhs.trunc, %2
  %.zext2 = zext i16 %.decomposed to i32
  %3 = zext i32 %0 to i64
  %4 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %3
  %5 = load float, ptr addrspace(1) %4, align 4, !invariant.load !267
  %6 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %7 = or i32 %.zext2, 512
  %8 = zext i16 %1 to i64
  %9 = zext i32 %7 to i64
  %10 = getelementptr inbounds [128 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %8, i64 %9
  %11 = load float, ptr addrspace(1) %10, align 4, !invariant.load !267
  %multiply.7 = fmul float %6, %11
  %subtract.8 = fsub float %5, %multiply.7
  %12 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %3
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %14 = or i32 %.zext2, 608
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [128 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %8, i64 %15
  %17 = load float, ptr addrspace(1) %16, align 4, !invariant.load !267
  %multiply.10 = fmul float %6, %17
  %subtract.11 = fsub float %13, %multiply.10
  %18 = getelementptr inbounds float, ptr addrspace(1) %arg411, i64 %3
  store float %subtract.8, ptr addrspace(1) %18, align 4
  %19 = getelementptr inbounds float, ptr addrspace(1) %arg513, i64 %3
  store float %subtract.11, ptr addrspace(1) %19, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_7(ptr noalias nocapture readonly align 16 dereferenceable(6144) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(628736) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(6144) %arg3, ptr noalias nocapture writeonly align 128 dereferenceable(6144) %arg4, ptr noalias nocapture writeonly align 128 dereferenceable(6144) %arg5) local_unnamed_addr #6 {
entry:
  %arg513 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg411 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 1536
  br i1 %3, label %fusion_7.in_bounds-true, label %fusion_7.in_bounds-after

fusion_7.in_bounds-after:                         ; preds = %fusion_7.in_bounds-true, %entry
  ret void

fusion_7.in_bounds-true:                          ; preds = %entry
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %4 = udiv i16 %.lhs.trunc.frozen, 6
  %5 = mul i16 %4, 6
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %.zext2 = zext i16 %.decomposed to i32
  %6 = zext i32 %linear_index to i64
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %6
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %10 = or i32 %.zext2, 512
  %11 = zext i16 %4 to i64
  %12 = zext i32 %10 to i64
  %13 = getelementptr inbounds [256 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %11, i64 %12
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.7 = fmul float %9, %14
  %subtract.8 = fsub float %8, %multiply.7
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %6
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %17 = or i32 %.zext2, 608
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [256 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %11, i64 %18
  %20 = load float, ptr addrspace(1) %19, align 4, !invariant.load !267
  %multiply.10 = fmul float %9, %20
  %subtract.11 = fsub float %16, %multiply.10
  %21 = getelementptr inbounds float, ptr addrspace(1) %arg411, i64 %6
  store float %subtract.8, ptr addrspace(1) %21, align 4
  %22 = getelementptr inbounds float, ptr addrspace(1) %arg513, i64 %6
  store float %subtract.11, ptr addrspace(1) %22, align 4
  br label %fusion_7.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_12(ptr noalias nocapture readonly align 16 dereferenceable(46080) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(314368) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(46080) %arg3) local_unnamed_addr #6 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !269
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 11520
  br i1 %3, label %fusion_12.in_bounds-true, label %fusion_12.in_bounds-after

fusion_12.in_bounds-after:                        ; preds = %fusion_12.in_bounds-true, %entry
  ret void

fusion_12.in_bounds-true:                         ; preds = %entry
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %4 = udiv i16 %.lhs.trunc.frozen, 90
  %5 = mul i16 %4, 90
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %6 = zext i32 %linear_index to i64
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %6
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %10 = zext i16 %4 to i64
  %11 = zext i16 %.decomposed to i64
  %12 = getelementptr [128 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %11
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 518
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.6 = fmul float %9, %14
  %subtract.7 = fsub float %8, %multiply.6
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %6
  store float %subtract.7, ptr addrspace(1) %15, align 4
  br label %fusion_12.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_11(ptr noalias nocapture readonly align 16 dereferenceable(92160) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(628736) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(92160) %arg3) local_unnamed_addr #6 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !319
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 23040
  br i1 %3, label %fusion_11.in_bounds-true, label %fusion_11.in_bounds-after

fusion_11.in_bounds-after:                        ; preds = %fusion_11.in_bounds-true, %entry
  ret void

fusion_11.in_bounds-true:                         ; preds = %entry
  %.lhs.trunc = trunc i32 %linear_index to i16
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc
  %4 = udiv i16 %.lhs.trunc.frozen, 90
  %5 = mul i16 %4, 90
  %.decomposed = sub i16 %.lhs.trunc.frozen, %5
  %6 = zext i32 %linear_index to i64
  %7 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %6
  %8 = load float, ptr addrspace(1) %7, align 4, !invariant.load !267
  %9 = load float, ptr addrspace(1) %arg27, align 16, !invariant.load !267
  %10 = zext i16 %4 to i64
  %11 = zext i16 %.decomposed to i64
  %12 = getelementptr [256 x [614 x float]], ptr addrspace(1) %arg15, i64 0, i64 %10, i64 %11
  %13 = getelementptr inbounds float, ptr addrspace(1) %12, i64 518
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %multiply.6 = fmul float %9, %14
  %subtract.7 = fsub float %8, %multiply.6
  %15 = getelementptr inbounds float, ptr addrspace(1) %arg39, i64 %6
  store float %subtract.7, ptr addrspace(1) %15, align 4
  br label %fusion_11.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_46(ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(628736) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg3, ptr noalias nocapture align 128 dereferenceable(524288) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg5, ptr noalias nocapture align 128 dereferenceable(524288) %arg6, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg7, ptr noalias nocapture align 128 dereferenceable(524288) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg9, ptr noalias nocapture align 128 dereferenceable(524288) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg11, ptr noalias nocapture align 128 dereferenceable(524288) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg13) local_unnamed_addr #6 {
entry:
  %arg1363 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1261 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1159 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1057 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg955 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg853 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg751 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg649 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg547 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg445 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg343 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg241 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg139 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg037 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 9
  %5 = and i32 %linear_index3, 511
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 510
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 509
  %8 = and i32 %3, 508
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg037, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg241, align 16, !invariant.load !267
  %17 = zext i32 %4 to i64
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds [256 x [614 x float]], ptr addrspace(1) %arg139, i64 0, i64 %17, i64 %18
  %20 = load <2 x float>, ptr addrspace(1) %19, align 8, !invariant.load !267
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %multiply.16 = fmul float %16, %21
  %subtract.17 = fsub float %12, %multiply.16
  %23 = getelementptr float, ptr addrspace(1) %arg343, i64 %9
  %24 = load <4 x float>, ptr addrspace(1) %23, align 16, !invariant.load !267
  %25 = extractelement <4 x float> %24, i32 0
  %26 = extractelement <4 x float> %24, i32 1
  %27 = extractelement <4 x float> %24, i32 2
  %28 = extractelement <4 x float> %24, i32 3
  %29 = getelementptr float, ptr addrspace(1) %arg445, i64 %9
  %30 = load <4 x float>, ptr addrspace(1) %29, align 16
  %31 = extractelement <4 x float> %30, i32 0
  %32 = extractelement <4 x float> %30, i32 1
  %33 = extractelement <4 x float> %30, i32 2
  %34 = extractelement <4 x float> %30, i32 3
  %multiply.18 = fmul float %16, %31
  %subtract.19 = fsub float %25, %multiply.18
  %35 = getelementptr float, ptr addrspace(1) %arg547, i64 %9
  %36 = load <4 x float>, ptr addrspace(1) %35, align 16, !invariant.load !267
  %37 = extractelement <4 x float> %36, i32 0
  %38 = extractelement <4 x float> %36, i32 1
  %39 = extractelement <4 x float> %36, i32 2
  %40 = extractelement <4 x float> %36, i32 3
  %41 = getelementptr float, ptr addrspace(1) %arg649, i64 %9
  %42 = load <4 x float>, ptr addrspace(1) %41, align 16
  %43 = extractelement <4 x float> %42, i32 0
  %44 = extractelement <4 x float> %42, i32 1
  %45 = extractelement <4 x float> %42, i32 2
  %46 = extractelement <4 x float> %42, i32 3
  %multiply.20 = fmul float %16, %43
  %subtract.21 = fsub float %37, %multiply.20
  %47 = getelementptr float, ptr addrspace(1) %arg751, i64 %9
  %48 = load <4 x float>, ptr addrspace(1) %47, align 16, !invariant.load !267
  %49 = extractelement <4 x float> %48, i32 0
  %50 = extractelement <4 x float> %48, i32 1
  %51 = extractelement <4 x float> %48, i32 2
  %52 = extractelement <4 x float> %48, i32 3
  %53 = getelementptr float, ptr addrspace(1) %arg853, i64 %9
  %54 = load <4 x float>, ptr addrspace(1) %53, align 16
  %55 = extractelement <4 x float> %54, i32 0
  %56 = extractelement <4 x float> %54, i32 1
  %57 = extractelement <4 x float> %54, i32 2
  %58 = extractelement <4 x float> %54, i32 3
  %multiply.22 = fmul float %16, %55
  %subtract.23 = fsub float %49, %multiply.22
  %59 = getelementptr float, ptr addrspace(1) %arg955, i64 %9
  %60 = load <4 x float>, ptr addrspace(1) %59, align 16, !invariant.load !267
  %61 = extractelement <4 x float> %60, i32 0
  %62 = extractelement <4 x float> %60, i32 1
  %63 = extractelement <4 x float> %60, i32 2
  %64 = extractelement <4 x float> %60, i32 3
  %65 = getelementptr float, ptr addrspace(1) %arg1057, i64 %9
  %66 = load <4 x float>, ptr addrspace(1) %65, align 16
  %67 = extractelement <4 x float> %66, i32 0
  %68 = extractelement <4 x float> %66, i32 1
  %69 = extractelement <4 x float> %66, i32 2
  %70 = extractelement <4 x float> %66, i32 3
  %multiply.24 = fmul float %16, %67
  %subtract.25 = fsub float %61, %multiply.24
  %71 = getelementptr float, ptr addrspace(1) %arg1159, i64 %9
  %72 = load <4 x float>, ptr addrspace(1) %71, align 16, !invariant.load !267
  %73 = extractelement <4 x float> %72, i32 0
  %74 = extractelement <4 x float> %72, i32 1
  %75 = extractelement <4 x float> %72, i32 2
  %76 = extractelement <4 x float> %72, i32 3
  %77 = getelementptr float, ptr addrspace(1) %arg1261, i64 %9
  %78 = load <4 x float>, ptr addrspace(1) %77, align 16
  %79 = extractelement <4 x float> %78, i32 0
  %80 = extractelement <4 x float> %78, i32 1
  %81 = extractelement <4 x float> %78, i32 2
  %82 = extractelement <4 x float> %78, i32 3
  %multiply.26 = fmul float %16, %79
  %subtract.27 = fsub float %73, %multiply.26
  %83 = getelementptr float, ptr addrspace(1) %arg1363, i64 %9
  %84 = zext i32 %7 to i64
  %multiply.161 = fmul float %16, %22
  %subtract.172 = fsub float %13, %multiply.161
  %multiply.183 = fmul float %16, %32
  %subtract.194 = fsub float %26, %multiply.183
  %multiply.205 = fmul float %16, %44
  %subtract.216 = fsub float %38, %multiply.205
  %multiply.227 = fmul float %16, %56
  %subtract.238 = fsub float %50, %multiply.227
  %multiply.249 = fmul float %16, %68
  %subtract.2510 = fsub float %62, %multiply.249
  %multiply.2611 = fmul float %16, %80
  %subtract.2712 = fsub float %74, %multiply.2611
  %85 = zext i32 %6 to i64
  %86 = getelementptr inbounds [256 x [614 x float]], ptr addrspace(1) %arg139, i64 0, i64 %17, i64 %85
  %87 = load float, ptr addrspace(1) %86, align 8, !invariant.load !267
  %multiply.1613 = fmul float %16, %87
  %subtract.1714 = fsub float %14, %multiply.1613
  %multiply.1815 = fmul float %16, %33
  %subtract.1916 = fsub float %27, %multiply.1815
  %multiply.2017 = fmul float %16, %45
  %subtract.2118 = fsub float %39, %multiply.2017
  %multiply.2219 = fmul float %16, %57
  %subtract.2320 = fsub float %51, %multiply.2219
  %multiply.2421 = fmul float %16, %69
  %subtract.2522 = fsub float %63, %multiply.2421
  %multiply.2623 = fmul float %16, %81
  %subtract.2724 = fsub float %75, %multiply.2623
  %88 = zext i32 %5 to i64
  %89 = getelementptr inbounds [256 x [614 x float]], ptr addrspace(1) %arg139, i64 0, i64 %17, i64 %88
  %90 = load float, ptr addrspace(1) %89, align 4, !invariant.load !267
  %multiply.1625 = fmul float %16, %90
  %subtract.1726 = fsub float %15, %multiply.1625
  %multiply.1827 = fmul float %16, %34
  %subtract.1928 = fsub float %28, %multiply.1827
  %multiply.2029 = fmul float %16, %46
  %subtract.2130 = fsub float %40, %multiply.2029
  %multiply.2231 = fmul float %16, %58
  %subtract.2332 = fsub float %52, %multiply.2231
  %multiply.2433 = fmul float %16, %70
  %subtract.2534 = fsub float %64, %multiply.2433
  %multiply.2635 = fmul float %16, %82
  %subtract.2736 = fsub float %76, %multiply.2635
  %91 = insertelement <4 x float> poison, float %subtract.17, i32 0
  %92 = insertelement <4 x float> %91, float %subtract.172, i32 1
  %93 = insertelement <4 x float> %92, float %subtract.1714, i32 2
  %94 = insertelement <4 x float> %93, float %subtract.1726, i32 3
  store <4 x float> %94, ptr addrspace(1) %77, align 16
  %95 = insertelement <4 x float> poison, float %subtract.19, i32 0
  %96 = insertelement <4 x float> %95, float %subtract.194, i32 1
  %97 = insertelement <4 x float> %96, float %subtract.1916, i32 2
  %98 = insertelement <4 x float> %97, float %subtract.1928, i32 3
  store <4 x float> %98, ptr addrspace(1) %65, align 16
  %99 = insertelement <4 x float> poison, float %subtract.21, i32 0
  %100 = insertelement <4 x float> %99, float %subtract.216, i32 1
  %101 = insertelement <4 x float> %100, float %subtract.2118, i32 2
  %102 = insertelement <4 x float> %101, float %subtract.2130, i32 3
  store <4 x float> %102, ptr addrspace(1) %53, align 16
  %103 = insertelement <4 x float> poison, float %subtract.23, i32 0
  %104 = insertelement <4 x float> %103, float %subtract.238, i32 1
  %105 = insertelement <4 x float> %104, float %subtract.2320, i32 2
  %106 = insertelement <4 x float> %105, float %subtract.2332, i32 3
  store <4 x float> %106, ptr addrspace(1) %41, align 16
  %107 = insertelement <4 x float> poison, float %subtract.25, i32 0
  %108 = insertelement <4 x float> %107, float %subtract.2510, i32 1
  %109 = insertelement <4 x float> %108, float %subtract.2522, i32 2
  %110 = insertelement <4 x float> %109, float %subtract.2534, i32 3
  store <4 x float> %110, ptr addrspace(1) %83, align 16
  %111 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %112 = insertelement <4 x float> %111, float %subtract.2712, i32 1
  %113 = insertelement <4 x float> %112, float %subtract.2724, i32 2
  %114 = insertelement <4 x float> %113, float %subtract.2736, i32 3
  store <4 x float> %114, ptr addrspace(1) %29, align 16
  ret void
}

; Function Attrs: nounwind memory(argmem: readwrite, inaccessiblemem: readwrite)
define void @fusion_357(ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(8650752) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(12582912) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg12, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg16, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg17, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg18, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg19, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg21, ptr noalias nocapture align 128 dereferenceable(262144) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg23, ptr noalias nocapture align 128 dereferenceable(262144) %arg24, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg25, ptr noalias nocapture align 128 dereferenceable(262144) %arg26, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg27, ptr noalias nocapture align 128 dereferenceable(262144) %arg28, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg29, ptr noalias nocapture align 128 dereferenceable(262144) %arg30, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(314368) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(262144) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(458752) %arg34, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg35, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg36, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg37, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg38, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg39, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg40, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg41, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg42, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg43, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(32768) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(262144) %arg49) local_unnamed_addr #8 {
entry:
  %arg49415 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48413 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47411 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46409 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg45407 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg44405 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg43403 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg42401 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg41399 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg40397 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg39395 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg38393 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg37391 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg36389 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg35387 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg34385 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg33383 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg32381 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg31379 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg30377 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg29375 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg28373 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg27371 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg26369 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg25367 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg24365 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg23363 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg22361 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg21359 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg20357 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg19355 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg18353 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg17351 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg16349 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg15347 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14345 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13343 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12341 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11339 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10337 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9335 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8333 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7331 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6329 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5327 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4325 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3323 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2321 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1319 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0317 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !284
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !320
  %2 = lshr i32 %0, 3
  %3 = mul nuw nsw i32 %1, 12
  %4 = add nuw nsw i32 %3, %2
  %5 = icmp ult i32 %4, 8192
  br i1 %5, label %tile_loop.loop_header77.preheader, label %common.ret

tile_loop.loop_header77.preheader:                ; preds = %entry
  %6 = and i32 %0, 7
  %7 = zext i32 %4 to i64
  %8 = shl nuw nsw i32 %4, 3
  %Arg_2.3115 = load float, ptr addrspace(1) %arg2321, align 16
  %9 = zext i32 %6 to i64
  %Arg_16.1783 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg16349, i64 0, i64 %7, i64 %9
  %Arg_16.1784 = load float, ptr addrspace(1) %Arg_16.1783, align 4, !invariant.load !267
  %10 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg15347, i64 0, i64 %7, i64 %9
  %Arg_15.1685417 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1816
  %Arg_15.1686 = load float, ptr addrspace(1) %Arg_15.1685417, align 4, !invariant.load !267
  %multiply.6787 = fmul float %Arg_16.1784, %Arg_15.1686
  %add.72.i306 = fadd float %multiply.6787, 0.000000e+00
  %Arg_17.1889 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg17351, i64 0, i64 %7, i64 %9
  %Arg_17.1890 = load float, ptr addrspace(1) %Arg_17.1889, align 4, !invariant.load !267
  %Arg_15.1691418 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1840
  %Arg_15.1692 = load float, ptr addrspace(1) %Arg_15.1691418, align 4, !invariant.load !267
  %multiply.7593 = fmul float %Arg_17.1890, %Arg_15.1692
  %add.79.i307 = fadd float %multiply.7593, 0.000000e+00
  %Arg_18.1995 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg18353, i64 0, i64 %7, i64 %9
  %Arg_18.1996 = load float, ptr addrspace(1) %Arg_18.1995, align 4, !invariant.load !267
  %Arg_15.1697419 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1832
  %Arg_15.1698 = load float, ptr addrspace(1) %Arg_15.1697419, align 4, !invariant.load !267
  %multiply.8299 = fmul float %Arg_18.1996, %Arg_15.1698
  %add.86.i308 = fadd float %multiply.8299, 0.000000e+00
  %Arg_19.20101 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg19355, i64 0, i64 %7, i64 %9
  %Arg_19.20102 = load float, ptr addrspace(1) %Arg_19.20101, align 4, !invariant.load !267
  %Arg_15.16103420 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1824
  %Arg_15.16104 = load float, ptr addrspace(1) %Arg_15.16103420, align 4, !invariant.load !267
  %multiply.89105 = fmul float %Arg_19.20102, %Arg_15.16104
  %add.93.i309 = fadd float %multiply.89105, 0.000000e+00
  %Arg_20.21107 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg20357, i64 0, i64 %7, i64 %9
  %Arg_20.21108 = load float, ptr addrspace(1) %Arg_20.21107, align 4, !invariant.load !267
  %Arg_15.16109421 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1848
  %Arg_15.16110 = load float, ptr addrspace(1) %Arg_15.16109421, align 4, !invariant.load !267
  %multiply.96111 = fmul float %Arg_20.21108, %Arg_15.16110
  %add.100.i310 = fadd float %multiply.96111, 0.000000e+00
  %Arg_0.1113 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg0317, i64 0, i64 %7, i64 %9
  %Arg_0.1114 = load float, ptr addrspace(1) %Arg_0.1113, align 4, !invariant.load !267
  %11 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg1319, i64 0, i64 %7, i64 %9
  %Arg_1.2116422 = getelementptr inbounds float, ptr addrspace(1) %11, i64 256
  %Arg_1.2117 = load float, ptr addrspace(1) %Arg_1.2116422, align 4, !invariant.load !267
  %multiply.38118 = fmul float %Arg_2.3115, %Arg_1.2117
  %subtract.39119 = fsub float %Arg_0.1114, %multiply.38118
  %Arg_3.4120 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg3323, i64 0, i64 %7, i64 %9
  %Arg_3.4121 = load float, ptr addrspace(1) %Arg_3.4120, align 4, !invariant.load !267
  %12 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg4325, i64 0, i64 %7, i64 %9
  %Arg_4.5122423 = getelementptr inbounds float, ptr addrspace(1) %12, i64 104
  %Arg_4.5123 = load float, ptr addrspace(1) %Arg_4.5122423, align 4, !invariant.load !267
  %multiply.41124 = fmul float %Arg_2.3115, %Arg_4.5123
  %subtract.42125 = fsub float %Arg_3.4121, %multiply.41124
  %Arg_5.6126 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg5327, i64 0, i64 %7, i64 %9
  %Arg_5.6127 = load float, ptr addrspace(1) %Arg_5.6126, align 4, !invariant.load !267
  %13 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg7331, i64 0, i64 %7, i64 %9
  %Arg_7.8128424 = getelementptr inbounds float, ptr addrspace(1) %13, i64 200
  %Arg_7.8129 = load float, ptr addrspace(1) %Arg_7.8128424, align 4, !invariant.load !267
  %14 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg6329, i64 0, i64 %7, i64 %9
  %Arg_6.7130425 = getelementptr inbounds float, ptr addrspace(1) %14, i64 200
  %Arg_6.7131 = load float, ptr addrspace(1) %Arg_6.7130425, align 4, !invariant.load !267
  %add.45132 = fadd float %Arg_7.8129, %Arg_6.7131
  %multiply.47133 = fmul float %Arg_2.3115, %add.45132
  %subtract.48134 = fsub float %Arg_5.6127, %multiply.47133
  %Arg_8.9135 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg8333, i64 0, i64 %7, i64 %9
  %Arg_8.9136 = load float, ptr addrspace(1) %Arg_8.9135, align 4, !invariant.load !267
  %Arg_7.8137426 = getelementptr inbounds float, ptr addrspace(1) %13, i64 192
  %Arg_7.8138 = load float, ptr addrspace(1) %Arg_7.8137426, align 4, !invariant.load !267
  %Arg_6.7139427 = getelementptr inbounds float, ptr addrspace(1) %14, i64 192
  %Arg_6.7140 = load float, ptr addrspace(1) %Arg_6.7139427, align 4, !invariant.load !267
  %add.51141 = fadd float %Arg_7.8138, %Arg_6.7140
  %multiply.52142 = fmul float %Arg_2.3115, %add.51141
  %subtract.53143 = fsub float %Arg_8.9136, %multiply.52142
  %Arg_9.10144 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg9335, i64 0, i64 %7, i64 %9
  %Arg_9.10145 = load float, ptr addrspace(1) %Arg_9.10144, align 4, !invariant.load !267
  %15 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg10337, i64 0, i64 %7, i64 %9
  %Arg_10.11146428 = getelementptr inbounds float, ptr addrspace(1) %15, i64 96
  %Arg_10.11147 = load float, ptr addrspace(1) %Arg_10.11146428, align 4, !invariant.load !267
  %multiply.55148 = fmul float %Arg_2.3115, %Arg_10.11147
  %subtract.56149 = fsub float %Arg_9.10145, %multiply.55148
  %Arg_11.12150 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg11339, i64 0, i64 %7, i64 %9
  %Arg_11.12151 = load float, ptr addrspace(1) %Arg_11.12150, align 4, !invariant.load !267
  %16 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg12341, i64 0, i64 %7, i64 %9
  %Arg_12.13152429 = getelementptr inbounds float, ptr addrspace(1) %16, i64 96
  %Arg_12.13153 = load float, ptr addrspace(1) %Arg_12.13152429, align 4, !invariant.load !267
  %multiply.58154 = fmul float %Arg_2.3115, %Arg_12.13153
  %subtract.59155 = fsub float %Arg_11.12151, %multiply.58154
  %Arg_13.14156 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg13343, i64 0, i64 %7, i64 %9
  %Arg_13.14157 = load float, ptr addrspace(1) %Arg_13.14156, align 4, !invariant.load !267
  %Arg_4.5158430 = getelementptr inbounds float, ptr addrspace(1) %12, i64 96
  %Arg_4.5159 = load float, ptr addrspace(1) %Arg_4.5158430, align 4, !invariant.load !267
  %multiply.61160 = fmul float %Arg_2.3115, %Arg_4.5159
  %subtract.62161 = fsub float %Arg_13.14157, %multiply.61160
  %Arg_14.15162 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg14345, i64 0, i64 %7, i64 %9
  %Arg_14.15163 = load float, ptr addrspace(1) %Arg_14.15162, align 4, !invariant.load !267
  %Arg_15.16164431 = getelementptr inbounds float, ptr addrspace(1) %10, i64 1856
  %Arg_15.16165 = load float, ptr addrspace(1) %Arg_15.16164431, align 4, !invariant.load !267
  %multiply.64166 = fmul float %Arg_2.3115, %Arg_15.16165
  %subtract.65167 = fsub float %Arg_14.15163, %multiply.64166
  %17 = or i32 %6, %8
  %18 = and i32 %17, 511
  %19 = lshr i32 %4, 6
  %20 = zext i32 %19 to i64
  %21 = zext i32 %18 to i64
  %Arg_31.32168 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg31379, i64 0, i64 %20, i64 %21
  %Arg_31.32169 = load float, ptr addrspace(1) %Arg_31.32168, align 4, !invariant.load !267
  %Arg_32.33171 = getelementptr inbounds [128 x [614 x float]], ptr addrspace(1) %arg32381, i64 0, i64 %20, i64 %21
  %Arg_32.33172 = load float, ptr addrspace(1) %Arg_32.33171, align 4, !invariant.load !267
  %multiply.104173 = fmul float %Arg_2.3115, %Arg_32.33172
  %subtract.105174 = fsub float %Arg_31.32169, %multiply.104173
  %Arg_29.30175 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg29375, i64 0, i64 %20, i64 %21
  %Arg_29.30176 = load float, ptr addrspace(1) %Arg_29.30175, align 4, !invariant.load !267
  %Arg_30.31178 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg30377, i64 0, i64 %20, i64 %21
  %Arg_30.31179 = load float, ptr addrspace(1) %Arg_30.31178, align 4
  %multiply.106180 = fmul float %Arg_2.3115, %Arg_30.31179
  %subtract.107181 = fsub float %Arg_29.30176, %multiply.106180
  %Arg_27.28182 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg27371, i64 0, i64 %20, i64 %21
  %Arg_27.28183 = load float, ptr addrspace(1) %Arg_27.28182, align 4, !invariant.load !267
  %Arg_28.29185 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg28373, i64 0, i64 %20, i64 %21
  %Arg_28.29186 = load float, ptr addrspace(1) %Arg_28.29185, align 4
  %multiply.108187 = fmul float %Arg_2.3115, %Arg_28.29186
  %subtract.109188 = fsub float %Arg_27.28183, %multiply.108187
  %Arg_25.26189 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg25367, i64 0, i64 %20, i64 %21
  %Arg_25.26190 = load float, ptr addrspace(1) %Arg_25.26189, align 4, !invariant.load !267
  %Arg_26.27192 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg26369, i64 0, i64 %20, i64 %21
  %Arg_26.27193 = load float, ptr addrspace(1) %Arg_26.27192, align 4
  %multiply.110194 = fmul float %Arg_2.3115, %Arg_26.27193
  %subtract.111195 = fsub float %Arg_25.26190, %multiply.110194
  %Arg_23.24196 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg23363, i64 0, i64 %20, i64 %21
  %Arg_23.24197 = load float, ptr addrspace(1) %Arg_23.24196, align 4, !invariant.load !267
  %Arg_24.25199 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg24365, i64 0, i64 %20, i64 %21
  %Arg_24.25200 = load float, ptr addrspace(1) %Arg_24.25199, align 4
  %multiply.112201 = fmul float %Arg_2.3115, %Arg_24.25200
  %subtract.113202 = fsub float %Arg_23.24197, %multiply.112201
  %Arg_21.22203 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg21359, i64 0, i64 %20, i64 %21
  %Arg_21.22204 = load float, ptr addrspace(1) %Arg_21.22203, align 4, !invariant.load !267
  %Arg_22.23206 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg22361, i64 0, i64 %20, i64 %21
  %Arg_22.23207 = load float, ptr addrspace(1) %Arg_22.23206, align 4
  %multiply.114208 = fmul float %Arg_2.3115, %Arg_22.23207
  %subtract.115209 = fsub float %Arg_21.22204, %multiply.114208
  %22 = and i32 %17, 255
  %23 = lshr i32 %4, 5
  %24 = zext i32 %23 to i64
  %25 = zext i32 %22 to i64
  %Arg_33.34210 = getelementptr inbounds [256 x [256 x float]], ptr addrspace(1) %arg33383, i64 0, i64 %24, i64 %25
  %Arg_33.34211 = load float, ptr addrspace(1) %Arg_33.34210, align 4, !invariant.load !267
  %26 = getelementptr [448 x [256 x float]], ptr addrspace(1) %arg34385, i64 0, i64 %24, i64 %25
  %Arg_34.35213432 = getelementptr inbounds float, ptr addrspace(1) %26, i64 49152
  %Arg_34.35214 = load float, ptr addrspace(1) %Arg_34.35213432, align 4, !invariant.load !267
  %multiply.118215 = fmul float %Arg_2.3115, %Arg_34.35214
  %subtract.119216 = fsub float %Arg_33.34211, %multiply.118215
  %27 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg37391, i64 0, i64 %7, i64 %9
  store float %subtract.48134, ptr addrspace(1) %27, align 4
  %28 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg35387, i64 0, i64 %7, i64 %9
  store float %subtract.39119, ptr addrspace(1) %28, align 4
  store float %subtract.107181, ptr addrspace(1) %Arg_30.31178, align 4
  %29 = getelementptr inbounds [256 x [256 x float]], ptr addrspace(1) %arg49415, i64 0, i64 %24, i64 %25
  store float %subtract.119216, ptr addrspace(1) %29, align 4
  store float %subtract.113202, ptr addrspace(1) %Arg_24.25199, align 4
  %30 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg40397, i64 0, i64 %7, i64 %9
  store float %subtract.59155, ptr addrspace(1) %30, align 4
  %31 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg38393, i64 0, i64 %7, i64 %9
  store float %subtract.53143, ptr addrspace(1) %31, align 4
  store float %subtract.109188, ptr addrspace(1) %Arg_28.29185, align 4
  %32 = getelementptr inbounds [128 x [512 x float]], ptr addrspace(1) %arg48413, i64 0, i64 %20, i64 %21
  store float %subtract.105174, ptr addrspace(1) %32, align 4
  %33 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg41399, i64 0, i64 %7, i64 %9
  store float %subtract.62161, ptr addrspace(1) %33, align 4
  store float %subtract.115209, ptr addrspace(1) %Arg_22.23206, align 4
  %34 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg36389, i64 0, i64 %7, i64 %9
  store float %subtract.42125, ptr addrspace(1) %34, align 4
  %35 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg42401, i64 0, i64 %7, i64 %9
  store float %subtract.65167, ptr addrspace(1) %35, align 4
  %36 = getelementptr inbounds [8192 x [8 x float]], ptr addrspace(1) %arg39395, i64 0, i64 %7, i64 %9
  store float %subtract.56149, ptr addrspace(1) %36, align 4
  store float %subtract.111195, ptr addrspace(1) %Arg_26.27192, align 4
  %37 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i306, i32 4, i32 31)
  %add.72.i = fadd float %add.72.i306, %37
  %38 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i, i32 2, i32 31)
  %add.72.i296 = fadd float %add.72.i, %38
  %39 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.72.i296, i32 1, i32 31)
  %40 = icmp eq i32 %6, 0
  %output_element_address = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg43403, i64 0, i64 %7
  %add.72.i297 = fadd float %add.72.i296, %39
  br i1 %40, label %reduction_write_output-true, label %reduction_write_output-after

common.ret:                                       ; preds = %entry, %reduction_write_output-after264, %reduction_write_output-true277
  ret void

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %tile_loop.loop_header77.preheader
  %41 = icmp eq i32 %6, 0
  %42 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.79.i307, i32 4, i32 31)
  %add.79.i = fadd float %add.79.i307, %42
  %43 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.79.i, i32 2, i32 31)
  %add.79.i298 = fadd float %add.79.i, %43
  %44 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.79.i298, i32 1, i32 31)
  %output_element_address237 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg44405, i64 0, i64 %7
  %add.79.i299 = fadd float %add.79.i298, %44
  br i1 %41, label %reduction_write_output-true235, label %reduction_write_output-after236

reduction_write_output-after236:                  ; preds = %reduction_write_output-true235, %reduction_write_output-after
  %45 = icmp eq i32 %6, 0
  %46 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.86.i308, i32 4, i32 31)
  %add.86.i = fadd float %add.86.i308, %46
  %47 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.86.i, i32 2, i32 31)
  %add.86.i300 = fadd float %add.86.i, %47
  %48 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.86.i300, i32 1, i32 31)
  %output_element_address251 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg45407, i64 0, i64 %7
  %add.86.i301 = fadd float %add.86.i300, %48
  br i1 %45, label %reduction_write_output-true249, label %reduction_write_output-after250

reduction_write_output-after250:                  ; preds = %reduction_write_output-true249, %reduction_write_output-after236
  %49 = icmp eq i32 %6, 0
  %50 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.93.i309, i32 4, i32 31)
  %add.93.i = fadd float %add.93.i309, %50
  %51 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.93.i, i32 2, i32 31)
  %add.93.i302 = fadd float %add.93.i, %51
  %52 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.93.i302, i32 1, i32 31)
  %output_element_address265 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg46409, i64 0, i64 %7
  %add.93.i303 = fadd float %add.93.i302, %52
  br i1 %49, label %reduction_write_output-true263, label %reduction_write_output-after264

reduction_write_output-after264:                  ; preds = %reduction_write_output-true263, %reduction_write_output-after250
  %53 = icmp eq i32 %6, 0
  %54 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.100.i310, i32 4, i32 31)
  %add.100.i = fadd float %add.100.i310, %54
  %55 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.100.i, i32 2, i32 31)
  %add.100.i304 = fadd float %add.100.i, %55
  %56 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.100.i304, i32 1, i32 31)
  %output_element_address279 = getelementptr inbounds [8192 x float], ptr addrspace(1) %arg47411, i64 0, i64 %7
  %add.100.i305 = fadd float %add.100.i304, %56
  br i1 %53, label %reduction_write_output-true277, label %common.ret

reduction_write_output-true:                      ; preds = %tile_loop.loop_header77.preheader
  store float %add.72.i297, ptr addrspace(1) %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true235:                   ; preds = %reduction_write_output-after
  store float %add.79.i299, ptr addrspace(1) %output_element_address237, align 4
  br label %reduction_write_output-after236

reduction_write_output-true249:                   ; preds = %reduction_write_output-after236
  store float %add.86.i301, ptr addrspace(1) %output_element_address251, align 4
  br label %reduction_write_output-after250

reduction_write_output-true263:                   ; preds = %reduction_write_output-after250
  store float %add.93.i303, ptr addrspace(1) %output_element_address265, align 4
  br label %reduction_write_output-after264

reduction_write_output-true277:                   ; preds = %reduction_write_output-after264
  store float %add.100.i305, ptr addrspace(1) %output_element_address279, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @fusion_332(ptr noalias nocapture readonly align 16 dereferenceable(327680) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg11, ptr noalias nocapture writeonly align 128 dereferenceable(2560) %arg12, ptr noalias nocapture writeonly align 128 dereferenceable(327680) %arg13) local_unnamed_addr #0 {
entry:
  %arg13141 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12139 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11137 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10135 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9133 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8131 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7129 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6127 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5125 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4123 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3121 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2119 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1117 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0115 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !304
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y99 = lshr i32 %1, 5
  %2 = mul i32 %0, 1280
  %Arg_11.12 = load float, ptr addrspace(1) %arg11137, align 16
  %3 = add nuw nsw i32 %thread_id.y99, -32
  %4 = mul nuw nsw i32 %thread_id.y99, 10
  %5 = add i32 %2, %4
  %6 = add i32 %5, %thread_id.x
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg0115, i64 %8
  %scevgep147 = getelementptr i8, ptr addrspace(1) %arg13141, i64 %8
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv148 = phi ptr addrspace(1) [ %scevgep147, %entry ], [ %scevgep149, %x_in_tile-after ]
  %lsr.iv145 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep146, %x_in_tile-after ]
  %lsr.iv143 = phi i32 [ %6, %entry ], [ %lsr.iv.next144, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %3, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.0111 = phi float [ -0.000000e+00, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %9 = icmp ult i32 %thread_id.x, 10
  br i1 %9, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %concatenate.24.merge26, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.36.i110, %concatenate.24.merge26 ], [ %partial_reduction_result.0111, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %lsr.iv.next144 = add nuw nsw i32 %lsr.iv143, 320
  %scevgep146 = getelementptr i8, ptr addrspace(1) %lsr.iv145, i64 1280
  %scevgep149 = getelementptr i8, ptr addrspace(1) %lsr.iv148, i64 1280
  %10 = icmp ugt i32 %lsr.iv.next, 95
  br i1 %10, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %11 = zext i32 %thread_id.x to i64
  %12 = zext i32 %thread_id.y99 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache88, i64 0, i64 0, i64 0, i64 %11, i64 %12
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache88, i64 0, i64 0, i64 0, i64 %12, i64 %11
  %partial_reduction_result85 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %13 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  %add.36.i = fadd float %partial_reduction_result85, %13
  %14 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i, i32 8, i32 31)
  %add.36.i106 = fadd float %add.36.i, %14
  %15 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i106, i32 4, i32 31)
  %add.36.i107 = fadd float %add.36.i106, %15
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i107, i32 2, i32 31)
  %add.36.i108 = fadd float %add.36.i107, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.36.i108, i32 1, i32 31)
  %add.36.i109 = fadd float %add.36.i108, %17
  store float %add.36.i109, ptr addrspace(3) %shmem_transposed_addr, align 4
  %18 = icmp ult i32 %1, 320
  %19 = icmp eq i32 %thread_id.x, 0
  %20 = and i1 %18, %19
  br i1 %20, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %.frozen = freeze i32 %lsr.iv143
  %21 = udiv i32 %.frozen, 10
  %22 = mul i32 %21, 10
  %.decomposed = sub i32 %.frozen, %22
  %23 = icmp ult i32 %.decomposed, 5
  br i1 %23, label %concatenate.pivot.2., label %concatenate.pivot.7.

concatenate.pivot.2.:                             ; preds = %x_in_tile-true
  %24 = icmp ult i32 %.decomposed, 2
  br i1 %24, label %concatenate.pivot.1., label %concatenate.pivot.3.

concatenate.pivot.1.:                             ; preds = %concatenate.pivot.2.
  %25 = icmp eq i32 %.decomposed, 0
  %26 = zext i32 %21 to i64
  br i1 %25, label %concatenate.pivot.0., label %concatenate.pivot.1.13

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.1.
  %Arg_10.11 = getelementptr inbounds float, ptr addrspace(1) %arg10135, i64 %26
  br label %concatenate.24.merge

concatenate.pivot.1.13:                           ; preds = %concatenate.pivot.1.
  %Arg_9.10 = getelementptr inbounds float, ptr addrspace(1) %arg9133, i64 %26
  br label %concatenate.24.merge

concatenate.pivot.3.:                             ; preds = %concatenate.pivot.2.
  %27 = icmp eq i32 %.decomposed, 2
  br i1 %27, label %concatenate.pivot.2.14, label %concatenate.pivot.4.

concatenate.pivot.2.14:                           ; preds = %concatenate.pivot.3.
  %28 = zext i32 %21 to i64
  %Arg_8.9 = getelementptr inbounds float, ptr addrspace(1) %arg8131, i64 %28
  br label %concatenate.24.merge

concatenate.pivot.4.:                             ; preds = %concatenate.pivot.3.
  %29 = icmp ult i32 %.decomposed, 4
  %30 = zext i32 %21 to i64
  br i1 %29, label %concatenate.pivot.3.15, label %concatenate.pivot.4.16

concatenate.pivot.3.15:                           ; preds = %concatenate.pivot.4.
  %Arg_7.8 = getelementptr inbounds float, ptr addrspace(1) %arg7129, i64 %30
  br label %concatenate.24.merge

concatenate.pivot.4.16:                           ; preds = %concatenate.pivot.4.
  %Arg_6.7 = getelementptr inbounds float, ptr addrspace(1) %arg6127, i64 %30
  br label %concatenate.24.merge

concatenate.pivot.7.:                             ; preds = %x_in_tile-true
  %31 = icmp ult i32 %.decomposed, 7
  br i1 %31, label %concatenate.pivot.6., label %concatenate.pivot.8.

concatenate.pivot.6.:                             ; preds = %concatenate.pivot.7.
  %.not101 = icmp eq i32 %.decomposed, 6
  %32 = zext i32 %21 to i64
  br i1 %.not101, label %concatenate.pivot.6.18, label %concatenate.pivot.5.17

concatenate.pivot.5.17:                           ; preds = %concatenate.pivot.6.
  %Arg_5.6 = getelementptr inbounds float, ptr addrspace(1) %arg5125, i64 %32
  br label %concatenate.24.merge

concatenate.pivot.6.18:                           ; preds = %concatenate.pivot.6.
  %Arg_4.5 = getelementptr inbounds float, ptr addrspace(1) %arg4123, i64 %32
  br label %concatenate.24.merge

concatenate.pivot.8.:                             ; preds = %concatenate.pivot.7.
  %33 = icmp eq i32 %.decomposed, 7
  br i1 %33, label %concatenate.pivot.7.19, label %concatenate.pivot.9.

concatenate.pivot.7.19:                           ; preds = %concatenate.pivot.8.
  %34 = zext i32 %21 to i64
  %Arg_3.4 = getelementptr inbounds float, ptr addrspace(1) %arg3121, i64 %34
  br label %concatenate.24.merge

concatenate.pivot.9.:                             ; preds = %concatenate.pivot.8.
  %35 = icmp ult i32 %.decomposed, 9
  %36 = zext i32 %21 to i64
  br i1 %35, label %concatenate.pivot.8.20, label %concatenate.pivot.9.21

concatenate.pivot.8.20:                           ; preds = %concatenate.pivot.9.
  %Arg_2.3 = getelementptr inbounds float, ptr addrspace(1) %arg2119, i64 %36
  br label %concatenate.24.merge

concatenate.pivot.9.21:                           ; preds = %concatenate.pivot.9.
  %Arg_1.2 = getelementptr inbounds float, ptr addrspace(1) %arg1117, i64 %36
  br label %concatenate.24.merge

concatenate.24.merge:                             ; preds = %concatenate.pivot.9.21, %concatenate.pivot.8.20, %concatenate.pivot.7.19, %concatenate.pivot.6.18, %concatenate.pivot.5.17, %concatenate.pivot.4.16, %concatenate.pivot.3.15, %concatenate.pivot.2.14, %concatenate.pivot.1.13, %concatenate.pivot.0.
  %.in = phi ptr addrspace(1) [ %Arg_10.11, %concatenate.pivot.0. ], [ %Arg_9.10, %concatenate.pivot.1.13 ], [ %Arg_8.9, %concatenate.pivot.2.14 ], [ %Arg_7.8, %concatenate.pivot.3.15 ], [ %Arg_6.7, %concatenate.pivot.4.16 ], [ %Arg_5.6, %concatenate.pivot.5.17 ], [ %Arg_4.5, %concatenate.pivot.6.18 ], [ %Arg_3.4, %concatenate.pivot.7.19 ], [ %Arg_2.3, %concatenate.pivot.8.20 ], [ %Arg_1.2, %concatenate.pivot.9.21 ]
  %37 = icmp ult i32 %.decomposed, 5
  %38 = load float, ptr addrspace(1) %.in, align 4, !invariant.load !267
  %multiply.25 = fmul float %Arg_11.12, %38
  %Arg_0.122 = load float, ptr addrspace(1) %lsr.iv145, align 4, !invariant.load !267
  %multiply.26 = fmul float %multiply.25, %Arg_0.122
  %subtract.29 = fsub float 1.000000e+00, %Arg_0.122
  %multiply.30 = fmul float %multiply.26, %subtract.29
  %add.36.i110 = fadd float %partial_reduction_result.0111, %multiply.30
  br i1 %37, label %concatenate.pivot.2.58, label %concatenate.pivot.7.67

concatenate.pivot.2.58:                           ; preds = %concatenate.24.merge
  %39 = icmp ult i32 %.decomposed, 2
  br i1 %39, label %concatenate.pivot.1.59, label %concatenate.pivot.3.62

concatenate.pivot.1.59:                           ; preds = %concatenate.pivot.2.58
  %40 = icmp eq i32 %.decomposed, 0
  %41 = zext i32 %21 to i64
  br i1 %40, label %concatenate.pivot.0.60, label %concatenate.pivot.1.61

concatenate.pivot.0.60:                           ; preds = %concatenate.pivot.1.59
  %Arg_10.1128 = getelementptr inbounds float, ptr addrspace(1) %arg10135, i64 %41
  br label %concatenate.24.merge26

concatenate.pivot.1.61:                           ; preds = %concatenate.pivot.1.59
  %Arg_9.1031 = getelementptr inbounds float, ptr addrspace(1) %arg9133, i64 %41
  br label %concatenate.24.merge26

concatenate.pivot.3.62:                           ; preds = %concatenate.pivot.2.58
  %42 = icmp eq i32 %.decomposed, 2
  br i1 %42, label %concatenate.pivot.2.63, label %concatenate.pivot.4.64

concatenate.pivot.2.63:                           ; preds = %concatenate.pivot.3.62
  %43 = zext i32 %21 to i64
  %Arg_8.934 = getelementptr inbounds float, ptr addrspace(1) %arg8131, i64 %43
  br label %concatenate.24.merge26

concatenate.pivot.4.64:                           ; preds = %concatenate.pivot.3.62
  %44 = icmp ult i32 %.decomposed, 4
  %45 = zext i32 %21 to i64
  br i1 %44, label %concatenate.pivot.3.65, label %concatenate.pivot.4.66

concatenate.pivot.3.65:                           ; preds = %concatenate.pivot.4.64
  %Arg_7.837 = getelementptr inbounds float, ptr addrspace(1) %arg7129, i64 %45
  br label %concatenate.24.merge26

concatenate.pivot.4.66:                           ; preds = %concatenate.pivot.4.64
  %Arg_6.740 = getelementptr inbounds float, ptr addrspace(1) %arg6127, i64 %45
  br label %concatenate.24.merge26

concatenate.pivot.7.67:                           ; preds = %concatenate.24.merge
  %46 = icmp ult i32 %.decomposed, 7
  br i1 %46, label %concatenate.pivot.6.68, label %concatenate.pivot.8.71

concatenate.pivot.6.68:                           ; preds = %concatenate.pivot.7.67
  %.not = icmp eq i32 %.decomposed, 6
  %47 = zext i32 %21 to i64
  br i1 %.not, label %concatenate.pivot.6.70, label %concatenate.pivot.5.69

concatenate.pivot.5.69:                           ; preds = %concatenate.pivot.6.68
  %Arg_5.643 = getelementptr inbounds float, ptr addrspace(1) %arg5125, i64 %47
  br label %concatenate.24.merge26

concatenate.pivot.6.70:                           ; preds = %concatenate.pivot.6.68
  %Arg_4.546 = getelementptr inbounds float, ptr addrspace(1) %arg4123, i64 %47
  br label %concatenate.24.merge26

concatenate.pivot.8.71:                           ; preds = %concatenate.pivot.7.67
  %48 = icmp eq i32 %.decomposed, 7
  br i1 %48, label %concatenate.pivot.7.72, label %concatenate.pivot.9.73

concatenate.pivot.7.72:                           ; preds = %concatenate.pivot.8.71
  %49 = zext i32 %21 to i64
  %Arg_3.449 = getelementptr inbounds float, ptr addrspace(1) %arg3121, i64 %49
  br label %concatenate.24.merge26

concatenate.pivot.9.73:                           ; preds = %concatenate.pivot.8.71
  %50 = icmp ult i32 %.decomposed, 9
  %51 = zext i32 %21 to i64
  br i1 %50, label %concatenate.pivot.8.74, label %concatenate.pivot.9.75

concatenate.pivot.8.74:                           ; preds = %concatenate.pivot.9.73
  %Arg_2.352 = getelementptr inbounds float, ptr addrspace(1) %arg2119, i64 %51
  br label %concatenate.24.merge26

concatenate.pivot.9.75:                           ; preds = %concatenate.pivot.9.73
  %Arg_1.255 = getelementptr inbounds float, ptr addrspace(1) %arg1117, i64 %51
  br label %concatenate.24.merge26

concatenate.24.merge26:                           ; preds = %concatenate.pivot.9.75, %concatenate.pivot.8.74, %concatenate.pivot.7.72, %concatenate.pivot.6.70, %concatenate.pivot.5.69, %concatenate.pivot.4.66, %concatenate.pivot.3.65, %concatenate.pivot.2.63, %concatenate.pivot.1.61, %concatenate.pivot.0.60
  %.in100 = phi ptr addrspace(1) [ %Arg_10.1128, %concatenate.pivot.0.60 ], [ %Arg_9.1031, %concatenate.pivot.1.61 ], [ %Arg_8.934, %concatenate.pivot.2.63 ], [ %Arg_7.837, %concatenate.pivot.3.65 ], [ %Arg_6.740, %concatenate.pivot.4.66 ], [ %Arg_5.643, %concatenate.pivot.5.69 ], [ %Arg_4.546, %concatenate.pivot.6.70 ], [ %Arg_3.449, %concatenate.pivot.7.72 ], [ %Arg_2.352, %concatenate.pivot.8.74 ], [ %Arg_1.255, %concatenate.pivot.9.75 ]
  %52 = load float, ptr addrspace(1) %.in100, align 4, !invariant.load !267
  %multiply.2576 = fmul float %Arg_11.12, %52
  %multiply.2679 = fmul float %Arg_0.122, %multiply.2576
  %multiply.3084 = fmul float %subtract.29, %multiply.2679
  store float %multiply.3084, ptr addrspace(1) %lsr.iv148, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %53 = mul nuw nsw i32 %0, 10
  %54 = add nuw nsw i32 %53, %thread_id.y99
  %.frozen113 = freeze i32 %54
  %55 = udiv i32 %.frozen113, 10
  %56 = mul i32 %55, 10
  %.decomposed114 = sub i32 %.frozen113, %56
  %57 = zext i32 %55 to i64
  %58 = zext i32 %.decomposed114 to i64
  %output_element_address = getelementptr inbounds [64 x [10 x float]], ptr addrspace(1) %arg12139, i64 0, i64 %57, i64 %58
  store float %add.36.i109, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @reduce_3891(ptr noalias nocapture readonly align 128 dereferenceable(2560) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(40) %arg2) local_unnamed_addr #0 {
entry:
  %arg234 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg132 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg030 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %0, 31
  %thread_id.y18 = lshr i32 %0, 5
  %Arg_1.2 = load float, ptr addrspace(1) %arg132, align 128, !invariant.load !267
  %1 = zext i32 %thread_id.x to i64
  %2 = add nuw nsw i32 %thread_id.y18, -32
  %3 = zext i32 %0 to i64
  %4 = lshr i64 %3, 5
  %5 = mul nuw nsw i64 %4, 40
  %6 = shl nuw nsw i64 %1, 2
  %7 = add i64 %5, %6
  %scevgep = getelementptr i8, ptr addrspace(1) %arg030, i64 %7
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv36 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep37, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %2, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.028 = phi float [ %Arg_1.2, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %8 = trunc i64 %1 to i32
  %9 = icmp ult i32 %8, 10
  br i1 %9, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.6.i27, %x_in_tile-true ], [ %partial_reduction_result.028, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep37 = getelementptr i8, ptr addrspace(1) %lsr.iv36, i64 1280
  %10 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %10, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %11 = trunc i64 %1 to i32
  %12 = zext i32 %thread_id.y18 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache89, i64 0, i64 0, i64 0, i64 %1, i64 %12
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache89, i64 0, i64 0, i64 0, i64 %12, i64 %1
  %partial_reduction_result4 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %13 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  %add.6.i = fadd float %partial_reduction_result4, %13
  %14 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i, i32 8, i32 31)
  %add.6.i23 = fadd float %add.6.i, %14
  %15 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i23, i32 4, i32 31)
  %add.6.i24 = fadd float %add.6.i23, %15
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i24, i32 2, i32 31)
  %add.6.i25 = fadd float %add.6.i24, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i25, i32 1, i32 31)
  %add.6.i26 = fadd float %add.6.i25, %17
  store float %add.6.i26, ptr addrspace(3) %shmem_transposed_addr, align 4
  %18 = icmp ult i32 %0, 320
  %19 = icmp eq i32 %11, 0
  %20 = and i1 %18, %19
  %output_element_address = getelementptr inbounds [10 x float], ptr addrspace(1) %arg234, i64 0, i64 %12
  br i1 %20, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %Arg_0.13 = load float, ptr addrspace(1) %lsr.iv36, align 4, !invariant.load !267
  %add.6.i27 = fadd float %partial_reduction_result.028, %Arg_0.13
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.6.i26, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_331(ptr noalias nocapture readonly align 16 dereferenceable(40) %arg0, ptr noalias nocapture align 128 dereferenceable(40) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2) local_unnamed_addr #6 {
entry:
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !321
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.5 = fmul float %4, %6
  %subtract.6 = fsub float %3, %multiply.5
  store float %subtract.6, ptr addrspace(1) %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_330(ptr noalias nocapture readonly align 16 dereferenceable(20440) %arg0, ptr noalias nocapture align 128 dereferenceable(20440) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2) local_unnamed_addr #6 {
entry:
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !290
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %3 = icmp ult i32 %linear_index, 5110
  br i1 %3, label %fusion_330.in_bounds-true, label %fusion_330.in_bounds-after

fusion_330.in_bounds-after:                       ; preds = %fusion_330.in_bounds-true, %entry
  ret void

fusion_330.in_bounds-true:                        ; preds = %entry
  %4 = zext i32 %linear_index to i64
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %4
  %6 = load float, ptr addrspace(1) %5, align 4, !invariant.load !267
  %7 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %8 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %4
  %9 = load float, ptr addrspace(1) %8, align 4
  %multiply.5 = fmul float %7, %9
  %subtract.6 = fsub float %6, %multiply.5
  store float %subtract.6, ptr addrspace(1) %8, align 4
  br label %fusion_330.in_bounds-after
}

; Function Attrs: nounwind
define void @fusion_328(ptr noalias nocapture readonly align 128 dereferenceable(16744448) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(16744448) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(130816) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(16744448) %arg3) local_unnamed_addr #0 {
entry:
  %arg343 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg241 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg139 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg037 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !270
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y25 = lshr i32 %1, 5
  %2 = and i32 %0, 15
  %3 = lshr i32 %0, 4
  %4 = icmp eq i32 %2, 15
  %tile_bound1 = select i1 %4, i32 31, i32 32
  %tile_origin.2 = shl i32 %2, 5
  %5 = mul i32 %3, 65408
  %6 = add nuw nsw i32 %thread_id.y25, -32
  %7 = mul nuw nsw i32 %thread_id.y25, 511
  %8 = add i32 %5, %7
  %9 = add i32 %8, %tile_origin.2
  %10 = add i32 %9, %thread_id.x
  %11 = zext i32 %10 to i64
  %12 = shl nuw nsw i64 %11, 2
  %scevgep = getelementptr i8, ptr addrspace(1) %arg139, i64 %12
  %scevgep47 = getelementptr i8, ptr addrspace(1) %arg037, i64 %12
  %scevgep50 = getelementptr i8, ptr addrspace(1) %arg343, i64 %12
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv51 = phi ptr addrspace(1) [ %scevgep50, %entry ], [ %scevgep52, %x_in_tile-after ]
  %lsr.iv48 = phi ptr addrspace(1) [ %scevgep47, %entry ], [ %scevgep49, %x_in_tile-after ]
  %lsr.iv45 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep46, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %6, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.035 = phi float [ -0.000000e+00, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %13 = icmp ult i32 %thread_id.x, %tile_bound1
  br i1 %13, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.12.i34, %x_in_tile-true ], [ %partial_reduction_result.035, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep46 = getelementptr i8, ptr addrspace(1) %lsr.iv45, i64 65408
  %scevgep49 = getelementptr i8, ptr addrspace(1) %lsr.iv48, i64 65408
  %scevgep52 = getelementptr i8, ptr addrspace(1) %lsr.iv51, i64 65408
  %14 = icmp ugt i32 %lsr.iv.next, 95
  br i1 %14, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %15 = zext i32 %thread_id.x to i64
  %16 = zext i32 %thread_id.y25 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache90, i64 0, i64 0, i64 0, i64 %15, i64 %16
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache90, i64 0, i64 0, i64 0, i64 %16, i64 %15
  %partial_reduction_result11 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result11, i32 16, i32 31)
  %add.12.i = fadd float %partial_reduction_result11, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i, i32 8, i32 31)
  %add.12.i30 = fadd float %add.12.i, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i30, i32 4, i32 31)
  %add.12.i31 = fadd float %add.12.i30, %19
  %20 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i31, i32 2, i32 31)
  %add.12.i32 = fadd float %add.12.i31, %20
  %21 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.12.i32, i32 1, i32 31)
  %add.12.i33 = fadd float %add.12.i32, %21
  store float %add.12.i33, ptr addrspace(3) %shmem_transposed_addr, align 4
  %22 = icmp ult i32 %thread_id.y25, %tile_bound1
  %23 = icmp eq i32 %thread_id.x, 0
  %24 = and i1 %23, %22
  br i1 %24, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %Arg_1.23 = load float, ptr addrspace(1) %lsr.iv45, align 4, !invariant.load !267
  %compare.5 = fcmp ogt float %Arg_1.23, 0.000000e+00
  %Arg_0.14 = load float, ptr addrspace(1) %lsr.iv48, align 4, !invariant.load !267
  %25 = select i1 %compare.5, float %Arg_0.14, float 0.000000e+00
  %add.12.i34 = fadd float %partial_reduction_result.035, %25
  store float %25, ptr addrspace(1) %lsr.iv51, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %26 = or i32 %tile_origin.2, %thread_id.y25
  %27 = mul nuw nsw i32 %3, 511
  %28 = add nuw nsw i32 %26, %27
  %.frozen = freeze i32 %28
  %29 = udiv i32 %.frozen, 511
  %30 = mul i32 %29, 511
  %.decomposed = sub i32 %.frozen, %30
  %31 = zext i32 %29 to i64
  %32 = zext i32 %.decomposed to i64
  %output_element_address = getelementptr inbounds [64 x [511 x float]], ptr addrspace(1) %arg241, i64 0, i64 %31, i64 %32
  store float %add.12.i33, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: nounwind
define void @reduce_3908(ptr noalias nocapture readonly align 128 dereferenceable(130816) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(4) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(2044) %arg2) local_unnamed_addr #0 {
entry:
  %arg234 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg132 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg030 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !301
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %thread_id.x = and i32 %1, 31
  %thread_id.y18 = lshr i32 %1, 5
  %2 = icmp eq i32 %0, 15
  %tile_bound1 = select i1 %2, i32 31, i32 32
  %tile_origin.2 = shl nuw nsw i32 %0, 5
  %Arg_1.2 = load float, ptr addrspace(1) %arg132, align 128, !invariant.load !267
  %3 = or i32 %tile_origin.2, %thread_id.x
  %4 = zext i32 %3 to i64
  %5 = add nuw nsw i32 %thread_id.y18, -32
  %6 = zext i32 %1 to i64
  %7 = lshr i64 %6, 5
  %8 = mul nuw nsw i64 %7, 2044
  %9 = shl nuw nsw i64 %4, 2
  %10 = add i64 %8, %9
  %scevgep = getelementptr i8, ptr addrspace(1) %arg030, i64 %10
  br label %y_in_tile.loop_body

common.ret:                                       ; preds = %y_in_tile.loop_exit, %reduction_write_output-true
  ret void

y_in_tile.loop_body:                              ; preds = %entry, %x_in_tile-after
  %lsr.iv36 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep37, %x_in_tile-after ]
  %lsr.iv = phi i32 [ %5, %entry ], [ %lsr.iv.next, %x_in_tile-after ]
  %partial_reduction_result.028 = phi float [ %Arg_1.2, %entry ], [ %partial_reduction_result.1, %x_in_tile-after ]
  %11 = icmp ult i32 %thread_id.x, %tile_bound1
  br i1 %11, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %y_in_tile.loop_body
  %partial_reduction_result.1 = phi float [ %add.6.i27, %x_in_tile-true ], [ %partial_reduction_result.028, %y_in_tile.loop_body ]
  %lsr.iv.next = add nsw i32 %lsr.iv, 32
  %scevgep37 = getelementptr i8, ptr addrspace(1) %lsr.iv36, i64 65408
  %12 = icmp ugt i32 %lsr.iv.next, 31
  br i1 %12, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_exit:                              ; preds = %x_in_tile-after
  %13 = zext i32 %thread_id.x to i64
  %14 = zext i32 %thread_id.y18 to i64
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache91, i64 0, i64 0, i64 0, i64 %13, i64 %14
  store float %partial_reduction_result.1, ptr addrspace(3) %shmem_output_address, align 4
  tail call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache91, i64 0, i64 0, i64 0, i64 %14, i64 %13
  %partial_reduction_result4 = load float, ptr addrspace(3) %shmem_transposed_addr, align 4
  %15 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  %add.6.i = fadd float %partial_reduction_result4, %15
  %16 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i, i32 8, i32 31)
  %add.6.i23 = fadd float %add.6.i, %16
  %17 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i23, i32 4, i32 31)
  %add.6.i24 = fadd float %add.6.i23, %17
  %18 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i24, i32 2, i32 31)
  %add.6.i25 = fadd float %add.6.i24, %18
  %19 = tail call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %add.6.i25, i32 1, i32 31)
  %add.6.i26 = fadd float %add.6.i25, %19
  store float %add.6.i26, ptr addrspace(3) %shmem_transposed_addr, align 4
  %20 = icmp ult i32 %thread_id.y18, %tile_bound1
  %21 = icmp eq i32 %thread_id.x, 0
  %22 = and i1 %21, %20
  %23 = or i32 %tile_origin.2, %thread_id.y18
  %24 = zext i32 %23 to i64
  %output_element_address = getelementptr inbounds [511 x float], ptr addrspace(1) %arg234, i64 0, i64 %24
  br i1 %22, label %reduction_write_output-true, label %common.ret

x_in_tile-true:                                   ; preds = %y_in_tile.loop_body
  %Arg_0.13 = load float, ptr addrspace(1) %lsr.iv36, align 4, !invariant.load !267
  %add.6.i27 = fadd float %partial_reduction_result.028, %Arg_0.13
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  store float %add.6.i26, ptr addrspace(1) %output_element_address, align 4
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_327(ptr noalias nocapture readonly align 16 dereferenceable(2044) %arg0, ptr noalias nocapture align 128 dereferenceable(2044) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2) local_unnamed_addr #6 {
entry:
  %arg25 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !322
  %1 = zext i32 %0 to i64
  %2 = getelementptr inbounds float, ptr addrspace(1) %arg01, i64 %1
  %3 = load float, ptr addrspace(1) %2, align 4, !invariant.load !267
  %4 = load float, ptr addrspace(1) %arg25, align 16, !invariant.load !267
  %5 = getelementptr inbounds float, ptr addrspace(1) %arg13, i64 %1
  %6 = load float, ptr addrspace(1) %5, align 4
  %multiply.5 = fmul float %4, %6
  %subtract.6 = fsub float %3, %multiply.5
  store float %subtract.6, ptr addrspace(1) %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_326(ptr noalias nocapture readonly align 16 dereferenceable(1128288) %arg0, ptr noalias nocapture align 128 dereferenceable(1128288) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2) local_unnamed_addr #6 {
entry:
  %arg211 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg19 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg07 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !323
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = icmp ult i32 %linear_index_base, 282072
  br i1 %4, label %fusion_326.in_bounds-true, label %fusion_326.in_bounds-after

fusion_326.in_bounds-after:                       ; preds = %fusion_326.in_bounds-true, %entry
  ret void

fusion_326.in_bounds-true:                        ; preds = %entry
  %5 = zext i32 %linear_index_base to i64
  %6 = getelementptr float, ptr addrspace(1) %arg07, i64 %5
  %7 = load <4 x float>, ptr addrspace(1) %6, align 16, !invariant.load !267
  %8 = extractelement <4 x float> %7, i32 0
  %9 = extractelement <4 x float> %7, i32 1
  %10 = extractelement <4 x float> %7, i32 2
  %11 = extractelement <4 x float> %7, i32 3
  %12 = load float, ptr addrspace(1) %arg211, align 16, !invariant.load !267
  %13 = getelementptr float, ptr addrspace(1) %arg19, i64 %5
  %14 = load <4 x float>, ptr addrspace(1) %13, align 16
  %15 = extractelement <4 x float> %14, i32 0
  %16 = extractelement <4 x float> %14, i32 1
  %17 = extractelement <4 x float> %14, i32 2
  %18 = extractelement <4 x float> %14, i32 3
  %multiply.5 = fmul float %12, %15
  %subtract.6 = fsub float %8, %multiply.5
  %multiply.51 = fmul float %12, %16
  %subtract.62 = fsub float %9, %multiply.51
  %multiply.53 = fmul float %12, %17
  %subtract.64 = fsub float %10, %multiply.53
  %multiply.55 = fmul float %12, %18
  %subtract.66 = fsub float %11, %multiply.55
  %19 = insertelement <4 x float> poison, float %subtract.6, i32 0
  %20 = insertelement <4 x float> %19, float %subtract.62, i32 1
  %21 = insertelement <4 x float> %20, float %subtract.64, i32 2
  %22 = insertelement <4 x float> %21, float %subtract.66, i32 3
  store <4 x float> %22, ptr addrspace(1) %13, align 16
  br label %fusion_326.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_359(ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(8650752) %arg1, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg10, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg13, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg17, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg18, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg19, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg20, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg22, ptr noalias nocapture readonly align 128 dereferenceable(11796480) %arg23, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg24, ptr noalias nocapture readonly align 128 dereferenceable(7340032) %arg25, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg26, ptr noalias nocapture readonly align 128 dereferenceable(12582912) %arg27, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg28, ptr noalias nocapture readonly align 128 dereferenceable(6291456) %arg29, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg30, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg31, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg32, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg33, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg34, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg35, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg36, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg37, ptr noalias nocapture readonly align 128 dereferenceable(18087936) %arg38, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg39, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg40, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg41, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg42, ptr noalias nocapture readonly align 16 dereferenceable(2097152) %arg43, ptr noalias nocapture readonly align 128 dereferenceable(11534336) %arg44, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg45, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg46, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg47, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg48, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg49, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg50, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg51, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg52, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg53, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg54, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg55, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg56, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg57, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg58, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg59, ptr noalias nocapture writeonly align 128 dereferenceable(2097152) %arg60) local_unnamed_addr #6 {
entry:
  %arg60259 = addrspacecast ptr %arg60 to ptr addrspace(1)
  %arg59257 = addrspacecast ptr %arg59 to ptr addrspace(1)
  %arg58255 = addrspacecast ptr %arg58 to ptr addrspace(1)
  %arg57253 = addrspacecast ptr %arg57 to ptr addrspace(1)
  %arg56251 = addrspacecast ptr %arg56 to ptr addrspace(1)
  %arg55249 = addrspacecast ptr %arg55 to ptr addrspace(1)
  %arg54247 = addrspacecast ptr %arg54 to ptr addrspace(1)
  %arg53245 = addrspacecast ptr %arg53 to ptr addrspace(1)
  %arg52243 = addrspacecast ptr %arg52 to ptr addrspace(1)
  %arg51241 = addrspacecast ptr %arg51 to ptr addrspace(1)
  %arg50239 = addrspacecast ptr %arg50 to ptr addrspace(1)
  %arg49237 = addrspacecast ptr %arg49 to ptr addrspace(1)
  %arg48235 = addrspacecast ptr %arg48 to ptr addrspace(1)
  %arg47233 = addrspacecast ptr %arg47 to ptr addrspace(1)
  %arg46231 = addrspacecast ptr %arg46 to ptr addrspace(1)
  %arg45229 = addrspacecast ptr %arg45 to ptr addrspace(1)
  %arg44227 = addrspacecast ptr %arg44 to ptr addrspace(1)
  %arg43225 = addrspacecast ptr %arg43 to ptr addrspace(1)
  %arg42223 = addrspacecast ptr %arg42 to ptr addrspace(1)
  %arg41221 = addrspacecast ptr %arg41 to ptr addrspace(1)
  %arg40219 = addrspacecast ptr %arg40 to ptr addrspace(1)
  %arg39217 = addrspacecast ptr %arg39 to ptr addrspace(1)
  %arg38215 = addrspacecast ptr %arg38 to ptr addrspace(1)
  %arg37213 = addrspacecast ptr %arg37 to ptr addrspace(1)
  %arg36211 = addrspacecast ptr %arg36 to ptr addrspace(1)
  %arg35209 = addrspacecast ptr %arg35 to ptr addrspace(1)
  %arg34207 = addrspacecast ptr %arg34 to ptr addrspace(1)
  %arg33205 = addrspacecast ptr %arg33 to ptr addrspace(1)
  %arg32203 = addrspacecast ptr %arg32 to ptr addrspace(1)
  %arg31201 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg30199 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg29197 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg28195 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg27193 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg26191 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg25189 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg24187 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg23185 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg22183 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg21181 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg20179 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg19177 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg18175 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg17173 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg16171 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg15169 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14167 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13165 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12163 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11161 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10159 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9157 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8155 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7153 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6151 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5149 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4147 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3145 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2143 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1141 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0139 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 6
  %5 = and i32 %linear_index3, 63
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 62
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 61
  %8 = and i32 %3, 60
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg0139, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg2143, align 16, !invariant.load !267
  %17 = zext i32 %4 to i64
  %18 = zext i32 %8 to i64
  %19 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg1141, i64 0, i64 %17, i64 %18
  %20 = getelementptr inbounds float, ptr addrspace(1) %19, i64 192
  %21 = load <2 x float>, ptr addrspace(1) %20, align 16, !invariant.load !267
  %22 = extractelement <2 x float> %21, i32 0
  %23 = extractelement <2 x float> %21, i32 1
  %multiply.48 = fmul float %16, %22
  %subtract.49 = fsub float %12, %multiply.48
  %24 = getelementptr float, ptr addrspace(1) %arg3145, i64 %9
  %25 = load <4 x float>, ptr addrspace(1) %24, align 16, !invariant.load !267
  %26 = extractelement <4 x float> %25, i32 0
  %27 = extractelement <4 x float> %25, i32 1
  %28 = extractelement <4 x float> %25, i32 2
  %29 = extractelement <4 x float> %25, i32 3
  %30 = load <2 x float>, ptr addrspace(1) %19, align 16, !invariant.load !267
  %31 = extractelement <2 x float> %30, i32 0
  %32 = extractelement <2 x float> %30, i32 1
  %33 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg5149, i64 0, i64 %17, i64 %18
  %34 = load <2 x float>, ptr addrspace(1) %33, align 16, !invariant.load !267
  %35 = extractelement <2 x float> %34, i32 0
  %36 = extractelement <2 x float> %34, i32 1
  %add.52 = fadd float %31, %35
  %37 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg4147, i64 0, i64 %17, i64 %18
  %38 = load <2 x float>, ptr addrspace(1) %37, align 16, !invariant.load !267
  %39 = extractelement <2 x float> %38, i32 0
  %40 = extractelement <2 x float> %38, i32 1
  %add.54 = fadd float %add.52, %39
  %multiply.56 = fmul float %16, %add.54
  %subtract.57 = fsub float %26, %multiply.56
  %41 = getelementptr float, ptr addrspace(1) %arg6151, i64 %9
  %42 = load <4 x float>, ptr addrspace(1) %41, align 16, !invariant.load !267
  %43 = extractelement <4 x float> %42, i32 0
  %44 = extractelement <4 x float> %42, i32 1
  %45 = extractelement <4 x float> %42, i32 2
  %46 = extractelement <4 x float> %42, i32 3
  %47 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg7153, i64 0, i64 %17, i64 %18
  %48 = getelementptr inbounds float, ptr addrspace(1) %47, i64 32
  %49 = load <2 x float>, ptr addrspace(1) %48, align 16, !invariant.load !267
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %multiply.59 = fmul float %16, %50
  %subtract.60 = fsub float %43, %multiply.59
  %52 = getelementptr float, ptr addrspace(1) %arg8155, i64 %9
  %53 = load <4 x float>, ptr addrspace(1) %52, align 16, !invariant.load !267
  %54 = extractelement <4 x float> %53, i32 0
  %55 = extractelement <4 x float> %53, i32 1
  %56 = extractelement <4 x float> %53, i32 2
  %57 = extractelement <4 x float> %53, i32 3
  %58 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg11161, i64 0, i64 %17, i64 %18
  %59 = getelementptr inbounds float, ptr addrspace(1) %58, i64 32
  %60 = load <2 x float>, ptr addrspace(1) %59, align 16, !invariant.load !267
  %61 = extractelement <2 x float> %60, i32 0
  %62 = extractelement <2 x float> %60, i32 1
  %63 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg10159, i64 0, i64 %17, i64 %18
  %64 = getelementptr inbounds float, ptr addrspace(1) %63, i64 32
  %65 = load <2 x float>, ptr addrspace(1) %64, align 16, !invariant.load !267
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %add.63 = fadd float %61, %66
  %68 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg9157, i64 0, i64 %17, i64 %18
  %69 = getelementptr inbounds float, ptr addrspace(1) %68, i64 32
  %70 = load <2 x float>, ptr addrspace(1) %69, align 16, !invariant.load !267
  %71 = extractelement <2 x float> %70, i32 0
  %72 = extractelement <2 x float> %70, i32 1
  %add.65 = fadd float %add.63, %71
  %multiply.67 = fmul float %16, %add.65
  %subtract.68 = fsub float %54, %multiply.67
  %73 = getelementptr float, ptr addrspace(1) %arg12163, i64 %9
  %74 = load <4 x float>, ptr addrspace(1) %73, align 16, !invariant.load !267
  %75 = extractelement <4 x float> %74, i32 0
  %76 = extractelement <4 x float> %74, i32 1
  %77 = extractelement <4 x float> %74, i32 2
  %78 = extractelement <4 x float> %74, i32 3
  %79 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg15169, i64 0, i64 %17, i64 %18
  %80 = load <2 x float>, ptr addrspace(1) %79, align 16, !invariant.load !267
  %81 = extractelement <2 x float> %80, i32 0
  %82 = extractelement <2 x float> %80, i32 1
  %83 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg14167, i64 0, i64 %17, i64 %18
  %84 = load <2 x float>, ptr addrspace(1) %83, align 16, !invariant.load !267
  %85 = extractelement <2 x float> %84, i32 0
  %86 = extractelement <2 x float> %84, i32 1
  %add.71 = fadd float %81, %85
  %87 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg13165, i64 0, i64 %17, i64 %18
  %88 = load <2 x float>, ptr addrspace(1) %87, align 16, !invariant.load !267
  %89 = extractelement <2 x float> %88, i32 0
  %90 = extractelement <2 x float> %88, i32 1
  %add.73 = fadd float %add.71, %89
  %multiply.75 = fmul float %16, %add.73
  %subtract.76 = fsub float %75, %multiply.75
  %91 = getelementptr float, ptr addrspace(1) %arg16171, i64 %9
  %92 = load <4 x float>, ptr addrspace(1) %91, align 16, !invariant.load !267
  %93 = extractelement <4 x float> %92, i32 0
  %94 = extractelement <4 x float> %92, i32 1
  %95 = extractelement <4 x float> %92, i32 2
  %96 = extractelement <4 x float> %92, i32 3
  %97 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg19177, i64 0, i64 %17, i64 %18
  %98 = getelementptr inbounds float, ptr addrspace(1) %97, i64 32
  %99 = load <2 x float>, ptr addrspace(1) %98, align 16, !invariant.load !267
  %100 = extractelement <2 x float> %99, i32 0
  %101 = extractelement <2 x float> %99, i32 1
  %102 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg18175, i64 0, i64 %17, i64 %18
  %103 = getelementptr inbounds float, ptr addrspace(1) %102, i64 32
  %104 = load <2 x float>, ptr addrspace(1) %103, align 16, !invariant.load !267
  %105 = extractelement <2 x float> %104, i32 0
  %106 = extractelement <2 x float> %104, i32 1
  %add.79 = fadd float %100, %105
  %107 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg17173, i64 0, i64 %17, i64 %18
  %108 = getelementptr inbounds float, ptr addrspace(1) %107, i64 32
  %109 = load <2 x float>, ptr addrspace(1) %108, align 16, !invariant.load !267
  %110 = extractelement <2 x float> %109, i32 0
  %111 = extractelement <2 x float> %109, i32 1
  %add.81 = fadd float %add.79, %110
  %multiply.83 = fmul float %16, %add.81
  %subtract.84 = fsub float %93, %multiply.83
  %112 = getelementptr float, ptr addrspace(1) %arg20179, i64 %9
  %113 = load <4 x float>, ptr addrspace(1) %112, align 16, !invariant.load !267
  %114 = extractelement <4 x float> %113, i32 0
  %115 = extractelement <4 x float> %113, i32 1
  %116 = extractelement <4 x float> %113, i32 2
  %117 = extractelement <4 x float> %113, i32 3
  %118 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg23185, i64 0, i64 %17, i64 %18
  %119 = getelementptr inbounds float, ptr addrspace(1) %118, i64 32
  %120 = load <2 x float>, ptr addrspace(1) %119, align 16, !invariant.load !267
  %121 = extractelement <2 x float> %120, i32 0
  %122 = extractelement <2 x float> %120, i32 1
  %123 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg22183, i64 0, i64 %17, i64 %18
  %124 = getelementptr inbounds float, ptr addrspace(1) %123, i64 32
  %125 = load <2 x float>, ptr addrspace(1) %124, align 16, !invariant.load !267
  %126 = extractelement <2 x float> %125, i32 0
  %127 = extractelement <2 x float> %125, i32 1
  %add.87 = fadd float %121, %126
  %128 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg21181, i64 0, i64 %17, i64 %18
  %129 = getelementptr inbounds float, ptr addrspace(1) %128, i64 32
  %130 = load <2 x float>, ptr addrspace(1) %129, align 16, !invariant.load !267
  %131 = extractelement <2 x float> %130, i32 0
  %132 = extractelement <2 x float> %130, i32 1
  %add.89 = fadd float %add.87, %131
  %multiply.91 = fmul float %16, %add.89
  %subtract.92 = fsub float %114, %multiply.91
  %133 = getelementptr float, ptr addrspace(1) %arg24187, i64 %9
  %134 = load <4 x float>, ptr addrspace(1) %133, align 16, !invariant.load !267
  %135 = extractelement <4 x float> %134, i32 0
  %136 = extractelement <4 x float> %134, i32 1
  %137 = extractelement <4 x float> %134, i32 2
  %138 = extractelement <4 x float> %134, i32 3
  %139 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg27193, i64 0, i64 %17, i64 %18
  %140 = getelementptr inbounds float, ptr addrspace(1) %139, i64 32
  %141 = load <2 x float>, ptr addrspace(1) %140, align 16, !invariant.load !267
  %142 = extractelement <2 x float> %141, i32 0
  %143 = extractelement <2 x float> %141, i32 1
  %144 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg26191, i64 0, i64 %17, i64 %18
  %145 = getelementptr inbounds float, ptr addrspace(1) %144, i64 32
  %146 = load <2 x float>, ptr addrspace(1) %145, align 16, !invariant.load !267
  %147 = extractelement <2 x float> %146, i32 0
  %148 = extractelement <2 x float> %146, i32 1
  %add.95 = fadd float %142, %147
  %149 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg25189, i64 0, i64 %17, i64 %18
  %150 = getelementptr inbounds float, ptr addrspace(1) %149, i64 32
  %151 = load <2 x float>, ptr addrspace(1) %150, align 16, !invariant.load !267
  %152 = extractelement <2 x float> %151, i32 0
  %153 = extractelement <2 x float> %151, i32 1
  %add.97 = fadd float %add.95, %152
  %multiply.99 = fmul float %16, %add.97
  %subtract.100 = fsub float %135, %multiply.99
  %154 = getelementptr float, ptr addrspace(1) %arg28195, i64 %9
  %155 = load <4 x float>, ptr addrspace(1) %154, align 16, !invariant.load !267
  %156 = extractelement <4 x float> %155, i32 0
  %157 = extractelement <4 x float> %155, i32 1
  %158 = extractelement <4 x float> %155, i32 2
  %159 = extractelement <4 x float> %155, i32 3
  %160 = getelementptr inbounds [8192 x [192 x float]], ptr addrspace(1) %arg29197, i64 0, i64 %17, i64 %18
  %161 = load <2 x float>, ptr addrspace(1) %160, align 16, !invariant.load !267
  %162 = extractelement <2 x float> %161, i32 0
  %163 = extractelement <2 x float> %161, i32 1
  %multiply.102 = fmul float %16, %162
  %subtract.103 = fsub float %156, %multiply.102
  %164 = getelementptr float, ptr addrspace(1) %arg30199, i64 %9
  %165 = load <4 x float>, ptr addrspace(1) %164, align 16, !invariant.load !267
  %166 = extractelement <4 x float> %165, i32 0
  %167 = extractelement <4 x float> %165, i32 1
  %168 = extractelement <4 x float> %165, i32 2
  %169 = extractelement <4 x float> %165, i32 3
  %170 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg31201, i64 0, i64 %17, i64 %18
  %171 = load <2 x float>, ptr addrspace(1) %170, align 16, !invariant.load !267
  %172 = extractelement <2 x float> %171, i32 0
  %173 = extractelement <2 x float> %171, i32 1
  %174 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg32203, i64 0, i64 %17, i64 %18
  %175 = load <2 x float>, ptr addrspace(1) %174, align 16, !invariant.load !267
  %176 = extractelement <2 x float> %175, i32 0
  %177 = extractelement <2 x float> %175, i32 1
  %add.104 = fadd float %172, %176
  %multiply.106 = fmul float %16, %add.104
  %subtract.107 = fsub float %166, %multiply.106
  %178 = getelementptr float, ptr addrspace(1) %arg33205, i64 %9
  %179 = load <4 x float>, ptr addrspace(1) %178, align 16, !invariant.load !267
  %180 = extractelement <4 x float> %179, i32 0
  %181 = extractelement <4 x float> %179, i32 1
  %182 = extractelement <4 x float> %179, i32 2
  %183 = extractelement <4 x float> %179, i32 3
  %184 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg34207, i64 0, i64 %17, i64 %18
  %185 = getelementptr inbounds float, ptr addrspace(1) %184, i64 32
  %186 = load <2 x float>, ptr addrspace(1) %185, align 16, !invariant.load !267
  %187 = extractelement <2 x float> %186, i32 0
  %188 = extractelement <2 x float> %186, i32 1
  %multiply.109 = fmul float %16, %187
  %subtract.110 = fsub float %180, %multiply.109
  %189 = getelementptr float, ptr addrspace(1) %arg35209, i64 %9
  %190 = load <4 x float>, ptr addrspace(1) %189, align 16, !invariant.load !267
  %191 = extractelement <4 x float> %190, i32 0
  %192 = extractelement <4 x float> %190, i32 1
  %193 = extractelement <4 x float> %190, i32 2
  %194 = extractelement <4 x float> %190, i32 3
  %195 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg36211, i64 0, i64 %17, i64 %18
  %196 = getelementptr inbounds float, ptr addrspace(1) %195, i64 32
  %197 = load <2 x float>, ptr addrspace(1) %196, align 16, !invariant.load !267
  %198 = extractelement <2 x float> %197, i32 0
  %199 = extractelement <2 x float> %197, i32 1
  %multiply.112 = fmul float %16, %198
  %subtract.113 = fsub float %191, %multiply.112
  %200 = getelementptr float, ptr addrspace(1) %arg37213, i64 %9
  %201 = load <4 x float>, ptr addrspace(1) %200, align 16, !invariant.load !267
  %202 = extractelement <4 x float> %201, i32 0
  %203 = extractelement <4 x float> %201, i32 1
  %204 = extractelement <4 x float> %201, i32 2
  %205 = extractelement <4 x float> %201, i32 3
  %206 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg38215, i64 0, i64 %17, i64 %18
  %207 = getelementptr inbounds float, ptr addrspace(1) %206, i64 360
  %208 = load <2 x float>, ptr addrspace(1) %207, align 16, !invariant.load !267
  %209 = extractelement <2 x float> %208, i32 0
  %210 = extractelement <2 x float> %208, i32 1
  %multiply.115 = fmul float %16, %209
  %subtract.116 = fsub float %202, %multiply.115
  %211 = getelementptr float, ptr addrspace(1) %arg39217, i64 %9
  %212 = load <4 x float>, ptr addrspace(1) %211, align 16, !invariant.load !267
  %213 = extractelement <4 x float> %212, i32 0
  %214 = extractelement <4 x float> %212, i32 1
  %215 = extractelement <4 x float> %212, i32 2
  %216 = extractelement <4 x float> %212, i32 3
  %217 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg41221, i64 0, i64 %17, i64 0
  %218 = load float, ptr addrspace(1) %217, align 4, !invariant.load !267
  %219 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg40219, i64 0, i64 %17, i64 %18
  %220 = getelementptr inbounds float, ptr addrspace(1) %219, i64 1752
  %221 = load <2 x float>, ptr addrspace(1) %220, align 16, !invariant.load !267
  %222 = extractelement <2 x float> %221, i32 0
  %223 = extractelement <2 x float> %221, i32 1
  %multiply.120 = fmul float %218, %222
  %multiply.121 = fmul float %16, %multiply.120
  %subtract.122 = fsub float %213, %multiply.121
  %224 = getelementptr float, ptr addrspace(1) %arg42223, i64 %9
  %225 = load <4 x float>, ptr addrspace(1) %224, align 16, !invariant.load !267
  %226 = extractelement <4 x float> %225, i32 0
  %227 = extractelement <4 x float> %225, i32 1
  %228 = extractelement <4 x float> %225, i32 2
  %229 = extractelement <4 x float> %225, i32 3
  %230 = getelementptr inbounds float, ptr addrspace(1) %219, i64 1864
  %231 = load <2 x float>, ptr addrspace(1) %230, align 16, !invariant.load !267
  %232 = extractelement <2 x float> %231, i32 0
  %233 = extractelement <2 x float> %231, i32 1
  %multiply.124 = fmul float %16, %232
  %subtract.125 = fsub float %226, %multiply.124
  %234 = getelementptr float, ptr addrspace(1) %arg43225, i64 %9
  %235 = load <4 x float>, ptr addrspace(1) %234, align 16, !invariant.load !267
  %236 = extractelement <4 x float> %235, i32 0
  %237 = extractelement <4 x float> %235, i32 1
  %238 = extractelement <4 x float> %235, i32 2
  %239 = extractelement <4 x float> %235, i32 3
  %240 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg44227, i64 0, i64 %17, i64 %18
  %241 = getelementptr inbounds float, ptr addrspace(1) %240, i64 32
  %242 = load <2 x float>, ptr addrspace(1) %241, align 16, !invariant.load !267
  %243 = extractelement <2 x float> %242, i32 0
  %244 = extractelement <2 x float> %242, i32 1
  %multiply.127 = fmul float %16, %243
  %subtract.128 = fsub float %236, %multiply.127
  %245 = getelementptr float, ptr addrspace(1) %arg45229, i64 %9
  %246 = getelementptr float, ptr addrspace(1) %arg46231, i64 %9
  %247 = getelementptr float, ptr addrspace(1) %arg47233, i64 %9
  %248 = getelementptr float, ptr addrspace(1) %arg48235, i64 %9
  %249 = getelementptr float, ptr addrspace(1) %arg49237, i64 %9
  %250 = getelementptr float, ptr addrspace(1) %arg50239, i64 %9
  %251 = getelementptr float, ptr addrspace(1) %arg51241, i64 %9
  %252 = getelementptr float, ptr addrspace(1) %arg52243, i64 %9
  %253 = getelementptr float, ptr addrspace(1) %arg53245, i64 %9
  %254 = getelementptr float, ptr addrspace(1) %arg54247, i64 %9
  %255 = getelementptr float, ptr addrspace(1) %arg55249, i64 %9
  %256 = getelementptr float, ptr addrspace(1) %arg56251, i64 %9
  %257 = getelementptr float, ptr addrspace(1) %arg57253, i64 %9
  %258 = getelementptr float, ptr addrspace(1) %arg58255, i64 %9
  %259 = getelementptr float, ptr addrspace(1) %arg59257, i64 %9
  %260 = getelementptr float, ptr addrspace(1) %arg60259, i64 %9
  %261 = zext i32 %7 to i64
  %multiply.481 = fmul float %16, %23
  %subtract.492 = fsub float %13, %multiply.481
  %add.523 = fadd float %32, %36
  %add.544 = fadd float %add.523, %40
  %multiply.565 = fmul float %16, %add.544
  %subtract.576 = fsub float %27, %multiply.565
  %262 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg7153, i64 0, i64 %17, i64 %261
  %multiply.597 = fmul float %16, %51
  %subtract.608 = fsub float %44, %multiply.597
  %263 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg11161, i64 0, i64 %17, i64 %261
  %264 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg10159, i64 0, i64 %17, i64 %261
  %add.639 = fadd float %62, %67
  %265 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg9157, i64 0, i64 %17, i64 %261
  %add.6510 = fadd float %add.639, %72
  %multiply.6711 = fmul float %16, %add.6510
  %subtract.6812 = fsub float %55, %multiply.6711
  %add.7113 = fadd float %82, %86
  %add.7314 = fadd float %add.7113, %90
  %multiply.7515 = fmul float %16, %add.7314
  %subtract.7616 = fsub float %76, %multiply.7515
  %266 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg19177, i64 0, i64 %17, i64 %261
  %267 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg18175, i64 0, i64 %17, i64 %261
  %add.7917 = fadd float %101, %106
  %268 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg17173, i64 0, i64 %17, i64 %261
  %add.8118 = fadd float %add.7917, %111
  %multiply.8319 = fmul float %16, %add.8118
  %subtract.8420 = fsub float %94, %multiply.8319
  %269 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg23185, i64 0, i64 %17, i64 %261
  %270 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg22183, i64 0, i64 %17, i64 %261
  %add.8721 = fadd float %122, %127
  %271 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg21181, i64 0, i64 %17, i64 %261
  %add.8922 = fadd float %add.8721, %132
  %multiply.9123 = fmul float %16, %add.8922
  %subtract.9224 = fsub float %115, %multiply.9123
  %272 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg27193, i64 0, i64 %17, i64 %261
  %273 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg26191, i64 0, i64 %17, i64 %261
  %add.9525 = fadd float %143, %148
  %274 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg25189, i64 0, i64 %17, i64 %261
  %add.9726 = fadd float %add.9525, %153
  %multiply.9927 = fmul float %16, %add.9726
  %subtract.10028 = fsub float %136, %multiply.9927
  %multiply.10229 = fmul float %16, %163
  %subtract.10330 = fsub float %157, %multiply.10229
  %add.10431 = fadd float %173, %177
  %multiply.10632 = fmul float %16, %add.10431
  %subtract.10733 = fsub float %167, %multiply.10632
  %275 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg34207, i64 0, i64 %17, i64 %261
  %multiply.10934 = fmul float %16, %188
  %subtract.11035 = fsub float %181, %multiply.10934
  %276 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg36211, i64 0, i64 %17, i64 %261
  %multiply.11236 = fmul float %16, %199
  %subtract.11337 = fsub float %192, %multiply.11236
  %277 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg38215, i64 0, i64 %17, i64 %261
  %multiply.11538 = fmul float %16, %210
  %subtract.11639 = fsub float %203, %multiply.11538
  %278 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg40219, i64 0, i64 %17, i64 %261
  %multiply.12040 = fmul float %218, %223
  %multiply.12141 = fmul float %16, %multiply.12040
  %subtract.12242 = fsub float %214, %multiply.12141
  %multiply.12443 = fmul float %16, %233
  %subtract.12544 = fsub float %227, %multiply.12443
  %279 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg44227, i64 0, i64 %17, i64 %261
  %multiply.12745 = fmul float %16, %244
  %subtract.12846 = fsub float %237, %multiply.12745
  %280 = zext i32 %6 to i64
  %281 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg1141, i64 0, i64 %17, i64 %280
  %282 = getelementptr inbounds float, ptr addrspace(1) %281, i64 192
  %283 = load float, ptr addrspace(1) %282, align 8, !invariant.load !267
  %multiply.4847 = fmul float %16, %283
  %subtract.4948 = fsub float %14, %multiply.4847
  %284 = load float, ptr addrspace(1) %281, align 8, !invariant.load !267
  %285 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg5149, i64 0, i64 %17, i64 %280
  %286 = load float, ptr addrspace(1) %285, align 8, !invariant.load !267
  %add.5249 = fadd float %284, %286
  %287 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg4147, i64 0, i64 %17, i64 %280
  %288 = load float, ptr addrspace(1) %287, align 8, !invariant.load !267
  %add.5450 = fadd float %add.5249, %288
  %multiply.5651 = fmul float %16, %add.5450
  %subtract.5752 = fsub float %28, %multiply.5651
  %289 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg7153, i64 0, i64 %17, i64 %280
  %290 = getelementptr inbounds float, ptr addrspace(1) %289, i64 32
  %291 = load float, ptr addrspace(1) %290, align 8, !invariant.load !267
  %multiply.5953 = fmul float %16, %291
  %subtract.6054 = fsub float %45, %multiply.5953
  %292 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg11161, i64 0, i64 %17, i64 %280
  %293 = getelementptr inbounds float, ptr addrspace(1) %292, i64 32
  %294 = load float, ptr addrspace(1) %293, align 8, !invariant.load !267
  %295 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg10159, i64 0, i64 %17, i64 %280
  %296 = getelementptr inbounds float, ptr addrspace(1) %295, i64 32
  %297 = load float, ptr addrspace(1) %296, align 8, !invariant.load !267
  %add.6355 = fadd float %294, %297
  %298 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg9157, i64 0, i64 %17, i64 %280
  %299 = getelementptr inbounds float, ptr addrspace(1) %298, i64 32
  %300 = load float, ptr addrspace(1) %299, align 8, !invariant.load !267
  %add.6556 = fadd float %add.6355, %300
  %multiply.6757 = fmul float %16, %add.6556
  %subtract.6858 = fsub float %56, %multiply.6757
  %301 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg15169, i64 0, i64 %17, i64 %280
  %302 = load float, ptr addrspace(1) %301, align 8, !invariant.load !267
  %303 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg14167, i64 0, i64 %17, i64 %280
  %304 = load float, ptr addrspace(1) %303, align 8, !invariant.load !267
  %add.7159 = fadd float %302, %304
  %305 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg13165, i64 0, i64 %17, i64 %280
  %306 = load float, ptr addrspace(1) %305, align 8, !invariant.load !267
  %add.7360 = fadd float %add.7159, %306
  %multiply.7561 = fmul float %16, %add.7360
  %subtract.7662 = fsub float %77, %multiply.7561
  %307 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg19177, i64 0, i64 %17, i64 %280
  %308 = getelementptr inbounds float, ptr addrspace(1) %307, i64 32
  %309 = load float, ptr addrspace(1) %308, align 8, !invariant.load !267
  %310 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg18175, i64 0, i64 %17, i64 %280
  %311 = getelementptr inbounds float, ptr addrspace(1) %310, i64 32
  %312 = load float, ptr addrspace(1) %311, align 8, !invariant.load !267
  %add.7963 = fadd float %309, %312
  %313 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg17173, i64 0, i64 %17, i64 %280
  %314 = getelementptr inbounds float, ptr addrspace(1) %313, i64 32
  %315 = load float, ptr addrspace(1) %314, align 8, !invariant.load !267
  %add.8164 = fadd float %add.7963, %315
  %multiply.8365 = fmul float %16, %add.8164
  %subtract.8466 = fsub float %95, %multiply.8365
  %316 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg23185, i64 0, i64 %17, i64 %280
  %317 = getelementptr inbounds float, ptr addrspace(1) %316, i64 32
  %318 = load float, ptr addrspace(1) %317, align 8, !invariant.load !267
  %319 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg22183, i64 0, i64 %17, i64 %280
  %320 = getelementptr inbounds float, ptr addrspace(1) %319, i64 32
  %321 = load float, ptr addrspace(1) %320, align 8, !invariant.load !267
  %add.8767 = fadd float %318, %321
  %322 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg21181, i64 0, i64 %17, i64 %280
  %323 = getelementptr inbounds float, ptr addrspace(1) %322, i64 32
  %324 = load float, ptr addrspace(1) %323, align 8, !invariant.load !267
  %add.8968 = fadd float %add.8767, %324
  %multiply.9169 = fmul float %16, %add.8968
  %subtract.9270 = fsub float %116, %multiply.9169
  %325 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg27193, i64 0, i64 %17, i64 %280
  %326 = getelementptr inbounds float, ptr addrspace(1) %325, i64 32
  %327 = load float, ptr addrspace(1) %326, align 8, !invariant.load !267
  %328 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg26191, i64 0, i64 %17, i64 %280
  %329 = getelementptr inbounds float, ptr addrspace(1) %328, i64 32
  %330 = load float, ptr addrspace(1) %329, align 8, !invariant.load !267
  %add.9571 = fadd float %327, %330
  %331 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg25189, i64 0, i64 %17, i64 %280
  %332 = getelementptr inbounds float, ptr addrspace(1) %331, i64 32
  %333 = load float, ptr addrspace(1) %332, align 8, !invariant.load !267
  %add.9772 = fadd float %add.9571, %333
  %multiply.9973 = fmul float %16, %add.9772
  %subtract.10074 = fsub float %137, %multiply.9973
  %334 = getelementptr inbounds [8192 x [192 x float]], ptr addrspace(1) %arg29197, i64 0, i64 %17, i64 %280
  %335 = load float, ptr addrspace(1) %334, align 8, !invariant.load !267
  %multiply.10275 = fmul float %16, %335
  %subtract.10376 = fsub float %158, %multiply.10275
  %336 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg31201, i64 0, i64 %17, i64 %280
  %337 = load float, ptr addrspace(1) %336, align 8, !invariant.load !267
  %338 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg32203, i64 0, i64 %17, i64 %280
  %339 = load float, ptr addrspace(1) %338, align 8, !invariant.load !267
  %add.10477 = fadd float %337, %339
  %multiply.10678 = fmul float %16, %add.10477
  %subtract.10779 = fsub float %168, %multiply.10678
  %340 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg34207, i64 0, i64 %17, i64 %280
  %341 = getelementptr inbounds float, ptr addrspace(1) %340, i64 32
  %342 = load float, ptr addrspace(1) %341, align 8, !invariant.load !267
  %multiply.10980 = fmul float %16, %342
  %subtract.11081 = fsub float %182, %multiply.10980
  %343 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg36211, i64 0, i64 %17, i64 %280
  %344 = getelementptr inbounds float, ptr addrspace(1) %343, i64 32
  %345 = load float, ptr addrspace(1) %344, align 8, !invariant.load !267
  %multiply.11282 = fmul float %16, %345
  %subtract.11383 = fsub float %193, %multiply.11282
  %346 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg38215, i64 0, i64 %17, i64 %280
  %347 = getelementptr inbounds float, ptr addrspace(1) %346, i64 360
  %348 = load float, ptr addrspace(1) %347, align 8, !invariant.load !267
  %multiply.11584 = fmul float %16, %348
  %subtract.11685 = fsub float %204, %multiply.11584
  %349 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg40219, i64 0, i64 %17, i64 %280
  %350 = getelementptr inbounds float, ptr addrspace(1) %349, i64 1752
  %351 = load float, ptr addrspace(1) %350, align 8, !invariant.load !267
  %multiply.12086 = fmul float %218, %351
  %multiply.12187 = fmul float %16, %multiply.12086
  %subtract.12288 = fsub float %215, %multiply.12187
  %352 = getelementptr inbounds float, ptr addrspace(1) %349, i64 1864
  %353 = load float, ptr addrspace(1) %352, align 8, !invariant.load !267
  %multiply.12489 = fmul float %16, %353
  %subtract.12590 = fsub float %228, %multiply.12489
  %354 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg44227, i64 0, i64 %17, i64 %280
  %355 = getelementptr inbounds float, ptr addrspace(1) %354, i64 32
  %356 = load float, ptr addrspace(1) %355, align 8, !invariant.load !267
  %multiply.12791 = fmul float %16, %356
  %subtract.12892 = fsub float %238, %multiply.12791
  %357 = zext i32 %5 to i64
  %358 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg1141, i64 0, i64 %17, i64 %357
  %359 = getelementptr inbounds float, ptr addrspace(1) %358, i64 192
  %360 = load float, ptr addrspace(1) %359, align 4, !invariant.load !267
  %multiply.4893 = fmul float %16, %360
  %subtract.4994 = fsub float %15, %multiply.4893
  %361 = load float, ptr addrspace(1) %358, align 4, !invariant.load !267
  %362 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg5149, i64 0, i64 %17, i64 %357
  %363 = load float, ptr addrspace(1) %362, align 4, !invariant.load !267
  %add.5295 = fadd float %361, %363
  %364 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg4147, i64 0, i64 %17, i64 %357
  %365 = load float, ptr addrspace(1) %364, align 4, !invariant.load !267
  %add.5496 = fadd float %add.5295, %365
  %multiply.5697 = fmul float %16, %add.5496
  %subtract.5798 = fsub float %29, %multiply.5697
  %366 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg7153, i64 0, i64 %17, i64 %357
  %367 = getelementptr inbounds float, ptr addrspace(1) %366, i64 32
  %368 = load float, ptr addrspace(1) %367, align 4, !invariant.load !267
  %multiply.5999 = fmul float %16, %368
  %subtract.60100 = fsub float %46, %multiply.5999
  %369 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg11161, i64 0, i64 %17, i64 %357
  %370 = getelementptr inbounds float, ptr addrspace(1) %369, i64 32
  %371 = load float, ptr addrspace(1) %370, align 4, !invariant.load !267
  %372 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg10159, i64 0, i64 %17, i64 %357
  %373 = getelementptr inbounds float, ptr addrspace(1) %372, i64 32
  %374 = load float, ptr addrspace(1) %373, align 4, !invariant.load !267
  %add.63101 = fadd float %371, %374
  %375 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg9157, i64 0, i64 %17, i64 %357
  %376 = getelementptr inbounds float, ptr addrspace(1) %375, i64 32
  %377 = load float, ptr addrspace(1) %376, align 4, !invariant.load !267
  %add.65102 = fadd float %add.63101, %377
  %multiply.67103 = fmul float %16, %add.65102
  %subtract.68104 = fsub float %57, %multiply.67103
  %378 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg15169, i64 0, i64 %17, i64 %357
  %379 = load float, ptr addrspace(1) %378, align 4, !invariant.load !267
  %380 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg14167, i64 0, i64 %17, i64 %357
  %381 = load float, ptr addrspace(1) %380, align 4, !invariant.load !267
  %add.71105 = fadd float %379, %381
  %382 = getelementptr inbounds [8192 x [320 x float]], ptr addrspace(1) %arg13165, i64 0, i64 %17, i64 %357
  %383 = load float, ptr addrspace(1) %382, align 4, !invariant.load !267
  %add.73106 = fadd float %add.71105, %383
  %multiply.75107 = fmul float %16, %add.73106
  %subtract.76108 = fsub float %78, %multiply.75107
  %384 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg19177, i64 0, i64 %17, i64 %357
  %385 = getelementptr inbounds float, ptr addrspace(1) %384, i64 32
  %386 = load float, ptr addrspace(1) %385, align 4, !invariant.load !267
  %387 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg18175, i64 0, i64 %17, i64 %357
  %388 = getelementptr inbounds float, ptr addrspace(1) %387, i64 32
  %389 = load float, ptr addrspace(1) %388, align 4, !invariant.load !267
  %add.79109 = fadd float %386, %389
  %390 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg17173, i64 0, i64 %17, i64 %357
  %391 = getelementptr inbounds float, ptr addrspace(1) %390, i64 32
  %392 = load float, ptr addrspace(1) %391, align 4, !invariant.load !267
  %add.81110 = fadd float %add.79109, %392
  %multiply.83111 = fmul float %16, %add.81110
  %subtract.84112 = fsub float %96, %multiply.83111
  %393 = getelementptr [8192 x [360 x float]], ptr addrspace(1) %arg23185, i64 0, i64 %17, i64 %357
  %394 = getelementptr inbounds float, ptr addrspace(1) %393, i64 32
  %395 = load float, ptr addrspace(1) %394, align 4, !invariant.load !267
  %396 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg22183, i64 0, i64 %17, i64 %357
  %397 = getelementptr inbounds float, ptr addrspace(1) %396, i64 32
  %398 = load float, ptr addrspace(1) %397, align 4, !invariant.load !267
  %add.87113 = fadd float %395, %398
  %399 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg21181, i64 0, i64 %17, i64 %357
  %400 = getelementptr inbounds float, ptr addrspace(1) %399, i64 32
  %401 = load float, ptr addrspace(1) %400, align 4, !invariant.load !267
  %add.89114 = fadd float %add.87113, %401
  %multiply.91115 = fmul float %16, %add.89114
  %subtract.92116 = fsub float %117, %multiply.91115
  %402 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg27193, i64 0, i64 %17, i64 %357
  %403 = getelementptr inbounds float, ptr addrspace(1) %402, i64 32
  %404 = load float, ptr addrspace(1) %403, align 4, !invariant.load !267
  %405 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg26191, i64 0, i64 %17, i64 %357
  %406 = getelementptr inbounds float, ptr addrspace(1) %405, i64 32
  %407 = load float, ptr addrspace(1) %406, align 4, !invariant.load !267
  %add.95117 = fadd float %404, %407
  %408 = getelementptr [8192 x [224 x float]], ptr addrspace(1) %arg25189, i64 0, i64 %17, i64 %357
  %409 = getelementptr inbounds float, ptr addrspace(1) %408, i64 32
  %410 = load float, ptr addrspace(1) %409, align 4, !invariant.load !267
  %add.97118 = fadd float %add.95117, %410
  %multiply.99119 = fmul float %16, %add.97118
  %subtract.100120 = fsub float %138, %multiply.99119
  %411 = getelementptr inbounds [8192 x [192 x float]], ptr addrspace(1) %arg29197, i64 0, i64 %17, i64 %357
  %412 = load float, ptr addrspace(1) %411, align 4, !invariant.load !267
  %multiply.102121 = fmul float %16, %412
  %subtract.103122 = fsub float %159, %multiply.102121
  %413 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg31201, i64 0, i64 %17, i64 %357
  %414 = load float, ptr addrspace(1) %413, align 4, !invariant.load !267
  %415 = getelementptr inbounds [8192 x [448 x float]], ptr addrspace(1) %arg32203, i64 0, i64 %17, i64 %357
  %416 = load float, ptr addrspace(1) %415, align 4, !invariant.load !267
  %add.104123 = fadd float %414, %416
  %multiply.106124 = fmul float %16, %add.104123
  %subtract.107125 = fsub float %169, %multiply.106124
  %417 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg34207, i64 0, i64 %17, i64 %357
  %418 = getelementptr inbounds float, ptr addrspace(1) %417, i64 32
  %419 = load float, ptr addrspace(1) %418, align 4, !invariant.load !267
  %multiply.109126 = fmul float %16, %419
  %subtract.110127 = fsub float %183, %multiply.109126
  %420 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg36211, i64 0, i64 %17, i64 %357
  %421 = getelementptr inbounds float, ptr addrspace(1) %420, i64 32
  %422 = load float, ptr addrspace(1) %421, align 4, !invariant.load !267
  %multiply.112128 = fmul float %16, %422
  %subtract.113129 = fsub float %194, %multiply.112128
  %423 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg38215, i64 0, i64 %17, i64 %357
  %424 = getelementptr inbounds float, ptr addrspace(1) %423, i64 360
  %425 = load float, ptr addrspace(1) %424, align 4, !invariant.load !267
  %multiply.115130 = fmul float %16, %425
  %subtract.116131 = fsub float %205, %multiply.115130
  %426 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg40219, i64 0, i64 %17, i64 %357
  %427 = getelementptr inbounds float, ptr addrspace(1) %426, i64 1752
  %428 = load float, ptr addrspace(1) %427, align 4, !invariant.load !267
  %multiply.120132 = fmul float %218, %428
  %multiply.121133 = fmul float %16, %multiply.120132
  %subtract.122134 = fsub float %216, %multiply.121133
  %429 = getelementptr inbounds float, ptr addrspace(1) %426, i64 1864
  %430 = load float, ptr addrspace(1) %429, align 4, !invariant.load !267
  %multiply.124135 = fmul float %16, %430
  %subtract.125136 = fsub float %229, %multiply.124135
  %431 = getelementptr [8192 x [352 x float]], ptr addrspace(1) %arg44227, i64 0, i64 %17, i64 %357
  %432 = getelementptr inbounds float, ptr addrspace(1) %431, i64 32
  %433 = load float, ptr addrspace(1) %432, align 4, !invariant.load !267
  %multiply.127137 = fmul float %16, %433
  %subtract.128138 = fsub float %239, %multiply.127137
  %434 = insertelement <4 x float> poison, float %subtract.49, i32 0
  %435 = insertelement <4 x float> %434, float %subtract.492, i32 1
  %436 = insertelement <4 x float> %435, float %subtract.4948, i32 2
  %437 = insertelement <4 x float> %436, float %subtract.4994, i32 3
  store <4 x float> %437, ptr addrspace(1) %245, align 16
  %438 = insertelement <4 x float> poison, float %subtract.57, i32 0
  %439 = insertelement <4 x float> %438, float %subtract.576, i32 1
  %440 = insertelement <4 x float> %439, float %subtract.5752, i32 2
  %441 = insertelement <4 x float> %440, float %subtract.5798, i32 3
  store <4 x float> %441, ptr addrspace(1) %246, align 16
  %442 = insertelement <4 x float> poison, float %subtract.60, i32 0
  %443 = insertelement <4 x float> %442, float %subtract.608, i32 1
  %444 = insertelement <4 x float> %443, float %subtract.6054, i32 2
  %445 = insertelement <4 x float> %444, float %subtract.60100, i32 3
  store <4 x float> %445, ptr addrspace(1) %247, align 16
  %446 = insertelement <4 x float> poison, float %subtract.68, i32 0
  %447 = insertelement <4 x float> %446, float %subtract.6812, i32 1
  %448 = insertelement <4 x float> %447, float %subtract.6858, i32 2
  %449 = insertelement <4 x float> %448, float %subtract.68104, i32 3
  store <4 x float> %449, ptr addrspace(1) %248, align 16
  %450 = insertelement <4 x float> poison, float %subtract.76, i32 0
  %451 = insertelement <4 x float> %450, float %subtract.7616, i32 1
  %452 = insertelement <4 x float> %451, float %subtract.7662, i32 2
  %453 = insertelement <4 x float> %452, float %subtract.76108, i32 3
  store <4 x float> %453, ptr addrspace(1) %249, align 16
  %454 = insertelement <4 x float> poison, float %subtract.84, i32 0
  %455 = insertelement <4 x float> %454, float %subtract.8420, i32 1
  %456 = insertelement <4 x float> %455, float %subtract.8466, i32 2
  %457 = insertelement <4 x float> %456, float %subtract.84112, i32 3
  store <4 x float> %457, ptr addrspace(1) %250, align 16
  %458 = insertelement <4 x float> poison, float %subtract.92, i32 0
  %459 = insertelement <4 x float> %458, float %subtract.9224, i32 1
  %460 = insertelement <4 x float> %459, float %subtract.9270, i32 2
  %461 = insertelement <4 x float> %460, float %subtract.92116, i32 3
  store <4 x float> %461, ptr addrspace(1) %251, align 16
  %462 = insertelement <4 x float> poison, float %subtract.100, i32 0
  %463 = insertelement <4 x float> %462, float %subtract.10028, i32 1
  %464 = insertelement <4 x float> %463, float %subtract.10074, i32 2
  %465 = insertelement <4 x float> %464, float %subtract.100120, i32 3
  store <4 x float> %465, ptr addrspace(1) %252, align 16
  %466 = insertelement <4 x float> poison, float %subtract.103, i32 0
  %467 = insertelement <4 x float> %466, float %subtract.10330, i32 1
  %468 = insertelement <4 x float> %467, float %subtract.10376, i32 2
  %469 = insertelement <4 x float> %468, float %subtract.103122, i32 3
  store <4 x float> %469, ptr addrspace(1) %253, align 16
  %470 = insertelement <4 x float> poison, float %subtract.107, i32 0
  %471 = insertelement <4 x float> %470, float %subtract.10733, i32 1
  %472 = insertelement <4 x float> %471, float %subtract.10779, i32 2
  %473 = insertelement <4 x float> %472, float %subtract.107125, i32 3
  store <4 x float> %473, ptr addrspace(1) %254, align 16
  %474 = insertelement <4 x float> poison, float %subtract.110, i32 0
  %475 = insertelement <4 x float> %474, float %subtract.11035, i32 1
  %476 = insertelement <4 x float> %475, float %subtract.11081, i32 2
  %477 = insertelement <4 x float> %476, float %subtract.110127, i32 3
  store <4 x float> %477, ptr addrspace(1) %255, align 16
  %478 = insertelement <4 x float> poison, float %subtract.113, i32 0
  %479 = insertelement <4 x float> %478, float %subtract.11337, i32 1
  %480 = insertelement <4 x float> %479, float %subtract.11383, i32 2
  %481 = insertelement <4 x float> %480, float %subtract.113129, i32 3
  store <4 x float> %481, ptr addrspace(1) %256, align 16
  %482 = insertelement <4 x float> poison, float %subtract.116, i32 0
  %483 = insertelement <4 x float> %482, float %subtract.11639, i32 1
  %484 = insertelement <4 x float> %483, float %subtract.11685, i32 2
  %485 = insertelement <4 x float> %484, float %subtract.116131, i32 3
  store <4 x float> %485, ptr addrspace(1) %257, align 16
  %486 = insertelement <4 x float> poison, float %subtract.122, i32 0
  %487 = insertelement <4 x float> %486, float %subtract.12242, i32 1
  %488 = insertelement <4 x float> %487, float %subtract.12288, i32 2
  %489 = insertelement <4 x float> %488, float %subtract.122134, i32 3
  store <4 x float> %489, ptr addrspace(1) %258, align 16
  %490 = insertelement <4 x float> poison, float %subtract.125, i32 0
  %491 = insertelement <4 x float> %490, float %subtract.12544, i32 1
  %492 = insertelement <4 x float> %491, float %subtract.12590, i32 2
  %493 = insertelement <4 x float> %492, float %subtract.125136, i32 3
  store <4 x float> %493, ptr addrspace(1) %259, align 16
  %494 = insertelement <4 x float> poison, float %subtract.128, i32 0
  %495 = insertelement <4 x float> %494, float %subtract.12846, i32 1
  %496 = insertelement <4 x float> %495, float %subtract.12892, i32 2
  %497 = insertelement <4 x float> %496, float %subtract.128138, i32 3
  store <4 x float> %497, ptr addrspace(1) %260, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_352(ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg0, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg2, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(8650752) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg5, ptr noalias nocapture readonly align 128 dereferenceable(10485760) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg7, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg8, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg9, ptr noalias nocapture readonly align 128 dereferenceable(6291456) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg11, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(14680064) %arg13, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg14, ptr noalias nocapture readonly align 128 dereferenceable(18087936) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(4194304) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg17, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg18, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg19, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg20, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg21, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg22, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg23) local_unnamed_addr #6 {
entry:
  %arg2398 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg2296 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg2194 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg2092 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg1990 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg1888 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg1786 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg1684 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg1582 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg1480 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg1378 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg1276 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg1174 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg1072 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg970 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg868 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg766 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg664 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg562 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg460 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg358 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg256 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg154 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg052 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !270
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 7
  %5 = and i32 %linear_index3, 127
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 126
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 125
  %8 = and i32 %3, 124
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg052, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg154, align 16, !invariant.load !267
  %17 = zext i32 %4 to i64
  %18 = zext i32 %8 to i64
  %19 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg460, i64 0, i64 %17, i64 %18
  %20 = getelementptr inbounds float, ptr addrspace(1) %19, i64 64
  %21 = load <2 x float>, ptr addrspace(1) %20, align 16, !invariant.load !267
  %22 = extractelement <2 x float> %21, i32 0
  %23 = extractelement <2 x float> %21, i32 1
  %24 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg358, i64 0, i64 %17, i64 %18
  %25 = getelementptr inbounds float, ptr addrspace(1) %24, i64 64
  %26 = load <2 x float>, ptr addrspace(1) %25, align 16, !invariant.load !267
  %27 = extractelement <2 x float> %26, i32 0
  %28 = extractelement <2 x float> %26, i32 1
  %add.22 = fadd float %22, %27
  %29 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg256, i64 0, i64 %17, i64 %18
  %30 = getelementptr inbounds float, ptr addrspace(1) %29, i64 64
  %31 = load <2 x float>, ptr addrspace(1) %30, align 16, !invariant.load !267
  %32 = extractelement <2 x float> %31, i32 0
  %33 = extractelement <2 x float> %31, i32 1
  %add.24 = fadd float %add.22, %32
  %multiply.26 = fmul float %16, %add.24
  %subtract.27 = fsub float %12, %multiply.26
  %34 = getelementptr float, ptr addrspace(1) %arg562, i64 %9
  %35 = load <4 x float>, ptr addrspace(1) %34, align 16, !invariant.load !267
  %36 = extractelement <4 x float> %35, i32 0
  %37 = extractelement <4 x float> %35, i32 1
  %38 = extractelement <4 x float> %35, i32 2
  %39 = extractelement <4 x float> %35, i32 3
  %40 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg868, i64 0, i64 %17, i64 %18
  %41 = getelementptr inbounds float, ptr addrspace(1) %40, i64 64
  %42 = load <2 x float>, ptr addrspace(1) %41, align 16, !invariant.load !267
  %43 = extractelement <2 x float> %42, i32 0
  %44 = extractelement <2 x float> %42, i32 1
  %45 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg766, i64 0, i64 %17, i64 %18
  %46 = getelementptr inbounds float, ptr addrspace(1) %45, i64 64
  %47 = load <2 x float>, ptr addrspace(1) %46, align 16, !invariant.load !267
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %add.30 = fadd float %43, %48
  %50 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg664, i64 0, i64 %17, i64 %18
  %51 = getelementptr inbounds float, ptr addrspace(1) %50, i64 64
  %52 = load <2 x float>, ptr addrspace(1) %51, align 16, !invariant.load !267
  %53 = extractelement <2 x float> %52, i32 0
  %54 = extractelement <2 x float> %52, i32 1
  %add.32 = fadd float %add.30, %53
  %multiply.34 = fmul float %16, %add.32
  %subtract.35 = fsub float %36, %multiply.34
  %55 = getelementptr float, ptr addrspace(1) %arg970, i64 %9
  %56 = load <4 x float>, ptr addrspace(1) %55, align 16, !invariant.load !267
  %57 = extractelement <4 x float> %56, i32 0
  %58 = extractelement <4 x float> %56, i32 1
  %59 = extractelement <4 x float> %56, i32 2
  %60 = extractelement <4 x float> %56, i32 3
  %61 = getelementptr [8192 x [192 x float]], ptr addrspace(1) %arg1072, i64 0, i64 %17, i64 %18
  %62 = getelementptr inbounds float, ptr addrspace(1) %61, i64 64
  %63 = load <2 x float>, ptr addrspace(1) %62, align 16, !invariant.load !267
  %64 = extractelement <2 x float> %63, i32 0
  %65 = extractelement <2 x float> %63, i32 1
  %multiply.37 = fmul float %16, %64
  %subtract.38 = fsub float %57, %multiply.37
  %66 = getelementptr float, ptr addrspace(1) %arg1174, i64 %9
  %67 = load <4 x float>, ptr addrspace(1) %66, align 16, !invariant.load !267
  %68 = extractelement <4 x float> %67, i32 0
  %69 = extractelement <4 x float> %67, i32 1
  %70 = extractelement <4 x float> %67, i32 2
  %71 = extractelement <4 x float> %67, i32 3
  %72 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1276, i64 0, i64 %17, i64 %18
  %73 = getelementptr inbounds float, ptr addrspace(1) %72, i64 64
  %74 = load <2 x float>, ptr addrspace(1) %73, align 16, !invariant.load !267
  %75 = extractelement <2 x float> %74, i32 0
  %76 = extractelement <2 x float> %74, i32 1
  %77 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1378, i64 0, i64 %17, i64 %18
  %78 = getelementptr inbounds float, ptr addrspace(1) %77, i64 64
  %79 = load <2 x float>, ptr addrspace(1) %78, align 16, !invariant.load !267
  %80 = extractelement <2 x float> %79, i32 0
  %81 = extractelement <2 x float> %79, i32 1
  %add.39 = fadd float %75, %80
  %multiply.41 = fmul float %16, %add.39
  %subtract.42 = fsub float %68, %multiply.41
  %82 = getelementptr float, ptr addrspace(1) %arg1480, i64 %9
  %83 = load <4 x float>, ptr addrspace(1) %82, align 16, !invariant.load !267
  %84 = extractelement <4 x float> %83, i32 0
  %85 = extractelement <4 x float> %83, i32 1
  %86 = extractelement <4 x float> %83, i32 2
  %87 = extractelement <4 x float> %83, i32 3
  %88 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg1582, i64 0, i64 %17, i64 %18
  %89 = getelementptr inbounds float, ptr addrspace(1) %88, i64 424
  %90 = load <2 x float>, ptr addrspace(1) %89, align 16, !invariant.load !267
  %91 = extractelement <2 x float> %90, i32 0
  %92 = extractelement <2 x float> %90, i32 1
  %multiply.44 = fmul float %16, %91
  %subtract.45 = fsub float %84, %multiply.44
  %93 = getelementptr float, ptr addrspace(1) %arg1684, i64 %9
  %94 = load <4 x float>, ptr addrspace(1) %93, align 16, !invariant.load !267
  %95 = extractelement <4 x float> %94, i32 0
  %96 = extractelement <4 x float> %94, i32 1
  %97 = extractelement <4 x float> %94, i32 2
  %98 = extractelement <4 x float> %94, i32 3
  %99 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg1786, i64 0, i64 %17, i64 %18
  %100 = getelementptr inbounds float, ptr addrspace(1) %99, i64 1928
  %101 = load <2 x float>, ptr addrspace(1) %100, align 16, !invariant.load !267
  %102 = extractelement <2 x float> %101, i32 0
  %103 = extractelement <2 x float> %101, i32 1
  %multiply.47 = fmul float %16, %102
  %subtract.48 = fsub float %95, %multiply.47
  %104 = getelementptr float, ptr addrspace(1) %arg1888, i64 %9
  %105 = getelementptr float, ptr addrspace(1) %arg1990, i64 %9
  %106 = getelementptr float, ptr addrspace(1) %arg2092, i64 %9
  %107 = getelementptr float, ptr addrspace(1) %arg2194, i64 %9
  %108 = getelementptr float, ptr addrspace(1) %arg2296, i64 %9
  %109 = getelementptr float, ptr addrspace(1) %arg2398, i64 %9
  %110 = zext i32 %7 to i64
  %111 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg460, i64 0, i64 %17, i64 %110
  %112 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg358, i64 0, i64 %17, i64 %110
  %add.221 = fadd float %23, %28
  %113 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg256, i64 0, i64 %17, i64 %110
  %add.242 = fadd float %add.221, %33
  %multiply.263 = fmul float %16, %add.242
  %subtract.274 = fsub float %13, %multiply.263
  %114 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg868, i64 0, i64 %17, i64 %110
  %115 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg766, i64 0, i64 %17, i64 %110
  %add.305 = fadd float %44, %49
  %116 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg664, i64 0, i64 %17, i64 %110
  %add.326 = fadd float %add.305, %54
  %multiply.347 = fmul float %16, %add.326
  %subtract.358 = fsub float %37, %multiply.347
  %117 = getelementptr [8192 x [192 x float]], ptr addrspace(1) %arg1072, i64 0, i64 %17, i64 %110
  %multiply.379 = fmul float %16, %65
  %subtract.3810 = fsub float %58, %multiply.379
  %118 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1276, i64 0, i64 %17, i64 %110
  %119 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1378, i64 0, i64 %17, i64 %110
  %add.3911 = fadd float %76, %81
  %multiply.4112 = fmul float %16, %add.3911
  %subtract.4213 = fsub float %69, %multiply.4112
  %120 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg1582, i64 0, i64 %17, i64 %110
  %multiply.4414 = fmul float %16, %92
  %subtract.4515 = fsub float %85, %multiply.4414
  %121 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg1786, i64 0, i64 %17, i64 %110
  %multiply.4716 = fmul float %16, %103
  %subtract.4817 = fsub float %96, %multiply.4716
  %122 = zext i32 %6 to i64
  %123 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg460, i64 0, i64 %17, i64 %122
  %124 = getelementptr inbounds float, ptr addrspace(1) %123, i64 64
  %125 = load float, ptr addrspace(1) %124, align 8, !invariant.load !267
  %126 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg358, i64 0, i64 %17, i64 %122
  %127 = getelementptr inbounds float, ptr addrspace(1) %126, i64 64
  %128 = load float, ptr addrspace(1) %127, align 8, !invariant.load !267
  %add.2218 = fadd float %125, %128
  %129 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg256, i64 0, i64 %17, i64 %122
  %130 = getelementptr inbounds float, ptr addrspace(1) %129, i64 64
  %131 = load float, ptr addrspace(1) %130, align 8, !invariant.load !267
  %add.2419 = fadd float %add.2218, %131
  %multiply.2620 = fmul float %16, %add.2419
  %subtract.2721 = fsub float %14, %multiply.2620
  %132 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg868, i64 0, i64 %17, i64 %122
  %133 = getelementptr inbounds float, ptr addrspace(1) %132, i64 64
  %134 = load float, ptr addrspace(1) %133, align 8, !invariant.load !267
  %135 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg766, i64 0, i64 %17, i64 %122
  %136 = getelementptr inbounds float, ptr addrspace(1) %135, i64 64
  %137 = load float, ptr addrspace(1) %136, align 8, !invariant.load !267
  %add.3022 = fadd float %134, %137
  %138 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg664, i64 0, i64 %17, i64 %122
  %139 = getelementptr inbounds float, ptr addrspace(1) %138, i64 64
  %140 = load float, ptr addrspace(1) %139, align 8, !invariant.load !267
  %add.3223 = fadd float %add.3022, %140
  %multiply.3424 = fmul float %16, %add.3223
  %subtract.3525 = fsub float %38, %multiply.3424
  %141 = getelementptr [8192 x [192 x float]], ptr addrspace(1) %arg1072, i64 0, i64 %17, i64 %122
  %142 = getelementptr inbounds float, ptr addrspace(1) %141, i64 64
  %143 = load float, ptr addrspace(1) %142, align 8, !invariant.load !267
  %multiply.3726 = fmul float %16, %143
  %subtract.3827 = fsub float %59, %multiply.3726
  %144 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1276, i64 0, i64 %17, i64 %122
  %145 = getelementptr inbounds float, ptr addrspace(1) %144, i64 64
  %146 = load float, ptr addrspace(1) %145, align 8, !invariant.load !267
  %147 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1378, i64 0, i64 %17, i64 %122
  %148 = getelementptr inbounds float, ptr addrspace(1) %147, i64 64
  %149 = load float, ptr addrspace(1) %148, align 8, !invariant.load !267
  %add.3928 = fadd float %146, %149
  %multiply.4129 = fmul float %16, %add.3928
  %subtract.4230 = fsub float %70, %multiply.4129
  %150 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg1582, i64 0, i64 %17, i64 %122
  %151 = getelementptr inbounds float, ptr addrspace(1) %150, i64 424
  %152 = load float, ptr addrspace(1) %151, align 8, !invariant.load !267
  %multiply.4431 = fmul float %16, %152
  %subtract.4532 = fsub float %86, %multiply.4431
  %153 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg1786, i64 0, i64 %17, i64 %122
  %154 = getelementptr inbounds float, ptr addrspace(1) %153, i64 1928
  %155 = load float, ptr addrspace(1) %154, align 8, !invariant.load !267
  %multiply.4733 = fmul float %16, %155
  %subtract.4834 = fsub float %97, %multiply.4733
  %156 = zext i32 %5 to i64
  %157 = getelementptr [8192 x [264 x float]], ptr addrspace(1) %arg460, i64 0, i64 %17, i64 %156
  %158 = getelementptr inbounds float, ptr addrspace(1) %157, i64 64
  %159 = load float, ptr addrspace(1) %158, align 4, !invariant.load !267
  %160 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg358, i64 0, i64 %17, i64 %156
  %161 = getelementptr inbounds float, ptr addrspace(1) %160, i64 64
  %162 = load float, ptr addrspace(1) %161, align 4, !invariant.load !267
  %add.2235 = fadd float %159, %162
  %163 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg256, i64 0, i64 %17, i64 %156
  %164 = getelementptr inbounds float, ptr addrspace(1) %163, i64 64
  %165 = load float, ptr addrspace(1) %164, align 4, !invariant.load !267
  %add.2436 = fadd float %add.2235, %165
  %multiply.2637 = fmul float %16, %add.2436
  %subtract.2738 = fsub float %15, %multiply.2637
  %166 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg868, i64 0, i64 %17, i64 %156
  %167 = getelementptr inbounds float, ptr addrspace(1) %166, i64 64
  %168 = load float, ptr addrspace(1) %167, align 4, !invariant.load !267
  %169 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg766, i64 0, i64 %17, i64 %156
  %170 = getelementptr inbounds float, ptr addrspace(1) %169, i64 64
  %171 = load float, ptr addrspace(1) %170, align 4, !invariant.load !267
  %add.3039 = fadd float %168, %171
  %172 = getelementptr [8192 x [320 x float]], ptr addrspace(1) %arg664, i64 0, i64 %17, i64 %156
  %173 = getelementptr inbounds float, ptr addrspace(1) %172, i64 64
  %174 = load float, ptr addrspace(1) %173, align 4, !invariant.load !267
  %add.3240 = fadd float %add.3039, %174
  %multiply.3441 = fmul float %16, %add.3240
  %subtract.3542 = fsub float %39, %multiply.3441
  %175 = getelementptr [8192 x [192 x float]], ptr addrspace(1) %arg1072, i64 0, i64 %17, i64 %156
  %176 = getelementptr inbounds float, ptr addrspace(1) %175, i64 64
  %177 = load float, ptr addrspace(1) %176, align 4, !invariant.load !267
  %multiply.3743 = fmul float %16, %177
  %subtract.3844 = fsub float %60, %multiply.3743
  %178 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1276, i64 0, i64 %17, i64 %156
  %179 = getelementptr inbounds float, ptr addrspace(1) %178, i64 64
  %180 = load float, ptr addrspace(1) %179, align 4, !invariant.load !267
  %181 = getelementptr [8192 x [448 x float]], ptr addrspace(1) %arg1378, i64 0, i64 %17, i64 %156
  %182 = getelementptr inbounds float, ptr addrspace(1) %181, i64 64
  %183 = load float, ptr addrspace(1) %182, align 4, !invariant.load !267
  %add.3945 = fadd float %180, %183
  %multiply.4146 = fmul float %16, %add.3945
  %subtract.4247 = fsub float %71, %multiply.4146
  %184 = getelementptr [8192 x [552 x float]], ptr addrspace(1) %arg1582, i64 0, i64 %17, i64 %156
  %185 = getelementptr inbounds float, ptr addrspace(1) %184, i64 424
  %186 = load float, ptr addrspace(1) %185, align 4, !invariant.load !267
  %multiply.4448 = fmul float %16, %186
  %subtract.4549 = fsub float %87, %multiply.4448
  %187 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg1786, i64 0, i64 %17, i64 %156
  %188 = getelementptr inbounds float, ptr addrspace(1) %187, i64 1928
  %189 = load float, ptr addrspace(1) %188, align 4, !invariant.load !267
  %multiply.4750 = fmul float %16, %189
  %subtract.4851 = fsub float %98, %multiply.4750
  %190 = insertelement <4 x float> poison, float %subtract.27, i32 0
  %191 = insertelement <4 x float> %190, float %subtract.274, i32 1
  %192 = insertelement <4 x float> %191, float %subtract.2721, i32 2
  %193 = insertelement <4 x float> %192, float %subtract.2738, i32 3
  store <4 x float> %193, ptr addrspace(1) %104, align 16
  %194 = insertelement <4 x float> poison, float %subtract.35, i32 0
  %195 = insertelement <4 x float> %194, float %subtract.358, i32 1
  %196 = insertelement <4 x float> %195, float %subtract.3525, i32 2
  %197 = insertelement <4 x float> %196, float %subtract.3542, i32 3
  store <4 x float> %197, ptr addrspace(1) %105, align 16
  %198 = insertelement <4 x float> poison, float %subtract.38, i32 0
  %199 = insertelement <4 x float> %198, float %subtract.3810, i32 1
  %200 = insertelement <4 x float> %199, float %subtract.3827, i32 2
  %201 = insertelement <4 x float> %200, float %subtract.3844, i32 3
  store <4 x float> %201, ptr addrspace(1) %106, align 16
  %202 = insertelement <4 x float> poison, float %subtract.42, i32 0
  %203 = insertelement <4 x float> %202, float %subtract.4213, i32 1
  %204 = insertelement <4 x float> %203, float %subtract.4230, i32 2
  %205 = insertelement <4 x float> %204, float %subtract.4247, i32 3
  store <4 x float> %205, ptr addrspace(1) %107, align 16
  %206 = insertelement <4 x float> poison, float %subtract.45, i32 0
  %207 = insertelement <4 x float> %206, float %subtract.4515, i32 1
  %208 = insertelement <4 x float> %207, float %subtract.4532, i32 2
  %209 = insertelement <4 x float> %208, float %subtract.4549, i32 3
  store <4 x float> %209, ptr addrspace(1) %108, align 16
  %210 = insertelement <4 x float> poison, float %subtract.48, i32 0
  %211 = insertelement <4 x float> %210, float %subtract.4817, i32 1
  %212 = insertelement <4 x float> %211, float %subtract.4834, i32 2
  %213 = insertelement <4 x float> %212, float %subtract.4851, i32 3
  store <4 x float> %213, ptr addrspace(1) %109, align 16
  ret void
}

; Function Attrs: nofree nosync nounwind memory(argmem: readwrite)
define void @add_151(ptr noalias nocapture readonly align 128 dereferenceable(48496640) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(48496640) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(48496640) %arg2) local_unnamed_addr #7 {
entry:
  %arg29 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg17 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg05 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !293
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !287
  %2 = shl nuw nsw i32 %0, 9
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = zext i32 %linear_index_base to i64
  %5 = shl nuw nsw i64 %4, 2
  %6 = add nuw nsw i64 %5, 8
  %scevgep = getelementptr i8, ptr addrspace(1) %arg29, i64 %6
  %scevgep25 = getelementptr i8, ptr addrspace(1) %arg17, i64 %6
  %scevgep31 = getelementptr i8, ptr addrspace(1) %arg05, i64 %6
  br label %loop.loop_body

loop.loop_body:                                   ; preds = %entry, %add_151.in_bounds-after
  %lsr.iv32 = phi ptr addrspace(1) [ %scevgep31, %entry ], [ %scevgep33, %add_151.in_bounds-after ]
  %lsr.iv26 = phi ptr addrspace(1) [ %scevgep25, %entry ], [ %scevgep27, %add_151.in_bounds-after ]
  %lsr.iv20 = phi ptr addrspace(1) [ %scevgep, %entry ], [ %scevgep21, %add_151.in_bounds-after ]
  %lsr.iv = phi i32 [ -442368, %entry ], [ %lsr.iv.next, %add_151.in_bounds-after ]
  %7 = add i32 %linear_index_base, %lsr.iv
  %8 = add i32 %7, 442368
  %9 = icmp ult i32 %8, 12124160
  br i1 %9, label %add_151.in_bounds-true, label %add_151.in_bounds-after

add_151.in_bounds-after:                          ; preds = %add_151.in_bounds-true, %loop.loop_body
  %lsr.iv.next = add nsw i32 %lsr.iv, 442368
  %scevgep21 = getelementptr i8, ptr addrspace(1) %lsr.iv20, i64 1769472
  %scevgep27 = getelementptr i8, ptr addrspace(1) %lsr.iv26, i64 1769472
  %scevgep33 = getelementptr i8, ptr addrspace(1) %lsr.iv32, i64 1769472
  %10 = icmp ugt i32 %lsr.iv.next, 11681791
  br i1 %10, label %loop.loop_exit, label %loop.loop_body, !llvm.loop !324

loop.loop_exit:                                   ; preds = %add_151.in_bounds-after
  ret void

add_151.in_bounds-true:                           ; preds = %loop.loop_body
  %scevgep34 = getelementptr i8, ptr addrspace(1) %lsr.iv32, i64 -8
  %11 = load <4 x float>, ptr addrspace(1) %scevgep34, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %scevgep29 = getelementptr i8, ptr addrspace(1) %lsr.iv26, i64 -8
  %16 = load <4 x float>, ptr addrspace(1) %scevgep29, align 16, !invariant.load !267
  %17 = extractelement <4 x float> %16, i32 0
  %18 = extractelement <4 x float> %16, i32 1
  %19 = extractelement <4 x float> %16, i32 2
  %20 = extractelement <4 x float> %16, i32 3
  %add.3 = fadd float %12, %17
  %scevgep23 = getelementptr i8, ptr addrspace(1) %lsr.iv20, i64 -8
  %add.31 = fadd float %13, %18
  %add.32 = fadd float %14, %19
  %add.33 = fadd float %15, %20
  %21 = insertelement <4 x float> poison, float %add.3, i32 0
  %22 = insertelement <4 x float> %21, float %add.31, i32 1
  %23 = insertelement <4 x float> %22, float %add.32, i32 2
  %24 = insertelement <4 x float> %23, float %add.33, i32 3
  store <4 x float> %24, ptr addrspace(1) %scevgep23, align 16
  br label %add_151.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_659(ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(4194304) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !270
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 7
  %5 = and i32 %linear_index3, 127
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 126
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 125
  %8 = and i32 %3, 124
  %9 = zext i32 %4 to i64
  %10 = zext i32 %8 to i64
  %11 = getelementptr inbounds [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = load <2 x float>, ptr addrspace(1) %11, align 16, !invariant.load !267
  %13 = extractelement <2 x float> %12, i32 0
  %14 = extractelement <2 x float> %12, i32 1
  %15 = zext i32 %linear_index_base to i64
  %16 = getelementptr float, ptr addrspace(1) %arg13, i64 %15
  %17 = zext i32 %7 to i64
  %18 = zext i32 %6 to i64
  %19 = getelementptr inbounds [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = load float, ptr addrspace(1) %19, align 8, !invariant.load !267
  %21 = zext i32 %5 to i64
  %22 = getelementptr inbounds [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %21
  %23 = load float, ptr addrspace(1) %22, align 4, !invariant.load !267
  %24 = insertelement <4 x float> poison, float %13, i32 0
  %25 = insertelement <4 x float> %24, float %14, i32 1
  %26 = insertelement <4 x float> %25, float %20, i32 2
  %27 = insertelement <4 x float> %26, float %23, i32 3
  store <4 x float> %27, ptr addrspace(1) %16, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @slice_664(ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg0, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg1) local_unnamed_addr #6 {
entry:
  %arg13 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg01 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !308
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %4 = lshr i32 %linear_index_base, 8
  %5 = and i32 %linear_index3, 255
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = and i32 %linear_index2, 254
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = and i32 %linear_index1, 253
  %8 = and i32 %3, 252
  %9 = zext i32 %4 to i64
  %10 = zext i32 %8 to i64
  %11 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %10
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 128
  %13 = load <2 x float>, ptr addrspace(1) %12, align 16, !invariant.load !267
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = zext i32 %linear_index_base to i64
  %17 = getelementptr float, ptr addrspace(1) %arg13, i64 %16
  %18 = zext i32 %7 to i64
  %19 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %18
  %20 = zext i32 %6 to i64
  %21 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %20
  %22 = getelementptr inbounds float, ptr addrspace(1) %21, i64 128
  %23 = load float, ptr addrspace(1) %22, align 8, !invariant.load !267
  %24 = zext i32 %5 to i64
  %25 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg01, i64 0, i64 %9, i64 %24
  %26 = getelementptr inbounds float, ptr addrspace(1) %25, i64 128
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %28 = insertelement <4 x float> poison, float %14, i32 0
  %29 = insertelement <4 x float> %28, float %15, i32 1
  %30 = insertelement <4 x float> %29, float %23, i32 2
  %31 = insertelement <4 x float> %30, float %27, i32 3
  store <4 x float> %31, ptr addrspace(1) %17, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_1(ptr noalias nocapture readonly align 16 dereferenceable(1835008) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(14417920) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg2, ptr noalias nocapture align 128 dereferenceable(1835008) %arg3, ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg4, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg5) local_unnamed_addr #6 {
entry:
  %arg526 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg424 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg322 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg220 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg118 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg016 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !315
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 56
  %5 = urem i32 %linear_index3, 56
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = urem i32 %linear_index2, 56
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = urem i32 %linear_index1, 56
  %8 = mul i32 %4, 56
  %.decomposed = sub i32 %linear_index_base.frozen, %8
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg016, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg526, align 16, !invariant.load !267
  %17 = getelementptr float, ptr addrspace(1) %arg322, i64 %9
  %18 = load <4 x float>, ptr addrspace(1) %17, align 16
  %19 = extractelement <4 x float> %18, i32 0
  %20 = extractelement <4 x float> %18, i32 1
  %21 = extractelement <4 x float> %18, i32 2
  %22 = extractelement <4 x float> %18, i32 3
  %23 = or i32 %.decomposed, 384
  %24 = zext i32 %4 to i64
  %25 = zext i32 %23 to i64
  %26 = getelementptr inbounds [8192 x [1936 x float]], ptr addrspace(1) %arg424, i64 0, i64 %24, i64 %25
  %27 = load float, ptr addrspace(1) %26, align 4, !invariant.load !267
  %add.9 = fadd float %19, %27
  %28 = getelementptr inbounds [8192 x [1936 x float]], ptr addrspace(1) %arg220, i64 0, i64 %24, i64 %25
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %add.11 = fadd float %add.9, %29
  %30 = getelementptr inbounds [8192 x [440 x float]], ptr addrspace(1) %arg118, i64 0, i64 %24, i64 %25
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %add.13 = fadd float %add.11, %31
  %multiply.14 = fmul float %16, %add.13
  %subtract.15 = fsub float %12, %multiply.14
  %32 = zext i32 %7 to i64
  %33 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg424, i64 0, i64 %24, i64 %32
  %34 = getelementptr inbounds float, ptr addrspace(1) %33, i64 384
  %35 = load float, ptr addrspace(1) %34, align 4, !invariant.load !267
  %add.91 = fadd float %20, %35
  %36 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg220, i64 0, i64 %24, i64 %32
  %37 = getelementptr inbounds float, ptr addrspace(1) %36, i64 384
  %38 = load float, ptr addrspace(1) %37, align 4, !invariant.load !267
  %add.112 = fadd float %add.91, %38
  %39 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg118, i64 0, i64 %24, i64 %32
  %40 = getelementptr inbounds float, ptr addrspace(1) %39, i64 384
  %41 = load float, ptr addrspace(1) %40, align 4, !invariant.load !267
  %add.133 = fadd float %add.112, %41
  %multiply.144 = fmul float %16, %add.133
  %subtract.155 = fsub float %13, %multiply.144
  %42 = zext i32 %6 to i64
  %43 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg424, i64 0, i64 %24, i64 %42
  %44 = getelementptr inbounds float, ptr addrspace(1) %43, i64 384
  %45 = load float, ptr addrspace(1) %44, align 4, !invariant.load !267
  %add.96 = fadd float %21, %45
  %46 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg220, i64 0, i64 %24, i64 %42
  %47 = getelementptr inbounds float, ptr addrspace(1) %46, i64 384
  %48 = load float, ptr addrspace(1) %47, align 4, !invariant.load !267
  %add.117 = fadd float %add.96, %48
  %49 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg118, i64 0, i64 %24, i64 %42
  %50 = getelementptr inbounds float, ptr addrspace(1) %49, i64 384
  %51 = load float, ptr addrspace(1) %50, align 4, !invariant.load !267
  %add.138 = fadd float %add.117, %51
  %multiply.149 = fmul float %16, %add.138
  %subtract.1510 = fsub float %14, %multiply.149
  %52 = zext i32 %5 to i64
  %53 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg424, i64 0, i64 %24, i64 %52
  %54 = getelementptr inbounds float, ptr addrspace(1) %53, i64 384
  %55 = load float, ptr addrspace(1) %54, align 4, !invariant.load !267
  %add.911 = fadd float %22, %55
  %56 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg220, i64 0, i64 %24, i64 %52
  %57 = getelementptr inbounds float, ptr addrspace(1) %56, i64 384
  %58 = load float, ptr addrspace(1) %57, align 4, !invariant.load !267
  %add.1112 = fadd float %add.911, %58
  %59 = getelementptr [8192 x [440 x float]], ptr addrspace(1) %arg118, i64 0, i64 %24, i64 %52
  %60 = getelementptr inbounds float, ptr addrspace(1) %59, i64 384
  %61 = load float, ptr addrspace(1) %60, align 4, !invariant.load !267
  %add.1313 = fadd float %add.1112, %61
  %multiply.1414 = fmul float %16, %add.1313
  %subtract.1515 = fsub float %15, %multiply.1414
  %62 = insertelement <4 x float> poison, float %subtract.15, i32 0
  %63 = insertelement <4 x float> %62, float %subtract.155, i32 1
  %64 = insertelement <4 x float> %63, float %subtract.1510, i32 2
  %65 = insertelement <4 x float> %64, float %subtract.1515, i32 3
  store <4 x float> %65, ptr addrspace(1) %17, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_546(ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(63438848) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(49020928) %arg2) local_unnamed_addr #6 {
entry:
  %arg28 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !326
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 1496
  %5 = urem i32 %linear_index3, 1496
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = urem i32 %linear_index2, 1496
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = urem i32 %linear_index1, 1496
  %8 = mul i32 %4, 1496
  %.decomposed = sub i32 %linear_index_base.frozen, %8
  %9 = zext i32 %4 to i64
  %10 = zext i32 %.decomposed to i64
  %11 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %10
  %12 = getelementptr inbounds float, ptr addrspace(1) %11, i64 440
  %13 = load float, ptr addrspace(1) %12, align 4, !invariant.load !267
  %14 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %10
  %15 = getelementptr inbounds float, ptr addrspace(1) %14, i64 440
  %16 = load float, ptr addrspace(1) %15, align 4, !invariant.load !267
  %add.5 = fadd float %13, %16
  %17 = zext i32 %linear_index_base to i64
  %18 = getelementptr float, ptr addrspace(1) %arg28, i64 %17
  %19 = zext i32 %7 to i64
  %20 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %19
  %21 = getelementptr inbounds float, ptr addrspace(1) %20, i64 440
  %22 = load float, ptr addrspace(1) %21, align 4, !invariant.load !267
  %23 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %19
  %24 = getelementptr inbounds float, ptr addrspace(1) %23, i64 440
  %25 = load float, ptr addrspace(1) %24, align 4, !invariant.load !267
  %add.51 = fadd float %22, %25
  %26 = zext i32 %6 to i64
  %27 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %26
  %28 = getelementptr inbounds float, ptr addrspace(1) %27, i64 440
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %30 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %26
  %31 = getelementptr inbounds float, ptr addrspace(1) %30, i64 440
  %32 = load float, ptr addrspace(1) %31, align 4, !invariant.load !267
  %add.52 = fadd float %29, %32
  %33 = zext i32 %5 to i64
  %34 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %33
  %35 = getelementptr inbounds float, ptr addrspace(1) %34, i64 440
  %36 = load float, ptr addrspace(1) %35, align 4, !invariant.load !267
  %37 = getelementptr [8192 x [1936 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %33
  %38 = getelementptr inbounds float, ptr addrspace(1) %37, i64 440
  %39 = load float, ptr addrspace(1) %38, align 4, !invariant.load !267
  %add.53 = fadd float %36, %39
  %40 = insertelement <4 x float> poison, float %add.5, i32 0
  %41 = insertelement <4 x float> %40, float %add.51, i32 1
  %42 = insertelement <4 x float> %41, float %add.52, i32 2
  %43 = insertelement <4 x float> %42, float %add.53, i32 3
  store <4 x float> %43, ptr addrspace(1) %18, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @fusion_138(ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg1, ptr noalias nocapture readonly align 128 dereferenceable(4718592) %arg2, ptr noalias nocapture readonly align 16 dereferenceable(4) %arg3, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg4, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg5, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg6, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg7, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg8, ptr noalias nocapture readonly align 128 dereferenceable(67371008) %arg9, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg10, ptr noalias nocapture readonly align 16 dereferenceable(32768) %arg11, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg12, ptr noalias nocapture readonly align 128 dereferenceable(49020928) %arg13, ptr noalias nocapture align 128 dereferenceable(524288) %arg14, ptr noalias nocapture align 128 dereferenceable(524288) %arg15, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg16, ptr noalias nocapture readonly align 128 dereferenceable(12582912) %arg17, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg18, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg19, ptr noalias nocapture readonly align 128 dereferenceable(15728640) %arg20, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg21, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg22, ptr noalias nocapture readonly align 16 dereferenceable(524288) %arg23, ptr noalias nocapture readonly align 128 dereferenceable(9961472) %arg24, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg25, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg26, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg27, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg28, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg29, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg30, ptr noalias nocapture writeonly align 128 dereferenceable(524288) %arg31) local_unnamed_addr #5 {
entry:
  %arg31185 = addrspacecast ptr %arg31 to ptr addrspace(1)
  %arg30183 = addrspacecast ptr %arg30 to ptr addrspace(1)
  %arg29181 = addrspacecast ptr %arg29 to ptr addrspace(1)
  %arg28179 = addrspacecast ptr %arg28 to ptr addrspace(1)
  %arg27177 = addrspacecast ptr %arg27 to ptr addrspace(1)
  %arg26175 = addrspacecast ptr %arg26 to ptr addrspace(1)
  %arg25173 = addrspacecast ptr %arg25 to ptr addrspace(1)
  %arg24171 = addrspacecast ptr %arg24 to ptr addrspace(1)
  %arg23169 = addrspacecast ptr %arg23 to ptr addrspace(1)
  %arg22167 = addrspacecast ptr %arg22 to ptr addrspace(1)
  %arg21165 = addrspacecast ptr %arg21 to ptr addrspace(1)
  %arg20163 = addrspacecast ptr %arg20 to ptr addrspace(1)
  %arg19161 = addrspacecast ptr %arg19 to ptr addrspace(1)
  %arg18159 = addrspacecast ptr %arg18 to ptr addrspace(1)
  %arg17157 = addrspacecast ptr %arg17 to ptr addrspace(1)
  %arg16155 = addrspacecast ptr %arg16 to ptr addrspace(1)
  %arg15153 = addrspacecast ptr %arg15 to ptr addrspace(1)
  %arg14151 = addrspacecast ptr %arg14 to ptr addrspace(1)
  %arg13149 = addrspacecast ptr %arg13 to ptr addrspace(1)
  %arg12147 = addrspacecast ptr %arg12 to ptr addrspace(1)
  %arg11145 = addrspacecast ptr %arg11 to ptr addrspace(1)
  %arg10143 = addrspacecast ptr %arg10 to ptr addrspace(1)
  %arg9141 = addrspacecast ptr %arg9 to ptr addrspace(1)
  %arg8139 = addrspacecast ptr %arg8 to ptr addrspace(1)
  %arg7137 = addrspacecast ptr %arg7 to ptr addrspace(1)
  %arg6135 = addrspacecast ptr %arg6 to ptr addrspace(1)
  %arg5133 = addrspacecast ptr %arg5 to ptr addrspace(1)
  %arg4131 = addrspacecast ptr %arg4 to ptr addrspace(1)
  %arg3129 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg2127 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg1125 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg0123 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !287
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %2 = shl nuw nsw i32 %0, 10
  %3 = shl nuw nsw i32 %1, 2
  %linear_index_base = or i32 %2, %3
  %4 = and i32 %3, 12
  %5 = lshr i32 %linear_index_base, 4
  %linear_index1 = or i32 %linear_index_base, 1
  %6 = and i32 %linear_index1, 13
  %linear_index2 = or i32 %linear_index_base, 2
  %7 = and i32 %linear_index2, 14
  %linear_index3 = or i32 %linear_index_base, 3
  %8 = and i32 %linear_index3, 15
  %9 = zext i32 %linear_index_base to i64
  %10 = getelementptr float, ptr addrspace(1) %arg0123, i64 %9
  %11 = load <4 x float>, ptr addrspace(1) %10, align 16, !invariant.load !267
  %12 = extractelement <4 x float> %11, i32 0
  %13 = extractelement <4 x float> %11, i32 1
  %14 = extractelement <4 x float> %11, i32 2
  %15 = extractelement <4 x float> %11, i32 3
  %16 = load float, ptr addrspace(1) %arg3129, align 16, !invariant.load !267
  %17 = zext i32 %5 to i64
  %18 = zext i32 %4 to i64
  %19 = getelementptr [8192 x [144 x float]], ptr addrspace(1) %arg2127, i64 0, i64 %17, i64 %18
  %20 = getelementptr inbounds float, ptr addrspace(1) %19, i64 128
  %21 = load <2 x float>, ptr addrspace(1) %20, align 16, !invariant.load !267
  %22 = extractelement <2 x float> %21, i32 0
  %23 = extractelement <2 x float> %21, i32 1
  %24 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg1125, i64 0, i64 %17, i64 %18
  %25 = load <2 x float>, ptr addrspace(1) %24, align 16, !invariant.load !267
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %add.29 = fadd float %22, %26
  %multiply.30 = fmul float %16, %add.29
  %subtract.31 = fsub float %12, %multiply.30
  %28 = getelementptr float, ptr addrspace(1) %arg4131, i64 %9
  %29 = load <4 x float>, ptr addrspace(1) %28, align 16, !invariant.load !267
  %30 = extractelement <4 x float> %29, i32 0
  %31 = extractelement <4 x float> %29, i32 1
  %32 = extractelement <4 x float> %29, i32 2
  %33 = extractelement <4 x float> %29, i32 3
  %34 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg5133, i64 0, i64 %17, i64 %18
  %35 = load <2 x float>, ptr addrspace(1) %34, align 16, !invariant.load !267
  %36 = extractelement <2 x float> %35, i32 0
  %37 = extractelement <2 x float> %35, i32 1
  %38 = getelementptr inbounds float, ptr addrspace(1) %19, i64 32
  %39 = load <2 x float>, ptr addrspace(1) %38, align 16, !invariant.load !267
  %40 = extractelement <2 x float> %39, i32 0
  %41 = extractelement <2 x float> %39, i32 1
  %add.34 = fadd float %36, %40
  %multiply.35 = fmul float %16, %add.34
  %subtract.36 = fsub float %30, %multiply.35
  %42 = getelementptr float, ptr addrspace(1) %arg6135, i64 %9
  %43 = load <4 x float>, ptr addrspace(1) %42, align 16, !invariant.load !267
  %44 = extractelement <4 x float> %43, i32 0
  %45 = extractelement <4 x float> %43, i32 1
  %46 = extractelement <4 x float> %43, i32 2
  %47 = extractelement <4 x float> %43, i32 3
  %48 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg7137, i64 0, i64 %17, i64 %18
  %49 = load <2 x float>, ptr addrspace(1) %48, align 16, !invariant.load !267
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %52 = getelementptr inbounds float, ptr addrspace(1) %19, i64 80
  %53 = load <2 x float>, ptr addrspace(1) %52, align 16, !invariant.load !267
  %54 = extractelement <2 x float> %53, i32 0
  %55 = extractelement <2 x float> %53, i32 1
  %add.39 = fadd float %50, %54
  %multiply.40 = fmul float %16, %add.39
  %subtract.41 = fsub float %44, %multiply.40
  %56 = getelementptr float, ptr addrspace(1) %arg8139, i64 %9
  %57 = load <4 x float>, ptr addrspace(1) %56, align 16, !invariant.load !267
  %58 = extractelement <4 x float> %57, i32 0
  %59 = extractelement <4 x float> %57, i32 1
  %60 = extractelement <4 x float> %57, i32 2
  %61 = extractelement <4 x float> %57, i32 3
  %62 = icmp ult i32 %4, 8
  %63 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg9141, i64 0, i64 %17, i64 %18
  %64 = getelementptr inbounds float, ptr addrspace(1) %63, i64 1816
  %65 = load <2 x float>, ptr addrspace(1) %64, align 16, !invariant.load !267
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %arg11.arg10 = select i1 %62, ptr addrspace(1) %arg11145, ptr addrspace(1) %arg10143
  %68 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg11.arg10, i64 0, i64 %17, i64 0
  %69 = load float, ptr addrspace(1) %68, align 4, !invariant.load !267
  %multiply.49 = fmul float %69, %66
  %multiply.51 = fmul float %16, %multiply.49
  %subtract.52 = fsub float %58, %multiply.51
  %70 = getelementptr float, ptr addrspace(1) %arg12147, i64 %9
  %71 = load <4 x float>, ptr addrspace(1) %70, align 16, !invariant.load !267
  %72 = extractelement <4 x float> %71, i32 0
  %73 = extractelement <4 x float> %71, i32 1
  %74 = extractelement <4 x float> %71, i32 2
  %75 = extractelement <4 x float> %71, i32 3
  %76 = getelementptr float, ptr addrspace(1) %arg14151, i64 %9
  %77 = load <4 x float>, ptr addrspace(1) %76, align 16
  %78 = extractelement <4 x float> %77, i32 0
  %79 = extractelement <4 x float> %77, i32 1
  %80 = extractelement <4 x float> %77, i32 2
  %81 = extractelement <4 x float> %77, i32 3
  %82 = getelementptr float, ptr addrspace(1) %arg15153, i64 %9
  %83 = load <4 x float>, ptr addrspace(1) %82, align 16
  %84 = extractelement <4 x float> %83, i32 0
  %85 = extractelement <4 x float> %83, i32 1
  %86 = extractelement <4 x float> %83, i32 2
  %87 = extractelement <4 x float> %83, i32 3
  %add.53 = fadd float %78, %84
  %88 = getelementptr [8192 x [1496 x float]], ptr addrspace(1) %arg13149, i64 0, i64 %17, i64 %18
  %89 = getelementptr inbounds float, ptr addrspace(1) %88, i64 1480
  %90 = load <2 x float>, ptr addrspace(1) %89, align 16, !invariant.load !267
  %91 = extractelement <2 x float> %90, i32 0
  %92 = extractelement <2 x float> %90, i32 1
  %add.55 = fadd float %add.53, %91
  %multiply.56 = fmul float %16, %add.55
  %subtract.57 = fsub float %72, %multiply.56
  %93 = getelementptr float, ptr addrspace(1) %arg16155, i64 %9
  %94 = load <4 x float>, ptr addrspace(1) %93, align 16, !invariant.load !267
  %95 = extractelement <4 x float> %94, i32 0
  %96 = extractelement <4 x float> %94, i32 1
  %97 = extractelement <4 x float> %94, i32 2
  %98 = extractelement <4 x float> %94, i32 3
  %99 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg17157, i64 0, i64 %17, i64 %18
  %100 = getelementptr inbounds float, ptr addrspace(1) %99, i64 112
  %101 = load <2 x float>, ptr addrspace(1) %100, align 16, !invariant.load !267
  %102 = extractelement <2 x float> %101, i32 0
  %103 = extractelement <2 x float> %101, i32 1
  %multiply.59 = fmul float %16, %102
  %subtract.60 = fsub float %95, %multiply.59
  %104 = getelementptr float, ptr addrspace(1) %arg18159, i64 %9
  %105 = load <4 x float>, ptr addrspace(1) %104, align 16, !invariant.load !267
  %106 = extractelement <4 x float> %105, i32 0
  %107 = extractelement <4 x float> %105, i32 1
  %108 = extractelement <4 x float> %105, i32 2
  %109 = extractelement <4 x float> %105, i32 3
  %110 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg20163, i64 0, i64 %17, i64 %18
  %111 = getelementptr inbounds float, ptr addrspace(1) %110, i64 208
  %112 = load <2 x float>, ptr addrspace(1) %111, align 16, !invariant.load !267
  %113 = extractelement <2 x float> %112, i32 0
  %114 = extractelement <2 x float> %112, i32 1
  %115 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg19161, i64 0, i64 %17, i64 %18
  %116 = getelementptr inbounds float, ptr addrspace(1) %115, i64 208
  %117 = load <2 x float>, ptr addrspace(1) %116, align 16, !invariant.load !267
  %118 = extractelement <2 x float> %117, i32 0
  %119 = extractelement <2 x float> %117, i32 1
  %add.63 = fadd float %113, %118
  %multiply.65 = fmul float %16, %add.63
  %subtract.66 = fsub float %106, %multiply.65
  %120 = getelementptr float, ptr addrspace(1) %arg21165, i64 %9
  %121 = load <4 x float>, ptr addrspace(1) %120, align 16, !invariant.load !267
  %122 = extractelement <4 x float> %121, i32 0
  %123 = extractelement <4 x float> %121, i32 1
  %124 = extractelement <4 x float> %121, i32 2
  %125 = extractelement <4 x float> %121, i32 3
  %126 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg22167, i64 0, i64 %17, i64 %18
  %127 = load <2 x float>, ptr addrspace(1) %126, align 16, !invariant.load !267
  %128 = extractelement <2 x float> %127, i32 0
  %129 = extractelement <2 x float> %127, i32 1
  %multiply.68 = fmul float %16, %128
  %subtract.69 = fsub float %122, %multiply.68
  %130 = getelementptr float, ptr addrspace(1) %arg23169, i64 %9
  %131 = load <4 x float>, ptr addrspace(1) %130, align 16, !invariant.load !267
  %132 = extractelement <4 x float> %131, i32 0
  %133 = extractelement <4 x float> %131, i32 1
  %134 = extractelement <4 x float> %131, i32 2
  %135 = extractelement <4 x float> %131, i32 3
  %136 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg24171, i64 0, i64 %17, i64 %18
  %137 = load <2 x float>, ptr addrspace(1) %136, align 16, !invariant.load !267
  %138 = extractelement <2 x float> %137, i32 0
  %139 = extractelement <2 x float> %137, i32 1
  %multiply.71 = fmul float %16, %138
  %subtract.72 = fsub float %132, %multiply.71
  %140 = getelementptr float, ptr addrspace(1) %arg25173, i64 %9
  %141 = getelementptr float, ptr addrspace(1) %arg26175, i64 %9
  %142 = getelementptr float, ptr addrspace(1) %arg27177, i64 %9
  %143 = getelementptr float, ptr addrspace(1) %arg28179, i64 %9
  %144 = getelementptr float, ptr addrspace(1) %arg29181, i64 %9
  %145 = getelementptr float, ptr addrspace(1) %arg30183, i64 %9
  %146 = getelementptr float, ptr addrspace(1) %arg31185, i64 %9
  %147 = zext i32 %6 to i64
  %148 = getelementptr [8192 x [144 x float]], ptr addrspace(1) %arg2127, i64 0, i64 %17, i64 %147
  %add.292 = fadd float %23, %27
  %multiply.303 = fmul float %16, %add.292
  %subtract.314 = fsub float %13, %multiply.303
  %add.345 = fadd float %37, %41
  %multiply.356 = fmul float %16, %add.345
  %subtract.367 = fsub float %31, %multiply.356
  %add.398 = fadd float %51, %55
  %multiply.409 = fmul float %16, %add.398
  %subtract.4110 = fsub float %45, %multiply.409
  %149 = icmp ult i32 %6, 8
  %arg10.sink110 = select i1 %149, ptr addrspace(1) %arg11145, ptr addrspace(1) %arg10143
  %150 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg10.sink110, i64 0, i64 %17, i64 0
  %151 = load float, ptr addrspace(1) %150, align 4, !invariant.load !267
  %152 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg9141, i64 0, i64 %17, i64 %147
  %multiply.4915 = fmul float %151, %67
  %multiply.5119 = fmul float %16, %multiply.4915
  %subtract.5220 = fsub float %59, %multiply.5119
  %add.5321 = fadd float %79, %85
  %153 = getelementptr [8192 x [1496 x float]], ptr addrspace(1) %arg13149, i64 0, i64 %17, i64 %147
  %add.5522 = fadd float %add.5321, %92
  %multiply.5623 = fmul float %16, %add.5522
  %subtract.5724 = fsub float %73, %multiply.5623
  %154 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg17157, i64 0, i64 %17, i64 %147
  %multiply.5925 = fmul float %16, %103
  %subtract.6026 = fsub float %96, %multiply.5925
  %155 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg20163, i64 0, i64 %17, i64 %147
  %156 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg19161, i64 0, i64 %17, i64 %147
  %add.6327 = fadd float %114, %119
  %multiply.6528 = fmul float %16, %add.6327
  %subtract.6629 = fsub float %107, %multiply.6528
  %multiply.6830 = fmul float %16, %129
  %subtract.6931 = fsub float %123, %multiply.6830
  %multiply.7132 = fmul float %16, %139
  %subtract.7233 = fsub float %133, %multiply.7132
  %157 = zext i32 %7 to i64
  %158 = getelementptr [8192 x [144 x float]], ptr addrspace(1) %arg2127, i64 0, i64 %17, i64 %157
  %159 = getelementptr inbounds float, ptr addrspace(1) %158, i64 128
  %160 = load float, ptr addrspace(1) %159, align 8, !invariant.load !267
  %161 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg1125, i64 0, i64 %17, i64 %157
  %162 = load float, ptr addrspace(1) %161, align 8, !invariant.load !267
  %add.2934 = fadd float %160, %162
  %multiply.3035 = fmul float %16, %add.2934
  %subtract.3136 = fsub float %14, %multiply.3035
  %163 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg5133, i64 0, i64 %17, i64 %157
  %164 = load float, ptr addrspace(1) %163, align 8, !invariant.load !267
  %165 = getelementptr inbounds float, ptr addrspace(1) %158, i64 32
  %166 = load float, ptr addrspace(1) %165, align 8, !invariant.load !267
  %add.3437 = fadd float %164, %166
  %multiply.3538 = fmul float %16, %add.3437
  %subtract.3639 = fsub float %32, %multiply.3538
  %167 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg7137, i64 0, i64 %17, i64 %157
  %168 = load float, ptr addrspace(1) %167, align 8, !invariant.load !267
  %169 = getelementptr inbounds float, ptr addrspace(1) %158, i64 80
  %170 = load float, ptr addrspace(1) %169, align 8, !invariant.load !267
  %add.3940 = fadd float %168, %170
  %multiply.4041 = fmul float %16, %add.3940
  %subtract.4142 = fsub float %46, %multiply.4041
  %171 = icmp ult i32 %7, 8
  %arg10.sink116 = select i1 %171, ptr addrspace(1) %arg11145, ptr addrspace(1) %arg10143
  %172 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg10.sink116, i64 0, i64 %17, i64 0
  %173 = load float, ptr addrspace(1) %172, align 4, !invariant.load !267
  %174 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg9141, i64 0, i64 %17, i64 %157
  %175 = getelementptr inbounds float, ptr addrspace(1) %174, i64 1816
  %176 = load float, ptr addrspace(1) %175, align 8, !invariant.load !267
  %multiply.4947 = fmul float %173, %176
  %multiply.5151 = fmul float %16, %multiply.4947
  %subtract.5252 = fsub float %60, %multiply.5151
  %add.5353 = fadd float %80, %86
  %177 = getelementptr [8192 x [1496 x float]], ptr addrspace(1) %arg13149, i64 0, i64 %17, i64 %157
  %178 = getelementptr inbounds float, ptr addrspace(1) %177, i64 1480
  %179 = load float, ptr addrspace(1) %178, align 8, !invariant.load !267
  %add.5554 = fadd float %add.5353, %179
  %multiply.5655 = fmul float %16, %add.5554
  %subtract.5756 = fsub float %74, %multiply.5655
  %180 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg17157, i64 0, i64 %17, i64 %157
  %181 = getelementptr inbounds float, ptr addrspace(1) %180, i64 112
  %182 = load float, ptr addrspace(1) %181, align 8, !invariant.load !267
  %multiply.5957 = fmul float %16, %182
  %subtract.6058 = fsub float %97, %multiply.5957
  %183 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg20163, i64 0, i64 %17, i64 %157
  %184 = getelementptr inbounds float, ptr addrspace(1) %183, i64 208
  %185 = load float, ptr addrspace(1) %184, align 8, !invariant.load !267
  %186 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg19161, i64 0, i64 %17, i64 %157
  %187 = getelementptr inbounds float, ptr addrspace(1) %186, i64 208
  %188 = load float, ptr addrspace(1) %187, align 8, !invariant.load !267
  %add.6359 = fadd float %185, %188
  %multiply.6560 = fmul float %16, %add.6359
  %subtract.6661 = fsub float %108, %multiply.6560
  %189 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg22167, i64 0, i64 %17, i64 %157
  %190 = load float, ptr addrspace(1) %189, align 8, !invariant.load !267
  %multiply.6862 = fmul float %16, %190
  %subtract.6963 = fsub float %124, %multiply.6862
  %191 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg24171, i64 0, i64 %17, i64 %157
  %192 = load float, ptr addrspace(1) %191, align 8, !invariant.load !267
  %multiply.7164 = fmul float %16, %192
  %subtract.7265 = fsub float %134, %multiply.7164
  %193 = zext i32 %8 to i64
  %194 = getelementptr [8192 x [144 x float]], ptr addrspace(1) %arg2127, i64 0, i64 %17, i64 %193
  %195 = getelementptr inbounds float, ptr addrspace(1) %194, i64 128
  %196 = load float, ptr addrspace(1) %195, align 4, !invariant.load !267
  %197 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg1125, i64 0, i64 %17, i64 %193
  %198 = load float, ptr addrspace(1) %197, align 4, !invariant.load !267
  %199 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg5133, i64 0, i64 %17, i64 %193
  %200 = load float, ptr addrspace(1) %199, align 4, !invariant.load !267
  %201 = getelementptr inbounds float, ptr addrspace(1) %194, i64 32
  %202 = load float, ptr addrspace(1) %201, align 4, !invariant.load !267
  %203 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg7137, i64 0, i64 %17, i64 %193
  %204 = load float, ptr addrspace(1) %203, align 4, !invariant.load !267
  %205 = getelementptr inbounds float, ptr addrspace(1) %194, i64 80
  %206 = load float, ptr addrspace(1) %205, align 4, !invariant.load !267
  %207 = icmp ult i32 %8, 8
  %arg10.sink122 = select i1 %207, ptr addrspace(1) %arg11145, ptr addrspace(1) %arg10143
  %208 = getelementptr inbounds [8192 x [1 x float]], ptr addrspace(1) %arg10.sink122, i64 0, i64 %17, i64 0
  %209 = load float, ptr addrspace(1) %208, align 4, !invariant.load !267
  %210 = getelementptr [8192 x [2056 x float]], ptr addrspace(1) %arg9141, i64 0, i64 %17, i64 %193
  %211 = getelementptr inbounds float, ptr addrspace(1) %210, i64 1816
  %212 = load float, ptr addrspace(1) %211, align 4, !invariant.load !267
  %multiply.4979 = fmul float %209, %212
  %add.3972 = fadd float %204, %206
  %multiply.4073 = fmul float %16, %add.3972
  %subtract.4174 = fsub float %47, %multiply.4073
  %add.3469 = fadd float %200, %202
  %multiply.3570 = fmul float %16, %add.3469
  %subtract.3671 = fsub float %33, %multiply.3570
  %add.2966 = fadd float %196, %198
  %multiply.3067 = fmul float %16, %add.2966
  %subtract.3168 = fsub float %15, %multiply.3067
  %multiply.5183 = fmul float %16, %multiply.4979
  %subtract.5284 = fsub float %61, %multiply.5183
  %add.5385 = fadd float %81, %87
  %213 = getelementptr [8192 x [1496 x float]], ptr addrspace(1) %arg13149, i64 0, i64 %17, i64 %193
  %214 = getelementptr inbounds float, ptr addrspace(1) %213, i64 1480
  %215 = load float, ptr addrspace(1) %214, align 4, !invariant.load !267
  %add.5586 = fadd float %add.5385, %215
  %multiply.5687 = fmul float %16, %add.5586
  %subtract.5788 = fsub float %75, %multiply.5687
  %216 = getelementptr [8192 x [384 x float]], ptr addrspace(1) %arg17157, i64 0, i64 %17, i64 %193
  %217 = getelementptr inbounds float, ptr addrspace(1) %216, i64 112
  %218 = load float, ptr addrspace(1) %217, align 4, !invariant.load !267
  %multiply.5989 = fmul float %16, %218
  %subtract.6090 = fsub float %98, %multiply.5989
  %219 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg20163, i64 0, i64 %17, i64 %193
  %220 = getelementptr inbounds float, ptr addrspace(1) %219, i64 208
  %221 = load float, ptr addrspace(1) %220, align 4, !invariant.load !267
  %222 = getelementptr [8192 x [480 x float]], ptr addrspace(1) %arg19161, i64 0, i64 %17, i64 %193
  %223 = getelementptr inbounds float, ptr addrspace(1) %222, i64 208
  %224 = load float, ptr addrspace(1) %223, align 4, !invariant.load !267
  %add.6391 = fadd float %221, %224
  %multiply.6592 = fmul float %16, %add.6391
  %subtract.6693 = fsub float %109, %multiply.6592
  %225 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg22167, i64 0, i64 %17, i64 %193
  %226 = load float, ptr addrspace(1) %225, align 4, !invariant.load !267
  %multiply.6894 = fmul float %16, %226
  %subtract.6995 = fsub float %125, %multiply.6894
  %227 = getelementptr inbounds [8192 x [304 x float]], ptr addrspace(1) %arg24171, i64 0, i64 %17, i64 %193
  %228 = load float, ptr addrspace(1) %227, align 4, !invariant.load !267
  %multiply.7196 = fmul float %16, %228
  %subtract.7297 = fsub float %135, %multiply.7196
  %229 = insertelement <4 x float> poison, float %subtract.31, i32 0
  %230 = insertelement <4 x float> %229, float %subtract.314, i32 1
  %231 = insertelement <4 x float> %230, float %subtract.3136, i32 2
  %232 = insertelement <4 x float> %231, float %subtract.3168, i32 3
  store <4 x float> %232, ptr addrspace(1) %140, align 16
  %233 = insertelement <4 x float> poison, float %subtract.36, i32 0
  %234 = insertelement <4 x float> %233, float %subtract.367, i32 1
  %235 = insertelement <4 x float> %234, float %subtract.3639, i32 2
  %236 = insertelement <4 x float> %235, float %subtract.3671, i32 3
  store <4 x float> %236, ptr addrspace(1) %141, align 16
  %237 = insertelement <4 x float> poison, float %subtract.41, i32 0
  %238 = insertelement <4 x float> %237, float %subtract.4110, i32 1
  %239 = insertelement <4 x float> %238, float %subtract.4142, i32 2
  %240 = insertelement <4 x float> %239, float %subtract.4174, i32 3
  store <4 x float> %240, ptr addrspace(1) %142, align 16
  %241 = insertelement <4 x float> poison, float %subtract.52, i32 0
  %242 = insertelement <4 x float> %241, float %subtract.5220, i32 1
  %243 = insertelement <4 x float> %242, float %subtract.5252, i32 2
  %244 = insertelement <4 x float> %243, float %subtract.5284, i32 3
  store <4 x float> %244, ptr addrspace(1) %143, align 16
  %245 = insertelement <4 x float> poison, float %subtract.57, i32 0
  %246 = insertelement <4 x float> %245, float %subtract.5724, i32 1
  %247 = insertelement <4 x float> %246, float %subtract.5756, i32 2
  %248 = insertelement <4 x float> %247, float %subtract.5788, i32 3
  store <4 x float> %248, ptr addrspace(1) %144, align 16
  %249 = insertelement <4 x float> poison, float %subtract.60, i32 0
  %250 = insertelement <4 x float> %249, float %subtract.6026, i32 1
  %251 = insertelement <4 x float> %250, float %subtract.6058, i32 2
  %252 = insertelement <4 x float> %251, float %subtract.6090, i32 3
  store <4 x float> %252, ptr addrspace(1) %145, align 16
  %253 = insertelement <4 x float> poison, float %subtract.66, i32 0
  %254 = insertelement <4 x float> %253, float %subtract.6629, i32 1
  %255 = insertelement <4 x float> %254, float %subtract.6661, i32 2
  %256 = insertelement <4 x float> %255, float %subtract.6693, i32 3
  store <4 x float> %256, ptr addrspace(1) %146, align 16
  %257 = insertelement <4 x float> poison, float %subtract.69, i32 0
  %258 = insertelement <4 x float> %257, float %subtract.6931, i32 1
  %259 = insertelement <4 x float> %258, float %subtract.6963, i32 2
  %260 = insertelement <4 x float> %259, float %subtract.6995, i32 3
  store <4 x float> %260, ptr addrspace(1) %76, align 16
  %261 = insertelement <4 x float> poison, float %subtract.72, i32 0
  %262 = insertelement <4 x float> %261, float %subtract.7233, i32 1
  %263 = insertelement <4 x float> %262, float %subtract.7265, i32 2
  %264 = insertelement <4 x float> %263, float %subtract.7297, i32 3
  store <4 x float> %264, ptr addrspace(1) %82, align 16
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_657(ptr noalias nocapture readonly align 128 dereferenceable(48496640) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(49020928) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg2, ptr noalias nocapture writeonly align 128 dereferenceable(8388608) %arg3) local_unnamed_addr #6 {
entry:
  %arg39 = addrspacecast ptr %arg3 to ptr addrspace(1)
  %arg27 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg15 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg03 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !309
  %1 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !270
  %2 = shl nuw nsw i32 %0, 10
  %linear_index = or i32 %2, %1
  %linear_index.frozen = freeze i32 %linear_index
  %3 = udiv i32 %linear_index.frozen, 1480
  %4 = mul i32 %3, 1480
  %.decomposed = sub i32 %linear_index.frozen, %4
  %5 = zext i32 %linear_index to i64
  %6 = getelementptr inbounds float, ptr addrspace(1) %arg03, i64 %5
  %7 = load float, ptr addrspace(1) %6, align 4, !invariant.load !267
  %8 = zext i32 %3 to i64
  %9 = zext i32 %.decomposed to i64
  %10 = getelementptr inbounds [8192 x [1496 x float]], ptr addrspace(1) %arg15, i64 0, i64 %8, i64 %9
  %11 = load float, ptr addrspace(1) %10, align 4, !invariant.load !267
  %add.4 = fadd float %7, %11
  %12 = icmp ugt i32 %.decomposed, 1223
  %13 = add nsw i32 %.decomposed, -1224
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg27, i64 0, i64 %8, i64 %14
  br i1 %12, label %slice0-true, label %slice0-after

fusion_657.in_bounds-after:                       ; preds = %slice0-after, %slice1-true
  ret void

slice0-after:                                     ; preds = %slice0-true, %entry
  %16 = add nsw i32 %.decomposed, -968
  %17 = icmp ult i32 %16, 256
  %18 = zext i32 %16 to i64
  %19 = getelementptr inbounds [8192 x [256 x float]], ptr addrspace(1) %arg39, i64 0, i64 %8, i64 %18
  br i1 %17, label %slice1-true, label %fusion_657.in_bounds-after

slice0-true:                                      ; preds = %entry
  store float %add.4, ptr addrspace(1) %15, align 4
  br label %slice0-after

slice1-true:                                      ; preds = %slice0-after
  store float %add.4, ptr addrspace(1) %19, align 4
  br label %fusion_657.in_bounds-after
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @fusion_659(ptr noalias nocapture readonly align 128 dereferenceable(48496640) %arg0, ptr noalias nocapture readonly align 128 dereferenceable(49020928) %arg1, ptr noalias nocapture writeonly align 128 dereferenceable(31719424) %arg2) local_unnamed_addr #6 {
entry:
  %arg28 = addrspacecast ptr %arg2 to ptr addrspace(1)
  %arg16 = addrspacecast ptr %arg1 to ptr addrspace(1)
  %arg04 = addrspacecast ptr %arg0 to ptr addrspace(1)
  %0 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !327
  %1 = shl nuw nsw i32 %0, 10
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !271
  %3 = shl nuw nsw i32 %2, 2
  %linear_index_base = or i32 %1, %3
  %linear_index3 = or i32 %linear_index_base, 3
  %linear_index_base.frozen = freeze i32 %linear_index_base
  %4 = udiv i32 %linear_index_base.frozen, 968
  %5 = urem i32 %linear_index3, 968
  %linear_index2 = or i32 %linear_index_base, 2
  %6 = urem i32 %linear_index2, 968
  %linear_index1 = or i32 %linear_index_base, 1
  %7 = urem i32 %linear_index1, 968
  %8 = mul i32 %4, 968
  %.decomposed = sub i32 %linear_index_base.frozen, %8
  %9 = zext i32 %4 to i64
  %10 = zext i32 %.decomposed to i64
  %11 = getelementptr inbounds [8192 x [1480 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %10
  %12 = load float, ptr addrspace(1) %11, align 4, !invariant.load !267
  %13 = getelementptr inbounds [8192 x [1496 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %10
  %14 = load float, ptr addrspace(1) %13, align 4, !invariant.load !267
  %add.4 = fadd float %12, %14
  %15 = zext i32 %linear_index_base to i64
  %16 = getelementptr float, ptr addrspace(1) %arg28, i64 %15
  %17 = zext i32 %7 to i64
  %18 = getelementptr inbounds [8192 x [1480 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %17
  %19 = load float, ptr addrspace(1) %18, align 4, !invariant.load !267
  %20 = getelementptr inbounds [8192 x [1496 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %17
  %21 = load float, ptr addrspace(1) %20, align 4, !invariant.load !267
  %add.41 = fadd float %19, %21
  %22 = zext i32 %6 to i64
  %23 = getelementptr inbounds [8192 x [1480 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %22
  %24 = load float, ptr addrspace(1) %23, align 4, !invariant.load !267
  %25 = getelementptr inbounds [8192 x [1496 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %22
  %26 = load float, ptr addrspace(1) %25, align 4, !invariant.load !267
  %add.42 = fadd float %24, %26
  %27 = zext i32 %5 to i64
  %28 = getelementptr inbounds [8192 x [1480 x float]], ptr addrspace(1) %arg04, i64 0, i64 %9, i64 %27
  %29 = load float, ptr addrspace(1) %28, align 4, !invariant.load !267
  %30 = getelementptr inbounds [8192 x [1496 x float]], ptr addrspace(1) %arg16, i64 0, i64 %9, i64 %27
  %31 = load float, ptr addrspace(1) %30, align 4, !invariant.load !267
  %add.43 = fadd float %29, %31
  %32 = insertelement <4 x float> poison, float %add.4, i32 0
  %33 = insertelement <4 x float> %32, float %add.41, i32 1
  %34 = insertelement <4 x float> %33, float %add.42, i32 2
  %35 = insertelement <4 x float> %34, float %add.43, i32 3
  store <4 x float> %35, ptr addrspace(1) %16, align 16
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #6 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { nofree nosync nounwind memory(argmem: readwrite) }
attributes #8 = { nounwind memory(argmem: readwrite, inaccessiblemem: readwrite) }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263}
!llvm.module.flags = !{!264}

!0 = !{ptr @fusion_650, !"kernel", i32 1}
!1 = !{ptr @fusion_650, !"reqntidx", i32 512}
!2 = !{ptr @fusion_660, !"kernel", i32 1}
!3 = !{ptr @fusion_660, !"reqntidx", i32 512}
!4 = !{ptr @fusion_662, !"kernel", i32 1}
!5 = !{ptr @fusion_662, !"reqntidx", i32 512}
!6 = !{ptr @fusion_544, !"kernel", i32 1}
!7 = !{ptr @fusion_544, !"reqntidx", i32 1}
!8 = !{ptr @concatenate_338, !"kernel", i32 1}
!9 = !{ptr @concatenate_338, !"reqntidx", i32 1024}
!10 = !{ptr @fusion_485, !"kernel", i32 1}
!11 = !{ptr @fusion_485, !"reqntidx", i32 1024}
!12 = !{ptr @reduce_24, !"kernel", i32 1}
!13 = !{ptr @reduce_24, !"reqntidx", i32 1024}
!14 = !{ptr @fusion_484, !"kernel", i32 1}
!15 = !{ptr @fusion_484, !"reqntidx", i32 256}
!16 = !{ptr @fusion_479, !"kernel", i32 1}
!17 = !{ptr @fusion_479, !"reqntidx", i32 1024}
!18 = !{ptr @concatenate_307, !"kernel", i32 1}
!19 = !{ptr @concatenate_307, !"reqntidx", i32 1024}
!20 = !{ptr @concatenate_379, !"kernel", i32 1}
!21 = !{ptr @concatenate_379, !"reqntidx", i32 1024}
!22 = !{ptr @concatenate_340, !"kernel", i32 1}
!23 = !{ptr @concatenate_340, !"reqntidx", i32 1024}
!24 = !{ptr @concatenate_333, !"kernel", i32 1}
!25 = !{ptr @concatenate_333, !"reqntidx", i32 1024}
!26 = !{ptr @concatenate_308, !"kernel", i32 1}
!27 = !{ptr @concatenate_308, !"reqntidx", i32 1024}
!28 = !{ptr @concatenate_386, !"kernel", i32 1}
!29 = !{ptr @concatenate_386, !"reqntidx", i32 1024}
!30 = !{ptr @concatenate_334, !"kernel", i32 1}
!31 = !{ptr @concatenate_334, !"reqntidx", i32 1024}
!32 = !{ptr @concatenate_350, !"kernel", i32 1}
!33 = !{ptr @concatenate_350, !"reqntidx", i32 1024}
!34 = !{ptr @concatenate_313, !"kernel", i32 1}
!35 = !{ptr @concatenate_313, !"reqntidx", i32 1024}
!36 = !{ptr @concatenate_331, !"kernel", i32 1}
!37 = !{ptr @concatenate_331, !"reqntidx", i32 1024}
!38 = !{ptr @concatenate_312, !"kernel", i32 1}
!39 = !{ptr @concatenate_312, !"reqntidx", i32 1024}
!40 = !{ptr @concatenate_309, !"kernel", i32 1}
!41 = !{ptr @concatenate_309, !"reqntidx", i32 1024}
!42 = !{ptr @concatenate_326, !"kernel", i32 1}
!43 = !{ptr @concatenate_326, !"reqntidx", i32 256}
!44 = !{ptr @concatenate_303, !"kernel", i32 1}
!45 = !{ptr @concatenate_303, !"reqntidx", i32 256}
!46 = !{ptr @fusion_323, !"kernel", i32 1}
!47 = !{ptr @fusion_323, !"reqntidx", i32 1024}
!48 = !{ptr @fusion_462, !"kernel", i32 1}
!49 = !{ptr @fusion_462, !"reqntidx", i32 1024}
!50 = !{ptr @fusion_699, !"kernel", i32 1}
!51 = !{ptr @fusion_699, !"reqntidx", i32 1024}
!52 = !{ptr @fusion_434, !"kernel", i32 1}
!53 = !{ptr @fusion_434, !"reqntidx", i32 1024}
!54 = !{ptr @fusion_409, !"kernel", i32 1}
!55 = !{ptr @fusion_409, !"reqntidx", i32 1024}
!56 = !{ptr @fusion_416, !"kernel", i32 1}
!57 = !{ptr @fusion_416, !"reqntidx", i32 1024}
!58 = !{ptr @fusion_725, !"kernel", i32 1}
!59 = !{ptr @fusion_725, !"reqntidx", i32 1024}
!60 = !{ptr @fusion_694, !"kernel", i32 1}
!61 = !{ptr @fusion_694, !"reqntidx", i32 1024}
!62 = !{ptr @fusion_450, !"kernel", i32 1}
!63 = !{ptr @fusion_450, !"reqntidx", i32 128}
!64 = !{ptr @fusion_449, !"kernel", i32 1}
!65 = !{ptr @fusion_449, !"reqntidx", i32 1024}
!66 = !{ptr @fusion_319, !"kernel", i32 1}
!67 = !{ptr @fusion_319, !"reqntidx", i32 1024}
!68 = !{ptr @fusion_317, !"kernel", i32 1}
!69 = !{ptr @fusion_317, !"reqntidx", i32 1024}
!70 = !{ptr @fusion_445, !"kernel", i32 1}
!71 = !{ptr @fusion_445, !"reqntidx", i32 1024}
!72 = !{ptr @fusion_321, !"kernel", i32 1}
!73 = !{ptr @fusion_321, !"reqntidx", i32 1024}
!74 = !{ptr @fusion_309, !"kernel", i32 1}
!75 = !{ptr @fusion_309, !"reqntidx", i32 1024}
!76 = !{ptr @fusion_500, !"kernel", i32 1}
!77 = !{ptr @fusion_500, !"reqntidx", i32 128}
!78 = !{ptr @concatenate_343, !"kernel", i32 1}
!79 = !{ptr @concatenate_343, !"reqntidx", i32 256}
!80 = !{ptr @fusion_237, !"kernel", i32 1}
!81 = !{ptr @fusion_237, !"reqntidx", i32 1024}
!82 = !{ptr @concatenate_358, !"kernel", i32 1}
!83 = !{ptr @concatenate_358, !"reqntidx", i32 256}
!84 = !{ptr @fusion_363, !"kernel", i32 1}
!85 = !{ptr @fusion_363, !"reqntidx", i32 1024}
!86 = !{ptr @fusion_351, !"kernel", i32 1}
!87 = !{ptr @fusion_351, !"reqntidx", i32 128}
!88 = !{ptr @fusion_299, !"kernel", i32 1}
!89 = !{ptr @fusion_299, !"reqntidx", i32 1024}
!90 = !{ptr @fusion_526, !"kernel", i32 1}
!91 = !{ptr @fusion_526, !"reqntidx", i32 128}
!92 = !{ptr @concatenate_349, !"kernel", i32 1}
!93 = !{ptr @concatenate_349, !"reqntidx", i32 256}
!94 = !{ptr @concatenate_370, !"kernel", i32 1}
!95 = !{ptr @concatenate_370, !"reqntidx", i32 256}
!96 = !{ptr @fusion_390, !"kernel", i32 1}
!97 = !{ptr @fusion_390, !"reqntidx", i32 1024}
!98 = !{ptr @fusion_235, !"kernel", i32 1}
!99 = !{ptr @fusion_235, !"reqntidx", i32 1024}
!100 = !{ptr @fusion_304, !"kernel", i32 1}
!101 = !{ptr @fusion_304, !"reqntidx", i32 128}
!102 = !{ptr @fusion_232, !"kernel", i32 1}
!103 = !{ptr @fusion_232, !"reqntidx", i32 128}
!104 = !{ptr @concatenate_341, !"kernel", i32 1}
!105 = !{ptr @concatenate_341, !"reqntidx", i32 256}
!106 = !{ptr @fusion_185, !"kernel", i32 1}
!107 = !{ptr @fusion_185, !"reqntidx", i32 1024}
!108 = !{ptr @fusion_756, !"kernel", i32 1}
!109 = !{ptr @fusion_756, !"reqntidx", i32 1024}
!110 = !{ptr @concatenate_344, !"kernel", i32 1}
!111 = !{ptr @concatenate_344, !"reqntidx", i32 256}
!112 = !{ptr @fusion_279, !"kernel", i32 1}
!113 = !{ptr @fusion_279, !"reqntidx", i32 1024}
!114 = !{ptr @concatenate_382, !"kernel", i32 1}
!115 = !{ptr @concatenate_382, !"reqntidx", i32 256}
!116 = !{ptr @concatenate_381, !"kernel", i32 1}
!117 = !{ptr @concatenate_381, !"reqntidx", i32 256}
!118 = !{ptr @fusion_389, !"kernel", i32 1}
!119 = !{ptr @fusion_389, !"reqntidx", i32 1024}
!120 = !{ptr @fusion_137, !"kernel", i32 1}
!121 = !{ptr @fusion_137, !"reqntidx", i32 256}
!122 = !{ptr @fusion_370, !"kernel", i32 1}
!123 = !{ptr @fusion_370, !"reqntidx", i32 1024}
!124 = !{ptr @fusion_213, !"kernel", i32 1}
!125 = !{ptr @fusion_213, !"reqntidx", i32 256}
!126 = !{ptr @concatenate_342, !"kernel", i32 1}
!127 = !{ptr @concatenate_342, !"reqntidx", i32 256}
!128 = !{ptr @fusion_289, !"kernel", i32 1}
!129 = !{ptr @fusion_289, !"reqntidx", i32 1024}
!130 = !{ptr @fusion_438, !"kernel", i32 1}
!131 = !{ptr @fusion_438, !"reqntidx", i32 1024}
!132 = !{ptr @fusion_270, !"kernel", i32 1}
!133 = !{ptr @fusion_270, !"reqntidx", i32 1024}
!134 = !{ptr @fusion_421, !"kernel", i32 1}
!135 = !{ptr @fusion_421, !"reqntidx", i32 1024}
!136 = !{ptr @fusion_104, !"kernel", i32 1}
!137 = !{ptr @fusion_104, !"reqntidx", i32 256}
!138 = !{ptr @concatenate_378, !"kernel", i32 1}
!139 = !{ptr @concatenate_378, !"reqntidx", i32 256}
!140 = !{ptr @fusion_356, !"kernel", i32 1}
!141 = !{ptr @fusion_356, !"reqntidx", i32 1024}
!142 = !{ptr @fusion_140, !"kernel", i32 1}
!143 = !{ptr @fusion_140, !"reqntidx", i32 1024}
!144 = !{ptr @fusion_377, !"kernel", i32 1}
!145 = !{ptr @fusion_377, !"reqntidx", i32 1024}
!146 = !{ptr @fusion_361, !"kernel", i32 1}
!147 = !{ptr @fusion_361, !"reqntidx", i32 1024}
!148 = !{ptr @fusion_380, !"kernel", i32 1}
!149 = !{ptr @fusion_380, !"reqntidx", i32 1024}
!150 = !{ptr @concatenate_389, !"kernel", i32 1}
!151 = !{ptr @concatenate_389, !"reqntidx", i32 256}
!152 = !{ptr @fusion_340, !"kernel", i32 1}
!153 = !{ptr @fusion_340, !"reqntidx", i32 96}
!154 = !{ptr @slice_956, !"kernel", i32 1}
!155 = !{ptr @slice_956, !"reqntidx", i32 256}
!156 = !{ptr @fusion_346, !"kernel", i32 1}
!157 = !{ptr @fusion_346, !"reqntidx", i32 256}
!158 = !{ptr @fusion_345, !"kernel", i32 1}
!159 = !{ptr @fusion_345, !"reqntidx", i32 256}
!160 = !{ptr @slice_612, !"kernel", i32 1}
!161 = !{ptr @slice_612, !"reqntidx", i32 256}
!162 = !{ptr @fusion_565, !"kernel", i32 1}
!163 = !{ptr @fusion_565, !"reqntidx", i32 1024}
!164 = !{ptr @fusion_552, !"kernel", i32 1}
!165 = !{ptr @fusion_552, !"reqntidx", i32 1024}
!166 = !{ptr @fusion_15, !"kernel", i32 1}
!167 = !{ptr @fusion_15, !"reqntidx", i32 1024}
!168 = !{ptr @fusion_16, !"kernel", i32 1}
!169 = !{ptr @fusion_16, !"reqntidx", i32 6}
!170 = !{ptr @fusion_6, !"kernel", i32 1}
!171 = !{ptr @fusion_6, !"reqntidx", i32 336}
!172 = !{ptr @fusion_9, !"kernel", i32 1}
!173 = !{ptr @fusion_9, !"reqntidx", i32 1024}
!174 = !{ptr @fusion_548, !"kernel", i32 1}
!175 = !{ptr @fusion_548, !"reqntidx", i32 256}
!176 = !{ptr @fusion_19, !"kernel", i32 1}
!177 = !{ptr @fusion_19, !"reqntidx", i32 1024}
!178 = !{ptr @reduce, !"kernel", i32 1}
!179 = !{ptr @reduce, !"reqntidx", i32 1024}
!180 = !{ptr @fusion_18, !"kernel", i32 1}
!181 = !{ptr @fusion_18, !"reqntidx", i32 90}
!182 = !{ptr @fusion_10, !"kernel", i32 1}
!183 = !{ptr @fusion_10, !"reqntidx", i32 1024}
!184 = !{ptr @fusion_13, !"kernel", i32 1}
!185 = !{ptr @fusion_13, !"reqntidx", i32 256}
!186 = !{ptr @fusion_69, !"kernel", i32 1}
!187 = !{ptr @fusion_69, !"reqntidx", i32 1024}
!188 = !{ptr @fusion_79, !"kernel", i32 1}
!189 = !{ptr @fusion_79, !"reqntidx", i32 1024}
!190 = !{ptr @fusion_68, !"kernel", i32 1}
!191 = !{ptr @fusion_68, !"reqntidx", i32 256}
!192 = !{ptr @fusion_391, !"kernel", i32 1}
!193 = !{ptr @fusion_391, !"reqntidx", i32 256}
!194 = !{ptr @fusion_734, !"kernel", i32 1}
!195 = !{ptr @fusion_734, !"reqntidx", i32 1024}
!196 = !{ptr @add_225, !"kernel", i32 1}
!197 = !{ptr @add_225, !"reqntidx", i32 256}
!198 = !{ptr @add_220, !"kernel", i32 1}
!199 = !{ptr @add_220, !"reqntidx", i32 256}
!200 = !{ptr @fusion_729, !"kernel", i32 1}
!201 = !{ptr @fusion_729, !"reqntidx", i32 1024}
!202 = !{ptr @fusion_362, !"kernel", i32 1}
!203 = !{ptr @fusion_362, !"reqntidx", i32 512}
!204 = !{ptr @fusion_48, !"kernel", i32 1}
!205 = !{ptr @fusion_48, !"reqntidx", i32 1024}
!206 = !{ptr @fusion_45, !"kernel", i32 1}
!207 = !{ptr @fusion_45, !"reqntidx", i32 1024}
!208 = !{ptr @fusion_49, !"kernel", i32 1}
!209 = !{ptr @fusion_49, !"reqntidx", i32 256}
!210 = !{ptr @slice_662, !"kernel", i32 1}
!211 = !{ptr @slice_662, !"reqntidx", i32 256}
!212 = !{ptr @slice_665, !"kernel", i32 1}
!213 = !{ptr @slice_665, !"reqntidx", i32 256}
!214 = !{ptr @fusion_644, !"kernel", i32 1}
!215 = !{ptr @fusion_644, !"reqntidx", i32 256}
!216 = !{ptr @fusion_8, !"kernel", i32 1}
!217 = !{ptr @fusion_8, !"reqntidx", i32 768}
!218 = !{ptr @fusion_7, !"kernel", i32 1}
!219 = !{ptr @fusion_7, !"reqntidx", i32 1024}
!220 = !{ptr @fusion_12, !"kernel", i32 1}
!221 = !{ptr @fusion_12, !"reqntidx", i32 1024}
!222 = !{ptr @fusion_11, !"kernel", i32 1}
!223 = !{ptr @fusion_11, !"reqntidx", i32 1024}
!224 = !{ptr @fusion_46, !"kernel", i32 1}
!225 = !{ptr @fusion_46, !"reqntidx", i32 256}
!226 = !{ptr @fusion_357, !"kernel", i32 1}
!227 = !{ptr @fusion_357, !"reqntidx", i32 96}
!228 = !{ptr @fusion_332, !"kernel", i32 1}
!229 = !{ptr @fusion_332, !"reqntidx", i32 1024}
!230 = !{ptr @reduce_3891, !"kernel", i32 1}
!231 = !{ptr @reduce_3891, !"reqntidx", i32 1024}
!232 = !{ptr @fusion_331, !"kernel", i32 1}
!233 = !{ptr @fusion_331, !"reqntidx", i32 10}
!234 = !{ptr @fusion_330, !"kernel", i32 1}
!235 = !{ptr @fusion_330, !"reqntidx", i32 1024}
!236 = !{ptr @fusion_328, !"kernel", i32 1}
!237 = !{ptr @fusion_328, !"reqntidx", i32 1024}
!238 = !{ptr @reduce_3908, !"kernel", i32 1}
!239 = !{ptr @reduce_3908, !"reqntidx", i32 1024}
!240 = !{ptr @fusion_327, !"kernel", i32 1}
!241 = !{ptr @fusion_327, !"reqntidx", i32 511}
!242 = !{ptr @fusion_326, !"kernel", i32 1}
!243 = !{ptr @fusion_326, !"reqntidx", i32 256}
!244 = !{ptr @fusion_359, !"kernel", i32 1}
!245 = !{ptr @fusion_359, !"reqntidx", i32 256}
!246 = !{ptr @fusion_352, !"kernel", i32 1}
!247 = !{ptr @fusion_352, !"reqntidx", i32 256}
!248 = !{ptr @add_151, !"kernel", i32 1}
!249 = !{ptr @add_151, !"reqntidx", i32 128}
!250 = !{ptr @slice_659, !"kernel", i32 1}
!251 = !{ptr @slice_659, !"reqntidx", i32 256}
!252 = !{ptr @slice_664, !"kernel", i32 1}
!253 = !{ptr @slice_664, !"reqntidx", i32 256}
!254 = !{ptr @fusion_1, !"kernel", i32 1}
!255 = !{ptr @fusion_1, !"reqntidx", i32 256}
!256 = !{ptr @fusion_546, !"kernel", i32 1}
!257 = !{ptr @fusion_546, !"reqntidx", i32 256}
!258 = !{ptr @fusion_138, !"kernel", i32 1}
!259 = !{ptr @fusion_138, !"reqntidx", i32 256}
!260 = !{ptr @fusion_657, !"kernel", i32 1}
!261 = !{ptr @fusion_657, !"reqntidx", i32 1024}
!262 = !{ptr @fusion_659, !"kernel", i32 1}
!263 = !{ptr @fusion_659, !"reqntidx", i32 256}
!264 = !{i32 4, !"nvvm-reflect-ftz", i32 0}
!265 = !{i32 0, i32 6}
!266 = !{i32 0, i32 512}
!267 = !{}
!268 = !{i32 0, i32 8}
!269 = !{i32 0, i32 12}
!270 = !{i32 0, i32 1024}
!271 = !{i32 0, i32 256}
!272 = !{i32 0, i32 4}
!273 = !{i32 0, i32 28}
!274 = !{i32 0, i32 36}
!275 = !{i32 0, i32 39}
!276 = !{i32 0, i32 40}
!277 = !{i32 0, i32 44}
!278 = !{i32 0, i32 48}
!279 = !{i32 0, i32 56}
!280 = !{i32 0, i32 66}
!281 = !{i32 0, i32 76}
!282 = !{i32 0, i32 88}
!283 = !{i32 0, i32 90}
!284 = !{i32 0, i32 96}
!285 = !{i32 0, i32 112}
!286 = !{i32 0, i32 120}
!287 = !{i32 0, i32 128}
!288 = !{i32 0, i32 2}
!289 = !{i32 0, i32 32}
!290 = !{i32 0, i32 5}
!291 = !{i32 0, i32 1152}
!292 = !{i32 0, i32 1792}
!293 = !{i32 0, i32 864}
!294 = !{i32 0, i32 2112}
!295 = !{i32 0, i32 2432}
!296 = !{i32 0, i32 2560}
!297 = !{i32 0, i32 2816}
!298 = !{i32 0, i32 2880}
!299 = !{i32 0, i32 3072}
!300 = !{i32 0, i32 3584}
!301 = !{i32 0, i32 16}
!302 = !{i32 0, i32 1536}
!303 = !{i32 0, i32 3840}
!304 = !{i32 0, i32 64}
!305 = !{i32 0, i32 12416}
!306 = !{i32 0, i32 2731}
!307 = !{i32 0, i32 192}
!308 = !{i32 0, i32 2048}
!309 = !{i32 0, i32 11840}
!310 = !{i32 0, i32 34816}
!311 = !{i32 0, i32 336}
!312 = !{i32 0, i32 9}
!313 = !{i32 0, i32 3}
!314 = !{i32 0, i32 132}
!315 = !{i32 0, i32 448}
!316 = !{i32 0, i32 740}
!317 = !{i32 0, i32 4912}
!318 = !{i32 0, i32 768}
!319 = !{i32 0, i32 23}
!320 = !{i32 0, i32 683}
!321 = !{i32 0, i32 10}
!322 = !{i32 0, i32 511}
!323 = !{i32 0, i32 276}
!324 = distinct !{!324, !325}
!325 = !{!"llvm.loop.vectorize.enable", i1 false}
!326 = !{i32 0, i32 11968}
!327 = !{i32 0, i32 7744}
