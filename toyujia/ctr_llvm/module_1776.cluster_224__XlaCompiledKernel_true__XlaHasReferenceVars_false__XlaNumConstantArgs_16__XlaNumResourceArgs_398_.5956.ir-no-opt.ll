target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_38 = constant [64 x i8] c"\00\00\00\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 128
@buffer_for_constant_34 = constant [64 x i8] zeroinitializer, align 128
@0 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@1 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache1 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache2 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache3 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache4 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache5 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@2 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache6 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@3 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache7 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache8 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache9 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache10 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache11 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache12 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache13 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@4 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@5 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache14 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@6 = private unnamed_addr constant [4 x i8] zeroinitializer
@shared_cache15 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache16 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@7 = private unnamed_addr constant [4 x i8] zeroinitializer
@shared_cache17 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache18 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@8 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache19 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@9 = private unnamed_addr constant [4 x i8] zeroinitializer
@10 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache20 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@11 = private unnamed_addr constant [4 x i8] zeroinitializer
@12 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@13 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache21 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache22 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache23 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@14 = private unnamed_addr constant [4 x i8] zeroinitializer
@15 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache24 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@16 = private unnamed_addr constant [4 x i8] zeroinitializer
@17 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache25 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache26 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache27 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache28 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache29 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache30 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache31 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache32 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache33 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache34 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@18 = private unnamed_addr constant [4 x i8] zeroinitializer
@19 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache35 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache36 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@20 = private unnamed_addr constant [4 x i8] zeroinitializer
@21 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache37 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache38 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@22 = private unnamed_addr constant [4 x i8] zeroinitializer
@23 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache39 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache40 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@24 = private unnamed_addr constant [4 x i8] zeroinitializer
@25 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@26 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache41 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache42 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache43 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@27 = private unnamed_addr constant [4 x i8] zeroinitializer
@28 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache44 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache45 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache46 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@29 = private unnamed_addr constant [4 x i8] zeroinitializer
@30 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@31 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache47 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache48 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache49 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache50 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache51 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@32 = private unnamed_addr constant [4 x i8] zeroinitializer
@33 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache52 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@34 = private unnamed_addr constant [4 x i8] zeroinitializer
@35 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache53 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@36 = private unnamed_addr constant [4 x i8] zeroinitializer
@37 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache54 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache55 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache56 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache57 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@38 = private unnamed_addr constant [4 x i8] zeroinitializer
@39 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache58 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@40 = private unnamed_addr constant [4 x i8] zeroinitializer
@41 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache59 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache60 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache61 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache62 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache63 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache64 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@42 = private unnamed_addr constant [4 x i8] zeroinitializer
@43 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache65 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@44 = private unnamed_addr constant [4 x i8] zeroinitializer
@shared_cache66 = private addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache67 = private addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache68 = private addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache69 = private addrspace(3) global [3 x [1 x [1 x float]]] undef
@shared_cache70 = private addrspace(3) global [3 x [1 x [1 x float]]] undef
@45 = private unnamed_addr constant [4 x i8] zeroinitializer
@46 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache71 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache72 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@47 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@48 = private unnamed_addr constant [4 x i8] zeroinitializer
@49 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache73 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache74 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@50 = private unnamed_addr constant [4 x i8] zeroinitializer
@51 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache75 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@52 = private unnamed_addr constant [4 x i8] zeroinitializer
@53 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache76 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache77 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache78 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache79 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache80 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache81 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache82 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache83 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache84 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache85 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache86 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache87 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@54 = private unnamed_addr constant [4 x i8] zeroinitializer
@55 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@56 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache88 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache89 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@57 = private unnamed_addr constant [4 x i8] zeroinitializer
@58 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache90 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache91 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef

define void @fusion_650(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(4) %arg12, ptr noalias align 128 dereferenceable(4) %arg13, ptr noalias align 128 dereferenceable(4) %arg14, ptr noalias align 128 dereferenceable(4) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 128 dereferenceable(4) %arg17) {
entry:
  %return_buffer671 = alloca float, align 4
  %result_from_other_lane669 = alloca float, align 4
  %return_buffer668 = alloca float, align 4
  %result_from_other_lane666 = alloca float, align 4
  %return_buffer665 = alloca float, align 4
  %result_from_other_lane663 = alloca float, align 4
  %return_buffer662 = alloca float, align 4
  %result_from_other_lane660 = alloca float, align 4
  %return_buffer659 = alloca float, align 4
  %result_from_other_lane657 = alloca float, align 4
  %initial_value_addr656 = alloca float, align 4
  %return_buffer651 = alloca float, align 4
  %result_from_other_lane649 = alloca float, align 4
  %return_buffer648 = alloca float, align 4
  %result_from_other_lane646 = alloca float, align 4
  %return_buffer645 = alloca float, align 4
  %result_from_other_lane643 = alloca float, align 4
  %return_buffer642 = alloca float, align 4
  %result_from_other_lane640 = alloca float, align 4
  %return_buffer639 = alloca float, align 4
  %result_from_other_lane637 = alloca float, align 4
  %return_buffer635 = alloca float, align 4
  %return_buffer621 = alloca float, align 4
  %tile_loop.invar_address605 = alloca i32, align 4
  %return_buffer601 = alloca float, align 4
  %return_buffer589 = alloca float, align 4
  %tile_loop.invar_address580 = alloca i32, align 4
  %y_in_tile.invar_address571 = alloca i32, align 4
  %partial_reduction_result557 = alloca float, align 4
  %reduction_input_address556 = alloca float, align 4
  %return_buffer552 = alloca float, align 4
  %result_from_other_lane550 = alloca float, align 4
  %return_buffer549 = alloca float, align 4
  %result_from_other_lane547 = alloca float, align 4
  %return_buffer546 = alloca float, align 4
  %result_from_other_lane544 = alloca float, align 4
  %return_buffer543 = alloca float, align 4
  %result_from_other_lane541 = alloca float, align 4
  %return_buffer540 = alloca float, align 4
  %result_from_other_lane538 = alloca float, align 4
  %initial_value_addr537 = alloca float, align 4
  %return_buffer532 = alloca float, align 4
  %result_from_other_lane530 = alloca float, align 4
  %return_buffer529 = alloca float, align 4
  %result_from_other_lane527 = alloca float, align 4
  %return_buffer526 = alloca float, align 4
  %result_from_other_lane524 = alloca float, align 4
  %return_buffer523 = alloca float, align 4
  %result_from_other_lane521 = alloca float, align 4
  %return_buffer520 = alloca float, align 4
  %result_from_other_lane518 = alloca float, align 4
  %return_buffer516 = alloca float, align 4
  %return_buffer502 = alloca float, align 4
  %tile_loop.invar_address486 = alloca i32, align 4
  %return_buffer482 = alloca float, align 4
  %return_buffer470 = alloca float, align 4
  %tile_loop.invar_address461 = alloca i32, align 4
  %y_in_tile.invar_address452 = alloca i32, align 4
  %partial_reduction_result438 = alloca float, align 4
  %reduction_input_address437 = alloca float, align 4
  %return_buffer433 = alloca float, align 4
  %result_from_other_lane431 = alloca float, align 4
  %return_buffer430 = alloca float, align 4
  %result_from_other_lane428 = alloca float, align 4
  %return_buffer427 = alloca float, align 4
  %result_from_other_lane425 = alloca float, align 4
  %return_buffer424 = alloca float, align 4
  %result_from_other_lane422 = alloca float, align 4
  %return_buffer421 = alloca float, align 4
  %result_from_other_lane419 = alloca float, align 4
  %initial_value_addr418 = alloca float, align 4
  %return_buffer413 = alloca float, align 4
  %result_from_other_lane411 = alloca float, align 4
  %return_buffer410 = alloca float, align 4
  %result_from_other_lane408 = alloca float, align 4
  %return_buffer407 = alloca float, align 4
  %result_from_other_lane405 = alloca float, align 4
  %return_buffer404 = alloca float, align 4
  %result_from_other_lane402 = alloca float, align 4
  %return_buffer401 = alloca float, align 4
  %result_from_other_lane399 = alloca float, align 4
  %return_buffer397 = alloca float, align 4
  %return_buffer383 = alloca float, align 4
  %tile_loop.invar_address367 = alloca i32, align 4
  %return_buffer363 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %tile_loop.invar_address342 = alloca i32, align 4
  %y_in_tile.invar_address333 = alloca i32, align 4
  %partial_reduction_result319 = alloca float, align 4
  %reduction_input_address318 = alloca float, align 4
  %return_buffer314 = alloca float, align 4
  %result_from_other_lane312 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %result_from_other_lane309 = alloca float, align 4
  %return_buffer308 = alloca float, align 4
  %result_from_other_lane306 = alloca float, align 4
  %return_buffer305 = alloca float, align 4
  %result_from_other_lane303 = alloca float, align 4
  %return_buffer302 = alloca float, align 4
  %result_from_other_lane300 = alloca float, align 4
  %initial_value_addr299 = alloca float, align 4
  %return_buffer294 = alloca float, align 4
  %result_from_other_lane292 = alloca float, align 4
  %return_buffer291 = alloca float, align 4
  %result_from_other_lane289 = alloca float, align 4
  %return_buffer288 = alloca float, align 4
  %result_from_other_lane286 = alloca float, align 4
  %return_buffer285 = alloca float, align 4
  %result_from_other_lane283 = alloca float, align 4
  %return_buffer282 = alloca float, align 4
  %result_from_other_lane280 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %return_buffer264 = alloca float, align 4
  %tile_loop.invar_address248 = alloca i32, align 4
  %return_buffer244 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address223 = alloca i32, align 4
  %y_in_tile.invar_address214 = alloca i32, align 4
  %partial_reduction_result200 = alloca float, align 4
  %reduction_input_address199 = alloca float, align 4
  %return_buffer195 = alloca float, align 4
  %result_from_other_lane193 = alloca float, align 4
  %return_buffer192 = alloca float, align 4
  %result_from_other_lane190 = alloca float, align 4
  %return_buffer189 = alloca float, align 4
  %result_from_other_lane187 = alloca float, align 4
  %return_buffer186 = alloca float, align 4
  %result_from_other_lane184 = alloca float, align 4
  %return_buffer183 = alloca float, align 4
  %result_from_other_lane181 = alloca float, align 4
  %initial_value_addr180 = alloca float, align 4
  %return_buffer175 = alloca float, align 4
  %result_from_other_lane173 = alloca float, align 4
  %return_buffer172 = alloca float, align 4
  %result_from_other_lane170 = alloca float, align 4
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer145 = alloca float, align 4
  %tile_loop.invar_address129 = alloca i32, align 4
  %return_buffer125 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %y_in_tile.invar_address95 = alloca i32, align 4
  %partial_reduction_result81 = alloca float, align 4
  %reduction_input_address80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %tile_loop.invar_address22 = alloca i32, align 4
  %return_buffer18 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !264
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after179, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %inter_warp_reduce-after298, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %inter_warp_reduce-after417, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %inter_warp_reduce-after536, %reduce-group-3-after
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %reduce-group-5-true, label %reduce-group-5-after

reduce-group-5-after:                             ; preds = %inter_warp_reduce-after655, %reduce-group-4-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_71_constant_19 = load float, ptr @0, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_71_constant_19, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %10 = urem i32 %8, 512
  %11 = udiv i32 %8, 512
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 1
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 512
  %thread_id.y = udiv i32 %10, 512
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 1
  %18 = udiv i32 %13, 1
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 1
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 1, i32 1
  %22 = icmp eq i32 %17, 0
  %tile_bound1 = select i1 %22, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 1
  %tile_origin.2 = mul i32 %17, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = icmp eq i32 8192, %tile_bound1
  br i1 %25, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit19, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !267

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result51 = load float, ptr %current_output, align 4
  %26 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %26, ptr %result_from_other_lane, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer52)
  %27 = load float, ptr %return_buffer52, align 4
  store float %27, ptr %current_output, align 4
  %partial_reduction_result54 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %28, ptr %result_from_other_lane53, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane53, ptr %return_buffer55)
  %29 = load float, ptr %return_buffer55, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result57 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %30, ptr %result_from_other_lane56, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane56, ptr %return_buffer58)
  %31 = load float, ptr %return_buffer58, align 4
  store float %31, ptr %current_output, align 4
  %partial_reduction_result60 = load float, ptr %current_output, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %32, ptr %result_from_other_lane59, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane59, ptr %return_buffer61)
  %33 = load float, ptr %return_buffer61, align 4
  store float %33, ptr %current_output, align 4
  %partial_reduction_result63 = load float, ptr %current_output, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %34, ptr %result_from_other_lane62, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane62, ptr %return_buffer64)
  %35 = load float, ptr %return_buffer64, align 4
  store float %35, ptr %current_output, align 4
  %36 = udiv i32 %thread_id.x, 32
  %37 = icmp eq i32 %lane_id, 0
  br i1 %37, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %38 = icmp eq i32 %36, 0
  br i1 %38, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %39 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %40 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %40, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %41 = icmp eq i32 %tile_loop.indvar, 0
  %42 = mul i32 %tile_loop.indvar, 1024
  %43 = add i32 %42, 0
  %x_loc = add i32 %43, %39
  %44 = add i32 %tile_origin.1, %y_in_tile.indvar
  %45 = add i32 %tile_origin.2, %x_loc
  %46 = mul nuw nsw i32 %45, 1
  %47 = add nuw nsw i32 0, %46
  %48 = mul nuw nsw i32 %44, 8192
  %49 = add nuw nsw i32 %47, %48
  %50 = mul nuw nsw i32 %tile_origin.0, 8192
  %51 = add nuw nsw i32 %49, %50
  %52 = udiv i32 %51, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %51
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %51
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.13 = fmul float %Arg_1.23, %Arg_0.14
  %region_0_71_constant_14 = load float, ptr @1, align 4
  %Arg_0.15 = getelementptr inbounds float, ptr %arg0, i32 %51
  %Arg_0.16 = load float, ptr %Arg_0.15, align 4, !invariant.load !269
  %subtract.16 = fsub float %region_0_71_constant_14, %Arg_0.16
  %multiply.17 = fmul float %multiply.13, %subtract.16
  store float %multiply.17, ptr %reduction_input_address, align 4
  %53 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %53, ptr %reduction_input_address, ptr %return_buffer)
  %54 = load float, ptr %return_buffer, align 4
  store float %54, ptr %53, align 4
  %55 = mul i32 %tile_loop.indvar, 1024
  %56 = add i32 %55, 1
  %x_loc7 = add i32 %56, %39
  %57 = add i32 %tile_origin.1, %y_in_tile.indvar
  %58 = add i32 %tile_origin.2, %x_loc7
  %59 = mul nuw nsw i32 %58, 1
  %60 = add nuw nsw i32 0, %59
  %61 = mul nuw nsw i32 %57, 8192
  %62 = add nuw nsw i32 %60, %61
  %63 = mul nuw nsw i32 %tile_origin.0, 8192
  %64 = add nuw nsw i32 %62, %63
  %65 = udiv i32 %64, 1
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %64
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !269
  %Arg_0.110 = getelementptr inbounds float, ptr %arg0, i32 %64
  %Arg_0.111 = load float, ptr %Arg_0.110, align 4, !invariant.load !269
  %multiply.1312 = fmul float %Arg_1.29, %Arg_0.111
  %region_0_71_constant_1413 = load float, ptr @1, align 4
  %Arg_0.114 = getelementptr inbounds float, ptr %arg0, i32 %64
  %Arg_0.115 = load float, ptr %Arg_0.114, align 4, !invariant.load !269
  %subtract.1616 = fsub float %region_0_71_constant_1413, %Arg_0.115
  %multiply.1717 = fmul float %multiply.1312, %subtract.1616
  store float %multiply.1717, ptr %reduction_input_address, align 4
  %66 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %66, ptr %reduction_input_address, ptr %return_buffer18)
  %67 = load float, ptr %return_buffer18, align 4
  store float %67, ptr %66, align 4
  br label %tile_loop.loop_header, !llvm.loop !270

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %68 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address22, align 4
  br label %tile_loop.loop_header20

tile_loop.loop_header20:                          ; preds = %x_in_tile-after39, %is_full_tile-false
  %tile_loop.indvar23 = load i32, ptr %tile_loop.invar_address22, align 4
  %69 = icmp uge i32 %tile_loop.indvar23, 8
  br i1 %69, label %tile_loop.loop_exit19, label %tile_loop.loop_body21

tile_loop.loop_body21:                            ; preds = %tile_loop.loop_header20
  %invar.inc24 = add nuw nsw i32 %tile_loop.indvar23, 1
  store i32 %invar.inc24, ptr %tile_loop.invar_address22, align 4
  %70 = icmp eq i32 %tile_loop.indvar23, 0
  %71 = mul i32 %tile_loop.indvar23, 1024
  %72 = add i32 %71, 0
  %x_loc25 = add i32 %72, %68
  %73 = add i32 %tile_origin.1, %y_in_tile.indvar
  %74 = add i32 %tile_origin.2, %x_loc25
  %75 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %75, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body21
  %76 = mul i32 %tile_loop.indvar23, 1024
  %77 = add i32 %76, 1
  %x_loc37 = add i32 %77, %68
  %78 = add i32 %tile_origin.1, %y_in_tile.indvar
  %79 = add i32 %tile_origin.2, %x_loc37
  %80 = icmp ult i32 %x_loc37, %tile_bound1
  br i1 %80, label %x_in_tile-true38, label %x_in_tile-after39

x_in_tile-after39:                                ; preds = %x_in_tile-true38, %x_in_tile-after
  br label %tile_loop.loop_header20, !llvm.loop !272

tile_loop.loop_exit19:                            ; preds = %tile_loop.loop_header20
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body21
  %81 = mul nuw nsw i32 %74, 1
  %82 = add nuw nsw i32 0, %81
  %83 = mul nuw nsw i32 %73, 8192
  %84 = add nuw nsw i32 %82, %83
  %85 = mul nuw nsw i32 %tile_origin.0, 8192
  %86 = add nuw nsw i32 %84, %85
  %87 = udiv i32 %86, 1
  %Arg_1.226 = getelementptr inbounds float, ptr %arg1, i32 %86
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !269
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %86
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !269
  %multiply.1330 = fmul float %Arg_1.227, %Arg_0.129
  %region_0_71_constant_1431 = load float, ptr @1, align 4
  %Arg_0.132 = getelementptr inbounds float, ptr %arg0, i32 %86
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !269
  %subtract.1634 = fsub float %region_0_71_constant_1431, %Arg_0.133
  %multiply.1735 = fmul float %multiply.1330, %subtract.1634
  store float %multiply.1735, ptr %reduction_input_address, align 4
  %88 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %88, ptr %reduction_input_address, ptr %return_buffer36)
  %89 = load float, ptr %return_buffer36, align 4
  store float %89, ptr %88, align 4
  br label %x_in_tile-after

x_in_tile-true38:                                 ; preds = %x_in_tile-after
  %90 = mul nuw nsw i32 %79, 1
  %91 = add nuw nsw i32 0, %90
  %92 = mul nuw nsw i32 %78, 8192
  %93 = add nuw nsw i32 %91, %92
  %94 = mul nuw nsw i32 %tile_origin.0, 8192
  %95 = add nuw nsw i32 %93, %94
  %96 = udiv i32 %95, 1
  %Arg_1.240 = getelementptr inbounds float, ptr %arg1, i32 %95
  %Arg_1.241 = load float, ptr %Arg_1.240, align 4, !invariant.load !269
  %Arg_0.142 = getelementptr inbounds float, ptr %arg0, i32 %95
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !269
  %multiply.1344 = fmul float %Arg_1.241, %Arg_0.143
  %region_0_71_constant_1445 = load float, ptr @1, align 4
  %Arg_0.146 = getelementptr inbounds float, ptr %arg0, i32 %95
  %Arg_0.147 = load float, ptr %Arg_0.146, align 4, !invariant.load !269
  %subtract.1648 = fsub float %region_0_71_constant_1445, %Arg_0.147
  %multiply.1749 = fmul float %multiply.1344, %subtract.1648
  store float %multiply.1749, ptr %reduction_input_address, align 4
  %97 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %97, ptr %reduction_input_address, ptr %return_buffer50)
  %98 = load float, ptr %return_buffer50, align 4
  store float %98, ptr %97, align 4
  br label %x_in_tile-after39

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %99 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i32 0, i32 %11, i32 0, i32 %36
  %100 = addrspacecast ptr addrspace(3) %99 to ptr
  %101 = load float, ptr %current_output, align 4
  store float %101, ptr %100, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %102 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i32 0, i32 %11, i32 0, i32 %lane_id
  %103 = addrspacecast ptr addrspace(3) %102 to ptr
  store float %region_0_71_constant_19, ptr %initial_value_addr, align 4
  %104 = icmp ult i32 %thread_id.x, 16
  %105 = select i1 %104, ptr %103, ptr %initial_value_addr
  %partial_reduction_result66 = load float, ptr %105, align 4
  %106 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %106, ptr %result_from_other_lane65, align 4
  call void @region_1_20(ptr %105, ptr %result_from_other_lane65, ptr %return_buffer67)
  %107 = load float, ptr %return_buffer67, align 4
  store float %107, ptr %105, align 4
  %partial_reduction_result69 = load float, ptr %105, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %108, ptr %result_from_other_lane68, align 4
  call void @region_1_20(ptr %105, ptr %result_from_other_lane68, ptr %return_buffer70)
  %109 = load float, ptr %return_buffer70, align 4
  store float %109, ptr %105, align 4
  %partial_reduction_result72 = load float, ptr %105, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %110, ptr %result_from_other_lane71, align 4
  call void @region_1_20(ptr %105, ptr %result_from_other_lane71, ptr %return_buffer73)
  %111 = load float, ptr %return_buffer73, align 4
  store float %111, ptr %105, align 4
  %partial_reduction_result75 = load float, ptr %105, align 4
  %112 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %112, ptr %result_from_other_lane74, align 4
  call void @region_1_20(ptr %105, ptr %result_from_other_lane74, ptr %return_buffer76)
  %113 = load float, ptr %return_buffer76, align 4
  store float %113, ptr %105, align 4
  %partial_reduction_result78 = load float, ptr %105, align 4
  %114 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %114, ptr %result_from_other_lane77, align 4
  call void @region_1_20(ptr %105, ptr %result_from_other_lane77, ptr %return_buffer79)
  %115 = load float, ptr %return_buffer79, align 4
  store float %115, ptr %105, align 4
  %116 = icmp eq i32 %thread_id.x, 0
  br i1 %116, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %117 = mul i32 %thread_id.x, 2
  %118 = add i32 %tile_origin.1, %thread_id.y
  %119 = add i32 %tile_origin.2, %117
  %120 = add i32 %119, 0
  %output = load float, ptr %105, align 4
  store float %output, ptr %arg12, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_71_constant_1982 = load float, ptr @0, align 4
  %121 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  store float %region_0_71_constant_1982, ptr %121, align 4
  %122 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %123 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %124 = urem i32 %122, 512
  %125 = udiv i32 %122, 512
  %126 = mul i32 %123, 1
  %127 = add i32 %126, %125
  %128 = icmp ult i32 %127, 1
  br i1 %128, label %129, label %early_return83

129:                                              ; preds = %reduce-group-1-true
  %thread_id.x84 = urem i32 %124, 512
  %thread_id.y85 = udiv i32 %124, 512
  %lane_id86 = urem i32 %124, 32
  %130 = udiv i32 %127, 1
  %131 = urem i32 %130, 1
  %132 = udiv i32 %127, 1
  %133 = urem i32 %132, 1
  %134 = udiv i32 %127, 1
  %135 = icmp eq i32 %133, 0
  %tile_bound87 = select i1 %135, i32 1, i32 1
  %136 = icmp eq i32 %131, 0
  %tile_bound88 = select i1 %136, i32 8192, i32 8192
  %tile_origin.089 = mul i32 %134, 1
  %tile_origin.190 = mul i32 %133, 1
  %tile_origin.291 = mul i32 %131, 8192
  store i32 %thread_id.y85, ptr %y_in_tile.invar_address95, align 4
  br label %y_in_tile.loop_header93

y_in_tile.loop_header93:                          ; preds = %is_full_tile-after100, %129
  %y_in_tile.indvar96 = load i32, ptr %y_in_tile.invar_address95, align 4
  %137 = icmp uge i32 %y_in_tile.indvar96, %tile_bound87
  br i1 %137, label %y_in_tile.loop_exit92, label %y_in_tile.loop_body94

y_in_tile.loop_body94:                            ; preds = %y_in_tile.loop_header93
  %invar.inc97 = add nuw nsw i32 %y_in_tile.indvar96, 1
  store i32 %invar.inc97, ptr %y_in_tile.invar_address95, align 4
  %138 = icmp eq i32 %y_in_tile.indvar96, %thread_id.y85
  %139 = icmp eq i32 8192, %tile_bound88
  br i1 %139, label %is_full_tile-true98, label %is_full_tile-false99

is_full_tile-after100:                            ; preds = %tile_loop.loop_exit126, %tile_loop.loop_exit101
  br label %y_in_tile.loop_header93, !llvm.loop !273

y_in_tile.loop_exit92:                            ; preds = %y_in_tile.loop_header93
  %current_output160 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  %partial_reduction_result162 = load float, ptr %current_output160, align 4
  %140 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 16, i32 31)
  store float %140, ptr %result_from_other_lane161, align 4
  call void @region_2_29(ptr %current_output160, ptr %result_from_other_lane161, ptr %return_buffer163)
  %141 = load float, ptr %return_buffer163, align 4
  store float %141, ptr %current_output160, align 4
  %partial_reduction_result165 = load float, ptr %current_output160, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 8, i32 31)
  store float %142, ptr %result_from_other_lane164, align 4
  call void @region_2_29(ptr %current_output160, ptr %result_from_other_lane164, ptr %return_buffer166)
  %143 = load float, ptr %return_buffer166, align 4
  store float %143, ptr %current_output160, align 4
  %partial_reduction_result168 = load float, ptr %current_output160, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 4, i32 31)
  store float %144, ptr %result_from_other_lane167, align 4
  call void @region_2_29(ptr %current_output160, ptr %result_from_other_lane167, ptr %return_buffer169)
  %145 = load float, ptr %return_buffer169, align 4
  store float %145, ptr %current_output160, align 4
  %partial_reduction_result171 = load float, ptr %current_output160, align 4
  %146 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result171, i32 2, i32 31)
  store float %146, ptr %result_from_other_lane170, align 4
  call void @region_2_29(ptr %current_output160, ptr %result_from_other_lane170, ptr %return_buffer172)
  %147 = load float, ptr %return_buffer172, align 4
  store float %147, ptr %current_output160, align 4
  %partial_reduction_result174 = load float, ptr %current_output160, align 4
  %148 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result174, i32 1, i32 31)
  store float %148, ptr %result_from_other_lane173, align 4
  call void @region_2_29(ptr %current_output160, ptr %result_from_other_lane173, ptr %return_buffer175)
  %149 = load float, ptr %return_buffer175, align 4
  store float %149, ptr %current_output160, align 4
  %150 = udiv i32 %thread_id.x84, 32
  %151 = icmp eq i32 %lane_id86, 0
  br i1 %151, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %y_in_tile.loop_exit92
  call void @llvm.nvvm.barrier0()
  %152 = icmp eq i32 %150, 0
  br i1 %152, label %inter_warp_reduce-true178, label %inter_warp_reduce-after179

inter_warp_reduce-after179:                       ; preds = %reduction_write_output-after197, %intra_warp_reduce_write-after177
  br label %reduce-group-1-after

early_return83:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true98:                              ; preds = %y_in_tile.loop_body94
  %153 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %tile_loop.loop_body103, %is_full_tile-true98
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %154 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %154, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %155 = icmp eq i32 %tile_loop.indvar105, 0
  %156 = mul i32 %tile_loop.indvar105, 1024
  %157 = add i32 %156, 0
  %x_loc107 = add i32 %157, %153
  %158 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %159 = add i32 %tile_origin.291, %x_loc107
  %160 = mul nuw nsw i32 %159, 1
  %161 = add nuw nsw i32 0, %160
  %162 = mul nuw nsw i32 %158, 8192
  %163 = add nuw nsw i32 %161, %162
  %164 = mul nuw nsw i32 %tile_origin.089, 8192
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 1
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %165
  %Arg_3.4108 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %165
  %Arg_2.3109 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %multiply.25 = fmul float %Arg_3.4108, %Arg_2.3109
  %region_0_71_constant_14110 = load float, ptr @1, align 4
  %Arg_2.3111 = getelementptr inbounds float, ptr %arg2, i32 %165
  %Arg_2.3112 = load float, ptr %Arg_2.3111, align 4, !invariant.load !269
  %subtract.26 = fsub float %region_0_71_constant_14110, %Arg_2.3112
  %multiply.27 = fmul float %multiply.25, %subtract.26
  store float %multiply.27, ptr %reduction_input_address80, align 4
  %167 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_29(ptr %167, ptr %reduction_input_address80, ptr %return_buffer113)
  %168 = load float, ptr %return_buffer113, align 4
  store float %168, ptr %167, align 4
  %169 = mul i32 %tile_loop.indvar105, 1024
  %170 = add i32 %169, 1
  %x_loc114 = add i32 %170, %153
  %171 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %172 = add i32 %tile_origin.291, %x_loc114
  %173 = mul nuw nsw i32 %172, 1
  %174 = add nuw nsw i32 0, %173
  %175 = mul nuw nsw i32 %171, 8192
  %176 = add nuw nsw i32 %174, %175
  %177 = mul nuw nsw i32 %tile_origin.089, 8192
  %178 = add nuw nsw i32 %176, %177
  %179 = udiv i32 %178, 1
  %Arg_3.4115 = getelementptr inbounds float, ptr %arg3, i32 %178
  %Arg_3.4116 = load float, ptr %Arg_3.4115, align 4, !invariant.load !269
  %Arg_2.3117 = getelementptr inbounds float, ptr %arg2, i32 %178
  %Arg_2.3118 = load float, ptr %Arg_2.3117, align 4, !invariant.load !269
  %multiply.25119 = fmul float %Arg_3.4116, %Arg_2.3118
  %region_0_71_constant_14120 = load float, ptr @1, align 4
  %Arg_2.3121 = getelementptr inbounds float, ptr %arg2, i32 %178
  %Arg_2.3122 = load float, ptr %Arg_2.3121, align 4, !invariant.load !269
  %subtract.26123 = fsub float %region_0_71_constant_14120, %Arg_2.3122
  %multiply.27124 = fmul float %multiply.25119, %subtract.26123
  store float %multiply.27124, ptr %reduction_input_address80, align 4
  %180 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_29(ptr %180, ptr %reduction_input_address80, ptr %return_buffer125)
  %181 = load float, ptr %return_buffer125, align 4
  store float %181, ptr %180, align 4
  br label %tile_loop.loop_header102, !llvm.loop !274

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after100

is_full_tile-false99:                             ; preds = %y_in_tile.loop_body94
  %182 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address129, align 4
  br label %tile_loop.loop_header127

tile_loop.loop_header127:                         ; preds = %x_in_tile-after148, %is_full_tile-false99
  %tile_loop.indvar130 = load i32, ptr %tile_loop.invar_address129, align 4
  %183 = icmp uge i32 %tile_loop.indvar130, 8
  br i1 %183, label %tile_loop.loop_exit126, label %tile_loop.loop_body128

tile_loop.loop_body128:                           ; preds = %tile_loop.loop_header127
  %invar.inc131 = add nuw nsw i32 %tile_loop.indvar130, 1
  store i32 %invar.inc131, ptr %tile_loop.invar_address129, align 4
  %184 = icmp eq i32 %tile_loop.indvar130, 0
  %185 = mul i32 %tile_loop.indvar130, 1024
  %186 = add i32 %185, 0
  %x_loc132 = add i32 %186, %182
  %187 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %188 = add i32 %tile_origin.291, %x_loc132
  %189 = icmp ult i32 %x_loc132, %tile_bound88
  br i1 %189, label %x_in_tile-true133, label %x_in_tile-after134

x_in_tile-after134:                               ; preds = %x_in_tile-true133, %tile_loop.loop_body128
  %190 = mul i32 %tile_loop.indvar130, 1024
  %191 = add i32 %190, 1
  %x_loc146 = add i32 %191, %182
  %192 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %193 = add i32 %tile_origin.291, %x_loc146
  %194 = icmp ult i32 %x_loc146, %tile_bound88
  br i1 %194, label %x_in_tile-true147, label %x_in_tile-after148

x_in_tile-after148:                               ; preds = %x_in_tile-true147, %x_in_tile-after134
  br label %tile_loop.loop_header127, !llvm.loop !275

tile_loop.loop_exit126:                           ; preds = %tile_loop.loop_header127
  br label %is_full_tile-after100

x_in_tile-true133:                                ; preds = %tile_loop.loop_body128
  %195 = mul nuw nsw i32 %188, 1
  %196 = add nuw nsw i32 0, %195
  %197 = mul nuw nsw i32 %187, 8192
  %198 = add nuw nsw i32 %196, %197
  %199 = mul nuw nsw i32 %tile_origin.089, 8192
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 1
  %Arg_3.4135 = getelementptr inbounds float, ptr %arg3, i32 %200
  %Arg_3.4136 = load float, ptr %Arg_3.4135, align 4, !invariant.load !269
  %Arg_2.3137 = getelementptr inbounds float, ptr %arg2, i32 %200
  %Arg_2.3138 = load float, ptr %Arg_2.3137, align 4, !invariant.load !269
  %multiply.25139 = fmul float %Arg_3.4136, %Arg_2.3138
  %region_0_71_constant_14140 = load float, ptr @1, align 4
  %Arg_2.3141 = getelementptr inbounds float, ptr %arg2, i32 %200
  %Arg_2.3142 = load float, ptr %Arg_2.3141, align 4, !invariant.load !269
  %subtract.26143 = fsub float %region_0_71_constant_14140, %Arg_2.3142
  %multiply.27144 = fmul float %multiply.25139, %subtract.26143
  store float %multiply.27144, ptr %reduction_input_address80, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_29(ptr %202, ptr %reduction_input_address80, ptr %return_buffer145)
  %203 = load float, ptr %return_buffer145, align 4
  store float %203, ptr %202, align 4
  br label %x_in_tile-after134

x_in_tile-true147:                                ; preds = %x_in_tile-after134
  %204 = mul nuw nsw i32 %193, 1
  %205 = add nuw nsw i32 0, %204
  %206 = mul nuw nsw i32 %192, 8192
  %207 = add nuw nsw i32 %205, %206
  %208 = mul nuw nsw i32 %tile_origin.089, 8192
  %209 = add nuw nsw i32 %207, %208
  %210 = udiv i32 %209, 1
  %Arg_3.4149 = getelementptr inbounds float, ptr %arg3, i32 %209
  %Arg_3.4150 = load float, ptr %Arg_3.4149, align 4, !invariant.load !269
  %Arg_2.3151 = getelementptr inbounds float, ptr %arg2, i32 %209
  %Arg_2.3152 = load float, ptr %Arg_2.3151, align 4, !invariant.load !269
  %multiply.25153 = fmul float %Arg_3.4150, %Arg_2.3152
  %region_0_71_constant_14154 = load float, ptr @1, align 4
  %Arg_2.3155 = getelementptr inbounds float, ptr %arg2, i32 %209
  %Arg_2.3156 = load float, ptr %Arg_2.3155, align 4, !invariant.load !269
  %subtract.26157 = fsub float %region_0_71_constant_14154, %Arg_2.3156
  %multiply.27158 = fmul float %multiply.25153, %subtract.26157
  store float %multiply.27158, ptr %reduction_input_address80, align 4
  %211 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_29(ptr %211, ptr %reduction_input_address80, ptr %return_buffer159)
  %212 = load float, ptr %return_buffer159, align 4
  store float %212, ptr %211, align 4
  br label %x_in_tile-after148

intra_warp_reduce_write-true176:                  ; preds = %y_in_tile.loop_exit92
  %213 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i32 0, i32 %125, i32 0, i32 %150
  %214 = addrspacecast ptr addrspace(3) %213 to ptr
  %215 = load float, ptr %current_output160, align 4
  store float %215, ptr %214, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %216 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i32 0, i32 %125, i32 0, i32 %lane_id86
  %217 = addrspacecast ptr addrspace(3) %216 to ptr
  store float %region_0_71_constant_1982, ptr %initial_value_addr180, align 4
  %218 = icmp ult i32 %thread_id.x84, 16
  %219 = select i1 %218, ptr %217, ptr %initial_value_addr180
  %partial_reduction_result182 = load float, ptr %219, align 4
  %220 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  store float %220, ptr %result_from_other_lane181, align 4
  call void @region_2_29(ptr %219, ptr %result_from_other_lane181, ptr %return_buffer183)
  %221 = load float, ptr %return_buffer183, align 4
  store float %221, ptr %219, align 4
  %partial_reduction_result185 = load float, ptr %219, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result185, i32 8, i32 31)
  store float %222, ptr %result_from_other_lane184, align 4
  call void @region_2_29(ptr %219, ptr %result_from_other_lane184, ptr %return_buffer186)
  %223 = load float, ptr %return_buffer186, align 4
  store float %223, ptr %219, align 4
  %partial_reduction_result188 = load float, ptr %219, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result188, i32 4, i32 31)
  store float %224, ptr %result_from_other_lane187, align 4
  call void @region_2_29(ptr %219, ptr %result_from_other_lane187, ptr %return_buffer189)
  %225 = load float, ptr %return_buffer189, align 4
  store float %225, ptr %219, align 4
  %partial_reduction_result191 = load float, ptr %219, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result191, i32 2, i32 31)
  store float %226, ptr %result_from_other_lane190, align 4
  call void @region_2_29(ptr %219, ptr %result_from_other_lane190, ptr %return_buffer192)
  %227 = load float, ptr %return_buffer192, align 4
  store float %227, ptr %219, align 4
  %partial_reduction_result194 = load float, ptr %219, align 4
  %228 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result194, i32 1, i32 31)
  store float %228, ptr %result_from_other_lane193, align 4
  call void @region_2_29(ptr %219, ptr %result_from_other_lane193, ptr %return_buffer195)
  %229 = load float, ptr %return_buffer195, align 4
  store float %229, ptr %219, align 4
  %230 = icmp eq i32 %thread_id.x84, 0
  br i1 %230, label %reduction_write_output-true196, label %reduction_write_output-after197

reduction_write_output-after197:                  ; preds = %reduction_write_output-true196, %inter_warp_reduce-true178
  br label %inter_warp_reduce-after179

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178
  %231 = mul i32 %thread_id.x84, 2
  %232 = add i32 %tile_origin.190, %thread_id.y85
  %233 = add i32 %tile_origin.291, %231
  %234 = add i32 %233, 0
  %output198 = load float, ptr %219, align 4
  store float %output198, ptr %arg13, align 4
  br label %reduction_write_output-after197

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %region_0_71_constant_19201 = load float, ptr @0, align 4
  %235 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  store float %region_0_71_constant_19201, ptr %235, align 4
  %236 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %237 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %238 = urem i32 %236, 512
  %239 = udiv i32 %236, 512
  %240 = mul i32 %237, 1
  %241 = add i32 %240, %239
  %242 = icmp ult i32 %241, 1
  br i1 %242, label %243, label %early_return202

243:                                              ; preds = %reduce-group-2-true
  %thread_id.x203 = urem i32 %238, 512
  %thread_id.y204 = udiv i32 %238, 512
  %lane_id205 = urem i32 %238, 32
  %244 = udiv i32 %241, 1
  %245 = urem i32 %244, 1
  %246 = udiv i32 %241, 1
  %247 = urem i32 %246, 1
  %248 = udiv i32 %241, 1
  %249 = icmp eq i32 %247, 0
  %tile_bound206 = select i1 %249, i32 1, i32 1
  %250 = icmp eq i32 %245, 0
  %tile_bound207 = select i1 %250, i32 8192, i32 8192
  %tile_origin.0208 = mul i32 %248, 1
  %tile_origin.1209 = mul i32 %247, 1
  %tile_origin.2210 = mul i32 %245, 8192
  store i32 %thread_id.y204, ptr %y_in_tile.invar_address214, align 4
  br label %y_in_tile.loop_header212

y_in_tile.loop_header212:                         ; preds = %is_full_tile-after219, %243
  %y_in_tile.indvar215 = load i32, ptr %y_in_tile.invar_address214, align 4
  %251 = icmp uge i32 %y_in_tile.indvar215, %tile_bound206
  br i1 %251, label %y_in_tile.loop_exit211, label %y_in_tile.loop_body213

y_in_tile.loop_body213:                           ; preds = %y_in_tile.loop_header212
  %invar.inc216 = add nuw nsw i32 %y_in_tile.indvar215, 1
  store i32 %invar.inc216, ptr %y_in_tile.invar_address214, align 4
  %252 = icmp eq i32 %y_in_tile.indvar215, %thread_id.y204
  %253 = icmp eq i32 8192, %tile_bound207
  br i1 %253, label %is_full_tile-true217, label %is_full_tile-false218

is_full_tile-after219:                            ; preds = %tile_loop.loop_exit245, %tile_loop.loop_exit220
  br label %y_in_tile.loop_header212, !llvm.loop !276

y_in_tile.loop_exit211:                           ; preds = %y_in_tile.loop_header212
  %current_output279 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  %partial_reduction_result281 = load float, ptr %current_output279, align 4
  %254 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result281, i32 16, i32 31)
  store float %254, ptr %result_from_other_lane280, align 4
  call void @region_3_38(ptr %current_output279, ptr %result_from_other_lane280, ptr %return_buffer282)
  %255 = load float, ptr %return_buffer282, align 4
  store float %255, ptr %current_output279, align 4
  %partial_reduction_result284 = load float, ptr %current_output279, align 4
  %256 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result284, i32 8, i32 31)
  store float %256, ptr %result_from_other_lane283, align 4
  call void @region_3_38(ptr %current_output279, ptr %result_from_other_lane283, ptr %return_buffer285)
  %257 = load float, ptr %return_buffer285, align 4
  store float %257, ptr %current_output279, align 4
  %partial_reduction_result287 = load float, ptr %current_output279, align 4
  %258 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result287, i32 4, i32 31)
  store float %258, ptr %result_from_other_lane286, align 4
  call void @region_3_38(ptr %current_output279, ptr %result_from_other_lane286, ptr %return_buffer288)
  %259 = load float, ptr %return_buffer288, align 4
  store float %259, ptr %current_output279, align 4
  %partial_reduction_result290 = load float, ptr %current_output279, align 4
  %260 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result290, i32 2, i32 31)
  store float %260, ptr %result_from_other_lane289, align 4
  call void @region_3_38(ptr %current_output279, ptr %result_from_other_lane289, ptr %return_buffer291)
  %261 = load float, ptr %return_buffer291, align 4
  store float %261, ptr %current_output279, align 4
  %partial_reduction_result293 = load float, ptr %current_output279, align 4
  %262 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result293, i32 1, i32 31)
  store float %262, ptr %result_from_other_lane292, align 4
  call void @region_3_38(ptr %current_output279, ptr %result_from_other_lane292, ptr %return_buffer294)
  %263 = load float, ptr %return_buffer294, align 4
  store float %263, ptr %current_output279, align 4
  %264 = udiv i32 %thread_id.x203, 32
  %265 = icmp eq i32 %lane_id205, 0
  br i1 %265, label %intra_warp_reduce_write-true295, label %intra_warp_reduce_write-after296

intra_warp_reduce_write-after296:                 ; preds = %intra_warp_reduce_write-true295, %y_in_tile.loop_exit211
  call void @llvm.nvvm.barrier0()
  %266 = icmp eq i32 %264, 0
  br i1 %266, label %inter_warp_reduce-true297, label %inter_warp_reduce-after298

inter_warp_reduce-after298:                       ; preds = %reduction_write_output-after316, %intra_warp_reduce_write-after296
  br label %reduce-group-2-after

early_return202:                                  ; preds = %reduce-group-2-true
  ret void

is_full_tile-true217:                             ; preds = %y_in_tile.loop_body213
  %267 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address223, align 4
  br label %tile_loop.loop_header221

tile_loop.loop_header221:                         ; preds = %tile_loop.loop_body222, %is_full_tile-true217
  %tile_loop.indvar224 = load i32, ptr %tile_loop.invar_address223, align 4
  %268 = icmp uge i32 %tile_loop.indvar224, 8
  br i1 %268, label %tile_loop.loop_exit220, label %tile_loop.loop_body222

tile_loop.loop_body222:                           ; preds = %tile_loop.loop_header221
  %invar.inc225 = add nuw nsw i32 %tile_loop.indvar224, 1
  store i32 %invar.inc225, ptr %tile_loop.invar_address223, align 4
  %269 = icmp eq i32 %tile_loop.indvar224, 0
  %270 = mul i32 %tile_loop.indvar224, 1024
  %271 = add i32 %270, 0
  %x_loc226 = add i32 %271, %267
  %272 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %273 = add i32 %tile_origin.2210, %x_loc226
  %274 = mul nuw nsw i32 %273, 1
  %275 = add nuw nsw i32 0, %274
  %276 = mul nuw nsw i32 %272, 8192
  %277 = add nuw nsw i32 %275, %276
  %278 = mul nuw nsw i32 %tile_origin.0208, 8192
  %279 = add nuw nsw i32 %277, %278
  %280 = udiv i32 %279, 1
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %279
  %Arg_5.6227 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %279
  %Arg_4.5228 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.34 = fmul float %Arg_5.6227, %Arg_4.5228
  %region_0_71_constant_14229 = load float, ptr @1, align 4
  %Arg_4.5230 = getelementptr inbounds float, ptr %arg4, i32 %279
  %Arg_4.5231 = load float, ptr %Arg_4.5230, align 4, !invariant.load !269
  %subtract.35 = fsub float %region_0_71_constant_14229, %Arg_4.5231
  %multiply.36 = fmul float %multiply.34, %subtract.35
  store float %multiply.36, ptr %reduction_input_address199, align 4
  %281 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_38(ptr %281, ptr %reduction_input_address199, ptr %return_buffer232)
  %282 = load float, ptr %return_buffer232, align 4
  store float %282, ptr %281, align 4
  %283 = mul i32 %tile_loop.indvar224, 1024
  %284 = add i32 %283, 1
  %x_loc233 = add i32 %284, %267
  %285 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %286 = add i32 %tile_origin.2210, %x_loc233
  %287 = mul nuw nsw i32 %286, 1
  %288 = add nuw nsw i32 0, %287
  %289 = mul nuw nsw i32 %285, 8192
  %290 = add nuw nsw i32 %288, %289
  %291 = mul nuw nsw i32 %tile_origin.0208, 8192
  %292 = add nuw nsw i32 %290, %291
  %293 = udiv i32 %292, 1
  %Arg_5.6234 = getelementptr inbounds float, ptr %arg5, i32 %292
  %Arg_5.6235 = load float, ptr %Arg_5.6234, align 4, !invariant.load !269
  %Arg_4.5236 = getelementptr inbounds float, ptr %arg4, i32 %292
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  %multiply.34238 = fmul float %Arg_5.6235, %Arg_4.5237
  %region_0_71_constant_14239 = load float, ptr @1, align 4
  %Arg_4.5240 = getelementptr inbounds float, ptr %arg4, i32 %292
  %Arg_4.5241 = load float, ptr %Arg_4.5240, align 4, !invariant.load !269
  %subtract.35242 = fsub float %region_0_71_constant_14239, %Arg_4.5241
  %multiply.36243 = fmul float %multiply.34238, %subtract.35242
  store float %multiply.36243, ptr %reduction_input_address199, align 4
  %294 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_38(ptr %294, ptr %reduction_input_address199, ptr %return_buffer244)
  %295 = load float, ptr %return_buffer244, align 4
  store float %295, ptr %294, align 4
  br label %tile_loop.loop_header221, !llvm.loop !277

tile_loop.loop_exit220:                           ; preds = %tile_loop.loop_header221
  br label %is_full_tile-after219

is_full_tile-false218:                            ; preds = %y_in_tile.loop_body213
  %296 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address248, align 4
  br label %tile_loop.loop_header246

tile_loop.loop_header246:                         ; preds = %x_in_tile-after267, %is_full_tile-false218
  %tile_loop.indvar249 = load i32, ptr %tile_loop.invar_address248, align 4
  %297 = icmp uge i32 %tile_loop.indvar249, 8
  br i1 %297, label %tile_loop.loop_exit245, label %tile_loop.loop_body247

tile_loop.loop_body247:                           ; preds = %tile_loop.loop_header246
  %invar.inc250 = add nuw nsw i32 %tile_loop.indvar249, 1
  store i32 %invar.inc250, ptr %tile_loop.invar_address248, align 4
  %298 = icmp eq i32 %tile_loop.indvar249, 0
  %299 = mul i32 %tile_loop.indvar249, 1024
  %300 = add i32 %299, 0
  %x_loc251 = add i32 %300, %296
  %301 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %302 = add i32 %tile_origin.2210, %x_loc251
  %303 = icmp ult i32 %x_loc251, %tile_bound207
  br i1 %303, label %x_in_tile-true252, label %x_in_tile-after253

x_in_tile-after253:                               ; preds = %x_in_tile-true252, %tile_loop.loop_body247
  %304 = mul i32 %tile_loop.indvar249, 1024
  %305 = add i32 %304, 1
  %x_loc265 = add i32 %305, %296
  %306 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %307 = add i32 %tile_origin.2210, %x_loc265
  %308 = icmp ult i32 %x_loc265, %tile_bound207
  br i1 %308, label %x_in_tile-true266, label %x_in_tile-after267

x_in_tile-after267:                               ; preds = %x_in_tile-true266, %x_in_tile-after253
  br label %tile_loop.loop_header246, !llvm.loop !278

tile_loop.loop_exit245:                           ; preds = %tile_loop.loop_header246
  br label %is_full_tile-after219

x_in_tile-true252:                                ; preds = %tile_loop.loop_body247
  %309 = mul nuw nsw i32 %302, 1
  %310 = add nuw nsw i32 0, %309
  %311 = mul nuw nsw i32 %301, 8192
  %312 = add nuw nsw i32 %310, %311
  %313 = mul nuw nsw i32 %tile_origin.0208, 8192
  %314 = add nuw nsw i32 %312, %313
  %315 = udiv i32 %314, 1
  %Arg_5.6254 = getelementptr inbounds float, ptr %arg5, i32 %314
  %Arg_5.6255 = load float, ptr %Arg_5.6254, align 4, !invariant.load !269
  %Arg_4.5256 = getelementptr inbounds float, ptr %arg4, i32 %314
  %Arg_4.5257 = load float, ptr %Arg_4.5256, align 4, !invariant.load !269
  %multiply.34258 = fmul float %Arg_5.6255, %Arg_4.5257
  %region_0_71_constant_14259 = load float, ptr @1, align 4
  %Arg_4.5260 = getelementptr inbounds float, ptr %arg4, i32 %314
  %Arg_4.5261 = load float, ptr %Arg_4.5260, align 4, !invariant.load !269
  %subtract.35262 = fsub float %region_0_71_constant_14259, %Arg_4.5261
  %multiply.36263 = fmul float %multiply.34258, %subtract.35262
  store float %multiply.36263, ptr %reduction_input_address199, align 4
  %316 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_38(ptr %316, ptr %reduction_input_address199, ptr %return_buffer264)
  %317 = load float, ptr %return_buffer264, align 4
  store float %317, ptr %316, align 4
  br label %x_in_tile-after253

x_in_tile-true266:                                ; preds = %x_in_tile-after253
  %318 = mul nuw nsw i32 %307, 1
  %319 = add nuw nsw i32 0, %318
  %320 = mul nuw nsw i32 %306, 8192
  %321 = add nuw nsw i32 %319, %320
  %322 = mul nuw nsw i32 %tile_origin.0208, 8192
  %323 = add nuw nsw i32 %321, %322
  %324 = udiv i32 %323, 1
  %Arg_5.6268 = getelementptr inbounds float, ptr %arg5, i32 %323
  %Arg_5.6269 = load float, ptr %Arg_5.6268, align 4, !invariant.load !269
  %Arg_4.5270 = getelementptr inbounds float, ptr %arg4, i32 %323
  %Arg_4.5271 = load float, ptr %Arg_4.5270, align 4, !invariant.load !269
  %multiply.34272 = fmul float %Arg_5.6269, %Arg_4.5271
  %region_0_71_constant_14273 = load float, ptr @1, align 4
  %Arg_4.5274 = getelementptr inbounds float, ptr %arg4, i32 %323
  %Arg_4.5275 = load float, ptr %Arg_4.5274, align 4, !invariant.load !269
  %subtract.35276 = fsub float %region_0_71_constant_14273, %Arg_4.5275
  %multiply.36277 = fmul float %multiply.34272, %subtract.35276
  store float %multiply.36277, ptr %reduction_input_address199, align 4
  %325 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_38(ptr %325, ptr %reduction_input_address199, ptr %return_buffer278)
  %326 = load float, ptr %return_buffer278, align 4
  store float %326, ptr %325, align 4
  br label %x_in_tile-after267

intra_warp_reduce_write-true295:                  ; preds = %y_in_tile.loop_exit211
  %327 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i32 0, i32 %239, i32 0, i32 %264
  %328 = addrspacecast ptr addrspace(3) %327 to ptr
  %329 = load float, ptr %current_output279, align 4
  store float %329, ptr %328, align 4
  br label %intra_warp_reduce_write-after296

inter_warp_reduce-true297:                        ; preds = %intra_warp_reduce_write-after296
  %330 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i32 0, i32 %239, i32 0, i32 %lane_id205
  %331 = addrspacecast ptr addrspace(3) %330 to ptr
  store float %region_0_71_constant_19201, ptr %initial_value_addr299, align 4
  %332 = icmp ult i32 %thread_id.x203, 16
  %333 = select i1 %332, ptr %331, ptr %initial_value_addr299
  %partial_reduction_result301 = load float, ptr %333, align 4
  %334 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result301, i32 16, i32 31)
  store float %334, ptr %result_from_other_lane300, align 4
  call void @region_3_38(ptr %333, ptr %result_from_other_lane300, ptr %return_buffer302)
  %335 = load float, ptr %return_buffer302, align 4
  store float %335, ptr %333, align 4
  %partial_reduction_result304 = load float, ptr %333, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result304, i32 8, i32 31)
  store float %336, ptr %result_from_other_lane303, align 4
  call void @region_3_38(ptr %333, ptr %result_from_other_lane303, ptr %return_buffer305)
  %337 = load float, ptr %return_buffer305, align 4
  store float %337, ptr %333, align 4
  %partial_reduction_result307 = load float, ptr %333, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result307, i32 4, i32 31)
  store float %338, ptr %result_from_other_lane306, align 4
  call void @region_3_38(ptr %333, ptr %result_from_other_lane306, ptr %return_buffer308)
  %339 = load float, ptr %return_buffer308, align 4
  store float %339, ptr %333, align 4
  %partial_reduction_result310 = load float, ptr %333, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result310, i32 2, i32 31)
  store float %340, ptr %result_from_other_lane309, align 4
  call void @region_3_38(ptr %333, ptr %result_from_other_lane309, ptr %return_buffer311)
  %341 = load float, ptr %return_buffer311, align 4
  store float %341, ptr %333, align 4
  %partial_reduction_result313 = load float, ptr %333, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result313, i32 1, i32 31)
  store float %342, ptr %result_from_other_lane312, align 4
  call void @region_3_38(ptr %333, ptr %result_from_other_lane312, ptr %return_buffer314)
  %343 = load float, ptr %return_buffer314, align 4
  store float %343, ptr %333, align 4
  %344 = icmp eq i32 %thread_id.x203, 0
  br i1 %344, label %reduction_write_output-true315, label %reduction_write_output-after316

reduction_write_output-after316:                  ; preds = %reduction_write_output-true315, %inter_warp_reduce-true297
  br label %inter_warp_reduce-after298

reduction_write_output-true315:                   ; preds = %inter_warp_reduce-true297
  %345 = mul i32 %thread_id.x203, 2
  %346 = add i32 %tile_origin.1209, %thread_id.y204
  %347 = add i32 %tile_origin.2210, %345
  %348 = add i32 %347, 0
  %output317 = load float, ptr %333, align 4
  store float %output317, ptr %arg14, align 4
  br label %reduction_write_output-after316

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %region_0_71_constant_19320 = load float, ptr @0, align 4
  %349 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  store float %region_0_71_constant_19320, ptr %349, align 4
  %350 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %351 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %352 = urem i32 %350, 512
  %353 = udiv i32 %350, 512
  %354 = mul i32 %351, 1
  %355 = add i32 %354, %353
  %356 = icmp ult i32 %355, 1
  br i1 %356, label %357, label %early_return321

357:                                              ; preds = %reduce-group-3-true
  %thread_id.x322 = urem i32 %352, 512
  %thread_id.y323 = udiv i32 %352, 512
  %lane_id324 = urem i32 %352, 32
  %358 = udiv i32 %355, 1
  %359 = urem i32 %358, 1
  %360 = udiv i32 %355, 1
  %361 = urem i32 %360, 1
  %362 = udiv i32 %355, 1
  %363 = icmp eq i32 %361, 0
  %tile_bound325 = select i1 %363, i32 1, i32 1
  %364 = icmp eq i32 %359, 0
  %tile_bound326 = select i1 %364, i32 8192, i32 8192
  %tile_origin.0327 = mul i32 %362, 1
  %tile_origin.1328 = mul i32 %361, 1
  %tile_origin.2329 = mul i32 %359, 8192
  store i32 %thread_id.y323, ptr %y_in_tile.invar_address333, align 4
  br label %y_in_tile.loop_header331

y_in_tile.loop_header331:                         ; preds = %is_full_tile-after338, %357
  %y_in_tile.indvar334 = load i32, ptr %y_in_tile.invar_address333, align 4
  %365 = icmp uge i32 %y_in_tile.indvar334, %tile_bound325
  br i1 %365, label %y_in_tile.loop_exit330, label %y_in_tile.loop_body332

y_in_tile.loop_body332:                           ; preds = %y_in_tile.loop_header331
  %invar.inc335 = add nuw nsw i32 %y_in_tile.indvar334, 1
  store i32 %invar.inc335, ptr %y_in_tile.invar_address333, align 4
  %366 = icmp eq i32 %y_in_tile.indvar334, %thread_id.y323
  %367 = icmp eq i32 8192, %tile_bound326
  br i1 %367, label %is_full_tile-true336, label %is_full_tile-false337

is_full_tile-after338:                            ; preds = %tile_loop.loop_exit364, %tile_loop.loop_exit339
  br label %y_in_tile.loop_header331, !llvm.loop !279

y_in_tile.loop_exit330:                           ; preds = %y_in_tile.loop_header331
  %current_output398 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  %partial_reduction_result400 = load float, ptr %current_output398, align 4
  %368 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result400, i32 16, i32 31)
  store float %368, ptr %result_from_other_lane399, align 4
  call void @region_4_47(ptr %current_output398, ptr %result_from_other_lane399, ptr %return_buffer401)
  %369 = load float, ptr %return_buffer401, align 4
  store float %369, ptr %current_output398, align 4
  %partial_reduction_result403 = load float, ptr %current_output398, align 4
  %370 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result403, i32 8, i32 31)
  store float %370, ptr %result_from_other_lane402, align 4
  call void @region_4_47(ptr %current_output398, ptr %result_from_other_lane402, ptr %return_buffer404)
  %371 = load float, ptr %return_buffer404, align 4
  store float %371, ptr %current_output398, align 4
  %partial_reduction_result406 = load float, ptr %current_output398, align 4
  %372 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result406, i32 4, i32 31)
  store float %372, ptr %result_from_other_lane405, align 4
  call void @region_4_47(ptr %current_output398, ptr %result_from_other_lane405, ptr %return_buffer407)
  %373 = load float, ptr %return_buffer407, align 4
  store float %373, ptr %current_output398, align 4
  %partial_reduction_result409 = load float, ptr %current_output398, align 4
  %374 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result409, i32 2, i32 31)
  store float %374, ptr %result_from_other_lane408, align 4
  call void @region_4_47(ptr %current_output398, ptr %result_from_other_lane408, ptr %return_buffer410)
  %375 = load float, ptr %return_buffer410, align 4
  store float %375, ptr %current_output398, align 4
  %partial_reduction_result412 = load float, ptr %current_output398, align 4
  %376 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result412, i32 1, i32 31)
  store float %376, ptr %result_from_other_lane411, align 4
  call void @region_4_47(ptr %current_output398, ptr %result_from_other_lane411, ptr %return_buffer413)
  %377 = load float, ptr %return_buffer413, align 4
  store float %377, ptr %current_output398, align 4
  %378 = udiv i32 %thread_id.x322, 32
  %379 = icmp eq i32 %lane_id324, 0
  br i1 %379, label %intra_warp_reduce_write-true414, label %intra_warp_reduce_write-after415

intra_warp_reduce_write-after415:                 ; preds = %intra_warp_reduce_write-true414, %y_in_tile.loop_exit330
  call void @llvm.nvvm.barrier0()
  %380 = icmp eq i32 %378, 0
  br i1 %380, label %inter_warp_reduce-true416, label %inter_warp_reduce-after417

inter_warp_reduce-after417:                       ; preds = %reduction_write_output-after435, %intra_warp_reduce_write-after415
  br label %reduce-group-3-after

early_return321:                                  ; preds = %reduce-group-3-true
  ret void

is_full_tile-true336:                             ; preds = %y_in_tile.loop_body332
  %381 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address342, align 4
  br label %tile_loop.loop_header340

tile_loop.loop_header340:                         ; preds = %tile_loop.loop_body341, %is_full_tile-true336
  %tile_loop.indvar343 = load i32, ptr %tile_loop.invar_address342, align 4
  %382 = icmp uge i32 %tile_loop.indvar343, 8
  br i1 %382, label %tile_loop.loop_exit339, label %tile_loop.loop_body341

tile_loop.loop_body341:                           ; preds = %tile_loop.loop_header340
  %invar.inc344 = add nuw nsw i32 %tile_loop.indvar343, 1
  store i32 %invar.inc344, ptr %tile_loop.invar_address342, align 4
  %383 = icmp eq i32 %tile_loop.indvar343, 0
  %384 = mul i32 %tile_loop.indvar343, 1024
  %385 = add i32 %384, 0
  %x_loc345 = add i32 %385, %381
  %386 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %387 = add i32 %tile_origin.2329, %x_loc345
  %388 = mul nuw nsw i32 %387, 1
  %389 = add nuw nsw i32 0, %388
  %390 = mul nuw nsw i32 %386, 8192
  %391 = add nuw nsw i32 %389, %390
  %392 = mul nuw nsw i32 %tile_origin.0327, 8192
  %393 = add nuw nsw i32 %391, %392
  %394 = udiv i32 %393, 1
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %393
  %Arg_7.8346 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %393
  %Arg_6.7347 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %multiply.43 = fmul float %Arg_7.8346, %Arg_6.7347
  %region_0_71_constant_14348 = load float, ptr @1, align 4
  %Arg_6.7349 = getelementptr inbounds float, ptr %arg6, i32 %393
  %Arg_6.7350 = load float, ptr %Arg_6.7349, align 4, !invariant.load !269
  %subtract.44 = fsub float %region_0_71_constant_14348, %Arg_6.7350
  %multiply.45 = fmul float %multiply.43, %subtract.44
  store float %multiply.45, ptr %reduction_input_address318, align 4
  %395 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_47(ptr %395, ptr %reduction_input_address318, ptr %return_buffer351)
  %396 = load float, ptr %return_buffer351, align 4
  store float %396, ptr %395, align 4
  %397 = mul i32 %tile_loop.indvar343, 1024
  %398 = add i32 %397, 1
  %x_loc352 = add i32 %398, %381
  %399 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %400 = add i32 %tile_origin.2329, %x_loc352
  %401 = mul nuw nsw i32 %400, 1
  %402 = add nuw nsw i32 0, %401
  %403 = mul nuw nsw i32 %399, 8192
  %404 = add nuw nsw i32 %402, %403
  %405 = mul nuw nsw i32 %tile_origin.0327, 8192
  %406 = add nuw nsw i32 %404, %405
  %407 = udiv i32 %406, 1
  %Arg_7.8353 = getelementptr inbounds float, ptr %arg7, i32 %406
  %Arg_7.8354 = load float, ptr %Arg_7.8353, align 4, !invariant.load !269
  %Arg_6.7355 = getelementptr inbounds float, ptr %arg6, i32 %406
  %Arg_6.7356 = load float, ptr %Arg_6.7355, align 4, !invariant.load !269
  %multiply.43357 = fmul float %Arg_7.8354, %Arg_6.7356
  %region_0_71_constant_14358 = load float, ptr @1, align 4
  %Arg_6.7359 = getelementptr inbounds float, ptr %arg6, i32 %406
  %Arg_6.7360 = load float, ptr %Arg_6.7359, align 4, !invariant.load !269
  %subtract.44361 = fsub float %region_0_71_constant_14358, %Arg_6.7360
  %multiply.45362 = fmul float %multiply.43357, %subtract.44361
  store float %multiply.45362, ptr %reduction_input_address318, align 4
  %408 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_47(ptr %408, ptr %reduction_input_address318, ptr %return_buffer363)
  %409 = load float, ptr %return_buffer363, align 4
  store float %409, ptr %408, align 4
  br label %tile_loop.loop_header340, !llvm.loop !280

tile_loop.loop_exit339:                           ; preds = %tile_loop.loop_header340
  br label %is_full_tile-after338

is_full_tile-false337:                            ; preds = %y_in_tile.loop_body332
  %410 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address367, align 4
  br label %tile_loop.loop_header365

tile_loop.loop_header365:                         ; preds = %x_in_tile-after386, %is_full_tile-false337
  %tile_loop.indvar368 = load i32, ptr %tile_loop.invar_address367, align 4
  %411 = icmp uge i32 %tile_loop.indvar368, 8
  br i1 %411, label %tile_loop.loop_exit364, label %tile_loop.loop_body366

tile_loop.loop_body366:                           ; preds = %tile_loop.loop_header365
  %invar.inc369 = add nuw nsw i32 %tile_loop.indvar368, 1
  store i32 %invar.inc369, ptr %tile_loop.invar_address367, align 4
  %412 = icmp eq i32 %tile_loop.indvar368, 0
  %413 = mul i32 %tile_loop.indvar368, 1024
  %414 = add i32 %413, 0
  %x_loc370 = add i32 %414, %410
  %415 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %416 = add i32 %tile_origin.2329, %x_loc370
  %417 = icmp ult i32 %x_loc370, %tile_bound326
  br i1 %417, label %x_in_tile-true371, label %x_in_tile-after372

x_in_tile-after372:                               ; preds = %x_in_tile-true371, %tile_loop.loop_body366
  %418 = mul i32 %tile_loop.indvar368, 1024
  %419 = add i32 %418, 1
  %x_loc384 = add i32 %419, %410
  %420 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %421 = add i32 %tile_origin.2329, %x_loc384
  %422 = icmp ult i32 %x_loc384, %tile_bound326
  br i1 %422, label %x_in_tile-true385, label %x_in_tile-after386

x_in_tile-after386:                               ; preds = %x_in_tile-true385, %x_in_tile-after372
  br label %tile_loop.loop_header365, !llvm.loop !281

tile_loop.loop_exit364:                           ; preds = %tile_loop.loop_header365
  br label %is_full_tile-after338

x_in_tile-true371:                                ; preds = %tile_loop.loop_body366
  %423 = mul nuw nsw i32 %416, 1
  %424 = add nuw nsw i32 0, %423
  %425 = mul nuw nsw i32 %415, 8192
  %426 = add nuw nsw i32 %424, %425
  %427 = mul nuw nsw i32 %tile_origin.0327, 8192
  %428 = add nuw nsw i32 %426, %427
  %429 = udiv i32 %428, 1
  %Arg_7.8373 = getelementptr inbounds float, ptr %arg7, i32 %428
  %Arg_7.8374 = load float, ptr %Arg_7.8373, align 4, !invariant.load !269
  %Arg_6.7375 = getelementptr inbounds float, ptr %arg6, i32 %428
  %Arg_6.7376 = load float, ptr %Arg_6.7375, align 4, !invariant.load !269
  %multiply.43377 = fmul float %Arg_7.8374, %Arg_6.7376
  %region_0_71_constant_14378 = load float, ptr @1, align 4
  %Arg_6.7379 = getelementptr inbounds float, ptr %arg6, i32 %428
  %Arg_6.7380 = load float, ptr %Arg_6.7379, align 4, !invariant.load !269
  %subtract.44381 = fsub float %region_0_71_constant_14378, %Arg_6.7380
  %multiply.45382 = fmul float %multiply.43377, %subtract.44381
  store float %multiply.45382, ptr %reduction_input_address318, align 4
  %430 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_47(ptr %430, ptr %reduction_input_address318, ptr %return_buffer383)
  %431 = load float, ptr %return_buffer383, align 4
  store float %431, ptr %430, align 4
  br label %x_in_tile-after372

x_in_tile-true385:                                ; preds = %x_in_tile-after372
  %432 = mul nuw nsw i32 %421, 1
  %433 = add nuw nsw i32 0, %432
  %434 = mul nuw nsw i32 %420, 8192
  %435 = add nuw nsw i32 %433, %434
  %436 = mul nuw nsw i32 %tile_origin.0327, 8192
  %437 = add nuw nsw i32 %435, %436
  %438 = udiv i32 %437, 1
  %Arg_7.8387 = getelementptr inbounds float, ptr %arg7, i32 %437
  %Arg_7.8388 = load float, ptr %Arg_7.8387, align 4, !invariant.load !269
  %Arg_6.7389 = getelementptr inbounds float, ptr %arg6, i32 %437
  %Arg_6.7390 = load float, ptr %Arg_6.7389, align 4, !invariant.load !269
  %multiply.43391 = fmul float %Arg_7.8388, %Arg_6.7390
  %region_0_71_constant_14392 = load float, ptr @1, align 4
  %Arg_6.7393 = getelementptr inbounds float, ptr %arg6, i32 %437
  %Arg_6.7394 = load float, ptr %Arg_6.7393, align 4, !invariant.load !269
  %subtract.44395 = fsub float %region_0_71_constant_14392, %Arg_6.7394
  %multiply.45396 = fmul float %multiply.43391, %subtract.44395
  store float %multiply.45396, ptr %reduction_input_address318, align 4
  %439 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_47(ptr %439, ptr %reduction_input_address318, ptr %return_buffer397)
  %440 = load float, ptr %return_buffer397, align 4
  store float %440, ptr %439, align 4
  br label %x_in_tile-after386

intra_warp_reduce_write-true414:                  ; preds = %y_in_tile.loop_exit330
  %441 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i32 0, i32 %353, i32 0, i32 %378
  %442 = addrspacecast ptr addrspace(3) %441 to ptr
  %443 = load float, ptr %current_output398, align 4
  store float %443, ptr %442, align 4
  br label %intra_warp_reduce_write-after415

inter_warp_reduce-true416:                        ; preds = %intra_warp_reduce_write-after415
  %444 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i32 0, i32 %353, i32 0, i32 %lane_id324
  %445 = addrspacecast ptr addrspace(3) %444 to ptr
  store float %region_0_71_constant_19320, ptr %initial_value_addr418, align 4
  %446 = icmp ult i32 %thread_id.x322, 16
  %447 = select i1 %446, ptr %445, ptr %initial_value_addr418
  %partial_reduction_result420 = load float, ptr %447, align 4
  %448 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result420, i32 16, i32 31)
  store float %448, ptr %result_from_other_lane419, align 4
  call void @region_4_47(ptr %447, ptr %result_from_other_lane419, ptr %return_buffer421)
  %449 = load float, ptr %return_buffer421, align 4
  store float %449, ptr %447, align 4
  %partial_reduction_result423 = load float, ptr %447, align 4
  %450 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result423, i32 8, i32 31)
  store float %450, ptr %result_from_other_lane422, align 4
  call void @region_4_47(ptr %447, ptr %result_from_other_lane422, ptr %return_buffer424)
  %451 = load float, ptr %return_buffer424, align 4
  store float %451, ptr %447, align 4
  %partial_reduction_result426 = load float, ptr %447, align 4
  %452 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result426, i32 4, i32 31)
  store float %452, ptr %result_from_other_lane425, align 4
  call void @region_4_47(ptr %447, ptr %result_from_other_lane425, ptr %return_buffer427)
  %453 = load float, ptr %return_buffer427, align 4
  store float %453, ptr %447, align 4
  %partial_reduction_result429 = load float, ptr %447, align 4
  %454 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result429, i32 2, i32 31)
  store float %454, ptr %result_from_other_lane428, align 4
  call void @region_4_47(ptr %447, ptr %result_from_other_lane428, ptr %return_buffer430)
  %455 = load float, ptr %return_buffer430, align 4
  store float %455, ptr %447, align 4
  %partial_reduction_result432 = load float, ptr %447, align 4
  %456 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result432, i32 1, i32 31)
  store float %456, ptr %result_from_other_lane431, align 4
  call void @region_4_47(ptr %447, ptr %result_from_other_lane431, ptr %return_buffer433)
  %457 = load float, ptr %return_buffer433, align 4
  store float %457, ptr %447, align 4
  %458 = icmp eq i32 %thread_id.x322, 0
  br i1 %458, label %reduction_write_output-true434, label %reduction_write_output-after435

reduction_write_output-after435:                  ; preds = %reduction_write_output-true434, %inter_warp_reduce-true416
  br label %inter_warp_reduce-after417

reduction_write_output-true434:                   ; preds = %inter_warp_reduce-true416
  %459 = mul i32 %thread_id.x322, 2
  %460 = add i32 %tile_origin.1328, %thread_id.y323
  %461 = add i32 %tile_origin.2329, %459
  %462 = add i32 %461, 0
  %output436 = load float, ptr %447, align 4
  store float %output436, ptr %arg15, align 4
  br label %reduction_write_output-after435

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %region_0_71_constant_19439 = load float, ptr @0, align 4
  %463 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  store float %region_0_71_constant_19439, ptr %463, align 4
  %464 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %465 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %466 = urem i32 %464, 512
  %467 = udiv i32 %464, 512
  %468 = mul i32 %465, 1
  %469 = add i32 %468, %467
  %470 = icmp ult i32 %469, 1
  br i1 %470, label %471, label %early_return440

471:                                              ; preds = %reduce-group-4-true
  %thread_id.x441 = urem i32 %466, 512
  %thread_id.y442 = udiv i32 %466, 512
  %lane_id443 = urem i32 %466, 32
  %472 = udiv i32 %469, 1
  %473 = urem i32 %472, 1
  %474 = udiv i32 %469, 1
  %475 = urem i32 %474, 1
  %476 = udiv i32 %469, 1
  %477 = icmp eq i32 %475, 0
  %tile_bound444 = select i1 %477, i32 1, i32 1
  %478 = icmp eq i32 %473, 0
  %tile_bound445 = select i1 %478, i32 8192, i32 8192
  %tile_origin.0446 = mul i32 %476, 1
  %tile_origin.1447 = mul i32 %475, 1
  %tile_origin.2448 = mul i32 %473, 8192
  store i32 %thread_id.y442, ptr %y_in_tile.invar_address452, align 4
  br label %y_in_tile.loop_header450

y_in_tile.loop_header450:                         ; preds = %is_full_tile-after457, %471
  %y_in_tile.indvar453 = load i32, ptr %y_in_tile.invar_address452, align 4
  %479 = icmp uge i32 %y_in_tile.indvar453, %tile_bound444
  br i1 %479, label %y_in_tile.loop_exit449, label %y_in_tile.loop_body451

y_in_tile.loop_body451:                           ; preds = %y_in_tile.loop_header450
  %invar.inc454 = add nuw nsw i32 %y_in_tile.indvar453, 1
  store i32 %invar.inc454, ptr %y_in_tile.invar_address452, align 4
  %480 = icmp eq i32 %y_in_tile.indvar453, %thread_id.y442
  %481 = icmp eq i32 8192, %tile_bound445
  br i1 %481, label %is_full_tile-true455, label %is_full_tile-false456

is_full_tile-after457:                            ; preds = %tile_loop.loop_exit483, %tile_loop.loop_exit458
  br label %y_in_tile.loop_header450, !llvm.loop !282

y_in_tile.loop_exit449:                           ; preds = %y_in_tile.loop_header450
  %current_output517 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  %partial_reduction_result519 = load float, ptr %current_output517, align 4
  %482 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result519, i32 16, i32 31)
  store float %482, ptr %result_from_other_lane518, align 4
  call void @region_5_56(ptr %current_output517, ptr %result_from_other_lane518, ptr %return_buffer520)
  %483 = load float, ptr %return_buffer520, align 4
  store float %483, ptr %current_output517, align 4
  %partial_reduction_result522 = load float, ptr %current_output517, align 4
  %484 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result522, i32 8, i32 31)
  store float %484, ptr %result_from_other_lane521, align 4
  call void @region_5_56(ptr %current_output517, ptr %result_from_other_lane521, ptr %return_buffer523)
  %485 = load float, ptr %return_buffer523, align 4
  store float %485, ptr %current_output517, align 4
  %partial_reduction_result525 = load float, ptr %current_output517, align 4
  %486 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result525, i32 4, i32 31)
  store float %486, ptr %result_from_other_lane524, align 4
  call void @region_5_56(ptr %current_output517, ptr %result_from_other_lane524, ptr %return_buffer526)
  %487 = load float, ptr %return_buffer526, align 4
  store float %487, ptr %current_output517, align 4
  %partial_reduction_result528 = load float, ptr %current_output517, align 4
  %488 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result528, i32 2, i32 31)
  store float %488, ptr %result_from_other_lane527, align 4
  call void @region_5_56(ptr %current_output517, ptr %result_from_other_lane527, ptr %return_buffer529)
  %489 = load float, ptr %return_buffer529, align 4
  store float %489, ptr %current_output517, align 4
  %partial_reduction_result531 = load float, ptr %current_output517, align 4
  %490 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result531, i32 1, i32 31)
  store float %490, ptr %result_from_other_lane530, align 4
  call void @region_5_56(ptr %current_output517, ptr %result_from_other_lane530, ptr %return_buffer532)
  %491 = load float, ptr %return_buffer532, align 4
  store float %491, ptr %current_output517, align 4
  %492 = udiv i32 %thread_id.x441, 32
  %493 = icmp eq i32 %lane_id443, 0
  br i1 %493, label %intra_warp_reduce_write-true533, label %intra_warp_reduce_write-after534

intra_warp_reduce_write-after534:                 ; preds = %intra_warp_reduce_write-true533, %y_in_tile.loop_exit449
  call void @llvm.nvvm.barrier0()
  %494 = icmp eq i32 %492, 0
  br i1 %494, label %inter_warp_reduce-true535, label %inter_warp_reduce-after536

inter_warp_reduce-after536:                       ; preds = %reduction_write_output-after554, %intra_warp_reduce_write-after534
  br label %reduce-group-4-after

early_return440:                                  ; preds = %reduce-group-4-true
  ret void

is_full_tile-true455:                             ; preds = %y_in_tile.loop_body451
  %495 = mul i32 %thread_id.x441, 2
  store i32 0, ptr %tile_loop.invar_address461, align 4
  br label %tile_loop.loop_header459

tile_loop.loop_header459:                         ; preds = %tile_loop.loop_body460, %is_full_tile-true455
  %tile_loop.indvar462 = load i32, ptr %tile_loop.invar_address461, align 4
  %496 = icmp uge i32 %tile_loop.indvar462, 8
  br i1 %496, label %tile_loop.loop_exit458, label %tile_loop.loop_body460

tile_loop.loop_body460:                           ; preds = %tile_loop.loop_header459
  %invar.inc463 = add nuw nsw i32 %tile_loop.indvar462, 1
  store i32 %invar.inc463, ptr %tile_loop.invar_address461, align 4
  %497 = icmp eq i32 %tile_loop.indvar462, 0
  %498 = mul i32 %tile_loop.indvar462, 1024
  %499 = add i32 %498, 0
  %x_loc464 = add i32 %499, %495
  %500 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %501 = add i32 %tile_origin.2448, %x_loc464
  %502 = mul nuw nsw i32 %501, 1
  %503 = add nuw nsw i32 0, %502
  %504 = mul nuw nsw i32 %500, 8192
  %505 = add nuw nsw i32 %503, %504
  %506 = mul nuw nsw i32 %tile_origin.0446, 8192
  %507 = add nuw nsw i32 %505, %506
  %508 = udiv i32 %507, 1
  %Arg_9.10 = getelementptr inbounds float, ptr %arg9, i32 %507
  %Arg_9.10465 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %507
  %Arg_8.9466 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  %multiply.52 = fmul float %Arg_9.10465, %Arg_8.9466
  %region_0_71_constant_14467 = load float, ptr @1, align 4
  %Arg_8.9468 = getelementptr inbounds float, ptr %arg8, i32 %507
  %Arg_8.9469 = load float, ptr %Arg_8.9468, align 4, !invariant.load !269
  %subtract.53 = fsub float %region_0_71_constant_14467, %Arg_8.9469
  %multiply.54 = fmul float %multiply.52, %subtract.53
  store float %multiply.54, ptr %reduction_input_address437, align 4
  %509 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_56(ptr %509, ptr %reduction_input_address437, ptr %return_buffer470)
  %510 = load float, ptr %return_buffer470, align 4
  store float %510, ptr %509, align 4
  %511 = mul i32 %tile_loop.indvar462, 1024
  %512 = add i32 %511, 1
  %x_loc471 = add i32 %512, %495
  %513 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %514 = add i32 %tile_origin.2448, %x_loc471
  %515 = mul nuw nsw i32 %514, 1
  %516 = add nuw nsw i32 0, %515
  %517 = mul nuw nsw i32 %513, 8192
  %518 = add nuw nsw i32 %516, %517
  %519 = mul nuw nsw i32 %tile_origin.0446, 8192
  %520 = add nuw nsw i32 %518, %519
  %521 = udiv i32 %520, 1
  %Arg_9.10472 = getelementptr inbounds float, ptr %arg9, i32 %520
  %Arg_9.10473 = load float, ptr %Arg_9.10472, align 4, !invariant.load !269
  %Arg_8.9474 = getelementptr inbounds float, ptr %arg8, i32 %520
  %Arg_8.9475 = load float, ptr %Arg_8.9474, align 4, !invariant.load !269
  %multiply.52476 = fmul float %Arg_9.10473, %Arg_8.9475
  %region_0_71_constant_14477 = load float, ptr @1, align 4
  %Arg_8.9478 = getelementptr inbounds float, ptr %arg8, i32 %520
  %Arg_8.9479 = load float, ptr %Arg_8.9478, align 4, !invariant.load !269
  %subtract.53480 = fsub float %region_0_71_constant_14477, %Arg_8.9479
  %multiply.54481 = fmul float %multiply.52476, %subtract.53480
  store float %multiply.54481, ptr %reduction_input_address437, align 4
  %522 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_56(ptr %522, ptr %reduction_input_address437, ptr %return_buffer482)
  %523 = load float, ptr %return_buffer482, align 4
  store float %523, ptr %522, align 4
  br label %tile_loop.loop_header459, !llvm.loop !283

tile_loop.loop_exit458:                           ; preds = %tile_loop.loop_header459
  br label %is_full_tile-after457

is_full_tile-false456:                            ; preds = %y_in_tile.loop_body451
  %524 = mul i32 %thread_id.x441, 2
  store i32 0, ptr %tile_loop.invar_address486, align 4
  br label %tile_loop.loop_header484

tile_loop.loop_header484:                         ; preds = %x_in_tile-after505, %is_full_tile-false456
  %tile_loop.indvar487 = load i32, ptr %tile_loop.invar_address486, align 4
  %525 = icmp uge i32 %tile_loop.indvar487, 8
  br i1 %525, label %tile_loop.loop_exit483, label %tile_loop.loop_body485

tile_loop.loop_body485:                           ; preds = %tile_loop.loop_header484
  %invar.inc488 = add nuw nsw i32 %tile_loop.indvar487, 1
  store i32 %invar.inc488, ptr %tile_loop.invar_address486, align 4
  %526 = icmp eq i32 %tile_loop.indvar487, 0
  %527 = mul i32 %tile_loop.indvar487, 1024
  %528 = add i32 %527, 0
  %x_loc489 = add i32 %528, %524
  %529 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %530 = add i32 %tile_origin.2448, %x_loc489
  %531 = icmp ult i32 %x_loc489, %tile_bound445
  br i1 %531, label %x_in_tile-true490, label %x_in_tile-after491

x_in_tile-after491:                               ; preds = %x_in_tile-true490, %tile_loop.loop_body485
  %532 = mul i32 %tile_loop.indvar487, 1024
  %533 = add i32 %532, 1
  %x_loc503 = add i32 %533, %524
  %534 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %535 = add i32 %tile_origin.2448, %x_loc503
  %536 = icmp ult i32 %x_loc503, %tile_bound445
  br i1 %536, label %x_in_tile-true504, label %x_in_tile-after505

x_in_tile-after505:                               ; preds = %x_in_tile-true504, %x_in_tile-after491
  br label %tile_loop.loop_header484, !llvm.loop !284

tile_loop.loop_exit483:                           ; preds = %tile_loop.loop_header484
  br label %is_full_tile-after457

x_in_tile-true490:                                ; preds = %tile_loop.loop_body485
  %537 = mul nuw nsw i32 %530, 1
  %538 = add nuw nsw i32 0, %537
  %539 = mul nuw nsw i32 %529, 8192
  %540 = add nuw nsw i32 %538, %539
  %541 = mul nuw nsw i32 %tile_origin.0446, 8192
  %542 = add nuw nsw i32 %540, %541
  %543 = udiv i32 %542, 1
  %Arg_9.10492 = getelementptr inbounds float, ptr %arg9, i32 %542
  %Arg_9.10493 = load float, ptr %Arg_9.10492, align 4, !invariant.load !269
  %Arg_8.9494 = getelementptr inbounds float, ptr %arg8, i32 %542
  %Arg_8.9495 = load float, ptr %Arg_8.9494, align 4, !invariant.load !269
  %multiply.52496 = fmul float %Arg_9.10493, %Arg_8.9495
  %region_0_71_constant_14497 = load float, ptr @1, align 4
  %Arg_8.9498 = getelementptr inbounds float, ptr %arg8, i32 %542
  %Arg_8.9499 = load float, ptr %Arg_8.9498, align 4, !invariant.load !269
  %subtract.53500 = fsub float %region_0_71_constant_14497, %Arg_8.9499
  %multiply.54501 = fmul float %multiply.52496, %subtract.53500
  store float %multiply.54501, ptr %reduction_input_address437, align 4
  %544 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_56(ptr %544, ptr %reduction_input_address437, ptr %return_buffer502)
  %545 = load float, ptr %return_buffer502, align 4
  store float %545, ptr %544, align 4
  br label %x_in_tile-after491

x_in_tile-true504:                                ; preds = %x_in_tile-after491
  %546 = mul nuw nsw i32 %535, 1
  %547 = add nuw nsw i32 0, %546
  %548 = mul nuw nsw i32 %534, 8192
  %549 = add nuw nsw i32 %547, %548
  %550 = mul nuw nsw i32 %tile_origin.0446, 8192
  %551 = add nuw nsw i32 %549, %550
  %552 = udiv i32 %551, 1
  %Arg_9.10506 = getelementptr inbounds float, ptr %arg9, i32 %551
  %Arg_9.10507 = load float, ptr %Arg_9.10506, align 4, !invariant.load !269
  %Arg_8.9508 = getelementptr inbounds float, ptr %arg8, i32 %551
  %Arg_8.9509 = load float, ptr %Arg_8.9508, align 4, !invariant.load !269
  %multiply.52510 = fmul float %Arg_9.10507, %Arg_8.9509
  %region_0_71_constant_14511 = load float, ptr @1, align 4
  %Arg_8.9512 = getelementptr inbounds float, ptr %arg8, i32 %551
  %Arg_8.9513 = load float, ptr %Arg_8.9512, align 4, !invariant.load !269
  %subtract.53514 = fsub float %region_0_71_constant_14511, %Arg_8.9513
  %multiply.54515 = fmul float %multiply.52510, %subtract.53514
  store float %multiply.54515, ptr %reduction_input_address437, align 4
  %553 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_56(ptr %553, ptr %reduction_input_address437, ptr %return_buffer516)
  %554 = load float, ptr %return_buffer516, align 4
  store float %554, ptr %553, align 4
  br label %x_in_tile-after505

intra_warp_reduce_write-true533:                  ; preds = %y_in_tile.loop_exit449
  %555 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i32 0, i32 %467, i32 0, i32 %492
  %556 = addrspacecast ptr addrspace(3) %555 to ptr
  %557 = load float, ptr %current_output517, align 4
  store float %557, ptr %556, align 4
  br label %intra_warp_reduce_write-after534

inter_warp_reduce-true535:                        ; preds = %intra_warp_reduce_write-after534
  %558 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i32 0, i32 %467, i32 0, i32 %lane_id443
  %559 = addrspacecast ptr addrspace(3) %558 to ptr
  store float %region_0_71_constant_19439, ptr %initial_value_addr537, align 4
  %560 = icmp ult i32 %thread_id.x441, 16
  %561 = select i1 %560, ptr %559, ptr %initial_value_addr537
  %partial_reduction_result539 = load float, ptr %561, align 4
  %562 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result539, i32 16, i32 31)
  store float %562, ptr %result_from_other_lane538, align 4
  call void @region_5_56(ptr %561, ptr %result_from_other_lane538, ptr %return_buffer540)
  %563 = load float, ptr %return_buffer540, align 4
  store float %563, ptr %561, align 4
  %partial_reduction_result542 = load float, ptr %561, align 4
  %564 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result542, i32 8, i32 31)
  store float %564, ptr %result_from_other_lane541, align 4
  call void @region_5_56(ptr %561, ptr %result_from_other_lane541, ptr %return_buffer543)
  %565 = load float, ptr %return_buffer543, align 4
  store float %565, ptr %561, align 4
  %partial_reduction_result545 = load float, ptr %561, align 4
  %566 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result545, i32 4, i32 31)
  store float %566, ptr %result_from_other_lane544, align 4
  call void @region_5_56(ptr %561, ptr %result_from_other_lane544, ptr %return_buffer546)
  %567 = load float, ptr %return_buffer546, align 4
  store float %567, ptr %561, align 4
  %partial_reduction_result548 = load float, ptr %561, align 4
  %568 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result548, i32 2, i32 31)
  store float %568, ptr %result_from_other_lane547, align 4
  call void @region_5_56(ptr %561, ptr %result_from_other_lane547, ptr %return_buffer549)
  %569 = load float, ptr %return_buffer549, align 4
  store float %569, ptr %561, align 4
  %partial_reduction_result551 = load float, ptr %561, align 4
  %570 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result551, i32 1, i32 31)
  store float %570, ptr %result_from_other_lane550, align 4
  call void @region_5_56(ptr %561, ptr %result_from_other_lane550, ptr %return_buffer552)
  %571 = load float, ptr %return_buffer552, align 4
  store float %571, ptr %561, align 4
  %572 = icmp eq i32 %thread_id.x441, 0
  br i1 %572, label %reduction_write_output-true553, label %reduction_write_output-after554

reduction_write_output-after554:                  ; preds = %reduction_write_output-true553, %inter_warp_reduce-true535
  br label %inter_warp_reduce-after536

reduction_write_output-true553:                   ; preds = %inter_warp_reduce-true535
  %573 = mul i32 %thread_id.x441, 2
  %574 = add i32 %tile_origin.1447, %thread_id.y442
  %575 = add i32 %tile_origin.2448, %573
  %576 = add i32 %575, 0
  %output555 = load float, ptr %561, align 4
  store float %output555, ptr %arg16, align 4
  br label %reduction_write_output-after554

reduce-group-5-true:                              ; preds = %reduce-group-4-after
  %region_0_71_constant_19558 = load float, ptr @0, align 4
  %577 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  store float %region_0_71_constant_19558, ptr %577, align 4
  %578 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %579 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %580 = urem i32 %578, 512
  %581 = udiv i32 %578, 512
  %582 = mul i32 %579, 1
  %583 = add i32 %582, %581
  %584 = icmp ult i32 %583, 1
  br i1 %584, label %585, label %early_return559

585:                                              ; preds = %reduce-group-5-true
  %thread_id.x560 = urem i32 %580, 512
  %thread_id.y561 = udiv i32 %580, 512
  %lane_id562 = urem i32 %580, 32
  %586 = udiv i32 %583, 1
  %587 = urem i32 %586, 1
  %588 = udiv i32 %583, 1
  %589 = urem i32 %588, 1
  %590 = udiv i32 %583, 1
  %591 = icmp eq i32 %589, 0
  %tile_bound563 = select i1 %591, i32 1, i32 1
  %592 = icmp eq i32 %587, 0
  %tile_bound564 = select i1 %592, i32 8192, i32 8192
  %tile_origin.0565 = mul i32 %590, 1
  %tile_origin.1566 = mul i32 %589, 1
  %tile_origin.2567 = mul i32 %587, 8192
  store i32 %thread_id.y561, ptr %y_in_tile.invar_address571, align 4
  br label %y_in_tile.loop_header569

y_in_tile.loop_header569:                         ; preds = %is_full_tile-after576, %585
  %y_in_tile.indvar572 = load i32, ptr %y_in_tile.invar_address571, align 4
  %593 = icmp uge i32 %y_in_tile.indvar572, %tile_bound563
  br i1 %593, label %y_in_tile.loop_exit568, label %y_in_tile.loop_body570

y_in_tile.loop_body570:                           ; preds = %y_in_tile.loop_header569
  %invar.inc573 = add nuw nsw i32 %y_in_tile.indvar572, 1
  store i32 %invar.inc573, ptr %y_in_tile.invar_address571, align 4
  %594 = icmp eq i32 %y_in_tile.indvar572, %thread_id.y561
  %595 = icmp eq i32 8192, %tile_bound564
  br i1 %595, label %is_full_tile-true574, label %is_full_tile-false575

is_full_tile-after576:                            ; preds = %tile_loop.loop_exit602, %tile_loop.loop_exit577
  br label %y_in_tile.loop_header569, !llvm.loop !285

y_in_tile.loop_exit568:                           ; preds = %y_in_tile.loop_header569
  %current_output636 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  %partial_reduction_result638 = load float, ptr %current_output636, align 4
  %596 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result638, i32 16, i32 31)
  store float %596, ptr %result_from_other_lane637, align 4
  call void @region_6_65(ptr %current_output636, ptr %result_from_other_lane637, ptr %return_buffer639)
  %597 = load float, ptr %return_buffer639, align 4
  store float %597, ptr %current_output636, align 4
  %partial_reduction_result641 = load float, ptr %current_output636, align 4
  %598 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result641, i32 8, i32 31)
  store float %598, ptr %result_from_other_lane640, align 4
  call void @region_6_65(ptr %current_output636, ptr %result_from_other_lane640, ptr %return_buffer642)
  %599 = load float, ptr %return_buffer642, align 4
  store float %599, ptr %current_output636, align 4
  %partial_reduction_result644 = load float, ptr %current_output636, align 4
  %600 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result644, i32 4, i32 31)
  store float %600, ptr %result_from_other_lane643, align 4
  call void @region_6_65(ptr %current_output636, ptr %result_from_other_lane643, ptr %return_buffer645)
  %601 = load float, ptr %return_buffer645, align 4
  store float %601, ptr %current_output636, align 4
  %partial_reduction_result647 = load float, ptr %current_output636, align 4
  %602 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result647, i32 2, i32 31)
  store float %602, ptr %result_from_other_lane646, align 4
  call void @region_6_65(ptr %current_output636, ptr %result_from_other_lane646, ptr %return_buffer648)
  %603 = load float, ptr %return_buffer648, align 4
  store float %603, ptr %current_output636, align 4
  %partial_reduction_result650 = load float, ptr %current_output636, align 4
  %604 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result650, i32 1, i32 31)
  store float %604, ptr %result_from_other_lane649, align 4
  call void @region_6_65(ptr %current_output636, ptr %result_from_other_lane649, ptr %return_buffer651)
  %605 = load float, ptr %return_buffer651, align 4
  store float %605, ptr %current_output636, align 4
  %606 = udiv i32 %thread_id.x560, 32
  %607 = icmp eq i32 %lane_id562, 0
  br i1 %607, label %intra_warp_reduce_write-true652, label %intra_warp_reduce_write-after653

intra_warp_reduce_write-after653:                 ; preds = %intra_warp_reduce_write-true652, %y_in_tile.loop_exit568
  call void @llvm.nvvm.barrier0()
  %608 = icmp eq i32 %606, 0
  br i1 %608, label %inter_warp_reduce-true654, label %inter_warp_reduce-after655

inter_warp_reduce-after655:                       ; preds = %reduction_write_output-after673, %intra_warp_reduce_write-after653
  br label %reduce-group-5-after

early_return559:                                  ; preds = %reduce-group-5-true
  ret void

is_full_tile-true574:                             ; preds = %y_in_tile.loop_body570
  %609 = mul i32 %thread_id.x560, 2
  store i32 0, ptr %tile_loop.invar_address580, align 4
  br label %tile_loop.loop_header578

tile_loop.loop_header578:                         ; preds = %tile_loop.loop_body579, %is_full_tile-true574
  %tile_loop.indvar581 = load i32, ptr %tile_loop.invar_address580, align 4
  %610 = icmp uge i32 %tile_loop.indvar581, 8
  br i1 %610, label %tile_loop.loop_exit577, label %tile_loop.loop_body579

tile_loop.loop_body579:                           ; preds = %tile_loop.loop_header578
  %invar.inc582 = add nuw nsw i32 %tile_loop.indvar581, 1
  store i32 %invar.inc582, ptr %tile_loop.invar_address580, align 4
  %611 = icmp eq i32 %tile_loop.indvar581, 0
  %612 = mul i32 %tile_loop.indvar581, 1024
  %613 = add i32 %612, 0
  %x_loc583 = add i32 %613, %609
  %614 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %615 = add i32 %tile_origin.2567, %x_loc583
  %616 = mul nuw nsw i32 %615, 1
  %617 = add nuw nsw i32 0, %616
  %618 = mul nuw nsw i32 %614, 8192
  %619 = add nuw nsw i32 %617, %618
  %620 = mul nuw nsw i32 %tile_origin.0565, 8192
  %621 = add nuw nsw i32 %619, %620
  %622 = udiv i32 %621, 1
  %Arg_11.12 = getelementptr inbounds float, ptr %arg11, i32 %621
  %Arg_11.12584 = load float, ptr %Arg_11.12, align 4, !invariant.load !269
  %Arg_10.11 = getelementptr inbounds float, ptr %arg10, i32 %621
  %Arg_10.11585 = load float, ptr %Arg_10.11, align 4, !invariant.load !269
  %multiply.61 = fmul float %Arg_11.12584, %Arg_10.11585
  %region_0_71_constant_14586 = load float, ptr @1, align 4
  %Arg_10.11587 = getelementptr inbounds float, ptr %arg10, i32 %621
  %Arg_10.11588 = load float, ptr %Arg_10.11587, align 4, !invariant.load !269
  %subtract.62 = fsub float %region_0_71_constant_14586, %Arg_10.11588
  %multiply.63 = fmul float %multiply.61, %subtract.62
  store float %multiply.63, ptr %reduction_input_address556, align 4
  %623 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_65(ptr %623, ptr %reduction_input_address556, ptr %return_buffer589)
  %624 = load float, ptr %return_buffer589, align 4
  store float %624, ptr %623, align 4
  %625 = mul i32 %tile_loop.indvar581, 1024
  %626 = add i32 %625, 1
  %x_loc590 = add i32 %626, %609
  %627 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %628 = add i32 %tile_origin.2567, %x_loc590
  %629 = mul nuw nsw i32 %628, 1
  %630 = add nuw nsw i32 0, %629
  %631 = mul nuw nsw i32 %627, 8192
  %632 = add nuw nsw i32 %630, %631
  %633 = mul nuw nsw i32 %tile_origin.0565, 8192
  %634 = add nuw nsw i32 %632, %633
  %635 = udiv i32 %634, 1
  %Arg_11.12591 = getelementptr inbounds float, ptr %arg11, i32 %634
  %Arg_11.12592 = load float, ptr %Arg_11.12591, align 4, !invariant.load !269
  %Arg_10.11593 = getelementptr inbounds float, ptr %arg10, i32 %634
  %Arg_10.11594 = load float, ptr %Arg_10.11593, align 4, !invariant.load !269
  %multiply.61595 = fmul float %Arg_11.12592, %Arg_10.11594
  %region_0_71_constant_14596 = load float, ptr @1, align 4
  %Arg_10.11597 = getelementptr inbounds float, ptr %arg10, i32 %634
  %Arg_10.11598 = load float, ptr %Arg_10.11597, align 4, !invariant.load !269
  %subtract.62599 = fsub float %region_0_71_constant_14596, %Arg_10.11598
  %multiply.63600 = fmul float %multiply.61595, %subtract.62599
  store float %multiply.63600, ptr %reduction_input_address556, align 4
  %636 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_65(ptr %636, ptr %reduction_input_address556, ptr %return_buffer601)
  %637 = load float, ptr %return_buffer601, align 4
  store float %637, ptr %636, align 4
  br label %tile_loop.loop_header578, !llvm.loop !286

tile_loop.loop_exit577:                           ; preds = %tile_loop.loop_header578
  br label %is_full_tile-after576

is_full_tile-false575:                            ; preds = %y_in_tile.loop_body570
  %638 = mul i32 %thread_id.x560, 2
  store i32 0, ptr %tile_loop.invar_address605, align 4
  br label %tile_loop.loop_header603

tile_loop.loop_header603:                         ; preds = %x_in_tile-after624, %is_full_tile-false575
  %tile_loop.indvar606 = load i32, ptr %tile_loop.invar_address605, align 4
  %639 = icmp uge i32 %tile_loop.indvar606, 8
  br i1 %639, label %tile_loop.loop_exit602, label %tile_loop.loop_body604

tile_loop.loop_body604:                           ; preds = %tile_loop.loop_header603
  %invar.inc607 = add nuw nsw i32 %tile_loop.indvar606, 1
  store i32 %invar.inc607, ptr %tile_loop.invar_address605, align 4
  %640 = icmp eq i32 %tile_loop.indvar606, 0
  %641 = mul i32 %tile_loop.indvar606, 1024
  %642 = add i32 %641, 0
  %x_loc608 = add i32 %642, %638
  %643 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %644 = add i32 %tile_origin.2567, %x_loc608
  %645 = icmp ult i32 %x_loc608, %tile_bound564
  br i1 %645, label %x_in_tile-true609, label %x_in_tile-after610

x_in_tile-after610:                               ; preds = %x_in_tile-true609, %tile_loop.loop_body604
  %646 = mul i32 %tile_loop.indvar606, 1024
  %647 = add i32 %646, 1
  %x_loc622 = add i32 %647, %638
  %648 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %649 = add i32 %tile_origin.2567, %x_loc622
  %650 = icmp ult i32 %x_loc622, %tile_bound564
  br i1 %650, label %x_in_tile-true623, label %x_in_tile-after624

x_in_tile-after624:                               ; preds = %x_in_tile-true623, %x_in_tile-after610
  br label %tile_loop.loop_header603, !llvm.loop !287

tile_loop.loop_exit602:                           ; preds = %tile_loop.loop_header603
  br label %is_full_tile-after576

x_in_tile-true609:                                ; preds = %tile_loop.loop_body604
  %651 = mul nuw nsw i32 %644, 1
  %652 = add nuw nsw i32 0, %651
  %653 = mul nuw nsw i32 %643, 8192
  %654 = add nuw nsw i32 %652, %653
  %655 = mul nuw nsw i32 %tile_origin.0565, 8192
  %656 = add nuw nsw i32 %654, %655
  %657 = udiv i32 %656, 1
  %Arg_11.12611 = getelementptr inbounds float, ptr %arg11, i32 %656
  %Arg_11.12612 = load float, ptr %Arg_11.12611, align 4, !invariant.load !269
  %Arg_10.11613 = getelementptr inbounds float, ptr %arg10, i32 %656
  %Arg_10.11614 = load float, ptr %Arg_10.11613, align 4, !invariant.load !269
  %multiply.61615 = fmul float %Arg_11.12612, %Arg_10.11614
  %region_0_71_constant_14616 = load float, ptr @1, align 4
  %Arg_10.11617 = getelementptr inbounds float, ptr %arg10, i32 %656
  %Arg_10.11618 = load float, ptr %Arg_10.11617, align 4, !invariant.load !269
  %subtract.62619 = fsub float %region_0_71_constant_14616, %Arg_10.11618
  %multiply.63620 = fmul float %multiply.61615, %subtract.62619
  store float %multiply.63620, ptr %reduction_input_address556, align 4
  %658 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_65(ptr %658, ptr %reduction_input_address556, ptr %return_buffer621)
  %659 = load float, ptr %return_buffer621, align 4
  store float %659, ptr %658, align 4
  br label %x_in_tile-after610

x_in_tile-true623:                                ; preds = %x_in_tile-after610
  %660 = mul nuw nsw i32 %649, 1
  %661 = add nuw nsw i32 0, %660
  %662 = mul nuw nsw i32 %648, 8192
  %663 = add nuw nsw i32 %661, %662
  %664 = mul nuw nsw i32 %tile_origin.0565, 8192
  %665 = add nuw nsw i32 %663, %664
  %666 = udiv i32 %665, 1
  %Arg_11.12625 = getelementptr inbounds float, ptr %arg11, i32 %665
  %Arg_11.12626 = load float, ptr %Arg_11.12625, align 4, !invariant.load !269
  %Arg_10.11627 = getelementptr inbounds float, ptr %arg10, i32 %665
  %Arg_10.11628 = load float, ptr %Arg_10.11627, align 4, !invariant.load !269
  %multiply.61629 = fmul float %Arg_11.12626, %Arg_10.11628
  %region_0_71_constant_14630 = load float, ptr @1, align 4
  %Arg_10.11631 = getelementptr inbounds float, ptr %arg10, i32 %665
  %Arg_10.11632 = load float, ptr %Arg_10.11631, align 4, !invariant.load !269
  %subtract.62633 = fsub float %region_0_71_constant_14630, %Arg_10.11632
  %multiply.63634 = fmul float %multiply.61629, %subtract.62633
  store float %multiply.63634, ptr %reduction_input_address556, align 4
  %667 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_65(ptr %667, ptr %reduction_input_address556, ptr %return_buffer635)
  %668 = load float, ptr %return_buffer635, align 4
  store float %668, ptr %667, align 4
  br label %x_in_tile-after624

intra_warp_reduce_write-true652:                  ; preds = %y_in_tile.loop_exit568
  %669 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i32 0, i32 %581, i32 0, i32 %606
  %670 = addrspacecast ptr addrspace(3) %669 to ptr
  %671 = load float, ptr %current_output636, align 4
  store float %671, ptr %670, align 4
  br label %intra_warp_reduce_write-after653

inter_warp_reduce-true654:                        ; preds = %intra_warp_reduce_write-after653
  %672 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i32 0, i32 %581, i32 0, i32 %lane_id562
  %673 = addrspacecast ptr addrspace(3) %672 to ptr
  store float %region_0_71_constant_19558, ptr %initial_value_addr656, align 4
  %674 = icmp ult i32 %thread_id.x560, 16
  %675 = select i1 %674, ptr %673, ptr %initial_value_addr656
  %partial_reduction_result658 = load float, ptr %675, align 4
  %676 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result658, i32 16, i32 31)
  store float %676, ptr %result_from_other_lane657, align 4
  call void @region_6_65(ptr %675, ptr %result_from_other_lane657, ptr %return_buffer659)
  %677 = load float, ptr %return_buffer659, align 4
  store float %677, ptr %675, align 4
  %partial_reduction_result661 = load float, ptr %675, align 4
  %678 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result661, i32 8, i32 31)
  store float %678, ptr %result_from_other_lane660, align 4
  call void @region_6_65(ptr %675, ptr %result_from_other_lane660, ptr %return_buffer662)
  %679 = load float, ptr %return_buffer662, align 4
  store float %679, ptr %675, align 4
  %partial_reduction_result664 = load float, ptr %675, align 4
  %680 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result664, i32 4, i32 31)
  store float %680, ptr %result_from_other_lane663, align 4
  call void @region_6_65(ptr %675, ptr %result_from_other_lane663, ptr %return_buffer665)
  %681 = load float, ptr %return_buffer665, align 4
  store float %681, ptr %675, align 4
  %partial_reduction_result667 = load float, ptr %675, align 4
  %682 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result667, i32 2, i32 31)
  store float %682, ptr %result_from_other_lane666, align 4
  call void @region_6_65(ptr %675, ptr %result_from_other_lane666, ptr %return_buffer668)
  %683 = load float, ptr %return_buffer668, align 4
  store float %683, ptr %675, align 4
  %partial_reduction_result670 = load float, ptr %675, align 4
  %684 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result670, i32 1, i32 31)
  store float %684, ptr %result_from_other_lane669, align 4
  call void @region_6_65(ptr %675, ptr %result_from_other_lane669, ptr %return_buffer671)
  %685 = load float, ptr %return_buffer671, align 4
  store float %685, ptr %675, align 4
  %686 = icmp eq i32 %thread_id.x560, 0
  br i1 %686, label %reduction_write_output-true672, label %reduction_write_output-after673

reduction_write_output-after673:                  ; preds = %reduction_write_output-true672, %inter_warp_reduce-true654
  br label %inter_warp_reduce-after655

reduction_write_output-true672:                   ; preds = %inter_warp_reduce-true654
  %687 = mul i32 %thread_id.x560, 2
  %688 = add i32 %tile_origin.1566, %thread_id.y561
  %689 = add i32 %tile_origin.2567, %687
  %690 = add i32 %689, 0
  %output674 = load float, ptr %675, align 4
  store float %output674, ptr %arg17, align 4
  br label %reduction_write_output-after673
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

define internal void @region_1_20(ptr dereferenceable(4) %Arg_0.21.typed, ptr dereferenceable(4) %Arg_1.22.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.23.typed = alloca float, align 4
  %Arg_0.21 = load float, ptr %Arg_0.21.typed, align 4
  %Arg_1.22 = load float, ptr %Arg_1.22.typed, align 4
  %add.23 = fadd float %Arg_0.21, %Arg_1.22
  store float %add.23, ptr %add.23.typed, align 4
  %load_ret_value = load float, ptr %add.23.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

define internal void @region_2_29(ptr dereferenceable(4) %Arg_0.30.typed, ptr dereferenceable(4) %Arg_1.31.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.32.typed = alloca float, align 4
  %Arg_0.30 = load float, ptr %Arg_0.30.typed, align 4
  %Arg_1.31 = load float, ptr %Arg_1.31.typed, align 4
  %add.32 = fadd float %Arg_0.30, %Arg_1.31
  store float %add.32, ptr %add.32.typed, align 4
  %load_ret_value = load float, ptr %add.32.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_38(ptr dereferenceable(4) %Arg_0.39.typed, ptr dereferenceable(4) %Arg_1.40.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.41.typed = alloca float, align 4
  %Arg_0.39 = load float, ptr %Arg_0.39.typed, align 4
  %Arg_1.40 = load float, ptr %Arg_1.40.typed, align 4
  %add.41 = fadd float %Arg_0.39, %Arg_1.40
  store float %add.41, ptr %add.41.typed, align 4
  %load_ret_value = load float, ptr %add.41.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_47(ptr dereferenceable(4) %Arg_0.48.typed, ptr dereferenceable(4) %Arg_1.49.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.50.typed = alloca float, align 4
  %Arg_0.48 = load float, ptr %Arg_0.48.typed, align 4
  %Arg_1.49 = load float, ptr %Arg_1.49.typed, align 4
  %add.50 = fadd float %Arg_0.48, %Arg_1.49
  store float %add.50, ptr %add.50.typed, align 4
  %load_ret_value = load float, ptr %add.50.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_56(ptr dereferenceable(4) %Arg_0.57.typed, ptr dereferenceable(4) %Arg_1.58.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.59.typed = alloca float, align 4
  %Arg_0.57 = load float, ptr %Arg_0.57.typed, align 4
  %Arg_1.58 = load float, ptr %Arg_1.58.typed, align 4
  %add.59 = fadd float %Arg_0.57, %Arg_1.58
  store float %add.59, ptr %add.59.typed, align 4
  %load_ret_value = load float, ptr %add.59.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_6_65(ptr dereferenceable(4) %Arg_0.66.typed, ptr dereferenceable(4) %Arg_1.67.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.68.typed = alloca float, align 4
  %Arg_0.66 = load float, ptr %Arg_0.66.typed, align 4
  %Arg_1.67 = load float, ptr %Arg_1.67.typed, align 4
  %add.68 = fadd float %Arg_0.66, %Arg_1.67
  store float %add.68, ptr %add.68.typed, align 4
  %load_ret_value = load float, ptr %add.68.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_660(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(32768) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 16 dereferenceable(32768) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 128 dereferenceable(4) %arg17, ptr noalias align 128 dereferenceable(4) %arg18, ptr noalias align 128 dereferenceable(4) %arg19, ptr noalias align 128 dereferenceable(4) %arg20, ptr noalias align 128 dereferenceable(4) %arg21, ptr noalias align 128 dereferenceable(4) %arg22, ptr noalias align 128 dereferenceable(4) %arg23) {
entry:
  %return_buffer909 = alloca float, align 4
  %result_from_other_lane907 = alloca float, align 4
  %return_buffer906 = alloca float, align 4
  %result_from_other_lane904 = alloca float, align 4
  %return_buffer903 = alloca float, align 4
  %result_from_other_lane901 = alloca float, align 4
  %return_buffer900 = alloca float, align 4
  %result_from_other_lane898 = alloca float, align 4
  %return_buffer897 = alloca float, align 4
  %result_from_other_lane895 = alloca float, align 4
  %initial_value_addr894 = alloca float, align 4
  %return_buffer889 = alloca float, align 4
  %result_from_other_lane887 = alloca float, align 4
  %return_buffer886 = alloca float, align 4
  %result_from_other_lane884 = alloca float, align 4
  %return_buffer883 = alloca float, align 4
  %result_from_other_lane881 = alloca float, align 4
  %return_buffer880 = alloca float, align 4
  %result_from_other_lane878 = alloca float, align 4
  %return_buffer877 = alloca float, align 4
  %result_from_other_lane875 = alloca float, align 4
  %return_buffer873 = alloca float, align 4
  %return_buffer859 = alloca float, align 4
  %tile_loop.invar_address843 = alloca i32, align 4
  %return_buffer839 = alloca float, align 4
  %return_buffer827 = alloca float, align 4
  %tile_loop.invar_address818 = alloca i32, align 4
  %y_in_tile.invar_address809 = alloca i32, align 4
  %partial_reduction_result795 = alloca float, align 4
  %reduction_input_address794 = alloca float, align 4
  %return_buffer790 = alloca float, align 4
  %result_from_other_lane788 = alloca float, align 4
  %return_buffer787 = alloca float, align 4
  %result_from_other_lane785 = alloca float, align 4
  %return_buffer784 = alloca float, align 4
  %result_from_other_lane782 = alloca float, align 4
  %return_buffer781 = alloca float, align 4
  %result_from_other_lane779 = alloca float, align 4
  %return_buffer778 = alloca float, align 4
  %result_from_other_lane776 = alloca float, align 4
  %initial_value_addr775 = alloca float, align 4
  %return_buffer770 = alloca float, align 4
  %result_from_other_lane768 = alloca float, align 4
  %return_buffer767 = alloca float, align 4
  %result_from_other_lane765 = alloca float, align 4
  %return_buffer764 = alloca float, align 4
  %result_from_other_lane762 = alloca float, align 4
  %return_buffer761 = alloca float, align 4
  %result_from_other_lane759 = alloca float, align 4
  %return_buffer758 = alloca float, align 4
  %result_from_other_lane756 = alloca float, align 4
  %return_buffer754 = alloca float, align 4
  %return_buffer740 = alloca float, align 4
  %tile_loop.invar_address724 = alloca i32, align 4
  %return_buffer720 = alloca float, align 4
  %return_buffer708 = alloca float, align 4
  %tile_loop.invar_address699 = alloca i32, align 4
  %y_in_tile.invar_address690 = alloca i32, align 4
  %partial_reduction_result676 = alloca float, align 4
  %reduction_input_address675 = alloca float, align 4
  %return_buffer671 = alloca float, align 4
  %result_from_other_lane669 = alloca float, align 4
  %return_buffer668 = alloca float, align 4
  %result_from_other_lane666 = alloca float, align 4
  %return_buffer665 = alloca float, align 4
  %result_from_other_lane663 = alloca float, align 4
  %return_buffer662 = alloca float, align 4
  %result_from_other_lane660 = alloca float, align 4
  %return_buffer659 = alloca float, align 4
  %result_from_other_lane657 = alloca float, align 4
  %initial_value_addr656 = alloca float, align 4
  %return_buffer651 = alloca float, align 4
  %result_from_other_lane649 = alloca float, align 4
  %return_buffer648 = alloca float, align 4
  %result_from_other_lane646 = alloca float, align 4
  %return_buffer645 = alloca float, align 4
  %result_from_other_lane643 = alloca float, align 4
  %return_buffer642 = alloca float, align 4
  %result_from_other_lane640 = alloca float, align 4
  %return_buffer639 = alloca float, align 4
  %result_from_other_lane637 = alloca float, align 4
  %return_buffer635 = alloca float, align 4
  %return_buffer621 = alloca float, align 4
  %tile_loop.invar_address605 = alloca i32, align 4
  %return_buffer601 = alloca float, align 4
  %return_buffer589 = alloca float, align 4
  %tile_loop.invar_address580 = alloca i32, align 4
  %y_in_tile.invar_address571 = alloca i32, align 4
  %partial_reduction_result557 = alloca float, align 4
  %reduction_input_address556 = alloca float, align 4
  %return_buffer552 = alloca float, align 4
  %result_from_other_lane550 = alloca float, align 4
  %return_buffer549 = alloca float, align 4
  %result_from_other_lane547 = alloca float, align 4
  %return_buffer546 = alloca float, align 4
  %result_from_other_lane544 = alloca float, align 4
  %return_buffer543 = alloca float, align 4
  %result_from_other_lane541 = alloca float, align 4
  %return_buffer540 = alloca float, align 4
  %result_from_other_lane538 = alloca float, align 4
  %initial_value_addr537 = alloca float, align 4
  %return_buffer532 = alloca float, align 4
  %result_from_other_lane530 = alloca float, align 4
  %return_buffer529 = alloca float, align 4
  %result_from_other_lane527 = alloca float, align 4
  %return_buffer526 = alloca float, align 4
  %result_from_other_lane524 = alloca float, align 4
  %return_buffer523 = alloca float, align 4
  %result_from_other_lane521 = alloca float, align 4
  %return_buffer520 = alloca float, align 4
  %result_from_other_lane518 = alloca float, align 4
  %return_buffer516 = alloca float, align 4
  %return_buffer502 = alloca float, align 4
  %tile_loop.invar_address486 = alloca i32, align 4
  %return_buffer482 = alloca float, align 4
  %return_buffer470 = alloca float, align 4
  %tile_loop.invar_address461 = alloca i32, align 4
  %y_in_tile.invar_address452 = alloca i32, align 4
  %partial_reduction_result438 = alloca float, align 4
  %reduction_input_address437 = alloca float, align 4
  %return_buffer433 = alloca float, align 4
  %result_from_other_lane431 = alloca float, align 4
  %return_buffer430 = alloca float, align 4
  %result_from_other_lane428 = alloca float, align 4
  %return_buffer427 = alloca float, align 4
  %result_from_other_lane425 = alloca float, align 4
  %return_buffer424 = alloca float, align 4
  %result_from_other_lane422 = alloca float, align 4
  %return_buffer421 = alloca float, align 4
  %result_from_other_lane419 = alloca float, align 4
  %initial_value_addr418 = alloca float, align 4
  %return_buffer413 = alloca float, align 4
  %result_from_other_lane411 = alloca float, align 4
  %return_buffer410 = alloca float, align 4
  %result_from_other_lane408 = alloca float, align 4
  %return_buffer407 = alloca float, align 4
  %result_from_other_lane405 = alloca float, align 4
  %return_buffer404 = alloca float, align 4
  %result_from_other_lane402 = alloca float, align 4
  %return_buffer401 = alloca float, align 4
  %result_from_other_lane399 = alloca float, align 4
  %return_buffer397 = alloca float, align 4
  %return_buffer383 = alloca float, align 4
  %tile_loop.invar_address367 = alloca i32, align 4
  %return_buffer363 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %tile_loop.invar_address342 = alloca i32, align 4
  %y_in_tile.invar_address333 = alloca i32, align 4
  %partial_reduction_result319 = alloca float, align 4
  %reduction_input_address318 = alloca float, align 4
  %return_buffer314 = alloca float, align 4
  %result_from_other_lane312 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %result_from_other_lane309 = alloca float, align 4
  %return_buffer308 = alloca float, align 4
  %result_from_other_lane306 = alloca float, align 4
  %return_buffer305 = alloca float, align 4
  %result_from_other_lane303 = alloca float, align 4
  %return_buffer302 = alloca float, align 4
  %result_from_other_lane300 = alloca float, align 4
  %initial_value_addr299 = alloca float, align 4
  %return_buffer294 = alloca float, align 4
  %result_from_other_lane292 = alloca float, align 4
  %return_buffer291 = alloca float, align 4
  %result_from_other_lane289 = alloca float, align 4
  %return_buffer288 = alloca float, align 4
  %result_from_other_lane286 = alloca float, align 4
  %return_buffer285 = alloca float, align 4
  %result_from_other_lane283 = alloca float, align 4
  %return_buffer282 = alloca float, align 4
  %result_from_other_lane280 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %return_buffer264 = alloca float, align 4
  %tile_loop.invar_address248 = alloca i32, align 4
  %return_buffer244 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address223 = alloca i32, align 4
  %y_in_tile.invar_address214 = alloca i32, align 4
  %partial_reduction_result200 = alloca float, align 4
  %reduction_input_address199 = alloca float, align 4
  %return_buffer195 = alloca float, align 4
  %result_from_other_lane193 = alloca float, align 4
  %return_buffer192 = alloca float, align 4
  %result_from_other_lane190 = alloca float, align 4
  %return_buffer189 = alloca float, align 4
  %result_from_other_lane187 = alloca float, align 4
  %return_buffer186 = alloca float, align 4
  %result_from_other_lane184 = alloca float, align 4
  %return_buffer183 = alloca float, align 4
  %result_from_other_lane181 = alloca float, align 4
  %initial_value_addr180 = alloca float, align 4
  %return_buffer175 = alloca float, align 4
  %result_from_other_lane173 = alloca float, align 4
  %return_buffer172 = alloca float, align 4
  %result_from_other_lane170 = alloca float, align 4
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer145 = alloca float, align 4
  %tile_loop.invar_address129 = alloca i32, align 4
  %return_buffer125 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %y_in_tile.invar_address95 = alloca i32, align 4
  %partial_reduction_result81 = alloca float, align 4
  %reduction_input_address80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %tile_loop.invar_address22 = alloca i32, align 4
  %return_buffer18 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !288
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after179, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %inter_warp_reduce-after298, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %inter_warp_reduce-after417, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %inter_warp_reduce-after536, %reduce-group-3-after
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %reduce-group-5-true, label %reduce-group-5-after

reduce-group-5-after:                             ; preds = %inter_warp_reduce-after655, %reduce-group-4-after
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %reduce-group-6-true, label %reduce-group-6-after

reduce-group-6-after:                             ; preds = %inter_warp_reduce-after774, %reduce-group-5-after
  %8 = icmp eq i32 %0, 7
  br i1 %8, label %reduce-group-7-true, label %reduce-group-7-after

reduce-group-7-after:                             ; preds = %inter_warp_reduce-after893, %reduce-group-6-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_93_constant_23 = load float, ptr @2, align 4
  %9 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_93_constant_23, ptr %9, align 4
  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %11 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %12 = urem i32 %10, 512
  %13 = udiv i32 %10, 512
  %14 = mul i32 %11, 1
  %15 = add i32 %14, %13
  %16 = icmp ult i32 %15, 1
  br i1 %16, label %17, label %early_return

17:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %12, 512
  %thread_id.y = udiv i32 %12, 512
  %lane_id = urem i32 %12, 32
  %18 = udiv i32 %15, 1
  %19 = urem i32 %18, 1
  %20 = udiv i32 %15, 1
  %21 = urem i32 %20, 1
  %22 = udiv i32 %15, 1
  %23 = icmp eq i32 %21, 0
  %tile_bound = select i1 %23, i32 1, i32 1
  %24 = icmp eq i32 %19, 0
  %tile_bound1 = select i1 %24, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %22, 1
  %tile_origin.1 = mul i32 %21, 1
  %tile_origin.2 = mul i32 %19, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %17
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %25 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %25, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %26 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %27 = icmp eq i32 8192, %tile_bound1
  br i1 %27, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit19, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !289

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result51 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %28, ptr %result_from_other_lane, align 4
  call void @region_1_24(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer52)
  %29 = load float, ptr %return_buffer52, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result54 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %30, ptr %result_from_other_lane53, align 4
  call void @region_1_24(ptr %current_output, ptr %result_from_other_lane53, ptr %return_buffer55)
  %31 = load float, ptr %return_buffer55, align 4
  store float %31, ptr %current_output, align 4
  %partial_reduction_result57 = load float, ptr %current_output, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %32, ptr %result_from_other_lane56, align 4
  call void @region_1_24(ptr %current_output, ptr %result_from_other_lane56, ptr %return_buffer58)
  %33 = load float, ptr %return_buffer58, align 4
  store float %33, ptr %current_output, align 4
  %partial_reduction_result60 = load float, ptr %current_output, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %34, ptr %result_from_other_lane59, align 4
  call void @region_1_24(ptr %current_output, ptr %result_from_other_lane59, ptr %return_buffer61)
  %35 = load float, ptr %return_buffer61, align 4
  store float %35, ptr %current_output, align 4
  %partial_reduction_result63 = load float, ptr %current_output, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %36, ptr %result_from_other_lane62, align 4
  call void @region_1_24(ptr %current_output, ptr %result_from_other_lane62, ptr %return_buffer64)
  %37 = load float, ptr %return_buffer64, align 4
  store float %37, ptr %current_output, align 4
  %38 = udiv i32 %thread_id.x, 32
  %39 = icmp eq i32 %lane_id, 0
  br i1 %39, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %40 = icmp eq i32 %38, 0
  br i1 %40, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %41 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %42 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %42, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %43 = icmp eq i32 %tile_loop.indvar, 0
  %44 = mul i32 %tile_loop.indvar, 1024
  %45 = add i32 %44, 0
  %x_loc = add i32 %45, %41
  %46 = add i32 %tile_origin.1, %y_in_tile.indvar
  %47 = add i32 %tile_origin.2, %x_loc
  %48 = mul nuw nsw i32 %47, 1
  %49 = add nuw nsw i32 0, %48
  %50 = mul nuw nsw i32 %46, 8192
  %51 = add nuw nsw i32 %49, %50
  %52 = mul nuw nsw i32 %tile_origin.0, 8192
  %53 = add nuw nsw i32 %51, %52
  %54 = udiv i32 %53, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %53
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %53
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.17 = fmul float %Arg_1.23, %Arg_0.14
  %region_0_93_constant_18 = load float, ptr @3, align 4
  %Arg_0.15 = getelementptr inbounds float, ptr %arg0, i32 %53
  %Arg_0.16 = load float, ptr %Arg_0.15, align 4, !invariant.load !269
  %subtract.20 = fsub float %region_0_93_constant_18, %Arg_0.16
  %multiply.21 = fmul float %multiply.17, %subtract.20
  store float %multiply.21, ptr %reduction_input_address, align 4
  %55 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_24(ptr %55, ptr %reduction_input_address, ptr %return_buffer)
  %56 = load float, ptr %return_buffer, align 4
  store float %56, ptr %55, align 4
  %57 = mul i32 %tile_loop.indvar, 1024
  %58 = add i32 %57, 1
  %x_loc7 = add i32 %58, %41
  %59 = add i32 %tile_origin.1, %y_in_tile.indvar
  %60 = add i32 %tile_origin.2, %x_loc7
  %61 = mul nuw nsw i32 %60, 1
  %62 = add nuw nsw i32 0, %61
  %63 = mul nuw nsw i32 %59, 8192
  %64 = add nuw nsw i32 %62, %63
  %65 = mul nuw nsw i32 %tile_origin.0, 8192
  %66 = add nuw nsw i32 %64, %65
  %67 = udiv i32 %66, 1
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %66
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !269
  %Arg_0.110 = getelementptr inbounds float, ptr %arg0, i32 %66
  %Arg_0.111 = load float, ptr %Arg_0.110, align 4, !invariant.load !269
  %multiply.1712 = fmul float %Arg_1.29, %Arg_0.111
  %region_0_93_constant_1813 = load float, ptr @3, align 4
  %Arg_0.114 = getelementptr inbounds float, ptr %arg0, i32 %66
  %Arg_0.115 = load float, ptr %Arg_0.114, align 4, !invariant.load !269
  %subtract.2016 = fsub float %region_0_93_constant_1813, %Arg_0.115
  %multiply.2117 = fmul float %multiply.1712, %subtract.2016
  store float %multiply.2117, ptr %reduction_input_address, align 4
  %68 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_24(ptr %68, ptr %reduction_input_address, ptr %return_buffer18)
  %69 = load float, ptr %return_buffer18, align 4
  store float %69, ptr %68, align 4
  br label %tile_loop.loop_header, !llvm.loop !290

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %70 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address22, align 4
  br label %tile_loop.loop_header20

tile_loop.loop_header20:                          ; preds = %x_in_tile-after39, %is_full_tile-false
  %tile_loop.indvar23 = load i32, ptr %tile_loop.invar_address22, align 4
  %71 = icmp uge i32 %tile_loop.indvar23, 8
  br i1 %71, label %tile_loop.loop_exit19, label %tile_loop.loop_body21

tile_loop.loop_body21:                            ; preds = %tile_loop.loop_header20
  %invar.inc24 = add nuw nsw i32 %tile_loop.indvar23, 1
  store i32 %invar.inc24, ptr %tile_loop.invar_address22, align 4
  %72 = icmp eq i32 %tile_loop.indvar23, 0
  %73 = mul i32 %tile_loop.indvar23, 1024
  %74 = add i32 %73, 0
  %x_loc25 = add i32 %74, %70
  %75 = add i32 %tile_origin.1, %y_in_tile.indvar
  %76 = add i32 %tile_origin.2, %x_loc25
  %77 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %77, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body21
  %78 = mul i32 %tile_loop.indvar23, 1024
  %79 = add i32 %78, 1
  %x_loc37 = add i32 %79, %70
  %80 = add i32 %tile_origin.1, %y_in_tile.indvar
  %81 = add i32 %tile_origin.2, %x_loc37
  %82 = icmp ult i32 %x_loc37, %tile_bound1
  br i1 %82, label %x_in_tile-true38, label %x_in_tile-after39

x_in_tile-after39:                                ; preds = %x_in_tile-true38, %x_in_tile-after
  br label %tile_loop.loop_header20, !llvm.loop !291

tile_loop.loop_exit19:                            ; preds = %tile_loop.loop_header20
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body21
  %83 = mul nuw nsw i32 %76, 1
  %84 = add nuw nsw i32 0, %83
  %85 = mul nuw nsw i32 %75, 8192
  %86 = add nuw nsw i32 %84, %85
  %87 = mul nuw nsw i32 %tile_origin.0, 8192
  %88 = add nuw nsw i32 %86, %87
  %89 = udiv i32 %88, 1
  %Arg_1.226 = getelementptr inbounds float, ptr %arg1, i32 %88
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !269
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %88
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !269
  %multiply.1730 = fmul float %Arg_1.227, %Arg_0.129
  %region_0_93_constant_1831 = load float, ptr @3, align 4
  %Arg_0.132 = getelementptr inbounds float, ptr %arg0, i32 %88
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !269
  %subtract.2034 = fsub float %region_0_93_constant_1831, %Arg_0.133
  %multiply.2135 = fmul float %multiply.1730, %subtract.2034
  store float %multiply.2135, ptr %reduction_input_address, align 4
  %90 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_24(ptr %90, ptr %reduction_input_address, ptr %return_buffer36)
  %91 = load float, ptr %return_buffer36, align 4
  store float %91, ptr %90, align 4
  br label %x_in_tile-after

x_in_tile-true38:                                 ; preds = %x_in_tile-after
  %92 = mul nuw nsw i32 %81, 1
  %93 = add nuw nsw i32 0, %92
  %94 = mul nuw nsw i32 %80, 8192
  %95 = add nuw nsw i32 %93, %94
  %96 = mul nuw nsw i32 %tile_origin.0, 8192
  %97 = add nuw nsw i32 %95, %96
  %98 = udiv i32 %97, 1
  %Arg_1.240 = getelementptr inbounds float, ptr %arg1, i32 %97
  %Arg_1.241 = load float, ptr %Arg_1.240, align 4, !invariant.load !269
  %Arg_0.142 = getelementptr inbounds float, ptr %arg0, i32 %97
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !269
  %multiply.1744 = fmul float %Arg_1.241, %Arg_0.143
  %region_0_93_constant_1845 = load float, ptr @3, align 4
  %Arg_0.146 = getelementptr inbounds float, ptr %arg0, i32 %97
  %Arg_0.147 = load float, ptr %Arg_0.146, align 4, !invariant.load !269
  %subtract.2048 = fsub float %region_0_93_constant_1845, %Arg_0.147
  %multiply.2149 = fmul float %multiply.1744, %subtract.2048
  store float %multiply.2149, ptr %reduction_input_address, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_24(ptr %99, ptr %reduction_input_address, ptr %return_buffer50)
  %100 = load float, ptr %return_buffer50, align 4
  store float %100, ptr %99, align 4
  br label %x_in_tile-after39

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %101 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i32 0, i32 %13, i32 0, i32 %38
  %102 = addrspacecast ptr addrspace(3) %101 to ptr
  %103 = load float, ptr %current_output, align 4
  store float %103, ptr %102, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %104 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i32 0, i32 %13, i32 0, i32 %lane_id
  %105 = addrspacecast ptr addrspace(3) %104 to ptr
  store float %region_0_93_constant_23, ptr %initial_value_addr, align 4
  %106 = icmp ult i32 %thread_id.x, 16
  %107 = select i1 %106, ptr %105, ptr %initial_value_addr
  %partial_reduction_result66 = load float, ptr %107, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %108, ptr %result_from_other_lane65, align 4
  call void @region_1_24(ptr %107, ptr %result_from_other_lane65, ptr %return_buffer67)
  %109 = load float, ptr %return_buffer67, align 4
  store float %109, ptr %107, align 4
  %partial_reduction_result69 = load float, ptr %107, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %110, ptr %result_from_other_lane68, align 4
  call void @region_1_24(ptr %107, ptr %result_from_other_lane68, ptr %return_buffer70)
  %111 = load float, ptr %return_buffer70, align 4
  store float %111, ptr %107, align 4
  %partial_reduction_result72 = load float, ptr %107, align 4
  %112 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %112, ptr %result_from_other_lane71, align 4
  call void @region_1_24(ptr %107, ptr %result_from_other_lane71, ptr %return_buffer73)
  %113 = load float, ptr %return_buffer73, align 4
  store float %113, ptr %107, align 4
  %partial_reduction_result75 = load float, ptr %107, align 4
  %114 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %114, ptr %result_from_other_lane74, align 4
  call void @region_1_24(ptr %107, ptr %result_from_other_lane74, ptr %return_buffer76)
  %115 = load float, ptr %return_buffer76, align 4
  store float %115, ptr %107, align 4
  %partial_reduction_result78 = load float, ptr %107, align 4
  %116 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %116, ptr %result_from_other_lane77, align 4
  call void @region_1_24(ptr %107, ptr %result_from_other_lane77, ptr %return_buffer79)
  %117 = load float, ptr %return_buffer79, align 4
  store float %117, ptr %107, align 4
  %118 = icmp eq i32 %thread_id.x, 0
  br i1 %118, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %119 = mul i32 %thread_id.x, 2
  %120 = add i32 %tile_origin.1, %thread_id.y
  %121 = add i32 %tile_origin.2, %119
  %122 = add i32 %121, 0
  %output = load float, ptr %107, align 4
  store float %output, ptr %arg16, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_93_constant_2382 = load float, ptr @2, align 4
  %123 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  store float %region_0_93_constant_2382, ptr %123, align 4
  %124 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %125 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %126 = urem i32 %124, 512
  %127 = udiv i32 %124, 512
  %128 = mul i32 %125, 1
  %129 = add i32 %128, %127
  %130 = icmp ult i32 %129, 1
  br i1 %130, label %131, label %early_return83

131:                                              ; preds = %reduce-group-1-true
  %thread_id.x84 = urem i32 %126, 512
  %thread_id.y85 = udiv i32 %126, 512
  %lane_id86 = urem i32 %126, 32
  %132 = udiv i32 %129, 1
  %133 = urem i32 %132, 1
  %134 = udiv i32 %129, 1
  %135 = urem i32 %134, 1
  %136 = udiv i32 %129, 1
  %137 = icmp eq i32 %135, 0
  %tile_bound87 = select i1 %137, i32 1, i32 1
  %138 = icmp eq i32 %133, 0
  %tile_bound88 = select i1 %138, i32 8192, i32 8192
  %tile_origin.089 = mul i32 %136, 1
  %tile_origin.190 = mul i32 %135, 1
  %tile_origin.291 = mul i32 %133, 8192
  store i32 %thread_id.y85, ptr %y_in_tile.invar_address95, align 4
  br label %y_in_tile.loop_header93

y_in_tile.loop_header93:                          ; preds = %is_full_tile-after100, %131
  %y_in_tile.indvar96 = load i32, ptr %y_in_tile.invar_address95, align 4
  %139 = icmp uge i32 %y_in_tile.indvar96, %tile_bound87
  br i1 %139, label %y_in_tile.loop_exit92, label %y_in_tile.loop_body94

y_in_tile.loop_body94:                            ; preds = %y_in_tile.loop_header93
  %invar.inc97 = add nuw nsw i32 %y_in_tile.indvar96, 1
  store i32 %invar.inc97, ptr %y_in_tile.invar_address95, align 4
  %140 = icmp eq i32 %y_in_tile.indvar96, %thread_id.y85
  %141 = icmp eq i32 8192, %tile_bound88
  br i1 %141, label %is_full_tile-true98, label %is_full_tile-false99

is_full_tile-after100:                            ; preds = %tile_loop.loop_exit126, %tile_loop.loop_exit101
  br label %y_in_tile.loop_header93, !llvm.loop !292

y_in_tile.loop_exit92:                            ; preds = %y_in_tile.loop_header93
  %current_output160 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  %partial_reduction_result162 = load float, ptr %current_output160, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 16, i32 31)
  store float %142, ptr %result_from_other_lane161, align 4
  call void @region_2_33(ptr %current_output160, ptr %result_from_other_lane161, ptr %return_buffer163)
  %143 = load float, ptr %return_buffer163, align 4
  store float %143, ptr %current_output160, align 4
  %partial_reduction_result165 = load float, ptr %current_output160, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 8, i32 31)
  store float %144, ptr %result_from_other_lane164, align 4
  call void @region_2_33(ptr %current_output160, ptr %result_from_other_lane164, ptr %return_buffer166)
  %145 = load float, ptr %return_buffer166, align 4
  store float %145, ptr %current_output160, align 4
  %partial_reduction_result168 = load float, ptr %current_output160, align 4
  %146 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 4, i32 31)
  store float %146, ptr %result_from_other_lane167, align 4
  call void @region_2_33(ptr %current_output160, ptr %result_from_other_lane167, ptr %return_buffer169)
  %147 = load float, ptr %return_buffer169, align 4
  store float %147, ptr %current_output160, align 4
  %partial_reduction_result171 = load float, ptr %current_output160, align 4
  %148 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result171, i32 2, i32 31)
  store float %148, ptr %result_from_other_lane170, align 4
  call void @region_2_33(ptr %current_output160, ptr %result_from_other_lane170, ptr %return_buffer172)
  %149 = load float, ptr %return_buffer172, align 4
  store float %149, ptr %current_output160, align 4
  %partial_reduction_result174 = load float, ptr %current_output160, align 4
  %150 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result174, i32 1, i32 31)
  store float %150, ptr %result_from_other_lane173, align 4
  call void @region_2_33(ptr %current_output160, ptr %result_from_other_lane173, ptr %return_buffer175)
  %151 = load float, ptr %return_buffer175, align 4
  store float %151, ptr %current_output160, align 4
  %152 = udiv i32 %thread_id.x84, 32
  %153 = icmp eq i32 %lane_id86, 0
  br i1 %153, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %y_in_tile.loop_exit92
  call void @llvm.nvvm.barrier0()
  %154 = icmp eq i32 %152, 0
  br i1 %154, label %inter_warp_reduce-true178, label %inter_warp_reduce-after179

inter_warp_reduce-after179:                       ; preds = %reduction_write_output-after197, %intra_warp_reduce_write-after177
  br label %reduce-group-1-after

early_return83:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true98:                              ; preds = %y_in_tile.loop_body94
  %155 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %tile_loop.loop_body103, %is_full_tile-true98
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %156 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %156, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %157 = icmp eq i32 %tile_loop.indvar105, 0
  %158 = mul i32 %tile_loop.indvar105, 1024
  %159 = add i32 %158, 0
  %x_loc107 = add i32 %159, %155
  %160 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %161 = add i32 %tile_origin.291, %x_loc107
  %162 = mul nuw nsw i32 %161, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %160, 8192
  %165 = add nuw nsw i32 %163, %164
  %166 = mul nuw nsw i32 %tile_origin.089, 8192
  %167 = add nuw nsw i32 %165, %166
  %168 = udiv i32 %167, 1
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %167
  %Arg_3.4108 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %167
  %Arg_2.3109 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %multiply.29 = fmul float %Arg_3.4108, %Arg_2.3109
  %region_0_93_constant_18110 = load float, ptr @3, align 4
  %Arg_2.3111 = getelementptr inbounds float, ptr %arg2, i32 %167
  %Arg_2.3112 = load float, ptr %Arg_2.3111, align 4, !invariant.load !269
  %subtract.30 = fsub float %region_0_93_constant_18110, %Arg_2.3112
  %multiply.31 = fmul float %multiply.29, %subtract.30
  store float %multiply.31, ptr %reduction_input_address80, align 4
  %169 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_33(ptr %169, ptr %reduction_input_address80, ptr %return_buffer113)
  %170 = load float, ptr %return_buffer113, align 4
  store float %170, ptr %169, align 4
  %171 = mul i32 %tile_loop.indvar105, 1024
  %172 = add i32 %171, 1
  %x_loc114 = add i32 %172, %155
  %173 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %174 = add i32 %tile_origin.291, %x_loc114
  %175 = mul nuw nsw i32 %174, 1
  %176 = add nuw nsw i32 0, %175
  %177 = mul nuw nsw i32 %173, 8192
  %178 = add nuw nsw i32 %176, %177
  %179 = mul nuw nsw i32 %tile_origin.089, 8192
  %180 = add nuw nsw i32 %178, %179
  %181 = udiv i32 %180, 1
  %Arg_3.4115 = getelementptr inbounds float, ptr %arg3, i32 %180
  %Arg_3.4116 = load float, ptr %Arg_3.4115, align 4, !invariant.load !269
  %Arg_2.3117 = getelementptr inbounds float, ptr %arg2, i32 %180
  %Arg_2.3118 = load float, ptr %Arg_2.3117, align 4, !invariant.load !269
  %multiply.29119 = fmul float %Arg_3.4116, %Arg_2.3118
  %region_0_93_constant_18120 = load float, ptr @3, align 4
  %Arg_2.3121 = getelementptr inbounds float, ptr %arg2, i32 %180
  %Arg_2.3122 = load float, ptr %Arg_2.3121, align 4, !invariant.load !269
  %subtract.30123 = fsub float %region_0_93_constant_18120, %Arg_2.3122
  %multiply.31124 = fmul float %multiply.29119, %subtract.30123
  store float %multiply.31124, ptr %reduction_input_address80, align 4
  %182 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_33(ptr %182, ptr %reduction_input_address80, ptr %return_buffer125)
  %183 = load float, ptr %return_buffer125, align 4
  store float %183, ptr %182, align 4
  br label %tile_loop.loop_header102, !llvm.loop !293

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after100

is_full_tile-false99:                             ; preds = %y_in_tile.loop_body94
  %184 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address129, align 4
  br label %tile_loop.loop_header127

tile_loop.loop_header127:                         ; preds = %x_in_tile-after148, %is_full_tile-false99
  %tile_loop.indvar130 = load i32, ptr %tile_loop.invar_address129, align 4
  %185 = icmp uge i32 %tile_loop.indvar130, 8
  br i1 %185, label %tile_loop.loop_exit126, label %tile_loop.loop_body128

tile_loop.loop_body128:                           ; preds = %tile_loop.loop_header127
  %invar.inc131 = add nuw nsw i32 %tile_loop.indvar130, 1
  store i32 %invar.inc131, ptr %tile_loop.invar_address129, align 4
  %186 = icmp eq i32 %tile_loop.indvar130, 0
  %187 = mul i32 %tile_loop.indvar130, 1024
  %188 = add i32 %187, 0
  %x_loc132 = add i32 %188, %184
  %189 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %190 = add i32 %tile_origin.291, %x_loc132
  %191 = icmp ult i32 %x_loc132, %tile_bound88
  br i1 %191, label %x_in_tile-true133, label %x_in_tile-after134

x_in_tile-after134:                               ; preds = %x_in_tile-true133, %tile_loop.loop_body128
  %192 = mul i32 %tile_loop.indvar130, 1024
  %193 = add i32 %192, 1
  %x_loc146 = add i32 %193, %184
  %194 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %195 = add i32 %tile_origin.291, %x_loc146
  %196 = icmp ult i32 %x_loc146, %tile_bound88
  br i1 %196, label %x_in_tile-true147, label %x_in_tile-after148

x_in_tile-after148:                               ; preds = %x_in_tile-true147, %x_in_tile-after134
  br label %tile_loop.loop_header127, !llvm.loop !294

tile_loop.loop_exit126:                           ; preds = %tile_loop.loop_header127
  br label %is_full_tile-after100

x_in_tile-true133:                                ; preds = %tile_loop.loop_body128
  %197 = mul nuw nsw i32 %190, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %189, 8192
  %200 = add nuw nsw i32 %198, %199
  %201 = mul nuw nsw i32 %tile_origin.089, 8192
  %202 = add nuw nsw i32 %200, %201
  %203 = udiv i32 %202, 1
  %Arg_3.4135 = getelementptr inbounds float, ptr %arg3, i32 %202
  %Arg_3.4136 = load float, ptr %Arg_3.4135, align 4, !invariant.load !269
  %Arg_2.3137 = getelementptr inbounds float, ptr %arg2, i32 %202
  %Arg_2.3138 = load float, ptr %Arg_2.3137, align 4, !invariant.load !269
  %multiply.29139 = fmul float %Arg_3.4136, %Arg_2.3138
  %region_0_93_constant_18140 = load float, ptr @3, align 4
  %Arg_2.3141 = getelementptr inbounds float, ptr %arg2, i32 %202
  %Arg_2.3142 = load float, ptr %Arg_2.3141, align 4, !invariant.load !269
  %subtract.30143 = fsub float %region_0_93_constant_18140, %Arg_2.3142
  %multiply.31144 = fmul float %multiply.29139, %subtract.30143
  store float %multiply.31144, ptr %reduction_input_address80, align 4
  %204 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_33(ptr %204, ptr %reduction_input_address80, ptr %return_buffer145)
  %205 = load float, ptr %return_buffer145, align 4
  store float %205, ptr %204, align 4
  br label %x_in_tile-after134

x_in_tile-true147:                                ; preds = %x_in_tile-after134
  %206 = mul nuw nsw i32 %195, 1
  %207 = add nuw nsw i32 0, %206
  %208 = mul nuw nsw i32 %194, 8192
  %209 = add nuw nsw i32 %207, %208
  %210 = mul nuw nsw i32 %tile_origin.089, 8192
  %211 = add nuw nsw i32 %209, %210
  %212 = udiv i32 %211, 1
  %Arg_3.4149 = getelementptr inbounds float, ptr %arg3, i32 %211
  %Arg_3.4150 = load float, ptr %Arg_3.4149, align 4, !invariant.load !269
  %Arg_2.3151 = getelementptr inbounds float, ptr %arg2, i32 %211
  %Arg_2.3152 = load float, ptr %Arg_2.3151, align 4, !invariant.load !269
  %multiply.29153 = fmul float %Arg_3.4150, %Arg_2.3152
  %region_0_93_constant_18154 = load float, ptr @3, align 4
  %Arg_2.3155 = getelementptr inbounds float, ptr %arg2, i32 %211
  %Arg_2.3156 = load float, ptr %Arg_2.3155, align 4, !invariant.load !269
  %subtract.30157 = fsub float %region_0_93_constant_18154, %Arg_2.3156
  %multiply.31158 = fmul float %multiply.29153, %subtract.30157
  store float %multiply.31158, ptr %reduction_input_address80, align 4
  %213 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_33(ptr %213, ptr %reduction_input_address80, ptr %return_buffer159)
  %214 = load float, ptr %return_buffer159, align 4
  store float %214, ptr %213, align 4
  br label %x_in_tile-after148

intra_warp_reduce_write-true176:                  ; preds = %y_in_tile.loop_exit92
  %215 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i32 0, i32 %127, i32 0, i32 %152
  %216 = addrspacecast ptr addrspace(3) %215 to ptr
  %217 = load float, ptr %current_output160, align 4
  store float %217, ptr %216, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %218 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i32 0, i32 %127, i32 0, i32 %lane_id86
  %219 = addrspacecast ptr addrspace(3) %218 to ptr
  store float %region_0_93_constant_2382, ptr %initial_value_addr180, align 4
  %220 = icmp ult i32 %thread_id.x84, 16
  %221 = select i1 %220, ptr %219, ptr %initial_value_addr180
  %partial_reduction_result182 = load float, ptr %221, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  store float %222, ptr %result_from_other_lane181, align 4
  call void @region_2_33(ptr %221, ptr %result_from_other_lane181, ptr %return_buffer183)
  %223 = load float, ptr %return_buffer183, align 4
  store float %223, ptr %221, align 4
  %partial_reduction_result185 = load float, ptr %221, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result185, i32 8, i32 31)
  store float %224, ptr %result_from_other_lane184, align 4
  call void @region_2_33(ptr %221, ptr %result_from_other_lane184, ptr %return_buffer186)
  %225 = load float, ptr %return_buffer186, align 4
  store float %225, ptr %221, align 4
  %partial_reduction_result188 = load float, ptr %221, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result188, i32 4, i32 31)
  store float %226, ptr %result_from_other_lane187, align 4
  call void @region_2_33(ptr %221, ptr %result_from_other_lane187, ptr %return_buffer189)
  %227 = load float, ptr %return_buffer189, align 4
  store float %227, ptr %221, align 4
  %partial_reduction_result191 = load float, ptr %221, align 4
  %228 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result191, i32 2, i32 31)
  store float %228, ptr %result_from_other_lane190, align 4
  call void @region_2_33(ptr %221, ptr %result_from_other_lane190, ptr %return_buffer192)
  %229 = load float, ptr %return_buffer192, align 4
  store float %229, ptr %221, align 4
  %partial_reduction_result194 = load float, ptr %221, align 4
  %230 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result194, i32 1, i32 31)
  store float %230, ptr %result_from_other_lane193, align 4
  call void @region_2_33(ptr %221, ptr %result_from_other_lane193, ptr %return_buffer195)
  %231 = load float, ptr %return_buffer195, align 4
  store float %231, ptr %221, align 4
  %232 = icmp eq i32 %thread_id.x84, 0
  br i1 %232, label %reduction_write_output-true196, label %reduction_write_output-after197

reduction_write_output-after197:                  ; preds = %reduction_write_output-true196, %inter_warp_reduce-true178
  br label %inter_warp_reduce-after179

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178
  %233 = mul i32 %thread_id.x84, 2
  %234 = add i32 %tile_origin.190, %thread_id.y85
  %235 = add i32 %tile_origin.291, %233
  %236 = add i32 %235, 0
  %output198 = load float, ptr %221, align 4
  store float %output198, ptr %arg17, align 4
  br label %reduction_write_output-after197

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %region_0_93_constant_23201 = load float, ptr @2, align 4
  %237 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  store float %region_0_93_constant_23201, ptr %237, align 4
  %238 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %239 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %240 = urem i32 %238, 512
  %241 = udiv i32 %238, 512
  %242 = mul i32 %239, 1
  %243 = add i32 %242, %241
  %244 = icmp ult i32 %243, 1
  br i1 %244, label %245, label %early_return202

245:                                              ; preds = %reduce-group-2-true
  %thread_id.x203 = urem i32 %240, 512
  %thread_id.y204 = udiv i32 %240, 512
  %lane_id205 = urem i32 %240, 32
  %246 = udiv i32 %243, 1
  %247 = urem i32 %246, 1
  %248 = udiv i32 %243, 1
  %249 = urem i32 %248, 1
  %250 = udiv i32 %243, 1
  %251 = icmp eq i32 %249, 0
  %tile_bound206 = select i1 %251, i32 1, i32 1
  %252 = icmp eq i32 %247, 0
  %tile_bound207 = select i1 %252, i32 8192, i32 8192
  %tile_origin.0208 = mul i32 %250, 1
  %tile_origin.1209 = mul i32 %249, 1
  %tile_origin.2210 = mul i32 %247, 8192
  store i32 %thread_id.y204, ptr %y_in_tile.invar_address214, align 4
  br label %y_in_tile.loop_header212

y_in_tile.loop_header212:                         ; preds = %is_full_tile-after219, %245
  %y_in_tile.indvar215 = load i32, ptr %y_in_tile.invar_address214, align 4
  %253 = icmp uge i32 %y_in_tile.indvar215, %tile_bound206
  br i1 %253, label %y_in_tile.loop_exit211, label %y_in_tile.loop_body213

y_in_tile.loop_body213:                           ; preds = %y_in_tile.loop_header212
  %invar.inc216 = add nuw nsw i32 %y_in_tile.indvar215, 1
  store i32 %invar.inc216, ptr %y_in_tile.invar_address214, align 4
  %254 = icmp eq i32 %y_in_tile.indvar215, %thread_id.y204
  %255 = icmp eq i32 8192, %tile_bound207
  br i1 %255, label %is_full_tile-true217, label %is_full_tile-false218

is_full_tile-after219:                            ; preds = %tile_loop.loop_exit245, %tile_loop.loop_exit220
  br label %y_in_tile.loop_header212, !llvm.loop !295

y_in_tile.loop_exit211:                           ; preds = %y_in_tile.loop_header212
  %current_output279 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  %partial_reduction_result281 = load float, ptr %current_output279, align 4
  %256 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result281, i32 16, i32 31)
  store float %256, ptr %result_from_other_lane280, align 4
  call void @region_3_42(ptr %current_output279, ptr %result_from_other_lane280, ptr %return_buffer282)
  %257 = load float, ptr %return_buffer282, align 4
  store float %257, ptr %current_output279, align 4
  %partial_reduction_result284 = load float, ptr %current_output279, align 4
  %258 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result284, i32 8, i32 31)
  store float %258, ptr %result_from_other_lane283, align 4
  call void @region_3_42(ptr %current_output279, ptr %result_from_other_lane283, ptr %return_buffer285)
  %259 = load float, ptr %return_buffer285, align 4
  store float %259, ptr %current_output279, align 4
  %partial_reduction_result287 = load float, ptr %current_output279, align 4
  %260 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result287, i32 4, i32 31)
  store float %260, ptr %result_from_other_lane286, align 4
  call void @region_3_42(ptr %current_output279, ptr %result_from_other_lane286, ptr %return_buffer288)
  %261 = load float, ptr %return_buffer288, align 4
  store float %261, ptr %current_output279, align 4
  %partial_reduction_result290 = load float, ptr %current_output279, align 4
  %262 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result290, i32 2, i32 31)
  store float %262, ptr %result_from_other_lane289, align 4
  call void @region_3_42(ptr %current_output279, ptr %result_from_other_lane289, ptr %return_buffer291)
  %263 = load float, ptr %return_buffer291, align 4
  store float %263, ptr %current_output279, align 4
  %partial_reduction_result293 = load float, ptr %current_output279, align 4
  %264 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result293, i32 1, i32 31)
  store float %264, ptr %result_from_other_lane292, align 4
  call void @region_3_42(ptr %current_output279, ptr %result_from_other_lane292, ptr %return_buffer294)
  %265 = load float, ptr %return_buffer294, align 4
  store float %265, ptr %current_output279, align 4
  %266 = udiv i32 %thread_id.x203, 32
  %267 = icmp eq i32 %lane_id205, 0
  br i1 %267, label %intra_warp_reduce_write-true295, label %intra_warp_reduce_write-after296

intra_warp_reduce_write-after296:                 ; preds = %intra_warp_reduce_write-true295, %y_in_tile.loop_exit211
  call void @llvm.nvvm.barrier0()
  %268 = icmp eq i32 %266, 0
  br i1 %268, label %inter_warp_reduce-true297, label %inter_warp_reduce-after298

inter_warp_reduce-after298:                       ; preds = %reduction_write_output-after316, %intra_warp_reduce_write-after296
  br label %reduce-group-2-after

early_return202:                                  ; preds = %reduce-group-2-true
  ret void

is_full_tile-true217:                             ; preds = %y_in_tile.loop_body213
  %269 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address223, align 4
  br label %tile_loop.loop_header221

tile_loop.loop_header221:                         ; preds = %tile_loop.loop_body222, %is_full_tile-true217
  %tile_loop.indvar224 = load i32, ptr %tile_loop.invar_address223, align 4
  %270 = icmp uge i32 %tile_loop.indvar224, 8
  br i1 %270, label %tile_loop.loop_exit220, label %tile_loop.loop_body222

tile_loop.loop_body222:                           ; preds = %tile_loop.loop_header221
  %invar.inc225 = add nuw nsw i32 %tile_loop.indvar224, 1
  store i32 %invar.inc225, ptr %tile_loop.invar_address223, align 4
  %271 = icmp eq i32 %tile_loop.indvar224, 0
  %272 = mul i32 %tile_loop.indvar224, 1024
  %273 = add i32 %272, 0
  %x_loc226 = add i32 %273, %269
  %274 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %275 = add i32 %tile_origin.2210, %x_loc226
  %276 = mul nuw nsw i32 %275, 1
  %277 = add nuw nsw i32 0, %276
  %278 = mul nuw nsw i32 %274, 8192
  %279 = add nuw nsw i32 %277, %278
  %280 = mul nuw nsw i32 %tile_origin.0208, 8192
  %281 = add nuw nsw i32 %279, %280
  %282 = udiv i32 %281, 1
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %281
  %Arg_5.6227 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %281
  %Arg_4.5228 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.38 = fmul float %Arg_5.6227, %Arg_4.5228
  %region_0_93_constant_18229 = load float, ptr @3, align 4
  %Arg_4.5230 = getelementptr inbounds float, ptr %arg4, i32 %281
  %Arg_4.5231 = load float, ptr %Arg_4.5230, align 4, !invariant.load !269
  %subtract.39 = fsub float %region_0_93_constant_18229, %Arg_4.5231
  %multiply.40 = fmul float %multiply.38, %subtract.39
  store float %multiply.40, ptr %reduction_input_address199, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_42(ptr %283, ptr %reduction_input_address199, ptr %return_buffer232)
  %284 = load float, ptr %return_buffer232, align 4
  store float %284, ptr %283, align 4
  %285 = mul i32 %tile_loop.indvar224, 1024
  %286 = add i32 %285, 1
  %x_loc233 = add i32 %286, %269
  %287 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %288 = add i32 %tile_origin.2210, %x_loc233
  %289 = mul nuw nsw i32 %288, 1
  %290 = add nuw nsw i32 0, %289
  %291 = mul nuw nsw i32 %287, 8192
  %292 = add nuw nsw i32 %290, %291
  %293 = mul nuw nsw i32 %tile_origin.0208, 8192
  %294 = add nuw nsw i32 %292, %293
  %295 = udiv i32 %294, 1
  %Arg_5.6234 = getelementptr inbounds float, ptr %arg5, i32 %294
  %Arg_5.6235 = load float, ptr %Arg_5.6234, align 4, !invariant.load !269
  %Arg_4.5236 = getelementptr inbounds float, ptr %arg4, i32 %294
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  %multiply.38238 = fmul float %Arg_5.6235, %Arg_4.5237
  %region_0_93_constant_18239 = load float, ptr @3, align 4
  %Arg_4.5240 = getelementptr inbounds float, ptr %arg4, i32 %294
  %Arg_4.5241 = load float, ptr %Arg_4.5240, align 4, !invariant.load !269
  %subtract.39242 = fsub float %region_0_93_constant_18239, %Arg_4.5241
  %multiply.40243 = fmul float %multiply.38238, %subtract.39242
  store float %multiply.40243, ptr %reduction_input_address199, align 4
  %296 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_42(ptr %296, ptr %reduction_input_address199, ptr %return_buffer244)
  %297 = load float, ptr %return_buffer244, align 4
  store float %297, ptr %296, align 4
  br label %tile_loop.loop_header221, !llvm.loop !296

tile_loop.loop_exit220:                           ; preds = %tile_loop.loop_header221
  br label %is_full_tile-after219

is_full_tile-false218:                            ; preds = %y_in_tile.loop_body213
  %298 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address248, align 4
  br label %tile_loop.loop_header246

tile_loop.loop_header246:                         ; preds = %x_in_tile-after267, %is_full_tile-false218
  %tile_loop.indvar249 = load i32, ptr %tile_loop.invar_address248, align 4
  %299 = icmp uge i32 %tile_loop.indvar249, 8
  br i1 %299, label %tile_loop.loop_exit245, label %tile_loop.loop_body247

tile_loop.loop_body247:                           ; preds = %tile_loop.loop_header246
  %invar.inc250 = add nuw nsw i32 %tile_loop.indvar249, 1
  store i32 %invar.inc250, ptr %tile_loop.invar_address248, align 4
  %300 = icmp eq i32 %tile_loop.indvar249, 0
  %301 = mul i32 %tile_loop.indvar249, 1024
  %302 = add i32 %301, 0
  %x_loc251 = add i32 %302, %298
  %303 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %304 = add i32 %tile_origin.2210, %x_loc251
  %305 = icmp ult i32 %x_loc251, %tile_bound207
  br i1 %305, label %x_in_tile-true252, label %x_in_tile-after253

x_in_tile-after253:                               ; preds = %x_in_tile-true252, %tile_loop.loop_body247
  %306 = mul i32 %tile_loop.indvar249, 1024
  %307 = add i32 %306, 1
  %x_loc265 = add i32 %307, %298
  %308 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %309 = add i32 %tile_origin.2210, %x_loc265
  %310 = icmp ult i32 %x_loc265, %tile_bound207
  br i1 %310, label %x_in_tile-true266, label %x_in_tile-after267

x_in_tile-after267:                               ; preds = %x_in_tile-true266, %x_in_tile-after253
  br label %tile_loop.loop_header246, !llvm.loop !297

tile_loop.loop_exit245:                           ; preds = %tile_loop.loop_header246
  br label %is_full_tile-after219

x_in_tile-true252:                                ; preds = %tile_loop.loop_body247
  %311 = mul nuw nsw i32 %304, 1
  %312 = add nuw nsw i32 0, %311
  %313 = mul nuw nsw i32 %303, 8192
  %314 = add nuw nsw i32 %312, %313
  %315 = mul nuw nsw i32 %tile_origin.0208, 8192
  %316 = add nuw nsw i32 %314, %315
  %317 = udiv i32 %316, 1
  %Arg_5.6254 = getelementptr inbounds float, ptr %arg5, i32 %316
  %Arg_5.6255 = load float, ptr %Arg_5.6254, align 4, !invariant.load !269
  %Arg_4.5256 = getelementptr inbounds float, ptr %arg4, i32 %316
  %Arg_4.5257 = load float, ptr %Arg_4.5256, align 4, !invariant.load !269
  %multiply.38258 = fmul float %Arg_5.6255, %Arg_4.5257
  %region_0_93_constant_18259 = load float, ptr @3, align 4
  %Arg_4.5260 = getelementptr inbounds float, ptr %arg4, i32 %316
  %Arg_4.5261 = load float, ptr %Arg_4.5260, align 4, !invariant.load !269
  %subtract.39262 = fsub float %region_0_93_constant_18259, %Arg_4.5261
  %multiply.40263 = fmul float %multiply.38258, %subtract.39262
  store float %multiply.40263, ptr %reduction_input_address199, align 4
  %318 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_42(ptr %318, ptr %reduction_input_address199, ptr %return_buffer264)
  %319 = load float, ptr %return_buffer264, align 4
  store float %319, ptr %318, align 4
  br label %x_in_tile-after253

x_in_tile-true266:                                ; preds = %x_in_tile-after253
  %320 = mul nuw nsw i32 %309, 1
  %321 = add nuw nsw i32 0, %320
  %322 = mul nuw nsw i32 %308, 8192
  %323 = add nuw nsw i32 %321, %322
  %324 = mul nuw nsw i32 %tile_origin.0208, 8192
  %325 = add nuw nsw i32 %323, %324
  %326 = udiv i32 %325, 1
  %Arg_5.6268 = getelementptr inbounds float, ptr %arg5, i32 %325
  %Arg_5.6269 = load float, ptr %Arg_5.6268, align 4, !invariant.load !269
  %Arg_4.5270 = getelementptr inbounds float, ptr %arg4, i32 %325
  %Arg_4.5271 = load float, ptr %Arg_4.5270, align 4, !invariant.load !269
  %multiply.38272 = fmul float %Arg_5.6269, %Arg_4.5271
  %region_0_93_constant_18273 = load float, ptr @3, align 4
  %Arg_4.5274 = getelementptr inbounds float, ptr %arg4, i32 %325
  %Arg_4.5275 = load float, ptr %Arg_4.5274, align 4, !invariant.load !269
  %subtract.39276 = fsub float %region_0_93_constant_18273, %Arg_4.5275
  %multiply.40277 = fmul float %multiply.38272, %subtract.39276
  store float %multiply.40277, ptr %reduction_input_address199, align 4
  %327 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_42(ptr %327, ptr %reduction_input_address199, ptr %return_buffer278)
  %328 = load float, ptr %return_buffer278, align 4
  store float %328, ptr %327, align 4
  br label %x_in_tile-after267

intra_warp_reduce_write-true295:                  ; preds = %y_in_tile.loop_exit211
  %329 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i32 0, i32 %241, i32 0, i32 %266
  %330 = addrspacecast ptr addrspace(3) %329 to ptr
  %331 = load float, ptr %current_output279, align 4
  store float %331, ptr %330, align 4
  br label %intra_warp_reduce_write-after296

inter_warp_reduce-true297:                        ; preds = %intra_warp_reduce_write-after296
  %332 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i32 0, i32 %241, i32 0, i32 %lane_id205
  %333 = addrspacecast ptr addrspace(3) %332 to ptr
  store float %region_0_93_constant_23201, ptr %initial_value_addr299, align 4
  %334 = icmp ult i32 %thread_id.x203, 16
  %335 = select i1 %334, ptr %333, ptr %initial_value_addr299
  %partial_reduction_result301 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result301, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane300, align 4
  call void @region_3_42(ptr %335, ptr %result_from_other_lane300, ptr %return_buffer302)
  %337 = load float, ptr %return_buffer302, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result304 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result304, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane303, align 4
  call void @region_3_42(ptr %335, ptr %result_from_other_lane303, ptr %return_buffer305)
  %339 = load float, ptr %return_buffer305, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result307 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result307, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane306, align 4
  call void @region_3_42(ptr %335, ptr %result_from_other_lane306, ptr %return_buffer308)
  %341 = load float, ptr %return_buffer308, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result310 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result310, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane309, align 4
  call void @region_3_42(ptr %335, ptr %result_from_other_lane309, ptr %return_buffer311)
  %343 = load float, ptr %return_buffer311, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result313 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result313, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane312, align 4
  call void @region_3_42(ptr %335, ptr %result_from_other_lane312, ptr %return_buffer314)
  %345 = load float, ptr %return_buffer314, align 4
  store float %345, ptr %335, align 4
  %346 = icmp eq i32 %thread_id.x203, 0
  br i1 %346, label %reduction_write_output-true315, label %reduction_write_output-after316

reduction_write_output-after316:                  ; preds = %reduction_write_output-true315, %inter_warp_reduce-true297
  br label %inter_warp_reduce-after298

reduction_write_output-true315:                   ; preds = %inter_warp_reduce-true297
  %347 = mul i32 %thread_id.x203, 2
  %348 = add i32 %tile_origin.1209, %thread_id.y204
  %349 = add i32 %tile_origin.2210, %347
  %350 = add i32 %349, 0
  %output317 = load float, ptr %335, align 4
  store float %output317, ptr %arg18, align 4
  br label %reduction_write_output-after316

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %region_0_93_constant_23320 = load float, ptr @2, align 4
  %351 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  store float %region_0_93_constant_23320, ptr %351, align 4
  %352 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %353 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %354 = urem i32 %352, 512
  %355 = udiv i32 %352, 512
  %356 = mul i32 %353, 1
  %357 = add i32 %356, %355
  %358 = icmp ult i32 %357, 1
  br i1 %358, label %359, label %early_return321

359:                                              ; preds = %reduce-group-3-true
  %thread_id.x322 = urem i32 %354, 512
  %thread_id.y323 = udiv i32 %354, 512
  %lane_id324 = urem i32 %354, 32
  %360 = udiv i32 %357, 1
  %361 = urem i32 %360, 1
  %362 = udiv i32 %357, 1
  %363 = urem i32 %362, 1
  %364 = udiv i32 %357, 1
  %365 = icmp eq i32 %363, 0
  %tile_bound325 = select i1 %365, i32 1, i32 1
  %366 = icmp eq i32 %361, 0
  %tile_bound326 = select i1 %366, i32 8192, i32 8192
  %tile_origin.0327 = mul i32 %364, 1
  %tile_origin.1328 = mul i32 %363, 1
  %tile_origin.2329 = mul i32 %361, 8192
  store i32 %thread_id.y323, ptr %y_in_tile.invar_address333, align 4
  br label %y_in_tile.loop_header331

y_in_tile.loop_header331:                         ; preds = %is_full_tile-after338, %359
  %y_in_tile.indvar334 = load i32, ptr %y_in_tile.invar_address333, align 4
  %367 = icmp uge i32 %y_in_tile.indvar334, %tile_bound325
  br i1 %367, label %y_in_tile.loop_exit330, label %y_in_tile.loop_body332

y_in_tile.loop_body332:                           ; preds = %y_in_tile.loop_header331
  %invar.inc335 = add nuw nsw i32 %y_in_tile.indvar334, 1
  store i32 %invar.inc335, ptr %y_in_tile.invar_address333, align 4
  %368 = icmp eq i32 %y_in_tile.indvar334, %thread_id.y323
  %369 = icmp eq i32 8192, %tile_bound326
  br i1 %369, label %is_full_tile-true336, label %is_full_tile-false337

is_full_tile-after338:                            ; preds = %tile_loop.loop_exit364, %tile_loop.loop_exit339
  br label %y_in_tile.loop_header331, !llvm.loop !298

y_in_tile.loop_exit330:                           ; preds = %y_in_tile.loop_header331
  %current_output398 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  %partial_reduction_result400 = load float, ptr %current_output398, align 4
  %370 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result400, i32 16, i32 31)
  store float %370, ptr %result_from_other_lane399, align 4
  call void @region_4_51(ptr %current_output398, ptr %result_from_other_lane399, ptr %return_buffer401)
  %371 = load float, ptr %return_buffer401, align 4
  store float %371, ptr %current_output398, align 4
  %partial_reduction_result403 = load float, ptr %current_output398, align 4
  %372 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result403, i32 8, i32 31)
  store float %372, ptr %result_from_other_lane402, align 4
  call void @region_4_51(ptr %current_output398, ptr %result_from_other_lane402, ptr %return_buffer404)
  %373 = load float, ptr %return_buffer404, align 4
  store float %373, ptr %current_output398, align 4
  %partial_reduction_result406 = load float, ptr %current_output398, align 4
  %374 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result406, i32 4, i32 31)
  store float %374, ptr %result_from_other_lane405, align 4
  call void @region_4_51(ptr %current_output398, ptr %result_from_other_lane405, ptr %return_buffer407)
  %375 = load float, ptr %return_buffer407, align 4
  store float %375, ptr %current_output398, align 4
  %partial_reduction_result409 = load float, ptr %current_output398, align 4
  %376 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result409, i32 2, i32 31)
  store float %376, ptr %result_from_other_lane408, align 4
  call void @region_4_51(ptr %current_output398, ptr %result_from_other_lane408, ptr %return_buffer410)
  %377 = load float, ptr %return_buffer410, align 4
  store float %377, ptr %current_output398, align 4
  %partial_reduction_result412 = load float, ptr %current_output398, align 4
  %378 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result412, i32 1, i32 31)
  store float %378, ptr %result_from_other_lane411, align 4
  call void @region_4_51(ptr %current_output398, ptr %result_from_other_lane411, ptr %return_buffer413)
  %379 = load float, ptr %return_buffer413, align 4
  store float %379, ptr %current_output398, align 4
  %380 = udiv i32 %thread_id.x322, 32
  %381 = icmp eq i32 %lane_id324, 0
  br i1 %381, label %intra_warp_reduce_write-true414, label %intra_warp_reduce_write-after415

intra_warp_reduce_write-after415:                 ; preds = %intra_warp_reduce_write-true414, %y_in_tile.loop_exit330
  call void @llvm.nvvm.barrier0()
  %382 = icmp eq i32 %380, 0
  br i1 %382, label %inter_warp_reduce-true416, label %inter_warp_reduce-after417

inter_warp_reduce-after417:                       ; preds = %reduction_write_output-after435, %intra_warp_reduce_write-after415
  br label %reduce-group-3-after

early_return321:                                  ; preds = %reduce-group-3-true
  ret void

is_full_tile-true336:                             ; preds = %y_in_tile.loop_body332
  %383 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address342, align 4
  br label %tile_loop.loop_header340

tile_loop.loop_header340:                         ; preds = %tile_loop.loop_body341, %is_full_tile-true336
  %tile_loop.indvar343 = load i32, ptr %tile_loop.invar_address342, align 4
  %384 = icmp uge i32 %tile_loop.indvar343, 8
  br i1 %384, label %tile_loop.loop_exit339, label %tile_loop.loop_body341

tile_loop.loop_body341:                           ; preds = %tile_loop.loop_header340
  %invar.inc344 = add nuw nsw i32 %tile_loop.indvar343, 1
  store i32 %invar.inc344, ptr %tile_loop.invar_address342, align 4
  %385 = icmp eq i32 %tile_loop.indvar343, 0
  %386 = mul i32 %tile_loop.indvar343, 1024
  %387 = add i32 %386, 0
  %x_loc345 = add i32 %387, %383
  %388 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %389 = add i32 %tile_origin.2329, %x_loc345
  %390 = mul nuw nsw i32 %389, 1
  %391 = add nuw nsw i32 0, %390
  %392 = mul nuw nsw i32 %388, 8192
  %393 = add nuw nsw i32 %391, %392
  %394 = mul nuw nsw i32 %tile_origin.0327, 8192
  %395 = add nuw nsw i32 %393, %394
  %396 = udiv i32 %395, 1
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %395
  %Arg_7.8346 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %395
  %Arg_6.7347 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %multiply.47 = fmul float %Arg_7.8346, %Arg_6.7347
  %region_0_93_constant_18348 = load float, ptr @3, align 4
  %Arg_6.7349 = getelementptr inbounds float, ptr %arg6, i32 %395
  %Arg_6.7350 = load float, ptr %Arg_6.7349, align 4, !invariant.load !269
  %subtract.48 = fsub float %region_0_93_constant_18348, %Arg_6.7350
  %multiply.49 = fmul float %multiply.47, %subtract.48
  store float %multiply.49, ptr %reduction_input_address318, align 4
  %397 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_51(ptr %397, ptr %reduction_input_address318, ptr %return_buffer351)
  %398 = load float, ptr %return_buffer351, align 4
  store float %398, ptr %397, align 4
  %399 = mul i32 %tile_loop.indvar343, 1024
  %400 = add i32 %399, 1
  %x_loc352 = add i32 %400, %383
  %401 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %402 = add i32 %tile_origin.2329, %x_loc352
  %403 = mul nuw nsw i32 %402, 1
  %404 = add nuw nsw i32 0, %403
  %405 = mul nuw nsw i32 %401, 8192
  %406 = add nuw nsw i32 %404, %405
  %407 = mul nuw nsw i32 %tile_origin.0327, 8192
  %408 = add nuw nsw i32 %406, %407
  %409 = udiv i32 %408, 1
  %Arg_7.8353 = getelementptr inbounds float, ptr %arg7, i32 %408
  %Arg_7.8354 = load float, ptr %Arg_7.8353, align 4, !invariant.load !269
  %Arg_6.7355 = getelementptr inbounds float, ptr %arg6, i32 %408
  %Arg_6.7356 = load float, ptr %Arg_6.7355, align 4, !invariant.load !269
  %multiply.47357 = fmul float %Arg_7.8354, %Arg_6.7356
  %region_0_93_constant_18358 = load float, ptr @3, align 4
  %Arg_6.7359 = getelementptr inbounds float, ptr %arg6, i32 %408
  %Arg_6.7360 = load float, ptr %Arg_6.7359, align 4, !invariant.load !269
  %subtract.48361 = fsub float %region_0_93_constant_18358, %Arg_6.7360
  %multiply.49362 = fmul float %multiply.47357, %subtract.48361
  store float %multiply.49362, ptr %reduction_input_address318, align 4
  %410 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_51(ptr %410, ptr %reduction_input_address318, ptr %return_buffer363)
  %411 = load float, ptr %return_buffer363, align 4
  store float %411, ptr %410, align 4
  br label %tile_loop.loop_header340, !llvm.loop !299

tile_loop.loop_exit339:                           ; preds = %tile_loop.loop_header340
  br label %is_full_tile-after338

is_full_tile-false337:                            ; preds = %y_in_tile.loop_body332
  %412 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address367, align 4
  br label %tile_loop.loop_header365

tile_loop.loop_header365:                         ; preds = %x_in_tile-after386, %is_full_tile-false337
  %tile_loop.indvar368 = load i32, ptr %tile_loop.invar_address367, align 4
  %413 = icmp uge i32 %tile_loop.indvar368, 8
  br i1 %413, label %tile_loop.loop_exit364, label %tile_loop.loop_body366

tile_loop.loop_body366:                           ; preds = %tile_loop.loop_header365
  %invar.inc369 = add nuw nsw i32 %tile_loop.indvar368, 1
  store i32 %invar.inc369, ptr %tile_loop.invar_address367, align 4
  %414 = icmp eq i32 %tile_loop.indvar368, 0
  %415 = mul i32 %tile_loop.indvar368, 1024
  %416 = add i32 %415, 0
  %x_loc370 = add i32 %416, %412
  %417 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %418 = add i32 %tile_origin.2329, %x_loc370
  %419 = icmp ult i32 %x_loc370, %tile_bound326
  br i1 %419, label %x_in_tile-true371, label %x_in_tile-after372

x_in_tile-after372:                               ; preds = %x_in_tile-true371, %tile_loop.loop_body366
  %420 = mul i32 %tile_loop.indvar368, 1024
  %421 = add i32 %420, 1
  %x_loc384 = add i32 %421, %412
  %422 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %423 = add i32 %tile_origin.2329, %x_loc384
  %424 = icmp ult i32 %x_loc384, %tile_bound326
  br i1 %424, label %x_in_tile-true385, label %x_in_tile-after386

x_in_tile-after386:                               ; preds = %x_in_tile-true385, %x_in_tile-after372
  br label %tile_loop.loop_header365, !llvm.loop !300

tile_loop.loop_exit364:                           ; preds = %tile_loop.loop_header365
  br label %is_full_tile-after338

x_in_tile-true371:                                ; preds = %tile_loop.loop_body366
  %425 = mul nuw nsw i32 %418, 1
  %426 = add nuw nsw i32 0, %425
  %427 = mul nuw nsw i32 %417, 8192
  %428 = add nuw nsw i32 %426, %427
  %429 = mul nuw nsw i32 %tile_origin.0327, 8192
  %430 = add nuw nsw i32 %428, %429
  %431 = udiv i32 %430, 1
  %Arg_7.8373 = getelementptr inbounds float, ptr %arg7, i32 %430
  %Arg_7.8374 = load float, ptr %Arg_7.8373, align 4, !invariant.load !269
  %Arg_6.7375 = getelementptr inbounds float, ptr %arg6, i32 %430
  %Arg_6.7376 = load float, ptr %Arg_6.7375, align 4, !invariant.load !269
  %multiply.47377 = fmul float %Arg_7.8374, %Arg_6.7376
  %region_0_93_constant_18378 = load float, ptr @3, align 4
  %Arg_6.7379 = getelementptr inbounds float, ptr %arg6, i32 %430
  %Arg_6.7380 = load float, ptr %Arg_6.7379, align 4, !invariant.load !269
  %subtract.48381 = fsub float %region_0_93_constant_18378, %Arg_6.7380
  %multiply.49382 = fmul float %multiply.47377, %subtract.48381
  store float %multiply.49382, ptr %reduction_input_address318, align 4
  %432 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_51(ptr %432, ptr %reduction_input_address318, ptr %return_buffer383)
  %433 = load float, ptr %return_buffer383, align 4
  store float %433, ptr %432, align 4
  br label %x_in_tile-after372

x_in_tile-true385:                                ; preds = %x_in_tile-after372
  %434 = mul nuw nsw i32 %423, 1
  %435 = add nuw nsw i32 0, %434
  %436 = mul nuw nsw i32 %422, 8192
  %437 = add nuw nsw i32 %435, %436
  %438 = mul nuw nsw i32 %tile_origin.0327, 8192
  %439 = add nuw nsw i32 %437, %438
  %440 = udiv i32 %439, 1
  %Arg_7.8387 = getelementptr inbounds float, ptr %arg7, i32 %439
  %Arg_7.8388 = load float, ptr %Arg_7.8387, align 4, !invariant.load !269
  %Arg_6.7389 = getelementptr inbounds float, ptr %arg6, i32 %439
  %Arg_6.7390 = load float, ptr %Arg_6.7389, align 4, !invariant.load !269
  %multiply.47391 = fmul float %Arg_7.8388, %Arg_6.7390
  %region_0_93_constant_18392 = load float, ptr @3, align 4
  %Arg_6.7393 = getelementptr inbounds float, ptr %arg6, i32 %439
  %Arg_6.7394 = load float, ptr %Arg_6.7393, align 4, !invariant.load !269
  %subtract.48395 = fsub float %region_0_93_constant_18392, %Arg_6.7394
  %multiply.49396 = fmul float %multiply.47391, %subtract.48395
  store float %multiply.49396, ptr %reduction_input_address318, align 4
  %441 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_51(ptr %441, ptr %reduction_input_address318, ptr %return_buffer397)
  %442 = load float, ptr %return_buffer397, align 4
  store float %442, ptr %441, align 4
  br label %x_in_tile-after386

intra_warp_reduce_write-true414:                  ; preds = %y_in_tile.loop_exit330
  %443 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i32 0, i32 %355, i32 0, i32 %380
  %444 = addrspacecast ptr addrspace(3) %443 to ptr
  %445 = load float, ptr %current_output398, align 4
  store float %445, ptr %444, align 4
  br label %intra_warp_reduce_write-after415

inter_warp_reduce-true416:                        ; preds = %intra_warp_reduce_write-after415
  %446 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i32 0, i32 %355, i32 0, i32 %lane_id324
  %447 = addrspacecast ptr addrspace(3) %446 to ptr
  store float %region_0_93_constant_23320, ptr %initial_value_addr418, align 4
  %448 = icmp ult i32 %thread_id.x322, 16
  %449 = select i1 %448, ptr %447, ptr %initial_value_addr418
  %partial_reduction_result420 = load float, ptr %449, align 4
  %450 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result420, i32 16, i32 31)
  store float %450, ptr %result_from_other_lane419, align 4
  call void @region_4_51(ptr %449, ptr %result_from_other_lane419, ptr %return_buffer421)
  %451 = load float, ptr %return_buffer421, align 4
  store float %451, ptr %449, align 4
  %partial_reduction_result423 = load float, ptr %449, align 4
  %452 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result423, i32 8, i32 31)
  store float %452, ptr %result_from_other_lane422, align 4
  call void @region_4_51(ptr %449, ptr %result_from_other_lane422, ptr %return_buffer424)
  %453 = load float, ptr %return_buffer424, align 4
  store float %453, ptr %449, align 4
  %partial_reduction_result426 = load float, ptr %449, align 4
  %454 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result426, i32 4, i32 31)
  store float %454, ptr %result_from_other_lane425, align 4
  call void @region_4_51(ptr %449, ptr %result_from_other_lane425, ptr %return_buffer427)
  %455 = load float, ptr %return_buffer427, align 4
  store float %455, ptr %449, align 4
  %partial_reduction_result429 = load float, ptr %449, align 4
  %456 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result429, i32 2, i32 31)
  store float %456, ptr %result_from_other_lane428, align 4
  call void @region_4_51(ptr %449, ptr %result_from_other_lane428, ptr %return_buffer430)
  %457 = load float, ptr %return_buffer430, align 4
  store float %457, ptr %449, align 4
  %partial_reduction_result432 = load float, ptr %449, align 4
  %458 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result432, i32 1, i32 31)
  store float %458, ptr %result_from_other_lane431, align 4
  call void @region_4_51(ptr %449, ptr %result_from_other_lane431, ptr %return_buffer433)
  %459 = load float, ptr %return_buffer433, align 4
  store float %459, ptr %449, align 4
  %460 = icmp eq i32 %thread_id.x322, 0
  br i1 %460, label %reduction_write_output-true434, label %reduction_write_output-after435

reduction_write_output-after435:                  ; preds = %reduction_write_output-true434, %inter_warp_reduce-true416
  br label %inter_warp_reduce-after417

reduction_write_output-true434:                   ; preds = %inter_warp_reduce-true416
  %461 = mul i32 %thread_id.x322, 2
  %462 = add i32 %tile_origin.1328, %thread_id.y323
  %463 = add i32 %tile_origin.2329, %461
  %464 = add i32 %463, 0
  %output436 = load float, ptr %449, align 4
  store float %output436, ptr %arg19, align 4
  br label %reduction_write_output-after435

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %region_0_93_constant_23439 = load float, ptr @2, align 4
  %465 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  store float %region_0_93_constant_23439, ptr %465, align 4
  %466 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %467 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %468 = urem i32 %466, 512
  %469 = udiv i32 %466, 512
  %470 = mul i32 %467, 1
  %471 = add i32 %470, %469
  %472 = icmp ult i32 %471, 1
  br i1 %472, label %473, label %early_return440

473:                                              ; preds = %reduce-group-4-true
  %thread_id.x441 = urem i32 %468, 512
  %thread_id.y442 = udiv i32 %468, 512
  %lane_id443 = urem i32 %468, 32
  %474 = udiv i32 %471, 1
  %475 = urem i32 %474, 1
  %476 = udiv i32 %471, 1
  %477 = urem i32 %476, 1
  %478 = udiv i32 %471, 1
  %479 = icmp eq i32 %477, 0
  %tile_bound444 = select i1 %479, i32 1, i32 1
  %480 = icmp eq i32 %475, 0
  %tile_bound445 = select i1 %480, i32 8192, i32 8192
  %tile_origin.0446 = mul i32 %478, 1
  %tile_origin.1447 = mul i32 %477, 1
  %tile_origin.2448 = mul i32 %475, 8192
  store i32 %thread_id.y442, ptr %y_in_tile.invar_address452, align 4
  br label %y_in_tile.loop_header450

y_in_tile.loop_header450:                         ; preds = %is_full_tile-after457, %473
  %y_in_tile.indvar453 = load i32, ptr %y_in_tile.invar_address452, align 4
  %481 = icmp uge i32 %y_in_tile.indvar453, %tile_bound444
  br i1 %481, label %y_in_tile.loop_exit449, label %y_in_tile.loop_body451

y_in_tile.loop_body451:                           ; preds = %y_in_tile.loop_header450
  %invar.inc454 = add nuw nsw i32 %y_in_tile.indvar453, 1
  store i32 %invar.inc454, ptr %y_in_tile.invar_address452, align 4
  %482 = icmp eq i32 %y_in_tile.indvar453, %thread_id.y442
  %483 = icmp eq i32 8192, %tile_bound445
  br i1 %483, label %is_full_tile-true455, label %is_full_tile-false456

is_full_tile-after457:                            ; preds = %tile_loop.loop_exit483, %tile_loop.loop_exit458
  br label %y_in_tile.loop_header450, !llvm.loop !301

y_in_tile.loop_exit449:                           ; preds = %y_in_tile.loop_header450
  %current_output517 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  %partial_reduction_result519 = load float, ptr %current_output517, align 4
  %484 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result519, i32 16, i32 31)
  store float %484, ptr %result_from_other_lane518, align 4
  call void @region_5_60(ptr %current_output517, ptr %result_from_other_lane518, ptr %return_buffer520)
  %485 = load float, ptr %return_buffer520, align 4
  store float %485, ptr %current_output517, align 4
  %partial_reduction_result522 = load float, ptr %current_output517, align 4
  %486 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result522, i32 8, i32 31)
  store float %486, ptr %result_from_other_lane521, align 4
  call void @region_5_60(ptr %current_output517, ptr %result_from_other_lane521, ptr %return_buffer523)
  %487 = load float, ptr %return_buffer523, align 4
  store float %487, ptr %current_output517, align 4
  %partial_reduction_result525 = load float, ptr %current_output517, align 4
  %488 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result525, i32 4, i32 31)
  store float %488, ptr %result_from_other_lane524, align 4
  call void @region_5_60(ptr %current_output517, ptr %result_from_other_lane524, ptr %return_buffer526)
  %489 = load float, ptr %return_buffer526, align 4
  store float %489, ptr %current_output517, align 4
  %partial_reduction_result528 = load float, ptr %current_output517, align 4
  %490 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result528, i32 2, i32 31)
  store float %490, ptr %result_from_other_lane527, align 4
  call void @region_5_60(ptr %current_output517, ptr %result_from_other_lane527, ptr %return_buffer529)
  %491 = load float, ptr %return_buffer529, align 4
  store float %491, ptr %current_output517, align 4
  %partial_reduction_result531 = load float, ptr %current_output517, align 4
  %492 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result531, i32 1, i32 31)
  store float %492, ptr %result_from_other_lane530, align 4
  call void @region_5_60(ptr %current_output517, ptr %result_from_other_lane530, ptr %return_buffer532)
  %493 = load float, ptr %return_buffer532, align 4
  store float %493, ptr %current_output517, align 4
  %494 = udiv i32 %thread_id.x441, 32
  %495 = icmp eq i32 %lane_id443, 0
  br i1 %495, label %intra_warp_reduce_write-true533, label %intra_warp_reduce_write-after534

intra_warp_reduce_write-after534:                 ; preds = %intra_warp_reduce_write-true533, %y_in_tile.loop_exit449
  call void @llvm.nvvm.barrier0()
  %496 = icmp eq i32 %494, 0
  br i1 %496, label %inter_warp_reduce-true535, label %inter_warp_reduce-after536

inter_warp_reduce-after536:                       ; preds = %reduction_write_output-after554, %intra_warp_reduce_write-after534
  br label %reduce-group-4-after

early_return440:                                  ; preds = %reduce-group-4-true
  ret void

is_full_tile-true455:                             ; preds = %y_in_tile.loop_body451
  %497 = mul i32 %thread_id.x441, 2
  store i32 0, ptr %tile_loop.invar_address461, align 4
  br label %tile_loop.loop_header459

tile_loop.loop_header459:                         ; preds = %tile_loop.loop_body460, %is_full_tile-true455
  %tile_loop.indvar462 = load i32, ptr %tile_loop.invar_address461, align 4
  %498 = icmp uge i32 %tile_loop.indvar462, 8
  br i1 %498, label %tile_loop.loop_exit458, label %tile_loop.loop_body460

tile_loop.loop_body460:                           ; preds = %tile_loop.loop_header459
  %invar.inc463 = add nuw nsw i32 %tile_loop.indvar462, 1
  store i32 %invar.inc463, ptr %tile_loop.invar_address461, align 4
  %499 = icmp eq i32 %tile_loop.indvar462, 0
  %500 = mul i32 %tile_loop.indvar462, 1024
  %501 = add i32 %500, 0
  %x_loc464 = add i32 %501, %497
  %502 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %503 = add i32 %tile_origin.2448, %x_loc464
  %504 = mul nuw nsw i32 %503, 1
  %505 = add nuw nsw i32 0, %504
  %506 = mul nuw nsw i32 %502, 8192
  %507 = add nuw nsw i32 %505, %506
  %508 = mul nuw nsw i32 %tile_origin.0446, 8192
  %509 = add nuw nsw i32 %507, %508
  %510 = udiv i32 %509, 1
  %Arg_9.10 = getelementptr inbounds float, ptr %arg9, i32 %509
  %Arg_9.10465 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %509
  %Arg_8.9466 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  %multiply.56 = fmul float %Arg_9.10465, %Arg_8.9466
  %region_0_93_constant_18467 = load float, ptr @3, align 4
  %Arg_8.9468 = getelementptr inbounds float, ptr %arg8, i32 %509
  %Arg_8.9469 = load float, ptr %Arg_8.9468, align 4, !invariant.load !269
  %subtract.57 = fsub float %region_0_93_constant_18467, %Arg_8.9469
  %multiply.58 = fmul float %multiply.56, %subtract.57
  store float %multiply.58, ptr %reduction_input_address437, align 4
  %511 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_60(ptr %511, ptr %reduction_input_address437, ptr %return_buffer470)
  %512 = load float, ptr %return_buffer470, align 4
  store float %512, ptr %511, align 4
  %513 = mul i32 %tile_loop.indvar462, 1024
  %514 = add i32 %513, 1
  %x_loc471 = add i32 %514, %497
  %515 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %516 = add i32 %tile_origin.2448, %x_loc471
  %517 = mul nuw nsw i32 %516, 1
  %518 = add nuw nsw i32 0, %517
  %519 = mul nuw nsw i32 %515, 8192
  %520 = add nuw nsw i32 %518, %519
  %521 = mul nuw nsw i32 %tile_origin.0446, 8192
  %522 = add nuw nsw i32 %520, %521
  %523 = udiv i32 %522, 1
  %Arg_9.10472 = getelementptr inbounds float, ptr %arg9, i32 %522
  %Arg_9.10473 = load float, ptr %Arg_9.10472, align 4, !invariant.load !269
  %Arg_8.9474 = getelementptr inbounds float, ptr %arg8, i32 %522
  %Arg_8.9475 = load float, ptr %Arg_8.9474, align 4, !invariant.load !269
  %multiply.56476 = fmul float %Arg_9.10473, %Arg_8.9475
  %region_0_93_constant_18477 = load float, ptr @3, align 4
  %Arg_8.9478 = getelementptr inbounds float, ptr %arg8, i32 %522
  %Arg_8.9479 = load float, ptr %Arg_8.9478, align 4, !invariant.load !269
  %subtract.57480 = fsub float %region_0_93_constant_18477, %Arg_8.9479
  %multiply.58481 = fmul float %multiply.56476, %subtract.57480
  store float %multiply.58481, ptr %reduction_input_address437, align 4
  %524 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_60(ptr %524, ptr %reduction_input_address437, ptr %return_buffer482)
  %525 = load float, ptr %return_buffer482, align 4
  store float %525, ptr %524, align 4
  br label %tile_loop.loop_header459, !llvm.loop !302

tile_loop.loop_exit458:                           ; preds = %tile_loop.loop_header459
  br label %is_full_tile-after457

is_full_tile-false456:                            ; preds = %y_in_tile.loop_body451
  %526 = mul i32 %thread_id.x441, 2
  store i32 0, ptr %tile_loop.invar_address486, align 4
  br label %tile_loop.loop_header484

tile_loop.loop_header484:                         ; preds = %x_in_tile-after505, %is_full_tile-false456
  %tile_loop.indvar487 = load i32, ptr %tile_loop.invar_address486, align 4
  %527 = icmp uge i32 %tile_loop.indvar487, 8
  br i1 %527, label %tile_loop.loop_exit483, label %tile_loop.loop_body485

tile_loop.loop_body485:                           ; preds = %tile_loop.loop_header484
  %invar.inc488 = add nuw nsw i32 %tile_loop.indvar487, 1
  store i32 %invar.inc488, ptr %tile_loop.invar_address486, align 4
  %528 = icmp eq i32 %tile_loop.indvar487, 0
  %529 = mul i32 %tile_loop.indvar487, 1024
  %530 = add i32 %529, 0
  %x_loc489 = add i32 %530, %526
  %531 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %532 = add i32 %tile_origin.2448, %x_loc489
  %533 = icmp ult i32 %x_loc489, %tile_bound445
  br i1 %533, label %x_in_tile-true490, label %x_in_tile-after491

x_in_tile-after491:                               ; preds = %x_in_tile-true490, %tile_loop.loop_body485
  %534 = mul i32 %tile_loop.indvar487, 1024
  %535 = add i32 %534, 1
  %x_loc503 = add i32 %535, %526
  %536 = add i32 %tile_origin.1447, %y_in_tile.indvar453
  %537 = add i32 %tile_origin.2448, %x_loc503
  %538 = icmp ult i32 %x_loc503, %tile_bound445
  br i1 %538, label %x_in_tile-true504, label %x_in_tile-after505

x_in_tile-after505:                               ; preds = %x_in_tile-true504, %x_in_tile-after491
  br label %tile_loop.loop_header484, !llvm.loop !303

tile_loop.loop_exit483:                           ; preds = %tile_loop.loop_header484
  br label %is_full_tile-after457

x_in_tile-true490:                                ; preds = %tile_loop.loop_body485
  %539 = mul nuw nsw i32 %532, 1
  %540 = add nuw nsw i32 0, %539
  %541 = mul nuw nsw i32 %531, 8192
  %542 = add nuw nsw i32 %540, %541
  %543 = mul nuw nsw i32 %tile_origin.0446, 8192
  %544 = add nuw nsw i32 %542, %543
  %545 = udiv i32 %544, 1
  %Arg_9.10492 = getelementptr inbounds float, ptr %arg9, i32 %544
  %Arg_9.10493 = load float, ptr %Arg_9.10492, align 4, !invariant.load !269
  %Arg_8.9494 = getelementptr inbounds float, ptr %arg8, i32 %544
  %Arg_8.9495 = load float, ptr %Arg_8.9494, align 4, !invariant.load !269
  %multiply.56496 = fmul float %Arg_9.10493, %Arg_8.9495
  %region_0_93_constant_18497 = load float, ptr @3, align 4
  %Arg_8.9498 = getelementptr inbounds float, ptr %arg8, i32 %544
  %Arg_8.9499 = load float, ptr %Arg_8.9498, align 4, !invariant.load !269
  %subtract.57500 = fsub float %region_0_93_constant_18497, %Arg_8.9499
  %multiply.58501 = fmul float %multiply.56496, %subtract.57500
  store float %multiply.58501, ptr %reduction_input_address437, align 4
  %546 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_60(ptr %546, ptr %reduction_input_address437, ptr %return_buffer502)
  %547 = load float, ptr %return_buffer502, align 4
  store float %547, ptr %546, align 4
  br label %x_in_tile-after491

x_in_tile-true504:                                ; preds = %x_in_tile-after491
  %548 = mul nuw nsw i32 %537, 1
  %549 = add nuw nsw i32 0, %548
  %550 = mul nuw nsw i32 %536, 8192
  %551 = add nuw nsw i32 %549, %550
  %552 = mul nuw nsw i32 %tile_origin.0446, 8192
  %553 = add nuw nsw i32 %551, %552
  %554 = udiv i32 %553, 1
  %Arg_9.10506 = getelementptr inbounds float, ptr %arg9, i32 %553
  %Arg_9.10507 = load float, ptr %Arg_9.10506, align 4, !invariant.load !269
  %Arg_8.9508 = getelementptr inbounds float, ptr %arg8, i32 %553
  %Arg_8.9509 = load float, ptr %Arg_8.9508, align 4, !invariant.load !269
  %multiply.56510 = fmul float %Arg_9.10507, %Arg_8.9509
  %region_0_93_constant_18511 = load float, ptr @3, align 4
  %Arg_8.9512 = getelementptr inbounds float, ptr %arg8, i32 %553
  %Arg_8.9513 = load float, ptr %Arg_8.9512, align 4, !invariant.load !269
  %subtract.57514 = fsub float %region_0_93_constant_18511, %Arg_8.9513
  %multiply.58515 = fmul float %multiply.56510, %subtract.57514
  store float %multiply.58515, ptr %reduction_input_address437, align 4
  %555 = getelementptr inbounds float, ptr %partial_reduction_result438, i32 0
  call void @region_5_60(ptr %555, ptr %reduction_input_address437, ptr %return_buffer516)
  %556 = load float, ptr %return_buffer516, align 4
  store float %556, ptr %555, align 4
  br label %x_in_tile-after505

intra_warp_reduce_write-true533:                  ; preds = %y_in_tile.loop_exit449
  %557 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i32 0, i32 %469, i32 0, i32 %494
  %558 = addrspacecast ptr addrspace(3) %557 to ptr
  %559 = load float, ptr %current_output517, align 4
  store float %559, ptr %558, align 4
  br label %intra_warp_reduce_write-after534

inter_warp_reduce-true535:                        ; preds = %intra_warp_reduce_write-after534
  %560 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i32 0, i32 %469, i32 0, i32 %lane_id443
  %561 = addrspacecast ptr addrspace(3) %560 to ptr
  store float %region_0_93_constant_23439, ptr %initial_value_addr537, align 4
  %562 = icmp ult i32 %thread_id.x441, 16
  %563 = select i1 %562, ptr %561, ptr %initial_value_addr537
  %partial_reduction_result539 = load float, ptr %563, align 4
  %564 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result539, i32 16, i32 31)
  store float %564, ptr %result_from_other_lane538, align 4
  call void @region_5_60(ptr %563, ptr %result_from_other_lane538, ptr %return_buffer540)
  %565 = load float, ptr %return_buffer540, align 4
  store float %565, ptr %563, align 4
  %partial_reduction_result542 = load float, ptr %563, align 4
  %566 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result542, i32 8, i32 31)
  store float %566, ptr %result_from_other_lane541, align 4
  call void @region_5_60(ptr %563, ptr %result_from_other_lane541, ptr %return_buffer543)
  %567 = load float, ptr %return_buffer543, align 4
  store float %567, ptr %563, align 4
  %partial_reduction_result545 = load float, ptr %563, align 4
  %568 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result545, i32 4, i32 31)
  store float %568, ptr %result_from_other_lane544, align 4
  call void @region_5_60(ptr %563, ptr %result_from_other_lane544, ptr %return_buffer546)
  %569 = load float, ptr %return_buffer546, align 4
  store float %569, ptr %563, align 4
  %partial_reduction_result548 = load float, ptr %563, align 4
  %570 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result548, i32 2, i32 31)
  store float %570, ptr %result_from_other_lane547, align 4
  call void @region_5_60(ptr %563, ptr %result_from_other_lane547, ptr %return_buffer549)
  %571 = load float, ptr %return_buffer549, align 4
  store float %571, ptr %563, align 4
  %partial_reduction_result551 = load float, ptr %563, align 4
  %572 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result551, i32 1, i32 31)
  store float %572, ptr %result_from_other_lane550, align 4
  call void @region_5_60(ptr %563, ptr %result_from_other_lane550, ptr %return_buffer552)
  %573 = load float, ptr %return_buffer552, align 4
  store float %573, ptr %563, align 4
  %574 = icmp eq i32 %thread_id.x441, 0
  br i1 %574, label %reduction_write_output-true553, label %reduction_write_output-after554

reduction_write_output-after554:                  ; preds = %reduction_write_output-true553, %inter_warp_reduce-true535
  br label %inter_warp_reduce-after536

reduction_write_output-true553:                   ; preds = %inter_warp_reduce-true535
  %575 = mul i32 %thread_id.x441, 2
  %576 = add i32 %tile_origin.1447, %thread_id.y442
  %577 = add i32 %tile_origin.2448, %575
  %578 = add i32 %577, 0
  %output555 = load float, ptr %563, align 4
  store float %output555, ptr %arg20, align 4
  br label %reduction_write_output-after554

reduce-group-5-true:                              ; preds = %reduce-group-4-after
  %region_0_93_constant_23558 = load float, ptr @2, align 4
  %579 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  store float %region_0_93_constant_23558, ptr %579, align 4
  %580 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %581 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %582 = urem i32 %580, 512
  %583 = udiv i32 %580, 512
  %584 = mul i32 %581, 1
  %585 = add i32 %584, %583
  %586 = icmp ult i32 %585, 1
  br i1 %586, label %587, label %early_return559

587:                                              ; preds = %reduce-group-5-true
  %thread_id.x560 = urem i32 %582, 512
  %thread_id.y561 = udiv i32 %582, 512
  %lane_id562 = urem i32 %582, 32
  %588 = udiv i32 %585, 1
  %589 = urem i32 %588, 1
  %590 = udiv i32 %585, 1
  %591 = urem i32 %590, 1
  %592 = udiv i32 %585, 1
  %593 = icmp eq i32 %591, 0
  %tile_bound563 = select i1 %593, i32 1, i32 1
  %594 = icmp eq i32 %589, 0
  %tile_bound564 = select i1 %594, i32 8192, i32 8192
  %tile_origin.0565 = mul i32 %592, 1
  %tile_origin.1566 = mul i32 %591, 1
  %tile_origin.2567 = mul i32 %589, 8192
  store i32 %thread_id.y561, ptr %y_in_tile.invar_address571, align 4
  br label %y_in_tile.loop_header569

y_in_tile.loop_header569:                         ; preds = %is_full_tile-after576, %587
  %y_in_tile.indvar572 = load i32, ptr %y_in_tile.invar_address571, align 4
  %595 = icmp uge i32 %y_in_tile.indvar572, %tile_bound563
  br i1 %595, label %y_in_tile.loop_exit568, label %y_in_tile.loop_body570

y_in_tile.loop_body570:                           ; preds = %y_in_tile.loop_header569
  %invar.inc573 = add nuw nsw i32 %y_in_tile.indvar572, 1
  store i32 %invar.inc573, ptr %y_in_tile.invar_address571, align 4
  %596 = icmp eq i32 %y_in_tile.indvar572, %thread_id.y561
  %597 = icmp eq i32 8192, %tile_bound564
  br i1 %597, label %is_full_tile-true574, label %is_full_tile-false575

is_full_tile-after576:                            ; preds = %tile_loop.loop_exit602, %tile_loop.loop_exit577
  br label %y_in_tile.loop_header569, !llvm.loop !304

y_in_tile.loop_exit568:                           ; preds = %y_in_tile.loop_header569
  %current_output636 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  %partial_reduction_result638 = load float, ptr %current_output636, align 4
  %598 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result638, i32 16, i32 31)
  store float %598, ptr %result_from_other_lane637, align 4
  call void @region_6_69(ptr %current_output636, ptr %result_from_other_lane637, ptr %return_buffer639)
  %599 = load float, ptr %return_buffer639, align 4
  store float %599, ptr %current_output636, align 4
  %partial_reduction_result641 = load float, ptr %current_output636, align 4
  %600 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result641, i32 8, i32 31)
  store float %600, ptr %result_from_other_lane640, align 4
  call void @region_6_69(ptr %current_output636, ptr %result_from_other_lane640, ptr %return_buffer642)
  %601 = load float, ptr %return_buffer642, align 4
  store float %601, ptr %current_output636, align 4
  %partial_reduction_result644 = load float, ptr %current_output636, align 4
  %602 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result644, i32 4, i32 31)
  store float %602, ptr %result_from_other_lane643, align 4
  call void @region_6_69(ptr %current_output636, ptr %result_from_other_lane643, ptr %return_buffer645)
  %603 = load float, ptr %return_buffer645, align 4
  store float %603, ptr %current_output636, align 4
  %partial_reduction_result647 = load float, ptr %current_output636, align 4
  %604 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result647, i32 2, i32 31)
  store float %604, ptr %result_from_other_lane646, align 4
  call void @region_6_69(ptr %current_output636, ptr %result_from_other_lane646, ptr %return_buffer648)
  %605 = load float, ptr %return_buffer648, align 4
  store float %605, ptr %current_output636, align 4
  %partial_reduction_result650 = load float, ptr %current_output636, align 4
  %606 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result650, i32 1, i32 31)
  store float %606, ptr %result_from_other_lane649, align 4
  call void @region_6_69(ptr %current_output636, ptr %result_from_other_lane649, ptr %return_buffer651)
  %607 = load float, ptr %return_buffer651, align 4
  store float %607, ptr %current_output636, align 4
  %608 = udiv i32 %thread_id.x560, 32
  %609 = icmp eq i32 %lane_id562, 0
  br i1 %609, label %intra_warp_reduce_write-true652, label %intra_warp_reduce_write-after653

intra_warp_reduce_write-after653:                 ; preds = %intra_warp_reduce_write-true652, %y_in_tile.loop_exit568
  call void @llvm.nvvm.barrier0()
  %610 = icmp eq i32 %608, 0
  br i1 %610, label %inter_warp_reduce-true654, label %inter_warp_reduce-after655

inter_warp_reduce-after655:                       ; preds = %reduction_write_output-after673, %intra_warp_reduce_write-after653
  br label %reduce-group-5-after

early_return559:                                  ; preds = %reduce-group-5-true
  ret void

is_full_tile-true574:                             ; preds = %y_in_tile.loop_body570
  %611 = mul i32 %thread_id.x560, 2
  store i32 0, ptr %tile_loop.invar_address580, align 4
  br label %tile_loop.loop_header578

tile_loop.loop_header578:                         ; preds = %tile_loop.loop_body579, %is_full_tile-true574
  %tile_loop.indvar581 = load i32, ptr %tile_loop.invar_address580, align 4
  %612 = icmp uge i32 %tile_loop.indvar581, 8
  br i1 %612, label %tile_loop.loop_exit577, label %tile_loop.loop_body579

tile_loop.loop_body579:                           ; preds = %tile_loop.loop_header578
  %invar.inc582 = add nuw nsw i32 %tile_loop.indvar581, 1
  store i32 %invar.inc582, ptr %tile_loop.invar_address580, align 4
  %613 = icmp eq i32 %tile_loop.indvar581, 0
  %614 = mul i32 %tile_loop.indvar581, 1024
  %615 = add i32 %614, 0
  %x_loc583 = add i32 %615, %611
  %616 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %617 = add i32 %tile_origin.2567, %x_loc583
  %618 = mul nuw nsw i32 %617, 1
  %619 = add nuw nsw i32 0, %618
  %620 = mul nuw nsw i32 %616, 8192
  %621 = add nuw nsw i32 %619, %620
  %622 = mul nuw nsw i32 %tile_origin.0565, 8192
  %623 = add nuw nsw i32 %621, %622
  %624 = udiv i32 %623, 1
  %Arg_11.12 = getelementptr inbounds float, ptr %arg11, i32 %623
  %Arg_11.12584 = load float, ptr %Arg_11.12, align 4, !invariant.load !269
  %Arg_10.11 = getelementptr inbounds float, ptr %arg10, i32 %623
  %Arg_10.11585 = load float, ptr %Arg_10.11, align 4, !invariant.load !269
  %multiply.65 = fmul float %Arg_11.12584, %Arg_10.11585
  %region_0_93_constant_18586 = load float, ptr @3, align 4
  %Arg_10.11587 = getelementptr inbounds float, ptr %arg10, i32 %623
  %Arg_10.11588 = load float, ptr %Arg_10.11587, align 4, !invariant.load !269
  %subtract.66 = fsub float %region_0_93_constant_18586, %Arg_10.11588
  %multiply.67 = fmul float %multiply.65, %subtract.66
  store float %multiply.67, ptr %reduction_input_address556, align 4
  %625 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_69(ptr %625, ptr %reduction_input_address556, ptr %return_buffer589)
  %626 = load float, ptr %return_buffer589, align 4
  store float %626, ptr %625, align 4
  %627 = mul i32 %tile_loop.indvar581, 1024
  %628 = add i32 %627, 1
  %x_loc590 = add i32 %628, %611
  %629 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %630 = add i32 %tile_origin.2567, %x_loc590
  %631 = mul nuw nsw i32 %630, 1
  %632 = add nuw nsw i32 0, %631
  %633 = mul nuw nsw i32 %629, 8192
  %634 = add nuw nsw i32 %632, %633
  %635 = mul nuw nsw i32 %tile_origin.0565, 8192
  %636 = add nuw nsw i32 %634, %635
  %637 = udiv i32 %636, 1
  %Arg_11.12591 = getelementptr inbounds float, ptr %arg11, i32 %636
  %Arg_11.12592 = load float, ptr %Arg_11.12591, align 4, !invariant.load !269
  %Arg_10.11593 = getelementptr inbounds float, ptr %arg10, i32 %636
  %Arg_10.11594 = load float, ptr %Arg_10.11593, align 4, !invariant.load !269
  %multiply.65595 = fmul float %Arg_11.12592, %Arg_10.11594
  %region_0_93_constant_18596 = load float, ptr @3, align 4
  %Arg_10.11597 = getelementptr inbounds float, ptr %arg10, i32 %636
  %Arg_10.11598 = load float, ptr %Arg_10.11597, align 4, !invariant.load !269
  %subtract.66599 = fsub float %region_0_93_constant_18596, %Arg_10.11598
  %multiply.67600 = fmul float %multiply.65595, %subtract.66599
  store float %multiply.67600, ptr %reduction_input_address556, align 4
  %638 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_69(ptr %638, ptr %reduction_input_address556, ptr %return_buffer601)
  %639 = load float, ptr %return_buffer601, align 4
  store float %639, ptr %638, align 4
  br label %tile_loop.loop_header578, !llvm.loop !305

tile_loop.loop_exit577:                           ; preds = %tile_loop.loop_header578
  br label %is_full_tile-after576

is_full_tile-false575:                            ; preds = %y_in_tile.loop_body570
  %640 = mul i32 %thread_id.x560, 2
  store i32 0, ptr %tile_loop.invar_address605, align 4
  br label %tile_loop.loop_header603

tile_loop.loop_header603:                         ; preds = %x_in_tile-after624, %is_full_tile-false575
  %tile_loop.indvar606 = load i32, ptr %tile_loop.invar_address605, align 4
  %641 = icmp uge i32 %tile_loop.indvar606, 8
  br i1 %641, label %tile_loop.loop_exit602, label %tile_loop.loop_body604

tile_loop.loop_body604:                           ; preds = %tile_loop.loop_header603
  %invar.inc607 = add nuw nsw i32 %tile_loop.indvar606, 1
  store i32 %invar.inc607, ptr %tile_loop.invar_address605, align 4
  %642 = icmp eq i32 %tile_loop.indvar606, 0
  %643 = mul i32 %tile_loop.indvar606, 1024
  %644 = add i32 %643, 0
  %x_loc608 = add i32 %644, %640
  %645 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %646 = add i32 %tile_origin.2567, %x_loc608
  %647 = icmp ult i32 %x_loc608, %tile_bound564
  br i1 %647, label %x_in_tile-true609, label %x_in_tile-after610

x_in_tile-after610:                               ; preds = %x_in_tile-true609, %tile_loop.loop_body604
  %648 = mul i32 %tile_loop.indvar606, 1024
  %649 = add i32 %648, 1
  %x_loc622 = add i32 %649, %640
  %650 = add i32 %tile_origin.1566, %y_in_tile.indvar572
  %651 = add i32 %tile_origin.2567, %x_loc622
  %652 = icmp ult i32 %x_loc622, %tile_bound564
  br i1 %652, label %x_in_tile-true623, label %x_in_tile-after624

x_in_tile-after624:                               ; preds = %x_in_tile-true623, %x_in_tile-after610
  br label %tile_loop.loop_header603, !llvm.loop !306

tile_loop.loop_exit602:                           ; preds = %tile_loop.loop_header603
  br label %is_full_tile-after576

x_in_tile-true609:                                ; preds = %tile_loop.loop_body604
  %653 = mul nuw nsw i32 %646, 1
  %654 = add nuw nsw i32 0, %653
  %655 = mul nuw nsw i32 %645, 8192
  %656 = add nuw nsw i32 %654, %655
  %657 = mul nuw nsw i32 %tile_origin.0565, 8192
  %658 = add nuw nsw i32 %656, %657
  %659 = udiv i32 %658, 1
  %Arg_11.12611 = getelementptr inbounds float, ptr %arg11, i32 %658
  %Arg_11.12612 = load float, ptr %Arg_11.12611, align 4, !invariant.load !269
  %Arg_10.11613 = getelementptr inbounds float, ptr %arg10, i32 %658
  %Arg_10.11614 = load float, ptr %Arg_10.11613, align 4, !invariant.load !269
  %multiply.65615 = fmul float %Arg_11.12612, %Arg_10.11614
  %region_0_93_constant_18616 = load float, ptr @3, align 4
  %Arg_10.11617 = getelementptr inbounds float, ptr %arg10, i32 %658
  %Arg_10.11618 = load float, ptr %Arg_10.11617, align 4, !invariant.load !269
  %subtract.66619 = fsub float %region_0_93_constant_18616, %Arg_10.11618
  %multiply.67620 = fmul float %multiply.65615, %subtract.66619
  store float %multiply.67620, ptr %reduction_input_address556, align 4
  %660 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_69(ptr %660, ptr %reduction_input_address556, ptr %return_buffer621)
  %661 = load float, ptr %return_buffer621, align 4
  store float %661, ptr %660, align 4
  br label %x_in_tile-after610

x_in_tile-true623:                                ; preds = %x_in_tile-after610
  %662 = mul nuw nsw i32 %651, 1
  %663 = add nuw nsw i32 0, %662
  %664 = mul nuw nsw i32 %650, 8192
  %665 = add nuw nsw i32 %663, %664
  %666 = mul nuw nsw i32 %tile_origin.0565, 8192
  %667 = add nuw nsw i32 %665, %666
  %668 = udiv i32 %667, 1
  %Arg_11.12625 = getelementptr inbounds float, ptr %arg11, i32 %667
  %Arg_11.12626 = load float, ptr %Arg_11.12625, align 4, !invariant.load !269
  %Arg_10.11627 = getelementptr inbounds float, ptr %arg10, i32 %667
  %Arg_10.11628 = load float, ptr %Arg_10.11627, align 4, !invariant.load !269
  %multiply.65629 = fmul float %Arg_11.12626, %Arg_10.11628
  %region_0_93_constant_18630 = load float, ptr @3, align 4
  %Arg_10.11631 = getelementptr inbounds float, ptr %arg10, i32 %667
  %Arg_10.11632 = load float, ptr %Arg_10.11631, align 4, !invariant.load !269
  %subtract.66633 = fsub float %region_0_93_constant_18630, %Arg_10.11632
  %multiply.67634 = fmul float %multiply.65629, %subtract.66633
  store float %multiply.67634, ptr %reduction_input_address556, align 4
  %669 = getelementptr inbounds float, ptr %partial_reduction_result557, i32 0
  call void @region_6_69(ptr %669, ptr %reduction_input_address556, ptr %return_buffer635)
  %670 = load float, ptr %return_buffer635, align 4
  store float %670, ptr %669, align 4
  br label %x_in_tile-after624

intra_warp_reduce_write-true652:                  ; preds = %y_in_tile.loop_exit568
  %671 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i32 0, i32 %583, i32 0, i32 %608
  %672 = addrspacecast ptr addrspace(3) %671 to ptr
  %673 = load float, ptr %current_output636, align 4
  store float %673, ptr %672, align 4
  br label %intra_warp_reduce_write-after653

inter_warp_reduce-true654:                        ; preds = %intra_warp_reduce_write-after653
  %674 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i32 0, i32 %583, i32 0, i32 %lane_id562
  %675 = addrspacecast ptr addrspace(3) %674 to ptr
  store float %region_0_93_constant_23558, ptr %initial_value_addr656, align 4
  %676 = icmp ult i32 %thread_id.x560, 16
  %677 = select i1 %676, ptr %675, ptr %initial_value_addr656
  %partial_reduction_result658 = load float, ptr %677, align 4
  %678 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result658, i32 16, i32 31)
  store float %678, ptr %result_from_other_lane657, align 4
  call void @region_6_69(ptr %677, ptr %result_from_other_lane657, ptr %return_buffer659)
  %679 = load float, ptr %return_buffer659, align 4
  store float %679, ptr %677, align 4
  %partial_reduction_result661 = load float, ptr %677, align 4
  %680 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result661, i32 8, i32 31)
  store float %680, ptr %result_from_other_lane660, align 4
  call void @region_6_69(ptr %677, ptr %result_from_other_lane660, ptr %return_buffer662)
  %681 = load float, ptr %return_buffer662, align 4
  store float %681, ptr %677, align 4
  %partial_reduction_result664 = load float, ptr %677, align 4
  %682 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result664, i32 4, i32 31)
  store float %682, ptr %result_from_other_lane663, align 4
  call void @region_6_69(ptr %677, ptr %result_from_other_lane663, ptr %return_buffer665)
  %683 = load float, ptr %return_buffer665, align 4
  store float %683, ptr %677, align 4
  %partial_reduction_result667 = load float, ptr %677, align 4
  %684 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result667, i32 2, i32 31)
  store float %684, ptr %result_from_other_lane666, align 4
  call void @region_6_69(ptr %677, ptr %result_from_other_lane666, ptr %return_buffer668)
  %685 = load float, ptr %return_buffer668, align 4
  store float %685, ptr %677, align 4
  %partial_reduction_result670 = load float, ptr %677, align 4
  %686 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result670, i32 1, i32 31)
  store float %686, ptr %result_from_other_lane669, align 4
  call void @region_6_69(ptr %677, ptr %result_from_other_lane669, ptr %return_buffer671)
  %687 = load float, ptr %return_buffer671, align 4
  store float %687, ptr %677, align 4
  %688 = icmp eq i32 %thread_id.x560, 0
  br i1 %688, label %reduction_write_output-true672, label %reduction_write_output-after673

reduction_write_output-after673:                  ; preds = %reduction_write_output-true672, %inter_warp_reduce-true654
  br label %inter_warp_reduce-after655

reduction_write_output-true672:                   ; preds = %inter_warp_reduce-true654
  %689 = mul i32 %thread_id.x560, 2
  %690 = add i32 %tile_origin.1566, %thread_id.y561
  %691 = add i32 %tile_origin.2567, %689
  %692 = add i32 %691, 0
  %output674 = load float, ptr %677, align 4
  store float %output674, ptr %arg21, align 4
  br label %reduction_write_output-after673

reduce-group-6-true:                              ; preds = %reduce-group-5-after
  %region_0_93_constant_23677 = load float, ptr @2, align 4
  %693 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  store float %region_0_93_constant_23677, ptr %693, align 4
  %694 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %695 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %696 = urem i32 %694, 512
  %697 = udiv i32 %694, 512
  %698 = mul i32 %695, 1
  %699 = add i32 %698, %697
  %700 = icmp ult i32 %699, 1
  br i1 %700, label %701, label %early_return678

701:                                              ; preds = %reduce-group-6-true
  %thread_id.x679 = urem i32 %696, 512
  %thread_id.y680 = udiv i32 %696, 512
  %lane_id681 = urem i32 %696, 32
  %702 = udiv i32 %699, 1
  %703 = urem i32 %702, 1
  %704 = udiv i32 %699, 1
  %705 = urem i32 %704, 1
  %706 = udiv i32 %699, 1
  %707 = icmp eq i32 %705, 0
  %tile_bound682 = select i1 %707, i32 1, i32 1
  %708 = icmp eq i32 %703, 0
  %tile_bound683 = select i1 %708, i32 8192, i32 8192
  %tile_origin.0684 = mul i32 %706, 1
  %tile_origin.1685 = mul i32 %705, 1
  %tile_origin.2686 = mul i32 %703, 8192
  store i32 %thread_id.y680, ptr %y_in_tile.invar_address690, align 4
  br label %y_in_tile.loop_header688

y_in_tile.loop_header688:                         ; preds = %is_full_tile-after695, %701
  %y_in_tile.indvar691 = load i32, ptr %y_in_tile.invar_address690, align 4
  %709 = icmp uge i32 %y_in_tile.indvar691, %tile_bound682
  br i1 %709, label %y_in_tile.loop_exit687, label %y_in_tile.loop_body689

y_in_tile.loop_body689:                           ; preds = %y_in_tile.loop_header688
  %invar.inc692 = add nuw nsw i32 %y_in_tile.indvar691, 1
  store i32 %invar.inc692, ptr %y_in_tile.invar_address690, align 4
  %710 = icmp eq i32 %y_in_tile.indvar691, %thread_id.y680
  %711 = icmp eq i32 8192, %tile_bound683
  br i1 %711, label %is_full_tile-true693, label %is_full_tile-false694

is_full_tile-after695:                            ; preds = %tile_loop.loop_exit721, %tile_loop.loop_exit696
  br label %y_in_tile.loop_header688, !llvm.loop !307

y_in_tile.loop_exit687:                           ; preds = %y_in_tile.loop_header688
  %current_output755 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  %partial_reduction_result757 = load float, ptr %current_output755, align 4
  %712 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result757, i32 16, i32 31)
  store float %712, ptr %result_from_other_lane756, align 4
  call void @region_7_78(ptr %current_output755, ptr %result_from_other_lane756, ptr %return_buffer758)
  %713 = load float, ptr %return_buffer758, align 4
  store float %713, ptr %current_output755, align 4
  %partial_reduction_result760 = load float, ptr %current_output755, align 4
  %714 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result760, i32 8, i32 31)
  store float %714, ptr %result_from_other_lane759, align 4
  call void @region_7_78(ptr %current_output755, ptr %result_from_other_lane759, ptr %return_buffer761)
  %715 = load float, ptr %return_buffer761, align 4
  store float %715, ptr %current_output755, align 4
  %partial_reduction_result763 = load float, ptr %current_output755, align 4
  %716 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result763, i32 4, i32 31)
  store float %716, ptr %result_from_other_lane762, align 4
  call void @region_7_78(ptr %current_output755, ptr %result_from_other_lane762, ptr %return_buffer764)
  %717 = load float, ptr %return_buffer764, align 4
  store float %717, ptr %current_output755, align 4
  %partial_reduction_result766 = load float, ptr %current_output755, align 4
  %718 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result766, i32 2, i32 31)
  store float %718, ptr %result_from_other_lane765, align 4
  call void @region_7_78(ptr %current_output755, ptr %result_from_other_lane765, ptr %return_buffer767)
  %719 = load float, ptr %return_buffer767, align 4
  store float %719, ptr %current_output755, align 4
  %partial_reduction_result769 = load float, ptr %current_output755, align 4
  %720 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result769, i32 1, i32 31)
  store float %720, ptr %result_from_other_lane768, align 4
  call void @region_7_78(ptr %current_output755, ptr %result_from_other_lane768, ptr %return_buffer770)
  %721 = load float, ptr %return_buffer770, align 4
  store float %721, ptr %current_output755, align 4
  %722 = udiv i32 %thread_id.x679, 32
  %723 = icmp eq i32 %lane_id681, 0
  br i1 %723, label %intra_warp_reduce_write-true771, label %intra_warp_reduce_write-after772

intra_warp_reduce_write-after772:                 ; preds = %intra_warp_reduce_write-true771, %y_in_tile.loop_exit687
  call void @llvm.nvvm.barrier0()
  %724 = icmp eq i32 %722, 0
  br i1 %724, label %inter_warp_reduce-true773, label %inter_warp_reduce-after774

inter_warp_reduce-after774:                       ; preds = %reduction_write_output-after792, %intra_warp_reduce_write-after772
  br label %reduce-group-6-after

early_return678:                                  ; preds = %reduce-group-6-true
  ret void

is_full_tile-true693:                             ; preds = %y_in_tile.loop_body689
  %725 = mul i32 %thread_id.x679, 2
  store i32 0, ptr %tile_loop.invar_address699, align 4
  br label %tile_loop.loop_header697

tile_loop.loop_header697:                         ; preds = %tile_loop.loop_body698, %is_full_tile-true693
  %tile_loop.indvar700 = load i32, ptr %tile_loop.invar_address699, align 4
  %726 = icmp uge i32 %tile_loop.indvar700, 8
  br i1 %726, label %tile_loop.loop_exit696, label %tile_loop.loop_body698

tile_loop.loop_body698:                           ; preds = %tile_loop.loop_header697
  %invar.inc701 = add nuw nsw i32 %tile_loop.indvar700, 1
  store i32 %invar.inc701, ptr %tile_loop.invar_address699, align 4
  %727 = icmp eq i32 %tile_loop.indvar700, 0
  %728 = mul i32 %tile_loop.indvar700, 1024
  %729 = add i32 %728, 0
  %x_loc702 = add i32 %729, %725
  %730 = add i32 %tile_origin.1685, %y_in_tile.indvar691
  %731 = add i32 %tile_origin.2686, %x_loc702
  %732 = mul nuw nsw i32 %731, 1
  %733 = add nuw nsw i32 0, %732
  %734 = mul nuw nsw i32 %730, 8192
  %735 = add nuw nsw i32 %733, %734
  %736 = mul nuw nsw i32 %tile_origin.0684, 8192
  %737 = add nuw nsw i32 %735, %736
  %738 = udiv i32 %737, 1
  %Arg_13.14 = getelementptr inbounds float, ptr %arg13, i32 %737
  %Arg_13.14703 = load float, ptr %Arg_13.14, align 4, !invariant.load !269
  %Arg_12.13 = getelementptr inbounds float, ptr %arg12, i32 %737
  %Arg_12.13704 = load float, ptr %Arg_12.13, align 4, !invariant.load !269
  %multiply.74 = fmul float %Arg_13.14703, %Arg_12.13704
  %region_0_93_constant_18705 = load float, ptr @3, align 4
  %Arg_12.13706 = getelementptr inbounds float, ptr %arg12, i32 %737
  %Arg_12.13707 = load float, ptr %Arg_12.13706, align 4, !invariant.load !269
  %subtract.75 = fsub float %region_0_93_constant_18705, %Arg_12.13707
  %multiply.76 = fmul float %multiply.74, %subtract.75
  store float %multiply.76, ptr %reduction_input_address675, align 4
  %739 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  call void @region_7_78(ptr %739, ptr %reduction_input_address675, ptr %return_buffer708)
  %740 = load float, ptr %return_buffer708, align 4
  store float %740, ptr %739, align 4
  %741 = mul i32 %tile_loop.indvar700, 1024
  %742 = add i32 %741, 1
  %x_loc709 = add i32 %742, %725
  %743 = add i32 %tile_origin.1685, %y_in_tile.indvar691
  %744 = add i32 %tile_origin.2686, %x_loc709
  %745 = mul nuw nsw i32 %744, 1
  %746 = add nuw nsw i32 0, %745
  %747 = mul nuw nsw i32 %743, 8192
  %748 = add nuw nsw i32 %746, %747
  %749 = mul nuw nsw i32 %tile_origin.0684, 8192
  %750 = add nuw nsw i32 %748, %749
  %751 = udiv i32 %750, 1
  %Arg_13.14710 = getelementptr inbounds float, ptr %arg13, i32 %750
  %Arg_13.14711 = load float, ptr %Arg_13.14710, align 4, !invariant.load !269
  %Arg_12.13712 = getelementptr inbounds float, ptr %arg12, i32 %750
  %Arg_12.13713 = load float, ptr %Arg_12.13712, align 4, !invariant.load !269
  %multiply.74714 = fmul float %Arg_13.14711, %Arg_12.13713
  %region_0_93_constant_18715 = load float, ptr @3, align 4
  %Arg_12.13716 = getelementptr inbounds float, ptr %arg12, i32 %750
  %Arg_12.13717 = load float, ptr %Arg_12.13716, align 4, !invariant.load !269
  %subtract.75718 = fsub float %region_0_93_constant_18715, %Arg_12.13717
  %multiply.76719 = fmul float %multiply.74714, %subtract.75718
  store float %multiply.76719, ptr %reduction_input_address675, align 4
  %752 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  call void @region_7_78(ptr %752, ptr %reduction_input_address675, ptr %return_buffer720)
  %753 = load float, ptr %return_buffer720, align 4
  store float %753, ptr %752, align 4
  br label %tile_loop.loop_header697, !llvm.loop !308

tile_loop.loop_exit696:                           ; preds = %tile_loop.loop_header697
  br label %is_full_tile-after695

is_full_tile-false694:                            ; preds = %y_in_tile.loop_body689
  %754 = mul i32 %thread_id.x679, 2
  store i32 0, ptr %tile_loop.invar_address724, align 4
  br label %tile_loop.loop_header722

tile_loop.loop_header722:                         ; preds = %x_in_tile-after743, %is_full_tile-false694
  %tile_loop.indvar725 = load i32, ptr %tile_loop.invar_address724, align 4
  %755 = icmp uge i32 %tile_loop.indvar725, 8
  br i1 %755, label %tile_loop.loop_exit721, label %tile_loop.loop_body723

tile_loop.loop_body723:                           ; preds = %tile_loop.loop_header722
  %invar.inc726 = add nuw nsw i32 %tile_loop.indvar725, 1
  store i32 %invar.inc726, ptr %tile_loop.invar_address724, align 4
  %756 = icmp eq i32 %tile_loop.indvar725, 0
  %757 = mul i32 %tile_loop.indvar725, 1024
  %758 = add i32 %757, 0
  %x_loc727 = add i32 %758, %754
  %759 = add i32 %tile_origin.1685, %y_in_tile.indvar691
  %760 = add i32 %tile_origin.2686, %x_loc727
  %761 = icmp ult i32 %x_loc727, %tile_bound683
  br i1 %761, label %x_in_tile-true728, label %x_in_tile-after729

x_in_tile-after729:                               ; preds = %x_in_tile-true728, %tile_loop.loop_body723
  %762 = mul i32 %tile_loop.indvar725, 1024
  %763 = add i32 %762, 1
  %x_loc741 = add i32 %763, %754
  %764 = add i32 %tile_origin.1685, %y_in_tile.indvar691
  %765 = add i32 %tile_origin.2686, %x_loc741
  %766 = icmp ult i32 %x_loc741, %tile_bound683
  br i1 %766, label %x_in_tile-true742, label %x_in_tile-after743

x_in_tile-after743:                               ; preds = %x_in_tile-true742, %x_in_tile-after729
  br label %tile_loop.loop_header722, !llvm.loop !309

tile_loop.loop_exit721:                           ; preds = %tile_loop.loop_header722
  br label %is_full_tile-after695

x_in_tile-true728:                                ; preds = %tile_loop.loop_body723
  %767 = mul nuw nsw i32 %760, 1
  %768 = add nuw nsw i32 0, %767
  %769 = mul nuw nsw i32 %759, 8192
  %770 = add nuw nsw i32 %768, %769
  %771 = mul nuw nsw i32 %tile_origin.0684, 8192
  %772 = add nuw nsw i32 %770, %771
  %773 = udiv i32 %772, 1
  %Arg_13.14730 = getelementptr inbounds float, ptr %arg13, i32 %772
  %Arg_13.14731 = load float, ptr %Arg_13.14730, align 4, !invariant.load !269
  %Arg_12.13732 = getelementptr inbounds float, ptr %arg12, i32 %772
  %Arg_12.13733 = load float, ptr %Arg_12.13732, align 4, !invariant.load !269
  %multiply.74734 = fmul float %Arg_13.14731, %Arg_12.13733
  %region_0_93_constant_18735 = load float, ptr @3, align 4
  %Arg_12.13736 = getelementptr inbounds float, ptr %arg12, i32 %772
  %Arg_12.13737 = load float, ptr %Arg_12.13736, align 4, !invariant.load !269
  %subtract.75738 = fsub float %region_0_93_constant_18735, %Arg_12.13737
  %multiply.76739 = fmul float %multiply.74734, %subtract.75738
  store float %multiply.76739, ptr %reduction_input_address675, align 4
  %774 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  call void @region_7_78(ptr %774, ptr %reduction_input_address675, ptr %return_buffer740)
  %775 = load float, ptr %return_buffer740, align 4
  store float %775, ptr %774, align 4
  br label %x_in_tile-after729

x_in_tile-true742:                                ; preds = %x_in_tile-after729
  %776 = mul nuw nsw i32 %765, 1
  %777 = add nuw nsw i32 0, %776
  %778 = mul nuw nsw i32 %764, 8192
  %779 = add nuw nsw i32 %777, %778
  %780 = mul nuw nsw i32 %tile_origin.0684, 8192
  %781 = add nuw nsw i32 %779, %780
  %782 = udiv i32 %781, 1
  %Arg_13.14744 = getelementptr inbounds float, ptr %arg13, i32 %781
  %Arg_13.14745 = load float, ptr %Arg_13.14744, align 4, !invariant.load !269
  %Arg_12.13746 = getelementptr inbounds float, ptr %arg12, i32 %781
  %Arg_12.13747 = load float, ptr %Arg_12.13746, align 4, !invariant.load !269
  %multiply.74748 = fmul float %Arg_13.14745, %Arg_12.13747
  %region_0_93_constant_18749 = load float, ptr @3, align 4
  %Arg_12.13750 = getelementptr inbounds float, ptr %arg12, i32 %781
  %Arg_12.13751 = load float, ptr %Arg_12.13750, align 4, !invariant.load !269
  %subtract.75752 = fsub float %region_0_93_constant_18749, %Arg_12.13751
  %multiply.76753 = fmul float %multiply.74748, %subtract.75752
  store float %multiply.76753, ptr %reduction_input_address675, align 4
  %783 = getelementptr inbounds float, ptr %partial_reduction_result676, i32 0
  call void @region_7_78(ptr %783, ptr %reduction_input_address675, ptr %return_buffer754)
  %784 = load float, ptr %return_buffer754, align 4
  store float %784, ptr %783, align 4
  br label %x_in_tile-after743

intra_warp_reduce_write-true771:                  ; preds = %y_in_tile.loop_exit687
  %785 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i32 0, i32 %697, i32 0, i32 %722
  %786 = addrspacecast ptr addrspace(3) %785 to ptr
  %787 = load float, ptr %current_output755, align 4
  store float %787, ptr %786, align 4
  br label %intra_warp_reduce_write-after772

inter_warp_reduce-true773:                        ; preds = %intra_warp_reduce_write-after772
  %788 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i32 0, i32 %697, i32 0, i32 %lane_id681
  %789 = addrspacecast ptr addrspace(3) %788 to ptr
  store float %region_0_93_constant_23677, ptr %initial_value_addr775, align 4
  %790 = icmp ult i32 %thread_id.x679, 16
  %791 = select i1 %790, ptr %789, ptr %initial_value_addr775
  %partial_reduction_result777 = load float, ptr %791, align 4
  %792 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result777, i32 16, i32 31)
  store float %792, ptr %result_from_other_lane776, align 4
  call void @region_7_78(ptr %791, ptr %result_from_other_lane776, ptr %return_buffer778)
  %793 = load float, ptr %return_buffer778, align 4
  store float %793, ptr %791, align 4
  %partial_reduction_result780 = load float, ptr %791, align 4
  %794 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result780, i32 8, i32 31)
  store float %794, ptr %result_from_other_lane779, align 4
  call void @region_7_78(ptr %791, ptr %result_from_other_lane779, ptr %return_buffer781)
  %795 = load float, ptr %return_buffer781, align 4
  store float %795, ptr %791, align 4
  %partial_reduction_result783 = load float, ptr %791, align 4
  %796 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result783, i32 4, i32 31)
  store float %796, ptr %result_from_other_lane782, align 4
  call void @region_7_78(ptr %791, ptr %result_from_other_lane782, ptr %return_buffer784)
  %797 = load float, ptr %return_buffer784, align 4
  store float %797, ptr %791, align 4
  %partial_reduction_result786 = load float, ptr %791, align 4
  %798 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result786, i32 2, i32 31)
  store float %798, ptr %result_from_other_lane785, align 4
  call void @region_7_78(ptr %791, ptr %result_from_other_lane785, ptr %return_buffer787)
  %799 = load float, ptr %return_buffer787, align 4
  store float %799, ptr %791, align 4
  %partial_reduction_result789 = load float, ptr %791, align 4
  %800 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result789, i32 1, i32 31)
  store float %800, ptr %result_from_other_lane788, align 4
  call void @region_7_78(ptr %791, ptr %result_from_other_lane788, ptr %return_buffer790)
  %801 = load float, ptr %return_buffer790, align 4
  store float %801, ptr %791, align 4
  %802 = icmp eq i32 %thread_id.x679, 0
  br i1 %802, label %reduction_write_output-true791, label %reduction_write_output-after792

reduction_write_output-after792:                  ; preds = %reduction_write_output-true791, %inter_warp_reduce-true773
  br label %inter_warp_reduce-after774

reduction_write_output-true791:                   ; preds = %inter_warp_reduce-true773
  %803 = mul i32 %thread_id.x679, 2
  %804 = add i32 %tile_origin.1685, %thread_id.y680
  %805 = add i32 %tile_origin.2686, %803
  %806 = add i32 %805, 0
  %output793 = load float, ptr %791, align 4
  store float %output793, ptr %arg22, align 4
  br label %reduction_write_output-after792

reduce-group-7-true:                              ; preds = %reduce-group-6-after
  %region_0_93_constant_23796 = load float, ptr @2, align 4
  %807 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  store float %region_0_93_constant_23796, ptr %807, align 4
  %808 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %809 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %810 = urem i32 %808, 512
  %811 = udiv i32 %808, 512
  %812 = mul i32 %809, 1
  %813 = add i32 %812, %811
  %814 = icmp ult i32 %813, 1
  br i1 %814, label %815, label %early_return797

815:                                              ; preds = %reduce-group-7-true
  %thread_id.x798 = urem i32 %810, 512
  %thread_id.y799 = udiv i32 %810, 512
  %lane_id800 = urem i32 %810, 32
  %816 = udiv i32 %813, 1
  %817 = urem i32 %816, 1
  %818 = udiv i32 %813, 1
  %819 = urem i32 %818, 1
  %820 = udiv i32 %813, 1
  %821 = icmp eq i32 %819, 0
  %tile_bound801 = select i1 %821, i32 1, i32 1
  %822 = icmp eq i32 %817, 0
  %tile_bound802 = select i1 %822, i32 8192, i32 8192
  %tile_origin.0803 = mul i32 %820, 1
  %tile_origin.1804 = mul i32 %819, 1
  %tile_origin.2805 = mul i32 %817, 8192
  store i32 %thread_id.y799, ptr %y_in_tile.invar_address809, align 4
  br label %y_in_tile.loop_header807

y_in_tile.loop_header807:                         ; preds = %is_full_tile-after814, %815
  %y_in_tile.indvar810 = load i32, ptr %y_in_tile.invar_address809, align 4
  %823 = icmp uge i32 %y_in_tile.indvar810, %tile_bound801
  br i1 %823, label %y_in_tile.loop_exit806, label %y_in_tile.loop_body808

y_in_tile.loop_body808:                           ; preds = %y_in_tile.loop_header807
  %invar.inc811 = add nuw nsw i32 %y_in_tile.indvar810, 1
  store i32 %invar.inc811, ptr %y_in_tile.invar_address809, align 4
  %824 = icmp eq i32 %y_in_tile.indvar810, %thread_id.y799
  %825 = icmp eq i32 8192, %tile_bound802
  br i1 %825, label %is_full_tile-true812, label %is_full_tile-false813

is_full_tile-after814:                            ; preds = %tile_loop.loop_exit840, %tile_loop.loop_exit815
  br label %y_in_tile.loop_header807, !llvm.loop !310

y_in_tile.loop_exit806:                           ; preds = %y_in_tile.loop_header807
  %current_output874 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  %partial_reduction_result876 = load float, ptr %current_output874, align 4
  %826 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result876, i32 16, i32 31)
  store float %826, ptr %result_from_other_lane875, align 4
  call void @region_8_87(ptr %current_output874, ptr %result_from_other_lane875, ptr %return_buffer877)
  %827 = load float, ptr %return_buffer877, align 4
  store float %827, ptr %current_output874, align 4
  %partial_reduction_result879 = load float, ptr %current_output874, align 4
  %828 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result879, i32 8, i32 31)
  store float %828, ptr %result_from_other_lane878, align 4
  call void @region_8_87(ptr %current_output874, ptr %result_from_other_lane878, ptr %return_buffer880)
  %829 = load float, ptr %return_buffer880, align 4
  store float %829, ptr %current_output874, align 4
  %partial_reduction_result882 = load float, ptr %current_output874, align 4
  %830 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result882, i32 4, i32 31)
  store float %830, ptr %result_from_other_lane881, align 4
  call void @region_8_87(ptr %current_output874, ptr %result_from_other_lane881, ptr %return_buffer883)
  %831 = load float, ptr %return_buffer883, align 4
  store float %831, ptr %current_output874, align 4
  %partial_reduction_result885 = load float, ptr %current_output874, align 4
  %832 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result885, i32 2, i32 31)
  store float %832, ptr %result_from_other_lane884, align 4
  call void @region_8_87(ptr %current_output874, ptr %result_from_other_lane884, ptr %return_buffer886)
  %833 = load float, ptr %return_buffer886, align 4
  store float %833, ptr %current_output874, align 4
  %partial_reduction_result888 = load float, ptr %current_output874, align 4
  %834 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result888, i32 1, i32 31)
  store float %834, ptr %result_from_other_lane887, align 4
  call void @region_8_87(ptr %current_output874, ptr %result_from_other_lane887, ptr %return_buffer889)
  %835 = load float, ptr %return_buffer889, align 4
  store float %835, ptr %current_output874, align 4
  %836 = udiv i32 %thread_id.x798, 32
  %837 = icmp eq i32 %lane_id800, 0
  br i1 %837, label %intra_warp_reduce_write-true890, label %intra_warp_reduce_write-after891

intra_warp_reduce_write-after891:                 ; preds = %intra_warp_reduce_write-true890, %y_in_tile.loop_exit806
  call void @llvm.nvvm.barrier0()
  %838 = icmp eq i32 %836, 0
  br i1 %838, label %inter_warp_reduce-true892, label %inter_warp_reduce-after893

inter_warp_reduce-after893:                       ; preds = %reduction_write_output-after911, %intra_warp_reduce_write-after891
  br label %reduce-group-7-after

early_return797:                                  ; preds = %reduce-group-7-true
  ret void

is_full_tile-true812:                             ; preds = %y_in_tile.loop_body808
  %839 = mul i32 %thread_id.x798, 2
  store i32 0, ptr %tile_loop.invar_address818, align 4
  br label %tile_loop.loop_header816

tile_loop.loop_header816:                         ; preds = %tile_loop.loop_body817, %is_full_tile-true812
  %tile_loop.indvar819 = load i32, ptr %tile_loop.invar_address818, align 4
  %840 = icmp uge i32 %tile_loop.indvar819, 8
  br i1 %840, label %tile_loop.loop_exit815, label %tile_loop.loop_body817

tile_loop.loop_body817:                           ; preds = %tile_loop.loop_header816
  %invar.inc820 = add nuw nsw i32 %tile_loop.indvar819, 1
  store i32 %invar.inc820, ptr %tile_loop.invar_address818, align 4
  %841 = icmp eq i32 %tile_loop.indvar819, 0
  %842 = mul i32 %tile_loop.indvar819, 1024
  %843 = add i32 %842, 0
  %x_loc821 = add i32 %843, %839
  %844 = add i32 %tile_origin.1804, %y_in_tile.indvar810
  %845 = add i32 %tile_origin.2805, %x_loc821
  %846 = mul nuw nsw i32 %845, 1
  %847 = add nuw nsw i32 0, %846
  %848 = mul nuw nsw i32 %844, 8192
  %849 = add nuw nsw i32 %847, %848
  %850 = mul nuw nsw i32 %tile_origin.0803, 8192
  %851 = add nuw nsw i32 %849, %850
  %852 = udiv i32 %851, 1
  %Arg_15.16 = getelementptr inbounds float, ptr %arg15, i32 %851
  %Arg_15.16822 = load float, ptr %Arg_15.16, align 4, !invariant.load !269
  %Arg_14.15 = getelementptr inbounds float, ptr %arg14, i32 %851
  %Arg_14.15823 = load float, ptr %Arg_14.15, align 4, !invariant.load !269
  %multiply.83 = fmul float %Arg_15.16822, %Arg_14.15823
  %region_0_93_constant_18824 = load float, ptr @3, align 4
  %Arg_14.15825 = getelementptr inbounds float, ptr %arg14, i32 %851
  %Arg_14.15826 = load float, ptr %Arg_14.15825, align 4, !invariant.load !269
  %subtract.84 = fsub float %region_0_93_constant_18824, %Arg_14.15826
  %multiply.85 = fmul float %multiply.83, %subtract.84
  store float %multiply.85, ptr %reduction_input_address794, align 4
  %853 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  call void @region_8_87(ptr %853, ptr %reduction_input_address794, ptr %return_buffer827)
  %854 = load float, ptr %return_buffer827, align 4
  store float %854, ptr %853, align 4
  %855 = mul i32 %tile_loop.indvar819, 1024
  %856 = add i32 %855, 1
  %x_loc828 = add i32 %856, %839
  %857 = add i32 %tile_origin.1804, %y_in_tile.indvar810
  %858 = add i32 %tile_origin.2805, %x_loc828
  %859 = mul nuw nsw i32 %858, 1
  %860 = add nuw nsw i32 0, %859
  %861 = mul nuw nsw i32 %857, 8192
  %862 = add nuw nsw i32 %860, %861
  %863 = mul nuw nsw i32 %tile_origin.0803, 8192
  %864 = add nuw nsw i32 %862, %863
  %865 = udiv i32 %864, 1
  %Arg_15.16829 = getelementptr inbounds float, ptr %arg15, i32 %864
  %Arg_15.16830 = load float, ptr %Arg_15.16829, align 4, !invariant.load !269
  %Arg_14.15831 = getelementptr inbounds float, ptr %arg14, i32 %864
  %Arg_14.15832 = load float, ptr %Arg_14.15831, align 4, !invariant.load !269
  %multiply.83833 = fmul float %Arg_15.16830, %Arg_14.15832
  %region_0_93_constant_18834 = load float, ptr @3, align 4
  %Arg_14.15835 = getelementptr inbounds float, ptr %arg14, i32 %864
  %Arg_14.15836 = load float, ptr %Arg_14.15835, align 4, !invariant.load !269
  %subtract.84837 = fsub float %region_0_93_constant_18834, %Arg_14.15836
  %multiply.85838 = fmul float %multiply.83833, %subtract.84837
  store float %multiply.85838, ptr %reduction_input_address794, align 4
  %866 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  call void @region_8_87(ptr %866, ptr %reduction_input_address794, ptr %return_buffer839)
  %867 = load float, ptr %return_buffer839, align 4
  store float %867, ptr %866, align 4
  br label %tile_loop.loop_header816, !llvm.loop !311

tile_loop.loop_exit815:                           ; preds = %tile_loop.loop_header816
  br label %is_full_tile-after814

is_full_tile-false813:                            ; preds = %y_in_tile.loop_body808
  %868 = mul i32 %thread_id.x798, 2
  store i32 0, ptr %tile_loop.invar_address843, align 4
  br label %tile_loop.loop_header841

tile_loop.loop_header841:                         ; preds = %x_in_tile-after862, %is_full_tile-false813
  %tile_loop.indvar844 = load i32, ptr %tile_loop.invar_address843, align 4
  %869 = icmp uge i32 %tile_loop.indvar844, 8
  br i1 %869, label %tile_loop.loop_exit840, label %tile_loop.loop_body842

tile_loop.loop_body842:                           ; preds = %tile_loop.loop_header841
  %invar.inc845 = add nuw nsw i32 %tile_loop.indvar844, 1
  store i32 %invar.inc845, ptr %tile_loop.invar_address843, align 4
  %870 = icmp eq i32 %tile_loop.indvar844, 0
  %871 = mul i32 %tile_loop.indvar844, 1024
  %872 = add i32 %871, 0
  %x_loc846 = add i32 %872, %868
  %873 = add i32 %tile_origin.1804, %y_in_tile.indvar810
  %874 = add i32 %tile_origin.2805, %x_loc846
  %875 = icmp ult i32 %x_loc846, %tile_bound802
  br i1 %875, label %x_in_tile-true847, label %x_in_tile-after848

x_in_tile-after848:                               ; preds = %x_in_tile-true847, %tile_loop.loop_body842
  %876 = mul i32 %tile_loop.indvar844, 1024
  %877 = add i32 %876, 1
  %x_loc860 = add i32 %877, %868
  %878 = add i32 %tile_origin.1804, %y_in_tile.indvar810
  %879 = add i32 %tile_origin.2805, %x_loc860
  %880 = icmp ult i32 %x_loc860, %tile_bound802
  br i1 %880, label %x_in_tile-true861, label %x_in_tile-after862

x_in_tile-after862:                               ; preds = %x_in_tile-true861, %x_in_tile-after848
  br label %tile_loop.loop_header841, !llvm.loop !312

tile_loop.loop_exit840:                           ; preds = %tile_loop.loop_header841
  br label %is_full_tile-after814

x_in_tile-true847:                                ; preds = %tile_loop.loop_body842
  %881 = mul nuw nsw i32 %874, 1
  %882 = add nuw nsw i32 0, %881
  %883 = mul nuw nsw i32 %873, 8192
  %884 = add nuw nsw i32 %882, %883
  %885 = mul nuw nsw i32 %tile_origin.0803, 8192
  %886 = add nuw nsw i32 %884, %885
  %887 = udiv i32 %886, 1
  %Arg_15.16849 = getelementptr inbounds float, ptr %arg15, i32 %886
  %Arg_15.16850 = load float, ptr %Arg_15.16849, align 4, !invariant.load !269
  %Arg_14.15851 = getelementptr inbounds float, ptr %arg14, i32 %886
  %Arg_14.15852 = load float, ptr %Arg_14.15851, align 4, !invariant.load !269
  %multiply.83853 = fmul float %Arg_15.16850, %Arg_14.15852
  %region_0_93_constant_18854 = load float, ptr @3, align 4
  %Arg_14.15855 = getelementptr inbounds float, ptr %arg14, i32 %886
  %Arg_14.15856 = load float, ptr %Arg_14.15855, align 4, !invariant.load !269
  %subtract.84857 = fsub float %region_0_93_constant_18854, %Arg_14.15856
  %multiply.85858 = fmul float %multiply.83853, %subtract.84857
  store float %multiply.85858, ptr %reduction_input_address794, align 4
  %888 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  call void @region_8_87(ptr %888, ptr %reduction_input_address794, ptr %return_buffer859)
  %889 = load float, ptr %return_buffer859, align 4
  store float %889, ptr %888, align 4
  br label %x_in_tile-after848

x_in_tile-true861:                                ; preds = %x_in_tile-after848
  %890 = mul nuw nsw i32 %879, 1
  %891 = add nuw nsw i32 0, %890
  %892 = mul nuw nsw i32 %878, 8192
  %893 = add nuw nsw i32 %891, %892
  %894 = mul nuw nsw i32 %tile_origin.0803, 8192
  %895 = add nuw nsw i32 %893, %894
  %896 = udiv i32 %895, 1
  %Arg_15.16863 = getelementptr inbounds float, ptr %arg15, i32 %895
  %Arg_15.16864 = load float, ptr %Arg_15.16863, align 4, !invariant.load !269
  %Arg_14.15865 = getelementptr inbounds float, ptr %arg14, i32 %895
  %Arg_14.15866 = load float, ptr %Arg_14.15865, align 4, !invariant.load !269
  %multiply.83867 = fmul float %Arg_15.16864, %Arg_14.15866
  %region_0_93_constant_18868 = load float, ptr @3, align 4
  %Arg_14.15869 = getelementptr inbounds float, ptr %arg14, i32 %895
  %Arg_14.15870 = load float, ptr %Arg_14.15869, align 4, !invariant.load !269
  %subtract.84871 = fsub float %region_0_93_constant_18868, %Arg_14.15870
  %multiply.85872 = fmul float %multiply.83867, %subtract.84871
  store float %multiply.85872, ptr %reduction_input_address794, align 4
  %897 = getelementptr inbounds float, ptr %partial_reduction_result795, i32 0
  call void @region_8_87(ptr %897, ptr %reduction_input_address794, ptr %return_buffer873)
  %898 = load float, ptr %return_buffer873, align 4
  store float %898, ptr %897, align 4
  br label %x_in_tile-after862

intra_warp_reduce_write-true890:                  ; preds = %y_in_tile.loop_exit806
  %899 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i32 0, i32 %811, i32 0, i32 %836
  %900 = addrspacecast ptr addrspace(3) %899 to ptr
  %901 = load float, ptr %current_output874, align 4
  store float %901, ptr %900, align 4
  br label %intra_warp_reduce_write-after891

inter_warp_reduce-true892:                        ; preds = %intra_warp_reduce_write-after891
  %902 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i32 0, i32 %811, i32 0, i32 %lane_id800
  %903 = addrspacecast ptr addrspace(3) %902 to ptr
  store float %region_0_93_constant_23796, ptr %initial_value_addr894, align 4
  %904 = icmp ult i32 %thread_id.x798, 16
  %905 = select i1 %904, ptr %903, ptr %initial_value_addr894
  %partial_reduction_result896 = load float, ptr %905, align 4
  %906 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result896, i32 16, i32 31)
  store float %906, ptr %result_from_other_lane895, align 4
  call void @region_8_87(ptr %905, ptr %result_from_other_lane895, ptr %return_buffer897)
  %907 = load float, ptr %return_buffer897, align 4
  store float %907, ptr %905, align 4
  %partial_reduction_result899 = load float, ptr %905, align 4
  %908 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result899, i32 8, i32 31)
  store float %908, ptr %result_from_other_lane898, align 4
  call void @region_8_87(ptr %905, ptr %result_from_other_lane898, ptr %return_buffer900)
  %909 = load float, ptr %return_buffer900, align 4
  store float %909, ptr %905, align 4
  %partial_reduction_result902 = load float, ptr %905, align 4
  %910 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result902, i32 4, i32 31)
  store float %910, ptr %result_from_other_lane901, align 4
  call void @region_8_87(ptr %905, ptr %result_from_other_lane901, ptr %return_buffer903)
  %911 = load float, ptr %return_buffer903, align 4
  store float %911, ptr %905, align 4
  %partial_reduction_result905 = load float, ptr %905, align 4
  %912 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result905, i32 2, i32 31)
  store float %912, ptr %result_from_other_lane904, align 4
  call void @region_8_87(ptr %905, ptr %result_from_other_lane904, ptr %return_buffer906)
  %913 = load float, ptr %return_buffer906, align 4
  store float %913, ptr %905, align 4
  %partial_reduction_result908 = load float, ptr %905, align 4
  %914 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result908, i32 1, i32 31)
  store float %914, ptr %result_from_other_lane907, align 4
  call void @region_8_87(ptr %905, ptr %result_from_other_lane907, ptr %return_buffer909)
  %915 = load float, ptr %return_buffer909, align 4
  store float %915, ptr %905, align 4
  %916 = icmp eq i32 %thread_id.x798, 0
  br i1 %916, label %reduction_write_output-true910, label %reduction_write_output-after911

reduction_write_output-after911:                  ; preds = %reduction_write_output-true910, %inter_warp_reduce-true892
  br label %inter_warp_reduce-after893

reduction_write_output-true910:                   ; preds = %inter_warp_reduce-true892
  %917 = mul i32 %thread_id.x798, 2
  %918 = add i32 %tile_origin.1804, %thread_id.y799
  %919 = add i32 %tile_origin.2805, %917
  %920 = add i32 %919, 0
  %output912 = load float, ptr %905, align 4
  store float %output912, ptr %arg23, align 4
  br label %reduction_write_output-after911
}

define internal void @region_1_24(ptr dereferenceable(4) %Arg_0.25.typed, ptr dereferenceable(4) %Arg_1.26.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.27.typed = alloca float, align 4
  %Arg_0.25 = load float, ptr %Arg_0.25.typed, align 4
  %Arg_1.26 = load float, ptr %Arg_1.26.typed, align 4
  %add.27 = fadd float %Arg_0.25, %Arg_1.26
  store float %add.27, ptr %add.27.typed, align 4
  %load_ret_value = load float, ptr %add.27.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_33(ptr dereferenceable(4) %Arg_0.34.typed, ptr dereferenceable(4) %Arg_1.35.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.36.typed = alloca float, align 4
  %Arg_0.34 = load float, ptr %Arg_0.34.typed, align 4
  %Arg_1.35 = load float, ptr %Arg_1.35.typed, align 4
  %add.36 = fadd float %Arg_0.34, %Arg_1.35
  store float %add.36, ptr %add.36.typed, align 4
  %load_ret_value = load float, ptr %add.36.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_42(ptr dereferenceable(4) %Arg_0.43.typed, ptr dereferenceable(4) %Arg_1.44.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.45.typed = alloca float, align 4
  %Arg_0.43 = load float, ptr %Arg_0.43.typed, align 4
  %Arg_1.44 = load float, ptr %Arg_1.44.typed, align 4
  %add.45 = fadd float %Arg_0.43, %Arg_1.44
  store float %add.45, ptr %add.45.typed, align 4
  %load_ret_value = load float, ptr %add.45.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_51(ptr dereferenceable(4) %Arg_0.52.typed, ptr dereferenceable(4) %Arg_1.53.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.54.typed = alloca float, align 4
  %Arg_0.52 = load float, ptr %Arg_0.52.typed, align 4
  %Arg_1.53 = load float, ptr %Arg_1.53.typed, align 4
  %add.54 = fadd float %Arg_0.52, %Arg_1.53
  store float %add.54, ptr %add.54.typed, align 4
  %load_ret_value = load float, ptr %add.54.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_60(ptr dereferenceable(4) %Arg_0.61.typed, ptr dereferenceable(4) %Arg_1.62.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.63.typed = alloca float, align 4
  %Arg_0.61 = load float, ptr %Arg_0.61.typed, align 4
  %Arg_1.62 = load float, ptr %Arg_1.62.typed, align 4
  %add.63 = fadd float %Arg_0.61, %Arg_1.62
  store float %add.63, ptr %add.63.typed, align 4
  %load_ret_value = load float, ptr %add.63.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_6_69(ptr dereferenceable(4) %Arg_0.70.typed, ptr dereferenceable(4) %Arg_1.71.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.72.typed = alloca float, align 4
  %Arg_0.70 = load float, ptr %Arg_0.70.typed, align 4
  %Arg_1.71 = load float, ptr %Arg_1.71.typed, align 4
  %add.72 = fadd float %Arg_0.70, %Arg_1.71
  store float %add.72, ptr %add.72.typed, align 4
  %load_ret_value = load float, ptr %add.72.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_7_78(ptr dereferenceable(4) %Arg_0.79.typed, ptr dereferenceable(4) %Arg_1.80.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.81.typed = alloca float, align 4
  %Arg_0.79 = load float, ptr %Arg_0.79.typed, align 4
  %Arg_1.80 = load float, ptr %Arg_1.80.typed, align 4
  %add.81 = fadd float %Arg_0.79, %Arg_1.80
  store float %add.81, ptr %add.81.typed, align 4
  %load_ret_value = load float, ptr %add.81.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_8_87(ptr dereferenceable(4) %Arg_0.88.typed, ptr dereferenceable(4) %Arg_1.89.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.90.typed = alloca float, align 4
  %Arg_0.88 = load float, ptr %Arg_0.88.typed, align 4
  %Arg_1.89 = load float, ptr %Arg_1.89.typed, align 4
  %add.90 = fadd float %Arg_0.88, %Arg_1.89
  store float %add.90, ptr %add.90.typed, align 4
  %load_ret_value = load float, ptr %add.90.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_662(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 128 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3) {
entry:
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %tile_loop.invar_address22 = alloca i32, align 4
  %return_buffer18 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @5, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %5 = urem i32 %3, 512
  %6 = udiv i32 %3, 512
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 1
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 512
  %thread_id.y = udiv i32 %5, 512
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 1
  %13 = udiv i32 %8, 1
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 1
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 1, i32 1
  %17 = icmp eq i32 %12, 0
  %tile_bound1 = select i1 %17, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 1
  %tile_origin.2 = mul i32 %12, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = icmp eq i32 8192, %tile_bound1
  br i1 %20, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit19, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !313

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result51 = load float, ptr %current_output, align 4
  %21 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %21, ptr %result_from_other_lane, align 4
  call void @region_1_10(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer52)
  %22 = load float, ptr %return_buffer52, align 4
  store float %22, ptr %current_output, align 4
  %partial_reduction_result54 = load float, ptr %current_output, align 4
  %23 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %23, ptr %result_from_other_lane53, align 4
  call void @region_1_10(ptr %current_output, ptr %result_from_other_lane53, ptr %return_buffer55)
  %24 = load float, ptr %return_buffer55, align 4
  store float %24, ptr %current_output, align 4
  %partial_reduction_result57 = load float, ptr %current_output, align 4
  %25 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %25, ptr %result_from_other_lane56, align 4
  call void @region_1_10(ptr %current_output, ptr %result_from_other_lane56, ptr %return_buffer58)
  %26 = load float, ptr %return_buffer58, align 4
  store float %26, ptr %current_output, align 4
  %partial_reduction_result60 = load float, ptr %current_output, align 4
  %27 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %27, ptr %result_from_other_lane59, align 4
  call void @region_1_10(ptr %current_output, ptr %result_from_other_lane59, ptr %return_buffer61)
  %28 = load float, ptr %return_buffer61, align 4
  store float %28, ptr %current_output, align 4
  %partial_reduction_result63 = load float, ptr %current_output, align 4
  %29 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %29, ptr %result_from_other_lane62, align 4
  call void @region_1_10(ptr %current_output, ptr %result_from_other_lane62, ptr %return_buffer64)
  %30 = load float, ptr %return_buffer64, align 4
  store float %30, ptr %current_output, align 4
  %31 = udiv i32 %thread_id.x, 32
  %32 = icmp eq i32 %lane_id, 0
  br i1 %32, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %33 = icmp eq i32 %31, 0
  br i1 %33, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %34 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %35 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %35, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %36 = icmp eq i32 %tile_loop.indvar, 0
  %37 = mul i32 %tile_loop.indvar, 1024
  %38 = add i32 %37, 0
  %x_loc = add i32 %38, %34
  %39 = add i32 %tile_origin.1, %y_in_tile.indvar
  %40 = add i32 %tile_origin.2, %x_loc
  %41 = mul nuw nsw i32 %40, 1
  %42 = add nuw nsw i32 0, %41
  %43 = mul nuw nsw i32 %39, 8192
  %44 = add nuw nsw i32 %42, %43
  %45 = mul nuw nsw i32 %tile_origin.0, 8192
  %46 = add nuw nsw i32 %44, %45
  %47 = udiv i32 %46, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %46
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %46
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.3 = fmul float %Arg_1.23, %Arg_0.14
  %region_0_16_constant_4 = load float, ptr @4, align 4
  %Arg_0.15 = getelementptr inbounds float, ptr %arg0, i32 %46
  %Arg_0.16 = load float, ptr %Arg_0.15, align 4, !invariant.load !269
  %subtract.6 = fsub float %region_0_16_constant_4, %Arg_0.16
  %multiply.7 = fmul float %multiply.3, %subtract.6
  store float %multiply.7, ptr %reduction_input_address, align 4
  %48 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10(ptr %48, ptr %reduction_input_address, ptr %return_buffer)
  %49 = load float, ptr %return_buffer, align 4
  store float %49, ptr %48, align 4
  %50 = getelementptr inbounds float, ptr %arg3, i32 %46
  store float %multiply.7, ptr %50, align 4
  %51 = mul i32 %tile_loop.indvar, 1024
  %52 = add i32 %51, 1
  %x_loc7 = add i32 %52, %34
  %53 = add i32 %tile_origin.1, %y_in_tile.indvar
  %54 = add i32 %tile_origin.2, %x_loc7
  %55 = mul nuw nsw i32 %54, 1
  %56 = add nuw nsw i32 0, %55
  %57 = mul nuw nsw i32 %53, 8192
  %58 = add nuw nsw i32 %56, %57
  %59 = mul nuw nsw i32 %tile_origin.0, 8192
  %60 = add nuw nsw i32 %58, %59
  %61 = udiv i32 %60, 1
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %60
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !269
  %Arg_0.110 = getelementptr inbounds float, ptr %arg0, i32 %60
  %Arg_0.111 = load float, ptr %Arg_0.110, align 4, !invariant.load !269
  %multiply.312 = fmul float %Arg_1.29, %Arg_0.111
  %region_0_16_constant_413 = load float, ptr @4, align 4
  %Arg_0.114 = getelementptr inbounds float, ptr %arg0, i32 %60
  %Arg_0.115 = load float, ptr %Arg_0.114, align 4, !invariant.load !269
  %subtract.616 = fsub float %region_0_16_constant_413, %Arg_0.115
  %multiply.717 = fmul float %multiply.312, %subtract.616
  store float %multiply.717, ptr %reduction_input_address, align 4
  %62 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10(ptr %62, ptr %reduction_input_address, ptr %return_buffer18)
  %63 = load float, ptr %return_buffer18, align 4
  store float %63, ptr %62, align 4
  %64 = getelementptr inbounds float, ptr %arg3, i32 %60
  store float %multiply.717, ptr %64, align 4
  br label %tile_loop.loop_header, !llvm.loop !314

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %65 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address22, align 4
  br label %tile_loop.loop_header20

tile_loop.loop_header20:                          ; preds = %x_in_tile-after39, %is_full_tile-false
  %tile_loop.indvar23 = load i32, ptr %tile_loop.invar_address22, align 4
  %66 = icmp uge i32 %tile_loop.indvar23, 8
  br i1 %66, label %tile_loop.loop_exit19, label %tile_loop.loop_body21

tile_loop.loop_body21:                            ; preds = %tile_loop.loop_header20
  %invar.inc24 = add nuw nsw i32 %tile_loop.indvar23, 1
  store i32 %invar.inc24, ptr %tile_loop.invar_address22, align 4
  %67 = icmp eq i32 %tile_loop.indvar23, 0
  %68 = mul i32 %tile_loop.indvar23, 1024
  %69 = add i32 %68, 0
  %x_loc25 = add i32 %69, %65
  %70 = add i32 %tile_origin.1, %y_in_tile.indvar
  %71 = add i32 %tile_origin.2, %x_loc25
  %72 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %72, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body21
  %73 = mul i32 %tile_loop.indvar23, 1024
  %74 = add i32 %73, 1
  %x_loc37 = add i32 %74, %65
  %75 = add i32 %tile_origin.1, %y_in_tile.indvar
  %76 = add i32 %tile_origin.2, %x_loc37
  %77 = icmp ult i32 %x_loc37, %tile_bound1
  br i1 %77, label %x_in_tile-true38, label %x_in_tile-after39

x_in_tile-after39:                                ; preds = %x_in_tile-true38, %x_in_tile-after
  br label %tile_loop.loop_header20, !llvm.loop !315

tile_loop.loop_exit19:                            ; preds = %tile_loop.loop_header20
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body21
  %78 = mul nuw nsw i32 %71, 1
  %79 = add nuw nsw i32 0, %78
  %80 = mul nuw nsw i32 %70, 8192
  %81 = add nuw nsw i32 %79, %80
  %82 = mul nuw nsw i32 %tile_origin.0, 8192
  %83 = add nuw nsw i32 %81, %82
  %84 = udiv i32 %83, 1
  %Arg_1.226 = getelementptr inbounds float, ptr %arg1, i32 %83
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !269
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %83
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !269
  %multiply.330 = fmul float %Arg_1.227, %Arg_0.129
  %region_0_16_constant_431 = load float, ptr @4, align 4
  %Arg_0.132 = getelementptr inbounds float, ptr %arg0, i32 %83
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !269
  %subtract.634 = fsub float %region_0_16_constant_431, %Arg_0.133
  %multiply.735 = fmul float %multiply.330, %subtract.634
  store float %multiply.735, ptr %reduction_input_address, align 4
  %85 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10(ptr %85, ptr %reduction_input_address, ptr %return_buffer36)
  %86 = load float, ptr %return_buffer36, align 4
  store float %86, ptr %85, align 4
  %87 = getelementptr inbounds float, ptr %arg3, i32 %83
  store float %multiply.735, ptr %87, align 4
  br label %x_in_tile-after

x_in_tile-true38:                                 ; preds = %x_in_tile-after
  %88 = mul nuw nsw i32 %76, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %75, 8192
  %91 = add nuw nsw i32 %89, %90
  %92 = mul nuw nsw i32 %tile_origin.0, 8192
  %93 = add nuw nsw i32 %91, %92
  %94 = udiv i32 %93, 1
  %Arg_1.240 = getelementptr inbounds float, ptr %arg1, i32 %93
  %Arg_1.241 = load float, ptr %Arg_1.240, align 4, !invariant.load !269
  %Arg_0.142 = getelementptr inbounds float, ptr %arg0, i32 %93
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !269
  %multiply.344 = fmul float %Arg_1.241, %Arg_0.143
  %region_0_16_constant_445 = load float, ptr @4, align 4
  %Arg_0.146 = getelementptr inbounds float, ptr %arg0, i32 %93
  %Arg_0.147 = load float, ptr %Arg_0.146, align 4, !invariant.load !269
  %subtract.648 = fsub float %region_0_16_constant_445, %Arg_0.147
  %multiply.749 = fmul float %multiply.344, %subtract.648
  store float %multiply.749, ptr %reduction_input_address, align 4
  %95 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10(ptr %95, ptr %reduction_input_address, ptr %return_buffer50)
  %96 = load float, ptr %return_buffer50, align 4
  store float %96, ptr %95, align 4
  %97 = getelementptr inbounds float, ptr %arg3, i32 %93
  store float %multiply.749, ptr %97, align 4
  br label %x_in_tile-after39

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %98 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i32 0, i32 %6, i32 0, i32 %31
  %99 = addrspacecast ptr addrspace(3) %98 to ptr
  %100 = load float, ptr %current_output, align 4
  store float %100, ptr %99, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %101 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i32 0, i32 %6, i32 0, i32 %lane_id
  %102 = addrspacecast ptr addrspace(3) %101 to ptr
  store float %region_0_16_constant_9, ptr %initial_value_addr, align 4
  %103 = icmp ult i32 %thread_id.x, 16
  %104 = select i1 %103, ptr %102, ptr %initial_value_addr
  %partial_reduction_result66 = load float, ptr %104, align 4
  %105 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %105, ptr %result_from_other_lane65, align 4
  call void @region_1_10(ptr %104, ptr %result_from_other_lane65, ptr %return_buffer67)
  %106 = load float, ptr %return_buffer67, align 4
  store float %106, ptr %104, align 4
  %partial_reduction_result69 = load float, ptr %104, align 4
  %107 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %107, ptr %result_from_other_lane68, align 4
  call void @region_1_10(ptr %104, ptr %result_from_other_lane68, ptr %return_buffer70)
  %108 = load float, ptr %return_buffer70, align 4
  store float %108, ptr %104, align 4
  %partial_reduction_result72 = load float, ptr %104, align 4
  %109 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %109, ptr %result_from_other_lane71, align 4
  call void @region_1_10(ptr %104, ptr %result_from_other_lane71, ptr %return_buffer73)
  %110 = load float, ptr %return_buffer73, align 4
  store float %110, ptr %104, align 4
  %partial_reduction_result75 = load float, ptr %104, align 4
  %111 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %111, ptr %result_from_other_lane74, align 4
  call void @region_1_10(ptr %104, ptr %result_from_other_lane74, ptr %return_buffer76)
  %112 = load float, ptr %return_buffer76, align 4
  store float %112, ptr %104, align 4
  %partial_reduction_result78 = load float, ptr %104, align 4
  %113 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %113, ptr %result_from_other_lane77, align 4
  call void @region_1_10(ptr %104, ptr %result_from_other_lane77, ptr %return_buffer79)
  %114 = load float, ptr %return_buffer79, align 4
  store float %114, ptr %104, align 4
  %115 = icmp eq i32 %thread_id.x, 0
  br i1 %115, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %116 = mul i32 %thread_id.x, 2
  %117 = add i32 %tile_origin.1, %thread_id.y
  %118 = add i32 %tile_origin.2, %116
  %119 = add i32 %118, 0
  %output = load float, ptr %104, align 4
  store float %output, ptr %arg2, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_10(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_544(ptr noalias align 16 dereferenceable(4) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(4) %arg3, ptr noalias align 128 dereferenceable(4) %arg4, ptr noalias align 16 dereferenceable(4) %arg5, ptr noalias align 128 dereferenceable(4) %arg6, ptr noalias align 16 dereferenceable(4) %arg7, ptr noalias align 128 dereferenceable(4) %arg8, ptr noalias align 16 dereferenceable(4) %arg9, ptr noalias align 128 dereferenceable(4) %arg10, ptr noalias align 16 dereferenceable(4) %arg11, ptr noalias align 128 dereferenceable(4) %arg12, ptr noalias align 16 dereferenceable(4) %arg13, ptr noalias align 128 dereferenceable(4) %arg14, ptr noalias align 16 dereferenceable(4) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 16 dereferenceable(4) %arg17, ptr noalias align 128 dereferenceable(4) %arg18, ptr noalias align 16 dereferenceable(4) %arg19, ptr noalias align 128 dereferenceable(4) %arg20, ptr noalias align 16 dereferenceable(4) %arg21, ptr noalias align 128 dereferenceable(4) %arg22, ptr noalias align 16 dereferenceable(4) %arg23, ptr noalias align 128 dereferenceable(4) %arg24, ptr noalias align 16 dereferenceable(4) %arg25, ptr noalias align 128 dereferenceable(4) %arg26, ptr noalias align 16 dereferenceable(4) %arg27, ptr noalias align 128 dereferenceable(4) %arg28, ptr noalias align 16 dereferenceable(4) %arg29, ptr noalias align 128 dereferenceable(4) %arg30, ptr noalias align 128 dereferenceable(4) %arg31, ptr noalias align 128 dereferenceable(4) %arg32, ptr noalias align 128 dereferenceable(4) %arg33, ptr noalias align 128 dereferenceable(4) %arg34, ptr noalias align 128 dereferenceable(4) %arg35, ptr noalias align 128 dereferenceable(4) %arg36, ptr noalias align 128 dereferenceable(4) %arg37, ptr noalias align 128 dereferenceable(4) %arg38, ptr noalias align 128 dereferenceable(4) %arg39, ptr noalias align 128 dereferenceable(4) %arg40, ptr noalias align 128 dereferenceable(4) %arg41, ptr noalias align 128 dereferenceable(4) %arg42, ptr noalias align 128 dereferenceable(4) %arg43, ptr noalias align 128 dereferenceable(4) %arg44, ptr noalias align 128 dereferenceable(4) %arg45) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !266
  %2 = mul nuw nsw i32 %0, 1
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 1
  br i1 %4, label %fusion_544.in_bounds-true, label %fusion_544.in_bounds-after

fusion_544.in_bounds-after:                       ; preds = %fusion_544.in_bounds-true, %entry
  ret void

fusion_544.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = load float, ptr %arg1, align 4, !invariant.load !269
  %multiply.34 = fmul float %7, %8
  %subtract.35 = fsub float %6, %multiply.34
  %9 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.35, 0
  %10 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %12 = load float, ptr %arg4, align 4, !invariant.load !269
  %multiply.37 = fmul float %7, %12
  %subtract.38 = fsub float %11, %multiply.37
  %13 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %9, float %subtract.38, 1
  %14 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %15 = load float, ptr %14, align 4, !invariant.load !269
  %16 = load float, ptr %arg6, align 4, !invariant.load !269
  %multiply.40 = fmul float %7, %16
  %subtract.41 = fsub float %15, %multiply.40
  %17 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %13, float %subtract.41, 2
  %18 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = load float, ptr %arg8, align 4, !invariant.load !269
  %multiply.43 = fmul float %7, %20
  %subtract.44 = fsub float %19, %multiply.43
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %17, float %subtract.44, 3
  %22 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = load float, ptr %arg10, align 4, !invariant.load !269
  %multiply.46 = fmul float %7, %24
  %subtract.47 = fsub float %23, %multiply.46
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.47, 4
  %26 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = load float, ptr %arg12, align 4, !invariant.load !269
  %multiply.49 = fmul float %7, %28
  %subtract.50 = fsub float %27, %multiply.49
  %29 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.50, 5
  %30 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %32 = load float, ptr %arg14, align 4, !invariant.load !269
  %multiply.52 = fmul float %7, %32
  %subtract.53 = fsub float %31, %multiply.52
  %33 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %29, float %subtract.53, 6
  %34 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = load float, ptr %arg16, align 4, !invariant.load !269
  %multiply.55 = fmul float %7, %36
  %subtract.56 = fsub float %35, %multiply.55
  %37 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %33, float %subtract.56, 7
  %38 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %40 = load float, ptr %arg18, align 4, !invariant.load !269
  %multiply.58 = fmul float %7, %40
  %subtract.59 = fsub float %39, %multiply.58
  %41 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %37, float %subtract.59, 8
  %42 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %43 = load float, ptr %42, align 4, !invariant.load !269
  %44 = load float, ptr %arg20, align 4, !invariant.load !269
  %multiply.61 = fmul float %7, %44
  %subtract.62 = fsub float %43, %multiply.61
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %41, float %subtract.62, 9
  %46 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !269
  %48 = load float, ptr %arg22, align 4, !invariant.load !269
  %multiply.64 = fmul float %7, %48
  %subtract.65 = fsub float %47, %multiply.64
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.65, 10
  %50 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = load float, ptr %arg24, align 4, !invariant.load !269
  %multiply.67 = fmul float %7, %52
  %subtract.68 = fsub float %51, %multiply.67
  %53 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.68, 11
  %54 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %56 = load float, ptr %arg26, align 4, !invariant.load !269
  %multiply.70 = fmul float %7, %56
  %subtract.71 = fsub float %55, %multiply.70
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %53, float %subtract.71, 12
  %58 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %60 = load float, ptr %arg28, align 4, !invariant.load !269
  %multiply.73 = fmul float %7, %60
  %subtract.74 = fsub float %59, %multiply.73
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.74, 13
  %62 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !269
  %64 = load float, ptr %arg30, align 4, !invariant.load !269
  %multiply.76 = fmul float %7, %64
  %subtract.77 = fsub float %63, %multiply.76
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.77, 14
  %66 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 0
  %67 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 1
  %69 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 2
  %71 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 3
  %73 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 4
  %75 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 5
  %77 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 6
  %79 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %78, ptr %79, align 4
  %80 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 7
  %81 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %80, ptr %81, align 4
  %82 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 8
  %83 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %82, ptr %83, align 4
  %84 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 9
  %85 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %84, ptr %85, align 4
  %86 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 10
  %87 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %86, ptr %87, align 4
  %88 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 11
  %89 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %88, ptr %89, align 4
  %90 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 12
  %91 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %90, ptr %91, align 4
  %92 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 13
  %93 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %92, ptr %93, align 4
  %94 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, 14
  %95 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %94, ptr %95, align 4
  br label %fusion_544.in_bounds-after
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #3

define void @concatenate_338(ptr noalias align 16 dereferenceable(3072) %arg0, ptr noalias align 16 dereferenceable(6144) %arg1, ptr noalias align 16 dereferenceable(1344) %arg2, ptr noalias align 16 dereferenceable(35904) %arg3, ptr noalias align 128 dereferenceable(46464) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !316
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 12288
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 11616
  br i1 %6, label %concatenate_338.in_bounds-true, label %concatenate_338.in_bounds-after

concatenate_338.in_bounds-after:                  ; preds = %concatenate.5.merge, %entry
  ret void

concatenate_338.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.384.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [128 x [6 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.128.1
  %11 = phi i32 [ 128, %concatenate.pivot.128.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [256 x [6 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.384.2
  %15 = phi i32 [ 384, %concatenate.pivot.384.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [56 x [6 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.440.3
  %19 = phi i32 [ 440, %concatenate.pivot.440.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [1496 x [6 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !269
  br label %concatenate.5.merge

concatenate.pivot.384.:                           ; preds = %concatenate_338.in_bounds-true
  %23 = icmp ult i32 %5, 384
  br i1 %23, label %concatenate.pivot.128., label %concatenate.pivot.440.

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.384.
  %24 = icmp ult i32 %5, 128
  br i1 %24, label %concatenate.pivot.0., label %concatenate.pivot.128.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id0

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id1

concatenate.pivot.440.:                           ; preds = %concatenate.pivot.384.
  %25 = icmp ult i32 %5, 440
  br i1 %25, label %concatenate.pivot.384.2, label %concatenate.pivot.440.3

concatenate.pivot.384.2:                          ; preds = %concatenate.pivot.440.
  br label %concat_index_from_operand_id2

concatenate.pivot.440.3:                          ; preds = %concatenate.pivot.440.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %26 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ]
  %27 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %26, ptr %27, align 4
  br label %concatenate_338.in_bounds-after
}

define void @fusion_485(ptr noalias align 16 dereferenceable(8388608) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2) {
entry:
  %return_buffer45 = alloca float, align 4
  %result_from_other_lane43 = alloca float, align 4
  %return_buffer42 = alloca float, align 4
  %result_from_other_lane40 = alloca float, align 4
  %return_buffer39 = alloca float, align 4
  %result_from_other_lane37 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %result_from_other_lane34 = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %result_from_other_lane31 = alloca float, align 4
  %return_buffer27 = alloca float, align 4
  %result_from_other_lane25 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %result_from_other_lane22 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %result_from_other_lane19 = alloca float, align 4
  %return_buffer18 = alloca float, align 4
  %result_from_other_lane16 = alloca float, align 4
  %return_buffer15 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after47, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_12_constant_6 = load float, ptr @6, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_12_constant_6, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_12_constant_6, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after7, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc5 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc5
  %33 = icmp ult i32 %x_loc5, %tile_bound1
  br i1 %33, label %x_in_tile-true6, label %x_in_tile-after7

x_in_tile-after7:                                 ; preds = %x_in_tile-true6, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !319

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !320

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result14 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_7(ptr %36, ptr %result_from_other_lane, ptr %return_buffer15)
  %38 = load float, ptr %return_buffer15, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result17 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result17, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane16, align 4
  call void @region_1_7(ptr %36, ptr %result_from_other_lane16, ptr %return_buffer18)
  %40 = load float, ptr %return_buffer18, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result20 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result20, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane19, align 4
  call void @region_1_7(ptr %36, ptr %result_from_other_lane19, ptr %return_buffer21)
  %42 = load float, ptr %return_buffer21, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result23 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result23, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane22, align 4
  call void @region_1_7(ptr %36, ptr %result_from_other_lane22, ptr %return_buffer24)
  %44 = load float, ptr %return_buffer24, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result26 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane25, align 4
  call void @region_1_7(ptr %36, ptr %result_from_other_lane25, ptr %return_buffer27)
  %46 = load float, ptr %return_buffer27, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address28 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address28 to ptr
  %current_output29 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output29, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr30 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr30 to ptr
  %partial_reduction_result32 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result32, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane31, align 4
  call void @region_1_7(ptr %55, ptr %result_from_other_lane31, ptr %return_buffer33)
  %57 = load float, ptr %return_buffer33, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result35 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result35, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane34, align 4
  call void @region_1_7(ptr %55, ptr %result_from_other_lane34, ptr %return_buffer36)
  %59 = load float, ptr %return_buffer36, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result38 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result38, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane37, align 4
  call void @region_1_7(ptr %55, ptr %result_from_other_lane37, ptr %return_buffer39)
  %61 = load float, ptr %return_buffer39, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result41 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result41, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane40, align 4
  call void @region_1_7(ptr %55, ptr %result_from_other_lane40, ptr %return_buffer42)
  %63 = load float, ptr %return_buffer42, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result44 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result44, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane43, align 4
  call void @region_1_7(ptr %55, ptr %result_from_other_lane43, ptr %return_buffer45)
  %65 = load float, ptr %return_buffer45, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true46, label %reduction_write_output-after47

reduction_write_output-after47:                   ; preds = %reduction_write_output-true46, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_0.1 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %91
  %Arg_1.24 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.4 = fmul float %Arg_0.13, %Arg_1.24
  store float %multiply.4, ptr %reduction_input_address, align 4
  %93 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_7(ptr %93, ptr %reduction_input_address, ptr %return_buffer)
  %94 = load float, ptr %return_buffer, align 4
  store float %94, ptr %93, align 4
  br label %x_in_tile-after

x_in_tile-true6:                                  ; preds = %x_in_tile-after
  %95 = mul nuw nsw i32 %32, 1
  %96 = add nuw nsw i32 0, %95
  %97 = mul nuw nsw i32 %31, 256
  %98 = add nuw nsw i32 %96, %97
  %99 = mul nuw nsw i32 %tile_origin.0, 32768
  %100 = add nuw nsw i32 %98, %99
  %101 = udiv i32 %100, 1
  %102 = urem i32 %101, 256
  %103 = udiv i32 %100, 256
  %104 = urem i32 %103, 128
  %105 = udiv i32 %100, 32768
  %106 = mul i32 %thread_id.x, 2
  %107 = sub i32 %x_loc5, %106
  %108 = mul nuw nsw i32 %102, 1
  %109 = add nuw nsw i32 0, %108
  %110 = udiv i32 %109, 256
  %111 = mul nuw nsw i32 %104, 1
  %112 = add nuw nsw i32 0, %111
  %113 = mul nuw nsw i32 %105, 128
  %114 = add nuw nsw i32 %112, %113
  %115 = udiv i32 %114, 8192
  %Arg_0.18 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %114, i32 %109
  %Arg_0.19 = load float, ptr %Arg_0.18, align 4, !invariant.load !269
  %Arg_1.210 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %114
  %Arg_1.211 = load float, ptr %Arg_1.210, align 4, !invariant.load !269
  %multiply.412 = fmul float %Arg_0.19, %Arg_1.211
  store float %multiply.412, ptr %reduction_input_address, align 4
  %116 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %107
  call void @region_1_7(ptr %116, ptr %reduction_input_address, ptr %return_buffer13)
  %117 = load float, ptr %return_buffer13, align 4
  store float %117, ptr %116, align 4
  br label %x_in_tile-after7

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %118 = mul i32 %thread_id.y, 2
  %119 = add i32 %tile_origin.1, %thread_id.x
  %120 = add i32 %tile_origin.2, %118
  %121 = add i32 %120, 0
  %122 = mul i32 %tile_origin.0, 256
  %123 = add i32 %122, %121
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 256
  %126 = udiv i32 %123, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %126, i32 %125
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true46:                    ; preds = %reduction_write_output-after
  %127 = mul i32 %thread_id.y, 2
  %128 = add i32 %tile_origin.1, %thread_id.x
  %129 = add i32 %tile_origin.2, %127
  %130 = add i32 %129, 1
  %131 = mul i32 %tile_origin.0, 256
  %132 = add i32 %131, %130
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 256
  %135 = udiv i32 %132, 256
  %output_element_address48 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %135, i32 %134
  %output49 = load float, ptr %55, align 4
  store float %output49, ptr %output_element_address48, align 4
  br label %reduction_write_output-after47
}

define internal void @region_1_7(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @reduce_24(ptr noalias align 128 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(1024) %arg2) {
entry:
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 4
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 64, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc4 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc4
  %33 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %33, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !322

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !323

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane, ptr %return_buffer11)
  %38 = load float, ptr %return_buffer11, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result13 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane12, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane12, ptr %return_buffer14)
  %40 = load float, ptr %return_buffer14, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result16 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane15, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane15, ptr %return_buffer17)
  %42 = load float, ptr %return_buffer17, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result19 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane18, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane18, ptr %return_buffer20)
  %44 = load float, ptr %return_buffer20, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result22 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane21, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane21, ptr %return_buffer23)
  %46 = load float, ptr %return_buffer23, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output25, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane27, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane27, ptr %return_buffer29)
  %57 = load float, ptr %return_buffer29, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result31 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane30, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane30, ptr %return_buffer32)
  %59 = load float, ptr %return_buffer32, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result34 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane33, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane33, ptr %return_buffer35)
  %61 = load float, ptr %return_buffer35, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result37 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane36, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane36, ptr %return_buffer38)
  %63 = load float, ptr %return_buffer38, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result40 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane39, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane39, ptr %return_buffer41)
  %65 = load float, ptr %return_buffer41, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul i32 %thread_id.x, 2
  %73 = sub i32 %x_loc, %72
  %Arg_0.1 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %74 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %73
  call void @region_1_3(ptr %74, ptr %reduction_input_address, ptr %return_buffer)
  %75 = load float, ptr %return_buffer, align 4
  store float %75, ptr %74, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc4, %76
  %Arg_0.17 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_3(ptr %78, ptr %reduction_input_address, ptr %return_buffer9)
  %79 = load float, ptr %return_buffer9, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %80 = mul i32 %thread_id.y, 2
  %81 = add i32 %tile_origin.1, %thread_id.x
  %82 = add i32 %tile_origin.2, %80
  %83 = add i32 %82, 0
  %84 = mul i32 %tile_origin.0, 256
  %85 = add i32 %84, %83
  %86 = udiv i32 %85, 1
  %output_element_address = getelementptr inbounds [256 x float], ptr %arg2, i32 0, i32 %86
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %87 = mul i32 %thread_id.y, 2
  %88 = add i32 %tile_origin.1, %thread_id.x
  %89 = add i32 %tile_origin.2, %87
  %90 = add i32 %89, 1
  %91 = mul i32 %tile_origin.0, 256
  %92 = add i32 %91, %90
  %93 = udiv i32 %92, 1
  %output_element_address44 = getelementptr inbounds [256 x float], ptr %arg2, i32 0, i32 %93
  %output45 = load float, ptr %55, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43
}

define internal void @region_1_3(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_484(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(1024) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(1024) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 256
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1
  %5 = udiv i32 %linear_index, 1
  %6 = icmp ult i32 %linear_index, 256
  br i1 %6, label %fusion_484.in_bounds-true, label %fusion_484.in_bounds-after

fusion_484.in_bounds-after:                       ; preds = %fusion_484.in_bounds-true, %entry
  ret void

fusion_484.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %multiply.5 = fmul float %9, %11
  %subtract.7 = fsub float %8, %multiply.5
  %12 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %12, align 4
  br label %fusion_484.in_bounds-after
}

define void @fusion_479(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8) {
entry:
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %return_buffer57 = alloca float, align 4
  %result_from_other_lane55 = alloca float, align 4
  %return_buffer54 = alloca float, align 4
  %result_from_other_lane52 = alloca float, align 4
  %return_buffer51 = alloca float, align 4
  %result_from_other_lane49 = alloca float, align 4
  %return_buffer48 = alloca float, align 4
  %result_from_other_lane46 = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %result_from_other_lane43 = alloca float, align 4
  %return_buffer39 = alloca float, align 4
  %result_from_other_lane37 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %result_from_other_lane34 = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %result_from_other_lane31 = alloca float, align 4
  %return_buffer30 = alloca float, align 4
  %result_from_other_lane28 = alloca float, align 4
  %return_buffer27 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer25 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after81, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_44_constant_11 = load float, ptr @7, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_44_constant_11, ptr %2, align 4
  %region_0_44_constant_113 = load float, ptr @7, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_44_constant_113, ptr %3, align 4
  %region_0_44_constant_116 = load float, ptr @7, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_44_constant_116, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound7 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc8 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc8, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound7
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !324

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !325

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache17, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache17, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result26 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_12(ptr %32, ptr %result_from_other_lane, ptr %return_buffer27)
  %34 = load float, ptr %return_buffer27, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result29 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result29, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane28, align 4
  call void @region_1_12(ptr %32, ptr %result_from_other_lane28, ptr %return_buffer30)
  %36 = load float, ptr %return_buffer30, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result32 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result32, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane31, align 4
  call void @region_1_12(ptr %32, ptr %result_from_other_lane31, ptr %return_buffer33)
  %38 = load float, ptr %return_buffer33, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result35 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result35, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane34, align 4
  call void @region_1_12(ptr %32, ptr %result_from_other_lane34, ptr %return_buffer36)
  %40 = load float, ptr %return_buffer36, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result38 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result38, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane37, align 4
  call void @region_1_12(ptr %32, ptr %result_from_other_lane37, ptr %return_buffer39)
  %42 = load float, ptr %return_buffer39, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound7
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address40 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache18, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address40 to ptr
  %current_output41 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output41, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr42 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache18, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr42 to ptr
  %partial_reduction_result44 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result44, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane43, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane43, ptr %return_buffer45)
  %53 = load float, ptr %return_buffer45, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result47 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result47, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane46, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane46, ptr %return_buffer48)
  %55 = load float, ptr %return_buffer48, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result50 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result50, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane49, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane49, ptr %return_buffer51)
  %57 = load float, ptr %return_buffer51, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result53 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result53, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane52, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane52, ptr %return_buffer54)
  %59 = load float, ptr %return_buffer54, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result56 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result56, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane55, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane55, ptr %return_buffer57)
  %61 = load float, ptr %return_buffer57, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound7
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true58, label %reduction_write_output-after59

reduction_write_output-after59:                   ; preds = %reduction_write_output-true58, %reduction_write_output-after
  %shmem_output_address62 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache19, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address62 to ptr
  %current_output63 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %69 = load float, ptr %current_output63, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr64 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache19, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr64 to ptr
  %partial_reduction_result66 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane65, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane65, ptr %return_buffer67)
  %72 = load float, ptr %return_buffer67, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result69 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane68, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane68, ptr %return_buffer70)
  %74 = load float, ptr %return_buffer70, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result72 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane71, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane71, ptr %return_buffer73)
  %76 = load float, ptr %return_buffer73, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result75 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane74, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane74, ptr %return_buffer76)
  %78 = load float, ptr %return_buffer76, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result78 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane77, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane77, ptr %return_buffer79)
  %80 = load float, ptr %return_buffer79, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound7
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true80, label %reduction_write_output-after81

reduction_write_output-after81:                   ; preds = %reduction_write_output-true80, %reduction_write_output-after59
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.19 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.210 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.9 = fmul float %Arg_0.19, %Arg_1.210
  store float %multiply.9, ptr %reduction_input_address, align 4
  %108 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_12(ptr %108, ptr %reduction_input_address, ptr %return_buffer)
  %109 = load float, ptr %return_buffer, align 4
  store float %109, ptr %108, align 4
  %110 = mul nuw nsw i32 %94, 1
  %111 = add nuw nsw i32 0, %110
  %112 = udiv i32 %111, 128
  %113 = mul nuw nsw i32 %96, 1
  %114 = add nuw nsw i32 0, %113
  %115 = mul nuw nsw i32 %97, 128
  %116 = add nuw nsw i32 %114, %115
  %117 = udiv i32 %116, 8192
  %Arg_0.111 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.112 = load float, ptr %Arg_0.111, align 4, !invariant.load !269
  %Arg_3.4 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %116, i32 0
  %Arg_3.413 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %116, i32 0
  %Arg_2.314 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %multiply.17 = fmul float %Arg_3.413, %Arg_2.314
  %region_0_44_constant_18 = load float, ptr @8, align 4
  %Arg_2.315 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %116, i32 0
  %Arg_2.316 = load float, ptr %Arg_2.315, align 4, !invariant.load !269
  %subtract.20 = fsub float %region_0_44_constant_18, %Arg_2.316
  %multiply.21 = fmul float %multiply.17, %subtract.20
  %multiply.24 = fmul float %Arg_0.112, %multiply.21
  store float %multiply.24, ptr %reduction_input_address1, align 4
  %118 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_26(ptr %118, ptr %reduction_input_address1, ptr %return_buffer17)
  %119 = load float, ptr %return_buffer17, align 4
  store float %119, ptr %118, align 4
  %120 = mul nuw nsw i32 %94, 1
  %121 = add nuw nsw i32 0, %120
  %122 = udiv i32 %121, 128
  %123 = mul nuw nsw i32 %96, 1
  %124 = add nuw nsw i32 0, %123
  %125 = mul nuw nsw i32 %97, 128
  %126 = add nuw nsw i32 %124, %125
  %127 = udiv i32 %126, 8192
  %Arg_0.118 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %126, i32 0
  %Arg_5.620 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %126, i32 0
  %Arg_4.521 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.31 = fmul float %Arg_5.620, %Arg_4.521
  %region_0_44_constant_1822 = load float, ptr @8, align 4
  %Arg_4.523 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %126, i32 0
  %Arg_4.524 = load float, ptr %Arg_4.523, align 4, !invariant.load !269
  %subtract.32 = fsub float %region_0_44_constant_1822, %Arg_4.524
  %multiply.33 = fmul float %multiply.31, %subtract.32
  %multiply.36 = fmul float %Arg_0.119, %multiply.33
  store float %multiply.36, ptr %reduction_input_address4, align 4
  %128 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 %99
  call void @region_3_38__1(ptr %128, ptr %reduction_input_address4, ptr %return_buffer25)
  %129 = load float, ptr %return_buffer25, align 4
  store float %129, ptr %128, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %130 = mul i32 %thread_id.y, 1
  %131 = add i32 %tile_origin.1, %thread_id.x
  %132 = add i32 %tile_origin.2, %130
  %133 = add i32 %132, 0
  %134 = mul i32 %tile_origin.0, 128
  %135 = add i32 %134, %133
  %136 = udiv i32 %135, 1
  %137 = urem i32 %136, 128
  %138 = udiv i32 %135, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %138, i32 %137
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true58:                    ; preds = %reduction_write_output-after
  %139 = mul i32 %thread_id.y, 1
  %140 = add i32 %tile_origin.1, %thread_id.x
  %141 = add i32 %tile_origin.2, %139
  %142 = add i32 %141, 0
  %143 = mul i32 %tile_origin.0, 128
  %144 = add i32 %143, %142
  %145 = udiv i32 %144, 1
  %146 = urem i32 %145, 128
  %147 = udiv i32 %144, 128
  %output_element_address60 = getelementptr inbounds [64 x [128 x float]], ptr %arg7, i32 0, i32 %147, i32 %146
  %output61 = load float, ptr %51, align 4
  store float %output61, ptr %output_element_address60, align 4
  br label %reduction_write_output-after59

reduction_write_output-true80:                    ; preds = %reduction_write_output-after59
  %148 = mul i32 %thread_id.y, 1
  %149 = add i32 %tile_origin.1, %thread_id.x
  %150 = add i32 %tile_origin.2, %148
  %151 = add i32 %150, 0
  %152 = mul i32 %tile_origin.0, 128
  %153 = add i32 %152, %151
  %154 = udiv i32 %153, 1
  %155 = urem i32 %154, 128
  %156 = udiv i32 %153, 128
  %output_element_address82 = getelementptr inbounds [64 x [128 x float]], ptr %arg8, i32 0, i32 %156, i32 %155
  %output83 = load float, ptr %70, align 4
  store float %output83, ptr %output_element_address82, align 4
  br label %reduction_write_output-after81
}

define internal void @region_1_12(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_26(ptr dereferenceable(4) %Arg_0.27.typed, ptr dereferenceable(4) %Arg_1.28.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.29.typed = alloca float, align 4
  %Arg_0.27 = load float, ptr %Arg_0.27.typed, align 4
  %Arg_1.28 = load float, ptr %Arg_1.28.typed, align 4
  %add.29 = fadd float %Arg_0.27, %Arg_1.28
  store float %add.29, ptr %add.29.typed, align 4
  %load_ret_value = load float, ptr %add.29.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_38__1(ptr dereferenceable(4) %Arg_0.39.typed, ptr dereferenceable(4) %Arg_1.40.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.41.typed = alloca float, align 4
  %Arg_0.39 = load float, ptr %Arg_0.39.typed, align 4
  %Arg_1.40 = load float, ptr %Arg_1.40.typed, align 4
  %add.41 = fadd float %Arg_0.39, %Arg_1.40
  store float %add.41, ptr %add.41.typed, align 4
  %load_ret_value = load float, ptr %add.41.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_307(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(114688) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !326
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 28672
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 28672
  br i1 %6, label %concatenate_307.in_bounds-true, label %concatenate_307.in_bounds-after

concatenate_307.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_307.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [128 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_307.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_307.in_bounds-after
}

define void @concatenate_379(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(16384) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(16384) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(16384) %arg5, ptr noalias align 128 dereferenceable(147456) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !327
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 36864
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 36864
  br i1 %6, label %concatenate_379.in_bounds-true, label %concatenate_379.in_bounds-after

concatenate_379.in_bounds-after:                  ; preds = %concatenate.7.merge, %entry
  ret void

concatenate_379.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.80.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [16 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %15 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [32 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.80.3
  %19 = phi i32 [ 80, %concatenate.pivot.80.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [16 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.96.4
  %23 = phi i32 [ 96, %concatenate.pivot.96.4 ]
  %24 = sub nsw i32 %5, %23
  %25 = getelementptr inbounds [32 x [256 x float]], ptr %arg4, i32 0, i32 %24, i32 %4
  %26 = load float, ptr %25, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id5:                    ; preds = %concatenate.pivot.128.5
  %27 = phi i32 [ 128, %concatenate.pivot.128.5 ]
  %28 = sub nsw i32 %5, %27
  %29 = getelementptr inbounds [16 x [256 x float]], ptr %arg5, i32 0, i32 %28, i32 %4
  %30 = load float, ptr %29, align 4, !invariant.load !269
  br label %concatenate.7.merge

concatenate.pivot.80.:                            ; preds = %concatenate_379.in_bounds-true
  %31 = icmp ult i32 %5, 80
  br i1 %31, label %concatenate.pivot.32., label %concatenate.pivot.96.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.80.
  %32 = icmp ult i32 %5, 32
  br i1 %32, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.32.
  %33 = icmp ult i32 %5, 48
  br i1 %33, label %concatenate.pivot.32.1, label %concatenate.pivot.48.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.80.
  %34 = icmp ult i32 %5, 96
  br i1 %34, label %concatenate.pivot.80.3, label %concatenate.pivot.128.

concatenate.pivot.80.3:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id3

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.96.
  %35 = icmp ult i32 %5, 128
  br i1 %35, label %concatenate.pivot.96.4, label %concatenate.pivot.128.5

concatenate.pivot.96.4:                           ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id4

concatenate.pivot.128.5:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id5

concatenate.7.merge:                              ; preds = %concat_index_from_operand_id5, %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %36 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ], [ %26, %concat_index_from_operand_id4 ], [ %30, %concat_index_from_operand_id5 ]
  %37 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %36, ptr %37, align 4
  br label %concatenate_379.in_bounds-after
}

define void @concatenate_340(ptr noalias align 16 dereferenceable(46080) %arg0, ptr noalias align 16 dereferenceable(92160) %arg1, ptr noalias align 16 dereferenceable(20160) %arg2, ptr noalias align 128 dereferenceable(158400) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !328
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 39936
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index, 90
  %6 = icmp ult i32 %linear_index, 39600
  br i1 %6, label %concatenate_340.in_bounds-true, label %concatenate_340.in_bounds-after

concatenate_340.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_340.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.128.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [128 x [90 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.128.1
  %11 = phi i32 [ 128, %concatenate.pivot.128.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [256 x [90 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.384.2
  %15 = phi i32 [ 384, %concatenate.pivot.384.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [56 x [90 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.128.:                           ; preds = %concatenate_340.in_bounds-true
  %19 = icmp ult i32 %5, 128
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.384.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id0

concatenate.pivot.384.:                           ; preds = %concatenate.pivot.128.
  %20 = icmp ult i32 %5, 384
  br i1 %20, label %concatenate.pivot.128.1, label %concatenate.pivot.384.2

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id1

concatenate.pivot.384.2:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_340.in_bounds-after
}

define void @concatenate_333(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(163840) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !329
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 40960
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 40960
  br i1 %6, label %concatenate_333.in_bounds-true, label %concatenate_333.in_bounds-after

concatenate_333.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_333.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [128 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_333.in_bounds-true
  %19 = icmp ult i32 %5, 64
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %20 = icmp ult i32 %5, 192
  br i1 %20, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_333.in_bounds-after
}

define void @concatenate_308(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(180224) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !330
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 45056
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 45056
  br i1 %6, label %concatenate_308.in_bounds-true, label %concatenate_308.in_bounds-after

concatenate_308.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_308.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_308.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_308.in_bounds-after
}

define void @concatenate_386(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 128 dereferenceable(196608) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !331
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 49152
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 49152
  br i1 %6, label %concatenate_386.in_bounds-true, label %concatenate_386.in_bounds-after

concatenate_386.in_bounds-after:                  ; preds = %concatenate.3.merge, %entry
  ret void

concatenate_386.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.3.merge

concatenate.pivot.64.:                            ; preds = %concatenate_386.in_bounds-true
  %15 = icmp ult i32 %5, 64
  br i1 %15, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %16 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ]
  %17 = getelementptr inbounds float, ptr %arg2, i32 %linear_index
  store float %16, ptr %17, align 4
  br label %concatenate_386.in_bounds-after
}

define void @concatenate_334(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(229376) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !332
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 57344
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 57344
  br i1 %6, label %concatenate_334.in_bounds-true, label %concatenate_334.in_bounds-after

concatenate_334.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_334.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_334.in_bounds-true
  %19 = icmp ult i32 %5, 64
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %20 = icmp ult i32 %5, 192
  br i1 %20, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_334.in_bounds-after
}

define void @concatenate_350(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(65536) %arg2, ptr noalias align 16 dereferenceable(8192) %arg3, ptr noalias align 128 dereferenceable(270336) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !333
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 67584
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 67584
  br i1 %6, label %concatenate_350.in_bounds-true, label %concatenate_350.in_bounds-after

concatenate_350.in_bounds-after:                  ; preds = %concatenate.5.merge, %entry
  ret void

concatenate_350.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.256.3
  %19 = phi i32 [ 256, %concatenate.pivot.256.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [8 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !269
  br label %concatenate.5.merge

concatenate.pivot.192.:                           ; preds = %concatenate_350.in_bounds-true
  %23 = icmp ult i32 %5, 192
  br i1 %23, label %concatenate.pivot.64., label %concatenate.pivot.256.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %24 = icmp ult i32 %5, 64
  br i1 %24, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.256.:                           ; preds = %concatenate.pivot.192.
  %25 = icmp ult i32 %5, 256
  br i1 %25, label %concatenate.pivot.192.2, label %concatenate.pivot.256.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.256.
  br label %concat_index_from_operand_id2

concatenate.pivot.256.3:                          ; preds = %concatenate.pivot.256.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %26 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ]
  %27 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %26, ptr %27, align 4
  br label %concatenate_350.in_bounds-after
}

define void @concatenate_313(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(311296) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !334
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 77824
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 77824
  br i1 %6, label %concatenate_313.in_bounds-true, label %concatenate_313.in_bounds-after

concatenate_313.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_313.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.16.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [16 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.16.1
  %11 = phi i32 [ 16, %concatenate.pivot.16.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [32 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %15 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.16.:                            ; preds = %concatenate_313.in_bounds-true
  %19 = icmp ult i32 %5, 16
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.16.
  %20 = icmp ult i32 %5, 48
  br i1 %20, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_313.in_bounds-after
}

define void @concatenate_331(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(360448) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !335
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 90112
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 90112
  br i1 %6, label %concatenate_331.in_bounds-true, label %concatenate_331.in_bounds-after

concatenate_331.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_331.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_331.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_331.in_bounds-after
}

define void @concatenate_312(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(8192) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(368640) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !336
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 92160
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 92160
  br i1 %6, label %concatenate_312.in_bounds-true, label %concatenate_312.in_bounds-after

concatenate_312.in_bounds-after:                  ; preds = %concatenate.5.merge, %entry
  ret void

concatenate_312.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %19 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !269
  br label %concatenate.5.merge

concatenate.pivot.96.:                            ; preds = %concatenate_312.in_bounds-true
  %23 = icmp ult i32 %5, 96
  br i1 %23, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %24 = icmp ult i32 %5, 32
  br i1 %24, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %25 = icmp ult i32 %5, 104
  br i1 %25, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %26 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ]
  %27 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %26, ptr %27, align 4
  br label %concatenate_312.in_bounds-after
}

define void @concatenate_309(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(8192) %arg2, ptr noalias align 16 dereferenceable(24576) %arg3, ptr noalias align 16 dereferenceable(262144) %arg4, ptr noalias align 128 dereferenceable(393216) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !337
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 98304
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 98304
  br i1 %6, label %concatenate_309.in_bounds-true, label %concatenate_309.in_bounds-after

concatenate_309.in_bounds-after:                  ; preds = %concatenate.6.merge, %entry
  ret void

concatenate_309.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %19 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [24 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.128.4
  %23 = phi i32 [ 128, %concatenate.pivot.128.4 ]
  %24 = sub nsw i32 %5, %23
  %25 = getelementptr inbounds [256 x [256 x float]], ptr %arg4, i32 0, i32 %24, i32 %4
  %26 = load float, ptr %25, align 4, !invariant.load !269
  br label %concatenate.6.merge

concatenate.pivot.96.:                            ; preds = %concatenate_309.in_bounds-true
  %27 = icmp ult i32 %5, 96
  br i1 %27, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %28 = icmp ult i32 %5, 32
  br i1 %28, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %29 = icmp ult i32 %5, 104
  br i1 %29, label %concatenate.pivot.96.2, label %concatenate.pivot.128.

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.104.
  %30 = icmp ult i32 %5, 128
  br i1 %30, label %concatenate.pivot.104.3, label %concatenate.pivot.128.4

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id3

concatenate.pivot.128.4:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %31 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ], [ %26, %concat_index_from_operand_id4 ]
  %32 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %31, ptr %32, align 4
  br label %concatenate_309.in_bounds-after
}

define void @concatenate_326(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(458752) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !338
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 28672
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 114688
  br i1 %15, label %concatenate_326.in_bounds-true, label %concatenate_326.in_bounds-after

concatenate_326.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_326.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %5, %16
  %18 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %17, i32 %4
  %19 = load float, ptr %18, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %20 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %21 = sub nsw i32 %5, %20
  %22 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %21, i32 %4
  %23 = load float, ptr %22, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %24 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %25 = sub nsw i32 %5, %24
  %26 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %25, i32 %4
  %27 = load float, ptr %26, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_326.in_bounds-true
  %28 = icmp ult i32 %5, 64
  br i1 %28, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %29 = icmp ult i32 %5, 192
  br i1 %29, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %30 = phi float [ %19, %concat_index_from_operand_id0 ], [ %23, %concat_index_from_operand_id1 ], [ %27, %concat_index_from_operand_id2 ]
  %31 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %30, ptr %31, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %32 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %33 = sub nsw i32 %8, %32
  %34 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %33, i32 %7
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %36 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %37 = sub nsw i32 %8, %36
  %38 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %37, i32 %7
  %39 = load float, ptr %38, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %40 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %41 = sub nsw i32 %8, %40
  %42 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %41, i32 %7
  %43 = load float, ptr %42, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %44 = icmp ult i32 %8, 64
  br i1 %44, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %45 = icmp ult i32 %8, 192
  br i1 %45, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %46 = phi float [ %35, %concat_index_from_operand_id04 ], [ %39, %concat_index_from_operand_id15 ], [ %43, %concat_index_from_operand_id26 ]
  %47 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %46, ptr %47, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %48 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %49 = sub nsw i32 %11, %48
  %50 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %49, i32 %10
  %51 = load float, ptr %50, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %52 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %53 = sub nsw i32 %11, %52
  %54 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %53, i32 %10
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %56 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %57 = sub nsw i32 %11, %56
  %58 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %57, i32 %10
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %60 = icmp ult i32 %11, 64
  br i1 %60, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %61 = icmp ult i32 %11, 192
  br i1 %61, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %62 = phi float [ %51, %concat_index_from_operand_id013 ], [ %55, %concat_index_from_operand_id114 ], [ %59, %concat_index_from_operand_id215 ]
  %63 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %62, ptr %63, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %64 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %65 = sub nsw i32 %14, %64
  %66 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %65, i32 %13
  %67 = load float, ptr %66, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %68 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %69 = sub nsw i32 %14, %68
  %70 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %69, i32 %13
  %71 = load float, ptr %70, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %72 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %73 = sub nsw i32 %14, %72
  %74 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %73, i32 %13
  %75 = load float, ptr %74, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %76 = icmp ult i32 %14, 64
  br i1 %76, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %77 = icmp ult i32 %14, 192
  br i1 %77, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %78 = phi float [ %67, %concat_index_from_operand_id022 ], [ %71, %concat_index_from_operand_id123 ], [ %75, %concat_index_from_operand_id224 ]
  %79 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %78, ptr %79, align 4
  br label %concatenate_326.in_bounds-after
}

define void @concatenate_303(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(8192) %arg2, ptr noalias align 16 dereferenceable(24576) %arg3, ptr noalias align 16 dereferenceable(262144) %arg4, ptr noalias align 128 dereferenceable(491520) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !339
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 30720
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 122880
  br i1 %15, label %concatenate_303.in_bounds-true, label %concatenate_303.in_bounds-after

concatenate_303.in_bounds-after:                  ; preds = %concatenate.6.merge35, %entry
  ret void

concatenate_303.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %5, %16
  %18 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %17, i32 %4
  %19 = load float, ptr %18, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %20 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %21 = sub nsw i32 %5, %20
  %22 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %21, i32 %4
  %23 = load float, ptr %22, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %24 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %25 = sub nsw i32 %5, %24
  %26 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %25, i32 %4
  %27 = load float, ptr %26, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.200.3
  %28 = phi i32 [ 200, %concatenate.pivot.200.3 ]
  %29 = sub nsw i32 %5, %28
  %30 = getelementptr inbounds [24 x [256 x float]], ptr %arg3, i32 0, i32 %29, i32 %4
  %31 = load float, ptr %30, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.224.4
  %32 = phi i32 [ 224, %concatenate.pivot.224.4 ]
  %33 = sub nsw i32 %5, %32
  %34 = getelementptr inbounds [256 x [256 x float]], ptr %arg4, i32 0, i32 %33, i32 %4
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.6.merge

concatenate.pivot.192.:                           ; preds = %concatenate_303.in_bounds-true
  %36 = icmp ult i32 %5, 192
  br i1 %36, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %37 = icmp ult i32 %5, 64
  br i1 %37, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.200.:                           ; preds = %concatenate.pivot.192.
  %38 = icmp ult i32 %5, 200
  br i1 %38, label %concatenate.pivot.192.2, label %concatenate.pivot.224.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id2

concatenate.pivot.224.:                           ; preds = %concatenate.pivot.200.
  %39 = icmp ult i32 %5, 224
  br i1 %39, label %concatenate.pivot.200.3, label %concatenate.pivot.224.4

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.224.
  br label %concat_index_from_operand_id3

concatenate.pivot.224.4:                          ; preds = %concatenate.pivot.224.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %40 = phi float [ %19, %concat_index_from_operand_id0 ], [ %23, %concat_index_from_operand_id1 ], [ %27, %concat_index_from_operand_id2 ], [ %31, %concat_index_from_operand_id3 ], [ %35, %concat_index_from_operand_id4 ]
  %41 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  store float %40, ptr %41, align 4
  br label %concatenate.pivot.192.11

concat_index_from_operand_id06:                   ; preds = %concatenate.pivot.0.13
  %42 = phi i32 [ 0, %concatenate.pivot.0.13 ]
  %43 = sub nsw i32 %8, %42
  %44 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %43, i32 %7
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id17:                   ; preds = %concatenate.pivot.64.14
  %46 = phi i32 [ 64, %concatenate.pivot.64.14 ]
  %47 = sub nsw i32 %8, %46
  %48 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %47, i32 %7
  %49 = load float, ptr %48, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id28:                   ; preds = %concatenate.pivot.192.16
  %50 = phi i32 [ 192, %concatenate.pivot.192.16 ]
  %51 = sub nsw i32 %8, %50
  %52 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %51, i32 %7
  %53 = load float, ptr %52, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id39:                   ; preds = %concatenate.pivot.200.18
  %54 = phi i32 [ 200, %concatenate.pivot.200.18 ]
  %55 = sub nsw i32 %8, %54
  %56 = getelementptr inbounds [24 x [256 x float]], ptr %arg3, i32 0, i32 %55, i32 %7
  %57 = load float, ptr %56, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id410:                  ; preds = %concatenate.pivot.224.19
  %58 = phi i32 [ 224, %concatenate.pivot.224.19 ]
  %59 = sub nsw i32 %8, %58
  %60 = getelementptr inbounds [256 x [256 x float]], ptr %arg4, i32 0, i32 %59, i32 %7
  %61 = load float, ptr %60, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concatenate.pivot.192.11:                         ; preds = %concatenate.6.merge
  %62 = icmp ult i32 %8, 192
  br i1 %62, label %concatenate.pivot.64.12, label %concatenate.pivot.200.15

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.192.11
  %63 = icmp ult i32 %8, 64
  br i1 %63, label %concatenate.pivot.0.13, label %concatenate.pivot.64.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id06

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id17

concatenate.pivot.200.15:                         ; preds = %concatenate.pivot.192.11
  %64 = icmp ult i32 %8, 200
  br i1 %64, label %concatenate.pivot.192.16, label %concatenate.pivot.224.17

concatenate.pivot.192.16:                         ; preds = %concatenate.pivot.200.15
  br label %concat_index_from_operand_id28

concatenate.pivot.224.17:                         ; preds = %concatenate.pivot.200.15
  %65 = icmp ult i32 %8, 224
  br i1 %65, label %concatenate.pivot.200.18, label %concatenate.pivot.224.19

concatenate.pivot.200.18:                         ; preds = %concatenate.pivot.224.17
  br label %concat_index_from_operand_id39

concatenate.pivot.224.19:                         ; preds = %concatenate.pivot.224.17
  br label %concat_index_from_operand_id410

concatenate.6.merge5:                             ; preds = %concat_index_from_operand_id410, %concat_index_from_operand_id39, %concat_index_from_operand_id28, %concat_index_from_operand_id17, %concat_index_from_operand_id06
  %66 = phi float [ %45, %concat_index_from_operand_id06 ], [ %49, %concat_index_from_operand_id17 ], [ %53, %concat_index_from_operand_id28 ], [ %57, %concat_index_from_operand_id39 ], [ %61, %concat_index_from_operand_id410 ]
  %67 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  store float %66, ptr %67, align 4
  br label %concatenate.pivot.192.26

concat_index_from_operand_id021:                  ; preds = %concatenate.pivot.0.28
  %68 = phi i32 [ 0, %concatenate.pivot.0.28 ]
  %69 = sub nsw i32 %11, %68
  %70 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %69, i32 %10
  %71 = load float, ptr %70, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id122:                  ; preds = %concatenate.pivot.64.29
  %72 = phi i32 [ 64, %concatenate.pivot.64.29 ]
  %73 = sub nsw i32 %11, %72
  %74 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %73, i32 %10
  %75 = load float, ptr %74, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id223:                  ; preds = %concatenate.pivot.192.31
  %76 = phi i32 [ 192, %concatenate.pivot.192.31 ]
  %77 = sub nsw i32 %11, %76
  %78 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %77, i32 %10
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id324:                  ; preds = %concatenate.pivot.200.33
  %80 = phi i32 [ 200, %concatenate.pivot.200.33 ]
  %81 = sub nsw i32 %11, %80
  %82 = getelementptr inbounds [24 x [256 x float]], ptr %arg3, i32 0, i32 %81, i32 %10
  %83 = load float, ptr %82, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id425:                  ; preds = %concatenate.pivot.224.34
  %84 = phi i32 [ 224, %concatenate.pivot.224.34 ]
  %85 = sub nsw i32 %11, %84
  %86 = getelementptr inbounds [256 x [256 x float]], ptr %arg4, i32 0, i32 %85, i32 %10
  %87 = load float, ptr %86, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concatenate.pivot.192.26:                         ; preds = %concatenate.6.merge5
  %88 = icmp ult i32 %11, 192
  br i1 %88, label %concatenate.pivot.64.27, label %concatenate.pivot.200.30

concatenate.pivot.64.27:                          ; preds = %concatenate.pivot.192.26
  %89 = icmp ult i32 %11, 64
  br i1 %89, label %concatenate.pivot.0.28, label %concatenate.pivot.64.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id021

concatenate.pivot.64.29:                          ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id122

concatenate.pivot.200.30:                         ; preds = %concatenate.pivot.192.26
  %90 = icmp ult i32 %11, 200
  br i1 %90, label %concatenate.pivot.192.31, label %concatenate.pivot.224.32

concatenate.pivot.192.31:                         ; preds = %concatenate.pivot.200.30
  br label %concat_index_from_operand_id223

concatenate.pivot.224.32:                         ; preds = %concatenate.pivot.200.30
  %91 = icmp ult i32 %11, 224
  br i1 %91, label %concatenate.pivot.200.33, label %concatenate.pivot.224.34

concatenate.pivot.200.33:                         ; preds = %concatenate.pivot.224.32
  br label %concat_index_from_operand_id324

concatenate.pivot.224.34:                         ; preds = %concatenate.pivot.224.32
  br label %concat_index_from_operand_id425

concatenate.6.merge20:                            ; preds = %concat_index_from_operand_id425, %concat_index_from_operand_id324, %concat_index_from_operand_id223, %concat_index_from_operand_id122, %concat_index_from_operand_id021
  %92 = phi float [ %71, %concat_index_from_operand_id021 ], [ %75, %concat_index_from_operand_id122 ], [ %79, %concat_index_from_operand_id223 ], [ %83, %concat_index_from_operand_id324 ], [ %87, %concat_index_from_operand_id425 ]
  %93 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  store float %92, ptr %93, align 4
  br label %concatenate.pivot.192.41

concat_index_from_operand_id036:                  ; preds = %concatenate.pivot.0.43
  %94 = phi i32 [ 0, %concatenate.pivot.0.43 ]
  %95 = sub nsw i32 %14, %94
  %96 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %95, i32 %13
  %97 = load float, ptr %96, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id137:                  ; preds = %concatenate.pivot.64.44
  %98 = phi i32 [ 64, %concatenate.pivot.64.44 ]
  %99 = sub nsw i32 %14, %98
  %100 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %99, i32 %13
  %101 = load float, ptr %100, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id238:                  ; preds = %concatenate.pivot.192.46
  %102 = phi i32 [ 192, %concatenate.pivot.192.46 ]
  %103 = sub nsw i32 %14, %102
  %104 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %103, i32 %13
  %105 = load float, ptr %104, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id339:                  ; preds = %concatenate.pivot.200.48
  %106 = phi i32 [ 200, %concatenate.pivot.200.48 ]
  %107 = sub nsw i32 %14, %106
  %108 = getelementptr inbounds [24 x [256 x float]], ptr %arg3, i32 0, i32 %107, i32 %13
  %109 = load float, ptr %108, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id440:                  ; preds = %concatenate.pivot.224.49
  %110 = phi i32 [ 224, %concatenate.pivot.224.49 ]
  %111 = sub nsw i32 %14, %110
  %112 = getelementptr inbounds [256 x [256 x float]], ptr %arg4, i32 0, i32 %111, i32 %13
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concatenate.pivot.192.41:                         ; preds = %concatenate.6.merge20
  %114 = icmp ult i32 %14, 192
  br i1 %114, label %concatenate.pivot.64.42, label %concatenate.pivot.200.45

concatenate.pivot.64.42:                          ; preds = %concatenate.pivot.192.41
  %115 = icmp ult i32 %14, 64
  br i1 %115, label %concatenate.pivot.0.43, label %concatenate.pivot.64.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id036

concatenate.pivot.64.44:                          ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id137

concatenate.pivot.200.45:                         ; preds = %concatenate.pivot.192.41
  %116 = icmp ult i32 %14, 200
  br i1 %116, label %concatenate.pivot.192.46, label %concatenate.pivot.224.47

concatenate.pivot.192.46:                         ; preds = %concatenate.pivot.200.45
  br label %concat_index_from_operand_id238

concatenate.pivot.224.47:                         ; preds = %concatenate.pivot.200.45
  %117 = icmp ult i32 %14, 224
  br i1 %117, label %concatenate.pivot.200.48, label %concatenate.pivot.224.49

concatenate.pivot.200.48:                         ; preds = %concatenate.pivot.224.47
  br label %concat_index_from_operand_id339

concatenate.pivot.224.49:                         ; preds = %concatenate.pivot.224.47
  br label %concat_index_from_operand_id440

concatenate.6.merge35:                            ; preds = %concat_index_from_operand_id440, %concat_index_from_operand_id339, %concat_index_from_operand_id238, %concat_index_from_operand_id137, %concat_index_from_operand_id036
  %118 = phi float [ %97, %concat_index_from_operand_id036 ], [ %101, %concat_index_from_operand_id137 ], [ %105, %concat_index_from_operand_id238 ], [ %109, %concat_index_from_operand_id339 ], [ %113, %concat_index_from_operand_id440 ]
  %119 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  store float %118, ptr %119, align 4
  br label %concatenate_303.in_bounds-after
}

define void @fusion_323(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @10, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !341

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !342

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_15_constant_3 = load float, ptr @9, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 128
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_15_constant_37 = load float, ptr @9, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 128
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 128
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 16384
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 128
  %126 = udiv i32 %123, 128
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 16384
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 128
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_15_constant_316 = load float, ptr @9, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_15_constant_323 = load float, ptr @9, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 128
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 128
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 128
  %172 = udiv i32 %169, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 128
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 128
  %181 = udiv i32 %178, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_462(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6) {
entry:
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer160 = alloca float, align 4
  %result_from_other_lane158 = alloca float, align 4
  %return_buffer157 = alloca float, align 4
  %result_from_other_lane155 = alloca float, align 4
  %return_buffer147 = alloca float, align 4
  %result_from_other_lane145 = alloca float, align 4
  %return_buffer144 = alloca float, align 4
  %result_from_other_lane142 = alloca float, align 4
  %return_buffer141 = alloca float, align 4
  %result_from_other_lane139 = alloca float, align 4
  %return_buffer138 = alloca float, align 4
  %result_from_other_lane136 = alloca float, align 4
  %return_buffer135 = alloca float, align 4
  %result_from_other_lane133 = alloca float, align 4
  %return_buffer125 = alloca float, align 4
  %result_from_other_lane123 = alloca float, align 4
  %return_buffer122 = alloca float, align 4
  %result_from_other_lane120 = alloca float, align 4
  %return_buffer119 = alloca float, align 4
  %result_from_other_lane117 = alloca float, align 4
  %return_buffer116 = alloca float, align 4
  %result_from_other_lane114 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %result_from_other_lane111 = alloca float, align 4
  %return_buffer107 = alloca float, align 4
  %result_from_other_lane105 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after171, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_34_constant_20 = load float, ptr @13, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_34_constant_20, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_34_constant_20, ptr %3, align 4
  %region_0_34_constant_5 = load float, ptr @11, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_34_constant_5, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_34_constant_5, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after44, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc42 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc42
  %35 = icmp ult i32 %x_loc42, %tile_bound3
  br i1 %35, label %x_in_tile-true43, label %x_in_tile-after44

x_in_tile-after44:                                ; preds = %x_in_tile-true43, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !343

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !344

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result94 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane, ptr %return_buffer95)
  %40 = load float, ptr %return_buffer95, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result97 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane96, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane96, ptr %return_buffer98)
  %42 = load float, ptr %return_buffer98, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result100 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane99, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane99, ptr %return_buffer101)
  %44 = load float, ptr %return_buffer101, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result103 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane102, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane102, ptr %return_buffer104)
  %46 = load float, ptr %return_buffer104, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result106 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result106, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane105, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane105, ptr %return_buffer107)
  %48 = load float, ptr %return_buffer107, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address108 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address108 to ptr
  %current_output109 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output109, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr110 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr110 to ptr
  %partial_reduction_result112 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result112, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane111, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane111, ptr %return_buffer113)
  %59 = load float, ptr %return_buffer113, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result115 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result115, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane114, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane114, ptr %return_buffer116)
  %61 = load float, ptr %return_buffer116, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result118 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result118, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane117, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane117, ptr %return_buffer119)
  %63 = load float, ptr %return_buffer119, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result121 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result121, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane120, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane120, ptr %return_buffer122)
  %65 = load float, ptr %return_buffer122, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result124 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result124, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane123, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane123, ptr %return_buffer125)
  %67 = load float, ptr %return_buffer125, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true126, label %reduction_write_output-after127

reduction_write_output-after127:                  ; preds = %reduction_write_output-true126, %reduction_write_output-after
  %shmem_output_address130 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address130 to ptr
  %current_output131 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output131, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr132 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr132 to ptr
  %partial_reduction_result134 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result134, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane133, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane133, ptr %return_buffer135)
  %78 = load float, ptr %return_buffer135, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result137 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result137, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane136, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane136, ptr %return_buffer138)
  %80 = load float, ptr %return_buffer138, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result140 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result140, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane139, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane139, ptr %return_buffer141)
  %82 = load float, ptr %return_buffer141, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result143 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result143, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane142, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane142, ptr %return_buffer144)
  %84 = load float, ptr %return_buffer144, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result146 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result146, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane145, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane145, ptr %return_buffer147)
  %86 = load float, ptr %return_buffer147, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true148, label %reduction_write_output-after149

reduction_write_output-after149:                  ; preds = %reduction_write_output-true148, %reduction_write_output-after127
  %shmem_output_address152 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address152 to ptr
  %current_output153 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output153, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr154 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr154 to ptr
  %partial_reduction_result156 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result156, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane155, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane155, ptr %return_buffer157)
  %97 = load float, ptr %return_buffer157, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result159 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result159, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane158, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane158, ptr %return_buffer160)
  %99 = load float, ptr %return_buffer160, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result162 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane161, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane161, ptr %return_buffer163)
  %101 = load float, ptr %return_buffer163, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result165 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane164, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane164, ptr %return_buffer166)
  %103 = load float, ptr %return_buffer166, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result168 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane167, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane167, ptr %return_buffer169)
  %105 = load float, ptr %return_buffer169, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true170, label %reduction_write_output-after171

reduction_write_output-after171:                  ; preds = %reduction_write_output-true170, %reduction_write_output-after149
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %131, i32 %126
  %Arg_3.45 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %region_0_34_constant_56 = load float, ptr @11, align 4
  %compare.7 = fcmp ogt float %Arg_3.45, %region_0_34_constant_56
  %133 = zext i1 %compare.7 to i8
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %131, i32 0
  %Arg_2.37 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.28 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.8 = fmul float %Arg_2.37, %Arg_1.28
  %region_0_34_constant_9 = load float, ptr @12, align 4
  %Arg_1.29 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.210 = load float, ptr %Arg_1.29, align 4, !invariant.load !269
  %subtract.11 = fsub float %region_0_34_constant_9, %Arg_1.210
  %multiply.12 = fmul float %multiply.8, %subtract.11
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %126, i32 0
  %Arg_0.111 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.17 = fmul float %multiply.12, %Arg_0.111
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %multiply.17, float %region_0_34_constant_56
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_21(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_3.412 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %144, i32 %139
  %Arg_3.413 = load float, ptr %Arg_3.412, align 4, !invariant.load !269
  %Arg_2.314 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %144, i32 0
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !269
  %Arg_1.216 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.217 = load float, ptr %Arg_1.216, align 4, !invariant.load !269
  %multiply.818 = fmul float %Arg_2.315, %Arg_1.217
  %region_0_34_constant_919 = load float, ptr @12, align 4
  %Arg_1.220 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.221 = load float, ptr %Arg_1.220, align 4, !invariant.load !269
  %subtract.1122 = fsub float %region_0_34_constant_919, %Arg_1.221
  %multiply.1223 = fmul float %multiply.818, %subtract.1122
  %multiply.26 = fmul float %Arg_3.413, %multiply.1223
  store float %multiply.26, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_28(ptr %146, ptr %reduction_input_address1, ptr %return_buffer24)
  %147 = load float, ptr %return_buffer24, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_3.425 = getelementptr inbounds float, ptr %arg3, i32 %117
  %Arg_3.426 = load float, ptr %Arg_3.425, align 4, !invariant.load !269
  %region_0_34_constant_527 = load float, ptr @11, align 4
  %compare.728 = fcmp ogt float %Arg_3.426, %region_0_34_constant_527
  %156 = zext i1 %compare.728 to i8
  %Arg_2.329 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %154, i32 0
  %Arg_2.330 = load float, ptr %Arg_2.329, align 4, !invariant.load !269
  %Arg_1.231 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.232 = load float, ptr %Arg_1.231, align 4, !invariant.load !269
  %multiply.833 = fmul float %Arg_2.330, %Arg_1.232
  %region_0_34_constant_934 = load float, ptr @12, align 4
  %Arg_1.235 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.236 = load float, ptr %Arg_1.235, align 4, !invariant.load !269
  %subtract.1137 = fsub float %region_0_34_constant_934, %Arg_1.236
  %multiply.1238 = fmul float %multiply.833, %subtract.1137
  %Arg_0.139 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %149, i32 0
  %Arg_0.140 = load float, ptr %Arg_0.139, align 4, !invariant.load !269
  %multiply.1741 = fmul float %multiply.1238, %Arg_0.140
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %multiply.1741, float %region_0_34_constant_527
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true43:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc42, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_3.445 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %187, i32 %182
  %Arg_3.446 = load float, ptr %Arg_3.445, align 4, !invariant.load !269
  %region_0_34_constant_547 = load float, ptr @11, align 4
  %compare.748 = fcmp ogt float %Arg_3.446, %region_0_34_constant_547
  %189 = zext i1 %compare.748 to i8
  %Arg_2.349 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %187, i32 0
  %Arg_2.350 = load float, ptr %Arg_2.349, align 4, !invariant.load !269
  %Arg_1.251 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.252 = load float, ptr %Arg_1.251, align 4, !invariant.load !269
  %multiply.853 = fmul float %Arg_2.350, %Arg_1.252
  %region_0_34_constant_954 = load float, ptr @12, align 4
  %Arg_1.255 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.256 = load float, ptr %Arg_1.255, align 4, !invariant.load !269
  %subtract.1157 = fsub float %region_0_34_constant_954, %Arg_1.256
  %multiply.1258 = fmul float %multiply.853, %subtract.1157
  %Arg_0.159 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %182, i32 0
  %Arg_0.160 = load float, ptr %Arg_0.159, align 4, !invariant.load !269
  %multiply.1761 = fmul float %multiply.1258, %Arg_0.160
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %multiply.1761, float %region_0_34_constant_547
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_21(ptr %192, ptr %reduction_input_address, ptr %return_buffer62)
  %193 = load float, ptr %return_buffer62, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_3.463 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %200, i32 %195
  %Arg_3.464 = load float, ptr %Arg_3.463, align 4, !invariant.load !269
  %Arg_2.365 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %200, i32 0
  %Arg_2.366 = load float, ptr %Arg_2.365, align 4, !invariant.load !269
  %Arg_1.267 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.268 = load float, ptr %Arg_1.267, align 4, !invariant.load !269
  %multiply.869 = fmul float %Arg_2.366, %Arg_1.268
  %region_0_34_constant_970 = load float, ptr @12, align 4
  %Arg_1.271 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.272 = load float, ptr %Arg_1.271, align 4, !invariant.load !269
  %subtract.1173 = fsub float %region_0_34_constant_970, %Arg_1.272
  %multiply.1274 = fmul float %multiply.869, %subtract.1173
  %multiply.2675 = fmul float %Arg_3.464, %multiply.1274
  store float %multiply.2675, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_28(ptr %202, ptr %reduction_input_address1, ptr %return_buffer76)
  %203 = load float, ptr %return_buffer76, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_3.477 = getelementptr inbounds float, ptr %arg3, i32 %173
  %Arg_3.478 = load float, ptr %Arg_3.477, align 4, !invariant.load !269
  %region_0_34_constant_579 = load float, ptr @11, align 4
  %compare.780 = fcmp ogt float %Arg_3.478, %region_0_34_constant_579
  %212 = zext i1 %compare.780 to i8
  %Arg_2.381 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %210, i32 0
  %Arg_2.382 = load float, ptr %Arg_2.381, align 4, !invariant.load !269
  %Arg_1.283 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.284 = load float, ptr %Arg_1.283, align 4, !invariant.load !269
  %multiply.885 = fmul float %Arg_2.382, %Arg_1.284
  %region_0_34_constant_986 = load float, ptr @12, align 4
  %Arg_1.287 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.288 = load float, ptr %Arg_1.287, align 4, !invariant.load !269
  %subtract.1189 = fsub float %region_0_34_constant_986, %Arg_1.288
  %multiply.1290 = fmul float %multiply.885, %subtract.1189
  %Arg_0.191 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %205, i32 0
  %Arg_0.192 = load float, ptr %Arg_0.191, align 4, !invariant.load !269
  %multiply.1793 = fmul float %multiply.1290, %Arg_0.192
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %multiply.1793, float %region_0_34_constant_579
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after44

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true126:                   ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address128 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %241, i32 %240
  %output129 = load float, ptr %57, align 4
  store float %output129, ptr %output_element_address128, align 4
  br label %reduction_write_output-after127

reduction_write_output-true148:                   ; preds = %reduction_write_output-after127
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address150 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %250, i32 %249
  %output151 = load float, ptr %76, align 4
  store float %output151, ptr %output_element_address150, align 4
  br label %reduction_write_output-after149

reduction_write_output-true170:                   ; preds = %reduction_write_output-after149
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address172 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %259, i32 %258
  %output173 = load float, ptr %95, align 4
  store float %output173, ptr %output_element_address172, align 4
  br label %reduction_write_output-after171
}

define internal void @region_1_21(ptr dereferenceable(4) %Arg_0.22.typed, ptr dereferenceable(4) %Arg_1.23.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.24.typed = alloca float, align 4
  %Arg_0.22 = load float, ptr %Arg_0.22.typed, align 4
  %Arg_1.23 = load float, ptr %Arg_1.23.typed, align 4
  %add.24 = fadd float %Arg_0.22, %Arg_1.23
  store float %add.24, ptr %add.24.typed, align 4
  %load_ret_value = load float, ptr %add.24.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_28(ptr dereferenceable(4) %Arg_0.29.typed, ptr dereferenceable(4) %Arg_1.30.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.31.typed = alloca float, align 4
  %Arg_0.29 = load float, ptr %Arg_0.29.typed, align 4
  %Arg_1.30 = load float, ptr %Arg_1.30.typed, align 4
  %add.31 = fadd float %Arg_0.29, %Arg_1.30
  store float %add.31, ptr %add.31.typed, align 4
  %load_ret_value = load float, ptr %add.31.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_699(ptr noalias align 128 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(512) %arg2) {
entry:
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 64, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc4 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc4
  %33 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %33, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !346

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !347

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_3__1(ptr %36, ptr %result_from_other_lane, ptr %return_buffer11)
  %38 = load float, ptr %return_buffer11, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result13 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane12, align 4
  call void @region_1_3__1(ptr %36, ptr %result_from_other_lane12, ptr %return_buffer14)
  %40 = load float, ptr %return_buffer14, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result16 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane15, align 4
  call void @region_1_3__1(ptr %36, ptr %result_from_other_lane15, ptr %return_buffer17)
  %42 = load float, ptr %return_buffer17, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result19 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane18, align 4
  call void @region_1_3__1(ptr %36, ptr %result_from_other_lane18, ptr %return_buffer20)
  %44 = load float, ptr %return_buffer20, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result22 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane21, align 4
  call void @region_1_3__1(ptr %36, ptr %result_from_other_lane21, ptr %return_buffer23)
  %46 = load float, ptr %return_buffer23, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output25, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane27, align 4
  call void @region_1_3__1(ptr %55, ptr %result_from_other_lane27, ptr %return_buffer29)
  %57 = load float, ptr %return_buffer29, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result31 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane30, align 4
  call void @region_1_3__1(ptr %55, ptr %result_from_other_lane30, ptr %return_buffer32)
  %59 = load float, ptr %return_buffer32, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result34 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane33, align 4
  call void @region_1_3__1(ptr %55, ptr %result_from_other_lane33, ptr %return_buffer35)
  %61 = load float, ptr %return_buffer35, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result37 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane36, align 4
  call void @region_1_3__1(ptr %55, ptr %result_from_other_lane36, ptr %return_buffer38)
  %63 = load float, ptr %return_buffer38, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result40 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane39, align 4
  call void @region_1_3__1(ptr %55, ptr %result_from_other_lane39, ptr %return_buffer41)
  %65 = load float, ptr %return_buffer41, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul i32 %thread_id.x, 2
  %73 = sub i32 %x_loc, %72
  %Arg_0.1 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %74 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %73
  call void @region_1_3__1(ptr %74, ptr %reduction_input_address, ptr %return_buffer)
  %75 = load float, ptr %return_buffer, align 4
  store float %75, ptr %74, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc4, %76
  %Arg_0.17 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_3__1(ptr %78, ptr %reduction_input_address, ptr %return_buffer9)
  %79 = load float, ptr %return_buffer9, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %80 = mul i32 %thread_id.y, 2
  %81 = add i32 %tile_origin.1, %thread_id.x
  %82 = add i32 %tile_origin.2, %80
  %83 = add i32 %82, 0
  %84 = mul i32 %tile_origin.0, 128
  %85 = add i32 %84, %83
  %86 = udiv i32 %85, 1
  %output_element_address = getelementptr inbounds [128 x float], ptr %arg2, i32 0, i32 %86
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %87 = mul i32 %thread_id.y, 2
  %88 = add i32 %tile_origin.1, %thread_id.x
  %89 = add i32 %tile_origin.2, %87
  %90 = add i32 %89, 1
  %91 = mul i32 %tile_origin.0, 128
  %92 = add i32 %91, %90
  %93 = udiv i32 %92, 1
  %output_element_address44 = getelementptr inbounds [128 x float], ptr %arg2, i32 0, i32 %93
  %output45 = load float, ptr %55, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43
}

define internal void @region_1_3__1(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_434(ptr noalias align 128 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @15, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !348

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !349

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_15_constant_3 = load float, ptr @14, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9__1(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 128
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_15_constant_37 = load float, ptr @14, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 128
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 128
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 16384
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 128
  %126 = udiv i32 %123, 128
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 16384
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 128
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_15_constant_316 = load float, ptr @14, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9__1(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_15_constant_323 = load float, ptr @14, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 128
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 128
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 128
  %172 = udiv i32 %169, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 128
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 128
  %181 = udiv i32 %178, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9__1(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_409(ptr noalias align 128 dereferenceable(8388608) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @17, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !350

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !351

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_15_constant_3 = load float, ptr @16, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9__2(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 256
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_15_constant_37 = load float, ptr @16, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 256
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 256
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 32768
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 256
  %126 = udiv i32 %123, 256
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 32768
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 256
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_15_constant_316 = load float, ptr @16, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9__2(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 256
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_15_constant_323 = load float, ptr @16, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 256
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 256
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 256
  %172 = udiv i32 %169, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 256
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 256
  %181 = udiv i32 %178, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9__2(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_416(ptr noalias align 16 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(131072) %arg4, ptr noalias align 16 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(131072) %arg6, ptr noalias align 128 dereferenceable(131072) %arg7, ptr noalias align 128 dereferenceable(131072) %arg8, ptr noalias align 128 dereferenceable(131072) %arg9) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !352
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 32768
  br i1 %6, label %fusion_416.in_bounds-true, label %fusion_416.in_bounds-after

fusion_416.in_bounds-after:                       ; preds = %fusion_416.in_bounds-true, %entry
  ret void

fusion_416.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %multiply.9 = fmul float %9, %11
  %subtract.10 = fsub float %8, %multiply.9
  %12 = insertvalue { float, float, float } undef, float %subtract.10, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %multiply.11 = fmul float %9, %16
  %subtract.12 = fsub float %14, %multiply.11
  %17 = insertvalue { float, float, float } %12, float %subtract.12, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %multiply.13 = fmul float %9, %21
  %subtract.14 = fsub float %19, %multiply.13
  %22 = insertvalue { float, float, float } %17, float %subtract.14, 2
  %23 = extractvalue { float, float, float } %22, 0
  %24 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  store float %23, ptr %24, align 4
  %25 = extractvalue { float, float, float } %22, 1
  %26 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %25, ptr %26, align 4
  %27 = extractvalue { float, float, float } %22, 2
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  store float %27, ptr %28, align 4
  br label %fusion_416.in_bounds-after
}

define void @fusion_725(ptr noalias align 128 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(65536) %arg3, ptr noalias align 128 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(1024) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 128 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8) {
entry:
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !321
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %5 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %5, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %9 = urem i32 %7, 1024
  %10 = udiv i32 %7, 1024
  %11 = mul i32 %8, 1
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 4
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 4
  %17 = udiv i32 %12, 4
  %18 = urem i32 %17, 1
  %19 = udiv i32 %12, 4
  %20 = icmp eq i32 %18, 0
  %tile_bound = select i1 %20, i32 64, i32 4096
  %21 = icmp eq i32 %16, 3
  %tile_bound1 = select i1 %21, i32 64, i32 64
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 4096
  %tile_origin.2 = mul i32 %16, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %25 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %25, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %26 = icmp eq i32 %tile_loop.indvar, 0
  %27 = mul i32 %tile_loop.indvar, 2
  %28 = add i32 %27, 0
  %x_loc = add i32 %28, %24
  %29 = add i32 %tile_origin.1, %y_in_tile.indvar
  %30 = add i32 %tile_origin.2, %x_loc
  %31 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %31, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %32 = mul i32 %tile_loop.indvar, 2
  %33 = add i32 %32, 1
  %x_loc4 = add i32 %33, %24
  %34 = add i32 %tile_origin.1, %y_in_tile.indvar
  %35 = add i32 %tile_origin.2, %x_loc4
  %36 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %36, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !353

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !354

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %37 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %38 = load float, ptr %current_output, align 4
  store float %38, ptr %37, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %39 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %39, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %40, ptr %result_from_other_lane, align 4
  call void @region_1_6(ptr %39, ptr %result_from_other_lane, ptr %return_buffer11)
  %41 = load float, ptr %return_buffer11, align 4
  store float %41, ptr %39, align 4
  %partial_reduction_result13 = load float, ptr %39, align 4
  %42 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %42, ptr %result_from_other_lane12, align 4
  call void @region_1_6(ptr %39, ptr %result_from_other_lane12, ptr %return_buffer14)
  %43 = load float, ptr %return_buffer14, align 4
  store float %43, ptr %39, align 4
  %partial_reduction_result16 = load float, ptr %39, align 4
  %44 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %44, ptr %result_from_other_lane15, align 4
  call void @region_1_6(ptr %39, ptr %result_from_other_lane15, ptr %return_buffer17)
  %45 = load float, ptr %return_buffer17, align 4
  store float %45, ptr %39, align 4
  %partial_reduction_result19 = load float, ptr %39, align 4
  %46 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %46, ptr %result_from_other_lane18, align 4
  call void @region_1_6(ptr %39, ptr %result_from_other_lane18, ptr %return_buffer20)
  %47 = load float, ptr %return_buffer20, align 4
  store float %47, ptr %39, align 4
  %partial_reduction_result22 = load float, ptr %39, align 4
  %48 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %48, ptr %result_from_other_lane21, align 4
  call void @region_1_6(ptr %39, ptr %result_from_other_lane21, ptr %return_buffer23)
  %49 = load float, ptr %return_buffer23, align 4
  store float %49, ptr %39, align 4
  %50 = icmp ult i32 %thread_id.x, %tile_bound
  %51 = mul i32 %thread_id.y, 2
  %52 = icmp ult i32 %51, %tile_bound1
  %53 = and i1 %52, %50
  %54 = icmp eq i32 %lane_id, 0
  %55 = and i1 %53, %54
  br i1 %55, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %10, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %56 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %57 = load float, ptr %current_output25, align 4
  store float %57, ptr %56, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %10, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %58 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %58, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %59, ptr %result_from_other_lane27, align 4
  call void @region_1_6(ptr %58, ptr %result_from_other_lane27, ptr %return_buffer29)
  %60 = load float, ptr %return_buffer29, align 4
  store float %60, ptr %58, align 4
  %partial_reduction_result31 = load float, ptr %58, align 4
  %61 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %61, ptr %result_from_other_lane30, align 4
  call void @region_1_6(ptr %58, ptr %result_from_other_lane30, ptr %return_buffer32)
  %62 = load float, ptr %return_buffer32, align 4
  store float %62, ptr %58, align 4
  %partial_reduction_result34 = load float, ptr %58, align 4
  %63 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %63, ptr %result_from_other_lane33, align 4
  call void @region_1_6(ptr %58, ptr %result_from_other_lane33, ptr %return_buffer35)
  %64 = load float, ptr %return_buffer35, align 4
  store float %64, ptr %58, align 4
  %partial_reduction_result37 = load float, ptr %58, align 4
  %65 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %65, ptr %result_from_other_lane36, align 4
  call void @region_1_6(ptr %58, ptr %result_from_other_lane36, ptr %return_buffer38)
  %66 = load float, ptr %return_buffer38, align 4
  store float %66, ptr %58, align 4
  %partial_reduction_result40 = load float, ptr %58, align 4
  %67 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %67, ptr %result_from_other_lane39, align 4
  call void @region_1_6(ptr %58, ptr %result_from_other_lane39, ptr %return_buffer41)
  %68 = load float, ptr %return_buffer41, align 4
  store float %68, ptr %58, align 4
  %69 = icmp ult i32 %thread_id.x, %tile_bound
  %70 = mul i32 %thread_id.y, 2
  %71 = icmp ult i32 %70, %tile_bound1
  %72 = and i1 %71, %69
  %73 = icmp eq i32 %lane_id, 0
  %74 = and i1 %72, %73
  br i1 %74, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %75 = mul i32 %thread_id.x, 2
  %76 = sub i32 %x_loc, %75
  %Arg_0.1 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %29, i32 %30
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %77 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %76
  call void @region_1_6(ptr %77, ptr %reduction_input_address, ptr %return_buffer)
  %78 = load float, ptr %return_buffer, align 4
  store float %78, ptr %77, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %79 = mul i32 %thread_id.x, 2
  %80 = sub i32 %x_loc4, %79
  %Arg_0.17 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %34, i32 %35
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %81 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %80
  call void @region_1_6(ptr %81, ptr %reduction_input_address, ptr %return_buffer9)
  %82 = load float, ptr %return_buffer9, align 4
  store float %82, ptr %81, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %83 = mul i32 %thread_id.y, 2
  %84 = add i32 %tile_origin.1, %thread_id.x
  %85 = add i32 %tile_origin.2, %83
  %86 = add i32 %85, 0
  %87 = mul i32 %tile_origin.0, 256
  %88 = add i32 %87, %86
  %89 = udiv i32 %88, 1
  %output_element_address = getelementptr inbounds [256 x float], ptr %arg5, i32 0, i32 %89
  %output = load float, ptr %39, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %90 = mul i32 %thread_id.y, 2
  %91 = add i32 %tile_origin.1, %thread_id.x
  %92 = add i32 %tile_origin.2, %90
  %93 = add i32 %92, 1
  %94 = mul i32 %tile_origin.0, 256
  %95 = add i32 %94, %93
  %96 = udiv i32 %95, 1
  %output_element_address44 = getelementptr inbounds [256 x float], ptr %arg5, i32 0, i32 %96
  %output45 = load float, ptr %58, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !269
  %97 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %97, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %98, align 4
  %99 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %101 = urem i32 %99, 1024
  %102 = udiv i32 %99, 1024
  %103 = mul i32 %100, 1
  %104 = add i32 %103, %102
  %105 = icmp ult i32 %104, 4
  br i1 %105, label %106, label %early_return49

106:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %101, 32
  %thread_id.y51 = udiv i32 %101, 32
  %lane_id52 = urem i32 %101, 32
  %107 = udiv i32 %104, 1
  %108 = urem i32 %107, 4
  %109 = udiv i32 %104, 4
  %110 = urem i32 %109, 1
  %111 = udiv i32 %104, 4
  %112 = icmp eq i32 %110, 0
  %tile_bound53 = select i1 %112, i32 64, i32 4096
  %113 = icmp eq i32 %108, 3
  %tile_bound54 = select i1 %113, i32 64, i32 64
  %tile_origin.055 = mul i32 %111, 1
  %tile_origin.156 = mul i32 %110, 4096
  %tile_origin.257 = mul i32 %108, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %106
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %114 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %114, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %116 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %117 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %117, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %118 = icmp eq i32 %tile_loop.indvar68, 0
  %119 = mul i32 %tile_loop.indvar68, 2
  %120 = add i32 %119, 0
  %x_loc70 = add i32 %120, %116
  %121 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %122 = add i32 %tile_origin.257, %x_loc70
  %123 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %123, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %124 = mul i32 %tile_loop.indvar68, 2
  %125 = add i32 %124, 1
  %x_loc75 = add i32 %125, %116
  %126 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %127 = add i32 %tile_origin.257, %x_loc75
  %128 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %128, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !355

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !356

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %102, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %129 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %130 = load float, ptr %current_output82, align 4
  store float %130, ptr %129, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %102, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %131 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %131, align 4
  %132 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %132, ptr %result_from_other_lane84, align 4
  call void @region_2_11(ptr %131, ptr %result_from_other_lane84, ptr %return_buffer86)
  %133 = load float, ptr %return_buffer86, align 4
  store float %133, ptr %131, align 4
  %partial_reduction_result88 = load float, ptr %131, align 4
  %134 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %134, ptr %result_from_other_lane87, align 4
  call void @region_2_11(ptr %131, ptr %result_from_other_lane87, ptr %return_buffer89)
  %135 = load float, ptr %return_buffer89, align 4
  store float %135, ptr %131, align 4
  %partial_reduction_result91 = load float, ptr %131, align 4
  %136 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %136, ptr %result_from_other_lane90, align 4
  call void @region_2_11(ptr %131, ptr %result_from_other_lane90, ptr %return_buffer92)
  %137 = load float, ptr %return_buffer92, align 4
  store float %137, ptr %131, align 4
  %partial_reduction_result94 = load float, ptr %131, align 4
  %138 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %138, ptr %result_from_other_lane93, align 4
  call void @region_2_11(ptr %131, ptr %result_from_other_lane93, ptr %return_buffer95)
  %139 = load float, ptr %return_buffer95, align 4
  store float %139, ptr %131, align 4
  %partial_reduction_result97 = load float, ptr %131, align 4
  %140 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %140, ptr %result_from_other_lane96, align 4
  call void @region_2_11(ptr %131, ptr %result_from_other_lane96, ptr %return_buffer98)
  %141 = load float, ptr %return_buffer98, align 4
  store float %141, ptr %131, align 4
  %142 = icmp ult i32 %thread_id.x50, %tile_bound53
  %143 = mul i32 %thread_id.y51, 2
  %144 = icmp ult i32 %143, %tile_bound54
  %145 = and i1 %144, %142
  %146 = icmp eq i32 %lane_id52, 0
  %147 = and i1 %145, %146
  br i1 %147, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %102, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %148 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %149 = load float, ptr %current_output104, align 4
  store float %149, ptr %148, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %102, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %150 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %150, align 4
  %151 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %151, ptr %result_from_other_lane106, align 4
  call void @region_2_11(ptr %150, ptr %result_from_other_lane106, ptr %return_buffer108)
  %152 = load float, ptr %return_buffer108, align 4
  store float %152, ptr %150, align 4
  %partial_reduction_result110 = load float, ptr %150, align 4
  %153 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %153, ptr %result_from_other_lane109, align 4
  call void @region_2_11(ptr %150, ptr %result_from_other_lane109, ptr %return_buffer111)
  %154 = load float, ptr %return_buffer111, align 4
  store float %154, ptr %150, align 4
  %partial_reduction_result113 = load float, ptr %150, align 4
  %155 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %155, ptr %result_from_other_lane112, align 4
  call void @region_2_11(ptr %150, ptr %result_from_other_lane112, ptr %return_buffer114)
  %156 = load float, ptr %return_buffer114, align 4
  store float %156, ptr %150, align 4
  %partial_reduction_result116 = load float, ptr %150, align 4
  %157 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %157, ptr %result_from_other_lane115, align 4
  call void @region_2_11(ptr %150, ptr %result_from_other_lane115, ptr %return_buffer117)
  %158 = load float, ptr %return_buffer117, align 4
  store float %158, ptr %150, align 4
  %partial_reduction_result119 = load float, ptr %150, align 4
  %159 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %159, ptr %result_from_other_lane118, align 4
  call void @region_2_11(ptr %150, ptr %result_from_other_lane118, ptr %return_buffer120)
  %160 = load float, ptr %return_buffer120, align 4
  store float %160, ptr %150, align 4
  %161 = icmp ult i32 %thread_id.x50, %tile_bound53
  %162 = mul i32 %thread_id.y51, 2
  %163 = icmp ult i32 %162, %tile_bound54
  %164 = and i1 %163, %161
  %165 = icmp eq i32 %lane_id52, 0
  %166 = and i1 %164, %165
  br i1 %166, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %167 = mul i32 %thread_id.x50, 2
  %168 = sub i32 %x_loc70, %167
  %Arg_2.3 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %121, i32 %122
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %169 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %168
  call void @region_2_11(ptr %169, ptr %reduction_input_address46, ptr %return_buffer74)
  %170 = load float, ptr %return_buffer74, align 4
  store float %170, ptr %169, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %171 = mul i32 %thread_id.x50, 2
  %172 = sub i32 %x_loc75, %171
  %Arg_2.378 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %126, i32 %127
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !269
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %173 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %172
  call void @region_2_11(ptr %173, ptr %reduction_input_address46, ptr %return_buffer80)
  %174 = load float, ptr %return_buffer80, align 4
  store float %174, ptr %173, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %175 = mul i32 %thread_id.y51, 2
  %176 = add i32 %tile_origin.156, %thread_id.x50
  %177 = add i32 %tile_origin.257, %175
  %178 = add i32 %177, 0
  %179 = mul i32 %tile_origin.055, 256
  %180 = add i32 %179, %178
  %181 = udiv i32 %180, 1
  %output_element_address101 = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %181
  %output102 = load float, ptr %131, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %182 = mul i32 %thread_id.y51, 2
  %183 = add i32 %tile_origin.156, %thread_id.x50
  %184 = add i32 %tile_origin.257, %182
  %185 = add i32 %184, 1
  %186 = mul i32 %tile_origin.055, 256
  %187 = add i32 %186, %185
  %188 = udiv i32 %187, 1
  %output_element_address123 = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %188
  %output124 = load float, ptr %150, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !269
  %189 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %189, align 4
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %190, align 4
  %191 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %193 = urem i32 %191, 1024
  %194 = udiv i32 %191, 1024
  %195 = mul i32 %192, 1
  %196 = add i32 %195, %194
  %197 = icmp ult i32 %196, 4
  br i1 %197, label %198, label %early_return128

198:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %193, 32
  %thread_id.y130 = udiv i32 %193, 32
  %lane_id131 = urem i32 %193, 32
  %199 = udiv i32 %196, 1
  %200 = urem i32 %199, 4
  %201 = udiv i32 %196, 4
  %202 = urem i32 %201, 1
  %203 = udiv i32 %196, 4
  %204 = icmp eq i32 %202, 0
  %tile_bound132 = select i1 %204, i32 64, i32 4096
  %205 = icmp eq i32 %200, 3
  %tile_bound133 = select i1 %205, i32 64, i32 64
  %tile_origin.0134 = mul i32 %203, 1
  %tile_origin.1135 = mul i32 %202, 4096
  %tile_origin.2136 = mul i32 %200, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %198
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %206 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %206, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %208 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %209 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %209, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %210 = icmp eq i32 %tile_loop.indvar147, 0
  %211 = mul i32 %tile_loop.indvar147, 2
  %212 = add i32 %211, 0
  %x_loc149 = add i32 %212, %208
  %213 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %214 = add i32 %tile_origin.2136, %x_loc149
  %215 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %215, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %216 = mul i32 %tile_loop.indvar147, 2
  %217 = add i32 %216, 1
  %x_loc154 = add i32 %217, %208
  %218 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %219 = add i32 %tile_origin.2136, %x_loc154
  %220 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %220, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !357

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !358

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %194, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %221 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %222 = load float, ptr %current_output161, align 4
  store float %222, ptr %221, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %194, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %223 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %223, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %224, ptr %result_from_other_lane163, align 4
  call void @region_3_16(ptr %223, ptr %result_from_other_lane163, ptr %return_buffer165)
  %225 = load float, ptr %return_buffer165, align 4
  store float %225, ptr %223, align 4
  %partial_reduction_result167 = load float, ptr %223, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %226, ptr %result_from_other_lane166, align 4
  call void @region_3_16(ptr %223, ptr %result_from_other_lane166, ptr %return_buffer168)
  %227 = load float, ptr %return_buffer168, align 4
  store float %227, ptr %223, align 4
  %partial_reduction_result170 = load float, ptr %223, align 4
  %228 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %228, ptr %result_from_other_lane169, align 4
  call void @region_3_16(ptr %223, ptr %result_from_other_lane169, ptr %return_buffer171)
  %229 = load float, ptr %return_buffer171, align 4
  store float %229, ptr %223, align 4
  %partial_reduction_result173 = load float, ptr %223, align 4
  %230 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %230, ptr %result_from_other_lane172, align 4
  call void @region_3_16(ptr %223, ptr %result_from_other_lane172, ptr %return_buffer174)
  %231 = load float, ptr %return_buffer174, align 4
  store float %231, ptr %223, align 4
  %partial_reduction_result176 = load float, ptr %223, align 4
  %232 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %232, ptr %result_from_other_lane175, align 4
  call void @region_3_16(ptr %223, ptr %result_from_other_lane175, ptr %return_buffer177)
  %233 = load float, ptr %return_buffer177, align 4
  store float %233, ptr %223, align 4
  %234 = icmp ult i32 %thread_id.x129, %tile_bound132
  %235 = mul i32 %thread_id.y130, 2
  %236 = icmp ult i32 %235, %tile_bound133
  %237 = and i1 %236, %234
  %238 = icmp eq i32 %lane_id131, 0
  %239 = and i1 %237, %238
  br i1 %239, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %194, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %240 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %241 = load float, ptr %current_output183, align 4
  store float %241, ptr %240, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %194, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %242 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %242, align 4
  %243 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %243, ptr %result_from_other_lane185, align 4
  call void @region_3_16(ptr %242, ptr %result_from_other_lane185, ptr %return_buffer187)
  %244 = load float, ptr %return_buffer187, align 4
  store float %244, ptr %242, align 4
  %partial_reduction_result189 = load float, ptr %242, align 4
  %245 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %245, ptr %result_from_other_lane188, align 4
  call void @region_3_16(ptr %242, ptr %result_from_other_lane188, ptr %return_buffer190)
  %246 = load float, ptr %return_buffer190, align 4
  store float %246, ptr %242, align 4
  %partial_reduction_result192 = load float, ptr %242, align 4
  %247 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %247, ptr %result_from_other_lane191, align 4
  call void @region_3_16(ptr %242, ptr %result_from_other_lane191, ptr %return_buffer193)
  %248 = load float, ptr %return_buffer193, align 4
  store float %248, ptr %242, align 4
  %partial_reduction_result195 = load float, ptr %242, align 4
  %249 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %249, ptr %result_from_other_lane194, align 4
  call void @region_3_16(ptr %242, ptr %result_from_other_lane194, ptr %return_buffer196)
  %250 = load float, ptr %return_buffer196, align 4
  store float %250, ptr %242, align 4
  %partial_reduction_result198 = load float, ptr %242, align 4
  %251 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %251, ptr %result_from_other_lane197, align 4
  call void @region_3_16(ptr %242, ptr %result_from_other_lane197, ptr %return_buffer199)
  %252 = load float, ptr %return_buffer199, align 4
  store float %252, ptr %242, align 4
  %253 = icmp ult i32 %thread_id.x129, %tile_bound132
  %254 = mul i32 %thread_id.y130, 2
  %255 = icmp ult i32 %254, %tile_bound133
  %256 = and i1 %255, %253
  %257 = icmp eq i32 %lane_id131, 0
  %258 = and i1 %256, %257
  br i1 %258, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %259 = mul i32 %thread_id.x129, 2
  %260 = sub i32 %x_loc149, %259
  %Arg_3.4 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %213, i32 %214
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %261 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %260
  call void @region_3_16(ptr %261, ptr %reduction_input_address125, ptr %return_buffer153)
  %262 = load float, ptr %return_buffer153, align 4
  store float %262, ptr %261, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %263 = mul i32 %thread_id.x129, 2
  %264 = sub i32 %x_loc154, %263
  %Arg_3.4157 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %218, i32 %219
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !269
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %265 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %264
  call void @region_3_16(ptr %265, ptr %reduction_input_address125, ptr %return_buffer159)
  %266 = load float, ptr %return_buffer159, align 4
  store float %266, ptr %265, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %267 = mul i32 %thread_id.y130, 2
  %268 = add i32 %tile_origin.1135, %thread_id.x129
  %269 = add i32 %tile_origin.2136, %267
  %270 = add i32 %269, 0
  %271 = mul i32 %tile_origin.0134, 256
  %272 = add i32 %271, %270
  %273 = udiv i32 %272, 1
  %output_element_address180 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %273
  %output181 = load float, ptr %223, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %274 = mul i32 %thread_id.y130, 2
  %275 = add i32 %tile_origin.1135, %thread_id.x129
  %276 = add i32 %tile_origin.2136, %274
  %277 = add i32 %276, 1
  %278 = mul i32 %tile_origin.0134, 256
  %279 = add i32 %278, %277
  %280 = udiv i32 %279, 1
  %output_element_address202 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %280
  %output203 = load float, ptr %242, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !269
  %281 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %281, align 4
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %282, align 4
  %283 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %285 = urem i32 %283, 1024
  %286 = udiv i32 %283, 1024
  %287 = mul i32 %284, 1
  %288 = add i32 %287, %286
  %289 = icmp ult i32 %288, 4
  br i1 %289, label %290, label %early_return207

290:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %285, 32
  %thread_id.y209 = udiv i32 %285, 32
  %lane_id210 = urem i32 %285, 32
  %291 = udiv i32 %288, 1
  %292 = urem i32 %291, 4
  %293 = udiv i32 %288, 4
  %294 = urem i32 %293, 1
  %295 = udiv i32 %288, 4
  %296 = icmp eq i32 %294, 0
  %tile_bound211 = select i1 %296, i32 64, i32 4096
  %297 = icmp eq i32 %292, 3
  %tile_bound212 = select i1 %297, i32 64, i32 64
  %tile_origin.0213 = mul i32 %295, 1
  %tile_origin.1214 = mul i32 %294, 4096
  %tile_origin.2215 = mul i32 %292, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %290
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %298 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %298, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %300 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %301 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %301, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %302 = icmp eq i32 %tile_loop.indvar226, 0
  %303 = mul i32 %tile_loop.indvar226, 2
  %304 = add i32 %303, 0
  %x_loc228 = add i32 %304, %300
  %305 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %306 = add i32 %tile_origin.2215, %x_loc228
  %307 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %307, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %308 = mul i32 %tile_loop.indvar226, 2
  %309 = add i32 %308, 1
  %x_loc233 = add i32 %309, %300
  %310 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %311 = add i32 %tile_origin.2215, %x_loc233
  %312 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %312, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !359

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !360

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %286, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %313 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %314 = load float, ptr %current_output240, align 4
  store float %314, ptr %313, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %286, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %315 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %315, align 4
  %316 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %316, ptr %result_from_other_lane242, align 4
  call void @region_4_21(ptr %315, ptr %result_from_other_lane242, ptr %return_buffer244)
  %317 = load float, ptr %return_buffer244, align 4
  store float %317, ptr %315, align 4
  %partial_reduction_result246 = load float, ptr %315, align 4
  %318 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %318, ptr %result_from_other_lane245, align 4
  call void @region_4_21(ptr %315, ptr %result_from_other_lane245, ptr %return_buffer247)
  %319 = load float, ptr %return_buffer247, align 4
  store float %319, ptr %315, align 4
  %partial_reduction_result249 = load float, ptr %315, align 4
  %320 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %320, ptr %result_from_other_lane248, align 4
  call void @region_4_21(ptr %315, ptr %result_from_other_lane248, ptr %return_buffer250)
  %321 = load float, ptr %return_buffer250, align 4
  store float %321, ptr %315, align 4
  %partial_reduction_result252 = load float, ptr %315, align 4
  %322 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %322, ptr %result_from_other_lane251, align 4
  call void @region_4_21(ptr %315, ptr %result_from_other_lane251, ptr %return_buffer253)
  %323 = load float, ptr %return_buffer253, align 4
  store float %323, ptr %315, align 4
  %partial_reduction_result255 = load float, ptr %315, align 4
  %324 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %324, ptr %result_from_other_lane254, align 4
  call void @region_4_21(ptr %315, ptr %result_from_other_lane254, ptr %return_buffer256)
  %325 = load float, ptr %return_buffer256, align 4
  store float %325, ptr %315, align 4
  %326 = icmp ult i32 %thread_id.x208, %tile_bound211
  %327 = mul i32 %thread_id.y209, 2
  %328 = icmp ult i32 %327, %tile_bound212
  %329 = and i1 %328, %326
  %330 = icmp eq i32 %lane_id210, 0
  %331 = and i1 %329, %330
  br i1 %331, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %286, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %332 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %333 = load float, ptr %current_output262, align 4
  store float %333, ptr %332, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %286, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %334 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %334, align 4
  %335 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %335, ptr %result_from_other_lane264, align 4
  call void @region_4_21(ptr %334, ptr %result_from_other_lane264, ptr %return_buffer266)
  %336 = load float, ptr %return_buffer266, align 4
  store float %336, ptr %334, align 4
  %partial_reduction_result268 = load float, ptr %334, align 4
  %337 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %337, ptr %result_from_other_lane267, align 4
  call void @region_4_21(ptr %334, ptr %result_from_other_lane267, ptr %return_buffer269)
  %338 = load float, ptr %return_buffer269, align 4
  store float %338, ptr %334, align 4
  %partial_reduction_result271 = load float, ptr %334, align 4
  %339 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %339, ptr %result_from_other_lane270, align 4
  call void @region_4_21(ptr %334, ptr %result_from_other_lane270, ptr %return_buffer272)
  %340 = load float, ptr %return_buffer272, align 4
  store float %340, ptr %334, align 4
  %partial_reduction_result274 = load float, ptr %334, align 4
  %341 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %341, ptr %result_from_other_lane273, align 4
  call void @region_4_21(ptr %334, ptr %result_from_other_lane273, ptr %return_buffer275)
  %342 = load float, ptr %return_buffer275, align 4
  store float %342, ptr %334, align 4
  %partial_reduction_result277 = load float, ptr %334, align 4
  %343 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %343, ptr %result_from_other_lane276, align 4
  call void @region_4_21(ptr %334, ptr %result_from_other_lane276, ptr %return_buffer278)
  %344 = load float, ptr %return_buffer278, align 4
  store float %344, ptr %334, align 4
  %345 = icmp ult i32 %thread_id.x208, %tile_bound211
  %346 = mul i32 %thread_id.y209, 2
  %347 = icmp ult i32 %346, %tile_bound212
  %348 = and i1 %347, %345
  %349 = icmp eq i32 %lane_id210, 0
  %350 = and i1 %348, %349
  br i1 %350, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %351 = mul i32 %thread_id.x208, 2
  %352 = sub i32 %x_loc228, %351
  %Arg_4.5 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %305, i32 %306
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %353 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %352
  call void @region_4_21(ptr %353, ptr %reduction_input_address204, ptr %return_buffer232)
  %354 = load float, ptr %return_buffer232, align 4
  store float %354, ptr %353, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %355 = mul i32 %thread_id.x208, 2
  %356 = sub i32 %x_loc233, %355
  %Arg_4.5236 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %310, i32 %311
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %357 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %356
  call void @region_4_21(ptr %357, ptr %reduction_input_address204, ptr %return_buffer238)
  %358 = load float, ptr %return_buffer238, align 4
  store float %358, ptr %357, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %359 = mul i32 %thread_id.y209, 2
  %360 = add i32 %tile_origin.1214, %thread_id.x208
  %361 = add i32 %tile_origin.2215, %359
  %362 = add i32 %361, 0
  %363 = mul i32 %tile_origin.0213, 256
  %364 = add i32 %363, %362
  %365 = udiv i32 %364, 1
  %output_element_address259 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %365
  %output260 = load float, ptr %315, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %366 = mul i32 %thread_id.y209, 2
  %367 = add i32 %tile_origin.1214, %thread_id.x208
  %368 = add i32 %tile_origin.2215, %366
  %369 = add i32 %368, 1
  %370 = mul i32 %tile_origin.0213, 256
  %371 = add i32 %370, %369
  %372 = udiv i32 %371, 1
  %output_element_address281 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %372
  %output282 = load float, ptr %334, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280
}

define internal void @region_1_6(ptr dereferenceable(4) %Arg_0.7.typed, ptr dereferenceable(4) %Arg_1.8.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.9.typed = alloca float, align 4
  %Arg_0.7 = load float, ptr %Arg_0.7.typed, align 4
  %Arg_1.8 = load float, ptr %Arg_1.8.typed, align 4
  %add.9 = fadd float %Arg_0.7, %Arg_1.8
  store float %add.9, ptr %add.9.typed, align 4
  %load_ret_value = load float, ptr %add.9.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_11(ptr dereferenceable(4) %Arg_0.12.typed, ptr dereferenceable(4) %Arg_1.13.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.14.typed = alloca float, align 4
  %Arg_0.12 = load float, ptr %Arg_0.12.typed, align 4
  %Arg_1.13 = load float, ptr %Arg_1.13.typed, align 4
  %add.14 = fadd float %Arg_0.12, %Arg_1.13
  store float %add.14, ptr %add.14.typed, align 4
  %load_ret_value = load float, ptr %add.14.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_16(ptr dereferenceable(4) %Arg_0.17.typed, ptr dereferenceable(4) %Arg_1.18.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.19.typed = alloca float, align 4
  %Arg_0.17 = load float, ptr %Arg_0.17.typed, align 4
  %Arg_1.18 = load float, ptr %Arg_1.18.typed, align 4
  %add.19 = fadd float %Arg_0.17, %Arg_1.18
  store float %add.19, ptr %add.19.typed, align 4
  %load_ret_value = load float, ptr %add.19.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_21(ptr dereferenceable(4) %Arg_0.22.typed, ptr dereferenceable(4) %Arg_1.23.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.24.typed = alloca float, align 4
  %Arg_0.22 = load float, ptr %Arg_0.22.typed, align 4
  %Arg_1.23 = load float, ptr %Arg_1.23.typed, align 4
  %add.24 = fadd float %Arg_0.22, %Arg_1.23
  store float %add.24, ptr %add.24.typed, align 4
  %load_ret_value = load float, ptr %add.24.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_694(ptr noalias align 128 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 128 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 128 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !361
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 2
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 2
  %18 = udiv i32 %13, 2
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 2
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 1
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !362

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !363

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7__1(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7__1(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 128
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 128
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 2
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 2
  %110 = udiv i32 %105, 2
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 2
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 1
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !364

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !365

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !269
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 128
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [128 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 128
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [128 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !269
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 2
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 2
  %202 = udiv i32 %197, 2
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 2
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 1
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !366

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !367

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !269
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 128
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [128 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 128
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [128 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !269
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 2
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 2
  %294 = udiv i32 %289, 2
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 2
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 1
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !368

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !369

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 128
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [128 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 128
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [128 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !269
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 2
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 2
  %386 = udiv i32 %381, 2
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 2
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 1
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !370

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !371

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !269
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 128
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [128 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 128
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [128 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7__1(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_450(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 128 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 128 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 128 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 128
  br i1 %4, label %fusion_450.in_bounds-true, label %fusion_450.in_bounds-after

fusion_450.in_bounds-after:                       ; preds = %fusion_450.in_bounds-true, %entry
  ret void

fusion_450.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4, !invariant.load !269
  %multiply.15 = fmul float %7, %9
  %subtract.16 = fsub float %6, %multiply.15
  %10 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %multiply.17 = fmul float %7, %14
  %subtract.18 = fsub float %12, %multiply.17
  %15 = insertvalue { float, float, float, float, float, float } %10, float %subtract.18, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %multiply.19 = fmul float %7, %19
  %subtract.20 = fsub float %17, %multiply.19
  %20 = insertvalue { float, float, float, float, float, float } %15, float %subtract.20, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %multiply.21 = fmul float %7, %24
  %subtract.22 = fsub float %22, %multiply.21
  %25 = insertvalue { float, float, float, float, float, float } %20, float %subtract.22, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %multiply.23 = fmul float %7, %29
  %subtract.24 = fsub float %27, %multiply.23
  %30 = insertvalue { float, float, float, float, float, float } %25, float %subtract.24, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.25 = fmul float %7, %34
  %subtract.26 = fsub float %32, %multiply.25
  %35 = insertvalue { float, float, float, float, float, float } %30, float %subtract.26, 5
  %36 = extractvalue { float, float, float, float, float, float } %35, 0
  %37 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %36, ptr %37, align 4
  %38 = extractvalue { float, float, float, float, float, float } %35, 1
  %39 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %35, 2
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %35, 3
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %35, 4
  %45 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %35, 5
  %47 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %46, ptr %47, align 4
  br label %fusion_450.in_bounds-after
}

define void @fusion_449(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(4194304) %arg4, ptr noalias align 128 dereferenceable(32768) %arg5) {
entry:
  %return_buffer126 = alloca float, align 4
  %result_from_other_lane124 = alloca float, align 4
  %return_buffer123 = alloca float, align 4
  %result_from_other_lane121 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer82 = alloca float, align 4
  %result_from_other_lane80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after128, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_28_constant_14 = load float, ptr @19, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_28_constant_14, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_28_constant_14, ptr %3, align 4
  %region_0_28_constant_4 = load float, ptr @18, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_28_constant_4, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_28_constant_4, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after25, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc23 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc23
  %35 = icmp ult i32 %x_loc23, %tile_bound3
  br i1 %35, label %x_in_tile-true24, label %x_in_tile-after25

x_in_tile-after25:                                ; preds = %x_in_tile-true24, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !372

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !373

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result51 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane, ptr %return_buffer52)
  %40 = load float, ptr %return_buffer52, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result54 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane53, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane53, ptr %return_buffer55)
  %42 = load float, ptr %return_buffer55, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result57 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane56, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane56, ptr %return_buffer58)
  %44 = load float, ptr %return_buffer58, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result60 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane59, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane59, ptr %return_buffer61)
  %46 = load float, ptr %return_buffer61, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result63 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane62, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane62, ptr %return_buffer64)
  %48 = load float, ptr %return_buffer64, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address65 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address65 to ptr
  %current_output66 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output66, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr67 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr67 to ptr
  %partial_reduction_result69 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane68, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane68, ptr %return_buffer70)
  %59 = load float, ptr %return_buffer70, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result72 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane71, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane71, ptr %return_buffer73)
  %61 = load float, ptr %return_buffer73, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result75 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane74, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane74, ptr %return_buffer76)
  %63 = load float, ptr %return_buffer76, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result78 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane77, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane77, ptr %return_buffer79)
  %65 = load float, ptr %return_buffer79, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result81 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result81, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane80, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane80, ptr %return_buffer82)
  %67 = load float, ptr %return_buffer82, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true83, label %reduction_write_output-after84

reduction_write_output-after84:                   ; preds = %reduction_write_output-true83, %reduction_write_output-after
  %shmem_output_address87 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address87 to ptr
  %current_output88 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output88, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr89 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr89 to ptr
  %partial_reduction_result91 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane90, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane90, ptr %return_buffer92)
  %78 = load float, ptr %return_buffer92, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result94 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane93, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane93, ptr %return_buffer95)
  %80 = load float, ptr %return_buffer95, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result97 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane96, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane96, ptr %return_buffer98)
  %82 = load float, ptr %return_buffer98, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result100 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane99, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane99, ptr %return_buffer101)
  %84 = load float, ptr %return_buffer101, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result103 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane102, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane102, ptr %return_buffer104)
  %86 = load float, ptr %return_buffer104, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true105, label %reduction_write_output-after106

reduction_write_output-after106:                  ; preds = %reduction_write_output-true105, %reduction_write_output-after84
  %shmem_output_address109 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address109 to ptr
  %current_output110 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output110, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr111 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr111 to ptr
  %partial_reduction_result113 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane112, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane112, ptr %return_buffer114)
  %97 = load float, ptr %return_buffer114, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result116 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane115, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane115, ptr %return_buffer117)
  %99 = load float, ptr %return_buffer117, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result119 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane118, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane118, ptr %return_buffer120)
  %101 = load float, ptr %return_buffer120, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result122 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result122, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane121, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane121, ptr %return_buffer123)
  %103 = load float, ptr %return_buffer123, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result125 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result125, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane124, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane124, ptr %return_buffer126)
  %105 = load float, ptr %return_buffer126, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true127, label %reduction_write_output-after128

reduction_write_output-after128:                  ; preds = %reduction_write_output-true127, %reduction_write_output-after106
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_2.3 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %131, i32 %126
  %Arg_2.35 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %region_0_28_constant_46 = load float, ptr @18, align 4
  %compare.6 = fcmp ogt float %Arg_2.35, %region_0_28_constant_46
  %133 = zext i1 %compare.6 to i8
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.27 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %126, i32 0
  %Arg_0.18 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.11 = fmul float %Arg_1.27, %Arg_0.18
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %multiply.11, float %region_0_28_constant_46
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_15(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_2.39 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %144, i32 %139
  %Arg_2.310 = load float, ptr %Arg_2.39, align 4, !invariant.load !269
  %Arg_1.211 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.212 = load float, ptr %Arg_1.211, align 4, !invariant.load !269
  %multiply.20 = fmul float %Arg_2.310, %Arg_1.212
  store float %multiply.20, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_22(ptr %146, ptr %reduction_input_address1, ptr %return_buffer13)
  %147 = load float, ptr %return_buffer13, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_2.314 = getelementptr inbounds float, ptr %arg2, i32 %117
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !269
  %region_0_28_constant_416 = load float, ptr @18, align 4
  %compare.617 = fcmp ogt float %Arg_2.315, %region_0_28_constant_416
  %156 = zext i1 %compare.617 to i8
  %Arg_1.218 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.219 = load float, ptr %Arg_1.218, align 4, !invariant.load !269
  %Arg_0.120 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %149, i32 0
  %Arg_0.121 = load float, ptr %Arg_0.120, align 4, !invariant.load !269
  %multiply.1122 = fmul float %Arg_1.219, %Arg_0.121
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %multiply.1122, float %region_0_28_constant_416
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg4, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true24:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc23, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_2.326 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %187, i32 %182
  %Arg_2.327 = load float, ptr %Arg_2.326, align 4, !invariant.load !269
  %region_0_28_constant_428 = load float, ptr @18, align 4
  %compare.629 = fcmp ogt float %Arg_2.327, %region_0_28_constant_428
  %189 = zext i1 %compare.629 to i8
  %Arg_1.230 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.231 = load float, ptr %Arg_1.230, align 4, !invariant.load !269
  %Arg_0.132 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %182, i32 0
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !269
  %multiply.1134 = fmul float %Arg_1.231, %Arg_0.133
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %multiply.1134, float %region_0_28_constant_428
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_15(ptr %192, ptr %reduction_input_address, ptr %return_buffer35)
  %193 = load float, ptr %return_buffer35, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_2.336 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %200, i32 %195
  %Arg_2.337 = load float, ptr %Arg_2.336, align 4, !invariant.load !269
  %Arg_1.238 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.239 = load float, ptr %Arg_1.238, align 4, !invariant.load !269
  %multiply.2040 = fmul float %Arg_2.337, %Arg_1.239
  store float %multiply.2040, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_22(ptr %202, ptr %reduction_input_address1, ptr %return_buffer41)
  %203 = load float, ptr %return_buffer41, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_2.342 = getelementptr inbounds float, ptr %arg2, i32 %173
  %Arg_2.343 = load float, ptr %Arg_2.342, align 4, !invariant.load !269
  %region_0_28_constant_444 = load float, ptr @18, align 4
  %compare.645 = fcmp ogt float %Arg_2.343, %region_0_28_constant_444
  %212 = zext i1 %compare.645 to i8
  %Arg_1.246 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.247 = load float, ptr %Arg_1.246, align 4, !invariant.load !269
  %Arg_0.148 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %205, i32 0
  %Arg_0.149 = load float, ptr %Arg_0.148, align 4, !invariant.load !269
  %multiply.1150 = fmul float %Arg_1.247, %Arg_0.149
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %multiply.1150, float %region_0_28_constant_444
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg4, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after25

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true83:                    ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address85 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %241, i32 %240
  %output86 = load float, ptr %57, align 4
  store float %output86, ptr %output_element_address85, align 4
  br label %reduction_write_output-after84

reduction_write_output-true105:                   ; preds = %reduction_write_output-after84
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address107 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %250, i32 %249
  %output108 = load float, ptr %76, align 4
  store float %output108, ptr %output_element_address107, align 4
  br label %reduction_write_output-after106

reduction_write_output-true127:                   ; preds = %reduction_write_output-after106
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address129 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %259, i32 %258
  %output130 = load float, ptr %95, align 4
  store float %output130, ptr %output_element_address129, align 4
  br label %reduction_write_output-after128
}

define internal void @region_1_15(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_22(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_319(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6) {
entry:
  %return_buffer136 = alloca float, align 4
  %result_from_other_lane134 = alloca float, align 4
  %return_buffer133 = alloca float, align 4
  %result_from_other_lane131 = alloca float, align 4
  %return_buffer130 = alloca float, align 4
  %result_from_other_lane128 = alloca float, align 4
  %return_buffer127 = alloca float, align 4
  %result_from_other_lane125 = alloca float, align 4
  %return_buffer124 = alloca float, align 4
  %result_from_other_lane122 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer105 = alloca float, align 4
  %result_from_other_lane103 = alloca float, align 4
  %return_buffer102 = alloca float, align 4
  %result_from_other_lane100 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer83 = alloca float, align 4
  %result_from_other_lane81 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane66 = alloca float, align 4
  %return_buffer65 = alloca float, align 4
  %result_from_other_lane63 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer48 = alloca float, align 4
  %return_buffer42 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after138, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_30_constant_16 = load float, ptr @21, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_30_constant_16, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_30_constant_16, ptr %3, align 4
  %region_0_30_constant_5 = load float, ptr @20, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_30_constant_5, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_30_constant_5, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after29, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc27 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc27
  %35 = icmp ult i32 %x_loc27, %tile_bound3
  br i1 %35, label %x_in_tile-true28, label %x_in_tile-after29

x_in_tile-after29:                                ; preds = %x_in_tile-true28, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !374

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !375

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result61 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane, ptr %return_buffer62)
  %40 = load float, ptr %return_buffer62, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result64 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result64, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane63, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane63, ptr %return_buffer65)
  %42 = load float, ptr %return_buffer65, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result67 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane66, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane66, ptr %return_buffer68)
  %44 = load float, ptr %return_buffer68, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result70 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane69, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane69, ptr %return_buffer71)
  %46 = load float, ptr %return_buffer71, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result73 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane72, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane72, ptr %return_buffer74)
  %48 = load float, ptr %return_buffer74, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address75 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address75 to ptr
  %current_output76 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output76, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr77 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr77 to ptr
  %partial_reduction_result79 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane78, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane78, ptr %return_buffer80)
  %59 = load float, ptr %return_buffer80, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result82 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result82, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane81, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane81, ptr %return_buffer83)
  %61 = load float, ptr %return_buffer83, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result85 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane84, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane84, ptr %return_buffer86)
  %63 = load float, ptr %return_buffer86, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result88 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane87, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane87, ptr %return_buffer89)
  %65 = load float, ptr %return_buffer89, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result91 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane90, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane90, ptr %return_buffer92)
  %67 = load float, ptr %return_buffer92, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true93, label %reduction_write_output-after94

reduction_write_output-after94:                   ; preds = %reduction_write_output-true93, %reduction_write_output-after
  %shmem_output_address97 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address97 to ptr
  %current_output98 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output98, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr99 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr99 to ptr
  %partial_reduction_result101 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result101, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane100, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane100, ptr %return_buffer102)
  %78 = load float, ptr %return_buffer102, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result104 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result104, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane103, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane103, ptr %return_buffer105)
  %80 = load float, ptr %return_buffer105, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result107 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane106, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane106, ptr %return_buffer108)
  %82 = load float, ptr %return_buffer108, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result110 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane109, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane109, ptr %return_buffer111)
  %84 = load float, ptr %return_buffer111, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result113 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane112, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane112, ptr %return_buffer114)
  %86 = load float, ptr %return_buffer114, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true115, label %reduction_write_output-after116

reduction_write_output-after116:                  ; preds = %reduction_write_output-true115, %reduction_write_output-after94
  %shmem_output_address119 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address119 to ptr
  %current_output120 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output120, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr121 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr121 to ptr
  %partial_reduction_result123 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result123, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane122, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane122, ptr %return_buffer124)
  %97 = load float, ptr %return_buffer124, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result126 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result126, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane125, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane125, ptr %return_buffer127)
  %99 = load float, ptr %return_buffer127, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result129 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane128, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane128, ptr %return_buffer130)
  %101 = load float, ptr %return_buffer130, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result132 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result132, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane131, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane131, ptr %return_buffer133)
  %103 = load float, ptr %return_buffer133, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result135 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result135, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane134, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane134, ptr %return_buffer136)
  %105 = load float, ptr %return_buffer136, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true137, label %reduction_write_output-after138

reduction_write_output-after138:                  ; preds = %reduction_write_output-true137, %reduction_write_output-after116
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %131, i32 %126
  %Arg_3.45 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %region_0_30_constant_56 = load float, ptr @20, align 4
  %compare.7 = fcmp ogt float %Arg_3.45, %region_0_30_constant_56
  %133 = zext i1 %compare.7 to i8
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %131, i32 0
  %Arg_2.37 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %126, i32 0
  %Arg_1.28 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.12 = fmul float %Arg_2.37, %Arg_1.28
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %131, i32 %126
  %Arg_0.19 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %add.13 = fadd float %multiply.12, %Arg_0.19
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %add.13, float %region_0_30_constant_56
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_17(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_3.410 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %144, i32 %139
  %Arg_3.411 = load float, ptr %Arg_3.410, align 4, !invariant.load !269
  %Arg_2.312 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %144, i32 0
  %Arg_2.313 = load float, ptr %Arg_2.312, align 4, !invariant.load !269
  %multiply.22 = fmul float %Arg_3.411, %Arg_2.313
  store float %multiply.22, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_24(ptr %146, ptr %reduction_input_address1, ptr %return_buffer14)
  %147 = load float, ptr %return_buffer14, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_3.415 = getelementptr inbounds float, ptr %arg3, i32 %117
  %Arg_3.416 = load float, ptr %Arg_3.415, align 4, !invariant.load !269
  %region_0_30_constant_517 = load float, ptr @20, align 4
  %compare.718 = fcmp ogt float %Arg_3.416, %region_0_30_constant_517
  %156 = zext i1 %compare.718 to i8
  %Arg_2.319 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %154, i32 0
  %Arg_2.320 = load float, ptr %Arg_2.319, align 4, !invariant.load !269
  %Arg_1.221 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %149, i32 0
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %multiply.1223 = fmul float %Arg_2.320, %Arg_1.222
  %Arg_0.124 = getelementptr inbounds float, ptr %arg0, i32 %117
  %Arg_0.125 = load float, ptr %Arg_0.124, align 4, !invariant.load !269
  %add.1326 = fadd float %multiply.1223, %Arg_0.125
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %add.1326, float %region_0_30_constant_517
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true28:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc27, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_3.430 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %187, i32 %182
  %Arg_3.431 = load float, ptr %Arg_3.430, align 4, !invariant.load !269
  %region_0_30_constant_532 = load float, ptr @20, align 4
  %compare.733 = fcmp ogt float %Arg_3.431, %region_0_30_constant_532
  %189 = zext i1 %compare.733 to i8
  %Arg_2.334 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %187, i32 0
  %Arg_2.335 = load float, ptr %Arg_2.334, align 4, !invariant.load !269
  %Arg_1.236 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %182, i32 0
  %Arg_1.237 = load float, ptr %Arg_1.236, align 4, !invariant.load !269
  %multiply.1238 = fmul float %Arg_2.335, %Arg_1.237
  %Arg_0.139 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %187, i32 %182
  %Arg_0.140 = load float, ptr %Arg_0.139, align 4, !invariant.load !269
  %add.1341 = fadd float %multiply.1238, %Arg_0.140
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %add.1341, float %region_0_30_constant_532
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_17(ptr %192, ptr %reduction_input_address, ptr %return_buffer42)
  %193 = load float, ptr %return_buffer42, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_3.443 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %200, i32 %195
  %Arg_3.444 = load float, ptr %Arg_3.443, align 4, !invariant.load !269
  %Arg_2.345 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %200, i32 0
  %Arg_2.346 = load float, ptr %Arg_2.345, align 4, !invariant.load !269
  %multiply.2247 = fmul float %Arg_3.444, %Arg_2.346
  store float %multiply.2247, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_24(ptr %202, ptr %reduction_input_address1, ptr %return_buffer48)
  %203 = load float, ptr %return_buffer48, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_3.449 = getelementptr inbounds float, ptr %arg3, i32 %173
  %Arg_3.450 = load float, ptr %Arg_3.449, align 4, !invariant.load !269
  %region_0_30_constant_551 = load float, ptr @20, align 4
  %compare.752 = fcmp ogt float %Arg_3.450, %region_0_30_constant_551
  %212 = zext i1 %compare.752 to i8
  %Arg_2.353 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %210, i32 0
  %Arg_2.354 = load float, ptr %Arg_2.353, align 4, !invariant.load !269
  %Arg_1.255 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %205, i32 0
  %Arg_1.256 = load float, ptr %Arg_1.255, align 4, !invariant.load !269
  %multiply.1257 = fmul float %Arg_2.354, %Arg_1.256
  %Arg_0.158 = getelementptr inbounds float, ptr %arg0, i32 %173
  %Arg_0.159 = load float, ptr %Arg_0.158, align 4, !invariant.load !269
  %add.1360 = fadd float %multiply.1257, %Arg_0.159
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %add.1360, float %region_0_30_constant_551
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after29

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true93:                    ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address95 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %241, i32 %240
  %output96 = load float, ptr %57, align 4
  store float %output96, ptr %output_element_address95, align 4
  br label %reduction_write_output-after94

reduction_write_output-true115:                   ; preds = %reduction_write_output-after94
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address117 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %250, i32 %249
  %output118 = load float, ptr %76, align 4
  store float %output118, ptr %output_element_address117, align 4
  br label %reduction_write_output-after116

reduction_write_output-true137:                   ; preds = %reduction_write_output-after116
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address139 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %259, i32 %258
  %output140 = load float, ptr %95, align 4
  store float %output140, ptr %output_element_address139, align 4
  br label %reduction_write_output-after138
}

define internal void @region_1_17(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_24(ptr dereferenceable(4) %Arg_0.25.typed, ptr dereferenceable(4) %Arg_1.26.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.27.typed = alloca float, align 4
  %Arg_0.25 = load float, ptr %Arg_0.25.typed, align 4
  %Arg_1.26 = load float, ptr %Arg_1.26.typed, align 4
  %add.27 = fadd float %Arg_0.25, %Arg_1.26
  store float %add.27, ptr %add.27.typed, align 4
  %load_ret_value = load float, ptr %add.27.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_317(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6) {
entry:
  %return_buffer136 = alloca float, align 4
  %result_from_other_lane134 = alloca float, align 4
  %return_buffer133 = alloca float, align 4
  %result_from_other_lane131 = alloca float, align 4
  %return_buffer130 = alloca float, align 4
  %result_from_other_lane128 = alloca float, align 4
  %return_buffer127 = alloca float, align 4
  %result_from_other_lane125 = alloca float, align 4
  %return_buffer124 = alloca float, align 4
  %result_from_other_lane122 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer105 = alloca float, align 4
  %result_from_other_lane103 = alloca float, align 4
  %return_buffer102 = alloca float, align 4
  %result_from_other_lane100 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer83 = alloca float, align 4
  %result_from_other_lane81 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane66 = alloca float, align 4
  %return_buffer65 = alloca float, align 4
  %result_from_other_lane63 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer48 = alloca float, align 4
  %return_buffer42 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after138, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_30_constant_16 = load float, ptr @23, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_30_constant_16, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_30_constant_16, ptr %3, align 4
  %region_0_30_constant_5 = load float, ptr @22, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_30_constant_5, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_30_constant_5, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after29, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc27 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc27
  %35 = icmp ult i32 %x_loc27, %tile_bound3
  br i1 %35, label %x_in_tile-true28, label %x_in_tile-after29

x_in_tile-after29:                                ; preds = %x_in_tile-true28, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !376

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !377

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result61 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_17__1(ptr %38, ptr %result_from_other_lane, ptr %return_buffer62)
  %40 = load float, ptr %return_buffer62, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result64 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result64, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane63, align 4
  call void @region_1_17__1(ptr %38, ptr %result_from_other_lane63, ptr %return_buffer65)
  %42 = load float, ptr %return_buffer65, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result67 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane66, align 4
  call void @region_1_17__1(ptr %38, ptr %result_from_other_lane66, ptr %return_buffer68)
  %44 = load float, ptr %return_buffer68, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result70 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane69, align 4
  call void @region_1_17__1(ptr %38, ptr %result_from_other_lane69, ptr %return_buffer71)
  %46 = load float, ptr %return_buffer71, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result73 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane72, align 4
  call void @region_1_17__1(ptr %38, ptr %result_from_other_lane72, ptr %return_buffer74)
  %48 = load float, ptr %return_buffer74, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address75 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address75 to ptr
  %current_output76 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output76, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr77 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr77 to ptr
  %partial_reduction_result79 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane78, align 4
  call void @region_1_17__1(ptr %57, ptr %result_from_other_lane78, ptr %return_buffer80)
  %59 = load float, ptr %return_buffer80, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result82 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result82, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane81, align 4
  call void @region_1_17__1(ptr %57, ptr %result_from_other_lane81, ptr %return_buffer83)
  %61 = load float, ptr %return_buffer83, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result85 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane84, align 4
  call void @region_1_17__1(ptr %57, ptr %result_from_other_lane84, ptr %return_buffer86)
  %63 = load float, ptr %return_buffer86, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result88 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane87, align 4
  call void @region_1_17__1(ptr %57, ptr %result_from_other_lane87, ptr %return_buffer89)
  %65 = load float, ptr %return_buffer89, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result91 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane90, align 4
  call void @region_1_17__1(ptr %57, ptr %result_from_other_lane90, ptr %return_buffer92)
  %67 = load float, ptr %return_buffer92, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true93, label %reduction_write_output-after94

reduction_write_output-after94:                   ; preds = %reduction_write_output-true93, %reduction_write_output-after
  %shmem_output_address97 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address97 to ptr
  %current_output98 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output98, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr99 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr99 to ptr
  %partial_reduction_result101 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result101, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane100, align 4
  call void @region_2_24__1(ptr %76, ptr %result_from_other_lane100, ptr %return_buffer102)
  %78 = load float, ptr %return_buffer102, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result104 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result104, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane103, align 4
  call void @region_2_24__1(ptr %76, ptr %result_from_other_lane103, ptr %return_buffer105)
  %80 = load float, ptr %return_buffer105, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result107 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane106, align 4
  call void @region_2_24__1(ptr %76, ptr %result_from_other_lane106, ptr %return_buffer108)
  %82 = load float, ptr %return_buffer108, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result110 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane109, align 4
  call void @region_2_24__1(ptr %76, ptr %result_from_other_lane109, ptr %return_buffer111)
  %84 = load float, ptr %return_buffer111, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result113 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane112, align 4
  call void @region_2_24__1(ptr %76, ptr %result_from_other_lane112, ptr %return_buffer114)
  %86 = load float, ptr %return_buffer114, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true115, label %reduction_write_output-after116

reduction_write_output-after116:                  ; preds = %reduction_write_output-true115, %reduction_write_output-after94
  %shmem_output_address119 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address119 to ptr
  %current_output120 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output120, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr121 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr121 to ptr
  %partial_reduction_result123 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result123, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane122, align 4
  call void @region_2_24__1(ptr %95, ptr %result_from_other_lane122, ptr %return_buffer124)
  %97 = load float, ptr %return_buffer124, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result126 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result126, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane125, align 4
  call void @region_2_24__1(ptr %95, ptr %result_from_other_lane125, ptr %return_buffer127)
  %99 = load float, ptr %return_buffer127, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result129 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane128, align 4
  call void @region_2_24__1(ptr %95, ptr %result_from_other_lane128, ptr %return_buffer130)
  %101 = load float, ptr %return_buffer130, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result132 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result132, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane131, align 4
  call void @region_2_24__1(ptr %95, ptr %result_from_other_lane131, ptr %return_buffer133)
  %103 = load float, ptr %return_buffer133, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result135 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result135, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane134, align 4
  call void @region_2_24__1(ptr %95, ptr %result_from_other_lane134, ptr %return_buffer136)
  %105 = load float, ptr %return_buffer136, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true137, label %reduction_write_output-after138

reduction_write_output-after138:                  ; preds = %reduction_write_output-true137, %reduction_write_output-after116
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %131, i32 %126
  %Arg_3.45 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %region_0_30_constant_56 = load float, ptr @22, align 4
  %compare.7 = fcmp ogt float %Arg_3.45, %region_0_30_constant_56
  %133 = zext i1 %compare.7 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %131, i32 %126
  %Arg_0.17 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %131, i32 0
  %Arg_2.38 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %126, i32 0
  %Arg_1.29 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.12 = fmul float %Arg_2.38, %Arg_1.29
  %add.13 = fadd float %Arg_0.17, %multiply.12
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %add.13, float %region_0_30_constant_56
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_17__1(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_3.410 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %144, i32 %139
  %Arg_3.411 = load float, ptr %Arg_3.410, align 4, !invariant.load !269
  %Arg_2.312 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %144, i32 0
  %Arg_2.313 = load float, ptr %Arg_2.312, align 4, !invariant.load !269
  %multiply.22 = fmul float %Arg_3.411, %Arg_2.313
  store float %multiply.22, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_24__1(ptr %146, ptr %reduction_input_address1, ptr %return_buffer14)
  %147 = load float, ptr %return_buffer14, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_3.415 = getelementptr inbounds float, ptr %arg3, i32 %117
  %Arg_3.416 = load float, ptr %Arg_3.415, align 4, !invariant.load !269
  %region_0_30_constant_517 = load float, ptr @22, align 4
  %compare.718 = fcmp ogt float %Arg_3.416, %region_0_30_constant_517
  %156 = zext i1 %compare.718 to i8
  %Arg_0.119 = getelementptr inbounds float, ptr %arg0, i32 %117
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !269
  %Arg_2.321 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %154, i32 0
  %Arg_2.322 = load float, ptr %Arg_2.321, align 4, !invariant.load !269
  %Arg_1.223 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %149, i32 0
  %Arg_1.224 = load float, ptr %Arg_1.223, align 4, !invariant.load !269
  %multiply.1225 = fmul float %Arg_2.322, %Arg_1.224
  %add.1326 = fadd float %Arg_0.120, %multiply.1225
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %add.1326, float %region_0_30_constant_517
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true28:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc27, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_3.430 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %187, i32 %182
  %Arg_3.431 = load float, ptr %Arg_3.430, align 4, !invariant.load !269
  %region_0_30_constant_532 = load float, ptr @22, align 4
  %compare.733 = fcmp ogt float %Arg_3.431, %region_0_30_constant_532
  %189 = zext i1 %compare.733 to i8
  %Arg_0.134 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %187, i32 %182
  %Arg_0.135 = load float, ptr %Arg_0.134, align 4, !invariant.load !269
  %Arg_2.336 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %187, i32 0
  %Arg_2.337 = load float, ptr %Arg_2.336, align 4, !invariant.load !269
  %Arg_1.238 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %182, i32 0
  %Arg_1.239 = load float, ptr %Arg_1.238, align 4, !invariant.load !269
  %multiply.1240 = fmul float %Arg_2.337, %Arg_1.239
  %add.1341 = fadd float %Arg_0.135, %multiply.1240
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %add.1341, float %region_0_30_constant_532
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_17__1(ptr %192, ptr %reduction_input_address, ptr %return_buffer42)
  %193 = load float, ptr %return_buffer42, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_3.443 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %200, i32 %195
  %Arg_3.444 = load float, ptr %Arg_3.443, align 4, !invariant.load !269
  %Arg_2.345 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %200, i32 0
  %Arg_2.346 = load float, ptr %Arg_2.345, align 4, !invariant.load !269
  %multiply.2247 = fmul float %Arg_3.444, %Arg_2.346
  store float %multiply.2247, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_24__1(ptr %202, ptr %reduction_input_address1, ptr %return_buffer48)
  %203 = load float, ptr %return_buffer48, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_3.449 = getelementptr inbounds float, ptr %arg3, i32 %173
  %Arg_3.450 = load float, ptr %Arg_3.449, align 4, !invariant.load !269
  %region_0_30_constant_551 = load float, ptr @22, align 4
  %compare.752 = fcmp ogt float %Arg_3.450, %region_0_30_constant_551
  %212 = zext i1 %compare.752 to i8
  %Arg_0.153 = getelementptr inbounds float, ptr %arg0, i32 %173
  %Arg_0.154 = load float, ptr %Arg_0.153, align 4, !invariant.load !269
  %Arg_2.355 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %210, i32 0
  %Arg_2.356 = load float, ptr %Arg_2.355, align 4, !invariant.load !269
  %Arg_1.257 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %205, i32 0
  %Arg_1.258 = load float, ptr %Arg_1.257, align 4, !invariant.load !269
  %multiply.1259 = fmul float %Arg_2.356, %Arg_1.258
  %add.1360 = fadd float %Arg_0.154, %multiply.1259
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %add.1360, float %region_0_30_constant_551
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after29

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true93:                    ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address95 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %241, i32 %240
  %output96 = load float, ptr %57, align 4
  store float %output96, ptr %output_element_address95, align 4
  br label %reduction_write_output-after94

reduction_write_output-true115:                   ; preds = %reduction_write_output-after94
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address117 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %250, i32 %249
  %output118 = load float, ptr %76, align 4
  store float %output118, ptr %output_element_address117, align 4
  br label %reduction_write_output-after116

reduction_write_output-true137:                   ; preds = %reduction_write_output-after116
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address139 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %259, i32 %258
  %output140 = load float, ptr %95, align 4
  store float %output140, ptr %output_element_address139, align 4
  br label %reduction_write_output-after138
}

define internal void @region_1_17__1(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_24__1(ptr dereferenceable(4) %Arg_0.25.typed, ptr dereferenceable(4) %Arg_1.26.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.27.typed = alloca float, align 4
  %Arg_0.25 = load float, ptr %Arg_0.25.typed, align 4
  %Arg_1.26 = load float, ptr %Arg_1.26.typed, align 4
  %add.27 = fadd float %Arg_0.25, %Arg_1.26
  store float %add.27, ptr %add.27.typed, align 4
  %load_ret_value = load float, ptr %add.27.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_445(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(4194304) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(4194304) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10) {
entry:
  %return_buffer129 = alloca float, align 4
  %result_from_other_lane127 = alloca float, align 4
  %return_buffer126 = alloca float, align 4
  %result_from_other_lane124 = alloca float, align 4
  %return_buffer123 = alloca float, align 4
  %result_from_other_lane121 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer107 = alloca float, align 4
  %result_from_other_lane105 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer83 = alloca float, align 4
  %result_from_other_lane81 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after131, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_53_constant_32 = load float, ptr @26, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_53_constant_32, ptr %2, align 4
  %region_0_53_constant_8 = load float, ptr @24, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_53_constant_8, ptr %3, align 4
  %region_0_53_constant_85 = load float, ptr @24, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_53_constant_85, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound6 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc7 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc7, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound6
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !378

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !379

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result76 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane, ptr %return_buffer77)
  %34 = load float, ptr %return_buffer77, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result79 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane78, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane78, ptr %return_buffer80)
  %36 = load float, ptr %return_buffer80, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result82 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result82, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane81, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane81, ptr %return_buffer83)
  %38 = load float, ptr %return_buffer83, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result85 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane84, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane84, ptr %return_buffer86)
  %40 = load float, ptr %return_buffer86, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result88 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane87, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane87, ptr %return_buffer89)
  %42 = load float, ptr %return_buffer89, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound6
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address90 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address90 to ptr
  %current_output91 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output91, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr92 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr92 to ptr
  %partial_reduction_result94 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane93, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane93, ptr %return_buffer95)
  %53 = load float, ptr %return_buffer95, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result97 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane96, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane96, ptr %return_buffer98)
  %55 = load float, ptr %return_buffer98, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result100 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane99, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane99, ptr %return_buffer101)
  %57 = load float, ptr %return_buffer101, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result103 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane102, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane102, ptr %return_buffer104)
  %59 = load float, ptr %return_buffer104, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result106 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result106, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane105, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane105, ptr %return_buffer107)
  %61 = load float, ptr %return_buffer107, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound6
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true108, label %reduction_write_output-after109

reduction_write_output-after109:                  ; preds = %reduction_write_output-true108, %reduction_write_output-after
  %shmem_output_address112 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address112 to ptr
  %current_output113 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %69 = load float, ptr %current_output113, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr114 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr114 to ptr
  %partial_reduction_result116 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane115, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane115, ptr %return_buffer117)
  %72 = load float, ptr %return_buffer117, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result119 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane118, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane118, ptr %return_buffer120)
  %74 = load float, ptr %return_buffer120, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result122 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result122, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane121, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane121, ptr %return_buffer123)
  %76 = load float, ptr %return_buffer123, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result125 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result125, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane124, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane124, ptr %return_buffer126)
  %78 = load float, ptr %return_buffer126, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result128 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result128, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane127, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane127, ptr %return_buffer129)
  %80 = load float, ptr %return_buffer129, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound6
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true130, label %reduction_write_output-after131

reduction_write_output-after131:                  ; preds = %reduction_write_output-true130, %reduction_write_output-after109
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.78 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %region_0_53_constant_89 = load float, ptr @24, align 4
  %compare.10 = fcmp ogt float %Arg_6.78, %region_0_53_constant_89
  %108 = zext i1 %compare.10 to i8
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %106, i32 0
  %Arg_5.610 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.511 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.11 = fmul float %Arg_5.610, %Arg_4.511
  %region_0_53_constant_12 = load float, ptr @25, align 4
  %Arg_4.512 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.513 = load float, ptr %Arg_4.512, align 4, !invariant.load !269
  %subtract.14 = fsub float %region_0_53_constant_12, %Arg_4.513
  %multiply.15 = fmul float %multiply.11, %subtract.14
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %101, i32 0
  %Arg_3.414 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %multiply.20 = fmul float %multiply.15, %Arg_3.414
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %106, i32 0
  %Arg_2.315 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.216 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.21 = fmul float %Arg_2.315, %Arg_1.216
  %Arg_1.217 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.218 = load float, ptr %Arg_1.217, align 4, !invariant.load !269
  %subtract.22 = fsub float %region_0_53_constant_12, %Arg_1.218
  %multiply.23 = fmul float %multiply.21, %subtract.22
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %101, i32 0
  %Arg_0.119 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.28 = fmul float %multiply.23, %Arg_0.119
  %add.29 = fadd float %multiply.20, %multiply.28
  %109 = trunc i8 %108 to i1
  %110 = select i1 %109, float %add.29, float %region_0_53_constant_89
  store float %110, ptr %reduction_input_address, align 4
  %111 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_33(ptr %111, ptr %reduction_input_address, ptr %return_buffer)
  %112 = load float, ptr %return_buffer, align 4
  store float %112, ptr %111, align 4
  %113 = mul nuw nsw i32 %94, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %96, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %97, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %Arg_6.720 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.721 = load float, ptr %Arg_6.720, align 4, !invariant.load !269
  %Arg_5.622 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %119, i32 0
  %Arg_5.623 = load float, ptr %Arg_5.622, align 4, !invariant.load !269
  %Arg_4.524 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %119, i32 0
  %Arg_4.525 = load float, ptr %Arg_4.524, align 4, !invariant.load !269
  %multiply.1126 = fmul float %Arg_5.623, %Arg_4.525
  %region_0_53_constant_1227 = load float, ptr @25, align 4
  %Arg_4.528 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %119, i32 0
  %Arg_4.529 = load float, ptr %Arg_4.528, align 4, !invariant.load !269
  %subtract.1430 = fsub float %region_0_53_constant_1227, %Arg_4.529
  %multiply.1531 = fmul float %multiply.1126, %subtract.1430
  %multiply.38 = fmul float %Arg_6.721, %multiply.1531
  store float %multiply.38, ptr %reduction_input_address1, align 4
  %121 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_40(ptr %121, ptr %reduction_input_address1, ptr %return_buffer32)
  %122 = load float, ptr %return_buffer32, align 4
  store float %122, ptr %121, align 4
  %123 = mul nuw nsw i32 %94, 1
  %124 = add nuw nsw i32 0, %123
  %125 = udiv i32 %124, 128
  %126 = mul nuw nsw i32 %96, 1
  %127 = add nuw nsw i32 0, %126
  %128 = mul nuw nsw i32 %97, 128
  %129 = add nuw nsw i32 %127, %128
  %130 = udiv i32 %129, 8192
  %Arg_6.733 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.734 = load float, ptr %Arg_6.733, align 4, !invariant.load !269
  %Arg_2.335 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %129, i32 0
  %Arg_2.336 = load float, ptr %Arg_2.335, align 4, !invariant.load !269
  %Arg_1.237 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %129, i32 0
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !269
  %multiply.2139 = fmul float %Arg_2.336, %Arg_1.238
  %region_0_53_constant_1240 = load float, ptr @25, align 4
  %Arg_1.241 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %129, i32 0
  %Arg_1.242 = load float, ptr %Arg_1.241, align 4, !invariant.load !269
  %subtract.2243 = fsub float %region_0_53_constant_1240, %Arg_1.242
  %multiply.2344 = fmul float %multiply.2139, %subtract.2243
  %multiply.45 = fmul float %Arg_6.734, %multiply.2344
  store float %multiply.45, ptr %reduction_input_address3, align 4
  %131 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %99
  call void @region_3_47(ptr %131, ptr %reduction_input_address3, ptr %return_buffer45)
  %132 = load float, ptr %return_buffer45, align 4
  store float %132, ptr %131, align 4
  %133 = mul nuw nsw i32 %94, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 128
  %136 = mul nuw nsw i32 %96, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %97, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %Arg_6.746 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.747 = load float, ptr %Arg_6.746, align 4, !invariant.load !269
  %region_0_53_constant_848 = load float, ptr @24, align 4
  %compare.1049 = fcmp ogt float %Arg_6.747, %region_0_53_constant_848
  %141 = zext i1 %compare.1049 to i8
  %Arg_5.650 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %139, i32 0
  %Arg_5.651 = load float, ptr %Arg_5.650, align 4, !invariant.load !269
  %Arg_4.552 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.553 = load float, ptr %Arg_4.552, align 4, !invariant.load !269
  %multiply.1154 = fmul float %Arg_5.651, %Arg_4.553
  %region_0_53_constant_1255 = load float, ptr @25, align 4
  %Arg_4.556 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.557 = load float, ptr %Arg_4.556, align 4, !invariant.load !269
  %subtract.1458 = fsub float %region_0_53_constant_1255, %Arg_4.557
  %multiply.1559 = fmul float %multiply.1154, %subtract.1458
  %Arg_3.460 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %134, i32 0
  %Arg_3.461 = load float, ptr %Arg_3.460, align 4, !invariant.load !269
  %multiply.2062 = fmul float %multiply.1559, %Arg_3.461
  %Arg_2.363 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %139, i32 0
  %Arg_2.364 = load float, ptr %Arg_2.363, align 4, !invariant.load !269
  %Arg_1.265 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %139, i32 0
  %Arg_1.266 = load float, ptr %Arg_1.265, align 4, !invariant.load !269
  %multiply.2167 = fmul float %Arg_2.364, %Arg_1.266
  %Arg_1.268 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %139, i32 0
  %Arg_1.269 = load float, ptr %Arg_1.268, align 4, !invariant.load !269
  %subtract.2270 = fsub float %region_0_53_constant_1255, %Arg_1.269
  %multiply.2371 = fmul float %multiply.2167, %subtract.2270
  %Arg_0.172 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %134, i32 0
  %Arg_0.173 = load float, ptr %Arg_0.172, align 4, !invariant.load !269
  %multiply.2874 = fmul float %multiply.2371, %Arg_0.173
  %add.2975 = fadd float %multiply.2062, %multiply.2874
  %142 = trunc i8 %141 to i1
  %143 = select i1 %142, float %add.2975, float %region_0_53_constant_848
  %144 = mul nuw nsw i32 %94, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %96, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %97, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %152 = getelementptr inbounds float, ptr %arg8, i32 %92
  store float %143, ptr %152, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %153 = mul i32 %thread_id.y, 1
  %154 = add i32 %tile_origin.1, %thread_id.x
  %155 = add i32 %tile_origin.2, %153
  %156 = add i32 %155, 0
  %157 = mul i32 %tile_origin.0, 128
  %158 = add i32 %157, %156
  %159 = udiv i32 %158, 1
  %160 = urem i32 %159, 128
  %161 = udiv i32 %158, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg7, i32 0, i32 %161, i32 %160
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true108:                   ; preds = %reduction_write_output-after
  %162 = mul i32 %thread_id.y, 1
  %163 = add i32 %tile_origin.1, %thread_id.x
  %164 = add i32 %tile_origin.2, %162
  %165 = add i32 %164, 0
  %166 = mul i32 %tile_origin.0, 128
  %167 = add i32 %166, %165
  %168 = udiv i32 %167, 1
  %169 = urem i32 %168, 128
  %170 = udiv i32 %167, 128
  %output_element_address110 = getelementptr inbounds [64 x [128 x float]], ptr %arg9, i32 0, i32 %170, i32 %169
  %output111 = load float, ptr %51, align 4
  store float %output111, ptr %output_element_address110, align 4
  br label %reduction_write_output-after109

reduction_write_output-true130:                   ; preds = %reduction_write_output-after109
  %171 = mul i32 %thread_id.y, 1
  %172 = add i32 %tile_origin.1, %thread_id.x
  %173 = add i32 %tile_origin.2, %171
  %174 = add i32 %173, 0
  %175 = mul i32 %tile_origin.0, 128
  %176 = add i32 %175, %174
  %177 = udiv i32 %176, 1
  %178 = urem i32 %177, 128
  %179 = udiv i32 %176, 128
  %output_element_address132 = getelementptr inbounds [64 x [128 x float]], ptr %arg10, i32 0, i32 %179, i32 %178
  %output133 = load float, ptr %70, align 4
  store float %output133, ptr %output_element_address132, align 4
  br label %reduction_write_output-after131
}

define internal void @region_1_33(ptr dereferenceable(4) %Arg_0.34.typed, ptr dereferenceable(4) %Arg_1.35.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.36.typed = alloca float, align 4
  %Arg_0.34 = load float, ptr %Arg_0.34.typed, align 4
  %Arg_1.35 = load float, ptr %Arg_1.35.typed, align 4
  %add.36 = fadd float %Arg_0.34, %Arg_1.35
  store float %add.36, ptr %add.36.typed, align 4
  %load_ret_value = load float, ptr %add.36.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_40(ptr dereferenceable(4) %Arg_0.41.typed, ptr dereferenceable(4) %Arg_1.42.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.43.typed = alloca float, align 4
  %Arg_0.41 = load float, ptr %Arg_0.41.typed, align 4
  %Arg_1.42 = load float, ptr %Arg_1.42.typed, align 4
  %add.43 = fadd float %Arg_0.41, %Arg_1.42
  store float %add.43, ptr %add.43.typed, align 4
  %load_ret_value = load float, ptr %add.43.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_47(ptr dereferenceable(4) %Arg_0.48.typed, ptr dereferenceable(4) %Arg_1.49.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.50.typed = alloca float, align 4
  %Arg_0.48 = load float, ptr %Arg_0.48.typed, align 4
  %Arg_1.49 = load float, ptr %Arg_1.49.typed, align 4
  %add.50 = fadd float %Arg_0.48, %Arg_1.49
  store float %add.50, ptr %add.50.typed, align 4
  %load_ret_value = load float, ptr %add.50.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_321(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(4194304) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9) {
entry:
  %return_buffer96 = alloca float, align 4
  %result_from_other_lane94 = alloca float, align 4
  %return_buffer93 = alloca float, align 4
  %result_from_other_lane91 = alloca float, align 4
  %return_buffer90 = alloca float, align 4
  %result_from_other_lane88 = alloca float, align 4
  %return_buffer87 = alloca float, align 4
  %result_from_other_lane85 = alloca float, align 4
  %return_buffer84 = alloca float, align 4
  %result_from_other_lane82 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane66 = alloca float, align 4
  %return_buffer65 = alloca float, align 4
  %result_from_other_lane63 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %result_from_other_lane60 = alloca float, align 4
  %return_buffer56 = alloca float, align 4
  %result_from_other_lane54 = alloca float, align 4
  %return_buffer53 = alloca float, align 4
  %result_from_other_lane51 = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %result_from_other_lane48 = alloca float, align 4
  %return_buffer47 = alloca float, align 4
  %result_from_other_lane45 = alloca float, align 4
  %return_buffer44 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %return_buffer19 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after98, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_45_constant_24 = load float, ptr @28, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_45_constant_24, ptr %2, align 4
  %region_0_45_constant_7 = load float, ptr @27, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_45_constant_7, ptr %3, align 4
  %region_0_45_constant_75 = load float, ptr @27, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_45_constant_75, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound6 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc7 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc7, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound6
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !380

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !381

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result43 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result43, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane, ptr %return_buffer44)
  %34 = load float, ptr %return_buffer44, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result46 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result46, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane45, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane45, ptr %return_buffer47)
  %36 = load float, ptr %return_buffer47, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result49 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result49, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane48, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane48, ptr %return_buffer50)
  %38 = load float, ptr %return_buffer50, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result52 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result52, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane51, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane51, ptr %return_buffer53)
  %40 = load float, ptr %return_buffer53, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result55 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result55, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane54, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane54, ptr %return_buffer56)
  %42 = load float, ptr %return_buffer56, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound6
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address57 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address57 to ptr
  %current_output58 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output58, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr59 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr59 to ptr
  %partial_reduction_result61 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane60, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane60, ptr %return_buffer62)
  %53 = load float, ptr %return_buffer62, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result64 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result64, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane63, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane63, ptr %return_buffer65)
  %55 = load float, ptr %return_buffer65, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result67 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane66, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane66, ptr %return_buffer68)
  %57 = load float, ptr %return_buffer68, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result70 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane69, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane69, ptr %return_buffer71)
  %59 = load float, ptr %return_buffer71, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result73 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane72, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane72, ptr %return_buffer74)
  %61 = load float, ptr %return_buffer74, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound6
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true75, label %reduction_write_output-after76

reduction_write_output-after76:                   ; preds = %reduction_write_output-true75, %reduction_write_output-after
  %shmem_output_address79 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address79 to ptr
  %current_output80 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %69 = load float, ptr %current_output80, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr81 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr81 to ptr
  %partial_reduction_result83 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result83, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane82, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane82, ptr %return_buffer84)
  %72 = load float, ptr %return_buffer84, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result86 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result86, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane85, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane85, ptr %return_buffer87)
  %74 = load float, ptr %return_buffer87, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result89 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result89, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane88, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane88, ptr %return_buffer90)
  %76 = load float, ptr %return_buffer90, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result92 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result92, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane91, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane91, ptr %return_buffer93)
  %78 = load float, ptr %return_buffer93, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result95 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result95, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane94, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane94, ptr %return_buffer96)
  %80 = load float, ptr %return_buffer96, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound6
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true97, label %reduction_write_output-after98

reduction_write_output-after98:                   ; preds = %reduction_write_output-true97, %reduction_write_output-after76
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.68 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %region_0_45_constant_79 = load float, ptr @27, align 4
  %compare.9 = fcmp ogt float %Arg_5.68, %region_0_45_constant_79
  %108 = zext i1 %compare.9 to i8
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.510 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %101, i32 0
  %Arg_3.411 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %multiply.14 = fmul float %Arg_4.510, %Arg_3.411
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %106, i32 0
  %Arg_2.312 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %101, i32 0
  %Arg_1.213 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.19 = fmul float %Arg_2.312, %Arg_1.213
  %add.20 = fadd float %multiply.14, %multiply.19
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.114 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %add.21 = fadd float %add.20, %Arg_0.114
  %109 = trunc i8 %108 to i1
  %110 = select i1 %109, float %add.21, float %region_0_45_constant_79
  store float %110, ptr %reduction_input_address, align 4
  %111 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_25(ptr %111, ptr %reduction_input_address, ptr %return_buffer)
  %112 = load float, ptr %return_buffer, align 4
  store float %112, ptr %111, align 4
  %113 = mul nuw nsw i32 %94, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %96, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %97, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %Arg_5.615 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.616 = load float, ptr %Arg_5.615, align 4, !invariant.load !269
  %Arg_2.317 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %119, i32 0
  %Arg_2.318 = load float, ptr %Arg_2.317, align 4, !invariant.load !269
  %multiply.30 = fmul float %Arg_5.616, %Arg_2.318
  store float %multiply.30, ptr %reduction_input_address1, align 4
  %121 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_32(ptr %121, ptr %reduction_input_address1, ptr %return_buffer19)
  %122 = load float, ptr %return_buffer19, align 4
  store float %122, ptr %121, align 4
  %123 = mul nuw nsw i32 %94, 1
  %124 = add nuw nsw i32 0, %123
  %125 = udiv i32 %124, 128
  %126 = mul nuw nsw i32 %96, 1
  %127 = add nuw nsw i32 0, %126
  %128 = mul nuw nsw i32 %97, 128
  %129 = add nuw nsw i32 %127, %128
  %130 = udiv i32 %129, 8192
  %Arg_5.620 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.621 = load float, ptr %Arg_5.620, align 4, !invariant.load !269
  %Arg_4.522 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %129, i32 0
  %Arg_4.523 = load float, ptr %Arg_4.522, align 4, !invariant.load !269
  %multiply.37 = fmul float %Arg_5.621, %Arg_4.523
  store float %multiply.37, ptr %reduction_input_address3, align 4
  %131 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %99
  call void @region_3_39(ptr %131, ptr %reduction_input_address3, ptr %return_buffer24)
  %132 = load float, ptr %return_buffer24, align 4
  store float %132, ptr %131, align 4
  %133 = mul nuw nsw i32 %94, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 128
  %136 = mul nuw nsw i32 %96, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %97, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %Arg_5.625 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.626 = load float, ptr %Arg_5.625, align 4, !invariant.load !269
  %region_0_45_constant_727 = load float, ptr @27, align 4
  %compare.928 = fcmp ogt float %Arg_5.626, %region_0_45_constant_727
  %141 = zext i1 %compare.928 to i8
  %Arg_4.529 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.530 = load float, ptr %Arg_4.529, align 4, !invariant.load !269
  %Arg_3.431 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %134, i32 0
  %Arg_3.432 = load float, ptr %Arg_3.431, align 4, !invariant.load !269
  %multiply.1433 = fmul float %Arg_4.530, %Arg_3.432
  %Arg_2.334 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %139, i32 0
  %Arg_2.335 = load float, ptr %Arg_2.334, align 4, !invariant.load !269
  %Arg_1.236 = getelementptr inbounds [128 x [1 x float]], ptr %arg1, i32 0, i32 %134, i32 0
  %Arg_1.237 = load float, ptr %Arg_1.236, align 4, !invariant.load !269
  %multiply.1938 = fmul float %Arg_2.335, %Arg_1.237
  %add.2039 = fadd float %multiply.1433, %multiply.1938
  %Arg_0.140 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.141 = load float, ptr %Arg_0.140, align 4, !invariant.load !269
  %add.2142 = fadd float %add.2039, %Arg_0.141
  %142 = trunc i8 %141 to i1
  %143 = select i1 %142, float %add.2142, float %region_0_45_constant_727
  %144 = mul nuw nsw i32 %94, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %96, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %97, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %152 = getelementptr inbounds float, ptr %arg7, i32 %92
  store float %143, ptr %152, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %153 = mul i32 %thread_id.y, 1
  %154 = add i32 %tile_origin.1, %thread_id.x
  %155 = add i32 %tile_origin.2, %153
  %156 = add i32 %155, 0
  %157 = mul i32 %tile_origin.0, 128
  %158 = add i32 %157, %156
  %159 = udiv i32 %158, 1
  %160 = urem i32 %159, 128
  %161 = udiv i32 %158, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %161, i32 %160
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true75:                    ; preds = %reduction_write_output-after
  %162 = mul i32 %thread_id.y, 1
  %163 = add i32 %tile_origin.1, %thread_id.x
  %164 = add i32 %tile_origin.2, %162
  %165 = add i32 %164, 0
  %166 = mul i32 %tile_origin.0, 128
  %167 = add i32 %166, %165
  %168 = udiv i32 %167, 1
  %169 = urem i32 %168, 128
  %170 = udiv i32 %167, 128
  %output_element_address77 = getelementptr inbounds [64 x [128 x float]], ptr %arg8, i32 0, i32 %170, i32 %169
  %output78 = load float, ptr %51, align 4
  store float %output78, ptr %output_element_address77, align 4
  br label %reduction_write_output-after76

reduction_write_output-true97:                    ; preds = %reduction_write_output-after76
  %171 = mul i32 %thread_id.y, 1
  %172 = add i32 %tile_origin.1, %thread_id.x
  %173 = add i32 %tile_origin.2, %171
  %174 = add i32 %173, 0
  %175 = mul i32 %tile_origin.0, 128
  %176 = add i32 %175, %174
  %177 = udiv i32 %176, 1
  %178 = urem i32 %177, 128
  %179 = udiv i32 %176, 128
  %output_element_address99 = getelementptr inbounds [64 x [128 x float]], ptr %arg9, i32 0, i32 %179, i32 %178
  %output100 = load float, ptr %70, align 4
  store float %output100, ptr %output_element_address99, align 4
  br label %reduction_write_output-after98
}

define internal void @region_1_25(ptr dereferenceable(4) %Arg_0.26.typed, ptr dereferenceable(4) %Arg_1.27.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.28.typed = alloca float, align 4
  %Arg_0.26 = load float, ptr %Arg_0.26.typed, align 4
  %Arg_1.27 = load float, ptr %Arg_1.27.typed, align 4
  %add.28 = fadd float %Arg_0.26, %Arg_1.27
  store float %add.28, ptr %add.28.typed, align 4
  %load_ret_value = load float, ptr %add.28.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_32(ptr dereferenceable(4) %Arg_0.33.typed, ptr dereferenceable(4) %Arg_1.34.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.35.typed = alloca float, align 4
  %Arg_0.33 = load float, ptr %Arg_0.33.typed, align 4
  %Arg_1.34 = load float, ptr %Arg_1.34.typed, align 4
  %add.35 = fadd float %Arg_0.33, %Arg_1.34
  store float %add.35, ptr %add.35.typed, align 4
  %load_ret_value = load float, ptr %add.35.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_39(ptr dereferenceable(4) %Arg_0.40.typed, ptr dereferenceable(4) %Arg_1.41.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.42.typed = alloca float, align 4
  %Arg_0.40 = load float, ptr %Arg_0.40.typed, align 4
  %Arg_1.41 = load float, ptr %Arg_1.41.typed, align 4
  %add.42 = fadd float %Arg_0.40, %Arg_1.41
  store float %add.42, ptr %add.42.typed, align 4
  %load_ret_value = load float, ptr %add.42.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_309(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 16 dereferenceable(32768) %arg14, ptr noalias align 16 dereferenceable(4194304) %arg15, ptr noalias align 16 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(32768) %arg17, ptr noalias align 16 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 16 dereferenceable(32768) %arg20, ptr noalias align 16 dereferenceable(4194304) %arg21, ptr noalias align 128 dereferenceable(32768) %arg22, ptr noalias align 128 dereferenceable(4194304) %arg23, ptr noalias align 128 dereferenceable(32768) %arg24, ptr noalias align 128 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(32768) %arg26, ptr noalias align 128 dereferenceable(32768) %arg27) {
entry:
  %return_buffer289 = alloca float, align 4
  %result_from_other_lane287 = alloca float, align 4
  %return_buffer286 = alloca float, align 4
  %result_from_other_lane284 = alloca float, align 4
  %return_buffer283 = alloca float, align 4
  %result_from_other_lane281 = alloca float, align 4
  %return_buffer280 = alloca float, align 4
  %result_from_other_lane278 = alloca float, align 4
  %return_buffer277 = alloca float, align 4
  %result_from_other_lane275 = alloca float, align 4
  %return_buffer267 = alloca float, align 4
  %result_from_other_lane265 = alloca float, align 4
  %return_buffer264 = alloca float, align 4
  %result_from_other_lane262 = alloca float, align 4
  %return_buffer261 = alloca float, align 4
  %result_from_other_lane259 = alloca float, align 4
  %return_buffer258 = alloca float, align 4
  %result_from_other_lane256 = alloca float, align 4
  %return_buffer255 = alloca float, align 4
  %result_from_other_lane253 = alloca float, align 4
  %return_buffer245 = alloca float, align 4
  %result_from_other_lane243 = alloca float, align 4
  %return_buffer242 = alloca float, align 4
  %result_from_other_lane240 = alloca float, align 4
  %return_buffer239 = alloca float, align 4
  %result_from_other_lane237 = alloca float, align 4
  %return_buffer236 = alloca float, align 4
  %result_from_other_lane234 = alloca float, align 4
  %return_buffer233 = alloca float, align 4
  %result_from_other_lane231 = alloca float, align 4
  %return_buffer223 = alloca float, align 4
  %result_from_other_lane221 = alloca float, align 4
  %return_buffer220 = alloca float, align 4
  %result_from_other_lane218 = alloca float, align 4
  %return_buffer217 = alloca float, align 4
  %result_from_other_lane215 = alloca float, align 4
  %return_buffer214 = alloca float, align 4
  %result_from_other_lane212 = alloca float, align 4
  %return_buffer211 = alloca float, align 4
  %result_from_other_lane209 = alloca float, align 4
  %return_buffer205 = alloca float, align 4
  %result_from_other_lane203 = alloca float, align 4
  %return_buffer202 = alloca float, align 4
  %result_from_other_lane200 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer100 = alloca float, align 4
  %return_buffer87 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result10 = alloca float, align 4
  %reduction_input_address9 = alloca float, align 4
  %partial_reduction_result7 = alloca float, align 4
  %reduction_input_address6 = alloca float, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after291, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_125_constant_90 = load float, ptr @31, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_125_constant_90, ptr %2, align 4
  %region_0_125_constant_23 = load float, ptr @29, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_125_constant_23, ptr %3, align 4
  %region_0_125_constant_235 = load float, ptr @29, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_125_constant_235, ptr %4, align 4
  %region_0_125_constant_238 = load float, ptr @29, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  store float %region_0_125_constant_238, ptr %5, align 4
  %region_0_125_constant_2311 = load float, ptr @29, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 0
  store float %region_0_125_constant_2311, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %9 = urem i32 %7, 1024
  %10 = udiv i32 %7, 1024
  %11 = mul i32 %8, 1
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 256
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 4
  %17 = udiv i32 %12, 4
  %18 = urem i32 %17, 1
  %19 = udiv i32 %12, 4
  %20 = icmp eq i32 %18, 0
  %tile_bound = select i1 %20, i32 128, i32 4096
  %21 = icmp eq i32 %16, 3
  %tile_bound12 = select i1 %21, i32 32, i32 32
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 4096
  %tile_origin.2 = mul i32 %16, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %25 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %25, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc13 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc13, ptr %tile_loop.invar_address, align 4
  %26 = icmp eq i32 %tile_loop.indvar, 0
  %27 = mul i32 %tile_loop.indvar, 1
  %28 = add i32 %27, 0
  %x_loc = add i32 %28, %24
  %29 = add i32 %tile_origin.1, %y_in_tile.indvar
  %30 = add i32 %tile_origin.2, %x_loc
  %31 = icmp ult i32 %x_loc, %tile_bound12
  br i1 %31, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !382

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !383

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %32 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %33 = load float, ptr %current_output, align 4
  store float %33, ptr %32, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %34 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result192 = load float, ptr %34, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 16, i32 31)
  store float %35, ptr %result_from_other_lane, align 4
  call void @region_1_91(ptr %34, ptr %result_from_other_lane, ptr %return_buffer193)
  %36 = load float, ptr %return_buffer193, align 4
  store float %36, ptr %34, align 4
  %partial_reduction_result195 = load float, ptr %34, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 8, i32 31)
  store float %37, ptr %result_from_other_lane194, align 4
  call void @region_1_91(ptr %34, ptr %result_from_other_lane194, ptr %return_buffer196)
  %38 = load float, ptr %return_buffer196, align 4
  store float %38, ptr %34, align 4
  %partial_reduction_result198 = load float, ptr %34, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 4, i32 31)
  store float %39, ptr %result_from_other_lane197, align 4
  call void @region_1_91(ptr %34, ptr %result_from_other_lane197, ptr %return_buffer199)
  %40 = load float, ptr %return_buffer199, align 4
  store float %40, ptr %34, align 4
  %partial_reduction_result201 = load float, ptr %34, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result201, i32 2, i32 31)
  store float %41, ptr %result_from_other_lane200, align 4
  call void @region_1_91(ptr %34, ptr %result_from_other_lane200, ptr %return_buffer202)
  %42 = load float, ptr %return_buffer202, align 4
  store float %42, ptr %34, align 4
  %partial_reduction_result204 = load float, ptr %34, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result204, i32 1, i32 31)
  store float %43, ptr %result_from_other_lane203, align 4
  call void @region_1_91(ptr %34, ptr %result_from_other_lane203, ptr %return_buffer205)
  %44 = load float, ptr %return_buffer205, align 4
  store float %44, ptr %34, align 4
  %45 = icmp ult i32 %thread_id.x, %tile_bound
  %46 = mul i32 %thread_id.y, 1
  %47 = icmp ult i32 %46, %tile_bound12
  %48 = and i1 %47, %45
  %49 = icmp eq i32 %lane_id, 0
  %50 = and i1 %48, %49
  br i1 %50, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address206 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %51 = addrspacecast ptr addrspace(3) %shmem_output_address206 to ptr
  %current_output207 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %52 = load float, ptr %current_output207, align 4
  store float %52, ptr %51, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr208 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %53 = addrspacecast ptr addrspace(3) %shmem_transposed_addr208 to ptr
  %partial_reduction_result210 = load float, ptr %53, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result210, i32 16, i32 31)
  store float %54, ptr %result_from_other_lane209, align 4
  call void @region_2_98(ptr %53, ptr %result_from_other_lane209, ptr %return_buffer211)
  %55 = load float, ptr %return_buffer211, align 4
  store float %55, ptr %53, align 4
  %partial_reduction_result213 = load float, ptr %53, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result213, i32 8, i32 31)
  store float %56, ptr %result_from_other_lane212, align 4
  call void @region_2_98(ptr %53, ptr %result_from_other_lane212, ptr %return_buffer214)
  %57 = load float, ptr %return_buffer214, align 4
  store float %57, ptr %53, align 4
  %partial_reduction_result216 = load float, ptr %53, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result216, i32 4, i32 31)
  store float %58, ptr %result_from_other_lane215, align 4
  call void @region_2_98(ptr %53, ptr %result_from_other_lane215, ptr %return_buffer217)
  %59 = load float, ptr %return_buffer217, align 4
  store float %59, ptr %53, align 4
  %partial_reduction_result219 = load float, ptr %53, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result219, i32 2, i32 31)
  store float %60, ptr %result_from_other_lane218, align 4
  call void @region_2_98(ptr %53, ptr %result_from_other_lane218, ptr %return_buffer220)
  %61 = load float, ptr %return_buffer220, align 4
  store float %61, ptr %53, align 4
  %partial_reduction_result222 = load float, ptr %53, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result222, i32 1, i32 31)
  store float %62, ptr %result_from_other_lane221, align 4
  call void @region_2_98(ptr %53, ptr %result_from_other_lane221, ptr %return_buffer223)
  %63 = load float, ptr %return_buffer223, align 4
  store float %63, ptr %53, align 4
  %64 = icmp ult i32 %thread_id.x, %tile_bound
  %65 = mul i32 %thread_id.y, 1
  %66 = icmp ult i32 %65, %tile_bound12
  %67 = and i1 %66, %64
  %68 = icmp eq i32 %lane_id, 0
  %69 = and i1 %67, %68
  br i1 %69, label %reduction_write_output-true224, label %reduction_write_output-after225

reduction_write_output-after225:                  ; preds = %reduction_write_output-true224, %reduction_write_output-after
  %shmem_output_address228 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %70 = addrspacecast ptr addrspace(3) %shmem_output_address228 to ptr
  %current_output229 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %71 = load float, ptr %current_output229, align 4
  store float %71, ptr %70, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr230 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %72 = addrspacecast ptr addrspace(3) %shmem_transposed_addr230 to ptr
  %partial_reduction_result232 = load float, ptr %72, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result232, i32 16, i32 31)
  store float %73, ptr %result_from_other_lane231, align 4
  call void @region_3_105(ptr %72, ptr %result_from_other_lane231, ptr %return_buffer233)
  %74 = load float, ptr %return_buffer233, align 4
  store float %74, ptr %72, align 4
  %partial_reduction_result235 = load float, ptr %72, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result235, i32 8, i32 31)
  store float %75, ptr %result_from_other_lane234, align 4
  call void @region_3_105(ptr %72, ptr %result_from_other_lane234, ptr %return_buffer236)
  %76 = load float, ptr %return_buffer236, align 4
  store float %76, ptr %72, align 4
  %partial_reduction_result238 = load float, ptr %72, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result238, i32 4, i32 31)
  store float %77, ptr %result_from_other_lane237, align 4
  call void @region_3_105(ptr %72, ptr %result_from_other_lane237, ptr %return_buffer239)
  %78 = load float, ptr %return_buffer239, align 4
  store float %78, ptr %72, align 4
  %partial_reduction_result241 = load float, ptr %72, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result241, i32 2, i32 31)
  store float %79, ptr %result_from_other_lane240, align 4
  call void @region_3_105(ptr %72, ptr %result_from_other_lane240, ptr %return_buffer242)
  %80 = load float, ptr %return_buffer242, align 4
  store float %80, ptr %72, align 4
  %partial_reduction_result244 = load float, ptr %72, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result244, i32 1, i32 31)
  store float %81, ptr %result_from_other_lane243, align 4
  call void @region_3_105(ptr %72, ptr %result_from_other_lane243, ptr %return_buffer245)
  %82 = load float, ptr %return_buffer245, align 4
  store float %82, ptr %72, align 4
  %83 = icmp ult i32 %thread_id.x, %tile_bound
  %84 = mul i32 %thread_id.y, 1
  %85 = icmp ult i32 %84, %tile_bound12
  %86 = and i1 %85, %83
  %87 = icmp eq i32 %lane_id, 0
  %88 = and i1 %86, %87
  br i1 %88, label %reduction_write_output-true246, label %reduction_write_output-after247

reduction_write_output-after247:                  ; preds = %reduction_write_output-true246, %reduction_write_output-after225
  %shmem_output_address250 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %89 = addrspacecast ptr addrspace(3) %shmem_output_address250 to ptr
  %current_output251 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  %90 = load float, ptr %current_output251, align 4
  store float %90, ptr %89, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr252 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %91 = addrspacecast ptr addrspace(3) %shmem_transposed_addr252 to ptr
  %partial_reduction_result254 = load float, ptr %91, align 4
  %92 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result254, i32 16, i32 31)
  store float %92, ptr %result_from_other_lane253, align 4
  call void @region_4_112(ptr %91, ptr %result_from_other_lane253, ptr %return_buffer255)
  %93 = load float, ptr %return_buffer255, align 4
  store float %93, ptr %91, align 4
  %partial_reduction_result257 = load float, ptr %91, align 4
  %94 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result257, i32 8, i32 31)
  store float %94, ptr %result_from_other_lane256, align 4
  call void @region_4_112(ptr %91, ptr %result_from_other_lane256, ptr %return_buffer258)
  %95 = load float, ptr %return_buffer258, align 4
  store float %95, ptr %91, align 4
  %partial_reduction_result260 = load float, ptr %91, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result260, i32 4, i32 31)
  store float %96, ptr %result_from_other_lane259, align 4
  call void @region_4_112(ptr %91, ptr %result_from_other_lane259, ptr %return_buffer261)
  %97 = load float, ptr %return_buffer261, align 4
  store float %97, ptr %91, align 4
  %partial_reduction_result263 = load float, ptr %91, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result263, i32 2, i32 31)
  store float %98, ptr %result_from_other_lane262, align 4
  call void @region_4_112(ptr %91, ptr %result_from_other_lane262, ptr %return_buffer264)
  %99 = load float, ptr %return_buffer264, align 4
  store float %99, ptr %91, align 4
  %partial_reduction_result266 = load float, ptr %91, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result266, i32 1, i32 31)
  store float %100, ptr %result_from_other_lane265, align 4
  call void @region_4_112(ptr %91, ptr %result_from_other_lane265, ptr %return_buffer267)
  %101 = load float, ptr %return_buffer267, align 4
  store float %101, ptr %91, align 4
  %102 = icmp ult i32 %thread_id.x, %tile_bound
  %103 = mul i32 %thread_id.y, 1
  %104 = icmp ult i32 %103, %tile_bound12
  %105 = and i1 %104, %102
  %106 = icmp eq i32 %lane_id, 0
  %107 = and i1 %105, %106
  br i1 %107, label %reduction_write_output-true268, label %reduction_write_output-after269

reduction_write_output-after269:                  ; preds = %reduction_write_output-true268, %reduction_write_output-after247
  %shmem_output_address272 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %108 = addrspacecast ptr addrspace(3) %shmem_output_address272 to ptr
  %current_output273 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 0
  %109 = load float, ptr %current_output273, align 4
  store float %109, ptr %108, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr274 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %110 = addrspacecast ptr addrspace(3) %shmem_transposed_addr274 to ptr
  %partial_reduction_result276 = load float, ptr %110, align 4
  %111 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result276, i32 16, i32 31)
  store float %111, ptr %result_from_other_lane275, align 4
  call void @region_5_119(ptr %110, ptr %result_from_other_lane275, ptr %return_buffer277)
  %112 = load float, ptr %return_buffer277, align 4
  store float %112, ptr %110, align 4
  %partial_reduction_result279 = load float, ptr %110, align 4
  %113 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result279, i32 8, i32 31)
  store float %113, ptr %result_from_other_lane278, align 4
  call void @region_5_119(ptr %110, ptr %result_from_other_lane278, ptr %return_buffer280)
  %114 = load float, ptr %return_buffer280, align 4
  store float %114, ptr %110, align 4
  %partial_reduction_result282 = load float, ptr %110, align 4
  %115 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result282, i32 4, i32 31)
  store float %115, ptr %result_from_other_lane281, align 4
  call void @region_5_119(ptr %110, ptr %result_from_other_lane281, ptr %return_buffer283)
  %116 = load float, ptr %return_buffer283, align 4
  store float %116, ptr %110, align 4
  %partial_reduction_result285 = load float, ptr %110, align 4
  %117 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result285, i32 2, i32 31)
  store float %117, ptr %result_from_other_lane284, align 4
  call void @region_5_119(ptr %110, ptr %result_from_other_lane284, ptr %return_buffer286)
  %118 = load float, ptr %return_buffer286, align 4
  store float %118, ptr %110, align 4
  %partial_reduction_result288 = load float, ptr %110, align 4
  %119 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result288, i32 1, i32 31)
  store float %119, ptr %result_from_other_lane287, align 4
  call void @region_5_119(ptr %110, ptr %result_from_other_lane287, ptr %return_buffer289)
  %120 = load float, ptr %return_buffer289, align 4
  store float %120, ptr %110, align 4
  %121 = icmp ult i32 %thread_id.x, %tile_bound
  %122 = mul i32 %thread_id.y, 1
  %123 = icmp ult i32 %122, %tile_bound12
  %124 = and i1 %123, %121
  %125 = icmp eq i32 %lane_id, 0
  %126 = and i1 %124, %125
  br i1 %126, label %reduction_write_output-true290, label %reduction_write_output-after291

reduction_write_output-after291:                  ; preds = %reduction_write_output-true290, %reduction_write_output-after269
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %127 = mul nuw nsw i32 %30, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %29, 128
  %130 = add nuw nsw i32 %128, %129
  %131 = mul nuw nsw i32 %tile_origin.0, 16384
  %132 = add nuw nsw i32 %130, %131
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = urem i32 %135, 128
  %137 = udiv i32 %132, 16384
  %138 = mul i32 %thread_id.x, 1
  %139 = sub i32 %x_loc, %138
  %140 = mul nuw nsw i32 %134, 1
  %141 = add nuw nsw i32 0, %140
  %142 = udiv i32 %141, 128
  %143 = mul nuw nsw i32 %136, 1
  %144 = add nuw nsw i32 0, %143
  %145 = mul nuw nsw i32 %137, 128
  %146 = add nuw nsw i32 %144, %145
  %147 = udiv i32 %146, 8192
  %Arg_21.22 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.2214 = load float, ptr %Arg_21.22, align 4, !invariant.load !269
  %region_0_125_constant_2315 = load float, ptr @29, align 4
  %compare.25 = fcmp ogt float %Arg_21.2214, %region_0_125_constant_2315
  %148 = zext i1 %compare.25 to i8
  %Arg_20.21 = getelementptr inbounds [8192 x [1 x float]], ptr %arg20, i32 0, i32 %146, i32 0
  %Arg_20.2116 = load float, ptr %Arg_20.21, align 4, !invariant.load !269
  %Arg_19.20 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %146, i32 0
  %Arg_19.2017 = load float, ptr %Arg_19.20, align 4, !invariant.load !269
  %multiply.26 = fmul float %Arg_20.2116, %Arg_19.2017
  %region_0_125_constant_27 = load float, ptr @30, align 4
  %Arg_19.2018 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %146, i32 0
  %Arg_19.2019 = load float, ptr %Arg_19.2018, align 4, !invariant.load !269
  %subtract.29 = fsub float %region_0_125_constant_27, %Arg_19.2019
  %multiply.30 = fmul float %multiply.26, %subtract.29
  %Arg_18.19 = getelementptr inbounds [128 x [1 x float]], ptr %arg18, i32 0, i32 %141, i32 0
  %Arg_18.1920 = load float, ptr %Arg_18.19, align 4, !invariant.load !269
  %multiply.35 = fmul float %multiply.30, %Arg_18.1920
  %Arg_17.18 = getelementptr inbounds [8192 x [1 x float]], ptr %arg17, i32 0, i32 %146, i32 0
  %Arg_17.1821 = load float, ptr %Arg_17.18, align 4, !invariant.load !269
  %Arg_16.17 = getelementptr inbounds [128 x [1 x float]], ptr %arg16, i32 0, i32 %141, i32 0
  %Arg_16.1722 = load float, ptr %Arg_16.17, align 4, !invariant.load !269
  %multiply.40 = fmul float %Arg_17.1821, %Arg_16.1722
  %add.41 = fadd float %multiply.35, %multiply.40
  %Arg_15.16 = getelementptr inbounds float, ptr %arg15, i32 %132
  %Arg_15.1623 = load float, ptr %Arg_15.16, align 4, !invariant.load !269
  %add.42 = fadd float %add.41, %Arg_15.1623
  %Arg_14.15 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %146, i32 0
  %Arg_14.1524 = load float, ptr %Arg_14.15, align 4, !invariant.load !269
  %Arg_13.14 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %146, i32 0
  %Arg_13.1425 = load float, ptr %Arg_13.14, align 4, !invariant.load !269
  %multiply.43 = fmul float %Arg_14.1524, %Arg_13.1425
  %Arg_13.1426 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %146, i32 0
  %Arg_13.1427 = load float, ptr %Arg_13.1426, align 4, !invariant.load !269
  %subtract.44 = fsub float %region_0_125_constant_27, %Arg_13.1427
  %multiply.45 = fmul float %multiply.43, %subtract.44
  %Arg_12.13 = getelementptr inbounds [128 x [1 x float]], ptr %arg12, i32 0, i32 %141, i32 0
  %Arg_12.1328 = load float, ptr %Arg_12.13, align 4, !invariant.load !269
  %multiply.50 = fmul float %multiply.45, %Arg_12.1328
  %add.51 = fadd float %add.42, %multiply.50
  %Arg_11.12 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %146, i32 0
  %Arg_11.1229 = load float, ptr %Arg_11.12, align 4, !invariant.load !269
  %Arg_10.11 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %146, i32 0
  %Arg_10.1130 = load float, ptr %Arg_10.11, align 4, !invariant.load !269
  %multiply.52 = fmul float %Arg_11.1229, %Arg_10.1130
  %Arg_10.1131 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %146, i32 0
  %Arg_10.1132 = load float, ptr %Arg_10.1131, align 4, !invariant.load !269
  %subtract.53 = fsub float %region_0_125_constant_27, %Arg_10.1132
  %multiply.54 = fmul float %multiply.52, %subtract.53
  %Arg_9.10 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %141, i32 0
  %Arg_9.1033 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  %multiply.59 = fmul float %multiply.54, %Arg_9.1033
  %add.60 = fadd float %add.51, %multiply.59
  %Arg_8.9 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %146, i32 0
  %Arg_8.934 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  %Arg_7.8 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %146, i32 0
  %Arg_7.835 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  %multiply.61 = fmul float %Arg_8.934, %Arg_7.835
  %Arg_7.836 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %146, i32 0
  %Arg_7.837 = load float, ptr %Arg_7.836, align 4, !invariant.load !269
  %subtract.62 = fsub float %region_0_125_constant_27, %Arg_7.837
  %multiply.63 = fmul float %multiply.61, %subtract.62
  %Arg_6.7 = getelementptr inbounds [128 x [1 x float]], ptr %arg6, i32 0, i32 %141, i32 0
  %Arg_6.738 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %multiply.68 = fmul float %multiply.63, %Arg_6.738
  %add.69 = fadd float %add.60, %multiply.68
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %146, i32 0
  %Arg_5.639 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %146, i32 0
  %Arg_4.540 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.70 = fmul float %Arg_5.639, %Arg_4.540
  %Arg_4.541 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %146, i32 0
  %Arg_4.542 = load float, ptr %Arg_4.541, align 4, !invariant.load !269
  %subtract.71 = fsub float %region_0_125_constant_27, %Arg_4.542
  %multiply.72 = fmul float %multiply.70, %subtract.71
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %141, i32 0
  %Arg_3.443 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %multiply.77 = fmul float %multiply.72, %Arg_3.443
  %add.78 = fadd float %add.69, %multiply.77
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %146, i32 0
  %Arg_2.344 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %146, i32 0
  %Arg_1.245 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.79 = fmul float %Arg_2.344, %Arg_1.245
  %Arg_1.246 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %146, i32 0
  %Arg_1.247 = load float, ptr %Arg_1.246, align 4, !invariant.load !269
  %subtract.80 = fsub float %region_0_125_constant_27, %Arg_1.247
  %multiply.81 = fmul float %multiply.79, %subtract.80
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %141, i32 0
  %Arg_0.148 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.86 = fmul float %multiply.81, %Arg_0.148
  %add.87 = fadd float %add.78, %multiply.86
  %149 = trunc i8 %148 to i1
  %150 = select i1 %149, float %add.87, float %region_0_125_constant_2315
  store float %150, ptr %reduction_input_address, align 4
  %151 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %139
  call void @region_1_91(ptr %151, ptr %reduction_input_address, ptr %return_buffer)
  %152 = load float, ptr %return_buffer, align 4
  store float %152, ptr %151, align 4
  %153 = mul nuw nsw i32 %134, 1
  %154 = add nuw nsw i32 0, %153
  %155 = udiv i32 %154, 128
  %156 = mul nuw nsw i32 %136, 1
  %157 = add nuw nsw i32 0, %156
  %158 = mul nuw nsw i32 %137, 128
  %159 = add nuw nsw i32 %157, %158
  %160 = udiv i32 %159, 8192
  %Arg_21.2249 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.2250 = load float, ptr %Arg_21.2249, align 4, !invariant.load !269
  %Arg_20.2151 = getelementptr inbounds [8192 x [1 x float]], ptr %arg20, i32 0, i32 %159, i32 0
  %Arg_20.2152 = load float, ptr %Arg_20.2151, align 4, !invariant.load !269
  %Arg_19.2053 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %159, i32 0
  %Arg_19.2054 = load float, ptr %Arg_19.2053, align 4, !invariant.load !269
  %multiply.2655 = fmul float %Arg_20.2152, %Arg_19.2054
  %region_0_125_constant_2756 = load float, ptr @30, align 4
  %Arg_19.2057 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %159, i32 0
  %Arg_19.2058 = load float, ptr %Arg_19.2057, align 4, !invariant.load !269
  %subtract.2959 = fsub float %region_0_125_constant_2756, %Arg_19.2058
  %multiply.3060 = fmul float %multiply.2655, %subtract.2959
  %multiply.96 = fmul float %Arg_21.2250, %multiply.3060
  store float %multiply.96, ptr %reduction_input_address1, align 4
  %161 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %139
  call void @region_2_98(ptr %161, ptr %reduction_input_address1, ptr %return_buffer61)
  %162 = load float, ptr %return_buffer61, align 4
  store float %162, ptr %161, align 4
  %163 = mul nuw nsw i32 %134, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %136, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %137, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %Arg_21.2262 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.2263 = load float, ptr %Arg_21.2262, align 4, !invariant.load !269
  %Arg_14.1564 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %169, i32 0
  %Arg_14.1565 = load float, ptr %Arg_14.1564, align 4, !invariant.load !269
  %Arg_13.1466 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %169, i32 0
  %Arg_13.1467 = load float, ptr %Arg_13.1466, align 4, !invariant.load !269
  %multiply.4368 = fmul float %Arg_14.1565, %Arg_13.1467
  %region_0_125_constant_2769 = load float, ptr @30, align 4
  %Arg_13.1470 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %169, i32 0
  %Arg_13.1471 = load float, ptr %Arg_13.1470, align 4, !invariant.load !269
  %subtract.4472 = fsub float %region_0_125_constant_2769, %Arg_13.1471
  %multiply.4573 = fmul float %multiply.4368, %subtract.4472
  %multiply.103 = fmul float %Arg_21.2263, %multiply.4573
  store float %multiply.103, ptr %reduction_input_address3, align 4
  %171 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %139
  call void @region_3_105(ptr %171, ptr %reduction_input_address3, ptr %return_buffer74)
  %172 = load float, ptr %return_buffer74, align 4
  store float %172, ptr %171, align 4
  %173 = mul nuw nsw i32 %134, 1
  %174 = add nuw nsw i32 0, %173
  %175 = udiv i32 %174, 128
  %176 = mul nuw nsw i32 %136, 1
  %177 = add nuw nsw i32 0, %176
  %178 = mul nuw nsw i32 %137, 128
  %179 = add nuw nsw i32 %177, %178
  %180 = udiv i32 %179, 8192
  %Arg_21.2275 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.2276 = load float, ptr %Arg_21.2275, align 4, !invariant.load !269
  %Arg_11.1277 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %179, i32 0
  %Arg_11.1278 = load float, ptr %Arg_11.1277, align 4, !invariant.load !269
  %Arg_10.1179 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %179, i32 0
  %Arg_10.1180 = load float, ptr %Arg_10.1179, align 4, !invariant.load !269
  %multiply.5281 = fmul float %Arg_11.1278, %Arg_10.1180
  %region_0_125_constant_2782 = load float, ptr @30, align 4
  %Arg_10.1183 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %179, i32 0
  %Arg_10.1184 = load float, ptr %Arg_10.1183, align 4, !invariant.load !269
  %subtract.5385 = fsub float %region_0_125_constant_2782, %Arg_10.1184
  %multiply.5486 = fmul float %multiply.5281, %subtract.5385
  %multiply.110 = fmul float %Arg_21.2276, %multiply.5486
  store float %multiply.110, ptr %reduction_input_address6, align 4
  %181 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 %139
  call void @region_4_112(ptr %181, ptr %reduction_input_address6, ptr %return_buffer87)
  %182 = load float, ptr %return_buffer87, align 4
  store float %182, ptr %181, align 4
  %183 = mul nuw nsw i32 %134, 1
  %184 = add nuw nsw i32 0, %183
  %185 = udiv i32 %184, 128
  %186 = mul nuw nsw i32 %136, 1
  %187 = add nuw nsw i32 0, %186
  %188 = mul nuw nsw i32 %137, 128
  %189 = add nuw nsw i32 %187, %188
  %190 = udiv i32 %189, 8192
  %Arg_21.2288 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.2289 = load float, ptr %Arg_21.2288, align 4, !invariant.load !269
  %Arg_8.990 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %189, i32 0
  %Arg_8.991 = load float, ptr %Arg_8.990, align 4, !invariant.load !269
  %Arg_7.892 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %189, i32 0
  %Arg_7.893 = load float, ptr %Arg_7.892, align 4, !invariant.load !269
  %multiply.6194 = fmul float %Arg_8.991, %Arg_7.893
  %region_0_125_constant_2795 = load float, ptr @30, align 4
  %Arg_7.896 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %189, i32 0
  %Arg_7.897 = load float, ptr %Arg_7.896, align 4, !invariant.load !269
  %subtract.6298 = fsub float %region_0_125_constant_2795, %Arg_7.897
  %multiply.6399 = fmul float %multiply.6194, %subtract.6298
  %multiply.117 = fmul float %Arg_21.2289, %multiply.6399
  store float %multiply.117, ptr %reduction_input_address9, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 %139
  call void @region_5_119(ptr %191, ptr %reduction_input_address9, ptr %return_buffer100)
  %192 = load float, ptr %return_buffer100, align 4
  store float %192, ptr %191, align 4
  %193 = mul nuw nsw i32 %134, 1
  %194 = add nuw nsw i32 0, %193
  %195 = udiv i32 %194, 128
  %196 = mul nuw nsw i32 %136, 1
  %197 = add nuw nsw i32 0, %196
  %198 = mul nuw nsw i32 %137, 128
  %199 = add nuw nsw i32 %197, %198
  %200 = udiv i32 %199, 8192
  %Arg_21.22101 = getelementptr inbounds float, ptr %arg21, i32 %132
  %Arg_21.22102 = load float, ptr %Arg_21.22101, align 4, !invariant.load !269
  %region_0_125_constant_23103 = load float, ptr @29, align 4
  %compare.25104 = fcmp ogt float %Arg_21.22102, %region_0_125_constant_23103
  %201 = zext i1 %compare.25104 to i8
  %Arg_20.21105 = getelementptr inbounds [8192 x [1 x float]], ptr %arg20, i32 0, i32 %199, i32 0
  %Arg_20.21106 = load float, ptr %Arg_20.21105, align 4, !invariant.load !269
  %Arg_19.20107 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %199, i32 0
  %Arg_19.20108 = load float, ptr %Arg_19.20107, align 4, !invariant.load !269
  %multiply.26109 = fmul float %Arg_20.21106, %Arg_19.20108
  %region_0_125_constant_27110 = load float, ptr @30, align 4
  %Arg_19.20111 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %199, i32 0
  %Arg_19.20112 = load float, ptr %Arg_19.20111, align 4, !invariant.load !269
  %subtract.29113 = fsub float %region_0_125_constant_27110, %Arg_19.20112
  %multiply.30114 = fmul float %multiply.26109, %subtract.29113
  %Arg_18.19115 = getelementptr inbounds [128 x [1 x float]], ptr %arg18, i32 0, i32 %194, i32 0
  %Arg_18.19116 = load float, ptr %Arg_18.19115, align 4, !invariant.load !269
  %multiply.35117 = fmul float %multiply.30114, %Arg_18.19116
  %Arg_17.18118 = getelementptr inbounds [8192 x [1 x float]], ptr %arg17, i32 0, i32 %199, i32 0
  %Arg_17.18119 = load float, ptr %Arg_17.18118, align 4, !invariant.load !269
  %Arg_16.17120 = getelementptr inbounds [128 x [1 x float]], ptr %arg16, i32 0, i32 %194, i32 0
  %Arg_16.17121 = load float, ptr %Arg_16.17120, align 4, !invariant.load !269
  %multiply.40122 = fmul float %Arg_17.18119, %Arg_16.17121
  %add.41123 = fadd float %multiply.35117, %multiply.40122
  %Arg_15.16124 = getelementptr inbounds float, ptr %arg15, i32 %132
  %Arg_15.16125 = load float, ptr %Arg_15.16124, align 4, !invariant.load !269
  %add.42126 = fadd float %add.41123, %Arg_15.16125
  %Arg_14.15127 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %199, i32 0
  %Arg_14.15128 = load float, ptr %Arg_14.15127, align 4, !invariant.load !269
  %Arg_13.14129 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %199, i32 0
  %Arg_13.14130 = load float, ptr %Arg_13.14129, align 4, !invariant.load !269
  %multiply.43131 = fmul float %Arg_14.15128, %Arg_13.14130
  %Arg_13.14132 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %199, i32 0
  %Arg_13.14133 = load float, ptr %Arg_13.14132, align 4, !invariant.load !269
  %subtract.44134 = fsub float %region_0_125_constant_27110, %Arg_13.14133
  %multiply.45135 = fmul float %multiply.43131, %subtract.44134
  %Arg_12.13136 = getelementptr inbounds [128 x [1 x float]], ptr %arg12, i32 0, i32 %194, i32 0
  %Arg_12.13137 = load float, ptr %Arg_12.13136, align 4, !invariant.load !269
  %multiply.50138 = fmul float %multiply.45135, %Arg_12.13137
  %add.51139 = fadd float %add.42126, %multiply.50138
  %Arg_11.12140 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %199, i32 0
  %Arg_11.12141 = load float, ptr %Arg_11.12140, align 4, !invariant.load !269
  %Arg_10.11142 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %199, i32 0
  %Arg_10.11143 = load float, ptr %Arg_10.11142, align 4, !invariant.load !269
  %multiply.52144 = fmul float %Arg_11.12141, %Arg_10.11143
  %Arg_10.11145 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %199, i32 0
  %Arg_10.11146 = load float, ptr %Arg_10.11145, align 4, !invariant.load !269
  %subtract.53147 = fsub float %region_0_125_constant_27110, %Arg_10.11146
  %multiply.54148 = fmul float %multiply.52144, %subtract.53147
  %Arg_9.10149 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %194, i32 0
  %Arg_9.10150 = load float, ptr %Arg_9.10149, align 4, !invariant.load !269
  %multiply.59151 = fmul float %multiply.54148, %Arg_9.10150
  %add.60152 = fadd float %add.51139, %multiply.59151
  %Arg_8.9153 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %199, i32 0
  %Arg_8.9154 = load float, ptr %Arg_8.9153, align 4, !invariant.load !269
  %Arg_7.8155 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %199, i32 0
  %Arg_7.8156 = load float, ptr %Arg_7.8155, align 4, !invariant.load !269
  %multiply.61157 = fmul float %Arg_8.9154, %Arg_7.8156
  %Arg_7.8158 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %199, i32 0
  %Arg_7.8159 = load float, ptr %Arg_7.8158, align 4, !invariant.load !269
  %subtract.62160 = fsub float %region_0_125_constant_27110, %Arg_7.8159
  %multiply.63161 = fmul float %multiply.61157, %subtract.62160
  %Arg_6.7162 = getelementptr inbounds [128 x [1 x float]], ptr %arg6, i32 0, i32 %194, i32 0
  %Arg_6.7163 = load float, ptr %Arg_6.7162, align 4, !invariant.load !269
  %multiply.68164 = fmul float %multiply.63161, %Arg_6.7163
  %add.69165 = fadd float %add.60152, %multiply.68164
  %Arg_5.6166 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %199, i32 0
  %Arg_5.6167 = load float, ptr %Arg_5.6166, align 4, !invariant.load !269
  %Arg_4.5168 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %199, i32 0
  %Arg_4.5169 = load float, ptr %Arg_4.5168, align 4, !invariant.load !269
  %multiply.70170 = fmul float %Arg_5.6167, %Arg_4.5169
  %Arg_4.5171 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %199, i32 0
  %Arg_4.5172 = load float, ptr %Arg_4.5171, align 4, !invariant.load !269
  %subtract.71173 = fsub float %region_0_125_constant_27110, %Arg_4.5172
  %multiply.72174 = fmul float %multiply.70170, %subtract.71173
  %Arg_3.4175 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %194, i32 0
  %Arg_3.4176 = load float, ptr %Arg_3.4175, align 4, !invariant.load !269
  %multiply.77177 = fmul float %multiply.72174, %Arg_3.4176
  %add.78178 = fadd float %add.69165, %multiply.77177
  %Arg_2.3179 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %199, i32 0
  %Arg_2.3180 = load float, ptr %Arg_2.3179, align 4, !invariant.load !269
  %Arg_1.2181 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %199, i32 0
  %Arg_1.2182 = load float, ptr %Arg_1.2181, align 4, !invariant.load !269
  %multiply.79183 = fmul float %Arg_2.3180, %Arg_1.2182
  %Arg_1.2184 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %199, i32 0
  %Arg_1.2185 = load float, ptr %Arg_1.2184, align 4, !invariant.load !269
  %subtract.80186 = fsub float %region_0_125_constant_27110, %Arg_1.2185
  %multiply.81187 = fmul float %multiply.79183, %subtract.80186
  %Arg_0.1188 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %194, i32 0
  %Arg_0.1189 = load float, ptr %Arg_0.1188, align 4, !invariant.load !269
  %multiply.86190 = fmul float %multiply.81187, %Arg_0.1189
  %add.87191 = fadd float %add.78178, %multiply.86190
  %202 = trunc i8 %201 to i1
  %203 = select i1 %202, float %add.87191, float %region_0_125_constant_23103
  %204 = mul nuw nsw i32 %134, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %136, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %137, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %212 = getelementptr inbounds float, ptr %arg23, i32 %132
  store float %203, ptr %212, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %213 = mul i32 %thread_id.y, 1
  %214 = add i32 %tile_origin.1, %thread_id.x
  %215 = add i32 %tile_origin.2, %213
  %216 = add i32 %215, 0
  %217 = mul i32 %tile_origin.0, 128
  %218 = add i32 %217, %216
  %219 = udiv i32 %218, 1
  %220 = urem i32 %219, 128
  %221 = udiv i32 %218, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg22, i32 0, i32 %221, i32 %220
  %output = load float, ptr %34, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true224:                   ; preds = %reduction_write_output-after
  %222 = mul i32 %thread_id.y, 1
  %223 = add i32 %tile_origin.1, %thread_id.x
  %224 = add i32 %tile_origin.2, %222
  %225 = add i32 %224, 0
  %226 = mul i32 %tile_origin.0, 128
  %227 = add i32 %226, %225
  %228 = udiv i32 %227, 1
  %229 = urem i32 %228, 128
  %230 = udiv i32 %227, 128
  %output_element_address226 = getelementptr inbounds [64 x [128 x float]], ptr %arg24, i32 0, i32 %230, i32 %229
  %output227 = load float, ptr %53, align 4
  store float %output227, ptr %output_element_address226, align 4
  br label %reduction_write_output-after225

reduction_write_output-true246:                   ; preds = %reduction_write_output-after225
  %231 = mul i32 %thread_id.y, 1
  %232 = add i32 %tile_origin.1, %thread_id.x
  %233 = add i32 %tile_origin.2, %231
  %234 = add i32 %233, 0
  %235 = mul i32 %tile_origin.0, 128
  %236 = add i32 %235, %234
  %237 = udiv i32 %236, 1
  %238 = urem i32 %237, 128
  %239 = udiv i32 %236, 128
  %output_element_address248 = getelementptr inbounds [64 x [128 x float]], ptr %arg25, i32 0, i32 %239, i32 %238
  %output249 = load float, ptr %72, align 4
  store float %output249, ptr %output_element_address248, align 4
  br label %reduction_write_output-after247

reduction_write_output-true268:                   ; preds = %reduction_write_output-after247
  %240 = mul i32 %thread_id.y, 1
  %241 = add i32 %tile_origin.1, %thread_id.x
  %242 = add i32 %tile_origin.2, %240
  %243 = add i32 %242, 0
  %244 = mul i32 %tile_origin.0, 128
  %245 = add i32 %244, %243
  %246 = udiv i32 %245, 1
  %247 = urem i32 %246, 128
  %248 = udiv i32 %245, 128
  %output_element_address270 = getelementptr inbounds [64 x [128 x float]], ptr %arg26, i32 0, i32 %248, i32 %247
  %output271 = load float, ptr %91, align 4
  store float %output271, ptr %output_element_address270, align 4
  br label %reduction_write_output-after269

reduction_write_output-true290:                   ; preds = %reduction_write_output-after269
  %249 = mul i32 %thread_id.y, 1
  %250 = add i32 %tile_origin.1, %thread_id.x
  %251 = add i32 %tile_origin.2, %249
  %252 = add i32 %251, 0
  %253 = mul i32 %tile_origin.0, 128
  %254 = add i32 %253, %252
  %255 = udiv i32 %254, 1
  %256 = urem i32 %255, 128
  %257 = udiv i32 %254, 128
  %output_element_address292 = getelementptr inbounds [64 x [128 x float]], ptr %arg27, i32 0, i32 %257, i32 %256
  %output293 = load float, ptr %110, align 4
  store float %output293, ptr %output_element_address292, align 4
  br label %reduction_write_output-after291
}

define internal void @region_1_91(ptr dereferenceable(4) %Arg_0.92.typed, ptr dereferenceable(4) %Arg_1.93.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.94.typed = alloca float, align 4
  %Arg_0.92 = load float, ptr %Arg_0.92.typed, align 4
  %Arg_1.93 = load float, ptr %Arg_1.93.typed, align 4
  %add.94 = fadd float %Arg_0.92, %Arg_1.93
  store float %add.94, ptr %add.94.typed, align 4
  %load_ret_value = load float, ptr %add.94.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_98(ptr dereferenceable(4) %Arg_0.99.typed, ptr dereferenceable(4) %Arg_1.100.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.101.typed = alloca float, align 4
  %Arg_0.99 = load float, ptr %Arg_0.99.typed, align 4
  %Arg_1.100 = load float, ptr %Arg_1.100.typed, align 4
  %add.101 = fadd float %Arg_0.99, %Arg_1.100
  store float %add.101, ptr %add.101.typed, align 4
  %load_ret_value = load float, ptr %add.101.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_105(ptr dereferenceable(4) %Arg_0.106.typed, ptr dereferenceable(4) %Arg_1.107.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.108.typed = alloca float, align 4
  %Arg_0.106 = load float, ptr %Arg_0.106.typed, align 4
  %Arg_1.107 = load float, ptr %Arg_1.107.typed, align 4
  %add.108 = fadd float %Arg_0.106, %Arg_1.107
  store float %add.108, ptr %add.108.typed, align 4
  %load_ret_value = load float, ptr %add.108.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_112(ptr dereferenceable(4) %Arg_0.113.typed, ptr dereferenceable(4) %Arg_1.114.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.115.typed = alloca float, align 4
  %Arg_0.113 = load float, ptr %Arg_0.113.typed, align 4
  %Arg_1.114 = load float, ptr %Arg_1.114.typed, align 4
  %add.115 = fadd float %Arg_0.113, %Arg_1.114
  store float %add.115, ptr %add.115.typed, align 4
  %load_ret_value = load float, ptr %add.115.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_119(ptr dereferenceable(4) %Arg_0.120.typed, ptr dereferenceable(4) %Arg_1.121.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.122.typed = alloca float, align 4
  %Arg_0.120 = load float, ptr %Arg_0.120.typed, align 4
  %Arg_1.121 = load float, ptr %Arg_1.121.typed, align 4
  %add.122 = fadd float %Arg_0.120, %Arg_1.121
  store float %add.122, ptr %add.122.typed, align 4
  %load_ret_value = load float, ptr %add.122.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_500(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 128 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 128 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 128 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 128 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 128 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 128 dereferenceable(512) %arg33) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1
  %5 = udiv i32 %linear_index, 1
  %6 = icmp ult i32 %linear_index, 128
  br i1 %6, label %fusion_500.in_bounds-true, label %fusion_500.in_bounds-after

fusion_500.in_bounds-after:                       ; preds = %fusion_500.in_bounds-true, %entry
  ret void

fusion_500.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %multiply.25 = fmul float %9, %11
  %subtract.27 = fsub float %8, %multiply.25
  %12 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.27, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %multiply.28 = fmul float %9, %16
  %subtract.30 = fsub float %14, %multiply.28
  %17 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %12, float %subtract.30, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %multiply.31 = fmul float %9, %21
  %subtract.33 = fsub float %19, %multiply.31
  %22 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %17, float %subtract.33, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %multiply.34 = fmul float %9, %26
  %subtract.36 = fsub float %24, %multiply.34
  %27 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %22, float %subtract.36, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %multiply.37 = fmul float %9, %31
  %subtract.39 = fsub float %29, %multiply.37
  %32 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %27, float %subtract.39, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !269
  %multiply.40 = fmul float %9, %36
  %subtract.42 = fsub float %34, %multiply.40
  %37 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %32, float %subtract.42, 5
  %38 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %40 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.43 = fmul float %9, %41
  %subtract.45 = fsub float %39, %multiply.43
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %37, float %subtract.45, 6
  %43 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.46 = fmul float %9, %46
  %subtract.48 = fsub float %44, %multiply.46
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.48, 7
  %48 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %50 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %multiply.49 = fmul float %9, %51
  %subtract.51 = fsub float %49, %multiply.49
  %52 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.51, 8
  %53 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %54 = load float, ptr %53, align 4, !invariant.load !269
  %55 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %multiply.52 = fmul float %9, %56
  %subtract.54 = fsub float %54, %multiply.52
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %52, float %subtract.54, 9
  %58 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %60 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %61 = load float, ptr %60, align 4, !invariant.load !269
  %multiply.55 = fmul float %9, %61
  %subtract.57 = fsub float %59, %multiply.55
  %62 = insertvalue { float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.57, 10
  %63 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 0
  %64 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %63, ptr %64, align 4
  %65 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 1
  %66 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %65, ptr %66, align 4
  %67 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 2
  %68 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  store float %67, ptr %68, align 4
  %69 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 3
  %70 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %69, ptr %70, align 4
  %71 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 4
  %72 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  store float %71, ptr %72, align 4
  %73 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 5
  %74 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %73, ptr %74, align 4
  %75 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 6
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  store float %75, ptr %76, align 4
  %77 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 7
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %77, ptr %78, align 4
  %79 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 8
  %80 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  store float %79, ptr %80, align 4
  %81 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 9
  %82 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %81, ptr %82, align 4
  %83 = extractvalue { float, float, float, float, float, float, float, float, float, float, float } %62, 10
  %84 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %83, ptr %84, align 4
  br label %fusion_500.in_bounds-after
}

define void @concatenate_343(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(524288) %arg1, ptr noalias align 16 dereferenceable(1048576) %arg2, ptr noalias align 16 dereferenceable(524288) %arg3, ptr noalias align 16 dereferenceable(1048576) %arg4, ptr noalias align 16 dereferenceable(524288) %arg5, ptr noalias align 128 dereferenceable(4718592) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !384
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 294912
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 144
  %5 = udiv i32 %linear_index_base, 144
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 144
  %8 = udiv i32 %linear_index1, 144
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 144
  %11 = udiv i32 %linear_index2, 144
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 144
  %14 = udiv i32 %linear_index3, 144
  %15 = icmp ult i32 %linear_index_base, 1179648
  br i1 %15, label %concatenate_343.in_bounds-true, label %concatenate_343.in_bounds-after

concatenate_343.in_bounds-after:                  ; preds = %concatenate.7.merge42, %entry
  ret void

concatenate_343.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.80.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 144
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 144
  %29 = mul i32 %28, 16
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 16
  %33 = udiv i32 %30, 16
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %36 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 144
  %39 = mul i32 %38, 32
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 32
  %43 = udiv i32 %40, 32
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.80.3
  %46 = phi i32 [ 80, %concatenate.pivot.80.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 144
  %49 = mul i32 %48, 16
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 16
  %53 = udiv i32 %50, 16
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.96.4
  %56 = phi i32 [ 96, %concatenate.pivot.96.4 ]
  %57 = sub nsw i32 %4, %56
  %58 = udiv i32 %linear_index_base, 144
  %59 = mul i32 %58, 32
  %60 = add i32 %59, %57
  %61 = udiv i32 %60, 1
  %62 = urem i32 %61, 32
  %63 = udiv i32 %60, 32
  %64 = getelementptr inbounds float, ptr %arg4, i32 %60
  %65 = load float, ptr %64, align 4, !invariant.load !269
  br label %concatenate.7.merge

concat_index_from_operand_id5:                    ; preds = %concatenate.pivot.128.5
  %66 = phi i32 [ 128, %concatenate.pivot.128.5 ]
  %67 = sub nsw i32 %4, %66
  %68 = udiv i32 %linear_index_base, 144
  %69 = mul i32 %68, 16
  %70 = add i32 %69, %67
  %71 = udiv i32 %70, 1
  %72 = urem i32 %71, 16
  %73 = udiv i32 %70, 16
  %74 = getelementptr inbounds float, ptr %arg5, i32 %70
  %75 = load float, ptr %74, align 4, !invariant.load !269
  br label %concatenate.7.merge

concatenate.pivot.80.:                            ; preds = %concatenate_343.in_bounds-true
  %76 = icmp ult i32 %4, 80
  br i1 %76, label %concatenate.pivot.32., label %concatenate.pivot.96.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.80.
  %77 = icmp ult i32 %4, 32
  br i1 %77, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.32.
  %78 = icmp ult i32 %4, 48
  br i1 %78, label %concatenate.pivot.32.1, label %concatenate.pivot.48.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.80.
  %79 = icmp ult i32 %4, 96
  br i1 %79, label %concatenate.pivot.80.3, label %concatenate.pivot.128.

concatenate.pivot.80.3:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id3

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.96.
  %80 = icmp ult i32 %4, 128
  br i1 %80, label %concatenate.pivot.96.4, label %concatenate.pivot.128.5

concatenate.pivot.96.4:                           ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id4

concatenate.pivot.128.5:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id5

concatenate.7.merge:                              ; preds = %concat_index_from_operand_id5, %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %81 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ], [ %65, %concat_index_from_operand_id4 ], [ %75, %concat_index_from_operand_id5 ]
  %82 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %81, ptr %82, align 4
  br label %concatenate.pivot.80.13

concat_index_from_operand_id07:                   ; preds = %concatenate.pivot.0.15
  %83 = phi i32 [ 0, %concatenate.pivot.0.15 ]
  %84 = sub nsw i32 %7, %83
  %85 = udiv i32 %linear_index1, 144
  %86 = mul i32 %85, 32
  %87 = add i32 %86, %84
  %88 = udiv i32 %87, 1
  %89 = urem i32 %88, 32
  %90 = udiv i32 %87, 32
  %91 = getelementptr inbounds float, ptr %arg0, i32 %87
  %92 = load float, ptr %91, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concat_index_from_operand_id18:                   ; preds = %concatenate.pivot.32.17
  %93 = phi i32 [ 32, %concatenate.pivot.32.17 ]
  %94 = sub nsw i32 %7, %93
  %95 = udiv i32 %linear_index1, 144
  %96 = mul i32 %95, 16
  %97 = add i32 %96, %94
  %98 = udiv i32 %97, 1
  %99 = urem i32 %98, 16
  %100 = udiv i32 %97, 16
  %101 = getelementptr inbounds float, ptr %arg1, i32 %97
  %102 = load float, ptr %101, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concat_index_from_operand_id29:                   ; preds = %concatenate.pivot.48.18
  %103 = phi i32 [ 48, %concatenate.pivot.48.18 ]
  %104 = sub nsw i32 %7, %103
  %105 = udiv i32 %linear_index1, 144
  %106 = mul i32 %105, 32
  %107 = add i32 %106, %104
  %108 = udiv i32 %107, 1
  %109 = urem i32 %108, 32
  %110 = udiv i32 %107, 32
  %111 = getelementptr inbounds float, ptr %arg2, i32 %107
  %112 = load float, ptr %111, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concat_index_from_operand_id310:                  ; preds = %concatenate.pivot.80.20
  %113 = phi i32 [ 80, %concatenate.pivot.80.20 ]
  %114 = sub nsw i32 %7, %113
  %115 = udiv i32 %linear_index1, 144
  %116 = mul i32 %115, 16
  %117 = add i32 %116, %114
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 16
  %120 = udiv i32 %117, 16
  %121 = getelementptr inbounds float, ptr %arg3, i32 %117
  %122 = load float, ptr %121, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concat_index_from_operand_id411:                  ; preds = %concatenate.pivot.96.22
  %123 = phi i32 [ 96, %concatenate.pivot.96.22 ]
  %124 = sub nsw i32 %7, %123
  %125 = udiv i32 %linear_index1, 144
  %126 = mul i32 %125, 32
  %127 = add i32 %126, %124
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 32
  %130 = udiv i32 %127, 32
  %131 = getelementptr inbounds float, ptr %arg4, i32 %127
  %132 = load float, ptr %131, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concat_index_from_operand_id512:                  ; preds = %concatenate.pivot.128.23
  %133 = phi i32 [ 128, %concatenate.pivot.128.23 ]
  %134 = sub nsw i32 %7, %133
  %135 = udiv i32 %linear_index1, 144
  %136 = mul i32 %135, 16
  %137 = add i32 %136, %134
  %138 = udiv i32 %137, 1
  %139 = urem i32 %138, 16
  %140 = udiv i32 %137, 16
  %141 = getelementptr inbounds float, ptr %arg5, i32 %137
  %142 = load float, ptr %141, align 4, !invariant.load !269
  br label %concatenate.7.merge6

concatenate.pivot.80.13:                          ; preds = %concatenate.7.merge
  %143 = icmp ult i32 %7, 80
  br i1 %143, label %concatenate.pivot.32.14, label %concatenate.pivot.96.19

concatenate.pivot.32.14:                          ; preds = %concatenate.pivot.80.13
  %144 = icmp ult i32 %7, 32
  br i1 %144, label %concatenate.pivot.0.15, label %concatenate.pivot.48.16

concatenate.pivot.0.15:                           ; preds = %concatenate.pivot.32.14
  br label %concat_index_from_operand_id07

concatenate.pivot.48.16:                          ; preds = %concatenate.pivot.32.14
  %145 = icmp ult i32 %7, 48
  br i1 %145, label %concatenate.pivot.32.17, label %concatenate.pivot.48.18

concatenate.pivot.32.17:                          ; preds = %concatenate.pivot.48.16
  br label %concat_index_from_operand_id18

concatenate.pivot.48.18:                          ; preds = %concatenate.pivot.48.16
  br label %concat_index_from_operand_id29

concatenate.pivot.96.19:                          ; preds = %concatenate.pivot.80.13
  %146 = icmp ult i32 %7, 96
  br i1 %146, label %concatenate.pivot.80.20, label %concatenate.pivot.128.21

concatenate.pivot.80.20:                          ; preds = %concatenate.pivot.96.19
  br label %concat_index_from_operand_id310

concatenate.pivot.128.21:                         ; preds = %concatenate.pivot.96.19
  %147 = icmp ult i32 %7, 128
  br i1 %147, label %concatenate.pivot.96.22, label %concatenate.pivot.128.23

concatenate.pivot.96.22:                          ; preds = %concatenate.pivot.128.21
  br label %concat_index_from_operand_id411

concatenate.pivot.128.23:                         ; preds = %concatenate.pivot.128.21
  br label %concat_index_from_operand_id512

concatenate.7.merge6:                             ; preds = %concat_index_from_operand_id512, %concat_index_from_operand_id411, %concat_index_from_operand_id310, %concat_index_from_operand_id29, %concat_index_from_operand_id18, %concat_index_from_operand_id07
  %148 = phi float [ %92, %concat_index_from_operand_id07 ], [ %102, %concat_index_from_operand_id18 ], [ %112, %concat_index_from_operand_id29 ], [ %122, %concat_index_from_operand_id310 ], [ %132, %concat_index_from_operand_id411 ], [ %142, %concat_index_from_operand_id512 ]
  %149 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %148, ptr %149, align 4
  br label %concatenate.pivot.80.31

concat_index_from_operand_id025:                  ; preds = %concatenate.pivot.0.33
  %150 = phi i32 [ 0, %concatenate.pivot.0.33 ]
  %151 = sub nsw i32 %10, %150
  %152 = udiv i32 %linear_index2, 144
  %153 = mul i32 %152, 32
  %154 = add i32 %153, %151
  %155 = udiv i32 %154, 1
  %156 = urem i32 %155, 32
  %157 = udiv i32 %154, 32
  %158 = getelementptr inbounds float, ptr %arg0, i32 %154
  %159 = load float, ptr %158, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concat_index_from_operand_id126:                  ; preds = %concatenate.pivot.32.35
  %160 = phi i32 [ 32, %concatenate.pivot.32.35 ]
  %161 = sub nsw i32 %10, %160
  %162 = udiv i32 %linear_index2, 144
  %163 = mul i32 %162, 16
  %164 = add i32 %163, %161
  %165 = udiv i32 %164, 1
  %166 = urem i32 %165, 16
  %167 = udiv i32 %164, 16
  %168 = getelementptr inbounds float, ptr %arg1, i32 %164
  %169 = load float, ptr %168, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concat_index_from_operand_id227:                  ; preds = %concatenate.pivot.48.36
  %170 = phi i32 [ 48, %concatenate.pivot.48.36 ]
  %171 = sub nsw i32 %10, %170
  %172 = udiv i32 %linear_index2, 144
  %173 = mul i32 %172, 32
  %174 = add i32 %173, %171
  %175 = udiv i32 %174, 1
  %176 = urem i32 %175, 32
  %177 = udiv i32 %174, 32
  %178 = getelementptr inbounds float, ptr %arg2, i32 %174
  %179 = load float, ptr %178, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concat_index_from_operand_id328:                  ; preds = %concatenate.pivot.80.38
  %180 = phi i32 [ 80, %concatenate.pivot.80.38 ]
  %181 = sub nsw i32 %10, %180
  %182 = udiv i32 %linear_index2, 144
  %183 = mul i32 %182, 16
  %184 = add i32 %183, %181
  %185 = udiv i32 %184, 1
  %186 = urem i32 %185, 16
  %187 = udiv i32 %184, 16
  %188 = getelementptr inbounds float, ptr %arg3, i32 %184
  %189 = load float, ptr %188, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concat_index_from_operand_id429:                  ; preds = %concatenate.pivot.96.40
  %190 = phi i32 [ 96, %concatenate.pivot.96.40 ]
  %191 = sub nsw i32 %10, %190
  %192 = udiv i32 %linear_index2, 144
  %193 = mul i32 %192, 32
  %194 = add i32 %193, %191
  %195 = udiv i32 %194, 1
  %196 = urem i32 %195, 32
  %197 = udiv i32 %194, 32
  %198 = getelementptr inbounds float, ptr %arg4, i32 %194
  %199 = load float, ptr %198, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concat_index_from_operand_id530:                  ; preds = %concatenate.pivot.128.41
  %200 = phi i32 [ 128, %concatenate.pivot.128.41 ]
  %201 = sub nsw i32 %10, %200
  %202 = udiv i32 %linear_index2, 144
  %203 = mul i32 %202, 16
  %204 = add i32 %203, %201
  %205 = udiv i32 %204, 1
  %206 = urem i32 %205, 16
  %207 = udiv i32 %204, 16
  %208 = getelementptr inbounds float, ptr %arg5, i32 %204
  %209 = load float, ptr %208, align 4, !invariant.load !269
  br label %concatenate.7.merge24

concatenate.pivot.80.31:                          ; preds = %concatenate.7.merge6
  %210 = icmp ult i32 %10, 80
  br i1 %210, label %concatenate.pivot.32.32, label %concatenate.pivot.96.37

concatenate.pivot.32.32:                          ; preds = %concatenate.pivot.80.31
  %211 = icmp ult i32 %10, 32
  br i1 %211, label %concatenate.pivot.0.33, label %concatenate.pivot.48.34

concatenate.pivot.0.33:                           ; preds = %concatenate.pivot.32.32
  br label %concat_index_from_operand_id025

concatenate.pivot.48.34:                          ; preds = %concatenate.pivot.32.32
  %212 = icmp ult i32 %10, 48
  br i1 %212, label %concatenate.pivot.32.35, label %concatenate.pivot.48.36

concatenate.pivot.32.35:                          ; preds = %concatenate.pivot.48.34
  br label %concat_index_from_operand_id126

concatenate.pivot.48.36:                          ; preds = %concatenate.pivot.48.34
  br label %concat_index_from_operand_id227

concatenate.pivot.96.37:                          ; preds = %concatenate.pivot.80.31
  %213 = icmp ult i32 %10, 96
  br i1 %213, label %concatenate.pivot.80.38, label %concatenate.pivot.128.39

concatenate.pivot.80.38:                          ; preds = %concatenate.pivot.96.37
  br label %concat_index_from_operand_id328

concatenate.pivot.128.39:                         ; preds = %concatenate.pivot.96.37
  %214 = icmp ult i32 %10, 128
  br i1 %214, label %concatenate.pivot.96.40, label %concatenate.pivot.128.41

concatenate.pivot.96.40:                          ; preds = %concatenate.pivot.128.39
  br label %concat_index_from_operand_id429

concatenate.pivot.128.41:                         ; preds = %concatenate.pivot.128.39
  br label %concat_index_from_operand_id530

concatenate.7.merge24:                            ; preds = %concat_index_from_operand_id530, %concat_index_from_operand_id429, %concat_index_from_operand_id328, %concat_index_from_operand_id227, %concat_index_from_operand_id126, %concat_index_from_operand_id025
  %215 = phi float [ %159, %concat_index_from_operand_id025 ], [ %169, %concat_index_from_operand_id126 ], [ %179, %concat_index_from_operand_id227 ], [ %189, %concat_index_from_operand_id328 ], [ %199, %concat_index_from_operand_id429 ], [ %209, %concat_index_from_operand_id530 ]
  %216 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %215, ptr %216, align 4
  br label %concatenate.pivot.80.49

concat_index_from_operand_id043:                  ; preds = %concatenate.pivot.0.51
  %217 = phi i32 [ 0, %concatenate.pivot.0.51 ]
  %218 = sub nsw i32 %13, %217
  %219 = udiv i32 %linear_index3, 144
  %220 = mul i32 %219, 32
  %221 = add i32 %220, %218
  %222 = udiv i32 %221, 1
  %223 = urem i32 %222, 32
  %224 = udiv i32 %221, 32
  %225 = getelementptr inbounds float, ptr %arg0, i32 %221
  %226 = load float, ptr %225, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concat_index_from_operand_id144:                  ; preds = %concatenate.pivot.32.53
  %227 = phi i32 [ 32, %concatenate.pivot.32.53 ]
  %228 = sub nsw i32 %13, %227
  %229 = udiv i32 %linear_index3, 144
  %230 = mul i32 %229, 16
  %231 = add i32 %230, %228
  %232 = udiv i32 %231, 1
  %233 = urem i32 %232, 16
  %234 = udiv i32 %231, 16
  %235 = getelementptr inbounds float, ptr %arg1, i32 %231
  %236 = load float, ptr %235, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concat_index_from_operand_id245:                  ; preds = %concatenate.pivot.48.54
  %237 = phi i32 [ 48, %concatenate.pivot.48.54 ]
  %238 = sub nsw i32 %13, %237
  %239 = udiv i32 %linear_index3, 144
  %240 = mul i32 %239, 32
  %241 = add i32 %240, %238
  %242 = udiv i32 %241, 1
  %243 = urem i32 %242, 32
  %244 = udiv i32 %241, 32
  %245 = getelementptr inbounds float, ptr %arg2, i32 %241
  %246 = load float, ptr %245, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concat_index_from_operand_id346:                  ; preds = %concatenate.pivot.80.56
  %247 = phi i32 [ 80, %concatenate.pivot.80.56 ]
  %248 = sub nsw i32 %13, %247
  %249 = udiv i32 %linear_index3, 144
  %250 = mul i32 %249, 16
  %251 = add i32 %250, %248
  %252 = udiv i32 %251, 1
  %253 = urem i32 %252, 16
  %254 = udiv i32 %251, 16
  %255 = getelementptr inbounds float, ptr %arg3, i32 %251
  %256 = load float, ptr %255, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concat_index_from_operand_id447:                  ; preds = %concatenate.pivot.96.58
  %257 = phi i32 [ 96, %concatenate.pivot.96.58 ]
  %258 = sub nsw i32 %13, %257
  %259 = udiv i32 %linear_index3, 144
  %260 = mul i32 %259, 32
  %261 = add i32 %260, %258
  %262 = udiv i32 %261, 1
  %263 = urem i32 %262, 32
  %264 = udiv i32 %261, 32
  %265 = getelementptr inbounds float, ptr %arg4, i32 %261
  %266 = load float, ptr %265, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concat_index_from_operand_id548:                  ; preds = %concatenate.pivot.128.59
  %267 = phi i32 [ 128, %concatenate.pivot.128.59 ]
  %268 = sub nsw i32 %13, %267
  %269 = udiv i32 %linear_index3, 144
  %270 = mul i32 %269, 16
  %271 = add i32 %270, %268
  %272 = udiv i32 %271, 1
  %273 = urem i32 %272, 16
  %274 = udiv i32 %271, 16
  %275 = getelementptr inbounds float, ptr %arg5, i32 %271
  %276 = load float, ptr %275, align 4, !invariant.load !269
  br label %concatenate.7.merge42

concatenate.pivot.80.49:                          ; preds = %concatenate.7.merge24
  %277 = icmp ult i32 %13, 80
  br i1 %277, label %concatenate.pivot.32.50, label %concatenate.pivot.96.55

concatenate.pivot.32.50:                          ; preds = %concatenate.pivot.80.49
  %278 = icmp ult i32 %13, 32
  br i1 %278, label %concatenate.pivot.0.51, label %concatenate.pivot.48.52

concatenate.pivot.0.51:                           ; preds = %concatenate.pivot.32.50
  br label %concat_index_from_operand_id043

concatenate.pivot.48.52:                          ; preds = %concatenate.pivot.32.50
  %279 = icmp ult i32 %13, 48
  br i1 %279, label %concatenate.pivot.32.53, label %concatenate.pivot.48.54

concatenate.pivot.32.53:                          ; preds = %concatenate.pivot.48.52
  br label %concat_index_from_operand_id144

concatenate.pivot.48.54:                          ; preds = %concatenate.pivot.48.52
  br label %concat_index_from_operand_id245

concatenate.pivot.96.55:                          ; preds = %concatenate.pivot.80.49
  %280 = icmp ult i32 %13, 96
  br i1 %280, label %concatenate.pivot.80.56, label %concatenate.pivot.128.57

concatenate.pivot.80.56:                          ; preds = %concatenate.pivot.96.55
  br label %concat_index_from_operand_id346

concatenate.pivot.128.57:                         ; preds = %concatenate.pivot.96.55
  %281 = icmp ult i32 %13, 128
  br i1 %281, label %concatenate.pivot.96.58, label %concatenate.pivot.128.59

concatenate.pivot.96.58:                          ; preds = %concatenate.pivot.128.57
  br label %concat_index_from_operand_id447

concatenate.pivot.128.59:                         ; preds = %concatenate.pivot.128.57
  br label %concat_index_from_operand_id548

concatenate.7.merge42:                            ; preds = %concat_index_from_operand_id548, %concat_index_from_operand_id447, %concat_index_from_operand_id346, %concat_index_from_operand_id245, %concat_index_from_operand_id144, %concat_index_from_operand_id043
  %282 = phi float [ %226, %concat_index_from_operand_id043 ], [ %236, %concat_index_from_operand_id144 ], [ %246, %concat_index_from_operand_id245 ], [ %256, %concat_index_from_operand_id346 ], [ %266, %concat_index_from_operand_id447 ], [ %276, %concat_index_from_operand_id548 ]
  %283 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %282, ptr %283, align 4
  br label %concatenate_343.in_bounds-after
}

define void @fusion_237(ptr noalias align 128 dereferenceable(7340032) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @33, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !385

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !386

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_16_constant_3 = load float, ptr @32, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 96
  %Arg_0.1 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__1(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_16_constant_37 = load float, ptr @32, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 96
  %Arg_0.19 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 128
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 16384
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 128
  %130 = udiv i32 %127, 128
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 16384
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 128
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_16_constant_316 = load float, ptr @32, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 96
  %Arg_0.118 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__1(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 128
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_16_constant_323 = load float, ptr @32, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 96
  %Arg_0.125 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 128
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 128
  %180 = udiv i32 %177, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 128
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 128
  %189 = udiv i32 %186, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__1(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_358(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(7340032) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !387
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 458752
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 224
  %5 = udiv i32 %linear_index_base, 224
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 224
  %8 = udiv i32 %linear_index1, 224
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 224
  %11 = udiv i32 %linear_index2, 224
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 224
  %14 = udiv i32 %linear_index3, 224
  %15 = icmp ult i32 %linear_index_base, 1835008
  br i1 %15, label %concatenate_358.in_bounds-true, label %concatenate_358.in_bounds-after

concatenate_358.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_358.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 224
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 224
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 224
  %39 = mul i32 %38, 128
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 128
  %43 = udiv i32 %40, 128
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_358.in_bounds-true
  %46 = icmp ult i32 %4, 32
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %47 = icmp ult i32 %4, 96
  br i1 %47, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.32.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 224
  %53 = mul i32 %52, 32
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 32
  %57 = udiv i32 %54, 32
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.32.10
  %60 = phi i32 [ 32, %concatenate.pivot.32.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 224
  %63 = mul i32 %62, 64
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 64
  %67 = udiv i32 %64, 64
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.96.11
  %70 = phi i32 [ 96, %concatenate.pivot.96.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 224
  %73 = mul i32 %72, 128
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 128
  %77 = udiv i32 %74, 128
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.32.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 32
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.32.7
  br label %concat_index_from_operand_id04

concatenate.pivot.96.9:                           ; preds = %concatenate.pivot.32.7
  %81 = icmp ult i32 %7, 96
  br i1 %81, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id15

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.32.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 224
  %87 = mul i32 %86, 32
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 32
  %91 = udiv i32 %88, 32
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.32.19
  %94 = phi i32 [ 32, %concatenate.pivot.32.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 224
  %97 = mul i32 %96, 64
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 64
  %101 = udiv i32 %98, 64
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.96.20
  %104 = phi i32 [ 96, %concatenate.pivot.96.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 224
  %107 = mul i32 %106, 128
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 128
  %111 = udiv i32 %108, 128
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.32.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 32
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.32.16
  br label %concat_index_from_operand_id013

concatenate.pivot.96.18:                          ; preds = %concatenate.pivot.32.16
  %115 = icmp ult i32 %10, 96
  br i1 %115, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id114

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.32.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 224
  %121 = mul i32 %120, 32
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 32
  %125 = udiv i32 %122, 32
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.32.28
  %128 = phi i32 [ 32, %concatenate.pivot.32.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 224
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.96.29
  %138 = phi i32 [ 96, %concatenate.pivot.96.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 224
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.32.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 32
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.32.25
  br label %concat_index_from_operand_id022

concatenate.pivot.96.27:                          ; preds = %concatenate.pivot.32.25
  %149 = icmp ult i32 %13, 96
  br i1 %149, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id123

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_358.in_bounds-after
}

define void @fusion_363(ptr noalias align 128 dereferenceable(16777216) %arg0, ptr noalias align 16 dereferenceable(16777216) %arg1, ptr noalias align 128 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(16777216) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @35, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !265
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 512
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 8
  %14 = udiv i32 %9, 8
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 8
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 7
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !388

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !389

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9__3(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9__3(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9__3(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9__3(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9__3(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9__3(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9__3(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9__3(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9__3(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9__3(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 512
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 65536
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 512
  %80 = udiv i32 %77, 512
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 65536
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 512
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [512 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_15_constant_3 = load float, ptr @34, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [512 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9__3(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 512
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_15_constant_37 = load float, ptr @34, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 512
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [512 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 512
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 65536
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 512
  %126 = udiv i32 %123, 512
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 65536
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 512
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [512 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_15_constant_316 = load float, ptr @34, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [512 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9__3(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 512
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_15_constant_323 = load float, ptr @34, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 512
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [512 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 512
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 512
  %172 = udiv i32 %169, 512
  %output_element_address = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 512
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 512
  %181 = udiv i32 %178, 512
  %output_element_address61 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9__3(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_351(ptr noalias align 16 dereferenceable(4210688) %arg0, ptr noalias align 128 dereferenceable(4210688) %arg1, ptr noalias align 16 dereferenceable(4) %arg2) {
entry:
  %loop.invar_address = alloca i32, align 4
  store i32 0, ptr %loop.invar_address, align 4
  br label %loop.loop_header

loop.loop_header:                                 ; preds = %fusion_351.in_bounds-after, %entry
  %loop.indvar = load i32, ptr %loop.invar_address, align 4
  %0 = icmp uge i32 %loop.indvar, 1052672
  br i1 %0, label %loop.loop_exit, label %loop.loop_body

loop.loop_body:                                   ; preds = %loop.loop_header
  %invar.inc = add nuw nsw i32 %loop.indvar, 442368
  store i32 %invar.inc, ptr %loop.invar_address, align 4
  %1 = icmp eq i32 %loop.indvar, 0
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !390
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %4 = mul nuw nsw i32 %2, 128
  %linear_index = add nuw nsw i32 %4, %3
  %linear_index_in_range = icmp ult i32 %linear_index, 110592
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %linear_index_plus_base = add nuw nsw i32 %linear_index_base, %loop.indvar
  %5 = udiv i32 %linear_index_plus_base, 1
  %6 = urem i32 %5, 512
  %7 = udiv i32 %linear_index_plus_base, 512
  %linear_index1 = add nuw nsw i32 %linear_index_plus_base, 1
  %8 = udiv i32 %linear_index1, 1
  %9 = urem i32 %8, 512
  %10 = udiv i32 %linear_index1, 512
  %linear_index2 = add nuw nsw i32 %linear_index_plus_base, 2
  %11 = udiv i32 %linear_index2, 1
  %12 = urem i32 %11, 512
  %13 = udiv i32 %linear_index2, 512
  %linear_index3 = add nuw nsw i32 %linear_index_plus_base, 3
  %14 = udiv i32 %linear_index3, 1
  %15 = urem i32 %14, 512
  %16 = udiv i32 %linear_index3, 512
  %17 = icmp ult i32 %linear_index_plus_base, 1052672
  br i1 %17, label %fusion_351.in_bounds-true, label %fusion_351.in_bounds-after

fusion_351.in_bounds-after:                       ; preds = %fusion_351.in_bounds-true, %loop.loop_body
  br label %loop.loop_header, !llvm.loop !391

loop.loop_exit:                                   ; preds = %loop.loop_header
  ret void

fusion_351.in_bounds-true:                        ; preds = %loop.loop_body
  %18 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_plus_base
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = load float, ptr %arg2, align 4, !invariant.load !269
  %21 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_plus_base
  %22 = load float, ptr %21, align 4
  %multiply.5 = fmul float %20, %22
  %subtract.6 = fsub float %19, %multiply.5
  %23 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_plus_base
  store float %subtract.6, ptr %23, align 4
  %24 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %26 = load float, ptr %arg2, align 4, !invariant.load !269
  %27 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %28 = load float, ptr %27, align 4
  %multiply.51 = fmul float %26, %28
  %subtract.62 = fsub float %25, %multiply.51
  %29 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %subtract.62, ptr %29, align 4
  %30 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %32 = load float, ptr %arg2, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %32, %34
  %subtract.64 = fsub float %31, %multiply.53
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %subtract.64, ptr %35, align 4
  %36 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = load float, ptr %arg2, align 4, !invariant.load !269
  %39 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %40 = load float, ptr %39, align 4
  %multiply.55 = fmul float %38, %40
  %subtract.66 = fsub float %37, %multiply.55
  %41 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %subtract.66, ptr %41, align 4
  br label %fusion_351.in_bounds-after
}

define void @fusion_299(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(4194304) %arg5, ptr noalias align 16 dereferenceable(4194304) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(4194304) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10, ptr noalias align 128 dereferenceable(4194304) %arg11, ptr noalias align 128 dereferenceable(32768) %arg12, ptr noalias align 128 dereferenceable(4194304) %arg13, ptr noalias align 128 dereferenceable(32768) %arg14, ptr noalias align 128 dereferenceable(32768) %arg15) {
entry:
  %return_buffer150 = alloca float, align 4
  %result_from_other_lane148 = alloca float, align 4
  %return_buffer147 = alloca float, align 4
  %result_from_other_lane145 = alloca float, align 4
  %return_buffer144 = alloca float, align 4
  %result_from_other_lane142 = alloca float, align 4
  %return_buffer141 = alloca float, align 4
  %result_from_other_lane139 = alloca float, align 4
  %return_buffer138 = alloca float, align 4
  %result_from_other_lane136 = alloca float, align 4
  %return_buffer128 = alloca float, align 4
  %result_from_other_lane126 = alloca float, align 4
  %return_buffer125 = alloca float, align 4
  %result_from_other_lane123 = alloca float, align 4
  %return_buffer122 = alloca float, align 4
  %result_from_other_lane120 = alloca float, align 4
  %return_buffer119 = alloca float, align 4
  %result_from_other_lane117 = alloca float, align 4
  %return_buffer116 = alloca float, align 4
  %result_from_other_lane114 = alloca float, align 4
  %return_buffer106 = alloca float, align 4
  %result_from_other_lane104 = alloca float, align 4
  %return_buffer103 = alloca float, align 4
  %result_from_other_lane101 = alloca float, align 4
  %return_buffer100 = alloca float, align 4
  %result_from_other_lane98 = alloca float, align 4
  %return_buffer97 = alloca float, align 4
  %result_from_other_lane95 = alloca float, align 4
  %return_buffer94 = alloca float, align 4
  %result_from_other_lane92 = alloca float, align 4
  %return_buffer88 = alloca float, align 4
  %result_from_other_lane86 = alloca float, align 4
  %return_buffer85 = alloca float, align 4
  %result_from_other_lane83 = alloca float, align 4
  %return_buffer82 = alloca float, align 4
  %result_from_other_lane80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result7 = alloca float, align 4
  %reduction_input_address6 = alloca float, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after152, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_65_constant_28 = load float, ptr @37, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_65_constant_28, ptr %2, align 4
  %region_0_65_constant_283 = load float, ptr @37, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_65_constant_283, ptr %3, align 4
  %region_0_65_constant_11 = load float, ptr @36, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_65_constant_11, ptr %4, align 4
  %region_0_65_constant_118 = load float, ptr @36, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  store float %region_0_65_constant_118, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 256
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 4
  %16 = udiv i32 %11, 4
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 4
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 3
  %tile_bound9 = select i1 %20, i32 32, i32 32
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc10 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc10, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 1
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound9
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !392

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !393

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %31 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %32 = load float, ptr %current_output, align 4
  store float %32, ptr %31, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %33 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result75 = load float, ptr %33, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 16, i32 31)
  store float %34, ptr %result_from_other_lane, align 4
  call void @region_1_29(ptr %33, ptr %result_from_other_lane, ptr %return_buffer76)
  %35 = load float, ptr %return_buffer76, align 4
  store float %35, ptr %33, align 4
  %partial_reduction_result78 = load float, ptr %33, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 8, i32 31)
  store float %36, ptr %result_from_other_lane77, align 4
  call void @region_1_29(ptr %33, ptr %result_from_other_lane77, ptr %return_buffer79)
  %37 = load float, ptr %return_buffer79, align 4
  store float %37, ptr %33, align 4
  %partial_reduction_result81 = load float, ptr %33, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result81, i32 4, i32 31)
  store float %38, ptr %result_from_other_lane80, align 4
  call void @region_1_29(ptr %33, ptr %result_from_other_lane80, ptr %return_buffer82)
  %39 = load float, ptr %return_buffer82, align 4
  store float %39, ptr %33, align 4
  %partial_reduction_result84 = load float, ptr %33, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result84, i32 2, i32 31)
  store float %40, ptr %result_from_other_lane83, align 4
  call void @region_1_29(ptr %33, ptr %result_from_other_lane83, ptr %return_buffer85)
  %41 = load float, ptr %return_buffer85, align 4
  store float %41, ptr %33, align 4
  %partial_reduction_result87 = load float, ptr %33, align 4
  %42 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result87, i32 1, i32 31)
  store float %42, ptr %result_from_other_lane86, align 4
  call void @region_1_29(ptr %33, ptr %result_from_other_lane86, ptr %return_buffer88)
  %43 = load float, ptr %return_buffer88, align 4
  store float %43, ptr %33, align 4
  %44 = icmp ult i32 %thread_id.x, %tile_bound
  %45 = mul i32 %thread_id.y, 1
  %46 = icmp ult i32 %45, %tile_bound9
  %47 = and i1 %46, %44
  %48 = icmp eq i32 %lane_id, 0
  %49 = and i1 %47, %48
  br i1 %49, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address89 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %50 = addrspacecast ptr addrspace(3) %shmem_output_address89 to ptr
  %current_output90 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %51 = load float, ptr %current_output90, align 4
  store float %51, ptr %50, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr91 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %52 = addrspacecast ptr addrspace(3) %shmem_transposed_addr91 to ptr
  %partial_reduction_result93 = load float, ptr %52, align 4
  %53 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result93, i32 16, i32 31)
  store float %53, ptr %result_from_other_lane92, align 4
  call void @region_2_45(ptr %52, ptr %result_from_other_lane92, ptr %return_buffer94)
  %54 = load float, ptr %return_buffer94, align 4
  store float %54, ptr %52, align 4
  %partial_reduction_result96 = load float, ptr %52, align 4
  %55 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result96, i32 8, i32 31)
  store float %55, ptr %result_from_other_lane95, align 4
  call void @region_2_45(ptr %52, ptr %result_from_other_lane95, ptr %return_buffer97)
  %56 = load float, ptr %return_buffer97, align 4
  store float %56, ptr %52, align 4
  %partial_reduction_result99 = load float, ptr %52, align 4
  %57 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result99, i32 4, i32 31)
  store float %57, ptr %result_from_other_lane98, align 4
  call void @region_2_45(ptr %52, ptr %result_from_other_lane98, ptr %return_buffer100)
  %58 = load float, ptr %return_buffer100, align 4
  store float %58, ptr %52, align 4
  %partial_reduction_result102 = load float, ptr %52, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result102, i32 2, i32 31)
  store float %59, ptr %result_from_other_lane101, align 4
  call void @region_2_45(ptr %52, ptr %result_from_other_lane101, ptr %return_buffer103)
  %60 = load float, ptr %return_buffer103, align 4
  store float %60, ptr %52, align 4
  %partial_reduction_result105 = load float, ptr %52, align 4
  %61 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result105, i32 1, i32 31)
  store float %61, ptr %result_from_other_lane104, align 4
  call void @region_2_45(ptr %52, ptr %result_from_other_lane104, ptr %return_buffer106)
  %62 = load float, ptr %return_buffer106, align 4
  store float %62, ptr %52, align 4
  %63 = icmp ult i32 %thread_id.x, %tile_bound
  %64 = mul i32 %thread_id.y, 1
  %65 = icmp ult i32 %64, %tile_bound9
  %66 = and i1 %65, %63
  %67 = icmp eq i32 %lane_id, 0
  %68 = and i1 %66, %67
  br i1 %68, label %reduction_write_output-true107, label %reduction_write_output-after108

reduction_write_output-after108:                  ; preds = %reduction_write_output-true107, %reduction_write_output-after
  %shmem_output_address111 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %69 = addrspacecast ptr addrspace(3) %shmem_output_address111 to ptr
  %current_output112 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %70 = load float, ptr %current_output112, align 4
  store float %70, ptr %69, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr113 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %71 = addrspacecast ptr addrspace(3) %shmem_transposed_addr113 to ptr
  %partial_reduction_result115 = load float, ptr %71, align 4
  %72 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result115, i32 16, i32 31)
  store float %72, ptr %result_from_other_lane114, align 4
  call void @region_3_52(ptr %71, ptr %result_from_other_lane114, ptr %return_buffer116)
  %73 = load float, ptr %return_buffer116, align 4
  store float %73, ptr %71, align 4
  %partial_reduction_result118 = load float, ptr %71, align 4
  %74 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result118, i32 8, i32 31)
  store float %74, ptr %result_from_other_lane117, align 4
  call void @region_3_52(ptr %71, ptr %result_from_other_lane117, ptr %return_buffer119)
  %75 = load float, ptr %return_buffer119, align 4
  store float %75, ptr %71, align 4
  %partial_reduction_result121 = load float, ptr %71, align 4
  %76 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result121, i32 4, i32 31)
  store float %76, ptr %result_from_other_lane120, align 4
  call void @region_3_52(ptr %71, ptr %result_from_other_lane120, ptr %return_buffer122)
  %77 = load float, ptr %return_buffer122, align 4
  store float %77, ptr %71, align 4
  %partial_reduction_result124 = load float, ptr %71, align 4
  %78 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result124, i32 2, i32 31)
  store float %78, ptr %result_from_other_lane123, align 4
  call void @region_3_52(ptr %71, ptr %result_from_other_lane123, ptr %return_buffer125)
  %79 = load float, ptr %return_buffer125, align 4
  store float %79, ptr %71, align 4
  %partial_reduction_result127 = load float, ptr %71, align 4
  %80 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result127, i32 1, i32 31)
  store float %80, ptr %result_from_other_lane126, align 4
  call void @region_3_52(ptr %71, ptr %result_from_other_lane126, ptr %return_buffer128)
  %81 = load float, ptr %return_buffer128, align 4
  store float %81, ptr %71, align 4
  %82 = icmp ult i32 %thread_id.x, %tile_bound
  %83 = mul i32 %thread_id.y, 1
  %84 = icmp ult i32 %83, %tile_bound9
  %85 = and i1 %84, %82
  %86 = icmp eq i32 %lane_id, 0
  %87 = and i1 %85, %86
  br i1 %87, label %reduction_write_output-true129, label %reduction_write_output-after130

reduction_write_output-after130:                  ; preds = %reduction_write_output-true129, %reduction_write_output-after108
  %shmem_output_address133 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %88 = addrspacecast ptr addrspace(3) %shmem_output_address133 to ptr
  %current_output134 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  %89 = load float, ptr %current_output134, align 4
  store float %89, ptr %88, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr135 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %90 = addrspacecast ptr addrspace(3) %shmem_transposed_addr135 to ptr
  %partial_reduction_result137 = load float, ptr %90, align 4
  %91 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result137, i32 16, i32 31)
  store float %91, ptr %result_from_other_lane136, align 4
  call void @region_4_59(ptr %90, ptr %result_from_other_lane136, ptr %return_buffer138)
  %92 = load float, ptr %return_buffer138, align 4
  store float %92, ptr %90, align 4
  %partial_reduction_result140 = load float, ptr %90, align 4
  %93 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result140, i32 8, i32 31)
  store float %93, ptr %result_from_other_lane139, align 4
  call void @region_4_59(ptr %90, ptr %result_from_other_lane139, ptr %return_buffer141)
  %94 = load float, ptr %return_buffer141, align 4
  store float %94, ptr %90, align 4
  %partial_reduction_result143 = load float, ptr %90, align 4
  %95 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result143, i32 4, i32 31)
  store float %95, ptr %result_from_other_lane142, align 4
  call void @region_4_59(ptr %90, ptr %result_from_other_lane142, ptr %return_buffer144)
  %96 = load float, ptr %return_buffer144, align 4
  store float %96, ptr %90, align 4
  %partial_reduction_result146 = load float, ptr %90, align 4
  %97 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result146, i32 2, i32 31)
  store float %97, ptr %result_from_other_lane145, align 4
  call void @region_4_59(ptr %90, ptr %result_from_other_lane145, ptr %return_buffer147)
  %98 = load float, ptr %return_buffer147, align 4
  store float %98, ptr %90, align 4
  %partial_reduction_result149 = load float, ptr %90, align 4
  %99 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result149, i32 1, i32 31)
  store float %99, ptr %result_from_other_lane148, align 4
  call void @region_4_59(ptr %90, ptr %result_from_other_lane148, ptr %return_buffer150)
  %100 = load float, ptr %return_buffer150, align 4
  store float %100, ptr %90, align 4
  %101 = icmp ult i32 %thread_id.x, %tile_bound
  %102 = mul i32 %thread_id.y, 1
  %103 = icmp ult i32 %102, %tile_bound9
  %104 = and i1 %103, %101
  %105 = icmp eq i32 %lane_id, 0
  %106 = and i1 %104, %105
  br i1 %106, label %reduction_write_output-true151, label %reduction_write_output-after152

reduction_write_output-after152:                  ; preds = %reduction_write_output-true151, %reduction_write_output-after130
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %107 = mul nuw nsw i32 %29, 1
  %108 = add nuw nsw i32 0, %107
  %109 = mul nuw nsw i32 %28, 128
  %110 = add nuw nsw i32 %108, %109
  %111 = mul nuw nsw i32 %tile_origin.0, 16384
  %112 = add nuw nsw i32 %110, %111
  %113 = udiv i32 %112, 1
  %114 = urem i32 %113, 128
  %115 = udiv i32 %112, 128
  %116 = urem i32 %115, 128
  %117 = udiv i32 %112, 16384
  %118 = mul i32 %thread_id.x, 1
  %119 = sub i32 %x_loc, %118
  %120 = mul nuw nsw i32 %114, 1
  %121 = add nuw nsw i32 0, %120
  %122 = udiv i32 %121, 128
  %123 = mul nuw nsw i32 %116, 1
  %124 = add nuw nsw i32 0, %123
  %125 = mul nuw nsw i32 %117, 128
  %126 = add nuw nsw i32 %124, %125
  %127 = udiv i32 %126, 8192
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %112
  %Arg_5.611 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %region_0_65_constant_1112 = load float, ptr @36, align 4
  %compare.13 = fcmp ogt float %Arg_5.611, %region_0_65_constant_1112
  %128 = zext i1 %compare.13 to i8
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %126, i32 0
  %Arg_4.513 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %121, i32 0
  %Arg_3.414 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %multiply.18 = fmul float %Arg_4.513, %Arg_3.414
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %112
  %Arg_2.315 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %add.19 = fadd float %multiply.18, %Arg_2.315
  %129 = add i32 %126, 0
  %130 = add i32 %121, 0
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %129
  %Arg_1.216 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %Arg_0.1 = getelementptr inbounds [256 x [1 x float]], ptr %arg0, i32 0, i32 %130, i32 0
  %Arg_0.117 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.23 = fmul float %Arg_1.216, %Arg_0.117
  %add.25 = fadd float %add.19, %multiply.23
  %131 = trunc i8 %128 to i1
  %132 = select i1 %131, float %add.25, float %region_0_65_constant_1112
  store float %132, ptr %reduction_input_address, align 4
  %133 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %119
  call void @region_1_29(ptr %133, ptr %reduction_input_address, ptr %return_buffer)
  %134 = load float, ptr %return_buffer, align 4
  store float %134, ptr %133, align 4
  %135 = mul nuw nsw i32 %114, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 128
  %138 = mul nuw nsw i32 %116, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %117, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %112
  %Arg_6.718 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %region_0_65_constant_1119 = load float, ptr @36, align 4
  %compare.34 = fcmp ogt float %Arg_6.718, %region_0_65_constant_1119
  %143 = zext i1 %compare.34 to i8
  %Arg_7.8 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %141, i32 0
  %Arg_7.820 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  %Arg_9.10 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %136, i32 0
  %Arg_9.1021 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  %multiply.39 = fmul float %Arg_7.820, %Arg_9.1021
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %112
  %Arg_8.922 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  %add.40 = fadd float %multiply.39, %Arg_8.922
  %144 = add i32 %141, 0
  %145 = add i32 %136, 128
  %Arg_1.223 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %144
  %Arg_1.224 = load float, ptr %Arg_1.223, align 4, !invariant.load !269
  %Arg_0.125 = getelementptr inbounds [256 x [1 x float]], ptr %arg0, i32 0, i32 %145, i32 0
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %multiply.2327 = fmul float %Arg_1.224, %Arg_0.126
  %add.42 = fadd float %add.40, %multiply.2327
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %add.42, float %region_0_65_constant_1119
  store float %147, ptr %reduction_input_address1, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %119
  call void @region_2_45(ptr %148, ptr %reduction_input_address1, ptr %return_buffer28)
  %149 = load float, ptr %return_buffer28, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %114, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 128
  %153 = mul nuw nsw i32 %116, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %117, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_6.729 = getelementptr inbounds float, ptr %arg6, i32 %112
  %Arg_6.730 = load float, ptr %Arg_6.729, align 4, !invariant.load !269
  %Arg_7.831 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %156, i32 0
  %Arg_7.832 = load float, ptr %Arg_7.831, align 4, !invariant.load !269
  %multiply.50 = fmul float %Arg_6.730, %Arg_7.832
  store float %multiply.50, ptr %reduction_input_address4, align 4
  %158 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 %119
  call void @region_3_52(ptr %158, ptr %reduction_input_address4, ptr %return_buffer33)
  %159 = load float, ptr %return_buffer33, align 4
  store float %159, ptr %158, align 4
  %160 = mul nuw nsw i32 %114, 1
  %161 = add nuw nsw i32 0, %160
  %162 = udiv i32 %161, 128
  %163 = mul nuw nsw i32 %116, 1
  %164 = add nuw nsw i32 0, %163
  %165 = mul nuw nsw i32 %117, 128
  %166 = add nuw nsw i32 %164, %165
  %167 = udiv i32 %166, 8192
  %Arg_5.634 = getelementptr inbounds float, ptr %arg5, i32 %112
  %Arg_5.635 = load float, ptr %Arg_5.634, align 4, !invariant.load !269
  %Arg_4.536 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %166, i32 0
  %Arg_4.537 = load float, ptr %Arg_4.536, align 4, !invariant.load !269
  %multiply.57 = fmul float %Arg_5.635, %Arg_4.537
  store float %multiply.57, ptr %reduction_input_address6, align 4
  %168 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 %119
  call void @region_4_59(ptr %168, ptr %reduction_input_address6, ptr %return_buffer38)
  %169 = load float, ptr %return_buffer38, align 4
  store float %169, ptr %168, align 4
  %170 = mul nuw nsw i32 %114, 1
  %171 = add nuw nsw i32 0, %170
  %172 = udiv i32 %171, 128
  %173 = mul nuw nsw i32 %116, 1
  %174 = add nuw nsw i32 0, %173
  %175 = mul nuw nsw i32 %117, 128
  %176 = add nuw nsw i32 %174, %175
  %177 = udiv i32 %176, 8192
  %Arg_5.639 = getelementptr inbounds float, ptr %arg5, i32 %112
  %Arg_5.640 = load float, ptr %Arg_5.639, align 4, !invariant.load !269
  %region_0_65_constant_1141 = load float, ptr @36, align 4
  %compare.1342 = fcmp ogt float %Arg_5.640, %region_0_65_constant_1141
  %178 = zext i1 %compare.1342 to i8
  %Arg_4.543 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %176, i32 0
  %Arg_4.544 = load float, ptr %Arg_4.543, align 4, !invariant.load !269
  %Arg_3.445 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %171, i32 0
  %Arg_3.446 = load float, ptr %Arg_3.445, align 4, !invariant.load !269
  %multiply.1847 = fmul float %Arg_4.544, %Arg_3.446
  %Arg_2.348 = getelementptr inbounds float, ptr %arg2, i32 %112
  %Arg_2.349 = load float, ptr %Arg_2.348, align 4, !invariant.load !269
  %add.1950 = fadd float %multiply.1847, %Arg_2.349
  %179 = add i32 %176, 0
  %180 = add i32 %171, 0
  %Arg_1.251 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %179
  %Arg_1.252 = load float, ptr %Arg_1.251, align 4, !invariant.load !269
  %Arg_0.153 = getelementptr inbounds [256 x [1 x float]], ptr %arg0, i32 0, i32 %180, i32 0
  %Arg_0.154 = load float, ptr %Arg_0.153, align 4, !invariant.load !269
  %multiply.2355 = fmul float %Arg_1.252, %Arg_0.154
  %add.2556 = fadd float %add.1950, %multiply.2355
  %181 = trunc i8 %178 to i1
  %182 = select i1 %181, float %add.2556, float %region_0_65_constant_1141
  %183 = mul nuw nsw i32 %114, 1
  %184 = add nuw nsw i32 0, %183
  %185 = udiv i32 %184, 128
  %186 = mul nuw nsw i32 %116, 1
  %187 = add nuw nsw i32 0, %186
  %188 = mul nuw nsw i32 %117, 128
  %189 = add nuw nsw i32 %187, %188
  %190 = udiv i32 %189, 8192
  %Arg_6.757 = getelementptr inbounds float, ptr %arg6, i32 %112
  %Arg_6.758 = load float, ptr %Arg_6.757, align 4, !invariant.load !269
  %region_0_65_constant_1159 = load float, ptr @36, align 4
  %compare.3460 = fcmp ogt float %Arg_6.758, %region_0_65_constant_1159
  %191 = zext i1 %compare.3460 to i8
  %Arg_7.861 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %189, i32 0
  %Arg_7.862 = load float, ptr %Arg_7.861, align 4, !invariant.load !269
  %Arg_9.1063 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %184, i32 0
  %Arg_9.1064 = load float, ptr %Arg_9.1063, align 4, !invariant.load !269
  %multiply.3965 = fmul float %Arg_7.862, %Arg_9.1064
  %Arg_8.966 = getelementptr inbounds float, ptr %arg8, i32 %112
  %Arg_8.967 = load float, ptr %Arg_8.966, align 4, !invariant.load !269
  %add.4068 = fadd float %multiply.3965, %Arg_8.967
  %192 = add i32 %189, 0
  %193 = add i32 %184, 128
  %Arg_1.269 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %192
  %Arg_1.270 = load float, ptr %Arg_1.269, align 4, !invariant.load !269
  %Arg_0.171 = getelementptr inbounds [256 x [1 x float]], ptr %arg0, i32 0, i32 %193, i32 0
  %Arg_0.172 = load float, ptr %Arg_0.171, align 4, !invariant.load !269
  %multiply.2373 = fmul float %Arg_1.270, %Arg_0.172
  %add.4274 = fadd float %add.4068, %multiply.2373
  %194 = trunc i8 %191 to i1
  %195 = select i1 %194, float %add.4274, float %region_0_65_constant_1159
  %196 = mul nuw nsw i32 %114, 1
  %197 = add nuw nsw i32 0, %196
  %198 = udiv i32 %197, 128
  %199 = mul nuw nsw i32 %116, 1
  %200 = add nuw nsw i32 0, %199
  %201 = mul nuw nsw i32 %117, 128
  %202 = add nuw nsw i32 %200, %201
  %203 = udiv i32 %202, 8192
  %204 = getelementptr inbounds float, ptr %arg13, i32 %112
  store float %195, ptr %204, align 4
  %205 = mul nuw nsw i32 %114, 1
  %206 = add nuw nsw i32 0, %205
  %207 = udiv i32 %206, 128
  %208 = mul nuw nsw i32 %116, 1
  %209 = add nuw nsw i32 0, %208
  %210 = mul nuw nsw i32 %117, 128
  %211 = add nuw nsw i32 %209, %210
  %212 = udiv i32 %211, 8192
  %213 = getelementptr inbounds float, ptr %arg11, i32 %112
  store float %182, ptr %213, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %214 = mul i32 %thread_id.y, 1
  %215 = add i32 %tile_origin.1, %thread_id.x
  %216 = add i32 %tile_origin.2, %214
  %217 = add i32 %216, 0
  %218 = mul i32 %tile_origin.0, 128
  %219 = add i32 %218, %217
  %220 = udiv i32 %219, 1
  %221 = urem i32 %220, 128
  %222 = udiv i32 %219, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg10, i32 0, i32 %222, i32 %221
  %output = load float, ptr %33, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true107:                   ; preds = %reduction_write_output-after
  %223 = mul i32 %thread_id.y, 1
  %224 = add i32 %tile_origin.1, %thread_id.x
  %225 = add i32 %tile_origin.2, %223
  %226 = add i32 %225, 0
  %227 = mul i32 %tile_origin.0, 128
  %228 = add i32 %227, %226
  %229 = udiv i32 %228, 1
  %230 = urem i32 %229, 128
  %231 = udiv i32 %228, 128
  %output_element_address109 = getelementptr inbounds [64 x [128 x float]], ptr %arg12, i32 0, i32 %231, i32 %230
  %output110 = load float, ptr %52, align 4
  store float %output110, ptr %output_element_address109, align 4
  br label %reduction_write_output-after108

reduction_write_output-true129:                   ; preds = %reduction_write_output-after108
  %232 = mul i32 %thread_id.y, 1
  %233 = add i32 %tile_origin.1, %thread_id.x
  %234 = add i32 %tile_origin.2, %232
  %235 = add i32 %234, 0
  %236 = mul i32 %tile_origin.0, 128
  %237 = add i32 %236, %235
  %238 = udiv i32 %237, 1
  %239 = urem i32 %238, 128
  %240 = udiv i32 %237, 128
  %output_element_address131 = getelementptr inbounds [64 x [128 x float]], ptr %arg14, i32 0, i32 %240, i32 %239
  %output132 = load float, ptr %71, align 4
  store float %output132, ptr %output_element_address131, align 4
  br label %reduction_write_output-after130

reduction_write_output-true151:                   ; preds = %reduction_write_output-after130
  %241 = mul i32 %thread_id.y, 1
  %242 = add i32 %tile_origin.1, %thread_id.x
  %243 = add i32 %tile_origin.2, %241
  %244 = add i32 %243, 0
  %245 = mul i32 %tile_origin.0, 128
  %246 = add i32 %245, %244
  %247 = udiv i32 %246, 1
  %248 = urem i32 %247, 128
  %249 = udiv i32 %246, 128
  %output_element_address153 = getelementptr inbounds [64 x [128 x float]], ptr %arg15, i32 0, i32 %249, i32 %248
  %output154 = load float, ptr %90, align 4
  store float %output154, ptr %output_element_address153, align 4
  br label %reduction_write_output-after152
}

define internal void @region_1_29(ptr dereferenceable(4) %Arg_0.30.typed, ptr dereferenceable(4) %Arg_1.31.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.32.typed = alloca float, align 4
  %Arg_0.30 = load float, ptr %Arg_0.30.typed, align 4
  %Arg_1.31 = load float, ptr %Arg_1.31.typed, align 4
  %add.32 = fadd float %Arg_0.30, %Arg_1.31
  store float %add.32, ptr %add.32.typed, align 4
  %load_ret_value = load float, ptr %add.32.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_45(ptr dereferenceable(4) %Arg_0.46.typed, ptr dereferenceable(4) %Arg_1.47.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.48.typed = alloca float, align 4
  %Arg_0.46 = load float, ptr %Arg_0.46.typed, align 4
  %Arg_1.47 = load float, ptr %Arg_1.47.typed, align 4
  %add.48 = fadd float %Arg_0.46, %Arg_1.47
  store float %add.48, ptr %add.48.typed, align 4
  %load_ret_value = load float, ptr %add.48.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_52(ptr dereferenceable(4) %Arg_0.53.typed, ptr dereferenceable(4) %Arg_1.54.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.55.typed = alloca float, align 4
  %Arg_0.53 = load float, ptr %Arg_0.53.typed, align 4
  %Arg_1.54 = load float, ptr %Arg_1.54.typed, align 4
  %add.55 = fadd float %Arg_0.53, %Arg_1.54
  store float %add.55, ptr %add.55.typed, align 4
  %load_ret_value = load float, ptr %add.55.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_59(ptr dereferenceable(4) %Arg_0.60.typed, ptr dereferenceable(4) %Arg_1.61.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.62.typed = alloca float, align 4
  %Arg_0.60 = load float, ptr %Arg_0.60.typed, align 4
  %Arg_1.61 = load float, ptr %Arg_1.61.typed, align 4
  %add.62 = fadd float %Arg_0.60, %Arg_1.61
  store float %add.62, ptr %add.62.typed, align 4
  %load_ret_value = load float, ptr %add.62.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_526(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40, ptr noalias align 128 dereferenceable(512) %arg41, ptr noalias align 128 dereferenceable(512) %arg42, ptr noalias align 128 dereferenceable(512) %arg43, ptr noalias align 128 dereferenceable(512) %arg44, ptr noalias align 128 dereferenceable(512) %arg45, ptr noalias align 128 dereferenceable(512) %arg46, ptr noalias align 128 dereferenceable(512) %arg47, ptr noalias align 128 dereferenceable(512) %arg48, ptr noalias align 128 dereferenceable(512) %arg49, ptr noalias align 128 dereferenceable(512) %arg50, ptr noalias align 128 dereferenceable(512) %arg51, ptr noalias align 128 dereferenceable(512) %arg52, ptr noalias align 128 dereferenceable(512) %arg53, ptr noalias align 128 dereferenceable(512) %arg54, ptr noalias align 128 dereferenceable(512) %arg55, ptr noalias align 128 dereferenceable(512) %arg56, ptr noalias align 128 dereferenceable(512) %arg57, ptr noalias align 128 dereferenceable(512) %arg58, ptr noalias align 128 dereferenceable(512) %arg59, ptr noalias align 128 dereferenceable(512) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1
  %5 = udiv i32 %linear_index, 1
  %6 = icmp ult i32 %linear_index, 128
  br i1 %6, label %fusion_526.in_bounds-true, label %fusion_526.in_bounds-after

fusion_526.in_bounds-after:                       ; preds = %fusion_526.in_bounds-true, %entry
  ret void

fusion_526.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %multiply.43 = fmul float %9, %11
  %subtract.45 = fsub float %8, %multiply.43
  %12 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %multiply.46 = fmul float %9, %16
  %subtract.48 = fsub float %14, %multiply.46
  %17 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %12, float %subtract.48, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %multiply.49 = fmul float %9, %21
  %subtract.51 = fsub float %19, %multiply.49
  %22 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %17, float %subtract.51, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %multiply.52 = fmul float %9, %26
  %subtract.54 = fsub float %24, %multiply.52
  %27 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %22, float %subtract.54, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %multiply.55 = fmul float %9, %31
  %subtract.57 = fsub float %29, %multiply.55
  %32 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %27, float %subtract.57, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !269
  %multiply.58 = fmul float %9, %36
  %subtract.60 = fsub float %34, %multiply.58
  %37 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %32, float %subtract.60, 5
  %38 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %40 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.61 = fmul float %9, %41
  %subtract.63 = fsub float %39, %multiply.61
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %37, float %subtract.63, 6
  %43 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.64 = fmul float %9, %46
  %subtract.66 = fsub float %44, %multiply.64
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.66, 7
  %48 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %50 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %multiply.67 = fmul float %9, %51
  %subtract.69 = fsub float %49, %multiply.67
  %52 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.69, 8
  %53 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %54 = load float, ptr %53, align 4, !invariant.load !269
  %55 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %multiply.70 = fmul float %9, %56
  %subtract.72 = fsub float %54, %multiply.70
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %52, float %subtract.72, 9
  %58 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %60 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %61 = load float, ptr %60, align 4, !invariant.load !269
  %multiply.73 = fmul float %9, %61
  %subtract.75 = fsub float %59, %multiply.73
  %62 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.75, 10
  %63 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %64 = load float, ptr %63, align 4, !invariant.load !269
  %65 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %66 = load float, ptr %65, align 4, !invariant.load !269
  %multiply.76 = fmul float %9, %66
  %subtract.78 = fsub float %64, %multiply.76
  %67 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %62, float %subtract.78, 11
  %68 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %70 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %71 = load float, ptr %70, align 4, !invariant.load !269
  %multiply.79 = fmul float %9, %71
  %subtract.81 = fsub float %69, %multiply.79
  %72 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %67, float %subtract.81, 12
  %73 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %74 = load float, ptr %73, align 4, !invariant.load !269
  %75 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %multiply.82 = fmul float %9, %76
  %subtract.84 = fsub float %74, %multiply.82
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %72, float %subtract.84, 13
  %78 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %80 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %multiply.85 = fmul float %9, %81
  %subtract.87 = fsub float %79, %multiply.85
  %82 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.87, 14
  %83 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !269
  %85 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %multiply.88 = fmul float %9, %86
  %subtract.90 = fsub float %84, %multiply.88
  %87 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %82, float %subtract.90, 15
  %88 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %89 = load float, ptr %88, align 4, !invariant.load !269
  %90 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %91 = load float, ptr %90, align 4, !invariant.load !269
  %multiply.91 = fmul float %9, %91
  %subtract.93 = fsub float %89, %multiply.91
  %92 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, float %subtract.93, 16
  %93 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %94 = load float, ptr %93, align 4, !invariant.load !269
  %95 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %96 = load float, ptr %95, align 4, !invariant.load !269
  %multiply.94 = fmul float %9, %96
  %subtract.96 = fsub float %94, %multiply.94
  %97 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %92, float %subtract.96, 17
  %98 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %99 = load float, ptr %98, align 4, !invariant.load !269
  %100 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %101 = load float, ptr %100, align 4, !invariant.load !269
  %multiply.97 = fmul float %9, %101
  %subtract.99 = fsub float %99, %multiply.97
  %102 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %97, float %subtract.99, 18
  %103 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %105 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %106 = load float, ptr %105, align 4, !invariant.load !269
  %multiply.100 = fmul float %9, %106
  %subtract.102 = fsub float %104, %multiply.100
  %107 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %102, float %subtract.102, 19
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 0
  %109 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 1
  %111 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 2
  %113 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 3
  %115 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 4
  %117 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 5
  %119 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 6
  %121 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 7
  %123 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 8
  %125 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 9
  %127 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 10
  %129 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 11
  %131 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 12
  %133 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 13
  %135 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 14
  %137 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 15
  %139 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 16
  %141 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 17
  %143 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 18
  %145 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 19
  %147 = getelementptr inbounds float, ptr %arg60, i32 %linear_index
  store float %146, ptr %147, align 4
  br label %fusion_526.in_bounds-after
}

define void @concatenate_349(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(2097152) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(8650752) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !394
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 540672
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 264
  %5 = udiv i32 %linear_index_base, 264
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 264
  %8 = udiv i32 %linear_index1, 264
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 264
  %11 = udiv i32 %linear_index2, 264
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 264
  %14 = udiv i32 %linear_index3, 264
  %15 = icmp ult i32 %linear_index_base, 2162688
  br i1 %15, label %concatenate_349.in_bounds-true, label %concatenate_349.in_bounds-after

concatenate_349.in_bounds-after:                  ; preds = %concatenate.5.merge28, %entry
  ret void

concatenate_349.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 264
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 264
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 264
  %39 = mul i32 %38, 64
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 64
  %43 = udiv i32 %40, 64
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.256.3
  %46 = phi i32 [ 256, %concatenate.pivot.256.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 264
  %49 = mul i32 %48, 8
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 8
  %53 = udiv i32 %50, 8
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.5.merge

concatenate.pivot.192.:                           ; preds = %concatenate_349.in_bounds-true
  %56 = icmp ult i32 %4, 192
  br i1 %56, label %concatenate.pivot.64., label %concatenate.pivot.256.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %57 = icmp ult i32 %4, 64
  br i1 %57, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.256.:                           ; preds = %concatenate.pivot.192.
  %58 = icmp ult i32 %4, 256
  br i1 %58, label %concatenate.pivot.192.2, label %concatenate.pivot.256.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.256.
  br label %concat_index_from_operand_id2

concatenate.pivot.256.3:                          ; preds = %concatenate.pivot.256.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %59 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ]
  %60 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %59, ptr %60, align 4
  br label %concatenate.pivot.192.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %61 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %62 = sub nsw i32 %7, %61
  %63 = udiv i32 %linear_index1, 264
  %64 = mul i32 %63, 64
  %65 = add i32 %64, %62
  %66 = udiv i32 %65, 1
  %67 = urem i32 %66, 64
  %68 = udiv i32 %65, 64
  %69 = getelementptr inbounds float, ptr %arg0, i32 %65
  %70 = load float, ptr %69, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.64.12
  %71 = phi i32 [ 64, %concatenate.pivot.64.12 ]
  %72 = sub nsw i32 %7, %71
  %73 = udiv i32 %linear_index1, 264
  %74 = mul i32 %73, 128
  %75 = add i32 %74, %72
  %76 = udiv i32 %75, 1
  %77 = urem i32 %76, 128
  %78 = udiv i32 %75, 128
  %79 = getelementptr inbounds float, ptr %arg1, i32 %75
  %80 = load float, ptr %79, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.192.14
  %81 = phi i32 [ 192, %concatenate.pivot.192.14 ]
  %82 = sub nsw i32 %7, %81
  %83 = udiv i32 %linear_index1, 264
  %84 = mul i32 %83, 64
  %85 = add i32 %84, %82
  %86 = udiv i32 %85, 1
  %87 = urem i32 %86, 64
  %88 = udiv i32 %85, 64
  %89 = getelementptr inbounds float, ptr %arg2, i32 %85
  %90 = load float, ptr %89, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.256.15
  %91 = phi i32 [ 256, %concatenate.pivot.256.15 ]
  %92 = sub nsw i32 %7, %91
  %93 = udiv i32 %linear_index1, 264
  %94 = mul i32 %93, 8
  %95 = add i32 %94, %92
  %96 = udiv i32 %95, 1
  %97 = urem i32 %96, 8
  %98 = udiv i32 %95, 8
  %99 = getelementptr inbounds float, ptr %arg3, i32 %95
  %100 = load float, ptr %99, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concatenate.pivot.192.9:                          ; preds = %concatenate.5.merge
  %101 = icmp ult i32 %7, 192
  br i1 %101, label %concatenate.pivot.64.10, label %concatenate.pivot.256.13

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %102 = icmp ult i32 %7, 64
  br i1 %102, label %concatenate.pivot.0.11, label %concatenate.pivot.64.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id05

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id16

concatenate.pivot.256.13:                         ; preds = %concatenate.pivot.192.9
  %103 = icmp ult i32 %7, 256
  br i1 %103, label %concatenate.pivot.192.14, label %concatenate.pivot.256.15

concatenate.pivot.192.14:                         ; preds = %concatenate.pivot.256.13
  br label %concat_index_from_operand_id27

concatenate.pivot.256.15:                         ; preds = %concatenate.pivot.256.13
  br label %concat_index_from_operand_id38

concatenate.5.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %104 = phi float [ %70, %concat_index_from_operand_id05 ], [ %80, %concat_index_from_operand_id16 ], [ %90, %concat_index_from_operand_id27 ], [ %100, %concat_index_from_operand_id38 ]
  %105 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %104, ptr %105, align 4
  br label %concatenate.pivot.192.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %106 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %107 = sub nsw i32 %10, %106
  %108 = udiv i32 %linear_index2, 264
  %109 = mul i32 %108, 64
  %110 = add i32 %109, %107
  %111 = udiv i32 %110, 1
  %112 = urem i32 %111, 64
  %113 = udiv i32 %110, 64
  %114 = getelementptr inbounds float, ptr %arg0, i32 %110
  %115 = load float, ptr %114, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.64.24
  %116 = phi i32 [ 64, %concatenate.pivot.64.24 ]
  %117 = sub nsw i32 %10, %116
  %118 = udiv i32 %linear_index2, 264
  %119 = mul i32 %118, 128
  %120 = add i32 %119, %117
  %121 = udiv i32 %120, 1
  %122 = urem i32 %121, 128
  %123 = udiv i32 %120, 128
  %124 = getelementptr inbounds float, ptr %arg1, i32 %120
  %125 = load float, ptr %124, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.192.26
  %126 = phi i32 [ 192, %concatenate.pivot.192.26 ]
  %127 = sub nsw i32 %10, %126
  %128 = udiv i32 %linear_index2, 264
  %129 = mul i32 %128, 64
  %130 = add i32 %129, %127
  %131 = udiv i32 %130, 1
  %132 = urem i32 %131, 64
  %133 = udiv i32 %130, 64
  %134 = getelementptr inbounds float, ptr %arg2, i32 %130
  %135 = load float, ptr %134, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.256.27
  %136 = phi i32 [ 256, %concatenate.pivot.256.27 ]
  %137 = sub nsw i32 %10, %136
  %138 = udiv i32 %linear_index2, 264
  %139 = mul i32 %138, 8
  %140 = add i32 %139, %137
  %141 = udiv i32 %140, 1
  %142 = urem i32 %141, 8
  %143 = udiv i32 %140, 8
  %144 = getelementptr inbounds float, ptr %arg3, i32 %140
  %145 = load float, ptr %144, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concatenate.pivot.192.21:                         ; preds = %concatenate.5.merge4
  %146 = icmp ult i32 %10, 192
  br i1 %146, label %concatenate.pivot.64.22, label %concatenate.pivot.256.25

concatenate.pivot.64.22:                          ; preds = %concatenate.pivot.192.21
  %147 = icmp ult i32 %10, 64
  br i1 %147, label %concatenate.pivot.0.23, label %concatenate.pivot.64.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id017

concatenate.pivot.64.24:                          ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id118

concatenate.pivot.256.25:                         ; preds = %concatenate.pivot.192.21
  %148 = icmp ult i32 %10, 256
  br i1 %148, label %concatenate.pivot.192.26, label %concatenate.pivot.256.27

concatenate.pivot.192.26:                         ; preds = %concatenate.pivot.256.25
  br label %concat_index_from_operand_id219

concatenate.pivot.256.27:                         ; preds = %concatenate.pivot.256.25
  br label %concat_index_from_operand_id320

concatenate.5.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %149 = phi float [ %115, %concat_index_from_operand_id017 ], [ %125, %concat_index_from_operand_id118 ], [ %135, %concat_index_from_operand_id219 ], [ %145, %concat_index_from_operand_id320 ]
  %150 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %149, ptr %150, align 4
  br label %concatenate.pivot.192.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %151 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %152 = sub nsw i32 %13, %151
  %153 = udiv i32 %linear_index3, 264
  %154 = mul i32 %153, 64
  %155 = add i32 %154, %152
  %156 = udiv i32 %155, 1
  %157 = urem i32 %156, 64
  %158 = udiv i32 %155, 64
  %159 = getelementptr inbounds float, ptr %arg0, i32 %155
  %160 = load float, ptr %159, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.64.36
  %161 = phi i32 [ 64, %concatenate.pivot.64.36 ]
  %162 = sub nsw i32 %13, %161
  %163 = udiv i32 %linear_index3, 264
  %164 = mul i32 %163, 128
  %165 = add i32 %164, %162
  %166 = udiv i32 %165, 1
  %167 = urem i32 %166, 128
  %168 = udiv i32 %165, 128
  %169 = getelementptr inbounds float, ptr %arg1, i32 %165
  %170 = load float, ptr %169, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.192.38
  %171 = phi i32 [ 192, %concatenate.pivot.192.38 ]
  %172 = sub nsw i32 %13, %171
  %173 = udiv i32 %linear_index3, 264
  %174 = mul i32 %173, 64
  %175 = add i32 %174, %172
  %176 = udiv i32 %175, 1
  %177 = urem i32 %176, 64
  %178 = udiv i32 %175, 64
  %179 = getelementptr inbounds float, ptr %arg2, i32 %175
  %180 = load float, ptr %179, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.256.39
  %181 = phi i32 [ 256, %concatenate.pivot.256.39 ]
  %182 = sub nsw i32 %13, %181
  %183 = udiv i32 %linear_index3, 264
  %184 = mul i32 %183, 8
  %185 = add i32 %184, %182
  %186 = udiv i32 %185, 1
  %187 = urem i32 %186, 8
  %188 = udiv i32 %185, 8
  %189 = getelementptr inbounds float, ptr %arg3, i32 %185
  %190 = load float, ptr %189, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concatenate.pivot.192.33:                         ; preds = %concatenate.5.merge16
  %191 = icmp ult i32 %13, 192
  br i1 %191, label %concatenate.pivot.64.34, label %concatenate.pivot.256.37

concatenate.pivot.64.34:                          ; preds = %concatenate.pivot.192.33
  %192 = icmp ult i32 %13, 64
  br i1 %192, label %concatenate.pivot.0.35, label %concatenate.pivot.64.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id029

concatenate.pivot.64.36:                          ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id130

concatenate.pivot.256.37:                         ; preds = %concatenate.pivot.192.33
  %193 = icmp ult i32 %13, 256
  br i1 %193, label %concatenate.pivot.192.38, label %concatenate.pivot.256.39

concatenate.pivot.192.38:                         ; preds = %concatenate.pivot.256.37
  br label %concat_index_from_operand_id231

concatenate.pivot.256.39:                         ; preds = %concatenate.pivot.256.37
  br label %concat_index_from_operand_id332

concatenate.5.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %194 = phi float [ %160, %concat_index_from_operand_id029 ], [ %170, %concat_index_from_operand_id130 ], [ %180, %concat_index_from_operand_id231 ], [ %190, %concat_index_from_operand_id332 ]
  %195 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %194, ptr %195, align 4
  br label %concatenate_349.in_bounds-after
}

define void @concatenate_370(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 16 dereferenceable(1048576) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(9961472) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !395
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 622592
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 304
  %5 = udiv i32 %linear_index_base, 304
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 304
  %8 = udiv i32 %linear_index1, 304
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 304
  %11 = udiv i32 %linear_index2, 304
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 304
  %14 = udiv i32 %linear_index3, 304
  %15 = icmp ult i32 %linear_index_base, 2490368
  br i1 %15, label %concatenate_370.in_bounds-true, label %concatenate_370.in_bounds-after

concatenate_370.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_370.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.16.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 304
  %19 = mul i32 %18, 16
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 16
  %23 = udiv i32 %20, 16
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.16.1
  %26 = phi i32 [ 16, %concatenate.pivot.16.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 304
  %29 = mul i32 %28, 32
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 32
  %33 = udiv i32 %30, 32
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %36 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 304
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.16.:                            ; preds = %concatenate_370.in_bounds-true
  %46 = icmp ult i32 %4, 16
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.16.
  %47 = icmp ult i32 %4, 48
  br i1 %47, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.16.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 304
  %53 = mul i32 %52, 16
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 16
  %57 = udiv i32 %54, 16
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.16.10
  %60 = phi i32 [ 16, %concatenate.pivot.16.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 304
  %63 = mul i32 %62, 32
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 32
  %67 = udiv i32 %64, 32
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.48.11
  %70 = phi i32 [ 48, %concatenate.pivot.48.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 304
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.16.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 16
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.48.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.16.7
  br label %concat_index_from_operand_id04

concatenate.pivot.48.9:                           ; preds = %concatenate.pivot.16.7
  %81 = icmp ult i32 %7, 48
  br i1 %81, label %concatenate.pivot.16.10, label %concatenate.pivot.48.11

concatenate.pivot.16.10:                          ; preds = %concatenate.pivot.48.9
  br label %concat_index_from_operand_id15

concatenate.pivot.48.11:                          ; preds = %concatenate.pivot.48.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.16.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 304
  %87 = mul i32 %86, 16
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 16
  %91 = udiv i32 %88, 16
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.16.19
  %94 = phi i32 [ 16, %concatenate.pivot.16.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 304
  %97 = mul i32 %96, 32
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 32
  %101 = udiv i32 %98, 32
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.48.20
  %104 = phi i32 [ 48, %concatenate.pivot.48.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 304
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.16.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 16
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.48.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.16.16
  br label %concat_index_from_operand_id013

concatenate.pivot.48.18:                          ; preds = %concatenate.pivot.16.16
  %115 = icmp ult i32 %10, 48
  br i1 %115, label %concatenate.pivot.16.19, label %concatenate.pivot.48.20

concatenate.pivot.16.19:                          ; preds = %concatenate.pivot.48.18
  br label %concat_index_from_operand_id114

concatenate.pivot.48.20:                          ; preds = %concatenate.pivot.48.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.16.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 304
  %121 = mul i32 %120, 16
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 16
  %125 = udiv i32 %122, 16
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.16.28
  %128 = phi i32 [ 16, %concatenate.pivot.16.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 304
  %131 = mul i32 %130, 32
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 32
  %135 = udiv i32 %132, 32
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.48.29
  %138 = phi i32 [ 48, %concatenate.pivot.48.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 304
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.16.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 16
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.48.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.16.25
  br label %concat_index_from_operand_id022

concatenate.pivot.48.27:                          ; preds = %concatenate.pivot.16.25
  %149 = icmp ult i32 %13, 48
  br i1 %149, label %concatenate.pivot.16.28, label %concatenate.pivot.48.29

concatenate.pivot.16.28:                          ; preds = %concatenate.pivot.48.27
  br label %concat_index_from_operand_id123

concatenate.pivot.48.29:                          ; preds = %concatenate.pivot.48.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_370.in_bounds-after
}

define void @fusion_390(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 128 dereferenceable(147456) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(16384) %arg3, ptr noalias align 16 dereferenceable(16384) %arg4, ptr noalias align 16 dereferenceable(16384) %arg5, ptr noalias align 128 dereferenceable(311296) %arg6, ptr noalias align 16 dereferenceable(16384) %arg7, ptr noalias align 128 dereferenceable(311296) %arg8, ptr noalias align 16 dereferenceable(16384) %arg9, ptr noalias align 128 dereferenceable(311296) %arg10, ptr noalias align 16 dereferenceable(16384) %arg11, ptr noalias align 128 dereferenceable(311296) %arg12, ptr noalias align 16 dereferenceable(16384) %arg13, ptr noalias align 128 dereferenceable(311296) %arg14, ptr noalias align 128 dereferenceable(16384) %arg15, ptr noalias align 128 dereferenceable(16384) %arg16, ptr noalias align 128 dereferenceable(16384) %arg17, ptr noalias align 128 dereferenceable(16384) %arg18, ptr noalias align 128 dereferenceable(16384) %arg19, ptr noalias align 128 dereferenceable(16384) %arg20, ptr noalias align 128 dereferenceable(16384) %arg21, ptr noalias align 128 dereferenceable(16384) %arg22) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 4096
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 4096
  br i1 %6, label %fusion_390.in_bounds-true, label %fusion_390.in_bounds-after

fusion_390.in_bounds-after:                       ; preds = %fusion_390.in_bounds-true, %entry
  ret void

fusion_390.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 128
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.18 = fmul float %9, %13
  %subtract.19 = fsub float %8, %multiply.18
  %14 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.19, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 32
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.21 = fmul float %9, %20
  %subtract.22 = fsub float %16, %multiply.21
  %21 = insertvalue { float, float, float, float, float, float, float, float } %14, float %subtract.22, 1
  %22 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 80
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.24 = fmul float %9, %27
  %subtract.25 = fsub float %23, %multiply.24
  %28 = insertvalue { float, float, float, float, float, float, float, float } %21, float %subtract.25, 2
  %29 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [304 x [256 x float]], ptr %arg6, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.27 = fmul float %9, %34
  %subtract.28 = fsub float %30, %multiply.27
  %35 = insertvalue { float, float, float, float, float, float, float, float } %28, float %subtract.28, 3
  %36 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [304 x [256 x float]], ptr %arg8, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.30 = fmul float %9, %41
  %subtract.31 = fsub float %37, %multiply.30
  %42 = insertvalue { float, float, float, float, float, float, float, float } %35, float %subtract.31, 4
  %43 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [304 x [256 x float]], ptr %arg10, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.33 = fmul float %9, %48
  %subtract.34 = fsub float %44, %multiply.33
  %49 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.34, 5
  %50 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [304 x [256 x float]], ptr %arg12, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.36 = fmul float %9, %55
  %subtract.37 = fsub float %51, %multiply.36
  %56 = insertvalue { float, float, float, float, float, float, float, float } %49, float %subtract.37, 6
  %57 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [304 x [256 x float]], ptr %arg14, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.39 = fmul float %9, %62
  %subtract.40 = fsub float %58, %multiply.39
  %63 = insertvalue { float, float, float, float, float, float, float, float } %56, float %subtract.40, 7
  %64 = extractvalue { float, float, float, float, float, float, float, float } %63, 0
  %65 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %64, ptr %65, align 4
  %66 = extractvalue { float, float, float, float, float, float, float, float } %63, 1
  %67 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float } %63, 2
  %69 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float } %63, 3
  %71 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float } %63, 4
  %73 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float } %63, 5
  %75 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float } %63, 6
  %77 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float } %63, 7
  %79 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %78, ptr %79, align 4
  br label %fusion_390.in_bounds-after
}

define void @fusion_235(ptr noalias align 128 dereferenceable(10485760) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @39, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !396

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !397

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_16_constant_3 = load float, ptr @38, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 192
  %Arg_0.1 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__2(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_16_constant_37 = load float, ptr @38, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 192
  %Arg_0.19 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 128
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 16384
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 128
  %130 = udiv i32 %127, 128
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 16384
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 128
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_16_constant_316 = load float, ptr @38, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 192
  %Arg_0.118 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__2(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 128
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_16_constant_323 = load float, ptr @38, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 192
  %Arg_0.125 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 128
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 128
  %180 = udiv i32 %177, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 128
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 128
  %189 = udiv i32 %186, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__2(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_304(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40, ptr noalias align 128 dereferenceable(512) %arg41, ptr noalias align 128 dereferenceable(512) %arg42, ptr noalias align 128 dereferenceable(512) %arg43, ptr noalias align 128 dereferenceable(512) %arg44, ptr noalias align 128 dereferenceable(512) %arg45) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 128
  br i1 %4, label %fusion_304.in_bounds-true, label %fusion_304.in_bounds-after

fusion_304.in_bounds-after:                       ; preds = %fusion_304.in_bounds-true, %entry
  ret void

fusion_304.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !269
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !269
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !269
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !269
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !269
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4, !invariant.load !269
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !269
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4, !invariant.load !269
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4, !invariant.load !269
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_304.in_bounds-after
}

define void @fusion_232(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 128
  br i1 %4, label %fusion_232.in_bounds-true, label %fusion_232.in_bounds-after

fusion_232.in_bounds-after:                       ; preds = %fusion_232.in_bounds-true, %entry
  ret void

fusion_232.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !269
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !269
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !269
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !269
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !269
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !269
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_232.in_bounds-after
}

define void @concatenate_341(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(10485760) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !398
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 655360
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 320
  %5 = udiv i32 %linear_index_base, 320
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 320
  %8 = udiv i32 %linear_index1, 320
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 320
  %11 = udiv i32 %linear_index2, 320
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 320
  %14 = udiv i32 %linear_index3, 320
  %15 = icmp ult i32 %linear_index_base, 2621440
  br i1 %15, label %concatenate_341.in_bounds-true, label %concatenate_341.in_bounds-after

concatenate_341.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_341.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 320
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 320
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 320
  %39 = mul i32 %38, 128
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 128
  %43 = udiv i32 %40, 128
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_341.in_bounds-true
  %46 = icmp ult i32 %4, 64
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %47 = icmp ult i32 %4, 192
  br i1 %47, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 320
  %53 = mul i32 %52, 64
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 64
  %57 = udiv i32 %54, 64
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %60 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 320
  %63 = mul i32 %62, 128
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 128
  %67 = udiv i32 %64, 128
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %70 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 320
  %73 = mul i32 %72, 128
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 128
  %77 = udiv i32 %74, 128
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 64
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %81 = icmp ult i32 %7, 192
  br i1 %81, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 320
  %87 = mul i32 %86, 64
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 64
  %91 = udiv i32 %88, 64
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %94 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 320
  %97 = mul i32 %96, 128
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 128
  %101 = udiv i32 %98, 128
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %104 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 320
  %107 = mul i32 %106, 128
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 128
  %111 = udiv i32 %108, 128
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 64
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %115 = icmp ult i32 %10, 192
  br i1 %115, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 320
  %121 = mul i32 %120, 64
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 64
  %125 = udiv i32 %122, 64
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %128 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 320
  %131 = mul i32 %130, 128
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %138 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 320
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 64
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %149 = icmp ult i32 %13, 192
  br i1 %149, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_341.in_bounds-after
}

define void @fusion_185(ptr noalias align 128 dereferenceable(11534336) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @41, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !399

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !400

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_16_constant_3 = load float, ptr @40, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 96
  %Arg_0.1 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__3(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_16_constant_37 = load float, ptr @40, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 96
  %Arg_0.19 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_16_constant_316 = load float, ptr @40, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 96
  %Arg_0.118 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__3(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_16_constant_323 = load float, ptr @40, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 96
  %Arg_0.125 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__3(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_756(ptr noalias align 128 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(65536) %arg3, ptr noalias align 128 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(65536) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 128 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 128 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !361
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 4
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 4
  %18 = udiv i32 %13, 4
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 4
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 3
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !401

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !402

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7__2(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7__2(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 256
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 256
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 4
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 4
  %110 = udiv i32 %105, 4
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 4
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 3
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !403

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !404

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12__1(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !269
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12__1(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 256
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 256
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !269
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 4
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 4
  %202 = udiv i32 %197, 4
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 4
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 3
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !405

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !406

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17__1(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !269
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17__1(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 256
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 256
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !269
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 4
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 4
  %294 = udiv i32 %289, 4
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 4
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 3
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !407

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !408

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22__1(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22__1(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 256
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [256 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 256
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [256 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !269
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 4
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 4
  %386 = udiv i32 %381, 4
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 4
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 3
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !409

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !410

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [256 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27__1(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [256 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !269
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27__1(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 256
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [256 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 256
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [256 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7__2(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12__1(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17__1(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22__1(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27__1(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_344(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(11534336) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !411
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 720896
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 352
  %5 = udiv i32 %linear_index_base, 352
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 352
  %8 = udiv i32 %linear_index1, 352
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 352
  %11 = udiv i32 %linear_index2, 352
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 352
  %14 = udiv i32 %linear_index3, 352
  %15 = icmp ult i32 %linear_index_base, 2883584
  br i1 %15, label %concatenate_344.in_bounds-true, label %concatenate_344.in_bounds-after

concatenate_344.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_344.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 352
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 352
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 352
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_344.in_bounds-true
  %46 = icmp ult i32 %4, 32
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %47 = icmp ult i32 %4, 96
  br i1 %47, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.32.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 352
  %53 = mul i32 %52, 32
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 32
  %57 = udiv i32 %54, 32
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.32.10
  %60 = phi i32 [ 32, %concatenate.pivot.32.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 352
  %63 = mul i32 %62, 64
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 64
  %67 = udiv i32 %64, 64
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.96.11
  %70 = phi i32 [ 96, %concatenate.pivot.96.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 352
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.32.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 32
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.32.7
  br label %concat_index_from_operand_id04

concatenate.pivot.96.9:                           ; preds = %concatenate.pivot.32.7
  %81 = icmp ult i32 %7, 96
  br i1 %81, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id15

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.32.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 352
  %87 = mul i32 %86, 32
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 32
  %91 = udiv i32 %88, 32
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.32.19
  %94 = phi i32 [ 32, %concatenate.pivot.32.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 352
  %97 = mul i32 %96, 64
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 64
  %101 = udiv i32 %98, 64
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.96.20
  %104 = phi i32 [ 96, %concatenate.pivot.96.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 352
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.32.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 32
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.32.16
  br label %concat_index_from_operand_id013

concatenate.pivot.96.18:                          ; preds = %concatenate.pivot.32.16
  %115 = icmp ult i32 %10, 96
  br i1 %115, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id114

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.32.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 352
  %121 = mul i32 %120, 32
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 32
  %125 = udiv i32 %122, 32
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.32.28
  %128 = phi i32 [ 32, %concatenate.pivot.32.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 352
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.96.29
  %138 = phi i32 [ 96, %concatenate.pivot.96.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 352
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.32.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 32
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.32.25
  br label %concat_index_from_operand_id022

concatenate.pivot.96.27:                          ; preds = %concatenate.pivot.32.25
  %149 = icmp ult i32 %13, 96
  br i1 %149, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id123

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_344.in_bounds-after
}

define void @fusion_279(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 128 dereferenceable(114688) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(16384) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(16384) %arg5, ptr noalias align 128 dereferenceable(180224) %arg6, ptr noalias align 16 dereferenceable(16384) %arg7, ptr noalias align 128 dereferenceable(180224) %arg8, ptr noalias align 16 dereferenceable(16384) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(16384) %arg11, ptr noalias align 128 dereferenceable(114688) %arg12, ptr noalias align 16 dereferenceable(16384) %arg13, ptr noalias align 128 dereferenceable(114688) %arg14, ptr noalias align 16 dereferenceable(16384) %arg15, ptr noalias align 128 dereferenceable(114688) %arg16, ptr noalias align 128 dereferenceable(16384) %arg17, ptr noalias align 128 dereferenceable(16384) %arg18, ptr noalias align 128 dereferenceable(16384) %arg19, ptr noalias align 128 dereferenceable(16384) %arg20, ptr noalias align 128 dereferenceable(16384) %arg21, ptr noalias align 128 dereferenceable(16384) %arg22, ptr noalias align 128 dereferenceable(16384) %arg23, ptr noalias align 128 dereferenceable(16384) %arg24) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !321
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 4096
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 4096
  br i1 %6, label %fusion_279.in_bounds-true, label %fusion_279.in_bounds-after

fusion_279.in_bounds-after:                       ; preds = %fusion_279.in_bounds-true, %entry
  ret void

fusion_279.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [224 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.20 = fmul float %9, %13
  %subtract.21 = fsub float %8, %multiply.20
  %14 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.21, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 0
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.23 = fmul float %9, %20
  %subtract.24 = fsub float %16, %multiply.23
  %21 = insertvalue { float, float, float, float, float, float, float, float } %14, float %subtract.24, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [352 x [128 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.26 = fmul float %9, %27
  %subtract.27 = fsub float %23, %multiply.26
  %28 = insertvalue { float, float, float, float, float, float, float, float } %21, float %subtract.27, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [128 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.29 = fmul float %9, %34
  %subtract.30 = fsub float %30, %multiply.29
  %35 = insertvalue { float, float, float, float, float, float, float, float } %28, float %subtract.30, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.32 = fmul float %9, %41
  %subtract.33 = fsub float %37, %multiply.32
  %42 = insertvalue { float, float, float, float, float, float, float, float } %35, float %subtract.33, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [224 x [128 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.35 = fmul float %9, %48
  %subtract.36 = fsub float %44, %multiply.35
  %49 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.36, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [224 x [128 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.38 = fmul float %9, %55
  %subtract.39 = fsub float %51, %multiply.38
  %56 = insertvalue { float, float, float, float, float, float, float, float } %49, float %subtract.39, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [224 x [128 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.41 = fmul float %9, %62
  %subtract.42 = fsub float %58, %multiply.41
  %63 = insertvalue { float, float, float, float, float, float, float, float } %56, float %subtract.42, 7
  %64 = extractvalue { float, float, float, float, float, float, float, float } %63, 0
  %65 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %64, ptr %65, align 4
  %66 = extractvalue { float, float, float, float, float, float, float, float } %63, 1
  %67 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float } %63, 2
  %69 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float } %63, 3
  %71 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float } %63, 4
  %73 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float } %63, 5
  %75 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float } %63, 6
  %77 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float } %63, 7
  %79 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %78, ptr %79, align 4
  br label %fusion_279.in_bounds-after
}

define void @concatenate_382(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 16 dereferenceable(8388608) %arg3, ptr noalias align 128 dereferenceable(11796480) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !412
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 737280
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 360
  %5 = udiv i32 %linear_index_base, 360
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 360
  %8 = udiv i32 %linear_index1, 360
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 360
  %11 = udiv i32 %linear_index2, 360
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 360
  %14 = udiv i32 %linear_index3, 360
  %15 = icmp ult i32 %linear_index_base, 2949120
  br i1 %15, label %concatenate_382.in_bounds-true, label %concatenate_382.in_bounds-after

concatenate_382.in_bounds-after:                  ; preds = %concatenate.5.merge28, %entry
  ret void

concatenate_382.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 360
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 360
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 360
  %39 = mul i32 %38, 8
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 8
  %43 = udiv i32 %40, 8
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %46 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 360
  %49 = mul i32 %48, 256
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 256
  %53 = udiv i32 %50, 256
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.5.merge

concatenate.pivot.96.:                            ; preds = %concatenate_382.in_bounds-true
  %56 = icmp ult i32 %4, 96
  br i1 %56, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %57 = icmp ult i32 %4, 32
  br i1 %57, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %58 = icmp ult i32 %4, 104
  br i1 %58, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %59 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ]
  %60 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %59, ptr %60, align 4
  br label %concatenate.pivot.96.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %61 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %62 = sub nsw i32 %7, %61
  %63 = udiv i32 %linear_index1, 360
  %64 = mul i32 %63, 32
  %65 = add i32 %64, %62
  %66 = udiv i32 %65, 1
  %67 = urem i32 %66, 32
  %68 = udiv i32 %65, 32
  %69 = getelementptr inbounds float, ptr %arg0, i32 %65
  %70 = load float, ptr %69, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.32.12
  %71 = phi i32 [ 32, %concatenate.pivot.32.12 ]
  %72 = sub nsw i32 %7, %71
  %73 = udiv i32 %linear_index1, 360
  %74 = mul i32 %73, 64
  %75 = add i32 %74, %72
  %76 = udiv i32 %75, 1
  %77 = urem i32 %76, 64
  %78 = udiv i32 %75, 64
  %79 = getelementptr inbounds float, ptr %arg1, i32 %75
  %80 = load float, ptr %79, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.96.14
  %81 = phi i32 [ 96, %concatenate.pivot.96.14 ]
  %82 = sub nsw i32 %7, %81
  %83 = udiv i32 %linear_index1, 360
  %84 = mul i32 %83, 8
  %85 = add i32 %84, %82
  %86 = udiv i32 %85, 1
  %87 = urem i32 %86, 8
  %88 = udiv i32 %85, 8
  %89 = getelementptr inbounds float, ptr %arg2, i32 %85
  %90 = load float, ptr %89, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.104.15
  %91 = phi i32 [ 104, %concatenate.pivot.104.15 ]
  %92 = sub nsw i32 %7, %91
  %93 = udiv i32 %linear_index1, 360
  %94 = mul i32 %93, 256
  %95 = add i32 %94, %92
  %96 = udiv i32 %95, 1
  %97 = urem i32 %96, 256
  %98 = udiv i32 %95, 256
  %99 = getelementptr inbounds float, ptr %arg3, i32 %95
  %100 = load float, ptr %99, align 4, !invariant.load !269
  br label %concatenate.5.merge4

concatenate.pivot.96.9:                           ; preds = %concatenate.5.merge
  %101 = icmp ult i32 %7, 96
  br i1 %101, label %concatenate.pivot.32.10, label %concatenate.pivot.104.13

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  %102 = icmp ult i32 %7, 32
  br i1 %102, label %concatenate.pivot.0.11, label %concatenate.pivot.32.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.32.10
  br label %concat_index_from_operand_id05

concatenate.pivot.32.12:                          ; preds = %concatenate.pivot.32.10
  br label %concat_index_from_operand_id16

concatenate.pivot.104.13:                         ; preds = %concatenate.pivot.96.9
  %103 = icmp ult i32 %7, 104
  br i1 %103, label %concatenate.pivot.96.14, label %concatenate.pivot.104.15

concatenate.pivot.96.14:                          ; preds = %concatenate.pivot.104.13
  br label %concat_index_from_operand_id27

concatenate.pivot.104.15:                         ; preds = %concatenate.pivot.104.13
  br label %concat_index_from_operand_id38

concatenate.5.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %104 = phi float [ %70, %concat_index_from_operand_id05 ], [ %80, %concat_index_from_operand_id16 ], [ %90, %concat_index_from_operand_id27 ], [ %100, %concat_index_from_operand_id38 ]
  %105 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %104, ptr %105, align 4
  br label %concatenate.pivot.96.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %106 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %107 = sub nsw i32 %10, %106
  %108 = udiv i32 %linear_index2, 360
  %109 = mul i32 %108, 32
  %110 = add i32 %109, %107
  %111 = udiv i32 %110, 1
  %112 = urem i32 %111, 32
  %113 = udiv i32 %110, 32
  %114 = getelementptr inbounds float, ptr %arg0, i32 %110
  %115 = load float, ptr %114, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.32.24
  %116 = phi i32 [ 32, %concatenate.pivot.32.24 ]
  %117 = sub nsw i32 %10, %116
  %118 = udiv i32 %linear_index2, 360
  %119 = mul i32 %118, 64
  %120 = add i32 %119, %117
  %121 = udiv i32 %120, 1
  %122 = urem i32 %121, 64
  %123 = udiv i32 %120, 64
  %124 = getelementptr inbounds float, ptr %arg1, i32 %120
  %125 = load float, ptr %124, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.96.26
  %126 = phi i32 [ 96, %concatenate.pivot.96.26 ]
  %127 = sub nsw i32 %10, %126
  %128 = udiv i32 %linear_index2, 360
  %129 = mul i32 %128, 8
  %130 = add i32 %129, %127
  %131 = udiv i32 %130, 1
  %132 = urem i32 %131, 8
  %133 = udiv i32 %130, 8
  %134 = getelementptr inbounds float, ptr %arg2, i32 %130
  %135 = load float, ptr %134, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.104.27
  %136 = phi i32 [ 104, %concatenate.pivot.104.27 ]
  %137 = sub nsw i32 %10, %136
  %138 = udiv i32 %linear_index2, 360
  %139 = mul i32 %138, 256
  %140 = add i32 %139, %137
  %141 = udiv i32 %140, 1
  %142 = urem i32 %141, 256
  %143 = udiv i32 %140, 256
  %144 = getelementptr inbounds float, ptr %arg3, i32 %140
  %145 = load float, ptr %144, align 4, !invariant.load !269
  br label %concatenate.5.merge16

concatenate.pivot.96.21:                          ; preds = %concatenate.5.merge4
  %146 = icmp ult i32 %10, 96
  br i1 %146, label %concatenate.pivot.32.22, label %concatenate.pivot.104.25

concatenate.pivot.32.22:                          ; preds = %concatenate.pivot.96.21
  %147 = icmp ult i32 %10, 32
  br i1 %147, label %concatenate.pivot.0.23, label %concatenate.pivot.32.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.32.22
  br label %concat_index_from_operand_id017

concatenate.pivot.32.24:                          ; preds = %concatenate.pivot.32.22
  br label %concat_index_from_operand_id118

concatenate.pivot.104.25:                         ; preds = %concatenate.pivot.96.21
  %148 = icmp ult i32 %10, 104
  br i1 %148, label %concatenate.pivot.96.26, label %concatenate.pivot.104.27

concatenate.pivot.96.26:                          ; preds = %concatenate.pivot.104.25
  br label %concat_index_from_operand_id219

concatenate.pivot.104.27:                         ; preds = %concatenate.pivot.104.25
  br label %concat_index_from_operand_id320

concatenate.5.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %149 = phi float [ %115, %concat_index_from_operand_id017 ], [ %125, %concat_index_from_operand_id118 ], [ %135, %concat_index_from_operand_id219 ], [ %145, %concat_index_from_operand_id320 ]
  %150 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %149, ptr %150, align 4
  br label %concatenate.pivot.96.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %151 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %152 = sub nsw i32 %13, %151
  %153 = udiv i32 %linear_index3, 360
  %154 = mul i32 %153, 32
  %155 = add i32 %154, %152
  %156 = udiv i32 %155, 1
  %157 = urem i32 %156, 32
  %158 = udiv i32 %155, 32
  %159 = getelementptr inbounds float, ptr %arg0, i32 %155
  %160 = load float, ptr %159, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.32.36
  %161 = phi i32 [ 32, %concatenate.pivot.32.36 ]
  %162 = sub nsw i32 %13, %161
  %163 = udiv i32 %linear_index3, 360
  %164 = mul i32 %163, 64
  %165 = add i32 %164, %162
  %166 = udiv i32 %165, 1
  %167 = urem i32 %166, 64
  %168 = udiv i32 %165, 64
  %169 = getelementptr inbounds float, ptr %arg1, i32 %165
  %170 = load float, ptr %169, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.96.38
  %171 = phi i32 [ 96, %concatenate.pivot.96.38 ]
  %172 = sub nsw i32 %13, %171
  %173 = udiv i32 %linear_index3, 360
  %174 = mul i32 %173, 8
  %175 = add i32 %174, %172
  %176 = udiv i32 %175, 1
  %177 = urem i32 %176, 8
  %178 = udiv i32 %175, 8
  %179 = getelementptr inbounds float, ptr %arg2, i32 %175
  %180 = load float, ptr %179, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.104.39
  %181 = phi i32 [ 104, %concatenate.pivot.104.39 ]
  %182 = sub nsw i32 %13, %181
  %183 = udiv i32 %linear_index3, 360
  %184 = mul i32 %183, 256
  %185 = add i32 %184, %182
  %186 = udiv i32 %185, 1
  %187 = urem i32 %186, 256
  %188 = udiv i32 %185, 256
  %189 = getelementptr inbounds float, ptr %arg3, i32 %185
  %190 = load float, ptr %189, align 4, !invariant.load !269
  br label %concatenate.5.merge28

concatenate.pivot.96.33:                          ; preds = %concatenate.5.merge16
  %191 = icmp ult i32 %13, 96
  br i1 %191, label %concatenate.pivot.32.34, label %concatenate.pivot.104.37

concatenate.pivot.32.34:                          ; preds = %concatenate.pivot.96.33
  %192 = icmp ult i32 %13, 32
  br i1 %192, label %concatenate.pivot.0.35, label %concatenate.pivot.32.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.32.34
  br label %concat_index_from_operand_id029

concatenate.pivot.32.36:                          ; preds = %concatenate.pivot.32.34
  br label %concat_index_from_operand_id130

concatenate.pivot.104.37:                         ; preds = %concatenate.pivot.96.33
  %193 = icmp ult i32 %13, 104
  br i1 %193, label %concatenate.pivot.96.38, label %concatenate.pivot.104.39

concatenate.pivot.96.38:                          ; preds = %concatenate.pivot.104.37
  br label %concat_index_from_operand_id231

concatenate.pivot.104.39:                         ; preds = %concatenate.pivot.104.37
  br label %concat_index_from_operand_id332

concatenate.5.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %194 = phi float [ %160, %concat_index_from_operand_id029 ], [ %170, %concat_index_from_operand_id130 ], [ %180, %concat_index_from_operand_id231 ], [ %190, %concat_index_from_operand_id332 ]
  %195 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %194, ptr %195, align 4
  br label %concatenate_382.in_bounds-after
}

define void @concatenate_381(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 16 dereferenceable(786432) %arg3, ptr noalias align 16 dereferenceable(8388608) %arg4, ptr noalias align 128 dereferenceable(12582912) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !413
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 786432
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 384
  %5 = udiv i32 %linear_index_base, 384
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 384
  %8 = udiv i32 %linear_index1, 384
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 384
  %11 = udiv i32 %linear_index2, 384
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 384
  %14 = udiv i32 %linear_index3, 384
  %15 = icmp ult i32 %linear_index_base, 3145728
  br i1 %15, label %concatenate_381.in_bounds-true, label %concatenate_381.in_bounds-after

concatenate_381.in_bounds-after:                  ; preds = %concatenate.6.merge35, %entry
  ret void

concatenate_381.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 384
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 384
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 384
  %39 = mul i32 %38, 8
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 8
  %43 = udiv i32 %40, 8
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %46 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 384
  %49 = mul i32 %48, 24
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 24
  %53 = udiv i32 %50, 24
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.128.4
  %56 = phi i32 [ 128, %concatenate.pivot.128.4 ]
  %57 = sub nsw i32 %4, %56
  %58 = udiv i32 %linear_index_base, 384
  %59 = mul i32 %58, 256
  %60 = add i32 %59, %57
  %61 = udiv i32 %60, 1
  %62 = urem i32 %61, 256
  %63 = udiv i32 %60, 256
  %64 = getelementptr inbounds float, ptr %arg4, i32 %60
  %65 = load float, ptr %64, align 4, !invariant.load !269
  br label %concatenate.6.merge

concatenate.pivot.96.:                            ; preds = %concatenate_381.in_bounds-true
  %66 = icmp ult i32 %4, 96
  br i1 %66, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %67 = icmp ult i32 %4, 32
  br i1 %67, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %68 = icmp ult i32 %4, 104
  br i1 %68, label %concatenate.pivot.96.2, label %concatenate.pivot.128.

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.128.:                           ; preds = %concatenate.pivot.104.
  %69 = icmp ult i32 %4, 128
  br i1 %69, label %concatenate.pivot.104.3, label %concatenate.pivot.128.4

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id3

concatenate.pivot.128.4:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %70 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ], [ %65, %concat_index_from_operand_id4 ]
  %71 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  store float %70, ptr %71, align 4
  br label %concatenate.pivot.96.11

concat_index_from_operand_id06:                   ; preds = %concatenate.pivot.0.13
  %72 = phi i32 [ 0, %concatenate.pivot.0.13 ]
  %73 = sub nsw i32 %7, %72
  %74 = udiv i32 %linear_index1, 384
  %75 = mul i32 %74, 32
  %76 = add i32 %75, %73
  %77 = udiv i32 %76, 1
  %78 = urem i32 %77, 32
  %79 = udiv i32 %76, 32
  %80 = getelementptr inbounds float, ptr %arg0, i32 %76
  %81 = load float, ptr %80, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id17:                   ; preds = %concatenate.pivot.32.14
  %82 = phi i32 [ 32, %concatenate.pivot.32.14 ]
  %83 = sub nsw i32 %7, %82
  %84 = udiv i32 %linear_index1, 384
  %85 = mul i32 %84, 64
  %86 = add i32 %85, %83
  %87 = udiv i32 %86, 1
  %88 = urem i32 %87, 64
  %89 = udiv i32 %86, 64
  %90 = getelementptr inbounds float, ptr %arg1, i32 %86
  %91 = load float, ptr %90, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id28:                   ; preds = %concatenate.pivot.96.16
  %92 = phi i32 [ 96, %concatenate.pivot.96.16 ]
  %93 = sub nsw i32 %7, %92
  %94 = udiv i32 %linear_index1, 384
  %95 = mul i32 %94, 8
  %96 = add i32 %95, %93
  %97 = udiv i32 %96, 1
  %98 = urem i32 %97, 8
  %99 = udiv i32 %96, 8
  %100 = getelementptr inbounds float, ptr %arg2, i32 %96
  %101 = load float, ptr %100, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id39:                   ; preds = %concatenate.pivot.104.18
  %102 = phi i32 [ 104, %concatenate.pivot.104.18 ]
  %103 = sub nsw i32 %7, %102
  %104 = udiv i32 %linear_index1, 384
  %105 = mul i32 %104, 24
  %106 = add i32 %105, %103
  %107 = udiv i32 %106, 1
  %108 = urem i32 %107, 24
  %109 = udiv i32 %106, 24
  %110 = getelementptr inbounds float, ptr %arg3, i32 %106
  %111 = load float, ptr %110, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id410:                  ; preds = %concatenate.pivot.128.19
  %112 = phi i32 [ 128, %concatenate.pivot.128.19 ]
  %113 = sub nsw i32 %7, %112
  %114 = udiv i32 %linear_index1, 384
  %115 = mul i32 %114, 256
  %116 = add i32 %115, %113
  %117 = udiv i32 %116, 1
  %118 = urem i32 %117, 256
  %119 = udiv i32 %116, 256
  %120 = getelementptr inbounds float, ptr %arg4, i32 %116
  %121 = load float, ptr %120, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concatenate.pivot.96.11:                          ; preds = %concatenate.6.merge
  %122 = icmp ult i32 %7, 96
  br i1 %122, label %concatenate.pivot.32.12, label %concatenate.pivot.104.15

concatenate.pivot.32.12:                          ; preds = %concatenate.pivot.96.11
  %123 = icmp ult i32 %7, 32
  br i1 %123, label %concatenate.pivot.0.13, label %concatenate.pivot.32.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.32.12
  br label %concat_index_from_operand_id06

concatenate.pivot.32.14:                          ; preds = %concatenate.pivot.32.12
  br label %concat_index_from_operand_id17

concatenate.pivot.104.15:                         ; preds = %concatenate.pivot.96.11
  %124 = icmp ult i32 %7, 104
  br i1 %124, label %concatenate.pivot.96.16, label %concatenate.pivot.128.17

concatenate.pivot.96.16:                          ; preds = %concatenate.pivot.104.15
  br label %concat_index_from_operand_id28

concatenate.pivot.128.17:                         ; preds = %concatenate.pivot.104.15
  %125 = icmp ult i32 %7, 128
  br i1 %125, label %concatenate.pivot.104.18, label %concatenate.pivot.128.19

concatenate.pivot.104.18:                         ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id39

concatenate.pivot.128.19:                         ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id410

concatenate.6.merge5:                             ; preds = %concat_index_from_operand_id410, %concat_index_from_operand_id39, %concat_index_from_operand_id28, %concat_index_from_operand_id17, %concat_index_from_operand_id06
  %126 = phi float [ %81, %concat_index_from_operand_id06 ], [ %91, %concat_index_from_operand_id17 ], [ %101, %concat_index_from_operand_id28 ], [ %111, %concat_index_from_operand_id39 ], [ %121, %concat_index_from_operand_id410 ]
  %127 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  store float %126, ptr %127, align 4
  br label %concatenate.pivot.96.26

concat_index_from_operand_id021:                  ; preds = %concatenate.pivot.0.28
  %128 = phi i32 [ 0, %concatenate.pivot.0.28 ]
  %129 = sub nsw i32 %10, %128
  %130 = udiv i32 %linear_index2, 384
  %131 = mul i32 %130, 32
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 32
  %135 = udiv i32 %132, 32
  %136 = getelementptr inbounds float, ptr %arg0, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id122:                  ; preds = %concatenate.pivot.32.29
  %138 = phi i32 [ 32, %concatenate.pivot.32.29 ]
  %139 = sub nsw i32 %10, %138
  %140 = udiv i32 %linear_index2, 384
  %141 = mul i32 %140, 64
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 64
  %145 = udiv i32 %142, 64
  %146 = getelementptr inbounds float, ptr %arg1, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id223:                  ; preds = %concatenate.pivot.96.31
  %148 = phi i32 [ 96, %concatenate.pivot.96.31 ]
  %149 = sub nsw i32 %10, %148
  %150 = udiv i32 %linear_index2, 384
  %151 = mul i32 %150, 8
  %152 = add i32 %151, %149
  %153 = udiv i32 %152, 1
  %154 = urem i32 %153, 8
  %155 = udiv i32 %152, 8
  %156 = getelementptr inbounds float, ptr %arg2, i32 %152
  %157 = load float, ptr %156, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id324:                  ; preds = %concatenate.pivot.104.33
  %158 = phi i32 [ 104, %concatenate.pivot.104.33 ]
  %159 = sub nsw i32 %10, %158
  %160 = udiv i32 %linear_index2, 384
  %161 = mul i32 %160, 24
  %162 = add i32 %161, %159
  %163 = udiv i32 %162, 1
  %164 = urem i32 %163, 24
  %165 = udiv i32 %162, 24
  %166 = getelementptr inbounds float, ptr %arg3, i32 %162
  %167 = load float, ptr %166, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id425:                  ; preds = %concatenate.pivot.128.34
  %168 = phi i32 [ 128, %concatenate.pivot.128.34 ]
  %169 = sub nsw i32 %10, %168
  %170 = udiv i32 %linear_index2, 384
  %171 = mul i32 %170, 256
  %172 = add i32 %171, %169
  %173 = udiv i32 %172, 1
  %174 = urem i32 %173, 256
  %175 = udiv i32 %172, 256
  %176 = getelementptr inbounds float, ptr %arg4, i32 %172
  %177 = load float, ptr %176, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concatenate.pivot.96.26:                          ; preds = %concatenate.6.merge5
  %178 = icmp ult i32 %10, 96
  br i1 %178, label %concatenate.pivot.32.27, label %concatenate.pivot.104.30

concatenate.pivot.32.27:                          ; preds = %concatenate.pivot.96.26
  %179 = icmp ult i32 %10, 32
  br i1 %179, label %concatenate.pivot.0.28, label %concatenate.pivot.32.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.32.27
  br label %concat_index_from_operand_id021

concatenate.pivot.32.29:                          ; preds = %concatenate.pivot.32.27
  br label %concat_index_from_operand_id122

concatenate.pivot.104.30:                         ; preds = %concatenate.pivot.96.26
  %180 = icmp ult i32 %10, 104
  br i1 %180, label %concatenate.pivot.96.31, label %concatenate.pivot.128.32

concatenate.pivot.96.31:                          ; preds = %concatenate.pivot.104.30
  br label %concat_index_from_operand_id223

concatenate.pivot.128.32:                         ; preds = %concatenate.pivot.104.30
  %181 = icmp ult i32 %10, 128
  br i1 %181, label %concatenate.pivot.104.33, label %concatenate.pivot.128.34

concatenate.pivot.104.33:                         ; preds = %concatenate.pivot.128.32
  br label %concat_index_from_operand_id324

concatenate.pivot.128.34:                         ; preds = %concatenate.pivot.128.32
  br label %concat_index_from_operand_id425

concatenate.6.merge20:                            ; preds = %concat_index_from_operand_id425, %concat_index_from_operand_id324, %concat_index_from_operand_id223, %concat_index_from_operand_id122, %concat_index_from_operand_id021
  %182 = phi float [ %137, %concat_index_from_operand_id021 ], [ %147, %concat_index_from_operand_id122 ], [ %157, %concat_index_from_operand_id223 ], [ %167, %concat_index_from_operand_id324 ], [ %177, %concat_index_from_operand_id425 ]
  %183 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  store float %182, ptr %183, align 4
  br label %concatenate.pivot.96.41

concat_index_from_operand_id036:                  ; preds = %concatenate.pivot.0.43
  %184 = phi i32 [ 0, %concatenate.pivot.0.43 ]
  %185 = sub nsw i32 %13, %184
  %186 = udiv i32 %linear_index3, 384
  %187 = mul i32 %186, 32
  %188 = add i32 %187, %185
  %189 = udiv i32 %188, 1
  %190 = urem i32 %189, 32
  %191 = udiv i32 %188, 32
  %192 = getelementptr inbounds float, ptr %arg0, i32 %188
  %193 = load float, ptr %192, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id137:                  ; preds = %concatenate.pivot.32.44
  %194 = phi i32 [ 32, %concatenate.pivot.32.44 ]
  %195 = sub nsw i32 %13, %194
  %196 = udiv i32 %linear_index3, 384
  %197 = mul i32 %196, 64
  %198 = add i32 %197, %195
  %199 = udiv i32 %198, 1
  %200 = urem i32 %199, 64
  %201 = udiv i32 %198, 64
  %202 = getelementptr inbounds float, ptr %arg1, i32 %198
  %203 = load float, ptr %202, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id238:                  ; preds = %concatenate.pivot.96.46
  %204 = phi i32 [ 96, %concatenate.pivot.96.46 ]
  %205 = sub nsw i32 %13, %204
  %206 = udiv i32 %linear_index3, 384
  %207 = mul i32 %206, 8
  %208 = add i32 %207, %205
  %209 = udiv i32 %208, 1
  %210 = urem i32 %209, 8
  %211 = udiv i32 %208, 8
  %212 = getelementptr inbounds float, ptr %arg2, i32 %208
  %213 = load float, ptr %212, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id339:                  ; preds = %concatenate.pivot.104.48
  %214 = phi i32 [ 104, %concatenate.pivot.104.48 ]
  %215 = sub nsw i32 %13, %214
  %216 = udiv i32 %linear_index3, 384
  %217 = mul i32 %216, 24
  %218 = add i32 %217, %215
  %219 = udiv i32 %218, 1
  %220 = urem i32 %219, 24
  %221 = udiv i32 %218, 24
  %222 = getelementptr inbounds float, ptr %arg3, i32 %218
  %223 = load float, ptr %222, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id440:                  ; preds = %concatenate.pivot.128.49
  %224 = phi i32 [ 128, %concatenate.pivot.128.49 ]
  %225 = sub nsw i32 %13, %224
  %226 = udiv i32 %linear_index3, 384
  %227 = mul i32 %226, 256
  %228 = add i32 %227, %225
  %229 = udiv i32 %228, 1
  %230 = urem i32 %229, 256
  %231 = udiv i32 %228, 256
  %232 = getelementptr inbounds float, ptr %arg4, i32 %228
  %233 = load float, ptr %232, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concatenate.pivot.96.41:                          ; preds = %concatenate.6.merge20
  %234 = icmp ult i32 %13, 96
  br i1 %234, label %concatenate.pivot.32.42, label %concatenate.pivot.104.45

concatenate.pivot.32.42:                          ; preds = %concatenate.pivot.96.41
  %235 = icmp ult i32 %13, 32
  br i1 %235, label %concatenate.pivot.0.43, label %concatenate.pivot.32.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.32.42
  br label %concat_index_from_operand_id036

concatenate.pivot.32.44:                          ; preds = %concatenate.pivot.32.42
  br label %concat_index_from_operand_id137

concatenate.pivot.104.45:                         ; preds = %concatenate.pivot.96.41
  %236 = icmp ult i32 %13, 104
  br i1 %236, label %concatenate.pivot.96.46, label %concatenate.pivot.128.47

concatenate.pivot.96.46:                          ; preds = %concatenate.pivot.104.45
  br label %concat_index_from_operand_id238

concatenate.pivot.128.47:                         ; preds = %concatenate.pivot.104.45
  %237 = icmp ult i32 %13, 128
  br i1 %237, label %concatenate.pivot.104.48, label %concatenate.pivot.128.49

concatenate.pivot.104.48:                         ; preds = %concatenate.pivot.128.47
  br label %concat_index_from_operand_id339

concatenate.pivot.128.49:                         ; preds = %concatenate.pivot.128.47
  br label %concat_index_from_operand_id440

concatenate.6.merge35:                            ; preds = %concat_index_from_operand_id440, %concat_index_from_operand_id339, %concat_index_from_operand_id238, %concat_index_from_operand_id137, %concat_index_from_operand_id036
  %238 = phi float [ %193, %concat_index_from_operand_id036 ], [ %203, %concat_index_from_operand_id137 ], [ %213, %concat_index_from_operand_id238 ], [ %223, %concat_index_from_operand_id339 ], [ %233, %concat_index_from_operand_id440 ]
  %239 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  store float %238, ptr %239, align 4
  br label %concatenate_381.in_bounds-after
}

define void @fusion_389(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(147456) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(360448) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(368640) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(368640) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(393216) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 128 dereferenceable(360448) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(311296) %arg16, ptr noalias align 16 dereferenceable(32768) %arg17, ptr noalias align 128 dereferenceable(311296) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 128 dereferenceable(311296) %arg20, ptr noalias align 16 dereferenceable(32768) %arg21, ptr noalias align 128 dereferenceable(360448) %arg22, ptr noalias align 16 dereferenceable(32768) %arg23, ptr noalias align 128 dereferenceable(311296) %arg24, ptr noalias align 16 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(311296) %arg26, ptr noalias align 16 dereferenceable(32768) %arg27, ptr noalias align 128 dereferenceable(360448) %arg28, ptr noalias align 16 dereferenceable(32768) %arg29, ptr noalias align 128 dereferenceable(360448) %arg30, ptr noalias align 128 dereferenceable(32768) %arg31, ptr noalias align 128 dereferenceable(32768) %arg32, ptr noalias align 128 dereferenceable(32768) %arg33, ptr noalias align 128 dereferenceable(32768) %arg34, ptr noalias align 128 dereferenceable(32768) %arg35, ptr noalias align 128 dereferenceable(32768) %arg36, ptr noalias align 128 dereferenceable(32768) %arg37, ptr noalias align 128 dereferenceable(32768) %arg38, ptr noalias align 128 dereferenceable(32768) %arg39, ptr noalias align 128 dereferenceable(32768) %arg40, ptr noalias align 128 dereferenceable(32768) %arg41, ptr noalias align 128 dereferenceable(32768) %arg42, ptr noalias align 128 dereferenceable(32768) %arg43, ptr noalias align 128 dereferenceable(32768) %arg44, ptr noalias align 128 dereferenceable(32768) %arg45, ptr noalias align 128 dereferenceable(32768) %arg46) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_389.in_bounds-true, label %fusion_389.in_bounds-after

fusion_389.in_bounds-after:                       ; preds = %fusion_389.in_bounds-true, %entry
  ret void

fusion_389.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.34 = fmul float %9, %13
  %subtract.35 = fsub float %8, %multiply.34
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.35, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 48
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.37 = fmul float %9, %20
  %subtract.38 = fsub float %16, %multiply.37
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.38, 1
  %22 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 96
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [144 x [256 x float]], ptr %arg1, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.40 = fmul float %9, %27
  %subtract.41 = fsub float %23, %multiply.40
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.41, 2
  %29 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [256 x float]], ptr %arg6, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.43 = fmul float %9, %34
  %subtract.44 = fsub float %30, %multiply.43
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.44, 3
  %36 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [360 x [256 x float]], ptr %arg8, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.46 = fmul float %9, %41
  %subtract.47 = fsub float %37, %multiply.46
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.47, 4
  %43 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [360 x [256 x float]], ptr %arg10, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.49 = fmul float %9, %48
  %subtract.50 = fsub float %44, %multiply.49
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.50, 5
  %50 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [384 x [256 x float]], ptr %arg12, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.52 = fmul float %9, %55
  %subtract.53 = fsub float %51, %multiply.52
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.53, 6
  %57 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [352 x [256 x float]], ptr %arg14, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.55 = fmul float %9, %62
  %subtract.56 = fsub float %58, %multiply.55
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.56, 7
  %64 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %66 = add i32 %5, 16
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [304 x [256 x float]], ptr %arg16, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %multiply.58 = fmul float %9, %69
  %subtract.59 = fsub float %65, %multiply.58
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.59, 8
  %71 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = add i32 %5, 16
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [304 x [256 x float]], ptr %arg18, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %multiply.61 = fmul float %9, %76
  %subtract.62 = fsub float %72, %multiply.61
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.62, 9
  %78 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %80 = add i32 %5, 16
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [304 x [256 x float]], ptr %arg20, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %multiply.64 = fmul float %9, %83
  %subtract.65 = fsub float %79, %multiply.64
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.65, 10
  %85 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %87 = add i32 %5, 0
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [352 x [256 x float]], ptr %arg22, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.67 = fmul float %9, %90
  %subtract.68 = fsub float %86, %multiply.67
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.68, 11
  %92 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = add i32 %5, 16
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [304 x [256 x float]], ptr %arg24, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %multiply.70 = fmul float %9, %97
  %subtract.71 = fsub float %93, %multiply.70
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.71, 12
  %99 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %101 = add i32 %5, 16
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [304 x [256 x float]], ptr %arg26, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %multiply.73 = fmul float %9, %104
  %subtract.74 = fsub float %100, %multiply.73
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.74, 13
  %106 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %108 = add i32 %5, 0
  %109 = add i32 %4, 0
  %110 = getelementptr inbounds [352 x [256 x float]], ptr %arg28, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !269
  %multiply.76 = fmul float %9, %111
  %subtract.77 = fsub float %107, %multiply.76
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.77, 14
  %113 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %115 = add i32 %5, 0
  %116 = add i32 %4, 0
  %117 = getelementptr inbounds [352 x [256 x float]], ptr %arg30, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !269
  %multiply.79 = fmul float %9, %118
  %subtract.80 = fsub float %114, %multiply.79
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.80, 15
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 0
  %121 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 1
  %123 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 2
  %125 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 3
  %127 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 4
  %129 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 5
  %131 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 6
  %133 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 7
  %135 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 8
  %137 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 9
  %139 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 10
  %141 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 11
  %143 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 12
  %145 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 13
  %147 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 14
  %149 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 15
  %151 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %150, ptr %151, align 4
  br label %fusion_389.in_bounds-after
}

define void @fusion_137(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 128 dereferenceable(9961472) %arg1, ptr noalias align 128 dereferenceable(4718592) %arg2, ptr noalias align 16 dereferenceable(4) %arg3, ptr noalias align 16 dereferenceable(1048576) %arg4, ptr noalias align 128 dereferenceable(9961472) %arg5, ptr noalias align 16 dereferenceable(1048576) %arg6, ptr noalias align 128 dereferenceable(9961472) %arg7, ptr noalias align 16 dereferenceable(1048576) %arg8, ptr noalias align 128 dereferenceable(11534336) %arg9, ptr noalias align 16 dereferenceable(1048576) %arg10, ptr noalias align 128 dereferenceable(7340032) %arg11, ptr noalias align 128 dereferenceable(11534336) %arg12, ptr noalias align 128 dereferenceable(11534336) %arg13, ptr noalias align 16 dereferenceable(1048576) %arg14, ptr noalias align 128 dereferenceable(7340032) %arg15, ptr noalias align 128 dereferenceable(11534336) %arg16, ptr noalias align 128 dereferenceable(11796480) %arg17, ptr noalias align 16 dereferenceable(1048576) %arg18, ptr noalias align 128 dereferenceable(7340032) %arg19, ptr noalias align 128 dereferenceable(11534336) %arg20, ptr noalias align 128 dereferenceable(11796480) %arg21, ptr noalias align 16 dereferenceable(1048576) %arg22, ptr noalias align 128 dereferenceable(7340032) %arg23, ptr noalias align 128 dereferenceable(11534336) %arg24, ptr noalias align 128 dereferenceable(12582912) %arg25, ptr noalias align 16 dereferenceable(1048576) %arg26, ptr noalias align 128 dereferenceable(11534336) %arg27, ptr noalias align 16 dereferenceable(1048576) %arg28, ptr noalias align 128 dereferenceable(9961472) %arg29, ptr noalias align 16 dereferenceable(1048576) %arg30, ptr noalias align 128 dereferenceable(11534336) %arg31, ptr noalias align 16 dereferenceable(1048576) %arg32, ptr noalias align 128 dereferenceable(9961472) %arg33, ptr noalias align 16 dereferenceable(1048576) %arg34, ptr noalias align 128 dereferenceable(11534336) %arg35, ptr noalias align 128 dereferenceable(1048576) %arg36, ptr noalias align 128 dereferenceable(1048576) %arg37, ptr noalias align 128 dereferenceable(1048576) %arg38, ptr noalias align 128 dereferenceable(1048576) %arg39, ptr noalias align 128 dereferenceable(1048576) %arg40, ptr noalias align 128 dereferenceable(1048576) %arg41, ptr noalias align 128 dereferenceable(1048576) %arg42, ptr noalias align 128 dereferenceable(1048576) %arg43, ptr noalias align 128 dereferenceable(1048576) %arg44, ptr noalias align 128 dereferenceable(1048576) %arg45, ptr noalias align 128 dereferenceable(1048576) %arg46, ptr noalias align 128 dereferenceable(1048576) %arg47, ptr noalias align 128 dereferenceable(1048576) %arg48) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 32
  %5 = udiv i32 %linear_index_base, 32
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 32
  %8 = udiv i32 %linear_index1, 32
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 32
  %11 = udiv i32 %linear_index2, 32
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 32
  %14 = udiv i32 %linear_index3, 32
  %15 = icmp ult i32 %linear_index_base, 262144
  br i1 %15, label %fusion_137.in_bounds-true, label %fusion_137.in_bounds-after

fusion_137.in_bounds-after:                       ; preds = %fusion_137.in_bounds-true, %entry
  ret void

fusion_137.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg3, align 4, !invariant.load !269
  %19 = add i32 %5, 0
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = add i32 %5, 0
  %24 = add i32 %4, 16
  %25 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %23, i32 %24
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %add.40 = fadd float %22, %26
  %multiply.41 = fmul float %18, %add.40
  %subtract.42 = fsub float %17, %multiply.41
  %27 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.42, 0
  %28 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = add i32 %5, 0
  %31 = add i32 %4, 16
  %32 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %30, i32 %31
  %33 = load float, ptr %32, align 4, !invariant.load !269
  %34 = add i32 %5, 0
  %35 = add i32 %4, 48
  %36 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %34, i32 %35
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %add.45 = fadd float %33, %37
  %multiply.46 = fmul float %18, %add.45
  %subtract.47 = fsub float %29, %multiply.46
  %38 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %27, float %subtract.47, 1
  %39 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %40 = load float, ptr %39, align 4, !invariant.load !269
  %41 = add i32 %5, 0
  %42 = add i32 %4, 16
  %43 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %41, i32 %42
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 0
  %46 = add i32 %4, 96
  %47 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %add.50 = fadd float %44, %48
  %multiply.51 = fmul float %18, %add.50
  %subtract.52 = fsub float %40, %multiply.51
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %38, float %subtract.52, 2
  %50 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.54 = fmul float %18, %55
  %subtract.55 = fsub float %51, %multiply.54
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.55, 3
  %57 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = add i32 %59, 0
  %62 = add i32 %60, 0
  %63 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %61, i32 %62
  %64 = load float, ptr %63, align 4, !invariant.load !269
  %65 = add i32 %59, 0
  %66 = add i32 %60, 0
  %67 = getelementptr inbounds [8192 x [352 x float]], ptr %arg12, i32 0, i32 %65, i32 %66
  %68 = load float, ptr %67, align 4, !invariant.load !269
  %add.58 = fadd float %64, %68
  %69 = add i32 %59, 0
  %70 = add i32 %60, 0
  %71 = getelementptr inbounds [8192 x [224 x float]], ptr %arg11, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %add.60 = fadd float %add.58, %72
  %multiply.62 = fmul float %18, %add.60
  %subtract.63 = fsub float %58, %multiply.62
  %73 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.63, 4
  %74 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %76 = add i32 %5, 0
  %77 = add i32 %4, 0
  %78 = add i32 %76, 0
  %79 = add i32 %77, 0
  %80 = getelementptr inbounds [8192 x [360 x float]], ptr %arg17, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %82 = add i32 %76, 0
  %83 = add i32 %77, 0
  %84 = getelementptr inbounds [8192 x [352 x float]], ptr %arg16, i32 0, i32 %82, i32 %83
  %85 = load float, ptr %84, align 4, !invariant.load !269
  %add.66 = fadd float %81, %85
  %86 = add i32 %76, 0
  %87 = add i32 %77, 0
  %88 = getelementptr inbounds [8192 x [224 x float]], ptr %arg15, i32 0, i32 %86, i32 %87
  %89 = load float, ptr %88, align 4, !invariant.load !269
  %add.68 = fadd float %add.66, %89
  %multiply.70 = fmul float %18, %add.68
  %subtract.71 = fsub float %75, %multiply.70
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %73, float %subtract.71, 5
  %91 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  %92 = load float, ptr %91, align 4, !invariant.load !269
  %93 = add i32 %5, 0
  %94 = add i32 %4, 0
  %95 = add i32 %93, 0
  %96 = add i32 %94, 0
  %97 = getelementptr inbounds [8192 x [360 x float]], ptr %arg21, i32 0, i32 %95, i32 %96
  %98 = load float, ptr %97, align 4, !invariant.load !269
  %99 = add i32 %93, 0
  %100 = add i32 %94, 0
  %101 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %99, i32 %100
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %add.74 = fadd float %98, %102
  %103 = add i32 %93, 0
  %104 = add i32 %94, 0
  %105 = getelementptr inbounds [8192 x [224 x float]], ptr %arg19, i32 0, i32 %103, i32 %104
  %106 = load float, ptr %105, align 4, !invariant.load !269
  %add.76 = fadd float %add.74, %106
  %multiply.78 = fmul float %18, %add.76
  %subtract.79 = fsub float %92, %multiply.78
  %107 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.79, 6
  %108 = getelementptr inbounds float, ptr %arg22, i32 %linear_index_base
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %110 = add i32 %5, 0
  %111 = add i32 %4, 0
  %112 = add i32 %110, 0
  %113 = add i32 %111, 0
  %114 = getelementptr inbounds [8192 x [384 x float]], ptr %arg25, i32 0, i32 %112, i32 %113
  %115 = load float, ptr %114, align 4, !invariant.load !269
  %116 = add i32 %110, 0
  %117 = add i32 %111, 0
  %118 = getelementptr inbounds [8192 x [352 x float]], ptr %arg24, i32 0, i32 %116, i32 %117
  %119 = load float, ptr %118, align 4, !invariant.load !269
  %add.82 = fadd float %115, %119
  %120 = add i32 %110, 0
  %121 = add i32 %111, 0
  %122 = getelementptr inbounds [8192 x [224 x float]], ptr %arg23, i32 0, i32 %120, i32 %121
  %123 = load float, ptr %122, align 4, !invariant.load !269
  %add.84 = fadd float %add.82, %123
  %multiply.86 = fmul float %18, %add.84
  %subtract.87 = fsub float %109, %multiply.86
  %124 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %107, float %subtract.87, 7
  %125 = getelementptr inbounds float, ptr %arg26, i32 %linear_index_base
  %126 = load float, ptr %125, align 4, !invariant.load !269
  %127 = add i32 %5, 0
  %128 = add i32 %4, 0
  %129 = getelementptr inbounds [8192 x [352 x float]], ptr %arg27, i32 0, i32 %127, i32 %128
  %130 = load float, ptr %129, align 4, !invariant.load !269
  %multiply.89 = fmul float %18, %130
  %subtract.90 = fsub float %126, %multiply.89
  %131 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %124, float %subtract.90, 8
  %132 = getelementptr inbounds float, ptr %arg28, i32 %linear_index_base
  %133 = load float, ptr %132, align 4, !invariant.load !269
  %134 = add i32 %5, 0
  %135 = add i32 %4, 16
  %136 = getelementptr inbounds [8192 x [304 x float]], ptr %arg29, i32 0, i32 %134, i32 %135
  %137 = load float, ptr %136, align 4, !invariant.load !269
  %multiply.92 = fmul float %18, %137
  %subtract.93 = fsub float %133, %multiply.92
  %138 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %131, float %subtract.93, 9
  %139 = getelementptr inbounds float, ptr %arg30, i32 %linear_index_base
  %140 = load float, ptr %139, align 4, !invariant.load !269
  %141 = add i32 %5, 0
  %142 = add i32 %4, 0
  %143 = getelementptr inbounds [8192 x [352 x float]], ptr %arg31, i32 0, i32 %141, i32 %142
  %144 = load float, ptr %143, align 4, !invariant.load !269
  %multiply.95 = fmul float %18, %144
  %subtract.96 = fsub float %140, %multiply.95
  %145 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %138, float %subtract.96, 10
  %146 = getelementptr inbounds float, ptr %arg32, i32 %linear_index_base
  %147 = load float, ptr %146, align 4, !invariant.load !269
  %148 = add i32 %5, 0
  %149 = add i32 %4, 16
  %150 = getelementptr inbounds [8192 x [304 x float]], ptr %arg33, i32 0, i32 %148, i32 %149
  %151 = load float, ptr %150, align 4, !invariant.load !269
  %multiply.98 = fmul float %18, %151
  %subtract.99 = fsub float %147, %multiply.98
  %152 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %145, float %subtract.99, 11
  %153 = getelementptr inbounds float, ptr %arg34, i32 %linear_index_base
  %154 = load float, ptr %153, align 4, !invariant.load !269
  %155 = add i32 %5, 0
  %156 = add i32 %4, 0
  %157 = getelementptr inbounds [8192 x [352 x float]], ptr %arg35, i32 0, i32 %155, i32 %156
  %158 = load float, ptr %157, align 4, !invariant.load !269
  %multiply.101 = fmul float %18, %158
  %subtract.102 = fsub float %154, %multiply.101
  %159 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %152, float %subtract.102, 12
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 0
  %161 = getelementptr inbounds float, ptr %arg36, i32 %linear_index_base
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 1
  %163 = getelementptr inbounds float, ptr %arg37, i32 %linear_index_base
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 2
  %165 = getelementptr inbounds float, ptr %arg38, i32 %linear_index_base
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 3
  %167 = getelementptr inbounds float, ptr %arg39, i32 %linear_index_base
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 4
  %169 = getelementptr inbounds float, ptr %arg40, i32 %linear_index_base
  store float %168, ptr %169, align 4
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 5
  %171 = getelementptr inbounds float, ptr %arg41, i32 %linear_index_base
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 6
  %173 = getelementptr inbounds float, ptr %arg42, i32 %linear_index_base
  store float %172, ptr %173, align 4
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 7
  %175 = getelementptr inbounds float, ptr %arg43, i32 %linear_index_base
  store float %174, ptr %175, align 4
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 8
  %177 = getelementptr inbounds float, ptr %arg44, i32 %linear_index_base
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 9
  %179 = getelementptr inbounds float, ptr %arg45, i32 %linear_index_base
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 10
  %181 = getelementptr inbounds float, ptr %arg46, i32 %linear_index_base
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 11
  %183 = getelementptr inbounds float, ptr %arg47, i32 %linear_index_base
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 12
  %185 = getelementptr inbounds float, ptr %arg48, i32 %linear_index_base
  store float %184, ptr %185, align 4
  %186 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %187 = load float, ptr %186, align 4, !invariant.load !269
  %188 = load float, ptr %arg3, align 4, !invariant.load !269
  %189 = add i32 %8, 0
  %190 = add i32 %7, 0
  %191 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %189, i32 %190
  %192 = load float, ptr %191, align 4, !invariant.load !269
  %193 = add i32 %8, 0
  %194 = add i32 %7, 16
  %195 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %193, i32 %194
  %196 = load float, ptr %195, align 4, !invariant.load !269
  %add.401 = fadd float %192, %196
  %multiply.412 = fmul float %188, %add.401
  %subtract.423 = fsub float %187, %multiply.412
  %197 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.423, 0
  %198 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %199 = load float, ptr %198, align 4, !invariant.load !269
  %200 = add i32 %8, 0
  %201 = add i32 %7, 16
  %202 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %200, i32 %201
  %203 = load float, ptr %202, align 4, !invariant.load !269
  %204 = add i32 %8, 0
  %205 = add i32 %7, 48
  %206 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %204, i32 %205
  %207 = load float, ptr %206, align 4, !invariant.load !269
  %add.454 = fadd float %203, %207
  %multiply.465 = fmul float %188, %add.454
  %subtract.476 = fsub float %199, %multiply.465
  %208 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %197, float %subtract.476, 1
  %209 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %210 = load float, ptr %209, align 4, !invariant.load !269
  %211 = add i32 %8, 0
  %212 = add i32 %7, 16
  %213 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %211, i32 %212
  %214 = load float, ptr %213, align 4, !invariant.load !269
  %215 = add i32 %8, 0
  %216 = add i32 %7, 96
  %217 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %215, i32 %216
  %218 = load float, ptr %217, align 4, !invariant.load !269
  %add.507 = fadd float %214, %218
  %multiply.518 = fmul float %188, %add.507
  %subtract.529 = fsub float %210, %multiply.518
  %219 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %208, float %subtract.529, 2
  %220 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %221 = load float, ptr %220, align 4, !invariant.load !269
  %222 = add i32 %8, 0
  %223 = add i32 %7, 0
  %224 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %222, i32 %223
  %225 = load float, ptr %224, align 4, !invariant.load !269
  %multiply.5410 = fmul float %188, %225
  %subtract.5511 = fsub float %221, %multiply.5410
  %226 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %219, float %subtract.5511, 3
  %227 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %228 = load float, ptr %227, align 4, !invariant.load !269
  %229 = add i32 %8, 0
  %230 = add i32 %7, 0
  %231 = add i32 %229, 0
  %232 = add i32 %230, 0
  %233 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %231, i32 %232
  %234 = load float, ptr %233, align 4, !invariant.load !269
  %235 = add i32 %229, 0
  %236 = add i32 %230, 0
  %237 = getelementptr inbounds [8192 x [352 x float]], ptr %arg12, i32 0, i32 %235, i32 %236
  %238 = load float, ptr %237, align 4, !invariant.load !269
  %add.5812 = fadd float %234, %238
  %239 = add i32 %229, 0
  %240 = add i32 %230, 0
  %241 = getelementptr inbounds [8192 x [224 x float]], ptr %arg11, i32 0, i32 %239, i32 %240
  %242 = load float, ptr %241, align 4, !invariant.load !269
  %add.6013 = fadd float %add.5812, %242
  %multiply.6214 = fmul float %188, %add.6013
  %subtract.6315 = fsub float %228, %multiply.6214
  %243 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %226, float %subtract.6315, 4
  %244 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  %245 = load float, ptr %244, align 4, !invariant.load !269
  %246 = add i32 %8, 0
  %247 = add i32 %7, 0
  %248 = add i32 %246, 0
  %249 = add i32 %247, 0
  %250 = getelementptr inbounds [8192 x [360 x float]], ptr %arg17, i32 0, i32 %248, i32 %249
  %251 = load float, ptr %250, align 4, !invariant.load !269
  %252 = add i32 %246, 0
  %253 = add i32 %247, 0
  %254 = getelementptr inbounds [8192 x [352 x float]], ptr %arg16, i32 0, i32 %252, i32 %253
  %255 = load float, ptr %254, align 4, !invariant.load !269
  %add.6616 = fadd float %251, %255
  %256 = add i32 %246, 0
  %257 = add i32 %247, 0
  %258 = getelementptr inbounds [8192 x [224 x float]], ptr %arg15, i32 0, i32 %256, i32 %257
  %259 = load float, ptr %258, align 4, !invariant.load !269
  %add.6817 = fadd float %add.6616, %259
  %multiply.7018 = fmul float %188, %add.6817
  %subtract.7119 = fsub float %245, %multiply.7018
  %260 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %243, float %subtract.7119, 5
  %261 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  %262 = load float, ptr %261, align 4, !invariant.load !269
  %263 = add i32 %8, 0
  %264 = add i32 %7, 0
  %265 = add i32 %263, 0
  %266 = add i32 %264, 0
  %267 = getelementptr inbounds [8192 x [360 x float]], ptr %arg21, i32 0, i32 %265, i32 %266
  %268 = load float, ptr %267, align 4, !invariant.load !269
  %269 = add i32 %263, 0
  %270 = add i32 %264, 0
  %271 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %269, i32 %270
  %272 = load float, ptr %271, align 4, !invariant.load !269
  %add.7420 = fadd float %268, %272
  %273 = add i32 %263, 0
  %274 = add i32 %264, 0
  %275 = getelementptr inbounds [8192 x [224 x float]], ptr %arg19, i32 0, i32 %273, i32 %274
  %276 = load float, ptr %275, align 4, !invariant.load !269
  %add.7621 = fadd float %add.7420, %276
  %multiply.7822 = fmul float %188, %add.7621
  %subtract.7923 = fsub float %262, %multiply.7822
  %277 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %260, float %subtract.7923, 6
  %278 = getelementptr inbounds float, ptr %arg22, i32 %linear_index1
  %279 = load float, ptr %278, align 4, !invariant.load !269
  %280 = add i32 %8, 0
  %281 = add i32 %7, 0
  %282 = add i32 %280, 0
  %283 = add i32 %281, 0
  %284 = getelementptr inbounds [8192 x [384 x float]], ptr %arg25, i32 0, i32 %282, i32 %283
  %285 = load float, ptr %284, align 4, !invariant.load !269
  %286 = add i32 %280, 0
  %287 = add i32 %281, 0
  %288 = getelementptr inbounds [8192 x [352 x float]], ptr %arg24, i32 0, i32 %286, i32 %287
  %289 = load float, ptr %288, align 4, !invariant.load !269
  %add.8224 = fadd float %285, %289
  %290 = add i32 %280, 0
  %291 = add i32 %281, 0
  %292 = getelementptr inbounds [8192 x [224 x float]], ptr %arg23, i32 0, i32 %290, i32 %291
  %293 = load float, ptr %292, align 4, !invariant.load !269
  %add.8425 = fadd float %add.8224, %293
  %multiply.8626 = fmul float %188, %add.8425
  %subtract.8727 = fsub float %279, %multiply.8626
  %294 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %277, float %subtract.8727, 7
  %295 = getelementptr inbounds float, ptr %arg26, i32 %linear_index1
  %296 = load float, ptr %295, align 4, !invariant.load !269
  %297 = add i32 %8, 0
  %298 = add i32 %7, 0
  %299 = getelementptr inbounds [8192 x [352 x float]], ptr %arg27, i32 0, i32 %297, i32 %298
  %300 = load float, ptr %299, align 4, !invariant.load !269
  %multiply.8928 = fmul float %188, %300
  %subtract.9029 = fsub float %296, %multiply.8928
  %301 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %294, float %subtract.9029, 8
  %302 = getelementptr inbounds float, ptr %arg28, i32 %linear_index1
  %303 = load float, ptr %302, align 4, !invariant.load !269
  %304 = add i32 %8, 0
  %305 = add i32 %7, 16
  %306 = getelementptr inbounds [8192 x [304 x float]], ptr %arg29, i32 0, i32 %304, i32 %305
  %307 = load float, ptr %306, align 4, !invariant.load !269
  %multiply.9230 = fmul float %188, %307
  %subtract.9331 = fsub float %303, %multiply.9230
  %308 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %301, float %subtract.9331, 9
  %309 = getelementptr inbounds float, ptr %arg30, i32 %linear_index1
  %310 = load float, ptr %309, align 4, !invariant.load !269
  %311 = add i32 %8, 0
  %312 = add i32 %7, 0
  %313 = getelementptr inbounds [8192 x [352 x float]], ptr %arg31, i32 0, i32 %311, i32 %312
  %314 = load float, ptr %313, align 4, !invariant.load !269
  %multiply.9532 = fmul float %188, %314
  %subtract.9633 = fsub float %310, %multiply.9532
  %315 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %308, float %subtract.9633, 10
  %316 = getelementptr inbounds float, ptr %arg32, i32 %linear_index1
  %317 = load float, ptr %316, align 4, !invariant.load !269
  %318 = add i32 %8, 0
  %319 = add i32 %7, 16
  %320 = getelementptr inbounds [8192 x [304 x float]], ptr %arg33, i32 0, i32 %318, i32 %319
  %321 = load float, ptr %320, align 4, !invariant.load !269
  %multiply.9834 = fmul float %188, %321
  %subtract.9935 = fsub float %317, %multiply.9834
  %322 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %315, float %subtract.9935, 11
  %323 = getelementptr inbounds float, ptr %arg34, i32 %linear_index1
  %324 = load float, ptr %323, align 4, !invariant.load !269
  %325 = add i32 %8, 0
  %326 = add i32 %7, 0
  %327 = getelementptr inbounds [8192 x [352 x float]], ptr %arg35, i32 0, i32 %325, i32 %326
  %328 = load float, ptr %327, align 4, !invariant.load !269
  %multiply.10136 = fmul float %188, %328
  %subtract.10237 = fsub float %324, %multiply.10136
  %329 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %322, float %subtract.10237, 12
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 0
  %331 = getelementptr inbounds float, ptr %arg36, i32 %linear_index1
  store float %330, ptr %331, align 4
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 1
  %333 = getelementptr inbounds float, ptr %arg37, i32 %linear_index1
  store float %332, ptr %333, align 4
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 2
  %335 = getelementptr inbounds float, ptr %arg38, i32 %linear_index1
  store float %334, ptr %335, align 4
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 3
  %337 = getelementptr inbounds float, ptr %arg39, i32 %linear_index1
  store float %336, ptr %337, align 4
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 4
  %339 = getelementptr inbounds float, ptr %arg40, i32 %linear_index1
  store float %338, ptr %339, align 4
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 5
  %341 = getelementptr inbounds float, ptr %arg41, i32 %linear_index1
  store float %340, ptr %341, align 4
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 6
  %343 = getelementptr inbounds float, ptr %arg42, i32 %linear_index1
  store float %342, ptr %343, align 4
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 7
  %345 = getelementptr inbounds float, ptr %arg43, i32 %linear_index1
  store float %344, ptr %345, align 4
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 8
  %347 = getelementptr inbounds float, ptr %arg44, i32 %linear_index1
  store float %346, ptr %347, align 4
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 9
  %349 = getelementptr inbounds float, ptr %arg45, i32 %linear_index1
  store float %348, ptr %349, align 4
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 10
  %351 = getelementptr inbounds float, ptr %arg46, i32 %linear_index1
  store float %350, ptr %351, align 4
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 11
  %353 = getelementptr inbounds float, ptr %arg47, i32 %linear_index1
  store float %352, ptr %353, align 4
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %329, 12
  %355 = getelementptr inbounds float, ptr %arg48, i32 %linear_index1
  store float %354, ptr %355, align 4
  %356 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %357 = load float, ptr %356, align 4, !invariant.load !269
  %358 = load float, ptr %arg3, align 4, !invariant.load !269
  %359 = add i32 %11, 0
  %360 = add i32 %10, 0
  %361 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %359, i32 %360
  %362 = load float, ptr %361, align 4, !invariant.load !269
  %363 = add i32 %11, 0
  %364 = add i32 %10, 16
  %365 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %363, i32 %364
  %366 = load float, ptr %365, align 4, !invariant.load !269
  %add.4038 = fadd float %362, %366
  %multiply.4139 = fmul float %358, %add.4038
  %subtract.4240 = fsub float %357, %multiply.4139
  %367 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4240, 0
  %368 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %369 = load float, ptr %368, align 4, !invariant.load !269
  %370 = add i32 %11, 0
  %371 = add i32 %10, 16
  %372 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %370, i32 %371
  %373 = load float, ptr %372, align 4, !invariant.load !269
  %374 = add i32 %11, 0
  %375 = add i32 %10, 48
  %376 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %374, i32 %375
  %377 = load float, ptr %376, align 4, !invariant.load !269
  %add.4541 = fadd float %373, %377
  %multiply.4642 = fmul float %358, %add.4541
  %subtract.4743 = fsub float %369, %multiply.4642
  %378 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %367, float %subtract.4743, 1
  %379 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %380 = load float, ptr %379, align 4, !invariant.load !269
  %381 = add i32 %11, 0
  %382 = add i32 %10, 16
  %383 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %381, i32 %382
  %384 = load float, ptr %383, align 4, !invariant.load !269
  %385 = add i32 %11, 0
  %386 = add i32 %10, 96
  %387 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %385, i32 %386
  %388 = load float, ptr %387, align 4, !invariant.load !269
  %add.5044 = fadd float %384, %388
  %multiply.5145 = fmul float %358, %add.5044
  %subtract.5246 = fsub float %380, %multiply.5145
  %389 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %378, float %subtract.5246, 2
  %390 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %391 = load float, ptr %390, align 4, !invariant.load !269
  %392 = add i32 %11, 0
  %393 = add i32 %10, 0
  %394 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %392, i32 %393
  %395 = load float, ptr %394, align 4, !invariant.load !269
  %multiply.5447 = fmul float %358, %395
  %subtract.5548 = fsub float %391, %multiply.5447
  %396 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %389, float %subtract.5548, 3
  %397 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %398 = load float, ptr %397, align 4, !invariant.load !269
  %399 = add i32 %11, 0
  %400 = add i32 %10, 0
  %401 = add i32 %399, 0
  %402 = add i32 %400, 0
  %403 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %401, i32 %402
  %404 = load float, ptr %403, align 4, !invariant.load !269
  %405 = add i32 %399, 0
  %406 = add i32 %400, 0
  %407 = getelementptr inbounds [8192 x [352 x float]], ptr %arg12, i32 0, i32 %405, i32 %406
  %408 = load float, ptr %407, align 4, !invariant.load !269
  %add.5849 = fadd float %404, %408
  %409 = add i32 %399, 0
  %410 = add i32 %400, 0
  %411 = getelementptr inbounds [8192 x [224 x float]], ptr %arg11, i32 0, i32 %409, i32 %410
  %412 = load float, ptr %411, align 4, !invariant.load !269
  %add.6050 = fadd float %add.5849, %412
  %multiply.6251 = fmul float %358, %add.6050
  %subtract.6352 = fsub float %398, %multiply.6251
  %413 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %396, float %subtract.6352, 4
  %414 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  %415 = load float, ptr %414, align 4, !invariant.load !269
  %416 = add i32 %11, 0
  %417 = add i32 %10, 0
  %418 = add i32 %416, 0
  %419 = add i32 %417, 0
  %420 = getelementptr inbounds [8192 x [360 x float]], ptr %arg17, i32 0, i32 %418, i32 %419
  %421 = load float, ptr %420, align 4, !invariant.load !269
  %422 = add i32 %416, 0
  %423 = add i32 %417, 0
  %424 = getelementptr inbounds [8192 x [352 x float]], ptr %arg16, i32 0, i32 %422, i32 %423
  %425 = load float, ptr %424, align 4, !invariant.load !269
  %add.6653 = fadd float %421, %425
  %426 = add i32 %416, 0
  %427 = add i32 %417, 0
  %428 = getelementptr inbounds [8192 x [224 x float]], ptr %arg15, i32 0, i32 %426, i32 %427
  %429 = load float, ptr %428, align 4, !invariant.load !269
  %add.6854 = fadd float %add.6653, %429
  %multiply.7055 = fmul float %358, %add.6854
  %subtract.7156 = fsub float %415, %multiply.7055
  %430 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %413, float %subtract.7156, 5
  %431 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  %432 = load float, ptr %431, align 4, !invariant.load !269
  %433 = add i32 %11, 0
  %434 = add i32 %10, 0
  %435 = add i32 %433, 0
  %436 = add i32 %434, 0
  %437 = getelementptr inbounds [8192 x [360 x float]], ptr %arg21, i32 0, i32 %435, i32 %436
  %438 = load float, ptr %437, align 4, !invariant.load !269
  %439 = add i32 %433, 0
  %440 = add i32 %434, 0
  %441 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %439, i32 %440
  %442 = load float, ptr %441, align 4, !invariant.load !269
  %add.7457 = fadd float %438, %442
  %443 = add i32 %433, 0
  %444 = add i32 %434, 0
  %445 = getelementptr inbounds [8192 x [224 x float]], ptr %arg19, i32 0, i32 %443, i32 %444
  %446 = load float, ptr %445, align 4, !invariant.load !269
  %add.7658 = fadd float %add.7457, %446
  %multiply.7859 = fmul float %358, %add.7658
  %subtract.7960 = fsub float %432, %multiply.7859
  %447 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %430, float %subtract.7960, 6
  %448 = getelementptr inbounds float, ptr %arg22, i32 %linear_index2
  %449 = load float, ptr %448, align 4, !invariant.load !269
  %450 = add i32 %11, 0
  %451 = add i32 %10, 0
  %452 = add i32 %450, 0
  %453 = add i32 %451, 0
  %454 = getelementptr inbounds [8192 x [384 x float]], ptr %arg25, i32 0, i32 %452, i32 %453
  %455 = load float, ptr %454, align 4, !invariant.load !269
  %456 = add i32 %450, 0
  %457 = add i32 %451, 0
  %458 = getelementptr inbounds [8192 x [352 x float]], ptr %arg24, i32 0, i32 %456, i32 %457
  %459 = load float, ptr %458, align 4, !invariant.load !269
  %add.8261 = fadd float %455, %459
  %460 = add i32 %450, 0
  %461 = add i32 %451, 0
  %462 = getelementptr inbounds [8192 x [224 x float]], ptr %arg23, i32 0, i32 %460, i32 %461
  %463 = load float, ptr %462, align 4, !invariant.load !269
  %add.8462 = fadd float %add.8261, %463
  %multiply.8663 = fmul float %358, %add.8462
  %subtract.8764 = fsub float %449, %multiply.8663
  %464 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %447, float %subtract.8764, 7
  %465 = getelementptr inbounds float, ptr %arg26, i32 %linear_index2
  %466 = load float, ptr %465, align 4, !invariant.load !269
  %467 = add i32 %11, 0
  %468 = add i32 %10, 0
  %469 = getelementptr inbounds [8192 x [352 x float]], ptr %arg27, i32 0, i32 %467, i32 %468
  %470 = load float, ptr %469, align 4, !invariant.load !269
  %multiply.8965 = fmul float %358, %470
  %subtract.9066 = fsub float %466, %multiply.8965
  %471 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %464, float %subtract.9066, 8
  %472 = getelementptr inbounds float, ptr %arg28, i32 %linear_index2
  %473 = load float, ptr %472, align 4, !invariant.load !269
  %474 = add i32 %11, 0
  %475 = add i32 %10, 16
  %476 = getelementptr inbounds [8192 x [304 x float]], ptr %arg29, i32 0, i32 %474, i32 %475
  %477 = load float, ptr %476, align 4, !invariant.load !269
  %multiply.9267 = fmul float %358, %477
  %subtract.9368 = fsub float %473, %multiply.9267
  %478 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %471, float %subtract.9368, 9
  %479 = getelementptr inbounds float, ptr %arg30, i32 %linear_index2
  %480 = load float, ptr %479, align 4, !invariant.load !269
  %481 = add i32 %11, 0
  %482 = add i32 %10, 0
  %483 = getelementptr inbounds [8192 x [352 x float]], ptr %arg31, i32 0, i32 %481, i32 %482
  %484 = load float, ptr %483, align 4, !invariant.load !269
  %multiply.9569 = fmul float %358, %484
  %subtract.9670 = fsub float %480, %multiply.9569
  %485 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %478, float %subtract.9670, 10
  %486 = getelementptr inbounds float, ptr %arg32, i32 %linear_index2
  %487 = load float, ptr %486, align 4, !invariant.load !269
  %488 = add i32 %11, 0
  %489 = add i32 %10, 16
  %490 = getelementptr inbounds [8192 x [304 x float]], ptr %arg33, i32 0, i32 %488, i32 %489
  %491 = load float, ptr %490, align 4, !invariant.load !269
  %multiply.9871 = fmul float %358, %491
  %subtract.9972 = fsub float %487, %multiply.9871
  %492 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %485, float %subtract.9972, 11
  %493 = getelementptr inbounds float, ptr %arg34, i32 %linear_index2
  %494 = load float, ptr %493, align 4, !invariant.load !269
  %495 = add i32 %11, 0
  %496 = add i32 %10, 0
  %497 = getelementptr inbounds [8192 x [352 x float]], ptr %arg35, i32 0, i32 %495, i32 %496
  %498 = load float, ptr %497, align 4, !invariant.load !269
  %multiply.10173 = fmul float %358, %498
  %subtract.10274 = fsub float %494, %multiply.10173
  %499 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %492, float %subtract.10274, 12
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 0
  %501 = getelementptr inbounds float, ptr %arg36, i32 %linear_index2
  store float %500, ptr %501, align 4
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 1
  %503 = getelementptr inbounds float, ptr %arg37, i32 %linear_index2
  store float %502, ptr %503, align 4
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 2
  %505 = getelementptr inbounds float, ptr %arg38, i32 %linear_index2
  store float %504, ptr %505, align 4
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 3
  %507 = getelementptr inbounds float, ptr %arg39, i32 %linear_index2
  store float %506, ptr %507, align 4
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 4
  %509 = getelementptr inbounds float, ptr %arg40, i32 %linear_index2
  store float %508, ptr %509, align 4
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 5
  %511 = getelementptr inbounds float, ptr %arg41, i32 %linear_index2
  store float %510, ptr %511, align 4
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 6
  %513 = getelementptr inbounds float, ptr %arg42, i32 %linear_index2
  store float %512, ptr %513, align 4
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 7
  %515 = getelementptr inbounds float, ptr %arg43, i32 %linear_index2
  store float %514, ptr %515, align 4
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 8
  %517 = getelementptr inbounds float, ptr %arg44, i32 %linear_index2
  store float %516, ptr %517, align 4
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 9
  %519 = getelementptr inbounds float, ptr %arg45, i32 %linear_index2
  store float %518, ptr %519, align 4
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 10
  %521 = getelementptr inbounds float, ptr %arg46, i32 %linear_index2
  store float %520, ptr %521, align 4
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 11
  %523 = getelementptr inbounds float, ptr %arg47, i32 %linear_index2
  store float %522, ptr %523, align 4
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 12
  %525 = getelementptr inbounds float, ptr %arg48, i32 %linear_index2
  store float %524, ptr %525, align 4
  %526 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %527 = load float, ptr %526, align 4, !invariant.load !269
  %528 = load float, ptr %arg3, align 4, !invariant.load !269
  %529 = add i32 %14, 0
  %530 = add i32 %13, 0
  %531 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %529, i32 %530
  %532 = load float, ptr %531, align 4, !invariant.load !269
  %533 = add i32 %14, 0
  %534 = add i32 %13, 16
  %535 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %533, i32 %534
  %536 = load float, ptr %535, align 4, !invariant.load !269
  %add.4075 = fadd float %532, %536
  %multiply.4176 = fmul float %528, %add.4075
  %subtract.4277 = fsub float %527, %multiply.4176
  %537 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4277, 0
  %538 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %539 = load float, ptr %538, align 4, !invariant.load !269
  %540 = add i32 %14, 0
  %541 = add i32 %13, 16
  %542 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %540, i32 %541
  %543 = load float, ptr %542, align 4, !invariant.load !269
  %544 = add i32 %14, 0
  %545 = add i32 %13, 48
  %546 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %544, i32 %545
  %547 = load float, ptr %546, align 4, !invariant.load !269
  %add.4578 = fadd float %543, %547
  %multiply.4679 = fmul float %528, %add.4578
  %subtract.4780 = fsub float %539, %multiply.4679
  %548 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %537, float %subtract.4780, 1
  %549 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %550 = load float, ptr %549, align 4, !invariant.load !269
  %551 = add i32 %14, 0
  %552 = add i32 %13, 16
  %553 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %551, i32 %552
  %554 = load float, ptr %553, align 4, !invariant.load !269
  %555 = add i32 %14, 0
  %556 = add i32 %13, 96
  %557 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %555, i32 %556
  %558 = load float, ptr %557, align 4, !invariant.load !269
  %add.5081 = fadd float %554, %558
  %multiply.5182 = fmul float %528, %add.5081
  %subtract.5283 = fsub float %550, %multiply.5182
  %559 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %548, float %subtract.5283, 2
  %560 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %561 = load float, ptr %560, align 4, !invariant.load !269
  %562 = add i32 %14, 0
  %563 = add i32 %13, 0
  %564 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %562, i32 %563
  %565 = load float, ptr %564, align 4, !invariant.load !269
  %multiply.5484 = fmul float %528, %565
  %subtract.5585 = fsub float %561, %multiply.5484
  %566 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %559, float %subtract.5585, 3
  %567 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %568 = load float, ptr %567, align 4, !invariant.load !269
  %569 = add i32 %14, 0
  %570 = add i32 %13, 0
  %571 = add i32 %569, 0
  %572 = add i32 %570, 0
  %573 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %571, i32 %572
  %574 = load float, ptr %573, align 4, !invariant.load !269
  %575 = add i32 %569, 0
  %576 = add i32 %570, 0
  %577 = getelementptr inbounds [8192 x [352 x float]], ptr %arg12, i32 0, i32 %575, i32 %576
  %578 = load float, ptr %577, align 4, !invariant.load !269
  %add.5886 = fadd float %574, %578
  %579 = add i32 %569, 0
  %580 = add i32 %570, 0
  %581 = getelementptr inbounds [8192 x [224 x float]], ptr %arg11, i32 0, i32 %579, i32 %580
  %582 = load float, ptr %581, align 4, !invariant.load !269
  %add.6087 = fadd float %add.5886, %582
  %multiply.6288 = fmul float %528, %add.6087
  %subtract.6389 = fsub float %568, %multiply.6288
  %583 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %566, float %subtract.6389, 4
  %584 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  %585 = load float, ptr %584, align 4, !invariant.load !269
  %586 = add i32 %14, 0
  %587 = add i32 %13, 0
  %588 = add i32 %586, 0
  %589 = add i32 %587, 0
  %590 = getelementptr inbounds [8192 x [360 x float]], ptr %arg17, i32 0, i32 %588, i32 %589
  %591 = load float, ptr %590, align 4, !invariant.load !269
  %592 = add i32 %586, 0
  %593 = add i32 %587, 0
  %594 = getelementptr inbounds [8192 x [352 x float]], ptr %arg16, i32 0, i32 %592, i32 %593
  %595 = load float, ptr %594, align 4, !invariant.load !269
  %add.6690 = fadd float %591, %595
  %596 = add i32 %586, 0
  %597 = add i32 %587, 0
  %598 = getelementptr inbounds [8192 x [224 x float]], ptr %arg15, i32 0, i32 %596, i32 %597
  %599 = load float, ptr %598, align 4, !invariant.load !269
  %add.6891 = fadd float %add.6690, %599
  %multiply.7092 = fmul float %528, %add.6891
  %subtract.7193 = fsub float %585, %multiply.7092
  %600 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %583, float %subtract.7193, 5
  %601 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  %602 = load float, ptr %601, align 4, !invariant.load !269
  %603 = add i32 %14, 0
  %604 = add i32 %13, 0
  %605 = add i32 %603, 0
  %606 = add i32 %604, 0
  %607 = getelementptr inbounds [8192 x [360 x float]], ptr %arg21, i32 0, i32 %605, i32 %606
  %608 = load float, ptr %607, align 4, !invariant.load !269
  %609 = add i32 %603, 0
  %610 = add i32 %604, 0
  %611 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %609, i32 %610
  %612 = load float, ptr %611, align 4, !invariant.load !269
  %add.7494 = fadd float %608, %612
  %613 = add i32 %603, 0
  %614 = add i32 %604, 0
  %615 = getelementptr inbounds [8192 x [224 x float]], ptr %arg19, i32 0, i32 %613, i32 %614
  %616 = load float, ptr %615, align 4, !invariant.load !269
  %add.7695 = fadd float %add.7494, %616
  %multiply.7896 = fmul float %528, %add.7695
  %subtract.7997 = fsub float %602, %multiply.7896
  %617 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %600, float %subtract.7997, 6
  %618 = getelementptr inbounds float, ptr %arg22, i32 %linear_index3
  %619 = load float, ptr %618, align 4, !invariant.load !269
  %620 = add i32 %14, 0
  %621 = add i32 %13, 0
  %622 = add i32 %620, 0
  %623 = add i32 %621, 0
  %624 = getelementptr inbounds [8192 x [384 x float]], ptr %arg25, i32 0, i32 %622, i32 %623
  %625 = load float, ptr %624, align 4, !invariant.load !269
  %626 = add i32 %620, 0
  %627 = add i32 %621, 0
  %628 = getelementptr inbounds [8192 x [352 x float]], ptr %arg24, i32 0, i32 %626, i32 %627
  %629 = load float, ptr %628, align 4, !invariant.load !269
  %add.8298 = fadd float %625, %629
  %630 = add i32 %620, 0
  %631 = add i32 %621, 0
  %632 = getelementptr inbounds [8192 x [224 x float]], ptr %arg23, i32 0, i32 %630, i32 %631
  %633 = load float, ptr %632, align 4, !invariant.load !269
  %add.8499 = fadd float %add.8298, %633
  %multiply.86100 = fmul float %528, %add.8499
  %subtract.87101 = fsub float %619, %multiply.86100
  %634 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %617, float %subtract.87101, 7
  %635 = getelementptr inbounds float, ptr %arg26, i32 %linear_index3
  %636 = load float, ptr %635, align 4, !invariant.load !269
  %637 = add i32 %14, 0
  %638 = add i32 %13, 0
  %639 = getelementptr inbounds [8192 x [352 x float]], ptr %arg27, i32 0, i32 %637, i32 %638
  %640 = load float, ptr %639, align 4, !invariant.load !269
  %multiply.89102 = fmul float %528, %640
  %subtract.90103 = fsub float %636, %multiply.89102
  %641 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %634, float %subtract.90103, 8
  %642 = getelementptr inbounds float, ptr %arg28, i32 %linear_index3
  %643 = load float, ptr %642, align 4, !invariant.load !269
  %644 = add i32 %14, 0
  %645 = add i32 %13, 16
  %646 = getelementptr inbounds [8192 x [304 x float]], ptr %arg29, i32 0, i32 %644, i32 %645
  %647 = load float, ptr %646, align 4, !invariant.load !269
  %multiply.92104 = fmul float %528, %647
  %subtract.93105 = fsub float %643, %multiply.92104
  %648 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %641, float %subtract.93105, 9
  %649 = getelementptr inbounds float, ptr %arg30, i32 %linear_index3
  %650 = load float, ptr %649, align 4, !invariant.load !269
  %651 = add i32 %14, 0
  %652 = add i32 %13, 0
  %653 = getelementptr inbounds [8192 x [352 x float]], ptr %arg31, i32 0, i32 %651, i32 %652
  %654 = load float, ptr %653, align 4, !invariant.load !269
  %multiply.95106 = fmul float %528, %654
  %subtract.96107 = fsub float %650, %multiply.95106
  %655 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %648, float %subtract.96107, 10
  %656 = getelementptr inbounds float, ptr %arg32, i32 %linear_index3
  %657 = load float, ptr %656, align 4, !invariant.load !269
  %658 = add i32 %14, 0
  %659 = add i32 %13, 16
  %660 = getelementptr inbounds [8192 x [304 x float]], ptr %arg33, i32 0, i32 %658, i32 %659
  %661 = load float, ptr %660, align 4, !invariant.load !269
  %multiply.98108 = fmul float %528, %661
  %subtract.99109 = fsub float %657, %multiply.98108
  %662 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %655, float %subtract.99109, 11
  %663 = getelementptr inbounds float, ptr %arg34, i32 %linear_index3
  %664 = load float, ptr %663, align 4, !invariant.load !269
  %665 = add i32 %14, 0
  %666 = add i32 %13, 0
  %667 = getelementptr inbounds [8192 x [352 x float]], ptr %arg35, i32 0, i32 %665, i32 %666
  %668 = load float, ptr %667, align 4, !invariant.load !269
  %multiply.101110 = fmul float %528, %668
  %subtract.102111 = fsub float %664, %multiply.101110
  %669 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %662, float %subtract.102111, 12
  %670 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 0
  %671 = getelementptr inbounds float, ptr %arg36, i32 %linear_index3
  store float %670, ptr %671, align 4
  %672 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 1
  %673 = getelementptr inbounds float, ptr %arg37, i32 %linear_index3
  store float %672, ptr %673, align 4
  %674 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 2
  %675 = getelementptr inbounds float, ptr %arg38, i32 %linear_index3
  store float %674, ptr %675, align 4
  %676 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 3
  %677 = getelementptr inbounds float, ptr %arg39, i32 %linear_index3
  store float %676, ptr %677, align 4
  %678 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 4
  %679 = getelementptr inbounds float, ptr %arg40, i32 %linear_index3
  store float %678, ptr %679, align 4
  %680 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 5
  %681 = getelementptr inbounds float, ptr %arg41, i32 %linear_index3
  store float %680, ptr %681, align 4
  %682 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 6
  %683 = getelementptr inbounds float, ptr %arg42, i32 %linear_index3
  store float %682, ptr %683, align 4
  %684 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 7
  %685 = getelementptr inbounds float, ptr %arg43, i32 %linear_index3
  store float %684, ptr %685, align 4
  %686 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 8
  %687 = getelementptr inbounds float, ptr %arg44, i32 %linear_index3
  store float %686, ptr %687, align 4
  %688 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 9
  %689 = getelementptr inbounds float, ptr %arg45, i32 %linear_index3
  store float %688, ptr %689, align 4
  %690 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 10
  %691 = getelementptr inbounds float, ptr %arg46, i32 %linear_index3
  store float %690, ptr %691, align 4
  %692 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 11
  %693 = getelementptr inbounds float, ptr %arg47, i32 %linear_index3
  store float %692, ptr %693, align 4
  %694 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %669, 12
  %695 = getelementptr inbounds float, ptr %arg48, i32 %linear_index3
  store float %694, ptr %695, align 4
  br label %fusion_137.in_bounds-after
}

define void @fusion_370(ptr noalias align 128 dereferenceable(14680064) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @43, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !414

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !415

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__4(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__4(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__4(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__4(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__4(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__4(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__4(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__4(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__4(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__4(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_16_constant_3 = load float, ptr @42, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 192
  %Arg_0.1 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__4(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_16_constant_37 = load float, ptr @42, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 192
  %Arg_0.19 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_16_constant_316 = load float, ptr @42, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 192
  %Arg_0.118 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__4(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_16_constant_323 = load float, ptr @42, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 192
  %Arg_0.125 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__4(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_213(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(1024) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1024) %arg3, ptr noalias align 128 dereferenceable(1024) %arg4, ptr noalias align 16 dereferenceable(1024) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 16 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 16 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10, ptr noalias align 16 dereferenceable(1024) %arg11, ptr noalias align 128 dereferenceable(1024) %arg12, ptr noalias align 16 dereferenceable(1024) %arg13, ptr noalias align 128 dereferenceable(1024) %arg14, ptr noalias align 16 dereferenceable(1024) %arg15, ptr noalias align 128 dereferenceable(1024) %arg16, ptr noalias align 16 dereferenceable(1024) %arg17, ptr noalias align 128 dereferenceable(1024) %arg18, ptr noalias align 128 dereferenceable(1024) %arg19, ptr noalias align 128 dereferenceable(1024) %arg20, ptr noalias align 128 dereferenceable(1024) %arg21, ptr noalias align 128 dereferenceable(1024) %arg22, ptr noalias align 128 dereferenceable(1024) %arg23, ptr noalias align 128 dereferenceable(1024) %arg24, ptr noalias align 128 dereferenceable(1024) %arg25, ptr noalias align 128 dereferenceable(1024) %arg26, ptr noalias align 128 dereferenceable(1024) %arg27) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 256
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 256
  br i1 %4, label %fusion_213.in_bounds-true, label %fusion_213.in_bounds-after

fusion_213.in_bounds-after:                       ; preds = %fusion_213.in_bounds-true, %entry
  ret void

fusion_213.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4, !invariant.load !269
  %multiply.21 = fmul float %7, %9
  %subtract.22 = fsub float %6, %multiply.21
  %10 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.22, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %multiply.23 = fmul float %7, %14
  %subtract.24 = fsub float %12, %multiply.23
  %15 = insertvalue { float, float, float, float, float, float, float, float, float } %10, float %subtract.24, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %multiply.25 = fmul float %7, %19
  %subtract.26 = fsub float %17, %multiply.25
  %20 = insertvalue { float, float, float, float, float, float, float, float, float } %15, float %subtract.26, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %multiply.27 = fmul float %7, %24
  %subtract.28 = fsub float %22, %multiply.27
  %25 = insertvalue { float, float, float, float, float, float, float, float, float } %20, float %subtract.28, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %multiply.29 = fmul float %7, %29
  %subtract.30 = fsub float %27, %multiply.29
  %30 = insertvalue { float, float, float, float, float, float, float, float, float } %25, float %subtract.30, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.31 = fmul float %7, %34
  %subtract.32 = fsub float %32, %multiply.31
  %35 = insertvalue { float, float, float, float, float, float, float, float, float } %30, float %subtract.32, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %multiply.33 = fmul float %7, %39
  %subtract.34 = fsub float %37, %multiply.33
  %40 = insertvalue { float, float, float, float, float, float, float, float, float } %35, float %subtract.34, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %multiply.35 = fmul float %7, %44
  %subtract.36 = fsub float %42, %multiply.35
  %45 = insertvalue { float, float, float, float, float, float, float, float, float } %40, float %subtract.36, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !269
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %multiply.37 = fmul float %7, %49
  %subtract.38 = fsub float %47, %multiply.37
  %50 = insertvalue { float, float, float, float, float, float, float, float, float } %45, float %subtract.38, 8
  %51 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 0
  %52 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 1
  %54 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %53, ptr %54, align 4
  %55 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 2
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 3
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %57, ptr %58, align 4
  %59 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 4
  %60 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %59, ptr %60, align 4
  %61 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 5
  %62 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %61, ptr %62, align 4
  %63 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 6
  %64 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  store float %63, ptr %64, align 4
  %65 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 7
  %66 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %65, ptr %66, align 4
  %67 = extractvalue { float, float, float, float, float, float, float, float, float } %50, 8
  %68 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  store float %67, ptr %68, align 4
  br label %fusion_213.in_bounds-after
}

define void @concatenate_342(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(14680064) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !416
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 917504
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 448
  %5 = udiv i32 %linear_index_base, 448
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 448
  %8 = udiv i32 %linear_index1, 448
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 448
  %11 = udiv i32 %linear_index2, 448
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 448
  %14 = udiv i32 %linear_index3, 448
  %15 = icmp ult i32 %linear_index_base, 3670016
  br i1 %15, label %concatenate_342.in_bounds-true, label %concatenate_342.in_bounds-after

concatenate_342.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_342.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 448
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 448
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 448
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_342.in_bounds-true
  %46 = icmp ult i32 %4, 64
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %47 = icmp ult i32 %4, 192
  br i1 %47, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 448
  %53 = mul i32 %52, 64
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 64
  %57 = udiv i32 %54, 64
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %60 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 448
  %63 = mul i32 %62, 128
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 128
  %67 = udiv i32 %64, 128
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %70 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 448
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !269
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 64
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %81 = icmp ult i32 %7, 192
  br i1 %81, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 448
  %87 = mul i32 %86, 64
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 64
  %91 = udiv i32 %88, 64
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %94 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 448
  %97 = mul i32 %96, 128
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 128
  %101 = udiv i32 %98, 128
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %104 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 448
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !269
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 64
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %115 = icmp ult i32 %10, 192
  br i1 %115, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 448
  %121 = mul i32 %120, 64
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 64
  %125 = udiv i32 %122, 64
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %128 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 448
  %131 = mul i32 %130, 128
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %138 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 448
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 64
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %149 = icmp ult i32 %13, 192
  br i1 %149, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_342.in_bounds-after
}

define void @fusion_289(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 128 dereferenceable(65536) %arg4, ptr noalias align 16 dereferenceable(65536) %arg5, ptr noalias align 128 dereferenceable(229376) %arg6, ptr noalias align 16 dereferenceable(65536) %arg7, ptr noalias align 128 dereferenceable(65536) %arg8, ptr noalias align 16 dereferenceable(65536) %arg9, ptr noalias align 128 dereferenceable(65536) %arg10, ptr noalias align 16 dereferenceable(65536) %arg11, ptr noalias align 128 dereferenceable(65536) %arg12, ptr noalias align 16 dereferenceable(65536) %arg13, ptr noalias align 128 dereferenceable(65536) %arg14, ptr noalias align 16 dereferenceable(65536) %arg15, ptr noalias align 128 dereferenceable(65536) %arg16, ptr noalias align 16 dereferenceable(65536) %arg17, ptr noalias align 128 dereferenceable(65536) %arg18, ptr noalias align 128 dereferenceable(65536) %arg19) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !417
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_289.in_bounds-true, label %fusion_289.in_bounds-after

fusion_289.in_bounds-after:                       ; preds = %fusion_289.in_bounds-true, %entry
  ret void

fusion_289.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.21 = fmul float %9, %11
  %subtract.22 = fsub float %8, %multiply.21
  %12 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.22, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.23 = fmul float %9, %16
  %subtract.24 = fsub float %14, %multiply.23
  %17 = insertvalue { float, float, float, float, float, float, float, float, float } %12, float %subtract.24, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = add i32 %5, 64
  %21 = add i32 %4, 0
  %22 = getelementptr inbounds [448 x [128 x float]], ptr %arg6, i32 0, i32 %20, i32 %21
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %multiply.26 = fmul float %9, %23
  %subtract.27 = fsub float %19, %multiply.26
  %24 = insertvalue { float, float, float, float, float, float, float, float, float } %17, float %subtract.27, 2
  %25 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %27 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %28 = load float, ptr %27, align 4
  %multiply.28 = fmul float %9, %28
  %subtract.29 = fsub float %26, %multiply.28
  %29 = insertvalue { float, float, float, float, float, float, float, float, float } %24, float %subtract.29, 3
  %30 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %32 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %33 = load float, ptr %32, align 4
  %multiply.30 = fmul float %9, %33
  %subtract.31 = fsub float %31, %multiply.30
  %34 = insertvalue { float, float, float, float, float, float, float, float, float } %29, float %subtract.31, 4
  %35 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !269
  %37 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %38 = load float, ptr %37, align 4
  %multiply.32 = fmul float %9, %38
  %subtract.33 = fsub float %36, %multiply.32
  %39 = insertvalue { float, float, float, float, float, float, float, float, float } %34, float %subtract.33, 5
  %40 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %42 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %43 = load float, ptr %42, align 4
  %multiply.34 = fmul float %9, %43
  %subtract.35 = fsub float %41, %multiply.34
  %44 = insertvalue { float, float, float, float, float, float, float, float, float } %39, float %subtract.35, 6
  %45 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %47 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %48 = load float, ptr %47, align 4
  %multiply.36 = fmul float %9, %48
  %subtract.37 = fsub float %46, %multiply.36
  %49 = insertvalue { float, float, float, float, float, float, float, float, float } %44, float %subtract.37, 7
  %50 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %53 = load float, ptr %52, align 4
  %multiply.38 = fmul float %9, %53
  %subtract.39 = fsub float %51, %multiply.38
  %54 = insertvalue { float, float, float, float, float, float, float, float, float } %49, float %subtract.39, 8
  %55 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 0
  %56 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 1
  %58 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %57, ptr %58, align 4
  %59 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 2
  %60 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %59, ptr %60, align 4
  %61 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 3
  %62 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %61, ptr %62, align 4
  %63 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 4
  %64 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %63, ptr %64, align 4
  %65 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 5
  %66 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %65, ptr %66, align 4
  %67 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 6
  %68 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %67, ptr %68, align 4
  %69 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 7
  %70 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %69, ptr %70, align 4
  %71 = extractvalue { float, float, float, float, float, float, float, float, float } %54, 8
  %72 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %71, ptr %72, align 4
  br label %fusion_289.in_bounds-after
}

define void @fusion_438(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(163840) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(229376) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(180224) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(180224) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 128 dereferenceable(229376) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(229376) %arg16, ptr noalias align 16 dereferenceable(32768) %arg17, ptr noalias align 128 dereferenceable(114688) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 128 dereferenceable(163840) %arg20, ptr noalias align 16 dereferenceable(32768) %arg21, ptr noalias align 128 dereferenceable(114688) %arg22, ptr noalias align 16 dereferenceable(32768) %arg23, ptr noalias align 128 dereferenceable(114688) %arg24, ptr noalias align 16 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(114688) %arg26, ptr noalias align 16 dereferenceable(32768) %arg27, ptr noalias align 128 dereferenceable(163840) %arg28, ptr noalias align 16 dereferenceable(32768) %arg29, ptr noalias align 128 dereferenceable(163840) %arg30, ptr noalias align 16 dereferenceable(32768) %arg31, ptr noalias align 128 dereferenceable(229376) %arg32, ptr noalias align 128 dereferenceable(32768) %arg33, ptr noalias align 128 dereferenceable(32768) %arg34, ptr noalias align 128 dereferenceable(32768) %arg35, ptr noalias align 128 dereferenceable(32768) %arg36, ptr noalias align 128 dereferenceable(32768) %arg37, ptr noalias align 128 dereferenceable(32768) %arg38, ptr noalias align 128 dereferenceable(32768) %arg39, ptr noalias align 128 dereferenceable(32768) %arg40, ptr noalias align 128 dereferenceable(32768) %arg41, ptr noalias align 128 dereferenceable(32768) %arg42, ptr noalias align 128 dereferenceable(32768) %arg43, ptr noalias align 128 dereferenceable(32768) %arg44, ptr noalias align 128 dereferenceable(32768) %arg45, ptr noalias align 128 dereferenceable(32768) %arg46, ptr noalias align 128 dereferenceable(32768) %arg47, ptr noalias align 128 dereferenceable(32768) %arg48) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_438.in_bounds-true, label %fusion_438.in_bounds-after

fusion_438.in_bounds-after:                       ; preds = %fusion_438.in_bounds-true, %entry
  ret void

fusion_438.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.36 = fmul float %9, %13
  %subtract.37 = fsub float %8, %multiply.36
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.37, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 32
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.39 = fmul float %9, %20
  %subtract.40 = fsub float %16, %multiply.39
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.40, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [448 x [128 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.42 = fmul float %9, %27
  %subtract.43 = fsub float %23, %multiply.42
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.43, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 32
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [128 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.45 = fmul float %9, %34
  %subtract.46 = fsub float %30, %multiply.45
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.46, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 32
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.48 = fmul float %9, %41
  %subtract.49 = fsub float %37, %multiply.48
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.49, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 32
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [352 x [128 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.51 = fmul float %9, %48
  %subtract.52 = fsub float %44, %multiply.51
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.52, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [448 x [128 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.54 = fmul float %9, %55
  %subtract.55 = fsub float %51, %multiply.54
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.55, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [448 x [128 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.57 = fmul float %9, %62
  %subtract.58 = fsub float %58, %multiply.57
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.58, 7
  %64 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %66 = add i32 %5, 32
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [224 x [128 x float]], ptr %arg18, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %multiply.60 = fmul float %9, %69
  %subtract.61 = fsub float %65, %multiply.60
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.61, 8
  %71 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = add i32 %5, 0
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [320 x [128 x float]], ptr %arg20, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %multiply.63 = fmul float %9, %76
  %subtract.64 = fsub float %72, %multiply.63
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.64, 9
  %78 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %80 = add i32 %5, 32
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [224 x [128 x float]], ptr %arg22, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %multiply.66 = fmul float %9, %83
  %subtract.67 = fsub float %79, %multiply.66
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.67, 10
  %85 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %87 = add i32 %5, 32
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [224 x [128 x float]], ptr %arg24, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.69 = fmul float %9, %90
  %subtract.70 = fsub float %86, %multiply.69
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.70, 11
  %92 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = add i32 %5, 32
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [224 x [128 x float]], ptr %arg26, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %multiply.72 = fmul float %9, %97
  %subtract.73 = fsub float %93, %multiply.72
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.73, 12
  %99 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %101 = add i32 %5, 0
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [320 x [128 x float]], ptr %arg28, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %multiply.75 = fmul float %9, %104
  %subtract.76 = fsub float %100, %multiply.75
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.76, 13
  %106 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %108 = add i32 %5, 0
  %109 = add i32 %4, 0
  %110 = getelementptr inbounds [320 x [128 x float]], ptr %arg30, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !269
  %multiply.78 = fmul float %9, %111
  %subtract.79 = fsub float %107, %multiply.78
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.79, 14
  %113 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %115 = add i32 %5, 0
  %116 = add i32 %4, 0
  %117 = getelementptr inbounds [448 x [128 x float]], ptr %arg32, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !269
  %multiply.81 = fmul float %9, %118
  %subtract.82 = fsub float %114, %multiply.81
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.82, 15
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 0
  %121 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 1
  %123 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 2
  %125 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 3
  %127 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 4
  %129 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 5
  %131 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 6
  %133 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 7
  %135 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 8
  %137 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 9
  %139 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 10
  %141 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 11
  %143 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 12
  %145 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 13
  %147 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 14
  %149 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 15
  %151 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %150, ptr %151, align 4
  br label %fusion_438.in_bounds-after
}

define void @fusion_270(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(163840) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 16 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(163840) %arg5, ptr noalias align 16 dereferenceable(65536) %arg6, ptr noalias align 16 dereferenceable(65536) %arg7, ptr noalias align 128 dereferenceable(163840) %arg8, ptr noalias align 16 dereferenceable(65536) %arg9, ptr noalias align 16 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(163840) %arg11, ptr noalias align 16 dereferenceable(65536) %arg12, ptr noalias align 16 dereferenceable(65536) %arg13, ptr noalias align 128 dereferenceable(65536) %arg14, ptr noalias align 16 dereferenceable(65536) %arg15, ptr noalias align 128 dereferenceable(229376) %arg16, ptr noalias align 16 dereferenceable(65536) %arg17, ptr noalias align 128 dereferenceable(229376) %arg18, ptr noalias align 16 dereferenceable(65536) %arg19, ptr noalias align 128 dereferenceable(229376) %arg20, ptr noalias align 16 dereferenceable(65536) %arg21, ptr noalias align 128 dereferenceable(114688) %arg22, ptr noalias align 16 dereferenceable(65536) %arg23, ptr noalias align 128 dereferenceable(114688) %arg24, ptr noalias align 16 dereferenceable(65536) %arg25, ptr noalias align 128 dereferenceable(114688) %arg26, ptr noalias align 16 dereferenceable(65536) %arg27, ptr noalias align 128 dereferenceable(114688) %arg28, ptr noalias align 16 dereferenceable(65536) %arg29, ptr noalias align 128 dereferenceable(65536) %arg30, ptr noalias align 16 dereferenceable(65536) %arg31, ptr noalias align 128 dereferenceable(65536) %arg32, ptr noalias align 16 dereferenceable(65536) %arg33, ptr noalias align 128 dereferenceable(65536) %arg34, ptr noalias align 16 dereferenceable(65536) %arg35, ptr noalias align 128 dereferenceable(65536) %arg36, ptr noalias align 16 dereferenceable(65536) %arg37, ptr noalias align 128 dereferenceable(65536) %arg38, ptr noalias align 16 dereferenceable(65536) %arg39, ptr noalias align 128 dereferenceable(65536) %arg40, ptr noalias align 128 dereferenceable(65536) %arg41, ptr noalias align 128 dereferenceable(65536) %arg42, ptr noalias align 128 dereferenceable(65536) %arg43, ptr noalias align 128 dereferenceable(65536) %arg44, ptr noalias align 128 dereferenceable(65536) %arg45, ptr noalias align 128 dereferenceable(65536) %arg46, ptr noalias align 128 dereferenceable(65536) %arg47, ptr noalias align 128 dereferenceable(65536) %arg48, ptr noalias align 128 dereferenceable(65536) %arg49, ptr noalias align 128 dereferenceable(65536) %arg50, ptr noalias align 128 dereferenceable(65536) %arg51, ptr noalias align 128 dereferenceable(65536) %arg52, ptr noalias align 128 dereferenceable(65536) %arg53, ptr noalias align 128 dereferenceable(65536) %arg54, ptr noalias align 128 dereferenceable(65536) %arg55, ptr noalias align 128 dereferenceable(65536) %arg56, ptr noalias align 128 dereferenceable(65536) %arg57, ptr noalias align 128 dereferenceable(65536) %arg58, ptr noalias align 128 dereferenceable(65536) %arg59, ptr noalias align 128 dereferenceable(65536) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !417
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_270.in_bounds-true, label %fusion_270.in_bounds-after

fusion_270.in_bounds-after:                       ; preds = %fusion_270.in_bounds-true, %entry
  ret void

fusion_270.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 192
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.44 = fmul float %9, %13
  %subtract.45 = fsub float %8, %multiply.44
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 64
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.47 = fmul float %9, %20
  %subtract.48 = fsub float %16, %multiply.47
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.48, 1
  %22 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 64
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [320 x [128 x float]], ptr %arg5, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.50 = fmul float %9, %27
  %subtract.51 = fsub float %23, %multiply.50
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.51, 2
  %29 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 192
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [320 x [128 x float]], ptr %arg5, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.53 = fmul float %9, %34
  %subtract.54 = fsub float %30, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.54, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 64
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [320 x [128 x float]], ptr %arg8, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.56 = fmul float %9, %41
  %subtract.57 = fsub float %37, %multiply.56
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.57, 4
  %43 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 192
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [320 x [128 x float]], ptr %arg8, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.59 = fmul float %9, %48
  %subtract.60 = fsub float %44, %multiply.59
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.60, 5
  %50 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 64
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [320 x [128 x float]], ptr %arg11, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.62 = fmul float %9, %55
  %subtract.63 = fsub float %51, %multiply.62
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.63, 6
  %57 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 192
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [320 x [128 x float]], ptr %arg11, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.65 = fmul float %9, %62
  %subtract.66 = fsub float %58, %multiply.65
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.66, 7
  %64 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %66 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %multiply.67 = fmul float %9, %67
  %subtract.68 = fsub float %65, %multiply.67
  %68 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.68, 8
  %69 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %70 = load float, ptr %69, align 4, !invariant.load !269
  %71 = add i32 %5, 64
  %72 = add i32 %4, 0
  %73 = getelementptr inbounds [448 x [128 x float]], ptr %arg16, i32 0, i32 %71, i32 %72
  %74 = load float, ptr %73, align 4, !invariant.load !269
  %multiply.70 = fmul float %9, %74
  %subtract.71 = fsub float %70, %multiply.70
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %68, float %subtract.71, 9
  %76 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %78 = add i32 %5, 64
  %79 = add i32 %4, 0
  %80 = getelementptr inbounds [448 x [128 x float]], ptr %arg18, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %multiply.73 = fmul float %9, %81
  %subtract.74 = fsub float %77, %multiply.73
  %82 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.74, 10
  %83 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !269
  %85 = add i32 %5, 64
  %86 = add i32 %4, 0
  %87 = getelementptr inbounds [448 x [128 x float]], ptr %arg20, i32 0, i32 %85, i32 %86
  %88 = load float, ptr %87, align 4, !invariant.load !269
  %multiply.76 = fmul float %9, %88
  %subtract.77 = fsub float %84, %multiply.76
  %89 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %82, float %subtract.77, 11
  %90 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %91 = load float, ptr %90, align 4, !invariant.load !269
  %92 = add i32 %5, 96
  %93 = add i32 %4, 0
  %94 = getelementptr inbounds [224 x [128 x float]], ptr %arg22, i32 0, i32 %92, i32 %93
  %95 = load float, ptr %94, align 4, !invariant.load !269
  %multiply.79 = fmul float %9, %95
  %subtract.80 = fsub float %91, %multiply.79
  %96 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %89, float %subtract.80, 12
  %97 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %98 = load float, ptr %97, align 4, !invariant.load !269
  %99 = add i32 %5, 96
  %100 = add i32 %4, 0
  %101 = getelementptr inbounds [224 x [128 x float]], ptr %arg24, i32 0, i32 %99, i32 %100
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %multiply.82 = fmul float %9, %102
  %subtract.83 = fsub float %98, %multiply.82
  %103 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %96, float %subtract.83, 13
  %104 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %105 = load float, ptr %104, align 4, !invariant.load !269
  %106 = add i32 %5, 96
  %107 = add i32 %4, 0
  %108 = getelementptr inbounds [224 x [128 x float]], ptr %arg26, i32 0, i32 %106, i32 %107
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %multiply.85 = fmul float %9, %109
  %subtract.86 = fsub float %105, %multiply.85
  %110 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %103, float %subtract.86, 14
  %111 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %112 = load float, ptr %111, align 4, !invariant.load !269
  %113 = add i32 %5, 96
  %114 = add i32 %4, 0
  %115 = getelementptr inbounds [224 x [128 x float]], ptr %arg28, i32 0, i32 %113, i32 %114
  %116 = load float, ptr %115, align 4, !invariant.load !269
  %multiply.88 = fmul float %9, %116
  %subtract.89 = fsub float %112, %multiply.88
  %117 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, float %subtract.89, 15
  %118 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %119 = load float, ptr %118, align 4, !invariant.load !269
  %120 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %121 = load float, ptr %120, align 4, !invariant.load !269
  %multiply.90 = fmul float %9, %121
  %subtract.91 = fsub float %119, %multiply.90
  %122 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %117, float %subtract.91, 16
  %123 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %124 = load float, ptr %123, align 4, !invariant.load !269
  %125 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %126 = load float, ptr %125, align 4, !invariant.load !269
  %multiply.92 = fmul float %9, %126
  %subtract.93 = fsub float %124, %multiply.92
  %127 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, float %subtract.93, 17
  %128 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %129 = load float, ptr %128, align 4, !invariant.load !269
  %130 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %131 = load float, ptr %130, align 4, !invariant.load !269
  %multiply.94 = fmul float %9, %131
  %subtract.95 = fsub float %129, %multiply.94
  %132 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %127, float %subtract.95, 18
  %133 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %134 = load float, ptr %133, align 4, !invariant.load !269
  %135 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %136 = load float, ptr %135, align 4, !invariant.load !269
  %multiply.96 = fmul float %9, %136
  %subtract.97 = fsub float %134, %multiply.96
  %137 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, float %subtract.97, 19
  %138 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %139 = load float, ptr %138, align 4, !invariant.load !269
  %140 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %141 = load float, ptr %140, align 4
  %multiply.98 = fmul float %9, %141
  %subtract.99 = fsub float %139, %multiply.98
  %142 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %137, float %subtract.99, 20
  %143 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %144 = load float, ptr %143, align 4, !invariant.load !269
  %145 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %146 = load float, ptr %145, align 4
  %multiply.100 = fmul float %9, %146
  %subtract.101 = fsub float %144, %multiply.100
  %147 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, float %subtract.101, 21
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 0
  %149 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 1
  %151 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 2
  %153 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 3
  %155 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 4
  %157 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 5
  %159 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 6
  %161 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 7
  %163 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 8
  %165 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 9
  %167 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 10
  %169 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %168, ptr %169, align 4
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 11
  %171 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 12
  %173 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %172, ptr %173, align 4
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 13
  %175 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %174, ptr %175, align 4
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 14
  %177 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 15
  %179 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 16
  %181 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 17
  %183 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 18
  %185 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 19
  %187 = getelementptr inbounds float, ptr %arg60, i32 %linear_index
  store float %186, ptr %187, align 4
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 20
  %189 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %188, ptr %189, align 4
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 21
  %191 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %190, ptr %191, align 4
  br label %fusion_270.in_bounds-after
}

define void @fusion_421(ptr noalias align 16 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(229376) %arg6, ptr noalias align 16 dereferenceable(131072) %arg7, ptr noalias align 128 dereferenceable(180224) %arg8, ptr noalias align 16 dereferenceable(131072) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(131072) %arg11, ptr noalias align 128 dereferenceable(180224) %arg12, ptr noalias align 16 dereferenceable(131072) %arg13, ptr noalias align 128 dereferenceable(229376) %arg14, ptr noalias align 16 dereferenceable(131072) %arg15, ptr noalias align 128 dereferenceable(229376) %arg16, ptr noalias align 16 dereferenceable(131072) %arg17, ptr noalias align 128 dereferenceable(131072) %arg18, ptr noalias align 16 dereferenceable(131072) %arg19, ptr noalias align 128 dereferenceable(131072) %arg20, ptr noalias align 16 dereferenceable(131072) %arg21, ptr noalias align 128 dereferenceable(131072) %arg22, ptr noalias align 16 dereferenceable(131072) %arg23, ptr noalias align 128 dereferenceable(131072) %arg24, ptr noalias align 16 dereferenceable(131072) %arg25, ptr noalias align 128 dereferenceable(131072) %arg26, ptr noalias align 16 dereferenceable(131072) %arg27, ptr noalias align 128 dereferenceable(131072) %arg28, ptr noalias align 16 dereferenceable(131072) %arg29, ptr noalias align 128 dereferenceable(131072) %arg30, ptr noalias align 16 dereferenceable(131072) %arg31, ptr noalias align 128 dereferenceable(131072) %arg32, ptr noalias align 16 dereferenceable(131072) %arg33, ptr noalias align 128 dereferenceable(229376) %arg34, ptr noalias align 16 dereferenceable(131072) %arg35, ptr noalias align 128 dereferenceable(131072) %arg36, ptr noalias align 16 dereferenceable(131072) %arg37, ptr noalias align 128 dereferenceable(131072) %arg38, ptr noalias align 16 dereferenceable(131072) %arg39, ptr noalias align 128 dereferenceable(131072) %arg40, ptr noalias align 128 dereferenceable(131072) %arg41, ptr noalias align 128 dereferenceable(131072) %arg42, ptr noalias align 128 dereferenceable(131072) %arg43, ptr noalias align 128 dereferenceable(131072) %arg44, ptr noalias align 128 dereferenceable(131072) %arg45, ptr noalias align 128 dereferenceable(131072) %arg46, ptr noalias align 128 dereferenceable(131072) %arg47, ptr noalias align 128 dereferenceable(131072) %arg48, ptr noalias align 128 dereferenceable(131072) %arg49, ptr noalias align 128 dereferenceable(131072) %arg50, ptr noalias align 128 dereferenceable(131072) %arg51, ptr noalias align 128 dereferenceable(131072) %arg52, ptr noalias align 128 dereferenceable(131072) %arg53, ptr noalias align 128 dereferenceable(131072) %arg54, ptr noalias align 128 dereferenceable(131072) %arg55, ptr noalias align 128 dereferenceable(131072) %arg56) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !352
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 32768
  br i1 %6, label %fusion_421.in_bounds-true, label %fusion_421.in_bounds-after

fusion_421.in_bounds-after:                       ; preds = %fusion_421.in_bounds-true, %entry
  ret void

fusion_421.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !269
  %multiply.43 = fmul float %9, %11
  %subtract.44 = fsub float %8, %multiply.43
  %12 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = add i32 %5, 96
  %16 = add i32 %4, 0
  %17 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %15, i32 %16
  %18 = load float, ptr %17, align 4, !invariant.load !269
  %multiply.46 = fmul float %9, %18
  %subtract.47 = fsub float %14, %multiply.46
  %19 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %12, float %subtract.47, 1
  %20 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %22 = add i32 %5, 192
  %23 = add i32 %4, 0
  %24 = getelementptr inbounds [448 x [128 x float]], ptr %arg6, i32 0, i32 %22, i32 %23
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %multiply.49 = fmul float %9, %25
  %subtract.50 = fsub float %21, %multiply.49
  %26 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %19, float %subtract.50, 2
  %27 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = add i32 %5, 96
  %30 = add i32 %4, 0
  %31 = getelementptr inbounds [352 x [128 x float]], ptr %arg8, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %multiply.52 = fmul float %9, %32
  %subtract.53 = fsub float %28, %multiply.52
  %33 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %26, float %subtract.53, 3
  %34 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = add i32 %5, 96
  %37 = add i32 %4, 0
  %38 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %multiply.55 = fmul float %9, %39
  %subtract.56 = fsub float %35, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %33, float %subtract.56, 4
  %41 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = add i32 %5, 96
  %44 = add i32 %4, 0
  %45 = getelementptr inbounds [352 x [128 x float]], ptr %arg12, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.58 = fmul float %9, %46
  %subtract.59 = fsub float %42, %multiply.58
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.59, 5
  %48 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %50 = add i32 %5, 192
  %51 = add i32 %4, 0
  %52 = getelementptr inbounds [448 x [128 x float]], ptr %arg14, i32 0, i32 %50, i32 %51
  %53 = load float, ptr %52, align 4, !invariant.load !269
  %multiply.61 = fmul float %9, %53
  %subtract.62 = fsub float %49, %multiply.61
  %54 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.62, 6
  %55 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %57 = add i32 %5, 192
  %58 = add i32 %4, 0
  %59 = getelementptr inbounds [448 x [128 x float]], ptr %arg16, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %multiply.64 = fmul float %9, %60
  %subtract.65 = fsub float %56, %multiply.64
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %54, float %subtract.65, 7
  %62 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !269
  %64 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %multiply.66 = fmul float %9, %65
  %subtract.67 = fsub float %63, %multiply.66
  %66 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.67, 8
  %67 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %68 = load float, ptr %67, align 4, !invariant.load !269
  %69 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %70 = load float, ptr %69, align 4, !invariant.load !269
  %multiply.68 = fmul float %9, %70
  %subtract.69 = fsub float %68, %multiply.68
  %71 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %66, float %subtract.69, 9
  %72 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %73 = load float, ptr %72, align 4, !invariant.load !269
  %74 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %multiply.70 = fmul float %9, %75
  %subtract.71 = fsub float %73, %multiply.70
  %76 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %71, float %subtract.71, 10
  %77 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %78 = load float, ptr %77, align 4, !invariant.load !269
  %79 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %80 = load float, ptr %79, align 4, !invariant.load !269
  %multiply.72 = fmul float %9, %80
  %subtract.73 = fsub float %78, %multiply.72
  %81 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %76, float %subtract.73, 11
  %82 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %84 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %85 = load float, ptr %84, align 4, !invariant.load !269
  %multiply.74 = fmul float %9, %85
  %subtract.75 = fsub float %83, %multiply.74
  %86 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %81, float %subtract.75, 12
  %87 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %88 = load float, ptr %87, align 4, !invariant.load !269
  %89 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.76 = fmul float %9, %90
  %subtract.77 = fsub float %88, %multiply.76
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %86, float %subtract.77, 13
  %92 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %95 = load float, ptr %94, align 4, !invariant.load !269
  %multiply.78 = fmul float %9, %95
  %subtract.79 = fsub float %93, %multiply.78
  %96 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.79, 14
  %97 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %98 = load float, ptr %97, align 4, !invariant.load !269
  %99 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %100 = load float, ptr %99, align 4
  %multiply.80 = fmul float %9, %100
  %subtract.81 = fsub float %98, %multiply.80
  %101 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %96, float %subtract.81, 15
  %102 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %103 = load float, ptr %102, align 4, !invariant.load !269
  %104 = add i32 %5, 192
  %105 = add i32 %4, 0
  %106 = getelementptr inbounds [448 x [128 x float]], ptr %arg34, i32 0, i32 %104, i32 %105
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %multiply.83 = fmul float %9, %107
  %subtract.84 = fsub float %103, %multiply.83
  %108 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %101, float %subtract.84, 16
  %109 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %110 = load float, ptr %109, align 4, !invariant.load !269
  %111 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %112 = load float, ptr %111, align 4
  %multiply.85 = fmul float %9, %112
  %subtract.86 = fsub float %110, %multiply.85
  %113 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %108, float %subtract.86, 17
  %114 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %115 = load float, ptr %114, align 4, !invariant.load !269
  %116 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %117 = load float, ptr %116, align 4
  %multiply.87 = fmul float %9, %117
  %subtract.88 = fsub float %115, %multiply.87
  %118 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, float %subtract.88, 18
  %119 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %120 = load float, ptr %119, align 4, !invariant.load !269
  %121 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %122 = load float, ptr %121, align 4
  %multiply.89 = fmul float %9, %122
  %subtract.90 = fsub float %120, %multiply.89
  %123 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %118, float %subtract.90, 19
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 0
  %125 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 1
  %127 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 2
  %129 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 3
  %131 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 4
  %133 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 5
  %135 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 6
  %137 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 7
  %139 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 8
  %141 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 9
  %143 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 10
  %145 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 11
  %147 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 12
  %149 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 13
  %151 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 14
  %153 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 15
  %155 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 16
  %157 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 17
  %159 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 18
  %161 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, 19
  %163 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %162, ptr %163, align 4
  br label %fusion_421.in_bounds-after
}

define void @fusion_104(ptr noalias align 128 dereferenceable(10485760) %arg0, ptr noalias align 128 dereferenceable(14680064) %arg1, ptr noalias align 128 dereferenceable(15728640) %arg2, ptr noalias align 128 dereferenceable(10485760) %arg3, ptr noalias align 128 dereferenceable(14680064) %arg4, ptr noalias align 128 dereferenceable(15728640) %arg5, ptr noalias align 128 dereferenceable(6291456) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !418
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 393216
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 192
  %5 = udiv i32 %linear_index_base, 192
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 192
  %8 = udiv i32 %linear_index1, 192
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 192
  %11 = udiv i32 %linear_index2, 192
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 192
  %14 = udiv i32 %linear_index3, 192
  %15 = icmp ult i32 %linear_index_base, 1572864
  br i1 %15, label %fusion_104.in_bounds-true, label %fusion_104.in_bounds-after

fusion_104.in_bounds-after:                       ; preds = %fusion_104.in_bounds-true, %entry
  ret void

fusion_104.in_bounds-true:                        ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [480 x float]], ptr %arg5, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = add i32 %5, 0
  %21 = add i32 %4, 0
  %22 = getelementptr inbounds [8192 x [448 x float]], ptr %arg4, i32 0, i32 %20, i32 %21
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %add.9 = fadd float %19, %23
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [8192 x [320 x float]], ptr %arg3, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %add.11 = fadd float %add.9, %27
  %28 = add i32 %5, 0
  %29 = add i32 %4, 0
  %30 = getelementptr inbounds [8192 x [480 x float]], ptr %arg2, i32 0, i32 %28, i32 %29
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %add.13 = fadd float %add.11, %31
  %32 = add i32 %5, 0
  %33 = add i32 %4, 0
  %34 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %32, i32 %33
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %add.15 = fadd float %add.13, %35
  %36 = add i32 %5, 0
  %37 = add i32 %4, 0
  %38 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %add.17 = fadd float %add.15, %39
  %40 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %add.17, ptr %40, align 4
  %41 = add i32 %8, 0
  %42 = add i32 %7, 0
  %43 = getelementptr inbounds [8192 x [480 x float]], ptr %arg5, i32 0, i32 %41, i32 %42
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %8, 0
  %46 = add i32 %7, 0
  %47 = getelementptr inbounds [8192 x [448 x float]], ptr %arg4, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %add.91 = fadd float %44, %48
  %49 = add i32 %8, 0
  %50 = add i32 %7, 0
  %51 = getelementptr inbounds [8192 x [320 x float]], ptr %arg3, i32 0, i32 %49, i32 %50
  %52 = load float, ptr %51, align 4, !invariant.load !269
  %add.112 = fadd float %add.91, %52
  %53 = add i32 %8, 0
  %54 = add i32 %7, 0
  %55 = getelementptr inbounds [8192 x [480 x float]], ptr %arg2, i32 0, i32 %53, i32 %54
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %add.133 = fadd float %add.112, %56
  %57 = add i32 %8, 0
  %58 = add i32 %7, 0
  %59 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %add.154 = fadd float %add.133, %60
  %61 = add i32 %8, 0
  %62 = add i32 %7, 0
  %63 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %61, i32 %62
  %64 = load float, ptr %63, align 4, !invariant.load !269
  %add.175 = fadd float %add.154, %64
  %65 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %add.175, ptr %65, align 4
  %66 = add i32 %11, 0
  %67 = add i32 %10, 0
  %68 = getelementptr inbounds [8192 x [480 x float]], ptr %arg5, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %70 = add i32 %11, 0
  %71 = add i32 %10, 0
  %72 = getelementptr inbounds [8192 x [448 x float]], ptr %arg4, i32 0, i32 %70, i32 %71
  %73 = load float, ptr %72, align 4, !invariant.load !269
  %add.96 = fadd float %69, %73
  %74 = add i32 %11, 0
  %75 = add i32 %10, 0
  %76 = getelementptr inbounds [8192 x [320 x float]], ptr %arg3, i32 0, i32 %74, i32 %75
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %add.117 = fadd float %add.96, %77
  %78 = add i32 %11, 0
  %79 = add i32 %10, 0
  %80 = getelementptr inbounds [8192 x [480 x float]], ptr %arg2, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %add.138 = fadd float %add.117, %81
  %82 = add i32 %11, 0
  %83 = add i32 %10, 0
  %84 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %82, i32 %83
  %85 = load float, ptr %84, align 4, !invariant.load !269
  %add.159 = fadd float %add.138, %85
  %86 = add i32 %11, 0
  %87 = add i32 %10, 0
  %88 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %86, i32 %87
  %89 = load float, ptr %88, align 4, !invariant.load !269
  %add.1710 = fadd float %add.159, %89
  %90 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %add.1710, ptr %90, align 4
  %91 = add i32 %14, 0
  %92 = add i32 %13, 0
  %93 = getelementptr inbounds [8192 x [480 x float]], ptr %arg5, i32 0, i32 %91, i32 %92
  %94 = load float, ptr %93, align 4, !invariant.load !269
  %95 = add i32 %14, 0
  %96 = add i32 %13, 0
  %97 = getelementptr inbounds [8192 x [448 x float]], ptr %arg4, i32 0, i32 %95, i32 %96
  %98 = load float, ptr %97, align 4, !invariant.load !269
  %add.911 = fadd float %94, %98
  %99 = add i32 %14, 0
  %100 = add i32 %13, 0
  %101 = getelementptr inbounds [8192 x [320 x float]], ptr %arg3, i32 0, i32 %99, i32 %100
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %add.1112 = fadd float %add.911, %102
  %103 = add i32 %14, 0
  %104 = add i32 %13, 0
  %105 = getelementptr inbounds [8192 x [480 x float]], ptr %arg2, i32 0, i32 %103, i32 %104
  %106 = load float, ptr %105, align 4, !invariant.load !269
  %add.1313 = fadd float %add.1112, %106
  %107 = add i32 %14, 0
  %108 = add i32 %13, 0
  %109 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %107, i32 %108
  %110 = load float, ptr %109, align 4, !invariant.load !269
  %add.1514 = fadd float %add.1313, %110
  %111 = add i32 %14, 0
  %112 = add i32 %13, 0
  %113 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %111, i32 %112
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %add.1715 = fadd float %add.1514, %114
  %115 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %add.1715, ptr %115, align 4
  br label %fusion_104.in_bounds-after
}

define void @concatenate_378(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 16 dereferenceable(786432) %arg3, ptr noalias align 16 dereferenceable(8388608) %arg4, ptr noalias align 128 dereferenceable(15728640) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !419
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 983040
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 480
  %5 = udiv i32 %linear_index_base, 480
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 480
  %8 = udiv i32 %linear_index1, 480
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 480
  %11 = udiv i32 %linear_index2, 480
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 480
  %14 = udiv i32 %linear_index3, 480
  %15 = icmp ult i32 %linear_index_base, 3932160
  br i1 %15, label %concatenate_378.in_bounds-true, label %concatenate_378.in_bounds-after

concatenate_378.in_bounds-after:                  ; preds = %concatenate.6.merge35, %entry
  ret void

concatenate_378.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 480
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 480
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 480
  %39 = mul i32 %38, 8
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 8
  %43 = udiv i32 %40, 8
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.200.3
  %46 = phi i32 [ 200, %concatenate.pivot.200.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 480
  %49 = mul i32 %48, 24
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 24
  %53 = udiv i32 %50, 24
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !269
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.224.4
  %56 = phi i32 [ 224, %concatenate.pivot.224.4 ]
  %57 = sub nsw i32 %4, %56
  %58 = udiv i32 %linear_index_base, 480
  %59 = mul i32 %58, 256
  %60 = add i32 %59, %57
  %61 = udiv i32 %60, 1
  %62 = urem i32 %61, 256
  %63 = udiv i32 %60, 256
  %64 = getelementptr inbounds float, ptr %arg4, i32 %60
  %65 = load float, ptr %64, align 4, !invariant.load !269
  br label %concatenate.6.merge

concatenate.pivot.192.:                           ; preds = %concatenate_378.in_bounds-true
  %66 = icmp ult i32 %4, 192
  br i1 %66, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %67 = icmp ult i32 %4, 64
  br i1 %67, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.200.:                           ; preds = %concatenate.pivot.192.
  %68 = icmp ult i32 %4, 200
  br i1 %68, label %concatenate.pivot.192.2, label %concatenate.pivot.224.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id2

concatenate.pivot.224.:                           ; preds = %concatenate.pivot.200.
  %69 = icmp ult i32 %4, 224
  br i1 %69, label %concatenate.pivot.200.3, label %concatenate.pivot.224.4

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.224.
  br label %concat_index_from_operand_id3

concatenate.pivot.224.4:                          ; preds = %concatenate.pivot.224.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %70 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ], [ %65, %concat_index_from_operand_id4 ]
  %71 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  store float %70, ptr %71, align 4
  br label %concatenate.pivot.192.11

concat_index_from_operand_id06:                   ; preds = %concatenate.pivot.0.13
  %72 = phi i32 [ 0, %concatenate.pivot.0.13 ]
  %73 = sub nsw i32 %7, %72
  %74 = udiv i32 %linear_index1, 480
  %75 = mul i32 %74, 64
  %76 = add i32 %75, %73
  %77 = udiv i32 %76, 1
  %78 = urem i32 %77, 64
  %79 = udiv i32 %76, 64
  %80 = getelementptr inbounds float, ptr %arg0, i32 %76
  %81 = load float, ptr %80, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id17:                   ; preds = %concatenate.pivot.64.14
  %82 = phi i32 [ 64, %concatenate.pivot.64.14 ]
  %83 = sub nsw i32 %7, %82
  %84 = udiv i32 %linear_index1, 480
  %85 = mul i32 %84, 128
  %86 = add i32 %85, %83
  %87 = udiv i32 %86, 1
  %88 = urem i32 %87, 128
  %89 = udiv i32 %86, 128
  %90 = getelementptr inbounds float, ptr %arg1, i32 %86
  %91 = load float, ptr %90, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id28:                   ; preds = %concatenate.pivot.192.16
  %92 = phi i32 [ 192, %concatenate.pivot.192.16 ]
  %93 = sub nsw i32 %7, %92
  %94 = udiv i32 %linear_index1, 480
  %95 = mul i32 %94, 8
  %96 = add i32 %95, %93
  %97 = udiv i32 %96, 1
  %98 = urem i32 %97, 8
  %99 = udiv i32 %96, 8
  %100 = getelementptr inbounds float, ptr %arg2, i32 %96
  %101 = load float, ptr %100, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id39:                   ; preds = %concatenate.pivot.200.18
  %102 = phi i32 [ 200, %concatenate.pivot.200.18 ]
  %103 = sub nsw i32 %7, %102
  %104 = udiv i32 %linear_index1, 480
  %105 = mul i32 %104, 24
  %106 = add i32 %105, %103
  %107 = udiv i32 %106, 1
  %108 = urem i32 %107, 24
  %109 = udiv i32 %106, 24
  %110 = getelementptr inbounds float, ptr %arg3, i32 %106
  %111 = load float, ptr %110, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concat_index_from_operand_id410:                  ; preds = %concatenate.pivot.224.19
  %112 = phi i32 [ 224, %concatenate.pivot.224.19 ]
  %113 = sub nsw i32 %7, %112
  %114 = udiv i32 %linear_index1, 480
  %115 = mul i32 %114, 256
  %116 = add i32 %115, %113
  %117 = udiv i32 %116, 1
  %118 = urem i32 %117, 256
  %119 = udiv i32 %116, 256
  %120 = getelementptr inbounds float, ptr %arg4, i32 %116
  %121 = load float, ptr %120, align 4, !invariant.load !269
  br label %concatenate.6.merge5

concatenate.pivot.192.11:                         ; preds = %concatenate.6.merge
  %122 = icmp ult i32 %7, 192
  br i1 %122, label %concatenate.pivot.64.12, label %concatenate.pivot.200.15

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.192.11
  %123 = icmp ult i32 %7, 64
  br i1 %123, label %concatenate.pivot.0.13, label %concatenate.pivot.64.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id06

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id17

concatenate.pivot.200.15:                         ; preds = %concatenate.pivot.192.11
  %124 = icmp ult i32 %7, 200
  br i1 %124, label %concatenate.pivot.192.16, label %concatenate.pivot.224.17

concatenate.pivot.192.16:                         ; preds = %concatenate.pivot.200.15
  br label %concat_index_from_operand_id28

concatenate.pivot.224.17:                         ; preds = %concatenate.pivot.200.15
  %125 = icmp ult i32 %7, 224
  br i1 %125, label %concatenate.pivot.200.18, label %concatenate.pivot.224.19

concatenate.pivot.200.18:                         ; preds = %concatenate.pivot.224.17
  br label %concat_index_from_operand_id39

concatenate.pivot.224.19:                         ; preds = %concatenate.pivot.224.17
  br label %concat_index_from_operand_id410

concatenate.6.merge5:                             ; preds = %concat_index_from_operand_id410, %concat_index_from_operand_id39, %concat_index_from_operand_id28, %concat_index_from_operand_id17, %concat_index_from_operand_id06
  %126 = phi float [ %81, %concat_index_from_operand_id06 ], [ %91, %concat_index_from_operand_id17 ], [ %101, %concat_index_from_operand_id28 ], [ %111, %concat_index_from_operand_id39 ], [ %121, %concat_index_from_operand_id410 ]
  %127 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  store float %126, ptr %127, align 4
  br label %concatenate.pivot.192.26

concat_index_from_operand_id021:                  ; preds = %concatenate.pivot.0.28
  %128 = phi i32 [ 0, %concatenate.pivot.0.28 ]
  %129 = sub nsw i32 %10, %128
  %130 = udiv i32 %linear_index2, 480
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg0, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id122:                  ; preds = %concatenate.pivot.64.29
  %138 = phi i32 [ 64, %concatenate.pivot.64.29 ]
  %139 = sub nsw i32 %10, %138
  %140 = udiv i32 %linear_index2, 480
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg1, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id223:                  ; preds = %concatenate.pivot.192.31
  %148 = phi i32 [ 192, %concatenate.pivot.192.31 ]
  %149 = sub nsw i32 %10, %148
  %150 = udiv i32 %linear_index2, 480
  %151 = mul i32 %150, 8
  %152 = add i32 %151, %149
  %153 = udiv i32 %152, 1
  %154 = urem i32 %153, 8
  %155 = udiv i32 %152, 8
  %156 = getelementptr inbounds float, ptr %arg2, i32 %152
  %157 = load float, ptr %156, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id324:                  ; preds = %concatenate.pivot.200.33
  %158 = phi i32 [ 200, %concatenate.pivot.200.33 ]
  %159 = sub nsw i32 %10, %158
  %160 = udiv i32 %linear_index2, 480
  %161 = mul i32 %160, 24
  %162 = add i32 %161, %159
  %163 = udiv i32 %162, 1
  %164 = urem i32 %163, 24
  %165 = udiv i32 %162, 24
  %166 = getelementptr inbounds float, ptr %arg3, i32 %162
  %167 = load float, ptr %166, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concat_index_from_operand_id425:                  ; preds = %concatenate.pivot.224.34
  %168 = phi i32 [ 224, %concatenate.pivot.224.34 ]
  %169 = sub nsw i32 %10, %168
  %170 = udiv i32 %linear_index2, 480
  %171 = mul i32 %170, 256
  %172 = add i32 %171, %169
  %173 = udiv i32 %172, 1
  %174 = urem i32 %173, 256
  %175 = udiv i32 %172, 256
  %176 = getelementptr inbounds float, ptr %arg4, i32 %172
  %177 = load float, ptr %176, align 4, !invariant.load !269
  br label %concatenate.6.merge20

concatenate.pivot.192.26:                         ; preds = %concatenate.6.merge5
  %178 = icmp ult i32 %10, 192
  br i1 %178, label %concatenate.pivot.64.27, label %concatenate.pivot.200.30

concatenate.pivot.64.27:                          ; preds = %concatenate.pivot.192.26
  %179 = icmp ult i32 %10, 64
  br i1 %179, label %concatenate.pivot.0.28, label %concatenate.pivot.64.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id021

concatenate.pivot.64.29:                          ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id122

concatenate.pivot.200.30:                         ; preds = %concatenate.pivot.192.26
  %180 = icmp ult i32 %10, 200
  br i1 %180, label %concatenate.pivot.192.31, label %concatenate.pivot.224.32

concatenate.pivot.192.31:                         ; preds = %concatenate.pivot.200.30
  br label %concat_index_from_operand_id223

concatenate.pivot.224.32:                         ; preds = %concatenate.pivot.200.30
  %181 = icmp ult i32 %10, 224
  br i1 %181, label %concatenate.pivot.200.33, label %concatenate.pivot.224.34

concatenate.pivot.200.33:                         ; preds = %concatenate.pivot.224.32
  br label %concat_index_from_operand_id324

concatenate.pivot.224.34:                         ; preds = %concatenate.pivot.224.32
  br label %concat_index_from_operand_id425

concatenate.6.merge20:                            ; preds = %concat_index_from_operand_id425, %concat_index_from_operand_id324, %concat_index_from_operand_id223, %concat_index_from_operand_id122, %concat_index_from_operand_id021
  %182 = phi float [ %137, %concat_index_from_operand_id021 ], [ %147, %concat_index_from_operand_id122 ], [ %157, %concat_index_from_operand_id223 ], [ %167, %concat_index_from_operand_id324 ], [ %177, %concat_index_from_operand_id425 ]
  %183 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  store float %182, ptr %183, align 4
  br label %concatenate.pivot.192.41

concat_index_from_operand_id036:                  ; preds = %concatenate.pivot.0.43
  %184 = phi i32 [ 0, %concatenate.pivot.0.43 ]
  %185 = sub nsw i32 %13, %184
  %186 = udiv i32 %linear_index3, 480
  %187 = mul i32 %186, 64
  %188 = add i32 %187, %185
  %189 = udiv i32 %188, 1
  %190 = urem i32 %189, 64
  %191 = udiv i32 %188, 64
  %192 = getelementptr inbounds float, ptr %arg0, i32 %188
  %193 = load float, ptr %192, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id137:                  ; preds = %concatenate.pivot.64.44
  %194 = phi i32 [ 64, %concatenate.pivot.64.44 ]
  %195 = sub nsw i32 %13, %194
  %196 = udiv i32 %linear_index3, 480
  %197 = mul i32 %196, 128
  %198 = add i32 %197, %195
  %199 = udiv i32 %198, 1
  %200 = urem i32 %199, 128
  %201 = udiv i32 %198, 128
  %202 = getelementptr inbounds float, ptr %arg1, i32 %198
  %203 = load float, ptr %202, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id238:                  ; preds = %concatenate.pivot.192.46
  %204 = phi i32 [ 192, %concatenate.pivot.192.46 ]
  %205 = sub nsw i32 %13, %204
  %206 = udiv i32 %linear_index3, 480
  %207 = mul i32 %206, 8
  %208 = add i32 %207, %205
  %209 = udiv i32 %208, 1
  %210 = urem i32 %209, 8
  %211 = udiv i32 %208, 8
  %212 = getelementptr inbounds float, ptr %arg2, i32 %208
  %213 = load float, ptr %212, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id339:                  ; preds = %concatenate.pivot.200.48
  %214 = phi i32 [ 200, %concatenate.pivot.200.48 ]
  %215 = sub nsw i32 %13, %214
  %216 = udiv i32 %linear_index3, 480
  %217 = mul i32 %216, 24
  %218 = add i32 %217, %215
  %219 = udiv i32 %218, 1
  %220 = urem i32 %219, 24
  %221 = udiv i32 %218, 24
  %222 = getelementptr inbounds float, ptr %arg3, i32 %218
  %223 = load float, ptr %222, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concat_index_from_operand_id440:                  ; preds = %concatenate.pivot.224.49
  %224 = phi i32 [ 224, %concatenate.pivot.224.49 ]
  %225 = sub nsw i32 %13, %224
  %226 = udiv i32 %linear_index3, 480
  %227 = mul i32 %226, 256
  %228 = add i32 %227, %225
  %229 = udiv i32 %228, 1
  %230 = urem i32 %229, 256
  %231 = udiv i32 %228, 256
  %232 = getelementptr inbounds float, ptr %arg4, i32 %228
  %233 = load float, ptr %232, align 4, !invariant.load !269
  br label %concatenate.6.merge35

concatenate.pivot.192.41:                         ; preds = %concatenate.6.merge20
  %234 = icmp ult i32 %13, 192
  br i1 %234, label %concatenate.pivot.64.42, label %concatenate.pivot.200.45

concatenate.pivot.64.42:                          ; preds = %concatenate.pivot.192.41
  %235 = icmp ult i32 %13, 64
  br i1 %235, label %concatenate.pivot.0.43, label %concatenate.pivot.64.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id036

concatenate.pivot.64.44:                          ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id137

concatenate.pivot.200.45:                         ; preds = %concatenate.pivot.192.41
  %236 = icmp ult i32 %13, 200
  br i1 %236, label %concatenate.pivot.192.46, label %concatenate.pivot.224.47

concatenate.pivot.192.46:                         ; preds = %concatenate.pivot.200.45
  br label %concat_index_from_operand_id238

concatenate.pivot.224.47:                         ; preds = %concatenate.pivot.200.45
  %237 = icmp ult i32 %13, 224
  br i1 %237, label %concatenate.pivot.200.48, label %concatenate.pivot.224.49

concatenate.pivot.200.48:                         ; preds = %concatenate.pivot.224.47
  br label %concat_index_from_operand_id339

concatenate.pivot.224.49:                         ; preds = %concatenate.pivot.224.47
  br label %concat_index_from_operand_id440

concatenate.6.merge35:                            ; preds = %concat_index_from_operand_id440, %concat_index_from_operand_id339, %concat_index_from_operand_id238, %concat_index_from_operand_id137, %concat_index_from_operand_id036
  %238 = phi float [ %193, %concat_index_from_operand_id036 ], [ %203, %concat_index_from_operand_id137 ], [ %213, %concat_index_from_operand_id238 ], [ %223, %concat_index_from_operand_id339 ], [ %233, %concat_index_from_operand_id440 ]
  %239 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  store float %238, ptr %239, align 4
  br label %concatenate_378.in_bounds-after
}

define void @fusion_356(ptr noalias align 16 dereferenceable(8192) %arg0, ptr noalias align 128 dereferenceable(270336) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(8192) %arg3, ptr noalias align 128 dereferenceable(368640) %arg4, ptr noalias align 16 dereferenceable(8192) %arg5, ptr noalias align 128 dereferenceable(368640) %arg6, ptr noalias align 16 dereferenceable(8192) %arg7, ptr noalias align 128 dereferenceable(393216) %arg8, ptr noalias align 16 dereferenceable(8192) %arg9, ptr noalias align 128 dereferenceable(491520) %arg10, ptr noalias align 16 dereferenceable(8192) %arg11, ptr noalias align 128 dereferenceable(491520) %arg12, ptr noalias align 128 dereferenceable(8192) %arg13, ptr noalias align 128 dereferenceable(8192) %arg14, ptr noalias align 128 dereferenceable(8192) %arg15, ptr noalias align 128 dereferenceable(8192) %arg16, ptr noalias align 128 dereferenceable(8192) %arg17, ptr noalias align 128 dereferenceable(8192) %arg18) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 2048
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 2048
  br i1 %6, label %fusion_356.in_bounds-true, label %fusion_356.in_bounds-after

fusion_356.in_bounds-after:                       ; preds = %fusion_356.in_bounds-true, %entry
  ret void

fusion_356.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 256
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [264 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.16 = fmul float %9, %13
  %subtract.17 = fsub float %8, %multiply.16
  %14 = insertvalue { float, float, float, float, float, float } undef, float %subtract.17, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 96
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [360 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.19 = fmul float %9, %20
  %subtract.20 = fsub float %16, %multiply.19
  %21 = insertvalue { float, float, float, float, float, float } %14, float %subtract.20, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 96
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [360 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.22 = fmul float %9, %27
  %subtract.23 = fsub float %23, %multiply.22
  %28 = insertvalue { float, float, float, float, float, float } %21, float %subtract.23, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 96
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [384 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.25 = fmul float %9, %34
  %subtract.26 = fsub float %30, %multiply.25
  %35 = insertvalue { float, float, float, float, float, float } %28, float %subtract.26, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 192
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [480 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.28 = fmul float %9, %41
  %subtract.29 = fsub float %37, %multiply.28
  %42 = insertvalue { float, float, float, float, float, float } %35, float %subtract.29, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 192
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [480 x [256 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.31 = fmul float %9, %48
  %subtract.32 = fsub float %44, %multiply.31
  %49 = insertvalue { float, float, float, float, float, float } %42, float %subtract.32, 5
  %50 = extractvalue { float, float, float, float, float, float } %49, 0
  %51 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %50, ptr %51, align 4
  %52 = extractvalue { float, float, float, float, float, float } %49, 1
  %53 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %52, ptr %53, align 4
  %54 = extractvalue { float, float, float, float, float, float } %49, 2
  %55 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %54, ptr %55, align 4
  %56 = extractvalue { float, float, float, float, float, float } %49, 3
  %57 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %56, ptr %57, align 4
  %58 = extractvalue { float, float, float, float, float, float } %49, 4
  %59 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %58, ptr %59, align 4
  %60 = extractvalue { float, float, float, float, float, float } %49, 5
  %61 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %60, ptr %61, align 4
  br label %fusion_356.in_bounds-after
}

define void @fusion_140(ptr noalias align 16 dereferenceable(24576) %arg0, ptr noalias align 128 dereferenceable(491520) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(24576) %arg3, ptr noalias align 128 dereferenceable(393216) %arg4, ptr noalias align 16 dereferenceable(24576) %arg5, ptr noalias align 128 dereferenceable(491520) %arg6, ptr noalias align 128 dereferenceable(24576) %arg7, ptr noalias align 128 dereferenceable(24576) %arg8, ptr noalias align 128 dereferenceable(24576) %arg9) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !264
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 6144
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 6144
  br i1 %6, label %fusion_140.in_bounds-true, label %fusion_140.in_bounds-after

fusion_140.in_bounds-after:                       ; preds = %fusion_140.in_bounds-true, %entry
  ret void

fusion_140.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 200
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [480 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.10 = fmul float %9, %13
  %subtract.11 = fsub float %8, %multiply.10
  %14 = insertvalue { float, float, float } undef, float %subtract.11, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 104
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [384 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.13 = fmul float %9, %20
  %subtract.14 = fsub float %16, %multiply.13
  %21 = insertvalue { float, float, float } %14, float %subtract.14, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 200
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [480 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.16 = fmul float %9, %27
  %subtract.17 = fsub float %23, %multiply.16
  %28 = insertvalue { float, float, float } %21, float %subtract.17, 2
  %29 = extractvalue { float, float, float } %28, 0
  %30 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  store float %29, ptr %30, align 4
  %31 = extractvalue { float, float, float } %28, 1
  %32 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %31, ptr %32, align 4
  %33 = extractvalue { float, float, float } %28, 2
  %34 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  store float %33, ptr %34, align 4
  br label %fusion_140.in_bounds-after
}

define void @fusion_377(ptr noalias align 16 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(458752) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(458752) %arg4, ptr noalias align 16 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(491520) %arg6, ptr noalias align 16 dereferenceable(131072) %arg7, ptr noalias align 128 dereferenceable(491520) %arg8, ptr noalias align 16 dereferenceable(131072) %arg9, ptr noalias align 128 dereferenceable(458752) %arg10, ptr noalias align 16 dereferenceable(131072) %arg11, ptr noalias align 128 dereferenceable(270336) %arg12, ptr noalias align 16 dereferenceable(131072) %arg13, ptr noalias align 128 dereferenceable(458752) %arg14, ptr noalias align 16 dereferenceable(131072) %arg15, ptr noalias align 128 dereferenceable(458752) %arg16, ptr noalias align 128 dereferenceable(131072) %arg17, ptr noalias align 128 dereferenceable(131072) %arg18, ptr noalias align 128 dereferenceable(131072) %arg19, ptr noalias align 128 dereferenceable(131072) %arg20, ptr noalias align 128 dereferenceable(131072) %arg21, ptr noalias align 128 dereferenceable(131072) %arg22, ptr noalias align 128 dereferenceable(131072) %arg23, ptr noalias align 128 dereferenceable(131072) %arg24) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !352
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 32768
  br i1 %6, label %fusion_377.in_bounds-true, label %fusion_377.in_bounds-after

fusion_377.in_bounds-after:                       ; preds = %fusion_377.in_bounds-true, %entry
  ret void

fusion_377.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 64
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [448 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.20 = fmul float %9, %13
  %subtract.21 = fsub float %8, %multiply.20
  %14 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.21, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 64
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [448 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.23 = fmul float %9, %20
  %subtract.24 = fsub float %16, %multiply.23
  %21 = insertvalue { float, float, float, float, float, float, float, float } %14, float %subtract.24, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 64
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [480 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.26 = fmul float %9, %27
  %subtract.27 = fsub float %23, %multiply.26
  %28 = insertvalue { float, float, float, float, float, float, float, float } %21, float %subtract.27, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 64
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [480 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.29 = fmul float %9, %34
  %subtract.30 = fsub float %30, %multiply.29
  %35 = insertvalue { float, float, float, float, float, float, float, float } %28, float %subtract.30, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 64
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [448 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.32 = fmul float %9, %41
  %subtract.33 = fsub float %37, %multiply.32
  %42 = insertvalue { float, float, float, float, float, float, float, float } %35, float %subtract.33, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 64
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [264 x [256 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.35 = fmul float %9, %48
  %subtract.36 = fsub float %44, %multiply.35
  %49 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.36, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 64
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [448 x [256 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.38 = fmul float %9, %55
  %subtract.39 = fsub float %51, %multiply.38
  %56 = insertvalue { float, float, float, float, float, float, float, float } %49, float %subtract.39, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 64
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [448 x [256 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.41 = fmul float %9, %62
  %subtract.42 = fsub float %58, %multiply.41
  %63 = insertvalue { float, float, float, float, float, float, float, float } %56, float %subtract.42, 7
  %64 = extractvalue { float, float, float, float, float, float, float, float } %63, 0
  %65 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %64, ptr %65, align 4
  %66 = extractvalue { float, float, float, float, float, float, float, float } %63, 1
  %67 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float } %63, 2
  %69 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float } %63, 3
  %71 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float } %63, 4
  %73 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float } %63, 5
  %75 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float } %63, 6
  %77 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float } %63, 7
  %79 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %78, ptr %79, align 4
  br label %fusion_377.in_bounds-after
}

define void @fusion_361(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(270336) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 16 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(360448) %arg5, ptr noalias align 16 dereferenceable(65536) %arg6, ptr noalias align 128 dereferenceable(360448) %arg7, ptr noalias align 16 dereferenceable(65536) %arg8, ptr noalias align 128 dereferenceable(458752) %arg9, ptr noalias align 16 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(368640) %arg11, ptr noalias align 16 dereferenceable(65536) %arg12, ptr noalias align 128 dereferenceable(368640) %arg13, ptr noalias align 16 dereferenceable(65536) %arg14, ptr noalias align 128 dereferenceable(393216) %arg15, ptr noalias align 16 dereferenceable(65536) %arg16, ptr noalias align 128 dereferenceable(491520) %arg17, ptr noalias align 16 dereferenceable(65536) %arg18, ptr noalias align 128 dereferenceable(491520) %arg19, ptr noalias align 16 dereferenceable(65536) %arg20, ptr noalias align 128 dereferenceable(360448) %arg21, ptr noalias align 16 dereferenceable(65536) %arg22, ptr noalias align 128 dereferenceable(458752) %arg23, ptr noalias align 16 dereferenceable(65536) %arg24, ptr noalias align 128 dereferenceable(360448) %arg25, ptr noalias align 16 dereferenceable(65536) %arg26, ptr noalias align 128 dereferenceable(360448) %arg27, ptr noalias align 16 dereferenceable(65536) %arg28, ptr noalias align 128 dereferenceable(458752) %arg29, ptr noalias align 16 dereferenceable(65536) %arg30, ptr noalias align 128 dereferenceable(458752) %arg31, ptr noalias align 16 dereferenceable(65536) %arg32, ptr noalias align 128 dereferenceable(458752) %arg33, ptr noalias align 128 dereferenceable(65536) %arg34, ptr noalias align 128 dereferenceable(65536) %arg35, ptr noalias align 128 dereferenceable(65536) %arg36, ptr noalias align 128 dereferenceable(65536) %arg37, ptr noalias align 128 dereferenceable(65536) %arg38, ptr noalias align 128 dereferenceable(65536) %arg39, ptr noalias align 128 dereferenceable(65536) %arg40, ptr noalias align 128 dereferenceable(65536) %arg41, ptr noalias align 128 dereferenceable(65536) %arg42, ptr noalias align 128 dereferenceable(65536) %arg43, ptr noalias align 128 dereferenceable(65536) %arg44, ptr noalias align 128 dereferenceable(65536) %arg45, ptr noalias align 128 dereferenceable(65536) %arg46, ptr noalias align 128 dereferenceable(65536) %arg47, ptr noalias align 128 dereferenceable(65536) %arg48, ptr noalias align 128 dereferenceable(65536) %arg49, ptr noalias align 128 dereferenceable(65536) %arg50) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !417
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_361.in_bounds-true, label %fusion_361.in_bounds-after

fusion_361.in_bounds-after:                       ; preds = %fusion_361.in_bounds-true, %entry
  ret void

fusion_361.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [264 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.37 = fmul float %9, %13
  %subtract.38 = fsub float %8, %multiply.37
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.38, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 192
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [264 x [256 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.40 = fmul float %9, %20
  %subtract.41 = fsub float %16, %multiply.40
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.41, 1
  %22 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 32
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [352 x [256 x float]], ptr %arg5, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.43 = fmul float %9, %27
  %subtract.44 = fsub float %23, %multiply.43
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.44, 2
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 32
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [256 x float]], ptr %arg7, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.46 = fmul float %9, %34
  %subtract.47 = fsub float %30, %multiply.46
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.47, 3
  %36 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [448 x [256 x float]], ptr %arg9, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.49 = fmul float %9, %41
  %subtract.50 = fsub float %37, %multiply.49
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.50, 4
  %43 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 32
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [360 x [256 x float]], ptr %arg11, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.52 = fmul float %9, %48
  %subtract.53 = fsub float %44, %multiply.52
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.53, 5
  %50 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 32
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [360 x [256 x float]], ptr %arg13, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.55 = fmul float %9, %55
  %subtract.56 = fsub float %51, %multiply.55
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.56, 6
  %57 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 32
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [384 x [256 x float]], ptr %arg15, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.58 = fmul float %9, %62
  %subtract.59 = fsub float %58, %multiply.58
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.59, 7
  %64 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %66 = add i32 %5, 0
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [480 x [256 x float]], ptr %arg17, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %multiply.61 = fmul float %9, %69
  %subtract.62 = fsub float %65, %multiply.61
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.62, 8
  %71 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = add i32 %5, 0
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [480 x [256 x float]], ptr %arg19, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %multiply.64 = fmul float %9, %76
  %subtract.65 = fsub float %72, %multiply.64
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.65, 9
  %78 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %80 = add i32 %5, 32
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [352 x [256 x float]], ptr %arg21, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %multiply.67 = fmul float %9, %83
  %subtract.68 = fsub float %79, %multiply.67
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.68, 10
  %85 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %87 = add i32 %5, 0
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [448 x [256 x float]], ptr %arg23, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.70 = fmul float %9, %90
  %subtract.71 = fsub float %86, %multiply.70
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.71, 11
  %92 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = add i32 %5, 32
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [352 x [256 x float]], ptr %arg25, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %multiply.73 = fmul float %9, %97
  %subtract.74 = fsub float %93, %multiply.73
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.74, 12
  %99 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %101 = add i32 %5, 32
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [352 x [256 x float]], ptr %arg27, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %multiply.76 = fmul float %9, %104
  %subtract.77 = fsub float %100, %multiply.76
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.77, 13
  %106 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %108 = add i32 %5, 0
  %109 = add i32 %4, 0
  %110 = getelementptr inbounds [448 x [256 x float]], ptr %arg29, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !269
  %multiply.79 = fmul float %9, %111
  %subtract.80 = fsub float %107, %multiply.79
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.80, 14
  %113 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %115 = add i32 %5, 0
  %116 = add i32 %4, 0
  %117 = getelementptr inbounds [448 x [256 x float]], ptr %arg31, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !269
  %multiply.82 = fmul float %9, %118
  %subtract.83 = fsub float %114, %multiply.82
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.83, 15
  %120 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %121 = load float, ptr %120, align 4, !invariant.load !269
  %122 = add i32 %5, 0
  %123 = add i32 %4, 0
  %124 = getelementptr inbounds [448 x [256 x float]], ptr %arg33, i32 0, i32 %122, i32 %123
  %125 = load float, ptr %124, align 4, !invariant.load !269
  %multiply.85 = fmul float %9, %125
  %subtract.86 = fsub float %121, %multiply.85
  %126 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, float %subtract.86, 16
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 0
  %128 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %127, ptr %128, align 4
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 1
  %130 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %129, ptr %130, align 4
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 2
  %132 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %131, ptr %132, align 4
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 3
  %134 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %133, ptr %134, align 4
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 4
  %136 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %135, ptr %136, align 4
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 5
  %138 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %137, ptr %138, align 4
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 6
  %140 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 7
  %142 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 8
  %144 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %143, ptr %144, align 4
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 9
  %146 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %145, ptr %146, align 4
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 10
  %148 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %147, ptr %148, align 4
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 11
  %150 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %149, ptr %150, align 4
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 12
  %152 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %151, ptr %152, align 4
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 13
  %154 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %153, ptr %154, align 4
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 14
  %156 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %155, ptr %156, align 4
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 15
  %158 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %157, ptr %158, align 4
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 16
  %160 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %159, ptr %160, align 4
  br label %fusion_361.in_bounds-after
}

define void @fusion_380(ptr noalias align 16 dereferenceable(262144) %arg0, ptr noalias align 128 dereferenceable(360448) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(360448) %arg4, ptr noalias align 16 dereferenceable(262144) %arg5, ptr noalias align 128 dereferenceable(458752) %arg6, ptr noalias align 16 dereferenceable(262144) %arg7, ptr noalias align 128 dereferenceable(368640) %arg8, ptr noalias align 16 dereferenceable(262144) %arg9, ptr noalias align 128 dereferenceable(368640) %arg10, ptr noalias align 16 dereferenceable(262144) %arg11, ptr noalias align 128 dereferenceable(393216) %arg12, ptr noalias align 16 dereferenceable(262144) %arg13, ptr noalias align 128 dereferenceable(491520) %arg14, ptr noalias align 16 dereferenceable(262144) %arg15, ptr noalias align 128 dereferenceable(491520) %arg16, ptr noalias align 16 dereferenceable(262144) %arg17, ptr noalias align 128 dereferenceable(360448) %arg18, ptr noalias align 16 dereferenceable(262144) %arg19, ptr noalias align 128 dereferenceable(311296) %arg20, ptr noalias align 16 dereferenceable(262144) %arg21, ptr noalias align 128 dereferenceable(311296) %arg22, ptr noalias align 16 dereferenceable(262144) %arg23, ptr noalias align 128 dereferenceable(458752) %arg24, ptr noalias align 16 dereferenceable(262144) %arg25, ptr noalias align 128 dereferenceable(311296) %arg26, ptr noalias align 16 dereferenceable(262144) %arg27, ptr noalias align 128 dereferenceable(360448) %arg28, ptr noalias align 16 dereferenceable(262144) %arg29, ptr noalias align 128 dereferenceable(311296) %arg30, ptr noalias align 16 dereferenceable(262144) %arg31, ptr noalias align 128 dereferenceable(311296) %arg32, ptr noalias align 16 dereferenceable(262144) %arg33, ptr noalias align 128 dereferenceable(262144) %arg34, ptr noalias align 16 dereferenceable(262144) %arg35, ptr noalias align 128 dereferenceable(360448) %arg36, ptr noalias align 16 dereferenceable(262144) %arg37, ptr noalias align 128 dereferenceable(458752) %arg38, ptr noalias align 16 dereferenceable(262144) %arg39, ptr noalias align 128 dereferenceable(458752) %arg40, ptr noalias align 128 dereferenceable(262144) %arg41, ptr noalias align 128 dereferenceable(262144) %arg42, ptr noalias align 128 dereferenceable(262144) %arg43, ptr noalias align 128 dereferenceable(262144) %arg44, ptr noalias align 128 dereferenceable(262144) %arg45, ptr noalias align 128 dereferenceable(262144) %arg46, ptr noalias align 128 dereferenceable(262144) %arg47, ptr noalias align 128 dereferenceable(262144) %arg48, ptr noalias align 128 dereferenceable(262144) %arg49, ptr noalias align 128 dereferenceable(262144) %arg50, ptr noalias align 128 dereferenceable(262144) %arg51, ptr noalias align 128 dereferenceable(262144) %arg52, ptr noalias align 128 dereferenceable(262144) %arg53, ptr noalias align 128 dereferenceable(262144) %arg54, ptr noalias align 128 dereferenceable(262144) %arg55, ptr noalias align 128 dereferenceable(262144) %arg56, ptr noalias align 128 dereferenceable(262144) %arg57, ptr noalias align 128 dereferenceable(262144) %arg58, ptr noalias align 128 dereferenceable(262144) %arg59) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !420
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 65536
  br i1 %6, label %fusion_380.in_bounds-true, label %fusion_380.in_bounds-after

fusion_380.in_bounds-after:                       ; preds = %fusion_380.in_bounds-true, %entry
  ret void

fusion_380.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 96
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [352 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.44 = fmul float %9, %13
  %subtract.45 = fsub float %8, %multiply.44
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 96
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.47 = fmul float %9, %20
  %subtract.48 = fsub float %16, %multiply.47
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.48, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = add i32 %5, 192
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [448 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %multiply.50 = fmul float %9, %27
  %subtract.51 = fsub float %23, %multiply.50
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.51, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = add i32 %5, 104
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [360 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %multiply.53 = fmul float %9, %34
  %subtract.54 = fsub float %30, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.54, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %5, 104
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [360 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %multiply.56 = fmul float %9, %41
  %subtract.57 = fsub float %37, %multiply.56
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.57, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 128
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [384 x [256 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.59 = fmul float %9, %48
  %subtract.60 = fsub float %44, %multiply.59
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.60, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !269
  %52 = add i32 %5, 224
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [480 x [256 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %multiply.62 = fmul float %9, %55
  %subtract.63 = fsub float %51, %multiply.62
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.63, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = add i32 %5, 224
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [480 x [256 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %multiply.65 = fmul float %9, %62
  %subtract.66 = fsub float %58, %multiply.65
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.66, 7
  %64 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %66 = add i32 %5, 96
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [352 x [256 x float]], ptr %arg18, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !269
  %multiply.68 = fmul float %9, %69
  %subtract.69 = fsub float %65, %multiply.68
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.69, 8
  %71 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = add i32 %5, 48
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [304 x [256 x float]], ptr %arg20, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %multiply.71 = fmul float %9, %76
  %subtract.72 = fsub float %72, %multiply.71
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.72, 9
  %78 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %80 = add i32 %5, 48
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [304 x [256 x float]], ptr %arg22, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %multiply.74 = fmul float %9, %83
  %subtract.75 = fsub float %79, %multiply.74
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.75, 10
  %85 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %87 = add i32 %5, 192
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [448 x [256 x float]], ptr %arg24, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.77 = fmul float %9, %90
  %subtract.78 = fsub float %86, %multiply.77
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.78, 11
  %92 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = add i32 %5, 48
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [304 x [256 x float]], ptr %arg26, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %multiply.80 = fmul float %9, %97
  %subtract.81 = fsub float %93, %multiply.80
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.81, 12
  %99 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %101 = add i32 %5, 96
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [352 x [256 x float]], ptr %arg28, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !269
  %multiply.83 = fmul float %9, %104
  %subtract.84 = fsub float %100, %multiply.83
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.84, 13
  %106 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %108 = add i32 %5, 48
  %109 = add i32 %4, 0
  %110 = getelementptr inbounds [304 x [256 x float]], ptr %arg30, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !269
  %multiply.86 = fmul float %9, %111
  %subtract.87 = fsub float %107, %multiply.86
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.87, 14
  %113 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %115 = add i32 %5, 48
  %116 = add i32 %4, 0
  %117 = getelementptr inbounds [304 x [256 x float]], ptr %arg32, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !269
  %multiply.89 = fmul float %9, %118
  %subtract.90 = fsub float %114, %multiply.89
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.90, 15
  %120 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %121 = load float, ptr %120, align 4, !invariant.load !269
  %122 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %123 = load float, ptr %122, align 4
  %multiply.91 = fmul float %9, %123
  %subtract.92 = fsub float %121, %multiply.91
  %124 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, float %subtract.92, 16
  %125 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %126 = load float, ptr %125, align 4, !invariant.load !269
  %127 = add i32 %5, 96
  %128 = add i32 %4, 0
  %129 = getelementptr inbounds [352 x [256 x float]], ptr %arg36, i32 0, i32 %127, i32 %128
  %130 = load float, ptr %129, align 4, !invariant.load !269
  %multiply.94 = fmul float %9, %130
  %subtract.95 = fsub float %126, %multiply.94
  %131 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, float %subtract.95, 17
  %132 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %133 = load float, ptr %132, align 4, !invariant.load !269
  %134 = add i32 %5, 192
  %135 = add i32 %4, 0
  %136 = getelementptr inbounds [448 x [256 x float]], ptr %arg38, i32 0, i32 %134, i32 %135
  %137 = load float, ptr %136, align 4, !invariant.load !269
  %multiply.97 = fmul float %9, %137
  %subtract.98 = fsub float %133, %multiply.97
  %138 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, float %subtract.98, 18
  %139 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %140 = load float, ptr %139, align 4, !invariant.load !269
  %141 = add i32 %5, 192
  %142 = add i32 %4, 0
  %143 = getelementptr inbounds [448 x [256 x float]], ptr %arg40, i32 0, i32 %141, i32 %142
  %144 = load float, ptr %143, align 4, !invariant.load !269
  %multiply.100 = fmul float %9, %144
  %subtract.101 = fsub float %140, %multiply.100
  %145 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, float %subtract.101, 19
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 0
  %147 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 1
  %149 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 2
  %151 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 3
  %153 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 4
  %155 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 5
  %157 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 6
  %159 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 7
  %161 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 8
  %163 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 9
  %165 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 10
  %167 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 11
  %169 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %168, ptr %169, align 4
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 12
  %171 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 13
  %173 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %172, ptr %173, align 4
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 14
  %175 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %174, ptr %175, align 4
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 15
  %177 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 16
  %179 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 17
  %181 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 18
  %183 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 19
  %185 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %184, ptr %185, align 4
  br label %fusion_380.in_bounds-after
}

define void @concatenate_389(ptr noalias align 16 dereferenceable(1835008) %arg0, ptr noalias align 16 dereferenceable(49020928) %arg1, ptr noalias align 128 dereferenceable(50855936) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !421
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 3178496
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 1552
  %5 = udiv i32 %linear_index_base, 1552
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 1552
  %8 = udiv i32 %linear_index1, 1552
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 1552
  %11 = udiv i32 %linear_index2, 1552
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 1552
  %14 = udiv i32 %linear_index3, 1552
  %15 = icmp ult i32 %linear_index_base, 12713984
  br i1 %15, label %concatenate_389.in_bounds-true, label %concatenate_389.in_bounds-after

concatenate_389.in_bounds-after:                  ; preds = %concatenate.3.merge14, %entry
  ret void

concatenate_389.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.56.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 1552
  %19 = mul i32 %18, 56
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 56
  %23 = udiv i32 %20, 56
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.56.1
  %26 = phi i32 [ 56, %concatenate.pivot.56.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 1552
  %29 = mul i32 %28, 1496
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 1496
  %33 = udiv i32 %30, 1496
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.3.merge

concatenate.pivot.56.:                            ; preds = %concatenate_389.in_bounds-true
  %36 = icmp ult i32 %4, 56
  br i1 %36, label %concatenate.pivot.0., label %concatenate.pivot.56.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.56.
  br label %concat_index_from_operand_id0

concatenate.pivot.56.1:                           ; preds = %concatenate.pivot.56.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %37 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ]
  %38 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %37, ptr %38, align 4
  br label %concatenate.pivot.56.5

concat_index_from_operand_id03:                   ; preds = %concatenate.pivot.0.6
  %39 = phi i32 [ 0, %concatenate.pivot.0.6 ]
  %40 = sub nsw i32 %7, %39
  %41 = udiv i32 %linear_index1, 1552
  %42 = mul i32 %41, 56
  %43 = add i32 %42, %40
  %44 = udiv i32 %43, 1
  %45 = urem i32 %44, 56
  %46 = udiv i32 %43, 56
  %47 = getelementptr inbounds float, ptr %arg0, i32 %43
  %48 = load float, ptr %47, align 4, !invariant.load !269
  br label %concatenate.3.merge2

concat_index_from_operand_id14:                   ; preds = %concatenate.pivot.56.7
  %49 = phi i32 [ 56, %concatenate.pivot.56.7 ]
  %50 = sub nsw i32 %7, %49
  %51 = udiv i32 %linear_index1, 1552
  %52 = mul i32 %51, 1496
  %53 = add i32 %52, %50
  %54 = udiv i32 %53, 1
  %55 = urem i32 %54, 1496
  %56 = udiv i32 %53, 1496
  %57 = getelementptr inbounds float, ptr %arg1, i32 %53
  %58 = load float, ptr %57, align 4, !invariant.load !269
  br label %concatenate.3.merge2

concatenate.pivot.56.5:                           ; preds = %concatenate.3.merge
  %59 = icmp ult i32 %7, 56
  br i1 %59, label %concatenate.pivot.0.6, label %concatenate.pivot.56.7

concatenate.pivot.0.6:                            ; preds = %concatenate.pivot.56.5
  br label %concat_index_from_operand_id03

concatenate.pivot.56.7:                           ; preds = %concatenate.pivot.56.5
  br label %concat_index_from_operand_id14

concatenate.3.merge2:                             ; preds = %concat_index_from_operand_id14, %concat_index_from_operand_id03
  %60 = phi float [ %48, %concat_index_from_operand_id03 ], [ %58, %concat_index_from_operand_id14 ]
  %61 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %60, ptr %61, align 4
  br label %concatenate.pivot.56.11

concat_index_from_operand_id09:                   ; preds = %concatenate.pivot.0.12
  %62 = phi i32 [ 0, %concatenate.pivot.0.12 ]
  %63 = sub nsw i32 %10, %62
  %64 = udiv i32 %linear_index2, 1552
  %65 = mul i32 %64, 56
  %66 = add i32 %65, %63
  %67 = udiv i32 %66, 1
  %68 = urem i32 %67, 56
  %69 = udiv i32 %66, 56
  %70 = getelementptr inbounds float, ptr %arg0, i32 %66
  %71 = load float, ptr %70, align 4, !invariant.load !269
  br label %concatenate.3.merge8

concat_index_from_operand_id110:                  ; preds = %concatenate.pivot.56.13
  %72 = phi i32 [ 56, %concatenate.pivot.56.13 ]
  %73 = sub nsw i32 %10, %72
  %74 = udiv i32 %linear_index2, 1552
  %75 = mul i32 %74, 1496
  %76 = add i32 %75, %73
  %77 = udiv i32 %76, 1
  %78 = urem i32 %77, 1496
  %79 = udiv i32 %76, 1496
  %80 = getelementptr inbounds float, ptr %arg1, i32 %76
  %81 = load float, ptr %80, align 4, !invariant.load !269
  br label %concatenate.3.merge8

concatenate.pivot.56.11:                          ; preds = %concatenate.3.merge2
  %82 = icmp ult i32 %10, 56
  br i1 %82, label %concatenate.pivot.0.12, label %concatenate.pivot.56.13

concatenate.pivot.0.12:                           ; preds = %concatenate.pivot.56.11
  br label %concat_index_from_operand_id09

concatenate.pivot.56.13:                          ; preds = %concatenate.pivot.56.11
  br label %concat_index_from_operand_id110

concatenate.3.merge8:                             ; preds = %concat_index_from_operand_id110, %concat_index_from_operand_id09
  %83 = phi float [ %71, %concat_index_from_operand_id09 ], [ %81, %concat_index_from_operand_id110 ]
  %84 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %83, ptr %84, align 4
  br label %concatenate.pivot.56.17

concat_index_from_operand_id015:                  ; preds = %concatenate.pivot.0.18
  %85 = phi i32 [ 0, %concatenate.pivot.0.18 ]
  %86 = sub nsw i32 %13, %85
  %87 = udiv i32 %linear_index3, 1552
  %88 = mul i32 %87, 56
  %89 = add i32 %88, %86
  %90 = udiv i32 %89, 1
  %91 = urem i32 %90, 56
  %92 = udiv i32 %89, 56
  %93 = getelementptr inbounds float, ptr %arg0, i32 %89
  %94 = load float, ptr %93, align 4, !invariant.load !269
  br label %concatenate.3.merge14

concat_index_from_operand_id116:                  ; preds = %concatenate.pivot.56.19
  %95 = phi i32 [ 56, %concatenate.pivot.56.19 ]
  %96 = sub nsw i32 %13, %95
  %97 = udiv i32 %linear_index3, 1552
  %98 = mul i32 %97, 1496
  %99 = add i32 %98, %96
  %100 = udiv i32 %99, 1
  %101 = urem i32 %100, 1496
  %102 = udiv i32 %99, 1496
  %103 = getelementptr inbounds float, ptr %arg1, i32 %99
  %104 = load float, ptr %103, align 4, !invariant.load !269
  br label %concatenate.3.merge14

concatenate.pivot.56.17:                          ; preds = %concatenate.3.merge8
  %105 = icmp ult i32 %13, 56
  br i1 %105, label %concatenate.pivot.0.18, label %concatenate.pivot.56.19

concatenate.pivot.0.18:                           ; preds = %concatenate.pivot.56.17
  br label %concat_index_from_operand_id015

concatenate.pivot.56.19:                          ; preds = %concatenate.pivot.56.17
  br label %concat_index_from_operand_id116

concatenate.3.merge14:                            ; preds = %concat_index_from_operand_id116, %concat_index_from_operand_id015
  %106 = phi float [ %94, %concat_index_from_operand_id015 ], [ %104, %concat_index_from_operand_id116 ]
  %107 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %106, ptr %107, align 4
  br label %concatenate_389.in_bounds-after
}

define void @fusion_340(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 128 dereferenceable(67371008) %arg1, ptr noalias align 16 dereferenceable(2097152) %arg2, ptr noalias align 16 dereferenceable(2097152) %arg3, ptr noalias align 16 dereferenceable(2097152) %arg4, ptr noalias align 16 dereferenceable(2097152) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10) {
entry:
  %initial_value_addr179 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer162 = alloca float, align 4
  %result_from_other_lane160 = alloca float, align 4
  %initial_value_addr154 = alloca float, align 4
  %return_buffer149 = alloca float, align 4
  %result_from_other_lane147 = alloca float, align 4
  %return_buffer146 = alloca float, align 4
  %result_from_other_lane144 = alloca float, align 4
  %return_buffer143 = alloca float, align 4
  %result_from_other_lane141 = alloca float, align 4
  %return_buffer140 = alloca float, align 4
  %result_from_other_lane138 = alloca float, align 4
  %return_buffer137 = alloca float, align 4
  %result_from_other_lane135 = alloca float, align 4
  %initial_value_addr129 = alloca float, align 4
  %return_buffer124 = alloca float, align 4
  %result_from_other_lane122 = alloca float, align 4
  %return_buffer121 = alloca float, align 4
  %result_from_other_lane119 = alloca float, align 4
  %return_buffer118 = alloca float, align 4
  %result_from_other_lane116 = alloca float, align 4
  %return_buffer115 = alloca float, align 4
  %result_from_other_lane113 = alloca float, align 4
  %return_buffer112 = alloca float, align 4
  %result_from_other_lane110 = alloca float, align 4
  %initial_value_addr104 = alloca float, align 4
  %return_buffer99 = alloca float, align 4
  %result_from_other_lane97 = alloca float, align 4
  %return_buffer96 = alloca float, align 4
  %result_from_other_lane94 = alloca float, align 4
  %return_buffer93 = alloca float, align 4
  %result_from_other_lane91 = alloca float, align 4
  %return_buffer90 = alloca float, align 4
  %result_from_other_lane88 = alloca float, align 4
  %return_buffer87 = alloca float, align 4
  %result_from_other_lane85 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer83 = alloca float, align 4
  %result_from_other_lane81 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane75 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer69 = alloca float, align 4
  %return_buffer63 = alloca float, align 4
  %return_buffer57 = alloca float, align 4
  %return_buffer51 = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %tile_loop.invar_address36 = alloca i32, align 4
  %return_buffer32 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result11 = alloca float, align 4
  %reduction_input_address10 = alloca float, align 4
  %partial_reduction_result8 = alloca float, align 4
  %reduction_input_address7 = alloca float, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after178, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_44_constant_9 = load float, ptr @44, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_44_constant_9, ptr %2, align 4
  %region_0_44_constant_93 = load float, ptr @44, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_44_constant_93, ptr %3, align 4
  %region_0_44_constant_96 = load float, ptr @44, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_44_constant_96, ptr %4, align 4
  %region_0_44_constant_99 = load float, ptr @44, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  store float %region_0_44_constant_99, ptr %5, align 4
  %region_0_44_constant_912 = load float, ptr @44, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  store float %region_0_44_constant_912, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !337
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !422
  %9 = urem i32 %7, 32
  %10 = udiv i32 %7, 32
  %11 = mul i32 %8, 3
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 8192
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 1
  %17 = udiv i32 %12, 1
  %18 = urem i32 %17, 8192
  %19 = udiv i32 %12, 8192
  %20 = icmp eq i32 %18, 8191
  %tile_bound = select i1 %20, i32 1, i32 1
  %21 = icmp eq i32 %16, 0
  %tile_bound13 = select i1 %21, i32 64, i32 512
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 1
  %tile_origin.2 = mul i32 %16, 512
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = icmp eq i32 512, %tile_bound13
  br i1 %24, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit33, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !423

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result70 = load float, ptr %current_output, align 4
  %25 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 16, i32 31)
  store float %25, ptr %result_from_other_lane, align 4
  call void @region_1_10__5(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer71)
  %26 = load float, ptr %return_buffer71, align 4
  store float %26, ptr %current_output, align 4
  %partial_reduction_result73 = load float, ptr %current_output, align 4
  %27 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 8, i32 31)
  store float %27, ptr %result_from_other_lane72, align 4
  call void @region_1_10__5(ptr %current_output, ptr %result_from_other_lane72, ptr %return_buffer74)
  %28 = load float, ptr %return_buffer74, align 4
  store float %28, ptr %current_output, align 4
  %partial_reduction_result76 = load float, ptr %current_output, align 4
  %29 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 4, i32 31)
  store float %29, ptr %result_from_other_lane75, align 4
  call void @region_1_10__5(ptr %current_output, ptr %result_from_other_lane75, ptr %return_buffer77)
  %30 = load float, ptr %return_buffer77, align 4
  store float %30, ptr %current_output, align 4
  %partial_reduction_result79 = load float, ptr %current_output, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 2, i32 31)
  store float %31, ptr %result_from_other_lane78, align 4
  call void @region_1_10__5(ptr %current_output, ptr %result_from_other_lane78, ptr %return_buffer80)
  %32 = load float, ptr %return_buffer80, align 4
  store float %32, ptr %current_output, align 4
  %partial_reduction_result82 = load float, ptr %current_output, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result82, i32 1, i32 31)
  store float %33, ptr %result_from_other_lane81, align 4
  call void @region_1_10__5(ptr %current_output, ptr %result_from_other_lane81, ptr %return_buffer83)
  %34 = load float, ptr %return_buffer83, align 4
  store float %34, ptr %current_output, align 4
  %35 = udiv i32 %thread_id.x, 32
  %36 = icmp eq i32 %lane_id, 0
  br i1 %36, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %37 = icmp eq i32 %35, 0
  br i1 %37, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  %current_output84 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %partial_reduction_result86 = load float, ptr %current_output84, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result86, i32 16, i32 31)
  store float %38, ptr %result_from_other_lane85, align 4
  call void @region_2_17(ptr %current_output84, ptr %result_from_other_lane85, ptr %return_buffer87)
  %39 = load float, ptr %return_buffer87, align 4
  store float %39, ptr %current_output84, align 4
  %partial_reduction_result89 = load float, ptr %current_output84, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result89, i32 8, i32 31)
  store float %40, ptr %result_from_other_lane88, align 4
  call void @region_2_17(ptr %current_output84, ptr %result_from_other_lane88, ptr %return_buffer90)
  %41 = load float, ptr %return_buffer90, align 4
  store float %41, ptr %current_output84, align 4
  %partial_reduction_result92 = load float, ptr %current_output84, align 4
  %42 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result92, i32 4, i32 31)
  store float %42, ptr %result_from_other_lane91, align 4
  call void @region_2_17(ptr %current_output84, ptr %result_from_other_lane91, ptr %return_buffer93)
  %43 = load float, ptr %return_buffer93, align 4
  store float %43, ptr %current_output84, align 4
  %partial_reduction_result95 = load float, ptr %current_output84, align 4
  %44 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result95, i32 2, i32 31)
  store float %44, ptr %result_from_other_lane94, align 4
  call void @region_2_17(ptr %current_output84, ptr %result_from_other_lane94, ptr %return_buffer96)
  %45 = load float, ptr %return_buffer96, align 4
  store float %45, ptr %current_output84, align 4
  %partial_reduction_result98 = load float, ptr %current_output84, align 4
  %46 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result98, i32 1, i32 31)
  store float %46, ptr %result_from_other_lane97, align 4
  call void @region_2_17(ptr %current_output84, ptr %result_from_other_lane97, ptr %return_buffer99)
  %47 = load float, ptr %return_buffer99, align 4
  store float %47, ptr %current_output84, align 4
  %48 = udiv i32 %thread_id.x, 32
  %49 = icmp eq i32 %lane_id, 0
  br i1 %49, label %intra_warp_reduce_write-true100, label %intra_warp_reduce_write-after101

intra_warp_reduce_write-after101:                 ; preds = %intra_warp_reduce_write-true100, %inter_warp_reduce-after
  call void @llvm.nvvm.barrier0()
  %50 = icmp eq i32 %48, 0
  br i1 %50, label %inter_warp_reduce-true102, label %inter_warp_reduce-after103

inter_warp_reduce-after103:                       ; preds = %reduction_write_output-after106, %intra_warp_reduce_write-after101
  %current_output109 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %partial_reduction_result111 = load float, ptr %current_output109, align 4
  %51 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result111, i32 16, i32 31)
  store float %51, ptr %result_from_other_lane110, align 4
  call void @region_3_24(ptr %current_output109, ptr %result_from_other_lane110, ptr %return_buffer112)
  %52 = load float, ptr %return_buffer112, align 4
  store float %52, ptr %current_output109, align 4
  %partial_reduction_result114 = load float, ptr %current_output109, align 4
  %53 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result114, i32 8, i32 31)
  store float %53, ptr %result_from_other_lane113, align 4
  call void @region_3_24(ptr %current_output109, ptr %result_from_other_lane113, ptr %return_buffer115)
  %54 = load float, ptr %return_buffer115, align 4
  store float %54, ptr %current_output109, align 4
  %partial_reduction_result117 = load float, ptr %current_output109, align 4
  %55 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result117, i32 4, i32 31)
  store float %55, ptr %result_from_other_lane116, align 4
  call void @region_3_24(ptr %current_output109, ptr %result_from_other_lane116, ptr %return_buffer118)
  %56 = load float, ptr %return_buffer118, align 4
  store float %56, ptr %current_output109, align 4
  %partial_reduction_result120 = load float, ptr %current_output109, align 4
  %57 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result120, i32 2, i32 31)
  store float %57, ptr %result_from_other_lane119, align 4
  call void @region_3_24(ptr %current_output109, ptr %result_from_other_lane119, ptr %return_buffer121)
  %58 = load float, ptr %return_buffer121, align 4
  store float %58, ptr %current_output109, align 4
  %partial_reduction_result123 = load float, ptr %current_output109, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result123, i32 1, i32 31)
  store float %59, ptr %result_from_other_lane122, align 4
  call void @region_3_24(ptr %current_output109, ptr %result_from_other_lane122, ptr %return_buffer124)
  %60 = load float, ptr %return_buffer124, align 4
  store float %60, ptr %current_output109, align 4
  %61 = udiv i32 %thread_id.x, 32
  %62 = icmp eq i32 %lane_id, 0
  br i1 %62, label %intra_warp_reduce_write-true125, label %intra_warp_reduce_write-after126

intra_warp_reduce_write-after126:                 ; preds = %intra_warp_reduce_write-true125, %inter_warp_reduce-after103
  call void @llvm.nvvm.barrier0()
  %63 = icmp eq i32 %61, 0
  br i1 %63, label %inter_warp_reduce-true127, label %inter_warp_reduce-after128

inter_warp_reduce-after128:                       ; preds = %reduction_write_output-after131, %intra_warp_reduce_write-after126
  %current_output134 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  %partial_reduction_result136 = load float, ptr %current_output134, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result136, i32 16, i32 31)
  store float %64, ptr %result_from_other_lane135, align 4
  call void @region_4_31(ptr %current_output134, ptr %result_from_other_lane135, ptr %return_buffer137)
  %65 = load float, ptr %return_buffer137, align 4
  store float %65, ptr %current_output134, align 4
  %partial_reduction_result139 = load float, ptr %current_output134, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result139, i32 8, i32 31)
  store float %66, ptr %result_from_other_lane138, align 4
  call void @region_4_31(ptr %current_output134, ptr %result_from_other_lane138, ptr %return_buffer140)
  %67 = load float, ptr %return_buffer140, align 4
  store float %67, ptr %current_output134, align 4
  %partial_reduction_result142 = load float, ptr %current_output134, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result142, i32 4, i32 31)
  store float %68, ptr %result_from_other_lane141, align 4
  call void @region_4_31(ptr %current_output134, ptr %result_from_other_lane141, ptr %return_buffer143)
  %69 = load float, ptr %return_buffer143, align 4
  store float %69, ptr %current_output134, align 4
  %partial_reduction_result145 = load float, ptr %current_output134, align 4
  %70 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result145, i32 2, i32 31)
  store float %70, ptr %result_from_other_lane144, align 4
  call void @region_4_31(ptr %current_output134, ptr %result_from_other_lane144, ptr %return_buffer146)
  %71 = load float, ptr %return_buffer146, align 4
  store float %71, ptr %current_output134, align 4
  %partial_reduction_result148 = load float, ptr %current_output134, align 4
  %72 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result148, i32 1, i32 31)
  store float %72, ptr %result_from_other_lane147, align 4
  call void @region_4_31(ptr %current_output134, ptr %result_from_other_lane147, ptr %return_buffer149)
  %73 = load float, ptr %return_buffer149, align 4
  store float %73, ptr %current_output134, align 4
  %74 = udiv i32 %thread_id.x, 32
  %75 = icmp eq i32 %lane_id, 0
  br i1 %75, label %intra_warp_reduce_write-true150, label %intra_warp_reduce_write-after151

intra_warp_reduce_write-after151:                 ; preds = %intra_warp_reduce_write-true150, %inter_warp_reduce-after128
  call void @llvm.nvvm.barrier0()
  %76 = icmp eq i32 %74, 0
  br i1 %76, label %inter_warp_reduce-true152, label %inter_warp_reduce-after153

inter_warp_reduce-after153:                       ; preds = %reduction_write_output-after156, %intra_warp_reduce_write-after151
  %current_output159 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  %partial_reduction_result161 = load float, ptr %current_output159, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result161, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane160, align 4
  call void @region_5_38(ptr %current_output159, ptr %result_from_other_lane160, ptr %return_buffer162)
  %78 = load float, ptr %return_buffer162, align 4
  store float %78, ptr %current_output159, align 4
  %partial_reduction_result164 = load float, ptr %current_output159, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane163, align 4
  call void @region_5_38(ptr %current_output159, ptr %result_from_other_lane163, ptr %return_buffer165)
  %80 = load float, ptr %return_buffer165, align 4
  store float %80, ptr %current_output159, align 4
  %partial_reduction_result167 = load float, ptr %current_output159, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane166, align 4
  call void @region_5_38(ptr %current_output159, ptr %result_from_other_lane166, ptr %return_buffer168)
  %82 = load float, ptr %return_buffer168, align 4
  store float %82, ptr %current_output159, align 4
  %partial_reduction_result170 = load float, ptr %current_output159, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane169, align 4
  call void @region_5_38(ptr %current_output159, ptr %result_from_other_lane169, ptr %return_buffer171)
  %84 = load float, ptr %return_buffer171, align 4
  store float %84, ptr %current_output159, align 4
  %partial_reduction_result173 = load float, ptr %current_output159, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane172, align 4
  call void @region_5_38(ptr %current_output159, ptr %result_from_other_lane172, ptr %return_buffer174)
  %86 = load float, ptr %return_buffer174, align 4
  store float %86, ptr %current_output159, align 4
  %87 = udiv i32 %thread_id.x, 32
  %88 = icmp eq i32 %lane_id, 0
  br i1 %88, label %intra_warp_reduce_write-true175, label %intra_warp_reduce_write-after176

intra_warp_reduce_write-after176:                 ; preds = %intra_warp_reduce_write-true175, %inter_warp_reduce-after153
  call void @llvm.nvvm.barrier0()
  %89 = icmp eq i32 %87, 0
  br i1 %89, label %inter_warp_reduce-true177, label %inter_warp_reduce-after178

inter_warp_reduce-after178:                       ; preds = %reduction_write_output-after181, %intra_warp_reduce_write-after176
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %90 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %91 = icmp uge i32 %tile_loop.indvar, 16
  br i1 %91, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc14 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc14, ptr %tile_loop.invar_address, align 4
  %92 = icmp eq i32 %tile_loop.indvar, 0
  %93 = mul i32 %tile_loop.indvar, 32
  %94 = add i32 %93, 0
  %x_loc = add i32 %94, %90
  %95 = add i32 %tile_origin.1, %y_in_tile.indvar
  %96 = add i32 %tile_origin.2, %x_loc
  %Arg_0.1 = getelementptr inbounds [8192 x [64 x float]], ptr %arg0, i32 0, i32 %95, i32 %96
  %Arg_0.115 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %97 = add i32 %95, 0
  %98 = add i32 %96, 1688
  %Arg_1.2 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %97, i32 %98
  %Arg_1.216 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.8 = fmul float %Arg_0.115, %Arg_1.216
  store float %multiply.8, ptr %reduction_input_address, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10__5(ptr %99, ptr %reduction_input_address, ptr %return_buffer)
  %100 = load float, ptr %return_buffer, align 4
  store float %100, ptr %99, align 4
  %Arg_2.3 = getelementptr inbounds [8192 x [64 x float]], ptr %arg2, i32 0, i32 %95, i32 %96
  %Arg_2.317 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %101 = add i32 %95, 0
  %102 = add i32 %96, 1752
  %Arg_1.218 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %101, i32 %102
  %Arg_1.219 = load float, ptr %Arg_1.218, align 4, !invariant.load !269
  %multiply.16 = fmul float %Arg_2.317, %Arg_1.219
  store float %multiply.16, ptr %reduction_input_address1, align 4
  %103 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  call void @region_2_17(ptr %103, ptr %reduction_input_address1, ptr %return_buffer20)
  %104 = load float, ptr %return_buffer20, align 4
  store float %104, ptr %103, align 4
  %Arg_3.4 = getelementptr inbounds [8192 x [64 x float]], ptr %arg3, i32 0, i32 %95, i32 %96
  %Arg_3.421 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %105 = add i32 %95, 0
  %106 = add i32 %96, 1496
  %Arg_1.222 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %105, i32 %106
  %Arg_1.223 = load float, ptr %Arg_1.222, align 4, !invariant.load !269
  %multiply.23 = fmul float %Arg_3.421, %Arg_1.223
  store float %multiply.23, ptr %reduction_input_address4, align 4
  %107 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  call void @region_3_24(ptr %107, ptr %reduction_input_address4, ptr %return_buffer24)
  %108 = load float, ptr %return_buffer24, align 4
  store float %108, ptr %107, align 4
  %Arg_4.5 = getelementptr inbounds [8192 x [64 x float]], ptr %arg4, i32 0, i32 %95, i32 %96
  %Arg_4.525 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %109 = add i32 %95, 0
  %110 = add i32 %96, 1560
  %Arg_1.226 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %109, i32 %110
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !269
  %multiply.30 = fmul float %Arg_4.525, %Arg_1.227
  store float %multiply.30, ptr %reduction_input_address7, align 4
  %111 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  call void @region_4_31(ptr %111, ptr %reduction_input_address7, ptr %return_buffer28)
  %112 = load float, ptr %return_buffer28, align 4
  store float %112, ptr %111, align 4
  %Arg_5.6 = getelementptr inbounds [8192 x [64 x float]], ptr %arg5, i32 0, i32 %95, i32 %96
  %Arg_5.629 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %113 = add i32 %95, 0
  %114 = add i32 %96, 1624
  %Arg_1.230 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %113, i32 %114
  %Arg_1.231 = load float, ptr %Arg_1.230, align 4, !invariant.load !269
  %multiply.37 = fmul float %Arg_5.629, %Arg_1.231
  store float %multiply.37, ptr %reduction_input_address10, align 4
  %115 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  call void @region_5_38(ptr %115, ptr %reduction_input_address10, ptr %return_buffer32)
  %116 = load float, ptr %return_buffer32, align 4
  store float %116, ptr %115, align 4
  br label %tile_loop.loop_header, !llvm.loop !424

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %117 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address36, align 4
  br label %tile_loop.loop_header34

tile_loop.loop_header34:                          ; preds = %x_in_tile-after, %is_full_tile-false
  %tile_loop.indvar37 = load i32, ptr %tile_loop.invar_address36, align 4
  %118 = icmp uge i32 %tile_loop.indvar37, 16
  br i1 %118, label %tile_loop.loop_exit33, label %tile_loop.loop_body35

tile_loop.loop_body35:                            ; preds = %tile_loop.loop_header34
  %invar.inc38 = add nuw nsw i32 %tile_loop.indvar37, 1
  store i32 %invar.inc38, ptr %tile_loop.invar_address36, align 4
  %119 = icmp eq i32 %tile_loop.indvar37, 0
  %120 = mul i32 %tile_loop.indvar37, 32
  %121 = add i32 %120, 0
  %x_loc39 = add i32 %121, %117
  %122 = add i32 %tile_origin.1, %y_in_tile.indvar
  %123 = add i32 %tile_origin.2, %x_loc39
  %124 = icmp ult i32 %x_loc39, %tile_bound13
  br i1 %124, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body35
  br label %tile_loop.loop_header34, !llvm.loop !425

tile_loop.loop_exit33:                            ; preds = %tile_loop.loop_header34
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body35
  %Arg_0.140 = getelementptr inbounds [8192 x [64 x float]], ptr %arg0, i32 0, i32 %122, i32 %123
  %Arg_0.141 = load float, ptr %Arg_0.140, align 4, !invariant.load !269
  %125 = add i32 %122, 0
  %126 = add i32 %123, 1688
  %Arg_1.242 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %125, i32 %126
  %Arg_1.243 = load float, ptr %Arg_1.242, align 4, !invariant.load !269
  %multiply.844 = fmul float %Arg_0.141, %Arg_1.243
  store float %multiply.844, ptr %reduction_input_address, align 4
  %127 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_10__5(ptr %127, ptr %reduction_input_address, ptr %return_buffer45)
  %128 = load float, ptr %return_buffer45, align 4
  store float %128, ptr %127, align 4
  %Arg_2.346 = getelementptr inbounds [8192 x [64 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.347 = load float, ptr %Arg_2.346, align 4, !invariant.load !269
  %129 = add i32 %122, 0
  %130 = add i32 %123, 1752
  %Arg_1.248 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %129, i32 %130
  %Arg_1.249 = load float, ptr %Arg_1.248, align 4, !invariant.load !269
  %multiply.1650 = fmul float %Arg_2.347, %Arg_1.249
  store float %multiply.1650, ptr %reduction_input_address1, align 4
  %131 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  call void @region_2_17(ptr %131, ptr %reduction_input_address1, ptr %return_buffer51)
  %132 = load float, ptr %return_buffer51, align 4
  store float %132, ptr %131, align 4
  %Arg_3.452 = getelementptr inbounds [8192 x [64 x float]], ptr %arg3, i32 0, i32 %122, i32 %123
  %Arg_3.453 = load float, ptr %Arg_3.452, align 4, !invariant.load !269
  %133 = add i32 %122, 0
  %134 = add i32 %123, 1496
  %Arg_1.254 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %133, i32 %134
  %Arg_1.255 = load float, ptr %Arg_1.254, align 4, !invariant.load !269
  %multiply.2356 = fmul float %Arg_3.453, %Arg_1.255
  store float %multiply.2356, ptr %reduction_input_address4, align 4
  %135 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  call void @region_3_24(ptr %135, ptr %reduction_input_address4, ptr %return_buffer57)
  %136 = load float, ptr %return_buffer57, align 4
  store float %136, ptr %135, align 4
  %Arg_4.558 = getelementptr inbounds [8192 x [64 x float]], ptr %arg4, i32 0, i32 %122, i32 %123
  %Arg_4.559 = load float, ptr %Arg_4.558, align 4, !invariant.load !269
  %137 = add i32 %122, 0
  %138 = add i32 %123, 1560
  %Arg_1.260 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %137, i32 %138
  %Arg_1.261 = load float, ptr %Arg_1.260, align 4, !invariant.load !269
  %multiply.3062 = fmul float %Arg_4.559, %Arg_1.261
  store float %multiply.3062, ptr %reduction_input_address7, align 4
  %139 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  call void @region_4_31(ptr %139, ptr %reduction_input_address7, ptr %return_buffer63)
  %140 = load float, ptr %return_buffer63, align 4
  store float %140, ptr %139, align 4
  %Arg_5.664 = getelementptr inbounds [8192 x [64 x float]], ptr %arg5, i32 0, i32 %122, i32 %123
  %Arg_5.665 = load float, ptr %Arg_5.664, align 4, !invariant.load !269
  %141 = add i32 %122, 0
  %142 = add i32 %123, 1624
  %Arg_1.266 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg1, i32 0, i32 %141, i32 %142
  %Arg_1.267 = load float, ptr %Arg_1.266, align 4, !invariant.load !269
  %multiply.3768 = fmul float %Arg_5.665, %Arg_1.267
  store float %multiply.3768, ptr %reduction_input_address10, align 4
  %143 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  call void @region_5_38(ptr %143, ptr %reduction_input_address10, ptr %return_buffer69)
  %144 = load float, ptr %return_buffer69, align 4
  store float %144, ptr %143, align 4
  br label %x_in_tile-after

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %145 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %10, i32 0, i32 %35
  %146 = addrspacecast ptr addrspace(3) %145 to ptr
  %147 = load float, ptr %current_output, align 4
  store float %147, ptr %146, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %148 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %10, i32 0, i32 %lane_id
  %149 = addrspacecast ptr addrspace(3) %148 to ptr
  store float %region_0_44_constant_9, ptr %initial_value_addr, align 4
  %150 = icmp ult i32 %thread_id.x, 1
  %151 = select i1 %150, ptr %149, ptr %initial_value_addr
  %152 = icmp eq i32 %thread_id.x, 0
  br i1 %152, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %153 = mul i32 %thread_id.x, 1
  %154 = add i32 %tile_origin.1, %thread_id.y
  %155 = add i32 %tile_origin.2, %153
  %156 = add i32 %155, 0
  %157 = udiv i32 %154, 1
  %output_element_address = getelementptr inbounds [8192 x float], ptr %arg6, i32 0, i32 %157
  %output = load float, ptr %151, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

intra_warp_reduce_write-true100:                  ; preds = %inter_warp_reduce-after
  %158 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache67, i32 0, i32 %10, i32 0, i32 %48
  %159 = addrspacecast ptr addrspace(3) %158 to ptr
  %160 = load float, ptr %current_output84, align 4
  store float %160, ptr %159, align 4
  br label %intra_warp_reduce_write-after101

inter_warp_reduce-true102:                        ; preds = %intra_warp_reduce_write-after101
  %161 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache67, i32 0, i32 %10, i32 0, i32 %lane_id
  %162 = addrspacecast ptr addrspace(3) %161 to ptr
  store float %region_0_44_constant_93, ptr %initial_value_addr104, align 4
  %163 = icmp ult i32 %thread_id.x, 1
  %164 = select i1 %163, ptr %162, ptr %initial_value_addr104
  %165 = icmp eq i32 %thread_id.x, 0
  br i1 %165, label %reduction_write_output-true105, label %reduction_write_output-after106

reduction_write_output-after106:                  ; preds = %reduction_write_output-true105, %inter_warp_reduce-true102
  br label %inter_warp_reduce-after103

reduction_write_output-true105:                   ; preds = %inter_warp_reduce-true102
  %166 = mul i32 %thread_id.x, 1
  %167 = add i32 %tile_origin.1, %thread_id.y
  %168 = add i32 %tile_origin.2, %166
  %169 = add i32 %168, 0
  %170 = udiv i32 %167, 1
  %output_element_address107 = getelementptr inbounds [8192 x float], ptr %arg7, i32 0, i32 %170
  %output108 = load float, ptr %164, align 4
  store float %output108, ptr %output_element_address107, align 4
  br label %reduction_write_output-after106

intra_warp_reduce_write-true125:                  ; preds = %inter_warp_reduce-after103
  %171 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache68, i32 0, i32 %10, i32 0, i32 %61
  %172 = addrspacecast ptr addrspace(3) %171 to ptr
  %173 = load float, ptr %current_output109, align 4
  store float %173, ptr %172, align 4
  br label %intra_warp_reduce_write-after126

inter_warp_reduce-true127:                        ; preds = %intra_warp_reduce_write-after126
  %174 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache68, i32 0, i32 %10, i32 0, i32 %lane_id
  %175 = addrspacecast ptr addrspace(3) %174 to ptr
  store float %region_0_44_constant_96, ptr %initial_value_addr129, align 4
  %176 = icmp ult i32 %thread_id.x, 1
  %177 = select i1 %176, ptr %175, ptr %initial_value_addr129
  %178 = icmp eq i32 %thread_id.x, 0
  br i1 %178, label %reduction_write_output-true130, label %reduction_write_output-after131

reduction_write_output-after131:                  ; preds = %reduction_write_output-true130, %inter_warp_reduce-true127
  br label %inter_warp_reduce-after128

reduction_write_output-true130:                   ; preds = %inter_warp_reduce-true127
  %179 = mul i32 %thread_id.x, 1
  %180 = add i32 %tile_origin.1, %thread_id.y
  %181 = add i32 %tile_origin.2, %179
  %182 = add i32 %181, 0
  %183 = udiv i32 %180, 1
  %output_element_address132 = getelementptr inbounds [8192 x float], ptr %arg8, i32 0, i32 %183
  %output133 = load float, ptr %177, align 4
  store float %output133, ptr %output_element_address132, align 4
  br label %reduction_write_output-after131

intra_warp_reduce_write-true150:                  ; preds = %inter_warp_reduce-after128
  %184 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache69, i32 0, i32 %10, i32 0, i32 %74
  %185 = addrspacecast ptr addrspace(3) %184 to ptr
  %186 = load float, ptr %current_output134, align 4
  store float %186, ptr %185, align 4
  br label %intra_warp_reduce_write-after151

inter_warp_reduce-true152:                        ; preds = %intra_warp_reduce_write-after151
  %187 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache69, i32 0, i32 %10, i32 0, i32 %lane_id
  %188 = addrspacecast ptr addrspace(3) %187 to ptr
  store float %region_0_44_constant_99, ptr %initial_value_addr154, align 4
  %189 = icmp ult i32 %thread_id.x, 1
  %190 = select i1 %189, ptr %188, ptr %initial_value_addr154
  %191 = icmp eq i32 %thread_id.x, 0
  br i1 %191, label %reduction_write_output-true155, label %reduction_write_output-after156

reduction_write_output-after156:                  ; preds = %reduction_write_output-true155, %inter_warp_reduce-true152
  br label %inter_warp_reduce-after153

reduction_write_output-true155:                   ; preds = %inter_warp_reduce-true152
  %192 = mul i32 %thread_id.x, 1
  %193 = add i32 %tile_origin.1, %thread_id.y
  %194 = add i32 %tile_origin.2, %192
  %195 = add i32 %194, 0
  %196 = udiv i32 %193, 1
  %output_element_address157 = getelementptr inbounds [8192 x float], ptr %arg9, i32 0, i32 %196
  %output158 = load float, ptr %190, align 4
  store float %output158, ptr %output_element_address157, align 4
  br label %reduction_write_output-after156

intra_warp_reduce_write-true175:                  ; preds = %inter_warp_reduce-after153
  %197 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache70, i32 0, i32 %10, i32 0, i32 %87
  %198 = addrspacecast ptr addrspace(3) %197 to ptr
  %199 = load float, ptr %current_output159, align 4
  store float %199, ptr %198, align 4
  br label %intra_warp_reduce_write-after176

inter_warp_reduce-true177:                        ; preds = %intra_warp_reduce_write-after176
  %200 = getelementptr inbounds [3 x [1 x [1 x float]]], ptr addrspace(3) @shared_cache70, i32 0, i32 %10, i32 0, i32 %lane_id
  %201 = addrspacecast ptr addrspace(3) %200 to ptr
  store float %region_0_44_constant_912, ptr %initial_value_addr179, align 4
  %202 = icmp ult i32 %thread_id.x, 1
  %203 = select i1 %202, ptr %201, ptr %initial_value_addr179
  %204 = icmp eq i32 %thread_id.x, 0
  br i1 %204, label %reduction_write_output-true180, label %reduction_write_output-after181

reduction_write_output-after181:                  ; preds = %reduction_write_output-true180, %inter_warp_reduce-true177
  br label %inter_warp_reduce-after178

reduction_write_output-true180:                   ; preds = %inter_warp_reduce-true177
  %205 = mul i32 %thread_id.x, 1
  %206 = add i32 %tile_origin.1, %thread_id.y
  %207 = add i32 %tile_origin.2, %205
  %208 = add i32 %207, 0
  %209 = udiv i32 %206, 1
  %output_element_address182 = getelementptr inbounds [8192 x float], ptr %arg10, i32 0, i32 %209
  %output183 = load float, ptr %203, align 4
  store float %output183, ptr %output_element_address182, align 4
  br label %reduction_write_output-after181
}

define internal void @region_1_10__5(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_17(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_24(ptr dereferenceable(4) %Arg_0.25.typed, ptr dereferenceable(4) %Arg_1.26.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.27.typed = alloca float, align 4
  %Arg_0.25 = load float, ptr %Arg_0.25.typed, align 4
  %Arg_1.26 = load float, ptr %Arg_1.26.typed, align 4
  %add.27 = fadd float %Arg_0.25, %Arg_1.26
  store float %add.27, ptr %add.27.typed, align 4
  %load_ret_value = load float, ptr %add.27.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_31(ptr dereferenceable(4) %Arg_0.32.typed, ptr dereferenceable(4) %Arg_1.33.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.34.typed = alloca float, align 4
  %Arg_0.32 = load float, ptr %Arg_0.32.typed, align 4
  %Arg_1.33 = load float, ptr %Arg_1.33.typed, align 4
  %add.34 = fadd float %Arg_0.32, %Arg_1.33
  store float %add.34, ptr %add.34.typed, align 4
  %load_ret_value = load float, ptr %add.34.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_38(ptr dereferenceable(4) %Arg_0.39.typed, ptr dereferenceable(4) %Arg_1.40.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.41.typed = alloca float, align 4
  %Arg_0.39 = load float, ptr %Arg_0.39.typed, align 4
  %Arg_1.40 = load float, ptr %Arg_1.40.typed, align 4
  %add.41 = fadd float %Arg_0.39, %Arg_1.40
  store float %add.41, ptr %add.41.typed, align 4
  %load_ret_value = load float, ptr %add.41.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @slice_956(ptr noalias align 128 dereferenceable(67371008) %arg0, ptr noalias align 128 dereferenceable(524288) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 16
  %5 = udiv i32 %linear_index_base, 16
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 16
  %8 = udiv i32 %linear_index1, 16
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 16
  %11 = udiv i32 %linear_index2, 16
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 16
  %14 = udiv i32 %linear_index3, 16
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %slice_956.in_bounds-true, label %slice_956.in_bounds-after

slice_956.in_bounds-after:                        ; preds = %slice_956.in_bounds-true, %entry
  ret void

slice_956.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 1480
  %18 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 1480
  %23 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 1480
  %28 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 1480
  %33 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_956.in_bounds-after
}

define void @fusion_346(ptr noalias align 16 dereferenceable(786432) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(4) %arg4, ptr noalias align 128 dereferenceable(67371008) %arg5, ptr noalias align 128 dereferenceable(786432) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !426
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 49152
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 24
  %5 = udiv i32 %linear_index_base, 24
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 24
  %8 = udiv i32 %linear_index1, 24
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 24
  %11 = udiv i32 %linear_index2, 24
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 24
  %14 = udiv i32 %linear_index3, 24
  %15 = icmp ult i32 %linear_index_base, 196608
  br i1 %15, label %fusion_346.in_bounds-true, label %fusion_346.in_bounds-after

fusion_346.in_bounds-after:                       ; preds = %concatenate.20.merge31, %entry
  ret void

fusion_346.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg4, align 4, !invariant.load !269
  br label %concatenate.pivot.8.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %19 = phi i32 [ 0, %concatenate.pivot.0. ]
  %20 = sub nsw i32 %4, %19
  %21 = udiv i32 %linear_index_base, 24
  %22 = mul i32 %21, 8
  %23 = add i32 %22, %20
  %24 = udiv i32 %23, 1
  %25 = urem i32 %24, 8
  %26 = udiv i32 %23, 8
  %27 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %5, i32 0
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = add i32 %5, 0
  %30 = add i32 %20, 1832
  %31 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %multiply.11 = fmul float %28, %32
  br label %concatenate.20.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.8.1
  %33 = phi i32 [ 8, %concatenate.pivot.8.1 ]
  %34 = sub nsw i32 %4, %33
  %35 = udiv i32 %linear_index_base, 24
  %36 = mul i32 %35, 8
  %37 = add i32 %36, %34
  %38 = udiv i32 %37, 1
  %39 = urem i32 %38, 8
  %40 = udiv i32 %37, 8
  %41 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %5, i32 0
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = add i32 %5, 0
  %44 = add i32 %34, 1840
  %45 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.15 = fmul float %42, %46
  br label %concatenate.20.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.16.2
  %47 = phi i32 [ 16, %concatenate.pivot.16.2 ]
  %48 = sub nsw i32 %4, %47
  %49 = udiv i32 %linear_index_base, 24
  %50 = mul i32 %49, 8
  %51 = add i32 %50, %48
  %52 = udiv i32 %51, 1
  %53 = urem i32 %52, 8
  %54 = udiv i32 %51, 8
  %55 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %5, i32 0
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %57 = add i32 %5, 0
  %58 = add i32 %48, 1848
  %59 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %multiply.19 = fmul float %56, %60
  br label %concatenate.20.merge

concatenate.pivot.8.:                             ; preds = %fusion_346.in_bounds-true
  %61 = icmp ult i32 %4, 8
  br i1 %61, label %concatenate.pivot.0., label %concatenate.pivot.16.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.8.
  br label %concat_index_from_operand_id0

concatenate.pivot.16.:                            ; preds = %concatenate.pivot.8.
  %62 = icmp ult i32 %4, 16
  br i1 %62, label %concatenate.pivot.8.1, label %concatenate.pivot.16.2

concatenate.pivot.8.1:                            ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id1

concatenate.pivot.16.2:                           ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id2

concatenate.20.merge:                             ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %63 = phi float [ %multiply.11, %concat_index_from_operand_id0 ], [ %multiply.15, %concat_index_from_operand_id1 ], [ %multiply.19, %concat_index_from_operand_id2 ]
  %multiply.21 = fmul float %18, %63
  %subtract.22 = fsub float %17, %multiply.21
  %64 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %subtract.22, ptr %64, align 4
  %65 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %66 = load float, ptr %65, align 4, !invariant.load !269
  %67 = load float, ptr %arg4, align 4, !invariant.load !269
  br label %concatenate.pivot.8.10

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.11
  %68 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %69 = sub nsw i32 %7, %68
  %70 = udiv i32 %linear_index1, 24
  %71 = mul i32 %70, 8
  %72 = add i32 %71, %69
  %73 = udiv i32 %72, 1
  %74 = urem i32 %73, 8
  %75 = udiv i32 %72, 8
  %76 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %8, i32 0
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %78 = add i32 %8, 0
  %79 = add i32 %69, 1832
  %80 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %multiply.115 = fmul float %77, %81
  br label %concatenate.20.merge3

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.8.13
  %82 = phi i32 [ 8, %concatenate.pivot.8.13 ]
  %83 = sub nsw i32 %7, %82
  %84 = udiv i32 %linear_index1, 24
  %85 = mul i32 %84, 8
  %86 = add i32 %85, %83
  %87 = udiv i32 %86, 1
  %88 = urem i32 %87, 8
  %89 = udiv i32 %86, 8
  %90 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %8, i32 0
  %91 = load float, ptr %90, align 4, !invariant.load !269
  %92 = add i32 %8, 0
  %93 = add i32 %83, 1840
  %94 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %92, i32 %93
  %95 = load float, ptr %94, align 4, !invariant.load !269
  %multiply.157 = fmul float %91, %95
  br label %concatenate.20.merge3

concat_index_from_operand_id28:                   ; preds = %concatenate.pivot.16.14
  %96 = phi i32 [ 16, %concatenate.pivot.16.14 ]
  %97 = sub nsw i32 %7, %96
  %98 = udiv i32 %linear_index1, 24
  %99 = mul i32 %98, 8
  %100 = add i32 %99, %97
  %101 = udiv i32 %100, 1
  %102 = urem i32 %101, 8
  %103 = udiv i32 %100, 8
  %104 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %8, i32 0
  %105 = load float, ptr %104, align 4, !invariant.load !269
  %106 = add i32 %8, 0
  %107 = add i32 %97, 1848
  %108 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %106, i32 %107
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %multiply.199 = fmul float %105, %109
  br label %concatenate.20.merge3

concatenate.pivot.8.10:                           ; preds = %concatenate.20.merge
  %110 = icmp ult i32 %7, 8
  br i1 %110, label %concatenate.pivot.0.11, label %concatenate.pivot.16.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.8.10
  br label %concat_index_from_operand_id04

concatenate.pivot.16.12:                          ; preds = %concatenate.pivot.8.10
  %111 = icmp ult i32 %7, 16
  br i1 %111, label %concatenate.pivot.8.13, label %concatenate.pivot.16.14

concatenate.pivot.8.13:                           ; preds = %concatenate.pivot.16.12
  br label %concat_index_from_operand_id16

concatenate.pivot.16.14:                          ; preds = %concatenate.pivot.16.12
  br label %concat_index_from_operand_id28

concatenate.20.merge3:                            ; preds = %concat_index_from_operand_id28, %concat_index_from_operand_id16, %concat_index_from_operand_id04
  %112 = phi float [ %multiply.115, %concat_index_from_operand_id04 ], [ %multiply.157, %concat_index_from_operand_id16 ], [ %multiply.199, %concat_index_from_operand_id28 ]
  %multiply.2115 = fmul float %67, %112
  %subtract.2216 = fsub float %66, %multiply.2115
  %113 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %subtract.2216, ptr %113, align 4
  %114 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %115 = load float, ptr %114, align 4, !invariant.load !269
  %116 = load float, ptr %arg4, align 4, !invariant.load !269
  br label %concatenate.pivot.8.24

concat_index_from_operand_id018:                  ; preds = %concatenate.pivot.0.25
  %117 = phi i32 [ 0, %concatenate.pivot.0.25 ]
  %118 = sub nsw i32 %10, %117
  %119 = udiv i32 %linear_index2, 24
  %120 = mul i32 %119, 8
  %121 = add i32 %120, %118
  %122 = udiv i32 %121, 1
  %123 = urem i32 %122, 8
  %124 = udiv i32 %121, 8
  %125 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %11, i32 0
  %126 = load float, ptr %125, align 4, !invariant.load !269
  %127 = add i32 %11, 0
  %128 = add i32 %118, 1832
  %129 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %127, i32 %128
  %130 = load float, ptr %129, align 4, !invariant.load !269
  %multiply.1119 = fmul float %126, %130
  br label %concatenate.20.merge17

concat_index_from_operand_id120:                  ; preds = %concatenate.pivot.8.27
  %131 = phi i32 [ 8, %concatenate.pivot.8.27 ]
  %132 = sub nsw i32 %10, %131
  %133 = udiv i32 %linear_index2, 24
  %134 = mul i32 %133, 8
  %135 = add i32 %134, %132
  %136 = udiv i32 %135, 1
  %137 = urem i32 %136, 8
  %138 = udiv i32 %135, 8
  %139 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %11, i32 0
  %140 = load float, ptr %139, align 4, !invariant.load !269
  %141 = add i32 %11, 0
  %142 = add i32 %132, 1840
  %143 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %141, i32 %142
  %144 = load float, ptr %143, align 4, !invariant.load !269
  %multiply.1521 = fmul float %140, %144
  br label %concatenate.20.merge17

concat_index_from_operand_id222:                  ; preds = %concatenate.pivot.16.28
  %145 = phi i32 [ 16, %concatenate.pivot.16.28 ]
  %146 = sub nsw i32 %10, %145
  %147 = udiv i32 %linear_index2, 24
  %148 = mul i32 %147, 8
  %149 = add i32 %148, %146
  %150 = udiv i32 %149, 1
  %151 = urem i32 %150, 8
  %152 = udiv i32 %149, 8
  %153 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %11, i32 0
  %154 = load float, ptr %153, align 4, !invariant.load !269
  %155 = add i32 %11, 0
  %156 = add i32 %146, 1848
  %157 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %155, i32 %156
  %158 = load float, ptr %157, align 4, !invariant.load !269
  %multiply.1923 = fmul float %154, %158
  br label %concatenate.20.merge17

concatenate.pivot.8.24:                           ; preds = %concatenate.20.merge3
  %159 = icmp ult i32 %10, 8
  br i1 %159, label %concatenate.pivot.0.25, label %concatenate.pivot.16.26

concatenate.pivot.0.25:                           ; preds = %concatenate.pivot.8.24
  br label %concat_index_from_operand_id018

concatenate.pivot.16.26:                          ; preds = %concatenate.pivot.8.24
  %160 = icmp ult i32 %10, 16
  br i1 %160, label %concatenate.pivot.8.27, label %concatenate.pivot.16.28

concatenate.pivot.8.27:                           ; preds = %concatenate.pivot.16.26
  br label %concat_index_from_operand_id120

concatenate.pivot.16.28:                          ; preds = %concatenate.pivot.16.26
  br label %concat_index_from_operand_id222

concatenate.20.merge17:                           ; preds = %concat_index_from_operand_id222, %concat_index_from_operand_id120, %concat_index_from_operand_id018
  %161 = phi float [ %multiply.1119, %concat_index_from_operand_id018 ], [ %multiply.1521, %concat_index_from_operand_id120 ], [ %multiply.1923, %concat_index_from_operand_id222 ]
  %multiply.2129 = fmul float %116, %161
  %subtract.2230 = fsub float %115, %multiply.2129
  %162 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %subtract.2230, ptr %162, align 4
  %163 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %164 = load float, ptr %163, align 4, !invariant.load !269
  %165 = load float, ptr %arg4, align 4, !invariant.load !269
  br label %concatenate.pivot.8.38

concat_index_from_operand_id032:                  ; preds = %concatenate.pivot.0.39
  %166 = phi i32 [ 0, %concatenate.pivot.0.39 ]
  %167 = sub nsw i32 %13, %166
  %168 = udiv i32 %linear_index3, 24
  %169 = mul i32 %168, 8
  %170 = add i32 %169, %167
  %171 = udiv i32 %170, 1
  %172 = urem i32 %171, 8
  %173 = udiv i32 %170, 8
  %174 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %14, i32 0
  %175 = load float, ptr %174, align 4, !invariant.load !269
  %176 = add i32 %14, 0
  %177 = add i32 %167, 1832
  %178 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %176, i32 %177
  %179 = load float, ptr %178, align 4, !invariant.load !269
  %multiply.1133 = fmul float %175, %179
  br label %concatenate.20.merge31

concat_index_from_operand_id134:                  ; preds = %concatenate.pivot.8.41
  %180 = phi i32 [ 8, %concatenate.pivot.8.41 ]
  %181 = sub nsw i32 %13, %180
  %182 = udiv i32 %linear_index3, 24
  %183 = mul i32 %182, 8
  %184 = add i32 %183, %181
  %185 = udiv i32 %184, 1
  %186 = urem i32 %185, 8
  %187 = udiv i32 %184, 8
  %188 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %14, i32 0
  %189 = load float, ptr %188, align 4, !invariant.load !269
  %190 = add i32 %14, 0
  %191 = add i32 %181, 1840
  %192 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %190, i32 %191
  %193 = load float, ptr %192, align 4, !invariant.load !269
  %multiply.1535 = fmul float %189, %193
  br label %concatenate.20.merge31

concat_index_from_operand_id236:                  ; preds = %concatenate.pivot.16.42
  %194 = phi i32 [ 16, %concatenate.pivot.16.42 ]
  %195 = sub nsw i32 %13, %194
  %196 = udiv i32 %linear_index3, 24
  %197 = mul i32 %196, 8
  %198 = add i32 %197, %195
  %199 = udiv i32 %198, 1
  %200 = urem i32 %199, 8
  %201 = udiv i32 %198, 8
  %202 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %14, i32 0
  %203 = load float, ptr %202, align 4, !invariant.load !269
  %204 = add i32 %14, 0
  %205 = add i32 %195, 1848
  %206 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg5, i32 0, i32 %204, i32 %205
  %207 = load float, ptr %206, align 4, !invariant.load !269
  %multiply.1937 = fmul float %203, %207
  br label %concatenate.20.merge31

concatenate.pivot.8.38:                           ; preds = %concatenate.20.merge17
  %208 = icmp ult i32 %13, 8
  br i1 %208, label %concatenate.pivot.0.39, label %concatenate.pivot.16.40

concatenate.pivot.0.39:                           ; preds = %concatenate.pivot.8.38
  br label %concat_index_from_operand_id032

concatenate.pivot.16.40:                          ; preds = %concatenate.pivot.8.38
  %209 = icmp ult i32 %13, 16
  br i1 %209, label %concatenate.pivot.8.41, label %concatenate.pivot.16.42

concatenate.pivot.8.41:                           ; preds = %concatenate.pivot.16.40
  br label %concat_index_from_operand_id134

concatenate.pivot.16.42:                          ; preds = %concatenate.pivot.16.40
  br label %concat_index_from_operand_id236

concatenate.20.merge31:                           ; preds = %concat_index_from_operand_id236, %concat_index_from_operand_id134, %concat_index_from_operand_id032
  %210 = phi float [ %multiply.1133, %concat_index_from_operand_id032 ], [ %multiply.1535, %concat_index_from_operand_id134 ], [ %multiply.1937, %concat_index_from_operand_id236 ]
  %multiply.2143 = fmul float %165, %210
  %subtract.2244 = fsub float %164, %multiply.2143
  %211 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %subtract.2244, ptr %211, align 4
  br label %fusion_346.in_bounds-after
}

define void @fusion_345(ptr noalias align 16 dereferenceable(8388608) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(4) %arg5, ptr noalias align 128 dereferenceable(67371008) %arg6, ptr noalias align 128 dereferenceable(8388608) %arg7) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !427
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 524288
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 2097152
  br i1 %15, label %fusion_345.in_bounds-true, label %fusion_345.in_bounds-after

fusion_345.in_bounds-after:                       ; preds = %concatenate.25.merge40, %entry
  ret void

fusion_345.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg5, align 4, !invariant.load !269
  br label %concatenate.pivot.128.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %19 = phi i32 [ 0, %concatenate.pivot.0. ]
  %20 = sub nsw i32 %4, %19
  %21 = udiv i32 %linear_index_base, 256
  %22 = mul i32 %21, 64
  %23 = add i32 %22, %20
  %24 = udiv i32 %23, 1
  %25 = urem i32 %24, 64
  %26 = udiv i32 %23, 64
  %27 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %5, i32 0
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = add i32 %5, 0
  %30 = add i32 %20, 1496
  %31 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %multiply.12 = fmul float %28, %32
  br label %concatenate.25.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %33 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %34 = sub nsw i32 %4, %33
  %35 = udiv i32 %linear_index_base, 256
  %36 = mul i32 %35, 64
  %37 = add i32 %36, %34
  %38 = udiv i32 %37, 1
  %39 = urem i32 %38, 64
  %40 = udiv i32 %37, 64
  %41 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %5, i32 0
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = add i32 %5, 0
  %44 = add i32 %34, 1560
  %45 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.16 = fmul float %42, %46
  br label %concatenate.25.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.128.2
  %47 = phi i32 [ 128, %concatenate.pivot.128.2 ]
  %48 = sub nsw i32 %4, %47
  %49 = udiv i32 %linear_index_base, 256
  %50 = mul i32 %49, 64
  %51 = add i32 %50, %48
  %52 = udiv i32 %51, 1
  %53 = urem i32 %52, 64
  %54 = udiv i32 %51, 64
  %55 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %5, i32 0
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %57 = add i32 %5, 0
  %58 = add i32 %48, 1624
  %59 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %multiply.20 = fmul float %56, %60
  br label %concatenate.25.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.192.3
  %61 = phi i32 [ 192, %concatenate.pivot.192.3 ]
  %62 = sub nsw i32 %4, %61
  %63 = udiv i32 %linear_index_base, 256
  %64 = mul i32 %63, 64
  %65 = add i32 %64, %62
  %66 = udiv i32 %65, 1
  %67 = urem i32 %66, 64
  %68 = udiv i32 %65, 64
  %69 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %5, i32 0
  %70 = load float, ptr %69, align 4, !invariant.load !269
  %71 = add i32 %5, 0
  %72 = add i32 %62, 1688
  %73 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %71, i32 %72
  %74 = load float, ptr %73, align 4, !invariant.load !269
  %multiply.24 = fmul float %70, %74
  br label %concatenate.25.merge

concatenate.pivot.128.:                           ; preds = %fusion_345.in_bounds-true
  %75 = icmp ult i32 %4, 128
  br i1 %75, label %concatenate.pivot.64., label %concatenate.pivot.192.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.128.
  %76 = icmp ult i32 %4, 64
  br i1 %76, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.128.
  %77 = icmp ult i32 %4, 192
  br i1 %77, label %concatenate.pivot.128.2, label %concatenate.pivot.192.3

concatenate.pivot.128.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.pivot.192.3:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id3

concatenate.25.merge:                             ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %78 = phi float [ %multiply.12, %concat_index_from_operand_id0 ], [ %multiply.16, %concat_index_from_operand_id1 ], [ %multiply.20, %concat_index_from_operand_id2 ], [ %multiply.24, %concat_index_from_operand_id3 ]
  %multiply.26 = fmul float %18, %78
  %subtract.27 = fsub float %17, %multiply.26
  %79 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  store float %subtract.27, ptr %79, align 4
  %80 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %82 = load float, ptr %arg5, align 4, !invariant.load !269
  br label %concatenate.pivot.128.13

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.15
  %83 = phi i32 [ 0, %concatenate.pivot.0.15 ]
  %84 = sub nsw i32 %7, %83
  %85 = udiv i32 %linear_index1, 256
  %86 = mul i32 %85, 64
  %87 = add i32 %86, %84
  %88 = udiv i32 %87, 1
  %89 = urem i32 %88, 64
  %90 = udiv i32 %87, 64
  %91 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %8, i32 0
  %92 = load float, ptr %91, align 4, !invariant.load !269
  %93 = add i32 %8, 0
  %94 = add i32 %84, 1496
  %95 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %93, i32 %94
  %96 = load float, ptr %95, align 4, !invariant.load !269
  %multiply.126 = fmul float %92, %96
  br label %concatenate.25.merge4

concat_index_from_operand_id17:                   ; preds = %concatenate.pivot.64.16
  %97 = phi i32 [ 64, %concatenate.pivot.64.16 ]
  %98 = sub nsw i32 %7, %97
  %99 = udiv i32 %linear_index1, 256
  %100 = mul i32 %99, 64
  %101 = add i32 %100, %98
  %102 = udiv i32 %101, 1
  %103 = urem i32 %102, 64
  %104 = udiv i32 %101, 64
  %105 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %8, i32 0
  %106 = load float, ptr %105, align 4, !invariant.load !269
  %107 = add i32 %8, 0
  %108 = add i32 %98, 1560
  %109 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %107, i32 %108
  %110 = load float, ptr %109, align 4, !invariant.load !269
  %multiply.168 = fmul float %106, %110
  br label %concatenate.25.merge4

concat_index_from_operand_id29:                   ; preds = %concatenate.pivot.128.18
  %111 = phi i32 [ 128, %concatenate.pivot.128.18 ]
  %112 = sub nsw i32 %7, %111
  %113 = udiv i32 %linear_index1, 256
  %114 = mul i32 %113, 64
  %115 = add i32 %114, %112
  %116 = udiv i32 %115, 1
  %117 = urem i32 %116, 64
  %118 = udiv i32 %115, 64
  %119 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %8, i32 0
  %120 = load float, ptr %119, align 4, !invariant.load !269
  %121 = add i32 %8, 0
  %122 = add i32 %112, 1624
  %123 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %121, i32 %122
  %124 = load float, ptr %123, align 4, !invariant.load !269
  %multiply.2010 = fmul float %120, %124
  br label %concatenate.25.merge4

concat_index_from_operand_id311:                  ; preds = %concatenate.pivot.192.19
  %125 = phi i32 [ 192, %concatenate.pivot.192.19 ]
  %126 = sub nsw i32 %7, %125
  %127 = udiv i32 %linear_index1, 256
  %128 = mul i32 %127, 64
  %129 = add i32 %128, %126
  %130 = udiv i32 %129, 1
  %131 = urem i32 %130, 64
  %132 = udiv i32 %129, 64
  %133 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %8, i32 0
  %134 = load float, ptr %133, align 4, !invariant.load !269
  %135 = add i32 %8, 0
  %136 = add i32 %126, 1688
  %137 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %135, i32 %136
  %138 = load float, ptr %137, align 4, !invariant.load !269
  %multiply.2412 = fmul float %134, %138
  br label %concatenate.25.merge4

concatenate.pivot.128.13:                         ; preds = %concatenate.25.merge
  %139 = icmp ult i32 %7, 128
  br i1 %139, label %concatenate.pivot.64.14, label %concatenate.pivot.192.17

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.128.13
  %140 = icmp ult i32 %7, 64
  br i1 %140, label %concatenate.pivot.0.15, label %concatenate.pivot.64.16

concatenate.pivot.0.15:                           ; preds = %concatenate.pivot.64.14
  br label %concat_index_from_operand_id05

concatenate.pivot.64.16:                          ; preds = %concatenate.pivot.64.14
  br label %concat_index_from_operand_id17

concatenate.pivot.192.17:                         ; preds = %concatenate.pivot.128.13
  %141 = icmp ult i32 %7, 192
  br i1 %141, label %concatenate.pivot.128.18, label %concatenate.pivot.192.19

concatenate.pivot.128.18:                         ; preds = %concatenate.pivot.192.17
  br label %concat_index_from_operand_id29

concatenate.pivot.192.19:                         ; preds = %concatenate.pivot.192.17
  br label %concat_index_from_operand_id311

concatenate.25.merge4:                            ; preds = %concat_index_from_operand_id311, %concat_index_from_operand_id29, %concat_index_from_operand_id17, %concat_index_from_operand_id05
  %142 = phi float [ %multiply.126, %concat_index_from_operand_id05 ], [ %multiply.168, %concat_index_from_operand_id17 ], [ %multiply.2010, %concat_index_from_operand_id29 ], [ %multiply.2412, %concat_index_from_operand_id311 ]
  %multiply.2620 = fmul float %82, %142
  %subtract.2721 = fsub float %81, %multiply.2620
  %143 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  store float %subtract.2721, ptr %143, align 4
  %144 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %145 = load float, ptr %144, align 4, !invariant.load !269
  %146 = load float, ptr %arg5, align 4, !invariant.load !269
  br label %concatenate.pivot.128.31

concat_index_from_operand_id023:                  ; preds = %concatenate.pivot.0.33
  %147 = phi i32 [ 0, %concatenate.pivot.0.33 ]
  %148 = sub nsw i32 %10, %147
  %149 = udiv i32 %linear_index2, 256
  %150 = mul i32 %149, 64
  %151 = add i32 %150, %148
  %152 = udiv i32 %151, 1
  %153 = urem i32 %152, 64
  %154 = udiv i32 %151, 64
  %155 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %11, i32 0
  %156 = load float, ptr %155, align 4, !invariant.load !269
  %157 = add i32 %11, 0
  %158 = add i32 %148, 1496
  %159 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %157, i32 %158
  %160 = load float, ptr %159, align 4, !invariant.load !269
  %multiply.1224 = fmul float %156, %160
  br label %concatenate.25.merge22

concat_index_from_operand_id125:                  ; preds = %concatenate.pivot.64.34
  %161 = phi i32 [ 64, %concatenate.pivot.64.34 ]
  %162 = sub nsw i32 %10, %161
  %163 = udiv i32 %linear_index2, 256
  %164 = mul i32 %163, 64
  %165 = add i32 %164, %162
  %166 = udiv i32 %165, 1
  %167 = urem i32 %166, 64
  %168 = udiv i32 %165, 64
  %169 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %11, i32 0
  %170 = load float, ptr %169, align 4, !invariant.load !269
  %171 = add i32 %11, 0
  %172 = add i32 %162, 1560
  %173 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %171, i32 %172
  %174 = load float, ptr %173, align 4, !invariant.load !269
  %multiply.1626 = fmul float %170, %174
  br label %concatenate.25.merge22

concat_index_from_operand_id227:                  ; preds = %concatenate.pivot.128.36
  %175 = phi i32 [ 128, %concatenate.pivot.128.36 ]
  %176 = sub nsw i32 %10, %175
  %177 = udiv i32 %linear_index2, 256
  %178 = mul i32 %177, 64
  %179 = add i32 %178, %176
  %180 = udiv i32 %179, 1
  %181 = urem i32 %180, 64
  %182 = udiv i32 %179, 64
  %183 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %11, i32 0
  %184 = load float, ptr %183, align 4, !invariant.load !269
  %185 = add i32 %11, 0
  %186 = add i32 %176, 1624
  %187 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %185, i32 %186
  %188 = load float, ptr %187, align 4, !invariant.load !269
  %multiply.2028 = fmul float %184, %188
  br label %concatenate.25.merge22

concat_index_from_operand_id329:                  ; preds = %concatenate.pivot.192.37
  %189 = phi i32 [ 192, %concatenate.pivot.192.37 ]
  %190 = sub nsw i32 %10, %189
  %191 = udiv i32 %linear_index2, 256
  %192 = mul i32 %191, 64
  %193 = add i32 %192, %190
  %194 = udiv i32 %193, 1
  %195 = urem i32 %194, 64
  %196 = udiv i32 %193, 64
  %197 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %11, i32 0
  %198 = load float, ptr %197, align 4, !invariant.load !269
  %199 = add i32 %11, 0
  %200 = add i32 %190, 1688
  %201 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %199, i32 %200
  %202 = load float, ptr %201, align 4, !invariant.load !269
  %multiply.2430 = fmul float %198, %202
  br label %concatenate.25.merge22

concatenate.pivot.128.31:                         ; preds = %concatenate.25.merge4
  %203 = icmp ult i32 %10, 128
  br i1 %203, label %concatenate.pivot.64.32, label %concatenate.pivot.192.35

concatenate.pivot.64.32:                          ; preds = %concatenate.pivot.128.31
  %204 = icmp ult i32 %10, 64
  br i1 %204, label %concatenate.pivot.0.33, label %concatenate.pivot.64.34

concatenate.pivot.0.33:                           ; preds = %concatenate.pivot.64.32
  br label %concat_index_from_operand_id023

concatenate.pivot.64.34:                          ; preds = %concatenate.pivot.64.32
  br label %concat_index_from_operand_id125

concatenate.pivot.192.35:                         ; preds = %concatenate.pivot.128.31
  %205 = icmp ult i32 %10, 192
  br i1 %205, label %concatenate.pivot.128.36, label %concatenate.pivot.192.37

concatenate.pivot.128.36:                         ; preds = %concatenate.pivot.192.35
  br label %concat_index_from_operand_id227

concatenate.pivot.192.37:                         ; preds = %concatenate.pivot.192.35
  br label %concat_index_from_operand_id329

concatenate.25.merge22:                           ; preds = %concat_index_from_operand_id329, %concat_index_from_operand_id227, %concat_index_from_operand_id125, %concat_index_from_operand_id023
  %206 = phi float [ %multiply.1224, %concat_index_from_operand_id023 ], [ %multiply.1626, %concat_index_from_operand_id125 ], [ %multiply.2028, %concat_index_from_operand_id227 ], [ %multiply.2430, %concat_index_from_operand_id329 ]
  %multiply.2638 = fmul float %146, %206
  %subtract.2739 = fsub float %145, %multiply.2638
  %207 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  store float %subtract.2739, ptr %207, align 4
  %208 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %209 = load float, ptr %208, align 4, !invariant.load !269
  %210 = load float, ptr %arg5, align 4, !invariant.load !269
  br label %concatenate.pivot.128.49

concat_index_from_operand_id041:                  ; preds = %concatenate.pivot.0.51
  %211 = phi i32 [ 0, %concatenate.pivot.0.51 ]
  %212 = sub nsw i32 %13, %211
  %213 = udiv i32 %linear_index3, 256
  %214 = mul i32 %213, 64
  %215 = add i32 %214, %212
  %216 = udiv i32 %215, 1
  %217 = urem i32 %216, 64
  %218 = udiv i32 %215, 64
  %219 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %14, i32 0
  %220 = load float, ptr %219, align 4, !invariant.load !269
  %221 = add i32 %14, 0
  %222 = add i32 %212, 1496
  %223 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %221, i32 %222
  %224 = load float, ptr %223, align 4, !invariant.load !269
  %multiply.1242 = fmul float %220, %224
  br label %concatenate.25.merge40

concat_index_from_operand_id143:                  ; preds = %concatenate.pivot.64.52
  %225 = phi i32 [ 64, %concatenate.pivot.64.52 ]
  %226 = sub nsw i32 %13, %225
  %227 = udiv i32 %linear_index3, 256
  %228 = mul i32 %227, 64
  %229 = add i32 %228, %226
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 64
  %232 = udiv i32 %229, 64
  %233 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %14, i32 0
  %234 = load float, ptr %233, align 4, !invariant.load !269
  %235 = add i32 %14, 0
  %236 = add i32 %226, 1560
  %237 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %235, i32 %236
  %238 = load float, ptr %237, align 4, !invariant.load !269
  %multiply.1644 = fmul float %234, %238
  br label %concatenate.25.merge40

concat_index_from_operand_id245:                  ; preds = %concatenate.pivot.128.54
  %239 = phi i32 [ 128, %concatenate.pivot.128.54 ]
  %240 = sub nsw i32 %13, %239
  %241 = udiv i32 %linear_index3, 256
  %242 = mul i32 %241, 64
  %243 = add i32 %242, %240
  %244 = udiv i32 %243, 1
  %245 = urem i32 %244, 64
  %246 = udiv i32 %243, 64
  %247 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %14, i32 0
  %248 = load float, ptr %247, align 4, !invariant.load !269
  %249 = add i32 %14, 0
  %250 = add i32 %240, 1624
  %251 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %249, i32 %250
  %252 = load float, ptr %251, align 4, !invariant.load !269
  %multiply.2046 = fmul float %248, %252
  br label %concatenate.25.merge40

concat_index_from_operand_id347:                  ; preds = %concatenate.pivot.192.55
  %253 = phi i32 [ 192, %concatenate.pivot.192.55 ]
  %254 = sub nsw i32 %13, %253
  %255 = udiv i32 %linear_index3, 256
  %256 = mul i32 %255, 64
  %257 = add i32 %256, %254
  %258 = udiv i32 %257, 1
  %259 = urem i32 %258, 64
  %260 = udiv i32 %257, 64
  %261 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %14, i32 0
  %262 = load float, ptr %261, align 4, !invariant.load !269
  %263 = add i32 %14, 0
  %264 = add i32 %254, 1688
  %265 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg6, i32 0, i32 %263, i32 %264
  %266 = load float, ptr %265, align 4, !invariant.load !269
  %multiply.2448 = fmul float %262, %266
  br label %concatenate.25.merge40

concatenate.pivot.128.49:                         ; preds = %concatenate.25.merge22
  %267 = icmp ult i32 %13, 128
  br i1 %267, label %concatenate.pivot.64.50, label %concatenate.pivot.192.53

concatenate.pivot.64.50:                          ; preds = %concatenate.pivot.128.49
  %268 = icmp ult i32 %13, 64
  br i1 %268, label %concatenate.pivot.0.51, label %concatenate.pivot.64.52

concatenate.pivot.0.51:                           ; preds = %concatenate.pivot.64.50
  br label %concat_index_from_operand_id041

concatenate.pivot.64.52:                          ; preds = %concatenate.pivot.64.50
  br label %concat_index_from_operand_id143

concatenate.pivot.192.53:                         ; preds = %concatenate.pivot.128.49
  %269 = icmp ult i32 %13, 192
  br i1 %269, label %concatenate.pivot.128.54, label %concatenate.pivot.192.55

concatenate.pivot.128.54:                         ; preds = %concatenate.pivot.192.53
  br label %concat_index_from_operand_id245

concatenate.pivot.192.55:                         ; preds = %concatenate.pivot.192.53
  br label %concat_index_from_operand_id347

concatenate.25.merge40:                           ; preds = %concat_index_from_operand_id347, %concat_index_from_operand_id245, %concat_index_from_operand_id143, %concat_index_from_operand_id041
  %270 = phi float [ %multiply.1242, %concat_index_from_operand_id041 ], [ %multiply.1644, %concat_index_from_operand_id143 ], [ %multiply.2046, %concat_index_from_operand_id245 ], [ %multiply.2448, %concat_index_from_operand_id347 ]
  %multiply.2656 = fmul float %210, %270
  %subtract.2757 = fsub float %209, %multiply.2656
  %271 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  store float %subtract.2757, ptr %271, align 4
  br label %fusion_345.in_bounds-after
}

define void @slice_612(ptr noalias align 128 dereferenceable(67371008) %arg0, ptr noalias align 128 dereferenceable(48496640) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !428
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 3031040
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 1480
  %5 = udiv i32 %linear_index_base, 1480
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 1480
  %8 = udiv i32 %linear_index1, 1480
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 1480
  %11 = udiv i32 %linear_index2, 1480
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 1480
  %14 = udiv i32 %linear_index3, 1480
  %15 = icmp ult i32 %linear_index_base, 12124160
  br i1 %15, label %slice_612.in_bounds-true, label %slice_612.in_bounds-after

slice_612.in_bounds-after:                        ; preds = %slice_612.in_bounds-true, %entry
  ret void

slice_612.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 0
  %23 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 0
  %28 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 0
  %33 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_612.in_bounds-after
}

define void @fusion_565(ptr noalias align 128 dereferenceable(11534336) %arg0, ptr noalias align 128 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(9961472) %arg2, ptr noalias align 128 dereferenceable(11534336) %arg3, ptr noalias align 128 dereferenceable(9961472) %arg4, ptr noalias align 128 dereferenceable(11534336) %arg5, ptr noalias align 128 dereferenceable(9961472) %arg6, ptr noalias align 128 dereferenceable(11534336) %arg7, ptr noalias align 128 dereferenceable(14680064) %arg8, ptr noalias align 128 dereferenceable(11796480) %arg9, ptr noalias align 128 dereferenceable(11534336) %arg10, ptr noalias align 128 dereferenceable(9961472) %arg11, ptr noalias align 128 dereferenceable(9961472) %arg12, ptr noalias align 128 dereferenceable(11796480) %arg13, ptr noalias align 128 dereferenceable(12582912) %arg14, ptr noalias align 128 dereferenceable(15728640) %arg15, ptr noalias align 128 dereferenceable(15728640) %arg16, ptr noalias align 128 dereferenceable(14680064) %arg17, ptr noalias align 128 dereferenceable(14680064) %arg18, ptr noalias align 128 dereferenceable(142606336) %arg19) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !429
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 35651584
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = urem i32 %5, 17
  %7 = udiv i32 %linear_index, 4352
  %8 = icmp ult i32 %linear_index, 35651584
  br i1 %8, label %fusion_565.in_bounds-true, label %fusion_565.in_bounds-after

fusion_565.in_bounds-after:                       ; preds = %concatenate.56.merge, %entry
  ret void

fusion_565.in_bounds-true:                        ; preds = %entry
  br label %concatenate.pivot.8.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %9 = phi i32 [ 0, %concatenate.pivot.0. ]
  %10 = sub nsw i32 %6, %9
  %11 = add i32 %7, 0
  %12 = add i32 %4, 224
  %13 = getelementptr inbounds [8192 x [480 x float]], ptr %arg16, i32 0, i32 %11, i32 %12
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = add i32 %7, 0
  %16 = add i32 %4, 224
  %17 = getelementptr inbounds [8192 x [480 x float]], ptr %arg15, i32 0, i32 %15, i32 %16
  %18 = load float, ptr %17, align 4, !invariant.load !269
  %add.22 = fadd float %14, %18
  br label %concatenate.56.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.1.1
  %19 = phi i32 [ 1, %concatenate.pivot.1.1 ]
  %20 = sub nsw i32 %6, %19
  %21 = add i32 %7, 0
  %22 = add i32 %4, 128
  %23 = getelementptr inbounds [8192 x [384 x float]], ptr %arg14, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.2.2
  %25 = phi i32 [ 2, %concatenate.pivot.2.2 ]
  %26 = sub nsw i32 %6, %25
  %27 = add i32 %7, 0
  %28 = add i32 %4, 104
  %29 = getelementptr inbounds [8192 x [360 x float]], ptr %arg13, i32 0, i32 %27, i32 %28
  %30 = load float, ptr %29, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.3.3
  %31 = phi i32 [ 3, %concatenate.pivot.3.3 ]
  %32 = sub nsw i32 %6, %31
  %33 = add i32 %7, 0
  %34 = add i32 %4, 48
  %35 = getelementptr inbounds [8192 x [304 x float]], ptr %arg12, i32 0, i32 %33, i32 %34
  %36 = load float, ptr %35, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.4.4
  %37 = phi i32 [ 4, %concatenate.pivot.4.4 ]
  %38 = sub nsw i32 %6, %37
  %39 = add i32 %7, 0
  %40 = add i32 %4, 48
  %41 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %39, i32 %40
  %42 = load float, ptr %41, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id5:                    ; preds = %concatenate.pivot.5.5
  %43 = phi i32 [ 5, %concatenate.pivot.5.5 ]
  %44 = sub nsw i32 %6, %43
  %45 = add i32 %7, 0
  %46 = add i32 %4, 96
  %47 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id6:                    ; preds = %concatenate.pivot.6.6
  %49 = phi i32 [ 6, %concatenate.pivot.6.6 ]
  %50 = sub nsw i32 %6, %49
  %51 = add i32 %7, 0
  %52 = add i32 %4, 104
  %53 = getelementptr inbounds [8192 x [360 x float]], ptr %arg9, i32 0, i32 %51, i32 %52
  %54 = load float, ptr %53, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id7:                    ; preds = %concatenate.pivot.7.7
  %55 = phi i32 [ 7, %concatenate.pivot.7.7 ]
  %56 = sub nsw i32 %6, %55
  %57 = add i32 %7, 0
  %58 = add i32 %4, 192
  %59 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id8:                    ; preds = %concatenate.pivot.8.8
  %61 = phi i32 [ 8, %concatenate.pivot.8.8 ]
  %62 = sub nsw i32 %6, %61
  %63 = add i32 %7, 0
  %64 = add i32 %4, 96
  %65 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %63, i32 %64
  %66 = load float, ptr %65, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id9:                    ; preds = %concatenate.pivot.9.9
  %67 = phi i32 [ 9, %concatenate.pivot.9.9 ]
  %68 = sub nsw i32 %6, %67
  %69 = add i32 %7, 0
  %70 = add i32 %4, 48
  %71 = getelementptr inbounds [8192 x [304 x float]], ptr %arg6, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id10:                   ; preds = %concatenate.pivot.10.10
  %73 = phi i32 [ 10, %concatenate.pivot.10.10 ]
  %74 = sub nsw i32 %6, %73
  %75 = add i32 %7, 0
  %76 = add i32 %4, 192
  %77 = getelementptr inbounds [8192 x [448 x float]], ptr %arg17, i32 0, i32 %75, i32 %76
  %78 = load float, ptr %77, align 4, !invariant.load !269
  %79 = getelementptr inbounds [8192 x [448 x float]], ptr %arg18, i32 0, i32 %75, i32 %76
  %80 = load float, ptr %79, align 4, !invariant.load !269
  %add.42 = fadd float %78, %80
  br label %concatenate.56.merge

concat_index_from_operand_id11:                   ; preds = %concatenate.pivot.11.11
  %81 = phi i32 [ 11, %concatenate.pivot.11.11 ]
  %82 = sub nsw i32 %6, %81
  %83 = add i32 %7, 0
  %84 = add i32 %4, 96
  %85 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %83, i32 %84
  %86 = load float, ptr %85, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id12:                   ; preds = %concatenate.pivot.12.12
  %87 = phi i32 [ 12, %concatenate.pivot.12.12 ]
  %88 = sub nsw i32 %6, %87
  %89 = add i32 %7, 0
  %90 = add i32 %4, 48
  %91 = getelementptr inbounds [8192 x [304 x float]], ptr %arg4, i32 0, i32 %89, i32 %90
  %92 = load float, ptr %91, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id13:                   ; preds = %concatenate.pivot.13.13
  %93 = phi i32 [ 13, %concatenate.pivot.13.13 ]
  %94 = sub nsw i32 %6, %93
  %95 = add i32 %7, 0
  %96 = add i32 %4, 96
  %97 = getelementptr inbounds [8192 x [352 x float]], ptr %arg3, i32 0, i32 %95, i32 %96
  %98 = load float, ptr %97, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id14:                   ; preds = %concatenate.pivot.14.14
  %99 = phi i32 [ 14, %concatenate.pivot.14.14 ]
  %100 = sub nsw i32 %6, %99
  %101 = add i32 %7, 0
  %102 = add i32 %4, 48
  %103 = getelementptr inbounds [8192 x [304 x float]], ptr %arg2, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.15.15
  %105 = phi i32 [ 15, %concatenate.pivot.15.15 ]
  %106 = sub nsw i32 %6, %105
  %107 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %7, i32 %4
  %108 = load float, ptr %107, align 4, !invariant.load !269
  br label %concatenate.56.merge

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.16.16
  %109 = phi i32 [ 16, %concatenate.pivot.16.16 ]
  %110 = sub nsw i32 %6, %109
  %111 = add i32 %7, 0
  %112 = add i32 %4, 96
  %113 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %111, i32 %112
  %114 = load float, ptr %113, align 4, !invariant.load !269
  br label %concatenate.56.merge

concatenate.pivot.8.:                             ; preds = %fusion_565.in_bounds-true
  %115 = icmp ult i32 %6, 8
  br i1 %115, label %concatenate.pivot.4., label %concatenate.pivot.12.

concatenate.pivot.4.:                             ; preds = %concatenate.pivot.8.
  %116 = icmp ult i32 %6, 4
  br i1 %116, label %concatenate.pivot.2., label %concatenate.pivot.6.

concatenate.pivot.2.:                             ; preds = %concatenate.pivot.4.
  %117 = icmp ult i32 %6, 2
  br i1 %117, label %concatenate.pivot.1., label %concatenate.pivot.3.

concatenate.pivot.1.:                             ; preds = %concatenate.pivot.2.
  %118 = icmp ult i32 %6, 1
  br i1 %118, label %concatenate.pivot.0., label %concatenate.pivot.1.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id0

concatenate.pivot.1.1:                            ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id1

concatenate.pivot.3.:                             ; preds = %concatenate.pivot.2.
  %119 = icmp ult i32 %6, 3
  br i1 %119, label %concatenate.pivot.2.2, label %concatenate.pivot.3.3

concatenate.pivot.2.2:                            ; preds = %concatenate.pivot.3.
  br label %concat_index_from_operand_id2

concatenate.pivot.3.3:                            ; preds = %concatenate.pivot.3.
  br label %concat_index_from_operand_id3

concatenate.pivot.6.:                             ; preds = %concatenate.pivot.4.
  %120 = icmp ult i32 %6, 6
  br i1 %120, label %concatenate.pivot.5., label %concatenate.pivot.7.

concatenate.pivot.5.:                             ; preds = %concatenate.pivot.6.
  %121 = icmp ult i32 %6, 5
  br i1 %121, label %concatenate.pivot.4.4, label %concatenate.pivot.5.5

concatenate.pivot.4.4:                            ; preds = %concatenate.pivot.5.
  br label %concat_index_from_operand_id4

concatenate.pivot.5.5:                            ; preds = %concatenate.pivot.5.
  br label %concat_index_from_operand_id5

concatenate.pivot.7.:                             ; preds = %concatenate.pivot.6.
  %122 = icmp ult i32 %6, 7
  br i1 %122, label %concatenate.pivot.6.6, label %concatenate.pivot.7.7

concatenate.pivot.6.6:                            ; preds = %concatenate.pivot.7.
  br label %concat_index_from_operand_id6

concatenate.pivot.7.7:                            ; preds = %concatenate.pivot.7.
  br label %concat_index_from_operand_id7

concatenate.pivot.12.:                            ; preds = %concatenate.pivot.8.
  %123 = icmp ult i32 %6, 12
  br i1 %123, label %concatenate.pivot.10., label %concatenate.pivot.14.

concatenate.pivot.10.:                            ; preds = %concatenate.pivot.12.
  %124 = icmp ult i32 %6, 10
  br i1 %124, label %concatenate.pivot.9., label %concatenate.pivot.11.

concatenate.pivot.9.:                             ; preds = %concatenate.pivot.10.
  %125 = icmp ult i32 %6, 9
  br i1 %125, label %concatenate.pivot.8.8, label %concatenate.pivot.9.9

concatenate.pivot.8.8:                            ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id8

concatenate.pivot.9.9:                            ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id9

concatenate.pivot.11.:                            ; preds = %concatenate.pivot.10.
  %126 = icmp ult i32 %6, 11
  br i1 %126, label %concatenate.pivot.10.10, label %concatenate.pivot.11.11

concatenate.pivot.10.10:                          ; preds = %concatenate.pivot.11.
  br label %concat_index_from_operand_id10

concatenate.pivot.11.11:                          ; preds = %concatenate.pivot.11.
  br label %concat_index_from_operand_id11

concatenate.pivot.14.:                            ; preds = %concatenate.pivot.12.
  %127 = icmp ult i32 %6, 14
  br i1 %127, label %concatenate.pivot.13., label %concatenate.pivot.15.

concatenate.pivot.13.:                            ; preds = %concatenate.pivot.14.
  %128 = icmp ult i32 %6, 13
  br i1 %128, label %concatenate.pivot.12.12, label %concatenate.pivot.13.13

concatenate.pivot.12.12:                          ; preds = %concatenate.pivot.13.
  br label %concat_index_from_operand_id12

concatenate.pivot.13.13:                          ; preds = %concatenate.pivot.13.
  br label %concat_index_from_operand_id13

concatenate.pivot.15.:                            ; preds = %concatenate.pivot.14.
  %129 = icmp ult i32 %6, 15
  br i1 %129, label %concatenate.pivot.14.14, label %concatenate.pivot.16.

concatenate.pivot.14.14:                          ; preds = %concatenate.pivot.15.
  br label %concat_index_from_operand_id14

concatenate.pivot.16.:                            ; preds = %concatenate.pivot.15.
  %130 = icmp ult i32 %6, 16
  br i1 %130, label %concatenate.pivot.15.15, label %concatenate.pivot.16.16

concatenate.pivot.15.15:                          ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id15

concatenate.pivot.16.16:                          ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id16

concatenate.56.merge:                             ; preds = %concat_index_from_operand_id16, %concat_index_from_operand_id15, %concat_index_from_operand_id14, %concat_index_from_operand_id13, %concat_index_from_operand_id12, %concat_index_from_operand_id11, %concat_index_from_operand_id10, %concat_index_from_operand_id9, %concat_index_from_operand_id8, %concat_index_from_operand_id7, %concat_index_from_operand_id6, %concat_index_from_operand_id5, %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %131 = phi float [ %add.22, %concat_index_from_operand_id0 ], [ %24, %concat_index_from_operand_id1 ], [ %30, %concat_index_from_operand_id2 ], [ %36, %concat_index_from_operand_id3 ], [ %42, %concat_index_from_operand_id4 ], [ %48, %concat_index_from_operand_id5 ], [ %54, %concat_index_from_operand_id6 ], [ %60, %concat_index_from_operand_id7 ], [ %66, %concat_index_from_operand_id8 ], [ %72, %concat_index_from_operand_id9 ], [ %add.42, %concat_index_from_operand_id10 ], [ %86, %concat_index_from_operand_id11 ], [ %92, %concat_index_from_operand_id12 ], [ %98, %concat_index_from_operand_id13 ], [ %104, %concat_index_from_operand_id14 ], [ %108, %concat_index_from_operand_id15 ], [ %114, %concat_index_from_operand_id16 ]
  %132 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %131, ptr %132, align 4
  br label %fusion_565.in_bounds-after
}

define void @fusion_552(ptr noalias align 16 dereferenceable(196608) %arg0, ptr noalias align 128 dereferenceable(3342336) %arg1, ptr noalias align 16 dereferenceable(196608) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4) {
entry:
  %return_buffer7 = alloca float, align 4
  %parameter_buffer6 = alloca float, align 4
  %parameter_buffer5 = alloca float, align 4
  %reduce.20.inner.invar_address.reduction_dim.1 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.12.inner.invar_address.reduction_dim.1 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 8192
  br i1 %4, label %fusion_552.in_bounds-true, label %fusion_552.in_bounds-after

fusion_552.in_bounds-after:                       ; preds = %reduce.20.inner.loop_exit.reduction_dim.1, %entry
  ret void

fusion_552.in_bounds-true:                        ; preds = %entry
  %region_0_22_constant_7 = load float, ptr @45, align 4
  store float %region_0_22_constant_7, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.1

reduce.12.inner.loop_header.reduction_dim.1:      ; preds = %reduce.12.inner.loop_body.reduction_dim.1, %fusion_552.in_bounds-true
  %reduce.12.inner.indvar.reduction_dim.1 = load i32, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  %5 = icmp uge i32 %reduce.12.inner.indvar.reduction_dim.1, 6
  br i1 %5, label %reduce.12.inner.loop_exit.reduction_dim.1, label %reduce.12.inner.loop_body.reduction_dim.1

reduce.12.inner.loop_body.reduction_dim.1:        ; preds = %reduce.12.inner.loop_header.reduction_dim.1
  %6 = load float, ptr %accumulator_0, align 4
  %7 = add i32 %3, 0
  %8 = add i32 %reduce.12.inner.indvar.reduction_dim.1, 0
  %9 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %7, i32 15, i32 %8
  %10 = load float, ptr %9, align 4, !invariant.load !269
  %11 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr %arg0, i32 0, i32 %3, i32 0, i32 %reduce.12.inner.indvar.reduction_dim.1
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %multiply.5 = fmul float %10, %12
  store float %6, ptr %parameter_buffer, align 4
  store float %multiply.5, ptr %parameter_buffer1, align 4
  call void @region_1_8(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %13 = load float, ptr %return_buffer, align 4
  store float %13, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.12.inner.indvar.reduction_dim.1, 1
  store i32 %invar.inc, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.1

reduce.12.inner.loop_exit.reduction_dim.1:        ; preds = %reduce.12.inner.loop_header.reduction_dim.1
  %14 = load float, ptr %accumulator_0, align 4
  %15 = insertvalue { float, float } undef, float %14, 0
  %region_0_22_constant_73 = load float, ptr @45, align 4
  store float %region_0_22_constant_73, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.20.inner.loop_header.reduction_dim.1

reduce.20.inner.loop_header.reduction_dim.1:      ; preds = %reduce.20.inner.loop_body.reduction_dim.1, %reduce.12.inner.loop_exit.reduction_dim.1
  %reduce.20.inner.indvar.reduction_dim.1 = load i32, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  %16 = icmp uge i32 %reduce.20.inner.indvar.reduction_dim.1, 6
  br i1 %16, label %reduce.20.inner.loop_exit.reduction_dim.1, label %reduce.20.inner.loop_body.reduction_dim.1

reduce.20.inner.loop_body.reduction_dim.1:        ; preds = %reduce.20.inner.loop_header.reduction_dim.1
  %17 = load float, ptr %accumulator_02, align 4
  %18 = add i32 %3, 0
  %19 = add i32 %reduce.20.inner.indvar.reduction_dim.1, 0
  %20 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %18, i32 16, i32 %19
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %22 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr %arg2, i32 0, i32 %3, i32 0, i32 %reduce.20.inner.indvar.reduction_dim.1
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %multiply.14 = fmul float %21, %23
  store float %17, ptr %parameter_buffer5, align 4
  store float %multiply.14, ptr %parameter_buffer6, align 4
  call void @region_2_16(ptr %parameter_buffer5, ptr %parameter_buffer6, ptr %return_buffer7)
  %24 = load float, ptr %return_buffer7, align 4
  store float %24, ptr %accumulator_02, align 4
  %invar.inc4 = add nuw nsw i32 %reduce.20.inner.indvar.reduction_dim.1, 1
  store i32 %invar.inc4, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.20.inner.loop_header.reduction_dim.1

reduce.20.inner.loop_exit.reduction_dim.1:        ; preds = %reduce.20.inner.loop_header.reduction_dim.1
  %25 = load float, ptr %accumulator_02, align 4
  %26 = insertvalue { float, float } %15, float %25, 1
  %27 = extractvalue { float, float } %26, 0
  %28 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %27, ptr %28, align 4
  %29 = extractvalue { float, float } %26, 1
  %30 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %29, ptr %30, align 4
  br label %fusion_552.in_bounds-after
}

define internal void @region_1_8(ptr dereferenceable(4) %Arg_0.9.typed, ptr dereferenceable(4) %Arg_1.10.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.11.typed = alloca float, align 4
  %Arg_0.9 = load float, ptr %Arg_0.9.typed, align 4
  %Arg_1.10 = load float, ptr %Arg_1.10.typed, align 4
  %add.11 = fadd float %Arg_0.9, %Arg_1.10
  store float %add.11, ptr %add.11.typed, align 4
  %load_ret_value = load float, ptr %add.11.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_16(ptr dereferenceable(4) %Arg_0.17.typed, ptr dereferenceable(4) %Arg_1.18.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.19.typed = alloca float, align 4
  %Arg_0.17 = load float, ptr %Arg_0.17.typed, align 4
  %Arg_1.18 = load float, ptr %Arg_1.18.typed, align 4
  %add.19 = fadd float %Arg_0.17, %Arg_1.18
  store float %add.19, ptr %add.19.typed, align 4
  %load_ret_value = load float, ptr %add.19.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_15(ptr noalias align 16 dereferenceable(196608) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 128 dereferenceable(3342336) %arg2, ptr noalias align 16 dereferenceable(196608) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(1536) %arg5, ptr noalias align 128 dereferenceable(196608) %arg6, ptr noalias align 128 dereferenceable(1536) %arg7, ptr noalias align 128 dereferenceable(196608) %arg8) {
entry:
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer43 = alloca float, align 4
  %result_from_other_lane41 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after63, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_28_constant_11 = load float, ptr @46, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_28_constant_11, ptr %2, align 4
  %region_0_28_constant_113 = load float, ptr @46, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_28_constant_113, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !420
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 64
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 1
  %14 = udiv i32 %9, 1
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 1
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 0
  %tile_bound4 = select i1 %18, i32 6, i32 32
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc5 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc5, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 1
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound4
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !430

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !431

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %29 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %30 = load float, ptr %current_output, align 4
  store float %30, ptr %29, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %31 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result30 = load float, ptr %31, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 16, i32 31)
  store float %32, ptr %result_from_other_lane, align 4
  call void @region_1_12__1(ptr %31, ptr %result_from_other_lane, ptr %return_buffer31)
  %33 = load float, ptr %return_buffer31, align 4
  store float %33, ptr %31, align 4
  %partial_reduction_result33 = load float, ptr %31, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 8, i32 31)
  store float %34, ptr %result_from_other_lane32, align 4
  call void @region_1_12__1(ptr %31, ptr %result_from_other_lane32, ptr %return_buffer34)
  %35 = load float, ptr %return_buffer34, align 4
  store float %35, ptr %31, align 4
  %partial_reduction_result36 = load float, ptr %31, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 4, i32 31)
  store float %36, ptr %result_from_other_lane35, align 4
  call void @region_1_12__1(ptr %31, ptr %result_from_other_lane35, ptr %return_buffer37)
  %37 = load float, ptr %return_buffer37, align 4
  store float %37, ptr %31, align 4
  %partial_reduction_result39 = load float, ptr %31, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 2, i32 31)
  store float %38, ptr %result_from_other_lane38, align 4
  call void @region_1_12__1(ptr %31, ptr %result_from_other_lane38, ptr %return_buffer40)
  %39 = load float, ptr %return_buffer40, align 4
  store float %39, ptr %31, align 4
  %partial_reduction_result42 = load float, ptr %31, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result42, i32 1, i32 31)
  store float %40, ptr %result_from_other_lane41, align 4
  call void @region_1_12__1(ptr %31, ptr %result_from_other_lane41, ptr %return_buffer43)
  %41 = load float, ptr %return_buffer43, align 4
  store float %41, ptr %31, align 4
  %42 = icmp ult i32 %thread_id.x, %tile_bound
  %43 = mul i32 %thread_id.y, 1
  %44 = icmp ult i32 %43, %tile_bound4
  %45 = and i1 %44, %42
  %46 = icmp eq i32 %lane_id, 0
  %47 = and i1 %45, %46
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address44 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %48 = addrspacecast ptr addrspace(3) %shmem_output_address44 to ptr
  %current_output45 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %49 = load float, ptr %current_output45, align 4
  store float %49, ptr %48, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr46 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %50 = addrspacecast ptr addrspace(3) %shmem_transposed_addr46 to ptr
  %partial_reduction_result48 = load float, ptr %50, align 4
  %51 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 16, i32 31)
  store float %51, ptr %result_from_other_lane47, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane47, ptr %return_buffer49)
  %52 = load float, ptr %return_buffer49, align 4
  store float %52, ptr %50, align 4
  %partial_reduction_result51 = load float, ptr %50, align 4
  %53 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 8, i32 31)
  store float %53, ptr %result_from_other_lane50, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane50, ptr %return_buffer52)
  %54 = load float, ptr %return_buffer52, align 4
  store float %54, ptr %50, align 4
  %partial_reduction_result54 = load float, ptr %50, align 4
  %55 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 4, i32 31)
  store float %55, ptr %result_from_other_lane53, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane53, ptr %return_buffer55)
  %56 = load float, ptr %return_buffer55, align 4
  store float %56, ptr %50, align 4
  %partial_reduction_result57 = load float, ptr %50, align 4
  %57 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 2, i32 31)
  store float %57, ptr %result_from_other_lane56, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane56, ptr %return_buffer58)
  %58 = load float, ptr %return_buffer58, align 4
  store float %58, ptr %50, align 4
  %partial_reduction_result60 = load float, ptr %50, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 1, i32 31)
  store float %59, ptr %result_from_other_lane59, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane59, ptr %return_buffer61)
  %60 = load float, ptr %return_buffer61, align 4
  store float %60, ptr %50, align 4
  %61 = icmp ult i32 %thread_id.x, %tile_bound
  %62 = mul i32 %thread_id.y, 1
  %63 = icmp ult i32 %62, %tile_bound4
  %64 = and i1 %63, %61
  %65 = icmp eq i32 %lane_id, 0
  %66 = and i1 %64, %65
  br i1 %66, label %reduction_write_output-true62, label %reduction_write_output-after63

reduction_write_output-after63:                   ; preds = %reduction_write_output-true62, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %67 = mul nuw nsw i32 %27, 1
  %68 = add nuw nsw i32 0, %67
  %69 = mul nuw nsw i32 %26, 6
  %70 = add nuw nsw i32 %68, %69
  %71 = mul nuw nsw i32 %tile_origin.0, 768
  %72 = add nuw nsw i32 %70, %71
  %73 = udiv i32 %72, 1
  %74 = urem i32 %73, 6
  %75 = udiv i32 %72, 6
  %76 = urem i32 %75, 128
  %77 = udiv i32 %72, 768
  %78 = mul i32 %thread_id.x, 1
  %79 = sub i32 %x_loc, %78
  %80 = mul nuw nsw i32 %74, 1
  %81 = add nuw nsw i32 0, %80
  %82 = udiv i32 %81, 6
  %83 = mul nuw nsw i32 %76, 1
  %84 = add nuw nsw i32 0, %83
  %85 = mul nuw nsw i32 %77, 128
  %86 = add nuw nsw i32 %84, %85
  %87 = udiv i32 %86, 8192
  %88 = add i32 %86, 0
  %89 = add i32 %81, 0
  %Arg_2.3 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %88, i32 16, i32 %89
  %Arg_2.36 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %86
  %Arg_1.27 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %subtract.8 = fsub float %Arg_2.36, %Arg_1.27
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %72
  %Arg_0.18 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.9 = fmul float %subtract.8, %Arg_0.18
  store float %multiply.9, ptr %reduction_input_address, align 4
  %90 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %79
  call void @region_1_12__1(ptr %90, ptr %reduction_input_address, ptr %return_buffer)
  %91 = load float, ptr %return_buffer, align 4
  store float %91, ptr %90, align 4
  %92 = mul nuw nsw i32 %74, 1
  %93 = add nuw nsw i32 0, %92
  %94 = udiv i32 %93, 6
  %95 = mul nuw nsw i32 %76, 1
  %96 = add nuw nsw i32 0, %95
  %97 = mul nuw nsw i32 %77, 128
  %98 = add nuw nsw i32 %96, %97
  %99 = udiv i32 %98, 8192
  %100 = add i32 %98, 0
  %101 = add i32 %93, 0
  %Arg_2.39 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %100, i32 15, i32 %101
  %Arg_2.310 = load float, ptr %Arg_2.39, align 4, !invariant.load !269
  %Arg_4.5 = getelementptr inbounds [8192 x float], ptr %arg4, i32 0, i32 %98
  %Arg_4.511 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %subtract.19 = fsub float %Arg_2.310, %Arg_4.511
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %72
  %Arg_3.412 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %multiply.20 = fmul float %subtract.19, %Arg_3.412
  store float %multiply.20, ptr %reduction_input_address1, align 4
  %102 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %79
  call void @region_2_22__1(ptr %102, ptr %reduction_input_address1, ptr %return_buffer13)
  %103 = load float, ptr %return_buffer13, align 4
  store float %103, ptr %102, align 4
  %104 = mul nuw nsw i32 %74, 1
  %105 = add nuw nsw i32 0, %104
  %106 = udiv i32 %105, 6
  %107 = mul nuw nsw i32 %76, 1
  %108 = add nuw nsw i32 0, %107
  %109 = mul nuw nsw i32 %77, 128
  %110 = add nuw nsw i32 %108, %109
  %111 = udiv i32 %110, 8192
  %112 = add i32 %110, 0
  %113 = add i32 %105, 0
  %Arg_2.314 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %112, i32 16, i32 %113
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !269
  %Arg_1.216 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %110
  %Arg_1.217 = load float, ptr %Arg_1.216, align 4, !invariant.load !269
  %subtract.818 = fsub float %Arg_2.315, %Arg_1.217
  %Arg_0.119 = getelementptr inbounds float, ptr %arg0, i32 %72
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !269
  %multiply.921 = fmul float %subtract.818, %Arg_0.120
  %114 = mul nuw nsw i32 %74, 1
  %115 = add nuw nsw i32 0, %114
  %116 = udiv i32 %115, 6
  %117 = mul nuw nsw i32 %76, 1
  %118 = add nuw nsw i32 0, %117
  %119 = mul nuw nsw i32 %77, 128
  %120 = add nuw nsw i32 %118, %119
  %121 = udiv i32 %120, 8192
  %122 = add i32 %120, 0
  %123 = add i32 %115, 0
  %Arg_2.322 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %122, i32 15, i32 %123
  %Arg_2.323 = load float, ptr %Arg_2.322, align 4, !invariant.load !269
  %Arg_4.524 = getelementptr inbounds [8192 x float], ptr %arg4, i32 0, i32 %120
  %Arg_4.525 = load float, ptr %Arg_4.524, align 4, !invariant.load !269
  %subtract.1926 = fsub float %Arg_2.323, %Arg_4.525
  %Arg_3.427 = getelementptr inbounds float, ptr %arg3, i32 %72
  %Arg_3.428 = load float, ptr %Arg_3.427, align 4, !invariant.load !269
  %multiply.2029 = fmul float %subtract.1926, %Arg_3.428
  %124 = mul nuw nsw i32 %74, 1
  %125 = add nuw nsw i32 0, %124
  %126 = udiv i32 %125, 6
  %127 = mul nuw nsw i32 %76, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %77, 128
  %130 = add nuw nsw i32 %128, %129
  %131 = udiv i32 %130, 8192
  %132 = getelementptr inbounds float, ptr %arg6, i32 %72
  store float %multiply.921, ptr %132, align 4
  %133 = mul nuw nsw i32 %74, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 6
  %136 = mul nuw nsw i32 %76, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %77, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %141 = getelementptr inbounds float, ptr %arg8, i32 %72
  store float %multiply.2029, ptr %141, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %142 = mul i32 %thread_id.y, 1
  %143 = add i32 %tile_origin.1, %thread_id.x
  %144 = add i32 %tile_origin.2, %142
  %145 = add i32 %144, 0
  %146 = mul i32 %tile_origin.0, 6
  %147 = add i32 %146, %145
  %148 = udiv i32 %147, 1
  %149 = urem i32 %148, 6
  %150 = udiv i32 %147, 6
  %output_element_address = getelementptr inbounds [64 x [6 x float]], ptr %arg5, i32 0, i32 %150, i32 %149
  %output = load float, ptr %31, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true62:                    ; preds = %reduction_write_output-after
  %151 = mul i32 %thread_id.y, 1
  %152 = add i32 %tile_origin.1, %thread_id.x
  %153 = add i32 %tile_origin.2, %151
  %154 = add i32 %153, 0
  %155 = mul i32 %tile_origin.0, 6
  %156 = add i32 %155, %154
  %157 = udiv i32 %156, 1
  %158 = urem i32 %157, 6
  %159 = udiv i32 %156, 6
  %output_element_address64 = getelementptr inbounds [64 x [6 x float]], ptr %arg7, i32 0, i32 %159, i32 %158
  %output65 = load float, ptr %50, align 4
  store float %output65, ptr %output_element_address64, align 4
  br label %reduction_write_output-after63
}

define internal void @region_1_12__1(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_22__1(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_16(ptr noalias align 16 dereferenceable(24) %arg0, ptr noalias align 128 dereferenceable(1536) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(24) %arg3, ptr noalias align 128 dereferenceable(1536) %arg4, ptr noalias align 128 dereferenceable(24) %arg5, ptr noalias align 128 dereferenceable(24) %arg6) {
entry:
  %return_buffer7 = alloca float, align 4
  %parameter_buffer6 = alloca float, align 4
  %parameter_buffer5 = alloca float, align 4
  %reduce.19.inner.invar_address.reduction_dim.0 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.12.inner.invar_address.reduction_dim.0 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !264
  %2 = mul nuw nsw i32 %0, 6
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 6
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 6
  br i1 %4, label %fusion_16.in_bounds-true, label %fusion_16.in_bounds-after

fusion_16.in_bounds-after:                        ; preds = %reduce.19.inner.loop_exit.reduction_dim.0, %entry
  ret void

fusion_16.in_bounds-true:                         ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %region_0_23_constant_7 = load float, ptr @47, align 4
  store float %region_0_23_constant_7, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.0

reduce.12.inner.loop_header.reduction_dim.0:      ; preds = %reduce.12.inner.loop_body.reduction_dim.0, %fusion_16.in_bounds-true
  %reduce.12.inner.indvar.reduction_dim.0 = load i32, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  %8 = icmp uge i32 %reduce.12.inner.indvar.reduction_dim.0, 64
  br i1 %8, label %reduce.12.inner.loop_exit.reduction_dim.0, label %reduce.12.inner.loop_body.reduction_dim.0

reduce.12.inner.loop_body.reduction_dim.0:        ; preds = %reduce.12.inner.loop_header.reduction_dim.0
  %9 = load float, ptr %accumulator_0, align 4
  %10 = getelementptr inbounds [64 x [6 x float]], ptr %arg1, i32 0, i32 %reduce.12.inner.indvar.reduction_dim.0, i32 %3
  %11 = load float, ptr %10, align 4, !invariant.load !269
  store float %9, ptr %parameter_buffer, align 4
  store float %11, ptr %parameter_buffer1, align 4
  call void @region_1_8__1(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %12 = load float, ptr %return_buffer, align 4
  store float %12, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.12.inner.indvar.reduction_dim.0, 1
  store i32 %invar.inc, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.0

reduce.12.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.12.inner.loop_header.reduction_dim.0
  %13 = load float, ptr %accumulator_0, align 4
  %multiply.13 = fmul float %7, %13
  %subtract.14 = fsub float %6, %multiply.13
  %14 = insertvalue { float, float } undef, float %subtract.14, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = load float, ptr %arg2, align 4, !invariant.load !269
  %region_0_23_constant_73 = load float, ptr @47, align 4
  store float %region_0_23_constant_73, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.19.inner.loop_header.reduction_dim.0

reduce.19.inner.loop_header.reduction_dim.0:      ; preds = %reduce.19.inner.loop_body.reduction_dim.0, %reduce.12.inner.loop_exit.reduction_dim.0
  %reduce.19.inner.indvar.reduction_dim.0 = load i32, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  %18 = icmp uge i32 %reduce.19.inner.indvar.reduction_dim.0, 64
  br i1 %18, label %reduce.19.inner.loop_exit.reduction_dim.0, label %reduce.19.inner.loop_body.reduction_dim.0

reduce.19.inner.loop_body.reduction_dim.0:        ; preds = %reduce.19.inner.loop_header.reduction_dim.0
  %19 = load float, ptr %accumulator_02, align 4
  %20 = getelementptr inbounds [64 x [6 x float]], ptr %arg4, i32 0, i32 %reduce.19.inner.indvar.reduction_dim.0, i32 %3
  %21 = load float, ptr %20, align 4, !invariant.load !269
  store float %19, ptr %parameter_buffer5, align 4
  store float %21, ptr %parameter_buffer6, align 4
  call void @region_2_15(ptr %parameter_buffer5, ptr %parameter_buffer6, ptr %return_buffer7)
  %22 = load float, ptr %return_buffer7, align 4
  store float %22, ptr %accumulator_02, align 4
  %invar.inc4 = add nuw nsw i32 %reduce.19.inner.indvar.reduction_dim.0, 1
  store i32 %invar.inc4, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.19.inner.loop_header.reduction_dim.0

reduce.19.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.19.inner.loop_header.reduction_dim.0
  %23 = load float, ptr %accumulator_02, align 4
  %multiply.20 = fmul float %17, %23
  %subtract.21 = fsub float %16, %multiply.20
  %24 = insertvalue { float, float } %14, float %subtract.21, 1
  %25 = extractvalue { float, float } %24, 0
  %26 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %25, ptr %26, align 4
  %27 = extractvalue { float, float } %24, 1
  %28 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %27, ptr %28, align 4
  br label %fusion_16.in_bounds-after
}

define internal void @region_1_8__1(ptr dereferenceable(4) %Arg_0.9.typed, ptr dereferenceable(4) %Arg_1.10.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.11.typed = alloca float, align 4
  %Arg_0.9 = load float, ptr %Arg_0.9.typed, align 4
  %Arg_1.10 = load float, ptr %Arg_1.10.typed, align 4
  %add.11 = fadd float %Arg_0.9, %Arg_1.10
  store float %add.11, ptr %add.11.typed, align 4
  %load_ret_value = load float, ptr %add.11.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_15(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_6(ptr noalias align 16 dereferenceable(1344) %arg0, ptr noalias align 128 dereferenceable(37248) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1344) %arg3, ptr noalias align 128 dereferenceable(37248) %arg4, ptr noalias align 128 dereferenceable(1344) %arg5, ptr noalias align 128 dereferenceable(1344) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !432
  %2 = mul nuw nsw i32 %0, 336
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 336
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 336
  br i1 %6, label %fusion_6.in_bounds-true, label %fusion_6.in_bounds-after

fusion_6.in_bounds-after:                         ; preds = %fusion_6.in_bounds-true, %entry
  ret void

fusion_6.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [1552 x [6 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.8 = fmul float %9, %13
  %subtract.9 = fsub float %8, %multiply.8
  %14 = insertvalue { float, float } undef, float %subtract.9, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 0
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [1552 x [6 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.11 = fmul float %9, %20
  %subtract.12 = fsub float %16, %multiply.11
  %21 = insertvalue { float, float } %14, float %subtract.12, 1
  %22 = extractvalue { float, float } %21, 0
  %23 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %22, ptr %23, align 4
  %24 = extractvalue { float, float } %21, 1
  %25 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %24, ptr %25, align 4
  br label %fusion_6.in_bounds-after
}

define void @fusion_9(ptr noalias align 16 dereferenceable(35904) %arg0, ptr noalias align 128 dereferenceable(37248) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(35904) %arg3, ptr noalias align 128 dereferenceable(37248) %arg4, ptr noalias align 128 dereferenceable(35904) %arg5, ptr noalias align 128 dereferenceable(35904) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !433
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 9216
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 8976
  br i1 %6, label %fusion_9.in_bounds-true, label %fusion_9.in_bounds-after

fusion_9.in_bounds-after:                         ; preds = %fusion_9.in_bounds-true, %entry
  ret void

fusion_9.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 56
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [1552 x [6 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.8 = fmul float %9, %13
  %subtract.9 = fsub float %8, %multiply.8
  %14 = insertvalue { float, float } undef, float %subtract.9, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 56
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [1552 x [6 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.11 = fmul float %9, %20
  %subtract.12 = fsub float %16, %multiply.11
  %21 = insertvalue { float, float } %14, float %subtract.12, 1
  %22 = extractvalue { float, float } %21, 0
  %23 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %22, ptr %23, align 4
  %24 = extractvalue { float, float } %21, 1
  %25 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %24, ptr %25, align 4
  br label %fusion_9.in_bounds-after
}

define void @fusion_548(ptr noalias align 16 dereferenceable(2949120) %arg0, ptr noalias align 128 dereferenceable(3342336) %arg1, ptr noalias align 128 dereferenceable(491520) %arg2) {
entry:
  %return_buffer37 = alloca float, align 4
  %parameter_buffer36 = alloca float, align 4
  %parameter_buffer35 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.231 = alloca i32, align 4
  %accumulator_026 = alloca float, align 4
  %return_buffer25 = alloca float, align 4
  %parameter_buffer24 = alloca float, align 4
  %parameter_buffer23 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.219 = alloca i32, align 4
  %accumulator_014 = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %parameter_buffer12 = alloca float, align 4
  %parameter_buffer11 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.27 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.2 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !339
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 30720
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 15
  %5 = udiv i32 %linear_index_base, 15
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 15
  %8 = udiv i32 %linear_index1, 15
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 15
  %11 = udiv i32 %linear_index2, 15
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 15
  %14 = udiv i32 %linear_index3, 15
  %15 = icmp ult i32 %linear_index_base, 122880
  br i1 %15, label %fusion_548.in_bounds-true, label %fusion_548.in_bounds-after

fusion_548.in_bounds-after:                       ; preds = %reduce.10.inner.loop_exit.reduction_dim.228, %entry
  ret void

fusion_548.in_bounds-true:                        ; preds = %entry
  %region_0_11_constant_5 = load float, ptr @48, align 4
  store float %region_0_11_constant_5, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.2

reduce.10.inner.loop_header.reduction_dim.2:      ; preds = %reduce.10.inner.loop_body.reduction_dim.2, %fusion_548.in_bounds-true
  %reduce.10.inner.indvar.reduction_dim.2 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  %16 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.2, 6
  br i1 %16, label %reduce.10.inner.loop_exit.reduction_dim.2, label %reduce.10.inner.loop_body.reduction_dim.2

reduce.10.inner.loop_body.reduction_dim.2:        ; preds = %reduce.10.inner.loop_header.reduction_dim.2
  %17 = load float, ptr %accumulator_0, align 4
  %18 = add i32 %5, 0
  %19 = add i32 %4, 0
  %20 = add i32 %reduce.10.inner.indvar.reduction_dim.2, 0
  %21 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %18, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %5, i32 %4, i32 %reduce.10.inner.indvar.reduction_dim.2
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %multiply.4 = fmul float %22, %24
  store float %17, ptr %parameter_buffer, align 4
  store float %multiply.4, ptr %parameter_buffer1, align 4
  call void @region_1_6__1(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %25 = load float, ptr %return_buffer, align 4
  store float %25, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.2, 1
  store i32 %invar.inc, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.2

reduce.10.inner.loop_exit.reduction_dim.2:        ; preds = %reduce.10.inner.loop_header.reduction_dim.2
  %26 = load float, ptr %accumulator_0, align 4
  %27 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %26, ptr %27, align 4
  %region_0_11_constant_53 = load float, ptr @48, align 4
  store float %region_0_11_constant_53, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.25

reduce.10.inner.loop_header.reduction_dim.25:     ; preds = %reduce.10.inner.loop_body.reduction_dim.26, %reduce.10.inner.loop_exit.reduction_dim.2
  %reduce.10.inner.indvar.reduction_dim.28 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  %28 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.28, 6
  br i1 %28, label %reduce.10.inner.loop_exit.reduction_dim.24, label %reduce.10.inner.loop_body.reduction_dim.26

reduce.10.inner.loop_body.reduction_dim.26:       ; preds = %reduce.10.inner.loop_header.reduction_dim.25
  %29 = load float, ptr %accumulator_02, align 4
  %30 = add i32 %8, 0
  %31 = add i32 %7, 0
  %32 = add i32 %reduce.10.inner.indvar.reduction_dim.28, 0
  %33 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %30, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %8, i32 %7, i32 %reduce.10.inner.indvar.reduction_dim.28
  %36 = load float, ptr %35, align 4, !invariant.load !269
  %multiply.410 = fmul float %34, %36
  store float %29, ptr %parameter_buffer11, align 4
  store float %multiply.410, ptr %parameter_buffer12, align 4
  call void @region_1_6__1(ptr %parameter_buffer11, ptr %parameter_buffer12, ptr %return_buffer13)
  %37 = load float, ptr %return_buffer13, align 4
  store float %37, ptr %accumulator_02, align 4
  %invar.inc9 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.28, 1
  store i32 %invar.inc9, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.25

reduce.10.inner.loop_exit.reduction_dim.24:       ; preds = %reduce.10.inner.loop_header.reduction_dim.25
  %38 = load float, ptr %accumulator_02, align 4
  %39 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %38, ptr %39, align 4
  %region_0_11_constant_515 = load float, ptr @48, align 4
  store float %region_0_11_constant_515, ptr %accumulator_014, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.217

reduce.10.inner.loop_header.reduction_dim.217:    ; preds = %reduce.10.inner.loop_body.reduction_dim.218, %reduce.10.inner.loop_exit.reduction_dim.24
  %reduce.10.inner.indvar.reduction_dim.220 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  %40 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.220, 6
  br i1 %40, label %reduce.10.inner.loop_exit.reduction_dim.216, label %reduce.10.inner.loop_body.reduction_dim.218

reduce.10.inner.loop_body.reduction_dim.218:      ; preds = %reduce.10.inner.loop_header.reduction_dim.217
  %41 = load float, ptr %accumulator_014, align 4
  %42 = add i32 %11, 0
  %43 = add i32 %10, 0
  %44 = add i32 %reduce.10.inner.indvar.reduction_dim.220, 0
  %45 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %42, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %47 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %11, i32 %10, i32 %reduce.10.inner.indvar.reduction_dim.220
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %multiply.422 = fmul float %46, %48
  store float %41, ptr %parameter_buffer23, align 4
  store float %multiply.422, ptr %parameter_buffer24, align 4
  call void @region_1_6__1(ptr %parameter_buffer23, ptr %parameter_buffer24, ptr %return_buffer25)
  %49 = load float, ptr %return_buffer25, align 4
  store float %49, ptr %accumulator_014, align 4
  %invar.inc21 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.220, 1
  store i32 %invar.inc21, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.217

reduce.10.inner.loop_exit.reduction_dim.216:      ; preds = %reduce.10.inner.loop_header.reduction_dim.217
  %50 = load float, ptr %accumulator_014, align 4
  %51 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %50, ptr %51, align 4
  %region_0_11_constant_527 = load float, ptr @48, align 4
  store float %region_0_11_constant_527, ptr %accumulator_026, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.229

reduce.10.inner.loop_header.reduction_dim.229:    ; preds = %reduce.10.inner.loop_body.reduction_dim.230, %reduce.10.inner.loop_exit.reduction_dim.216
  %reduce.10.inner.indvar.reduction_dim.232 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  %52 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.232, 6
  br i1 %52, label %reduce.10.inner.loop_exit.reduction_dim.228, label %reduce.10.inner.loop_body.reduction_dim.230

reduce.10.inner.loop_body.reduction_dim.230:      ; preds = %reduce.10.inner.loop_header.reduction_dim.229
  %53 = load float, ptr %accumulator_026, align 4
  %54 = add i32 %14, 0
  %55 = add i32 %13, 0
  %56 = add i32 %reduce.10.inner.indvar.reduction_dim.232, 0
  %57 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %54, i32 %55, i32 %56
  %58 = load float, ptr %57, align 4, !invariant.load !269
  %59 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %14, i32 %13, i32 %reduce.10.inner.indvar.reduction_dim.232
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %multiply.434 = fmul float %58, %60
  store float %53, ptr %parameter_buffer35, align 4
  store float %multiply.434, ptr %parameter_buffer36, align 4
  call void @region_1_6__1(ptr %parameter_buffer35, ptr %parameter_buffer36, ptr %return_buffer37)
  %61 = load float, ptr %return_buffer37, align 4
  store float %61, ptr %accumulator_026, align 4
  %invar.inc33 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.232, 1
  store i32 %invar.inc33, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.229

reduce.10.inner.loop_exit.reduction_dim.228:      ; preds = %reduce.10.inner.loop_header.reduction_dim.229
  %62 = load float, ptr %accumulator_026, align 4
  %63 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %62, ptr %63, align 4
  br label %fusion_548.in_bounds-after
}

define internal void @region_1_6__1(ptr dereferenceable(4) %Arg_0.7.typed, ptr dereferenceable(4) %Arg_1.8.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.9.typed = alloca float, align 4
  %Arg_0.7 = load float, ptr %Arg_0.7.typed, align 4
  %Arg_1.8 = load float, ptr %Arg_1.8.typed, align 4
  %add.9 = fadd float %Arg_0.7, %Arg_1.8
  store float %add.9, ptr %add.9.typed, align 4
  %load_ret_value = load float, ptr %add.9.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_19(ptr noalias align 16 dereferenceable(2949120) %arg0, ptr noalias align 128 dereferenceable(491520) %arg1, ptr noalias align 128 dereferenceable(3342336) %arg2, ptr noalias align 128 dereferenceable(23040) %arg3, ptr noalias align 128 dereferenceable(2949120) %arg4) {
entry:
  %return_buffer27 = alloca float, align 4
  %result_from_other_lane25 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %result_from_other_lane22 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %result_from_other_lane19 = alloca float, align 4
  %return_buffer18 = alloca float, align 4
  %result_from_other_lane16 = alloca float, align 4
  %return_buffer15 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @49, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !426
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 192
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 3
  %13 = udiv i32 %8, 3
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 3
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 128, i32 4096
  %17 = icmp eq i32 %12, 2
  %tile_bound1 = select i1 %17, i32 26, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !434

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !435

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result14 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_10__6(ptr %30, ptr %result_from_other_lane, ptr %return_buffer15)
  %32 = load float, ptr %return_buffer15, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result17 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result17, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane16, align 4
  call void @region_1_10__6(ptr %30, ptr %result_from_other_lane16, ptr %return_buffer18)
  %34 = load float, ptr %return_buffer18, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result20 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result20, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane19, align 4
  call void @region_1_10__6(ptr %30, ptr %result_from_other_lane19, ptr %return_buffer21)
  %36 = load float, ptr %return_buffer21, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result23 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result23, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane22, align 4
  call void @region_1_10__6(ptr %30, ptr %result_from_other_lane22, ptr %return_buffer24)
  %38 = load float, ptr %return_buffer24, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result26 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane25, align 4
  call void @region_1_10__6(ptr %30, ptr %result_from_other_lane25, ptr %return_buffer27)
  %40 = load float, ptr %return_buffer27, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 90
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 11520
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 6
  %55 = udiv i32 %52, 6
  %56 = urem i32 %55, 15
  %57 = udiv i32 %52, 90
  %58 = urem i32 %57, 128
  %59 = udiv i32 %52, 11520
  %60 = mul i32 %thread_id.x, 1
  %61 = sub i32 %x_loc, %60
  %62 = mul nuw nsw i32 %54, 1
  %63 = add nuw nsw i32 0, %62
  %64 = udiv i32 %63, 6
  %65 = mul nuw nsw i32 %56, 1
  %66 = add nuw nsw i32 0, %65
  %67 = udiv i32 %66, 15
  %68 = mul nuw nsw i32 %58, 1
  %69 = add nuw nsw i32 0, %68
  %70 = mul nuw nsw i32 %59, 128
  %71 = add nuw nsw i32 %69, %70
  %72 = udiv i32 %71, 8192
  %73 = add i32 %71, 0
  %74 = add i32 %66, 0
  %75 = add i32 %63, 0
  %Arg_2.3 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %73, i32 %74, i32 %75
  %Arg_2.33 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %76 = udiv i32 %52, 6
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %76
  %Arg_1.24 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %subtract.6 = fsub float %Arg_2.33, %Arg_1.24
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.15 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.7 = fmul float %subtract.6, %Arg_0.15
  store float %multiply.7, ptr %reduction_input_address, align 4
  %77 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %61
  call void @region_1_10__6(ptr %77, ptr %reduction_input_address, ptr %return_buffer)
  %78 = load float, ptr %return_buffer, align 4
  store float %78, ptr %77, align 4
  %79 = mul nuw nsw i32 %54, 1
  %80 = add nuw nsw i32 0, %79
  %81 = udiv i32 %80, 6
  %82 = mul nuw nsw i32 %56, 1
  %83 = add nuw nsw i32 0, %82
  %84 = udiv i32 %83, 15
  %85 = mul nuw nsw i32 %58, 1
  %86 = add nuw nsw i32 0, %85
  %87 = mul nuw nsw i32 %59, 128
  %88 = add nuw nsw i32 %86, %87
  %89 = udiv i32 %88, 8192
  %90 = add i32 %88, 0
  %91 = add i32 %83, 0
  %92 = add i32 %80, 0
  %Arg_2.36 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %90, i32 %91, i32 %92
  %Arg_2.37 = load float, ptr %Arg_2.36, align 4, !invariant.load !269
  %93 = udiv i32 %52, 6
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %93
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !269
  %subtract.610 = fsub float %Arg_2.37, %Arg_1.29
  %Arg_0.111 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.112 = load float, ptr %Arg_0.111, align 4, !invariant.load !269
  %multiply.713 = fmul float %subtract.610, %Arg_0.112
  %94 = mul nuw nsw i32 %54, 1
  %95 = add nuw nsw i32 0, %94
  %96 = udiv i32 %95, 6
  %97 = mul nuw nsw i32 %56, 1
  %98 = add nuw nsw i32 0, %97
  %99 = udiv i32 %98, 15
  %100 = mul nuw nsw i32 %58, 1
  %101 = add nuw nsw i32 0, %100
  %102 = mul nuw nsw i32 %59, 128
  %103 = add nuw nsw i32 %101, %102
  %104 = udiv i32 %103, 8192
  %105 = getelementptr inbounds float, ptr %arg4, i32 %52
  store float %multiply.713, ptr %105, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %106 = mul i32 %thread_id.y, 1
  %107 = add i32 %tile_origin.1, %thread_id.x
  %108 = add i32 %tile_origin.2, %106
  %109 = add i32 %108, 0
  %110 = mul i32 %tile_origin.0, 90
  %111 = add i32 %110, %109
  %112 = udiv i32 %111, 1
  %113 = urem i32 %112, 6
  %114 = udiv i32 %111, 6
  %115 = urem i32 %114, 15
  %116 = udiv i32 %111, 90
  %output_element_address = getelementptr inbounds [64 x [15 x [6 x float]]], ptr %arg3, i32 0, i32 %116, i32 %115, i32 %113
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_10__6(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @reduce(ptr noalias align 128 dereferenceable(23040) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(360) %arg2) {
entry:
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane9 = alloca float, align 4
  %return_buffer8 = alloca float, align 4
  %result_from_other_lane6 = alloca float, align 4
  %return_buffer5 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !436
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 3
  %13 = udiv i32 %8, 3
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 3
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 64, i32 4096
  %17 = icmp eq i32 %12, 2
  %tile_bound1 = select i1 %17, i32 26, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !437

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !438

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result4 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_3__2(ptr %30, ptr %result_from_other_lane, ptr %return_buffer5)
  %32 = load float, ptr %return_buffer5, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result7 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result7, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane6, align 4
  call void @region_1_3__2(ptr %30, ptr %result_from_other_lane6, ptr %return_buffer8)
  %34 = load float, ptr %return_buffer8, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result10 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane9, align 4
  call void @region_1_3__2(ptr %30, ptr %result_from_other_lane9, ptr %return_buffer11)
  %36 = load float, ptr %return_buffer11, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result13 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane12, align 4
  call void @region_1_3__2(ptr %30, ptr %result_from_other_lane12, ptr %return_buffer14)
  %38 = load float, ptr %return_buffer14, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result16 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane15, align 4
  call void @region_1_3__2(ptr %30, ptr %result_from_other_lane15, ptr %return_buffer17)
  %40 = load float, ptr %return_buffer17, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 90
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 5760
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 6
  %55 = udiv i32 %52, 6
  %56 = urem i32 %55, 15
  %57 = udiv i32 %52, 90
  %58 = mul i32 %thread_id.x, 1
  %59 = sub i32 %x_loc, %58
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %60 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %59
  call void @region_1_3__2(ptr %60, ptr %reduction_input_address, ptr %return_buffer)
  %61 = load float, ptr %return_buffer, align 4
  store float %61, ptr %60, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %62 = mul i32 %thread_id.y, 1
  %63 = add i32 %tile_origin.1, %thread_id.x
  %64 = add i32 %tile_origin.2, %62
  %65 = add i32 %64, 0
  %66 = mul i32 %tile_origin.0, 90
  %67 = add i32 %66, %65
  %68 = udiv i32 %67, 1
  %69 = urem i32 %68, 6
  %70 = udiv i32 %67, 6
  %output_element_address = getelementptr inbounds [15 x [6 x float]], ptr %arg2, i32 0, i32 %70, i32 %69
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_3__2(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_18(ptr noalias align 16 dereferenceable(360) %arg0, ptr noalias align 128 dereferenceable(360) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(360) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !336
  %2 = mul nuw nsw i32 %0, 90
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 90
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 90
  br i1 %4, label %fusion_18.in_bounds-true, label %fusion_18.in_bounds-after

fusion_18.in_bounds-after:                        ; preds = %fusion_18.in_bounds-true, %entry
  ret void

fusion_18.in_bounds-true:                         ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = mul nuw nsw i32 %3, 1
  %8 = add nuw nsw i32 0, %7
  %9 = urem i32 %8, 6
  %10 = udiv i32 %8, 6
  %11 = udiv i32 %10, 15
  %12 = load float, ptr %arg2, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %multiply.5 = fmul float %12, %14
  %subtract.7 = fsub float %6, %multiply.5
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %15, align 4
  br label %fusion_18.in_bounds-after
}

define void @fusion_10(ptr noalias align 16 dereferenceable(20160) %arg0, ptr noalias align 128 dereferenceable(558720) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(20160) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !361
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 5120
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index, 90
  %6 = icmp ult i32 %linear_index, 5040
  br i1 %6, label %fusion_10.in_bounds-true, label %fusion_10.in_bounds-after

fusion_10.in_bounds-after:                        ; preds = %fusion_10.in_bounds-true, %entry
  ret void

fusion_10.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [1552 x [90 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.6 = fmul float %9, %13
  %subtract.7 = fsub float %8, %multiply.6
  %14 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %14, align 4
  br label %fusion_10.in_bounds-after
}

define void @fusion_13(ptr noalias align 16 dereferenceable(538560) %arg0, ptr noalias align 128 dereferenceable(558720) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(538560) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !439
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 33792
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index_base, 90
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 90
  %8 = udiv i32 %linear_index1, 90
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 90
  %11 = udiv i32 %linear_index2, 90
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 90
  %14 = udiv i32 %linear_index3, 90
  %15 = icmp ult i32 %linear_index_base, 134640
  br i1 %15, label %fusion_13.in_bounds-true, label %fusion_13.in_bounds-after

fusion_13.in_bounds-after:                        ; preds = %fusion_13.in_bounds-true, %entry
  ret void

fusion_13.in_bounds-true:                         ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = add i32 %5, 56
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [1552 x [90 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %multiply.6 = fmul float %18, %22
  %subtract.7 = fsub float %17, %multiply.6
  %23 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %subtract.7, ptr %23, align 4
  %24 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %26 = load float, ptr %arg2, align 4, !invariant.load !269
  %27 = add i32 %8, 56
  %28 = add i32 %7, 0
  %29 = getelementptr inbounds [1552 x [90 x float]], ptr %arg1, i32 0, i32 %27, i32 %28
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %multiply.61 = fmul float %26, %30
  %subtract.72 = fsub float %25, %multiply.61
  %31 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %subtract.72, ptr %31, align 4
  %32 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %33 = load float, ptr %32, align 4, !invariant.load !269
  %34 = load float, ptr %arg2, align 4, !invariant.load !269
  %35 = add i32 %11, 56
  %36 = add i32 %10, 0
  %37 = getelementptr inbounds [1552 x [90 x float]], ptr %arg1, i32 0, i32 %35, i32 %36
  %38 = load float, ptr %37, align 4, !invariant.load !269
  %multiply.63 = fmul float %34, %38
  %subtract.74 = fsub float %33, %multiply.63
  %39 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %subtract.74, ptr %39, align 4
  %40 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %42 = load float, ptr %arg2, align 4, !invariant.load !269
  %43 = add i32 %14, 56
  %44 = add i32 %13, 0
  %45 = getelementptr inbounds [1552 x [90 x float]], ptr %arg1, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.65 = fmul float %42, %46
  %subtract.76 = fsub float %41, %multiply.65
  %47 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %subtract.76, ptr %47, align 4
  br label %fusion_13.in_bounds-after
}

define void @fusion_69(ptr noalias align 128 dereferenceable(50331648) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_17_constant_10 = load float, ptr @51, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_17_constant_10, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_17_constant_10, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !318
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !440

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !441

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_17_constant_3 = load float, ptr @50, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_17_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 0
  %Arg_0.1 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %94, i32 5, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_17_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_11(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_17_constant_37 = load float, ptr @50, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_17_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 0
  %Arg_0.19 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %109, i32 5, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_17_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !269
  %region_0_17_constant_316 = load float, ptr @50, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_17_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 0
  %Arg_0.118 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %144, i32 5, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !269
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_17_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_11(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !269
  %region_0_17_constant_323 = load float, ptr @50, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_17_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 0
  %Arg_0.125 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %159, i32 5, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !269
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_17_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_11(ptr dereferenceable(4) %Arg_0.12.typed, ptr dereferenceable(4) %Arg_1.13.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.14.typed = alloca float, align 4
  %Arg_0.12 = load float, ptr %Arg_0.12.typed, align 4
  %Arg_1.13 = load float, ptr %Arg_1.13.typed, align 4
  %add.14 = fadd float %Arg_0.12, %Arg_1.13
  store float %add.14, ptr %add.14.typed, align 4
  %load_ret_value = load float, ptr %add.14.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_79(ptr noalias align 128 dereferenceable(50331648) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 16 dereferenceable(8388608) %arg3, ptr noalias align 16 dereferenceable(8388608) %arg4, ptr noalias align 16 dereferenceable(8388608) %arg5, ptr noalias align 128 dereferenceable(65536) %arg6, ptr noalias align 128 dereferenceable(8388608) %arg7, ptr noalias align 128 dereferenceable(65536) %arg8, ptr noalias align 128 dereferenceable(8388608) %arg9, ptr noalias align 128 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(8388608) %arg11, ptr noalias align 128 dereferenceable(65536) %arg12, ptr noalias align 128 dereferenceable(8388608) %arg13, ptr noalias align 128 dereferenceable(65536) %arg14, ptr noalias align 128 dereferenceable(8388608) %arg15) {
entry:
  %return_buffer164 = alloca float, align 4
  %result_from_other_lane162 = alloca float, align 4
  %return_buffer161 = alloca float, align 4
  %result_from_other_lane159 = alloca float, align 4
  %return_buffer158 = alloca float, align 4
  %result_from_other_lane156 = alloca float, align 4
  %return_buffer155 = alloca float, align 4
  %result_from_other_lane153 = alloca float, align 4
  %return_buffer152 = alloca float, align 4
  %result_from_other_lane150 = alloca float, align 4
  %return_buffer142 = alloca float, align 4
  %result_from_other_lane140 = alloca float, align 4
  %return_buffer139 = alloca float, align 4
  %result_from_other_lane137 = alloca float, align 4
  %return_buffer136 = alloca float, align 4
  %result_from_other_lane134 = alloca float, align 4
  %return_buffer133 = alloca float, align 4
  %result_from_other_lane131 = alloca float, align 4
  %return_buffer130 = alloca float, align 4
  %result_from_other_lane128 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane75 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %return_buffer26 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result11 = alloca float, align 4
  %reduction_input_address10 = alloca float, align 4
  %partial_reduction_result8 = alloca float, align 4
  %reduction_input_address7 = alloca float, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after166, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_61_constant_14 = load float, ptr @53, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_61_constant_14, ptr %2, align 4
  %region_0_61_constant_143 = load float, ptr @53, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_61_constant_143, ptr %3, align 4
  %region_0_61_constant_146 = load float, ptr @53, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_61_constant_146, ptr %4, align 4
  %region_0_61_constant_149 = load float, ptr @53, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  store float %region_0_61_constant_149, ptr %5, align 4
  %region_0_61_constant_1412 = load float, ptr @53, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  store float %region_0_61_constant_1412, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !265
  %9 = urem i32 %7, 1024
  %10 = udiv i32 %7, 1024
  %11 = mul i32 %8, 1
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 512
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 8
  %17 = udiv i32 %12, 8
  %18 = urem i32 %17, 1
  %19 = udiv i32 %12, 8
  %20 = icmp eq i32 %18, 0
  %tile_bound = select i1 %20, i32 128, i32 4096
  %21 = icmp eq i32 %16, 7
  %tile_bound13 = select i1 %21, i32 32, i32 32
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 4096
  %tile_origin.2 = mul i32 %16, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %25 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %25, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc14 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc14, ptr %tile_loop.invar_address, align 4
  %26 = icmp eq i32 %tile_loop.indvar, 0
  %27 = mul i32 %tile_loop.indvar, 1
  %28 = add i32 %27, 0
  %x_loc = add i32 %28, %24
  %29 = add i32 %tile_origin.1, %y_in_tile.indvar
  %30 = add i32 %tile_origin.2, %x_loc
  %31 = icmp ult i32 %x_loc, %tile_bound13
  br i1 %31, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !442

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !443

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %32 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %33 = load float, ptr %current_output, align 4
  store float %33, ptr %32, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %34 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result67 = load float, ptr %34, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 16, i32 31)
  store float %35, ptr %result_from_other_lane, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane, ptr %return_buffer68)
  %36 = load float, ptr %return_buffer68, align 4
  store float %36, ptr %34, align 4
  %partial_reduction_result70 = load float, ptr %34, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 8, i32 31)
  store float %37, ptr %result_from_other_lane69, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane69, ptr %return_buffer71)
  %38 = load float, ptr %return_buffer71, align 4
  store float %38, ptr %34, align 4
  %partial_reduction_result73 = load float, ptr %34, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 4, i32 31)
  store float %39, ptr %result_from_other_lane72, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane72, ptr %return_buffer74)
  %40 = load float, ptr %return_buffer74, align 4
  store float %40, ptr %34, align 4
  %partial_reduction_result76 = load float, ptr %34, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 2, i32 31)
  store float %41, ptr %result_from_other_lane75, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane75, ptr %return_buffer77)
  %42 = load float, ptr %return_buffer77, align 4
  store float %42, ptr %34, align 4
  %partial_reduction_result79 = load float, ptr %34, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 1, i32 31)
  store float %43, ptr %result_from_other_lane78, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane78, ptr %return_buffer80)
  %44 = load float, ptr %return_buffer80, align 4
  store float %44, ptr %34, align 4
  %45 = icmp ult i32 %thread_id.x, %tile_bound
  %46 = mul i32 %thread_id.y, 1
  %47 = icmp ult i32 %46, %tile_bound13
  %48 = and i1 %47, %45
  %49 = icmp eq i32 %lane_id, 0
  %50 = and i1 %48, %49
  br i1 %50, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address81 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %51 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %52 = load float, ptr %current_output82, align 4
  store float %52, ptr %51, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %53 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %53, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %54, ptr %result_from_other_lane84, align 4
  call void @region_2_25(ptr %53, ptr %result_from_other_lane84, ptr %return_buffer86)
  %55 = load float, ptr %return_buffer86, align 4
  store float %55, ptr %53, align 4
  %partial_reduction_result88 = load float, ptr %53, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %56, ptr %result_from_other_lane87, align 4
  call void @region_2_25(ptr %53, ptr %result_from_other_lane87, ptr %return_buffer89)
  %57 = load float, ptr %return_buffer89, align 4
  store float %57, ptr %53, align 4
  %partial_reduction_result91 = load float, ptr %53, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %58, ptr %result_from_other_lane90, align 4
  call void @region_2_25(ptr %53, ptr %result_from_other_lane90, ptr %return_buffer92)
  %59 = load float, ptr %return_buffer92, align 4
  store float %59, ptr %53, align 4
  %partial_reduction_result94 = load float, ptr %53, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %60, ptr %result_from_other_lane93, align 4
  call void @region_2_25(ptr %53, ptr %result_from_other_lane93, ptr %return_buffer95)
  %61 = load float, ptr %return_buffer95, align 4
  store float %61, ptr %53, align 4
  %partial_reduction_result97 = load float, ptr %53, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %62, ptr %result_from_other_lane96, align 4
  call void @region_2_25(ptr %53, ptr %result_from_other_lane96, ptr %return_buffer98)
  %63 = load float, ptr %return_buffer98, align 4
  store float %63, ptr %53, align 4
  %64 = icmp ult i32 %thread_id.x, %tile_bound
  %65 = mul i32 %thread_id.y, 1
  %66 = icmp ult i32 %65, %tile_bound13
  %67 = and i1 %66, %64
  %68 = icmp eq i32 %lane_id, 0
  %69 = and i1 %67, %68
  br i1 %69, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %reduction_write_output-after
  %shmem_output_address103 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %70 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %71 = load float, ptr %current_output104, align 4
  store float %71, ptr %70, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %72 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %72, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %73, ptr %result_from_other_lane106, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane106, ptr %return_buffer108)
  %74 = load float, ptr %return_buffer108, align 4
  store float %74, ptr %72, align 4
  %partial_reduction_result110 = load float, ptr %72, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %75, ptr %result_from_other_lane109, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane109, ptr %return_buffer111)
  %76 = load float, ptr %return_buffer111, align 4
  store float %76, ptr %72, align 4
  %partial_reduction_result113 = load float, ptr %72, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %77, ptr %result_from_other_lane112, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane112, ptr %return_buffer114)
  %78 = load float, ptr %return_buffer114, align 4
  store float %78, ptr %72, align 4
  %partial_reduction_result116 = load float, ptr %72, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %79, ptr %result_from_other_lane115, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane115, ptr %return_buffer117)
  %80 = load float, ptr %return_buffer117, align 4
  store float %80, ptr %72, align 4
  %partial_reduction_result119 = load float, ptr %72, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %81, ptr %result_from_other_lane118, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane118, ptr %return_buffer120)
  %82 = load float, ptr %return_buffer120, align 4
  store float %82, ptr %72, align 4
  %83 = icmp ult i32 %thread_id.x, %tile_bound
  %84 = mul i32 %thread_id.y, 1
  %85 = icmp ult i32 %84, %tile_bound13
  %86 = and i1 %85, %83
  %87 = icmp eq i32 %lane_id, 0
  %88 = and i1 %86, %87
  br i1 %88, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  %shmem_output_address125 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache79, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %89 = addrspacecast ptr addrspace(3) %shmem_output_address125 to ptr
  %current_output126 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  %90 = load float, ptr %current_output126, align 4
  store float %90, ptr %89, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr127 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache79, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %91 = addrspacecast ptr addrspace(3) %shmem_transposed_addr127 to ptr
  %partial_reduction_result129 = load float, ptr %91, align 4
  %92 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 16, i32 31)
  store float %92, ptr %result_from_other_lane128, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane128, ptr %return_buffer130)
  %93 = load float, ptr %return_buffer130, align 4
  store float %93, ptr %91, align 4
  %partial_reduction_result132 = load float, ptr %91, align 4
  %94 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result132, i32 8, i32 31)
  store float %94, ptr %result_from_other_lane131, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane131, ptr %return_buffer133)
  %95 = load float, ptr %return_buffer133, align 4
  store float %95, ptr %91, align 4
  %partial_reduction_result135 = load float, ptr %91, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result135, i32 4, i32 31)
  store float %96, ptr %result_from_other_lane134, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane134, ptr %return_buffer136)
  %97 = load float, ptr %return_buffer136, align 4
  store float %97, ptr %91, align 4
  %partial_reduction_result138 = load float, ptr %91, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result138, i32 2, i32 31)
  store float %98, ptr %result_from_other_lane137, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane137, ptr %return_buffer139)
  %99 = load float, ptr %return_buffer139, align 4
  store float %99, ptr %91, align 4
  %partial_reduction_result141 = load float, ptr %91, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result141, i32 1, i32 31)
  store float %100, ptr %result_from_other_lane140, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane140, ptr %return_buffer142)
  %101 = load float, ptr %return_buffer142, align 4
  store float %101, ptr %91, align 4
  %102 = icmp ult i32 %thread_id.x, %tile_bound
  %103 = mul i32 %thread_id.y, 1
  %104 = icmp ult i32 %103, %tile_bound13
  %105 = and i1 %104, %102
  %106 = icmp eq i32 %lane_id, 0
  %107 = and i1 %105, %106
  br i1 %107, label %reduction_write_output-true143, label %reduction_write_output-after144

reduction_write_output-after144:                  ; preds = %reduction_write_output-true143, %reduction_write_output-after122
  %shmem_output_address147 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache80, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %108 = addrspacecast ptr addrspace(3) %shmem_output_address147 to ptr
  %current_output148 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  %109 = load float, ptr %current_output148, align 4
  store float %109, ptr %108, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr149 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache80, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %110 = addrspacecast ptr addrspace(3) %shmem_transposed_addr149 to ptr
  %partial_reduction_result151 = load float, ptr %110, align 4
  %111 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result151, i32 16, i32 31)
  store float %111, ptr %result_from_other_lane150, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane150, ptr %return_buffer152)
  %112 = load float, ptr %return_buffer152, align 4
  store float %112, ptr %110, align 4
  %partial_reduction_result154 = load float, ptr %110, align 4
  %113 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result154, i32 8, i32 31)
  store float %113, ptr %result_from_other_lane153, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane153, ptr %return_buffer155)
  %114 = load float, ptr %return_buffer155, align 4
  store float %114, ptr %110, align 4
  %partial_reduction_result157 = load float, ptr %110, align 4
  %115 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result157, i32 4, i32 31)
  store float %115, ptr %result_from_other_lane156, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane156, ptr %return_buffer158)
  %116 = load float, ptr %return_buffer158, align 4
  store float %116, ptr %110, align 4
  %partial_reduction_result160 = load float, ptr %110, align 4
  %117 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result160, i32 2, i32 31)
  store float %117, ptr %result_from_other_lane159, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane159, ptr %return_buffer161)
  %118 = load float, ptr %return_buffer161, align 4
  store float %118, ptr %110, align 4
  %partial_reduction_result163 = load float, ptr %110, align 4
  %119 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result163, i32 1, i32 31)
  store float %119, ptr %result_from_other_lane162, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane162, ptr %return_buffer164)
  %120 = load float, ptr %return_buffer164, align 4
  store float %120, ptr %110, align 4
  %121 = icmp ult i32 %thread_id.x, %tile_bound
  %122 = mul i32 %thread_id.y, 1
  %123 = icmp ult i32 %122, %tile_bound13
  %124 = and i1 %123, %121
  %125 = icmp eq i32 %lane_id, 0
  %126 = and i1 %124, %125
  br i1 %126, label %reduction_write_output-true165, label %reduction_write_output-after166

reduction_write_output-after166:                  ; preds = %reduction_write_output-true165, %reduction_write_output-after144
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %127 = mul nuw nsw i32 %30, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %29, 256
  %130 = add nuw nsw i32 %128, %129
  %131 = mul nuw nsw i32 %tile_origin.0, 32768
  %132 = add nuw nsw i32 %130, %131
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 256
  %135 = udiv i32 %132, 256
  %136 = urem i32 %135, 128
  %137 = udiv i32 %132, 32768
  %138 = mul i32 %thread_id.x, 1
  %139 = sub i32 %x_loc, %138
  %140 = mul nuw nsw i32 %134, 1
  %141 = add nuw nsw i32 0, %140
  %142 = udiv i32 %141, 256
  %143 = mul nuw nsw i32 %136, 1
  %144 = add nuw nsw i32 0, %143
  %145 = mul nuw nsw i32 %137, 128
  %146 = add nuw nsw i32 %144, %145
  %147 = udiv i32 %146, 8192
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_61_constant_7 = load float, ptr @52, align 4
  %compare.9 = fcmp ogt float %Arg_1.215, %region_0_61_constant_7
  %148 = zext i1 %compare.9 to i8
  %149 = add i32 %146, 0
  %150 = add i32 %141, 0
  %Arg_0.1 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %149, i32 0, i32 %150
  %Arg_0.116 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %151 = trunc i8 %148 to i1
  %152 = select i1 %151, float %Arg_0.116, float %region_0_61_constant_7
  store float %152, ptr %reduction_input_address, align 4
  %153 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %139
  call void @region_1_15__1(ptr %153, ptr %reduction_input_address, ptr %return_buffer)
  %154 = load float, ptr %return_buffer, align 4
  store float %154, ptr %153, align 4
  %155 = mul nuw nsw i32 %134, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 256
  %158 = mul nuw nsw i32 %136, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %137, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %132
  %Arg_2.317 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  %region_0_61_constant_718 = load float, ptr @52, align 4
  %compare.20 = fcmp ogt float %Arg_2.317, %region_0_61_constant_718
  %163 = zext i1 %compare.20 to i8
  %164 = add i32 %161, 0
  %165 = add i32 %156, 0
  %Arg_0.119 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %164, i32 1, i32 %165
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !269
  %166 = trunc i8 %163 to i1
  %167 = select i1 %166, float %Arg_0.120, float %region_0_61_constant_718
  store float %167, ptr %reduction_input_address1, align 4
  %168 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %139
  call void @region_2_25(ptr %168, ptr %reduction_input_address1, ptr %return_buffer21)
  %169 = load float, ptr %return_buffer21, align 4
  store float %169, ptr %168, align 4
  %170 = mul nuw nsw i32 %134, 1
  %171 = add nuw nsw i32 0, %170
  %172 = udiv i32 %171, 256
  %173 = mul nuw nsw i32 %136, 1
  %174 = add nuw nsw i32 0, %173
  %175 = mul nuw nsw i32 %137, 128
  %176 = add nuw nsw i32 %174, %175
  %177 = udiv i32 %176, 8192
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %132
  %Arg_3.422 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %region_0_61_constant_723 = load float, ptr @52, align 4
  %compare.30 = fcmp ogt float %Arg_3.422, %region_0_61_constant_723
  %178 = zext i1 %compare.30 to i8
  %179 = add i32 %176, 0
  %180 = add i32 %171, 0
  %Arg_0.124 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %179, i32 2, i32 %180
  %Arg_0.125 = load float, ptr %Arg_0.124, align 4, !invariant.load !269
  %181 = trunc i8 %178 to i1
  %182 = select i1 %181, float %Arg_0.125, float %region_0_61_constant_723
  store float %182, ptr %reduction_input_address4, align 4
  %183 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 %139
  call void @region_3_35(ptr %183, ptr %reduction_input_address4, ptr %return_buffer26)
  %184 = load float, ptr %return_buffer26, align 4
  store float %184, ptr %183, align 4
  %185 = mul nuw nsw i32 %134, 1
  %186 = add nuw nsw i32 0, %185
  %187 = udiv i32 %186, 256
  %188 = mul nuw nsw i32 %136, 1
  %189 = add nuw nsw i32 0, %188
  %190 = mul nuw nsw i32 %137, 128
  %191 = add nuw nsw i32 %189, %190
  %192 = udiv i32 %191, 8192
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %132
  %Arg_4.527 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %region_0_61_constant_728 = load float, ptr @52, align 4
  %compare.40 = fcmp ogt float %Arg_4.527, %region_0_61_constant_728
  %193 = zext i1 %compare.40 to i8
  %194 = add i32 %191, 0
  %195 = add i32 %186, 0
  %Arg_0.129 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %194, i32 3, i32 %195
  %Arg_0.130 = load float, ptr %Arg_0.129, align 4, !invariant.load !269
  %196 = trunc i8 %193 to i1
  %197 = select i1 %196, float %Arg_0.130, float %region_0_61_constant_728
  store float %197, ptr %reduction_input_address7, align 4
  %198 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 %139
  call void @region_4_45(ptr %198, ptr %reduction_input_address7, ptr %return_buffer31)
  %199 = load float, ptr %return_buffer31, align 4
  store float %199, ptr %198, align 4
  %200 = mul nuw nsw i32 %134, 1
  %201 = add nuw nsw i32 0, %200
  %202 = udiv i32 %201, 256
  %203 = mul nuw nsw i32 %136, 1
  %204 = add nuw nsw i32 0, %203
  %205 = mul nuw nsw i32 %137, 128
  %206 = add nuw nsw i32 %204, %205
  %207 = udiv i32 %206, 8192
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %132
  %Arg_5.632 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %region_0_61_constant_733 = load float, ptr @52, align 4
  %compare.50 = fcmp ogt float %Arg_5.632, %region_0_61_constant_733
  %208 = zext i1 %compare.50 to i8
  %209 = add i32 %206, 0
  %210 = add i32 %201, 0
  %Arg_0.134 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %209, i32 4, i32 %210
  %Arg_0.135 = load float, ptr %Arg_0.134, align 4, !invariant.load !269
  %211 = trunc i8 %208 to i1
  %212 = select i1 %211, float %Arg_0.135, float %region_0_61_constant_733
  store float %212, ptr %reduction_input_address10, align 4
  %213 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 %139
  call void @region_5_55(ptr %213, ptr %reduction_input_address10, ptr %return_buffer36)
  %214 = load float, ptr %return_buffer36, align 4
  store float %214, ptr %213, align 4
  %215 = mul nuw nsw i32 %134, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 256
  %218 = mul nuw nsw i32 %136, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %137, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %Arg_1.237 = getelementptr inbounds float, ptr %arg1, i32 %132
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !269
  %region_0_61_constant_739 = load float, ptr @52, align 4
  %compare.940 = fcmp ogt float %Arg_1.238, %region_0_61_constant_739
  %223 = zext i1 %compare.940 to i8
  %224 = add i32 %221, 0
  %225 = add i32 %216, 0
  %Arg_0.141 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %224, i32 0, i32 %225
  %Arg_0.142 = load float, ptr %Arg_0.141, align 4, !invariant.load !269
  %226 = trunc i8 %223 to i1
  %227 = select i1 %226, float %Arg_0.142, float %region_0_61_constant_739
  %228 = mul nuw nsw i32 %134, 1
  %229 = add nuw nsw i32 0, %228
  %230 = udiv i32 %229, 256
  %231 = mul nuw nsw i32 %136, 1
  %232 = add nuw nsw i32 0, %231
  %233 = mul nuw nsw i32 %137, 128
  %234 = add nuw nsw i32 %232, %233
  %235 = udiv i32 %234, 8192
  %Arg_2.343 = getelementptr inbounds float, ptr %arg2, i32 %132
  %Arg_2.344 = load float, ptr %Arg_2.343, align 4, !invariant.load !269
  %region_0_61_constant_745 = load float, ptr @52, align 4
  %compare.2046 = fcmp ogt float %Arg_2.344, %region_0_61_constant_745
  %236 = zext i1 %compare.2046 to i8
  %237 = add i32 %234, 0
  %238 = add i32 %229, 0
  %Arg_0.147 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %237, i32 1, i32 %238
  %Arg_0.148 = load float, ptr %Arg_0.147, align 4, !invariant.load !269
  %239 = trunc i8 %236 to i1
  %240 = select i1 %239, float %Arg_0.148, float %region_0_61_constant_745
  %241 = mul nuw nsw i32 %134, 1
  %242 = add nuw nsw i32 0, %241
  %243 = udiv i32 %242, 256
  %244 = mul nuw nsw i32 %136, 1
  %245 = add nuw nsw i32 0, %244
  %246 = mul nuw nsw i32 %137, 128
  %247 = add nuw nsw i32 %245, %246
  %248 = udiv i32 %247, 8192
  %Arg_3.449 = getelementptr inbounds float, ptr %arg3, i32 %132
  %Arg_3.450 = load float, ptr %Arg_3.449, align 4, !invariant.load !269
  %region_0_61_constant_751 = load float, ptr @52, align 4
  %compare.3052 = fcmp ogt float %Arg_3.450, %region_0_61_constant_751
  %249 = zext i1 %compare.3052 to i8
  %250 = add i32 %247, 0
  %251 = add i32 %242, 0
  %Arg_0.153 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %250, i32 2, i32 %251
  %Arg_0.154 = load float, ptr %Arg_0.153, align 4, !invariant.load !269
  %252 = trunc i8 %249 to i1
  %253 = select i1 %252, float %Arg_0.154, float %region_0_61_constant_751
  %254 = mul nuw nsw i32 %134, 1
  %255 = add nuw nsw i32 0, %254
  %256 = udiv i32 %255, 256
  %257 = mul nuw nsw i32 %136, 1
  %258 = add nuw nsw i32 0, %257
  %259 = mul nuw nsw i32 %137, 128
  %260 = add nuw nsw i32 %258, %259
  %261 = udiv i32 %260, 8192
  %Arg_4.555 = getelementptr inbounds float, ptr %arg4, i32 %132
  %Arg_4.556 = load float, ptr %Arg_4.555, align 4, !invariant.load !269
  %region_0_61_constant_757 = load float, ptr @52, align 4
  %compare.4058 = fcmp ogt float %Arg_4.556, %region_0_61_constant_757
  %262 = zext i1 %compare.4058 to i8
  %263 = add i32 %260, 0
  %264 = add i32 %255, 0
  %Arg_0.159 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %263, i32 3, i32 %264
  %Arg_0.160 = load float, ptr %Arg_0.159, align 4, !invariant.load !269
  %265 = trunc i8 %262 to i1
  %266 = select i1 %265, float %Arg_0.160, float %region_0_61_constant_757
  %267 = mul nuw nsw i32 %134, 1
  %268 = add nuw nsw i32 0, %267
  %269 = udiv i32 %268, 256
  %270 = mul nuw nsw i32 %136, 1
  %271 = add nuw nsw i32 0, %270
  %272 = mul nuw nsw i32 %137, 128
  %273 = add nuw nsw i32 %271, %272
  %274 = udiv i32 %273, 8192
  %Arg_5.661 = getelementptr inbounds float, ptr %arg5, i32 %132
  %Arg_5.662 = load float, ptr %Arg_5.661, align 4, !invariant.load !269
  %region_0_61_constant_763 = load float, ptr @52, align 4
  %compare.5064 = fcmp ogt float %Arg_5.662, %region_0_61_constant_763
  %275 = zext i1 %compare.5064 to i8
  %276 = add i32 %273, 0
  %277 = add i32 %268, 0
  %Arg_0.165 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %276, i32 4, i32 %277
  %Arg_0.166 = load float, ptr %Arg_0.165, align 4, !invariant.load !269
  %278 = trunc i8 %275 to i1
  %279 = select i1 %278, float %Arg_0.166, float %region_0_61_constant_763
  %280 = mul nuw nsw i32 %134, 1
  %281 = add nuw nsw i32 0, %280
  %282 = udiv i32 %281, 256
  %283 = mul nuw nsw i32 %136, 1
  %284 = add nuw nsw i32 0, %283
  %285 = mul nuw nsw i32 %137, 128
  %286 = add nuw nsw i32 %284, %285
  %287 = udiv i32 %286, 8192
  %288 = getelementptr inbounds float, ptr %arg9, i32 %132
  store float %240, ptr %288, align 4
  %289 = mul nuw nsw i32 %134, 1
  %290 = add nuw nsw i32 0, %289
  %291 = udiv i32 %290, 256
  %292 = mul nuw nsw i32 %136, 1
  %293 = add nuw nsw i32 0, %292
  %294 = mul nuw nsw i32 %137, 128
  %295 = add nuw nsw i32 %293, %294
  %296 = udiv i32 %295, 8192
  %297 = getelementptr inbounds float, ptr %arg7, i32 %132
  store float %227, ptr %297, align 4
  %298 = mul nuw nsw i32 %134, 1
  %299 = add nuw nsw i32 0, %298
  %300 = udiv i32 %299, 256
  %301 = mul nuw nsw i32 %136, 1
  %302 = add nuw nsw i32 0, %301
  %303 = mul nuw nsw i32 %137, 128
  %304 = add nuw nsw i32 %302, %303
  %305 = udiv i32 %304, 8192
  %306 = getelementptr inbounds float, ptr %arg13, i32 %132
  store float %266, ptr %306, align 4
  %307 = mul nuw nsw i32 %134, 1
  %308 = add nuw nsw i32 0, %307
  %309 = udiv i32 %308, 256
  %310 = mul nuw nsw i32 %136, 1
  %311 = add nuw nsw i32 0, %310
  %312 = mul nuw nsw i32 %137, 128
  %313 = add nuw nsw i32 %311, %312
  %314 = udiv i32 %313, 8192
  %315 = getelementptr inbounds float, ptr %arg15, i32 %132
  store float %279, ptr %315, align 4
  %316 = mul nuw nsw i32 %134, 1
  %317 = add nuw nsw i32 0, %316
  %318 = udiv i32 %317, 256
  %319 = mul nuw nsw i32 %136, 1
  %320 = add nuw nsw i32 0, %319
  %321 = mul nuw nsw i32 %137, 128
  %322 = add nuw nsw i32 %320, %321
  %323 = udiv i32 %322, 8192
  %324 = getelementptr inbounds float, ptr %arg11, i32 %132
  store float %253, ptr %324, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %325 = mul i32 %thread_id.y, 1
  %326 = add i32 %tile_origin.1, %thread_id.x
  %327 = add i32 %tile_origin.2, %325
  %328 = add i32 %327, 0
  %329 = mul i32 %tile_origin.0, 256
  %330 = add i32 %329, %328
  %331 = udiv i32 %330, 1
  %332 = urem i32 %331, 256
  %333 = udiv i32 %330, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg6, i32 0, i32 %333, i32 %332
  %output = load float, ptr %34, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true99:                    ; preds = %reduction_write_output-after
  %334 = mul i32 %thread_id.y, 1
  %335 = add i32 %tile_origin.1, %thread_id.x
  %336 = add i32 %tile_origin.2, %334
  %337 = add i32 %336, 0
  %338 = mul i32 %tile_origin.0, 256
  %339 = add i32 %338, %337
  %340 = udiv i32 %339, 1
  %341 = urem i32 %340, 256
  %342 = udiv i32 %339, 256
  %output_element_address101 = getelementptr inbounds [64 x [256 x float]], ptr %arg8, i32 0, i32 %342, i32 %341
  %output102 = load float, ptr %53, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %343 = mul i32 %thread_id.y, 1
  %344 = add i32 %tile_origin.1, %thread_id.x
  %345 = add i32 %tile_origin.2, %343
  %346 = add i32 %345, 0
  %347 = mul i32 %tile_origin.0, 256
  %348 = add i32 %347, %346
  %349 = udiv i32 %348, 1
  %350 = urem i32 %349, 256
  %351 = udiv i32 %348, 256
  %output_element_address123 = getelementptr inbounds [64 x [256 x float]], ptr %arg10, i32 0, i32 %351, i32 %350
  %output124 = load float, ptr %72, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduction_write_output-true143:                   ; preds = %reduction_write_output-after122
  %352 = mul i32 %thread_id.y, 1
  %353 = add i32 %tile_origin.1, %thread_id.x
  %354 = add i32 %tile_origin.2, %352
  %355 = add i32 %354, 0
  %356 = mul i32 %tile_origin.0, 256
  %357 = add i32 %356, %355
  %358 = udiv i32 %357, 1
  %359 = urem i32 %358, 256
  %360 = udiv i32 %357, 256
  %output_element_address145 = getelementptr inbounds [64 x [256 x float]], ptr %arg12, i32 0, i32 %360, i32 %359
  %output146 = load float, ptr %91, align 4
  store float %output146, ptr %output_element_address145, align 4
  br label %reduction_write_output-after144

reduction_write_output-true165:                   ; preds = %reduction_write_output-after144
  %361 = mul i32 %thread_id.y, 1
  %362 = add i32 %tile_origin.1, %thread_id.x
  %363 = add i32 %tile_origin.2, %361
  %364 = add i32 %363, 0
  %365 = mul i32 %tile_origin.0, 256
  %366 = add i32 %365, %364
  %367 = udiv i32 %366, 1
  %368 = urem i32 %367, 256
  %369 = udiv i32 %366, 256
  %output_element_address167 = getelementptr inbounds [64 x [256 x float]], ptr %arg14, i32 0, i32 %369, i32 %368
  %output168 = load float, ptr %110, align 4
  store float %output168, ptr %output_element_address167, align 4
  br label %reduction_write_output-after166
}

define internal void @region_1_15__1(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_25(ptr dereferenceable(4) %Arg_0.26.typed, ptr dereferenceable(4) %Arg_1.27.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.28.typed = alloca float, align 4
  %Arg_0.26 = load float, ptr %Arg_0.26.typed, align 4
  %Arg_1.27 = load float, ptr %Arg_1.27.typed, align 4
  %add.28 = fadd float %Arg_0.26, %Arg_1.27
  store float %add.28, ptr %add.28.typed, align 4
  %load_ret_value = load float, ptr %add.28.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_35(ptr dereferenceable(4) %Arg_0.36.typed, ptr dereferenceable(4) %Arg_1.37.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.38.typed = alloca float, align 4
  %Arg_0.36 = load float, ptr %Arg_0.36.typed, align 4
  %Arg_1.37 = load float, ptr %Arg_1.37.typed, align 4
  %add.38 = fadd float %Arg_0.36, %Arg_1.37
  store float %add.38, ptr %add.38.typed, align 4
  %load_ret_value = load float, ptr %add.38.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_45(ptr dereferenceable(4) %Arg_0.46.typed, ptr dereferenceable(4) %Arg_1.47.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.48.typed = alloca float, align 4
  %Arg_0.46 = load float, ptr %Arg_0.46.typed, align 4
  %Arg_1.47 = load float, ptr %Arg_1.47.typed, align 4
  %add.48 = fadd float %Arg_0.46, %Arg_1.47
  store float %add.48, ptr %add.48.typed, align 4
  %load_ret_value = load float, ptr %add.48.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_55(ptr dereferenceable(4) %Arg_0.56.typed, ptr dereferenceable(4) %Arg_1.57.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.58.typed = alloca float, align 4
  %Arg_0.56 = load float, ptr %Arg_0.56.typed, align 4
  %Arg_1.57 = load float, ptr %Arg_1.57.typed, align 4
  %add.58 = fadd float %Arg_0.56, %Arg_1.57
  store float %add.58, ptr %add.58.typed, align 4
  %load_ret_value = load float, ptr %add.58.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_68(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(1024) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1024) %arg3, ptr noalias align 128 dereferenceable(1024) %arg4, ptr noalias align 16 dereferenceable(1024) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 16 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 16 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10, ptr noalias align 16 dereferenceable(1024) %arg11, ptr noalias align 128 dereferenceable(1024) %arg12, ptr noalias align 16 dereferenceable(1024) %arg13, ptr noalias align 128 dereferenceable(1024) %arg14, ptr noalias align 16 dereferenceable(1024) %arg15, ptr noalias align 128 dereferenceable(1024) %arg16, ptr noalias align 16 dereferenceable(1024) %arg17, ptr noalias align 128 dereferenceable(1024) %arg18, ptr noalias align 16 dereferenceable(1024) %arg19, ptr noalias align 128 dereferenceable(1024) %arg20, ptr noalias align 16 dereferenceable(1024) %arg21, ptr noalias align 128 dereferenceable(1024) %arg22, ptr noalias align 16 dereferenceable(1024) %arg23, ptr noalias align 128 dereferenceable(1024) %arg24, ptr noalias align 16 dereferenceable(1024) %arg25, ptr noalias align 128 dereferenceable(1024) %arg26, ptr noalias align 16 dereferenceable(1024) %arg27, ptr noalias align 128 dereferenceable(1024) %arg28, ptr noalias align 16 dereferenceable(1024) %arg29, ptr noalias align 128 dereferenceable(1024) %arg30, ptr noalias align 16 dereferenceable(1024) %arg31, ptr noalias align 128 dereferenceable(1024) %arg32, ptr noalias align 16 dereferenceable(1024) %arg33, ptr noalias align 128 dereferenceable(1024) %arg34, ptr noalias align 16 dereferenceable(1024) %arg35, ptr noalias align 128 dereferenceable(1024) %arg36, ptr noalias align 16 dereferenceable(1024) %arg37, ptr noalias align 128 dereferenceable(1024) %arg38, ptr noalias align 16 dereferenceable(1024) %arg39, ptr noalias align 128 dereferenceable(1024) %arg40) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 256
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 256
  br i1 %4, label %fusion_68.in_bounds-true, label %fusion_68.in_bounds-after

fusion_68.in_bounds-after:                        ; preds = %fusion_68.in_bounds-true, %entry
  ret void

fusion_68.in_bounds-true:                         ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !269
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !269
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !269
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !269
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !269
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !269
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !269
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !269
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_68.in_bounds-after
}

define void @fusion_391(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(524288) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(524288) %arg3, ptr noalias align 128 dereferenceable(524288) %arg4, ptr noalias align 16 dereferenceable(524288) %arg5, ptr noalias align 128 dereferenceable(524288) %arg6, ptr noalias align 16 dereferenceable(524288) %arg7, ptr noalias align 128 dereferenceable(524288) %arg8, ptr noalias align 16 dereferenceable(524288) %arg9, ptr noalias align 128 dereferenceable(524288) %arg10, ptr noalias align 16 dereferenceable(524288) %arg11, ptr noalias align 128 dereferenceable(524288) %arg12, ptr noalias align 16 dereferenceable(524288) %arg13, ptr noalias align 128 dereferenceable(524288) %arg14, ptr noalias align 128 dereferenceable(524288) %arg15, ptr noalias align 128 dereferenceable(524288) %arg16, ptr noalias align 128 dereferenceable(524288) %arg17, ptr noalias align 128 dereferenceable(524288) %arg18, ptr noalias align 128 dereferenceable(524288) %arg19, ptr noalias align 128 dereferenceable(524288) %arg20, ptr noalias align 128 dereferenceable(524288) %arg21) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %fusion_391.in_bounds-true, label %fusion_391.in_bounds-after

fusion_391.in_bounds-after:                       ; preds = %fusion_391.in_bounds-true, %entry
  ret void

fusion_391.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.17 = fmul float %18, %20
  %subtract.18 = fsub float %17, %multiply.17
  %21 = insertvalue { float, float, float, float, float, float, float } undef, float %subtract.18, 0
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %multiply.19 = fmul float %18, %25
  %subtract.20 = fsub float %23, %multiply.19
  %26 = insertvalue { float, float, float, float, float, float, float } %21, float %subtract.20, 1
  %27 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %multiply.21 = fmul float %18, %30
  %subtract.22 = fsub float %28, %multiply.21
  %31 = insertvalue { float, float, float, float, float, float, float } %26, float %subtract.22, 2
  %32 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %33 = load float, ptr %32, align 4, !invariant.load !269
  %34 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %multiply.23 = fmul float %18, %35
  %subtract.24 = fsub float %33, %multiply.23
  %36 = insertvalue { float, float, float, float, float, float, float } %31, float %subtract.24, 3
  %37 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %38 = load float, ptr %37, align 4, !invariant.load !269
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %40 = load float, ptr %39, align 4, !invariant.load !269
  %multiply.25 = fmul float %18, %40
  %subtract.26 = fsub float %38, %multiply.25
  %41 = insertvalue { float, float, float, float, float, float, float } %36, float %subtract.26, 4
  %42 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %43 = load float, ptr %42, align 4, !invariant.load !269
  %44 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %45 = load float, ptr %44, align 4, !invariant.load !269
  %multiply.27 = fmul float %18, %45
  %subtract.28 = fsub float %43, %multiply.27
  %46 = insertvalue { float, float, float, float, float, float, float } %41, float %subtract.28, 5
  %47 = getelementptr inbounds float, ptr %arg13, i32 %linear_index_base
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %49 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  %50 = load float, ptr %49, align 4, !invariant.load !269
  %multiply.29 = fmul float %18, %50
  %subtract.30 = fsub float %48, %multiply.29
  %51 = insertvalue { float, float, float, float, float, float, float } %46, float %subtract.30, 6
  %52 = extractvalue { float, float, float, float, float, float, float } %51, 0
  %53 = getelementptr inbounds float, ptr %arg15, i32 %linear_index_base
  store float %52, ptr %53, align 4
  %54 = extractvalue { float, float, float, float, float, float, float } %51, 1
  %55 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  store float %54, ptr %55, align 4
  %56 = extractvalue { float, float, float, float, float, float, float } %51, 2
  %57 = getelementptr inbounds float, ptr %arg17, i32 %linear_index_base
  store float %56, ptr %57, align 4
  %58 = extractvalue { float, float, float, float, float, float, float } %51, 3
  %59 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  store float %58, ptr %59, align 4
  %60 = extractvalue { float, float, float, float, float, float, float } %51, 4
  %61 = getelementptr inbounds float, ptr %arg19, i32 %linear_index_base
  store float %60, ptr %61, align 4
  %62 = extractvalue { float, float, float, float, float, float, float } %51, 5
  %63 = getelementptr inbounds float, ptr %arg20, i32 %linear_index_base
  store float %62, ptr %63, align 4
  %64 = extractvalue { float, float, float, float, float, float, float } %51, 6
  %65 = getelementptr inbounds float, ptr %arg21, i32 %linear_index_base
  store float %64, ptr %65, align 4
  %66 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %68 = load float, ptr %arg2, align 4, !invariant.load !269
  %69 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %70 = load float, ptr %69, align 4, !invariant.load !269
  %multiply.171 = fmul float %68, %70
  %subtract.182 = fsub float %67, %multiply.171
  %71 = insertvalue { float, float, float, float, float, float, float } undef, float %subtract.182, 0
  %72 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %73 = load float, ptr %72, align 4, !invariant.load !269
  %74 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %multiply.193 = fmul float %68, %75
  %subtract.204 = fsub float %73, %multiply.193
  %76 = insertvalue { float, float, float, float, float, float, float } %71, float %subtract.204, 1
  %77 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %78 = load float, ptr %77, align 4, !invariant.load !269
  %79 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %80 = load float, ptr %79, align 4, !invariant.load !269
  %multiply.215 = fmul float %68, %80
  %subtract.226 = fsub float %78, %multiply.215
  %81 = insertvalue { float, float, float, float, float, float, float } %76, float %subtract.226, 2
  %82 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %84 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %85 = load float, ptr %84, align 4, !invariant.load !269
  %multiply.237 = fmul float %68, %85
  %subtract.248 = fsub float %83, %multiply.237
  %86 = insertvalue { float, float, float, float, float, float, float } %81, float %subtract.248, 3
  %87 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %88 = load float, ptr %87, align 4, !invariant.load !269
  %89 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %multiply.259 = fmul float %68, %90
  %subtract.2610 = fsub float %88, %multiply.259
  %91 = insertvalue { float, float, float, float, float, float, float } %86, float %subtract.2610, 4
  %92 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %94 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %95 = load float, ptr %94, align 4, !invariant.load !269
  %multiply.2711 = fmul float %68, %95
  %subtract.2812 = fsub float %93, %multiply.2711
  %96 = insertvalue { float, float, float, float, float, float, float } %91, float %subtract.2812, 5
  %97 = getelementptr inbounds float, ptr %arg13, i32 %linear_index1
  %98 = load float, ptr %97, align 4, !invariant.load !269
  %99 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %multiply.2913 = fmul float %68, %100
  %subtract.3014 = fsub float %98, %multiply.2913
  %101 = insertvalue { float, float, float, float, float, float, float } %96, float %subtract.3014, 6
  %102 = extractvalue { float, float, float, float, float, float, float } %101, 0
  %103 = getelementptr inbounds float, ptr %arg15, i32 %linear_index1
  store float %102, ptr %103, align 4
  %104 = extractvalue { float, float, float, float, float, float, float } %101, 1
  %105 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  store float %104, ptr %105, align 4
  %106 = extractvalue { float, float, float, float, float, float, float } %101, 2
  %107 = getelementptr inbounds float, ptr %arg17, i32 %linear_index1
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float } %101, 3
  %109 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float } %101, 4
  %111 = getelementptr inbounds float, ptr %arg19, i32 %linear_index1
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float } %101, 5
  %113 = getelementptr inbounds float, ptr %arg20, i32 %linear_index1
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float } %101, 6
  %115 = getelementptr inbounds float, ptr %arg21, i32 %linear_index1
  store float %114, ptr %115, align 4
  %116 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %117 = load float, ptr %116, align 4, !invariant.load !269
  %118 = load float, ptr %arg2, align 4, !invariant.load !269
  %119 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %120 = load float, ptr %119, align 4, !invariant.load !269
  %multiply.1715 = fmul float %118, %120
  %subtract.1816 = fsub float %117, %multiply.1715
  %121 = insertvalue { float, float, float, float, float, float, float } undef, float %subtract.1816, 0
  %122 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %123 = load float, ptr %122, align 4, !invariant.load !269
  %124 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %125 = load float, ptr %124, align 4, !invariant.load !269
  %multiply.1917 = fmul float %118, %125
  %subtract.2018 = fsub float %123, %multiply.1917
  %126 = insertvalue { float, float, float, float, float, float, float } %121, float %subtract.2018, 1
  %127 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %128 = load float, ptr %127, align 4, !invariant.load !269
  %129 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %130 = load float, ptr %129, align 4, !invariant.load !269
  %multiply.2119 = fmul float %118, %130
  %subtract.2220 = fsub float %128, %multiply.2119
  %131 = insertvalue { float, float, float, float, float, float, float } %126, float %subtract.2220, 2
  %132 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %133 = load float, ptr %132, align 4, !invariant.load !269
  %134 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %135 = load float, ptr %134, align 4, !invariant.load !269
  %multiply.2321 = fmul float %118, %135
  %subtract.2422 = fsub float %133, %multiply.2321
  %136 = insertvalue { float, float, float, float, float, float, float } %131, float %subtract.2422, 3
  %137 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %138 = load float, ptr %137, align 4, !invariant.load !269
  %139 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %140 = load float, ptr %139, align 4, !invariant.load !269
  %multiply.2523 = fmul float %118, %140
  %subtract.2624 = fsub float %138, %multiply.2523
  %141 = insertvalue { float, float, float, float, float, float, float } %136, float %subtract.2624, 4
  %142 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %143 = load float, ptr %142, align 4, !invariant.load !269
  %144 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %145 = load float, ptr %144, align 4, !invariant.load !269
  %multiply.2725 = fmul float %118, %145
  %subtract.2826 = fsub float %143, %multiply.2725
  %146 = insertvalue { float, float, float, float, float, float, float } %141, float %subtract.2826, 5
  %147 = getelementptr inbounds float, ptr %arg13, i32 %linear_index2
  %148 = load float, ptr %147, align 4, !invariant.load !269
  %149 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  %150 = load float, ptr %149, align 4, !invariant.load !269
  %multiply.2927 = fmul float %118, %150
  %subtract.3028 = fsub float %148, %multiply.2927
  %151 = insertvalue { float, float, float, float, float, float, float } %146, float %subtract.3028, 6
  %152 = extractvalue { float, float, float, float, float, float, float } %151, 0
  %153 = getelementptr inbounds float, ptr %arg15, i32 %linear_index2
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float } %151, 1
  %155 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float } %151, 2
  %157 = getelementptr inbounds float, ptr %arg17, i32 %linear_index2
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float } %151, 3
  %159 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float } %151, 4
  %161 = getelementptr inbounds float, ptr %arg19, i32 %linear_index2
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float } %151, 5
  %163 = getelementptr inbounds float, ptr %arg20, i32 %linear_index2
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float } %151, 6
  %165 = getelementptr inbounds float, ptr %arg21, i32 %linear_index2
  store float %164, ptr %165, align 4
  %166 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %167 = load float, ptr %166, align 4, !invariant.load !269
  %168 = load float, ptr %arg2, align 4, !invariant.load !269
  %169 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %170 = load float, ptr %169, align 4, !invariant.load !269
  %multiply.1729 = fmul float %168, %170
  %subtract.1830 = fsub float %167, %multiply.1729
  %171 = insertvalue { float, float, float, float, float, float, float } undef, float %subtract.1830, 0
  %172 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %173 = load float, ptr %172, align 4, !invariant.load !269
  %174 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %175 = load float, ptr %174, align 4, !invariant.load !269
  %multiply.1931 = fmul float %168, %175
  %subtract.2032 = fsub float %173, %multiply.1931
  %176 = insertvalue { float, float, float, float, float, float, float } %171, float %subtract.2032, 1
  %177 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %178 = load float, ptr %177, align 4, !invariant.load !269
  %179 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %180 = load float, ptr %179, align 4, !invariant.load !269
  %multiply.2133 = fmul float %168, %180
  %subtract.2234 = fsub float %178, %multiply.2133
  %181 = insertvalue { float, float, float, float, float, float, float } %176, float %subtract.2234, 2
  %182 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %183 = load float, ptr %182, align 4, !invariant.load !269
  %184 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %185 = load float, ptr %184, align 4, !invariant.load !269
  %multiply.2335 = fmul float %168, %185
  %subtract.2436 = fsub float %183, %multiply.2335
  %186 = insertvalue { float, float, float, float, float, float, float } %181, float %subtract.2436, 3
  %187 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %188 = load float, ptr %187, align 4, !invariant.load !269
  %189 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %190 = load float, ptr %189, align 4, !invariant.load !269
  %multiply.2537 = fmul float %168, %190
  %subtract.2638 = fsub float %188, %multiply.2537
  %191 = insertvalue { float, float, float, float, float, float, float } %186, float %subtract.2638, 4
  %192 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %193 = load float, ptr %192, align 4, !invariant.load !269
  %194 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %195 = load float, ptr %194, align 4, !invariant.load !269
  %multiply.2739 = fmul float %168, %195
  %subtract.2840 = fsub float %193, %multiply.2739
  %196 = insertvalue { float, float, float, float, float, float, float } %191, float %subtract.2840, 5
  %197 = getelementptr inbounds float, ptr %arg13, i32 %linear_index3
  %198 = load float, ptr %197, align 4, !invariant.load !269
  %199 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  %200 = load float, ptr %199, align 4, !invariant.load !269
  %multiply.2941 = fmul float %168, %200
  %subtract.3042 = fsub float %198, %multiply.2941
  %201 = insertvalue { float, float, float, float, float, float, float } %196, float %subtract.3042, 6
  %202 = extractvalue { float, float, float, float, float, float, float } %201, 0
  %203 = getelementptr inbounds float, ptr %arg15, i32 %linear_index3
  store float %202, ptr %203, align 4
  %204 = extractvalue { float, float, float, float, float, float, float } %201, 1
  %205 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  store float %204, ptr %205, align 4
  %206 = extractvalue { float, float, float, float, float, float, float } %201, 2
  %207 = getelementptr inbounds float, ptr %arg17, i32 %linear_index3
  store float %206, ptr %207, align 4
  %208 = extractvalue { float, float, float, float, float, float, float } %201, 3
  %209 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  store float %208, ptr %209, align 4
  %210 = extractvalue { float, float, float, float, float, float, float } %201, 4
  %211 = getelementptr inbounds float, ptr %arg19, i32 %linear_index3
  store float %210, ptr %211, align 4
  %212 = extractvalue { float, float, float, float, float, float, float } %201, 5
  %213 = getelementptr inbounds float, ptr %arg20, i32 %linear_index3
  store float %212, ptr %213, align 4
  %214 = extractvalue { float, float, float, float, float, float, float } %201, 6
  %215 = getelementptr inbounds float, ptr %arg21, i32 %linear_index3
  store float %214, ptr %215, align 4
  br label %fusion_391.in_bounds-after
}

define void @fusion_734(ptr noalias align 128 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(2048) %arg3, ptr noalias align 128 dereferenceable(2048) %arg4) {
entry:
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !345
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %3, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 8
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 8
  %15 = udiv i32 %10, 8
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 8
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 64, i32 4096
  %19 = icmp eq i32 %14, 7
  %tile_bound1 = select i1 %19, i32 64, i32 64
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 2
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %30 = mul i32 %tile_loop.indvar, 2
  %31 = add i32 %30, 1
  %x_loc4 = add i32 %31, %22
  %32 = add i32 %tile_origin.1, %y_in_tile.indvar
  %33 = add i32 %tile_origin.2, %x_loc4
  %34 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %34, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !444

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !445

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %35 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %36 = load float, ptr %current_output, align 4
  store float %36, ptr %35, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %37 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %37, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %38, ptr %result_from_other_lane, align 4
  call void @region_1_4(ptr %37, ptr %result_from_other_lane, ptr %return_buffer11)
  %39 = load float, ptr %return_buffer11, align 4
  store float %39, ptr %37, align 4
  %partial_reduction_result13 = load float, ptr %37, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %40, ptr %result_from_other_lane12, align 4
  call void @region_1_4(ptr %37, ptr %result_from_other_lane12, ptr %return_buffer14)
  %41 = load float, ptr %return_buffer14, align 4
  store float %41, ptr %37, align 4
  %partial_reduction_result16 = load float, ptr %37, align 4
  %42 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %42, ptr %result_from_other_lane15, align 4
  call void @region_1_4(ptr %37, ptr %result_from_other_lane15, ptr %return_buffer17)
  %43 = load float, ptr %return_buffer17, align 4
  store float %43, ptr %37, align 4
  %partial_reduction_result19 = load float, ptr %37, align 4
  %44 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %44, ptr %result_from_other_lane18, align 4
  call void @region_1_4(ptr %37, ptr %result_from_other_lane18, ptr %return_buffer20)
  %45 = load float, ptr %return_buffer20, align 4
  store float %45, ptr %37, align 4
  %partial_reduction_result22 = load float, ptr %37, align 4
  %46 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %46, ptr %result_from_other_lane21, align 4
  call void @region_1_4(ptr %37, ptr %result_from_other_lane21, ptr %return_buffer23)
  %47 = load float, ptr %return_buffer23, align 4
  store float %47, ptr %37, align 4
  %48 = icmp ult i32 %thread_id.x, %tile_bound
  %49 = mul i32 %thread_id.y, 2
  %50 = icmp ult i32 %49, %tile_bound1
  %51 = and i1 %50, %48
  %52 = icmp eq i32 %lane_id, 0
  %53 = and i1 %51, %52
  br i1 %53, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i32 0, i32 %8, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %54 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %55 = load float, ptr %current_output25, align 4
  store float %55, ptr %54, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache81, i32 0, i32 %8, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %56 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %56, align 4
  %57 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %57, ptr %result_from_other_lane27, align 4
  call void @region_1_4(ptr %56, ptr %result_from_other_lane27, ptr %return_buffer29)
  %58 = load float, ptr %return_buffer29, align 4
  store float %58, ptr %56, align 4
  %partial_reduction_result31 = load float, ptr %56, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %59, ptr %result_from_other_lane30, align 4
  call void @region_1_4(ptr %56, ptr %result_from_other_lane30, ptr %return_buffer32)
  %60 = load float, ptr %return_buffer32, align 4
  store float %60, ptr %56, align 4
  %partial_reduction_result34 = load float, ptr %56, align 4
  %61 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %61, ptr %result_from_other_lane33, align 4
  call void @region_1_4(ptr %56, ptr %result_from_other_lane33, ptr %return_buffer35)
  %62 = load float, ptr %return_buffer35, align 4
  store float %62, ptr %56, align 4
  %partial_reduction_result37 = load float, ptr %56, align 4
  %63 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %63, ptr %result_from_other_lane36, align 4
  call void @region_1_4(ptr %56, ptr %result_from_other_lane36, ptr %return_buffer38)
  %64 = load float, ptr %return_buffer38, align 4
  store float %64, ptr %56, align 4
  %partial_reduction_result40 = load float, ptr %56, align 4
  %65 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %65, ptr %result_from_other_lane39, align 4
  call void @region_1_4(ptr %56, ptr %result_from_other_lane39, ptr %return_buffer41)
  %66 = load float, ptr %return_buffer41, align 4
  store float %66, ptr %56, align 4
  %67 = icmp ult i32 %thread_id.x, %tile_bound
  %68 = mul i32 %thread_id.y, 2
  %69 = icmp ult i32 %68, %tile_bound1
  %70 = and i1 %69, %67
  %71 = icmp eq i32 %lane_id, 0
  %72 = and i1 %70, %71
  br i1 %72, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %73 = mul i32 %thread_id.x, 2
  %74 = sub i32 %x_loc, %73
  %Arg_0.1 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %27, i32 %28
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %75 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %74
  call void @region_1_4(ptr %75, ptr %reduction_input_address, ptr %return_buffer)
  %76 = load float, ptr %return_buffer, align 4
  store float %76, ptr %75, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %77 = mul i32 %thread_id.x, 2
  %78 = sub i32 %x_loc4, %77
  %Arg_0.17 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %32, i32 %33
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %79 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %78
  call void @region_1_4(ptr %79, ptr %reduction_input_address, ptr %return_buffer9)
  %80 = load float, ptr %return_buffer9, align 4
  store float %80, ptr %79, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %81 = mul i32 %thread_id.y, 2
  %82 = add i32 %tile_origin.1, %thread_id.x
  %83 = add i32 %tile_origin.2, %81
  %84 = add i32 %83, 0
  %85 = mul i32 %tile_origin.0, 512
  %86 = add i32 %85, %84
  %87 = udiv i32 %86, 1
  %output_element_address = getelementptr inbounds [512 x float], ptr %arg3, i32 0, i32 %87
  %output = load float, ptr %37, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %88 = mul i32 %thread_id.y, 2
  %89 = add i32 %tile_origin.1, %thread_id.x
  %90 = add i32 %tile_origin.2, %88
  %91 = add i32 %90, 1
  %92 = mul i32 %tile_origin.0, 512
  %93 = add i32 %92, %91
  %94 = udiv i32 %93, 1
  %output_element_address44 = getelementptr inbounds [512 x float], ptr %arg3, i32 0, i32 %94
  %output45 = load float, ptr %56, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !269
  %95 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %95, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %96, align 4
  %97 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %98 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %99 = urem i32 %97, 1024
  %100 = udiv i32 %97, 1024
  %101 = mul i32 %98, 1
  %102 = add i32 %101, %100
  %103 = icmp ult i32 %102, 8
  br i1 %103, label %104, label %early_return49

104:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %99, 32
  %thread_id.y51 = udiv i32 %99, 32
  %lane_id52 = urem i32 %99, 32
  %105 = udiv i32 %102, 1
  %106 = urem i32 %105, 8
  %107 = udiv i32 %102, 8
  %108 = urem i32 %107, 1
  %109 = udiv i32 %102, 8
  %110 = icmp eq i32 %108, 0
  %tile_bound53 = select i1 %110, i32 64, i32 4096
  %111 = icmp eq i32 %106, 7
  %tile_bound54 = select i1 %111, i32 64, i32 64
  %tile_origin.055 = mul i32 %109, 1
  %tile_origin.156 = mul i32 %108, 4096
  %tile_origin.257 = mul i32 %106, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %104
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %112 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %112, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %113 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %114 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %115 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %115, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %116 = icmp eq i32 %tile_loop.indvar68, 0
  %117 = mul i32 %tile_loop.indvar68, 2
  %118 = add i32 %117, 0
  %x_loc70 = add i32 %118, %114
  %119 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %120 = add i32 %tile_origin.257, %x_loc70
  %121 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %121, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %122 = mul i32 %tile_loop.indvar68, 2
  %123 = add i32 %122, 1
  %x_loc75 = add i32 %123, %114
  %124 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %125 = add i32 %tile_origin.257, %x_loc75
  %126 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %126, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !446

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !447

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i32 0, i32 %100, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %127 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %128 = load float, ptr %current_output82, align 4
  store float %128, ptr %127, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i32 0, i32 %100, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %129 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %129, align 4
  %130 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %130, ptr %result_from_other_lane84, align 4
  call void @region_2_9(ptr %129, ptr %result_from_other_lane84, ptr %return_buffer86)
  %131 = load float, ptr %return_buffer86, align 4
  store float %131, ptr %129, align 4
  %partial_reduction_result88 = load float, ptr %129, align 4
  %132 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %132, ptr %result_from_other_lane87, align 4
  call void @region_2_9(ptr %129, ptr %result_from_other_lane87, ptr %return_buffer89)
  %133 = load float, ptr %return_buffer89, align 4
  store float %133, ptr %129, align 4
  %partial_reduction_result91 = load float, ptr %129, align 4
  %134 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %134, ptr %result_from_other_lane90, align 4
  call void @region_2_9(ptr %129, ptr %result_from_other_lane90, ptr %return_buffer92)
  %135 = load float, ptr %return_buffer92, align 4
  store float %135, ptr %129, align 4
  %partial_reduction_result94 = load float, ptr %129, align 4
  %136 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %136, ptr %result_from_other_lane93, align 4
  call void @region_2_9(ptr %129, ptr %result_from_other_lane93, ptr %return_buffer95)
  %137 = load float, ptr %return_buffer95, align 4
  store float %137, ptr %129, align 4
  %partial_reduction_result97 = load float, ptr %129, align 4
  %138 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %138, ptr %result_from_other_lane96, align 4
  call void @region_2_9(ptr %129, ptr %result_from_other_lane96, ptr %return_buffer98)
  %139 = load float, ptr %return_buffer98, align 4
  store float %139, ptr %129, align 4
  %140 = icmp ult i32 %thread_id.x50, %tile_bound53
  %141 = mul i32 %thread_id.y51, 2
  %142 = icmp ult i32 %141, %tile_bound54
  %143 = and i1 %142, %140
  %144 = icmp eq i32 %lane_id52, 0
  %145 = and i1 %143, %144
  br i1 %145, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i32 0, i32 %100, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %146 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %147 = load float, ptr %current_output104, align 4
  store float %147, ptr %146, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache82, i32 0, i32 %100, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %148 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %148, align 4
  %149 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %149, ptr %result_from_other_lane106, align 4
  call void @region_2_9(ptr %148, ptr %result_from_other_lane106, ptr %return_buffer108)
  %150 = load float, ptr %return_buffer108, align 4
  store float %150, ptr %148, align 4
  %partial_reduction_result110 = load float, ptr %148, align 4
  %151 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %151, ptr %result_from_other_lane109, align 4
  call void @region_2_9(ptr %148, ptr %result_from_other_lane109, ptr %return_buffer111)
  %152 = load float, ptr %return_buffer111, align 4
  store float %152, ptr %148, align 4
  %partial_reduction_result113 = load float, ptr %148, align 4
  %153 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %153, ptr %result_from_other_lane112, align 4
  call void @region_2_9(ptr %148, ptr %result_from_other_lane112, ptr %return_buffer114)
  %154 = load float, ptr %return_buffer114, align 4
  store float %154, ptr %148, align 4
  %partial_reduction_result116 = load float, ptr %148, align 4
  %155 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %155, ptr %result_from_other_lane115, align 4
  call void @region_2_9(ptr %148, ptr %result_from_other_lane115, ptr %return_buffer117)
  %156 = load float, ptr %return_buffer117, align 4
  store float %156, ptr %148, align 4
  %partial_reduction_result119 = load float, ptr %148, align 4
  %157 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %157, ptr %result_from_other_lane118, align 4
  call void @region_2_9(ptr %148, ptr %result_from_other_lane118, ptr %return_buffer120)
  %158 = load float, ptr %return_buffer120, align 4
  store float %158, ptr %148, align 4
  %159 = icmp ult i32 %thread_id.x50, %tile_bound53
  %160 = mul i32 %thread_id.y51, 2
  %161 = icmp ult i32 %160, %tile_bound54
  %162 = and i1 %161, %159
  %163 = icmp eq i32 %lane_id52, 0
  %164 = and i1 %162, %163
  br i1 %164, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %165 = mul i32 %thread_id.x50, 2
  %166 = sub i32 %x_loc70, %165
  %Arg_2.3 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %119, i32 %120
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %167 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %166
  call void @region_2_9(ptr %167, ptr %reduction_input_address46, ptr %return_buffer74)
  %168 = load float, ptr %return_buffer74, align 4
  store float %168, ptr %167, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %169 = mul i32 %thread_id.x50, 2
  %170 = sub i32 %x_loc75, %169
  %Arg_2.378 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %124, i32 %125
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !269
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %171 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %170
  call void @region_2_9(ptr %171, ptr %reduction_input_address46, ptr %return_buffer80)
  %172 = load float, ptr %return_buffer80, align 4
  store float %172, ptr %171, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %173 = mul i32 %thread_id.y51, 2
  %174 = add i32 %tile_origin.156, %thread_id.x50
  %175 = add i32 %tile_origin.257, %173
  %176 = add i32 %175, 0
  %177 = mul i32 %tile_origin.055, 512
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %output_element_address101 = getelementptr inbounds [512 x float], ptr %arg4, i32 0, i32 %179
  %output102 = load float, ptr %129, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %180 = mul i32 %thread_id.y51, 2
  %181 = add i32 %tile_origin.156, %thread_id.x50
  %182 = add i32 %tile_origin.257, %180
  %183 = add i32 %182, 1
  %184 = mul i32 %tile_origin.055, 512
  %185 = add i32 %184, %183
  %186 = udiv i32 %185, 1
  %output_element_address123 = getelementptr inbounds [512 x float], ptr %arg4, i32 0, i32 %186
  %output124 = load float, ptr %148, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122
}

define internal void @region_1_4(ptr dereferenceable(4) %Arg_0.5.typed, ptr dereferenceable(4) %Arg_1.6.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.7.typed = alloca float, align 4
  %Arg_0.5 = load float, ptr %Arg_0.5.typed, align 4
  %Arg_1.6 = load float, ptr %Arg_1.6.typed, align 4
  %add.7 = fadd float %Arg_0.5, %Arg_1.6
  store float %add.7, ptr %add.7.typed, align 4
  %load_ret_value = load float, ptr %add.7.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_9(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @add_225(ptr noalias align 128 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(524288) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 16
  %5 = udiv i32 %linear_index_base, 16
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 16
  %8 = udiv i32 %linear_index1, 16
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 16
  %11 = udiv i32 %linear_index2, 16
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 16
  %14 = udiv i32 %linear_index3, 16
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %add_225.in_bounds-true, label %add_225.in_bounds-after

add_225.in_bounds-after:                          ; preds = %add_225.in_bounds-true, %entry
  ret void

add_225.in_bounds-true:                           ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4
  %18 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %add.3 = fadd float %17, %19
  %20 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  store float %add.3, ptr %20, align 4
  %21 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %22 = load float, ptr %21, align 4
  %23 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %add.31 = fadd float %22, %24
  %25 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  store float %add.31, ptr %25, align 4
  %26 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %27 = load float, ptr %26, align 4
  %28 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %add.32 = fadd float %27, %29
  %30 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  store float %add.32, ptr %30, align 4
  %31 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %32 = load float, ptr %31, align 4
  %33 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %add.33 = fadd float %32, %34
  %35 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  store float %add.33, ptr %35, align 4
  br label %add_225.in_bounds-after
}

define void @add_220(ptr noalias align 128 dereferenceable(1835008) %arg0, ptr noalias align 128 dereferenceable(1835008) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !448
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 114688
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 56
  %5 = udiv i32 %linear_index_base, 56
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 56
  %8 = udiv i32 %linear_index1, 56
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 56
  %11 = udiv i32 %linear_index2, 56
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 56
  %14 = udiv i32 %linear_index3, 56
  %15 = icmp ult i32 %linear_index_base, 458752
  br i1 %15, label %add_220.in_bounds-true, label %add_220.in_bounds-after

add_220.in_bounds-after:                          ; preds = %add_220.in_bounds-true, %entry
  ret void

add_220.in_bounds-true:                           ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4
  %18 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %add.3 = fadd float %17, %19
  %20 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  store float %add.3, ptr %20, align 4
  %21 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %22 = load float, ptr %21, align 4
  %23 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %add.31 = fadd float %22, %24
  %25 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  store float %add.31, ptr %25, align 4
  %26 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %27 = load float, ptr %26, align 4
  %28 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %add.32 = fadd float %27, %29
  %30 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  store float %add.32, ptr %30, align 4
  %31 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %32 = load float, ptr %31, align 4
  %33 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %add.33 = fadd float %32, %34
  %35 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  store float %add.33, ptr %35, align 4
  br label %add_220.in_bounds-after
}

define void @fusion_729(ptr noalias align 128 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(131072) %arg4, ptr noalias align 128 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(2048) %arg6, ptr noalias align 128 dereferenceable(2048) %arg7, ptr noalias align 128 dereferenceable(2048) %arg8, ptr noalias align 128 dereferenceable(2048) %arg9, ptr noalias align 128 dereferenceable(2048) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !361
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 8
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 8
  %18 = udiv i32 %13, 8
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 8
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 7
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !449

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !450

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7__3(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7__3(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7__3(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7__3(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7__3(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache83, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7__3(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7__3(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7__3(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7__3(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7__3(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7__3(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !269
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7__3(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 512
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [512 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 512
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [512 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !269
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 8
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 8
  %110 = udiv i32 %105, 8
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 8
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 7
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !451

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !452

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache84, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12__2(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !269
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12__2(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 512
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [512 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 512
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [512 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !269
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 8
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 8
  %202 = udiv i32 %197, 8
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 8
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 7
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !453

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !454

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache85, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [512 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17__2(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [512 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !269
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17__2(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 512
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [512 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 512
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [512 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !269
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 8
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 8
  %294 = udiv i32 %289, 8
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 8
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 7
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !455

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !456

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache86, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [512 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22__2(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [512 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !269
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22__2(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 512
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [512 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 512
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [512 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !269
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 8
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 8
  %386 = udiv i32 %381, 8
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 8
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 7
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !457

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !458

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache87, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [512 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27__2(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [512 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !269
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27__2(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 512
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [512 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 512
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [512 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7__3(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12__2(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17__2(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22__2(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27__2(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_362(ptr noalias align 16 dereferenceable(2048) %arg0, ptr noalias align 128 dereferenceable(2048) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(2048) %arg3, ptr noalias align 128 dereferenceable(2048) %arg4, ptr noalias align 16 dereferenceable(2048) %arg5, ptr noalias align 128 dereferenceable(2048) %arg6, ptr noalias align 16 dereferenceable(2048) %arg7, ptr noalias align 128 dereferenceable(2048) %arg8, ptr noalias align 16 dereferenceable(2048) %arg9, ptr noalias align 128 dereferenceable(2048) %arg10, ptr noalias align 16 dereferenceable(2048) %arg11, ptr noalias align 128 dereferenceable(2048) %arg12, ptr noalias align 16 dereferenceable(2048) %arg13, ptr noalias align 128 dereferenceable(2048) %arg14) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !265
  %2 = mul nuw nsw i32 %0, 512
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 512
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 512
  br i1 %4, label %fusion_362.in_bounds-true, label %fusion_362.in_bounds-after

fusion_362.in_bounds-after:                       ; preds = %fusion_362.in_bounds-true, %entry
  ret void

fusion_362.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.17 = fmul float %7, %9
  %subtract.18 = fsub float %6, %multiply.17
  %10 = insertvalue { float, float, float, float, float, float, float } undef, float %subtract.18, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.19 = fmul float %7, %14
  %subtract.20 = fsub float %12, %multiply.19
  %15 = insertvalue { float, float, float, float, float, float, float } %10, float %subtract.20, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.21 = fmul float %7, %19
  %subtract.22 = fsub float %17, %multiply.21
  %20 = insertvalue { float, float, float, float, float, float, float } %15, float %subtract.22, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.23 = fmul float %7, %24
  %subtract.24 = fsub float %22, %multiply.23
  %25 = insertvalue { float, float, float, float, float, float, float } %20, float %subtract.24, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !269
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.25 = fmul float %7, %29
  %subtract.26 = fsub float %27, %multiply.25
  %30 = insertvalue { float, float, float, float, float, float, float } %25, float %subtract.26, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.27 = fmul float %7, %34
  %subtract.28 = fsub float %32, %multiply.27
  %35 = insertvalue { float, float, float, float, float, float, float } %30, float %subtract.28, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.29 = fmul float %7, %39
  %subtract.30 = fsub float %37, %multiply.29
  %40 = insertvalue { float, float, float, float, float, float, float } %35, float %subtract.30, 6
  %41 = extractvalue { float, float, float, float, float, float, float } %40, 0
  %42 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %41, ptr %42, align 4
  %43 = extractvalue { float, float, float, float, float, float, float } %40, 1
  %44 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %43, ptr %44, align 4
  %45 = extractvalue { float, float, float, float, float, float, float } %40, 2
  %46 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %45, ptr %46, align 4
  %47 = extractvalue { float, float, float, float, float, float, float } %40, 3
  %48 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float, float, float } %40, 4
  %50 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float, float, float } %40, 5
  %52 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float, float } %40, 6
  %54 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %53, ptr %54, align 4
  br label %fusion_362.in_bounds-after
}

define void @fusion_48(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(32768) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !288
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index, 512
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_48.in_bounds-true, label %fusion_48.in_bounds-after

fusion_48.in_bounds-after:                        ; preds = %fusion_48.in_bounds-true, %entry
  ret void

fusion_48.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.15 = fmul float %9, %11
  %subtract.16 = fsub float %8, %multiply.15
  %12 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.17 = fmul float %9, %16
  %subtract.18 = fsub float %14, %multiply.17
  %17 = insertvalue { float, float, float, float, float, float } %12, float %subtract.18, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4
  %multiply.19 = fmul float %9, %21
  %subtract.20 = fsub float %19, %multiply.19
  %22 = insertvalue { float, float, float, float, float, float } %17, float %subtract.20, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4
  %multiply.21 = fmul float %9, %26
  %subtract.22 = fsub float %24, %multiply.21
  %27 = insertvalue { float, float, float, float, float, float } %22, float %subtract.22, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4
  %multiply.23 = fmul float %9, %31
  %subtract.24 = fsub float %29, %multiply.23
  %32 = insertvalue { float, float, float, float, float, float } %27, float %subtract.24, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4
  %multiply.25 = fmul float %9, %36
  %subtract.26 = fsub float %34, %multiply.25
  %37 = insertvalue { float, float, float, float, float, float } %32, float %subtract.26, 5
  %38 = extractvalue { float, float, float, float, float, float } %37, 0
  %39 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %37, 1
  %41 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %37, 2
  %43 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %37, 3
  %45 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %37, 4
  %47 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %46, ptr %47, align 4
  %48 = extractvalue { float, float, float, float, float, float } %37, 5
  %49 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %48, ptr %49, align 4
  br label %fusion_48.in_bounds-after
}

define void @fusion_45(ptr noalias align 16 dereferenceable(114688) %arg0, ptr noalias align 128 dereferenceable(114688) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(114688) %arg3, ptr noalias align 128 dereferenceable(114688) %arg4, ptr noalias align 16 dereferenceable(114688) %arg5, ptr noalias align 128 dereferenceable(114688) %arg6, ptr noalias align 16 dereferenceable(114688) %arg7, ptr noalias align 128 dereferenceable(114688) %arg8, ptr noalias align 16 dereferenceable(114688) %arg9, ptr noalias align 128 dereferenceable(114688) %arg10, ptr noalias align 16 dereferenceable(114688) %arg11, ptr noalias align 128 dereferenceable(114688) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !326
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 28672
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index, 512
  %6 = icmp ult i32 %linear_index, 28672
  br i1 %6, label %fusion_45.in_bounds-true, label %fusion_45.in_bounds-after

fusion_45.in_bounds-after:                        ; preds = %fusion_45.in_bounds-true, %entry
  ret void

fusion_45.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.15 = fmul float %9, %11
  %subtract.16 = fsub float %8, %multiply.15
  %12 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !269
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.17 = fmul float %9, %16
  %subtract.18 = fsub float %14, %multiply.17
  %17 = insertvalue { float, float, float, float, float, float } %12, float %subtract.18, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4
  %multiply.19 = fmul float %9, %21
  %subtract.20 = fsub float %19, %multiply.19
  %22 = insertvalue { float, float, float, float, float, float } %17, float %subtract.20, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4
  %multiply.21 = fmul float %9, %26
  %subtract.22 = fsub float %24, %multiply.21
  %27 = insertvalue { float, float, float, float, float, float } %22, float %subtract.22, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4
  %multiply.23 = fmul float %9, %31
  %subtract.24 = fsub float %29, %multiply.23
  %32 = insertvalue { float, float, float, float, float, float } %27, float %subtract.24, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4
  %multiply.25 = fmul float %9, %36
  %subtract.26 = fsub float %34, %multiply.25
  %37 = insertvalue { float, float, float, float, float, float } %32, float %subtract.26, 5
  %38 = extractvalue { float, float, float, float, float, float } %37, 0
  %39 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %37, 1
  %41 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %37, 2
  %43 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %37, 3
  %45 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %37, 4
  %47 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %46, ptr %47, align 4
  %48 = extractvalue { float, float, float, float, float, float } %37, 5
  %49 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %48, ptr %49, align 4
  br label %fusion_45.in_bounds-after
}

define void @fusion_49(ptr noalias align 16 dereferenceable(3031040) %arg0, ptr noalias align 128 dereferenceable(3031040) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(3031040) %arg3, ptr noalias align 128 dereferenceable(3031040) %arg4, ptr noalias align 16 dereferenceable(3031040) %arg5, ptr noalias align 128 dereferenceable(3031040) %arg6, ptr noalias align 16 dereferenceable(3031040) %arg7, ptr noalias align 128 dereferenceable(3031040) %arg8, ptr noalias align 16 dereferenceable(3031040) %arg9, ptr noalias align 128 dereferenceable(3031040) %arg10, ptr noalias align 16 dereferenceable(3031040) %arg11, ptr noalias align 128 dereferenceable(3031040) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !459
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 189440
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index_base, 512
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 512
  %8 = udiv i32 %linear_index1, 512
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 512
  %11 = udiv i32 %linear_index2, 512
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 512
  %14 = udiv i32 %linear_index3, 512
  %15 = icmp ult i32 %linear_index_base, 757760
  br i1 %15, label %fusion_49.in_bounds-true, label %fusion_49.in_bounds-after

fusion_49.in_bounds-after:                        ; preds = %fusion_49.in_bounds-true, %entry
  ret void

fusion_49.in_bounds-true:                         ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %20 = load float, ptr %19, align 4
  %multiply.15 = fmul float %18, %20
  %subtract.16 = fsub float %17, %multiply.15
  %21 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %25 = load float, ptr %24, align 4
  %multiply.17 = fmul float %18, %25
  %subtract.18 = fsub float %23, %multiply.17
  %26 = insertvalue { float, float, float, float, float, float } %21, float %subtract.18, 1
  %27 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %30 = load float, ptr %29, align 4
  %multiply.19 = fmul float %18, %30
  %subtract.20 = fsub float %28, %multiply.19
  %31 = insertvalue { float, float, float, float, float, float } %26, float %subtract.20, 2
  %32 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %33 = load float, ptr %32, align 4, !invariant.load !269
  %34 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %35 = load float, ptr %34, align 4
  %multiply.21 = fmul float %18, %35
  %subtract.22 = fsub float %33, %multiply.21
  %36 = insertvalue { float, float, float, float, float, float } %31, float %subtract.22, 3
  %37 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %38 = load float, ptr %37, align 4, !invariant.load !269
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %40 = load float, ptr %39, align 4
  %multiply.23 = fmul float %18, %40
  %subtract.24 = fsub float %38, %multiply.23
  %41 = insertvalue { float, float, float, float, float, float } %36, float %subtract.24, 4
  %42 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %43 = load float, ptr %42, align 4, !invariant.load !269
  %44 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %45 = load float, ptr %44, align 4
  %multiply.25 = fmul float %18, %45
  %subtract.26 = fsub float %43, %multiply.25
  %46 = insertvalue { float, float, float, float, float, float } %41, float %subtract.26, 5
  %47 = extractvalue { float, float, float, float, float, float } %46, 0
  %48 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float, float } %46, 1
  %50 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float, float } %46, 2
  %52 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float } %46, 3
  %54 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %53, ptr %54, align 4
  %55 = extractvalue { float, float, float, float, float, float } %46, 4
  %56 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float } %46, 5
  %58 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %57, ptr %58, align 4
  %59 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %61 = load float, ptr %arg2, align 4, !invariant.load !269
  %62 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %63 = load float, ptr %62, align 4
  %multiply.151 = fmul float %61, %63
  %subtract.162 = fsub float %60, %multiply.151
  %64 = insertvalue { float, float, float, float, float, float } undef, float %subtract.162, 0
  %65 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %66 = load float, ptr %65, align 4, !invariant.load !269
  %67 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %68 = load float, ptr %67, align 4
  %multiply.173 = fmul float %61, %68
  %subtract.184 = fsub float %66, %multiply.173
  %69 = insertvalue { float, float, float, float, float, float } %64, float %subtract.184, 1
  %70 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %71 = load float, ptr %70, align 4, !invariant.load !269
  %72 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %73 = load float, ptr %72, align 4
  %multiply.195 = fmul float %61, %73
  %subtract.206 = fsub float %71, %multiply.195
  %74 = insertvalue { float, float, float, float, float, float } %69, float %subtract.206, 2
  %75 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %77 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %78 = load float, ptr %77, align 4
  %multiply.217 = fmul float %61, %78
  %subtract.228 = fsub float %76, %multiply.217
  %79 = insertvalue { float, float, float, float, float, float } %74, float %subtract.228, 3
  %80 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %81 = load float, ptr %80, align 4, !invariant.load !269
  %82 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %83 = load float, ptr %82, align 4
  %multiply.239 = fmul float %61, %83
  %subtract.2410 = fsub float %81, %multiply.239
  %84 = insertvalue { float, float, float, float, float, float } %79, float %subtract.2410, 4
  %85 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %87 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %88 = load float, ptr %87, align 4
  %multiply.2511 = fmul float %61, %88
  %subtract.2612 = fsub float %86, %multiply.2511
  %89 = insertvalue { float, float, float, float, float, float } %84, float %subtract.2612, 5
  %90 = extractvalue { float, float, float, float, float, float } %89, 0
  %91 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  store float %90, ptr %91, align 4
  %92 = extractvalue { float, float, float, float, float, float } %89, 1
  %93 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  store float %92, ptr %93, align 4
  %94 = extractvalue { float, float, float, float, float, float } %89, 2
  %95 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  store float %94, ptr %95, align 4
  %96 = extractvalue { float, float, float, float, float, float } %89, 3
  %97 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %96, ptr %97, align 4
  %98 = extractvalue { float, float, float, float, float, float } %89, 4
  %99 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %98, ptr %99, align 4
  %100 = extractvalue { float, float, float, float, float, float } %89, 5
  %101 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %100, ptr %101, align 4
  %102 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %103 = load float, ptr %102, align 4, !invariant.load !269
  %104 = load float, ptr %arg2, align 4, !invariant.load !269
  %105 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %106 = load float, ptr %105, align 4
  %multiply.1513 = fmul float %104, %106
  %subtract.1614 = fsub float %103, %multiply.1513
  %107 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1614, 0
  %108 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %110 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %111 = load float, ptr %110, align 4
  %multiply.1715 = fmul float %104, %111
  %subtract.1816 = fsub float %109, %multiply.1715
  %112 = insertvalue { float, float, float, float, float, float } %107, float %subtract.1816, 1
  %113 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %115 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %116 = load float, ptr %115, align 4
  %multiply.1917 = fmul float %104, %116
  %subtract.2018 = fsub float %114, %multiply.1917
  %117 = insertvalue { float, float, float, float, float, float } %112, float %subtract.2018, 2
  %118 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %119 = load float, ptr %118, align 4, !invariant.load !269
  %120 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %121 = load float, ptr %120, align 4
  %multiply.2119 = fmul float %104, %121
  %subtract.2220 = fsub float %119, %multiply.2119
  %122 = insertvalue { float, float, float, float, float, float } %117, float %subtract.2220, 3
  %123 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %124 = load float, ptr %123, align 4, !invariant.load !269
  %125 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %126 = load float, ptr %125, align 4
  %multiply.2321 = fmul float %104, %126
  %subtract.2422 = fsub float %124, %multiply.2321
  %127 = insertvalue { float, float, float, float, float, float } %122, float %subtract.2422, 4
  %128 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %129 = load float, ptr %128, align 4, !invariant.load !269
  %130 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %131 = load float, ptr %130, align 4
  %multiply.2523 = fmul float %104, %131
  %subtract.2624 = fsub float %129, %multiply.2523
  %132 = insertvalue { float, float, float, float, float, float } %127, float %subtract.2624, 5
  %133 = extractvalue { float, float, float, float, float, float } %132, 0
  %134 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  store float %133, ptr %134, align 4
  %135 = extractvalue { float, float, float, float, float, float } %132, 1
  %136 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  store float %135, ptr %136, align 4
  %137 = extractvalue { float, float, float, float, float, float } %132, 2
  %138 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  store float %137, ptr %138, align 4
  %139 = extractvalue { float, float, float, float, float, float } %132, 3
  %140 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float } %132, 4
  %142 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float } %132, 5
  %144 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %143, ptr %144, align 4
  %145 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %146 = load float, ptr %145, align 4, !invariant.load !269
  %147 = load float, ptr %arg2, align 4, !invariant.load !269
  %148 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %149 = load float, ptr %148, align 4
  %multiply.1525 = fmul float %147, %149
  %subtract.1626 = fsub float %146, %multiply.1525
  %150 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1626, 0
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %152 = load float, ptr %151, align 4, !invariant.load !269
  %153 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %154 = load float, ptr %153, align 4
  %multiply.1727 = fmul float %147, %154
  %subtract.1828 = fsub float %152, %multiply.1727
  %155 = insertvalue { float, float, float, float, float, float } %150, float %subtract.1828, 1
  %156 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %157 = load float, ptr %156, align 4, !invariant.load !269
  %158 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %159 = load float, ptr %158, align 4
  %multiply.1929 = fmul float %147, %159
  %subtract.2030 = fsub float %157, %multiply.1929
  %160 = insertvalue { float, float, float, float, float, float } %155, float %subtract.2030, 2
  %161 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %162 = load float, ptr %161, align 4, !invariant.load !269
  %163 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %164 = load float, ptr %163, align 4
  %multiply.2131 = fmul float %147, %164
  %subtract.2232 = fsub float %162, %multiply.2131
  %165 = insertvalue { float, float, float, float, float, float } %160, float %subtract.2232, 3
  %166 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %167 = load float, ptr %166, align 4, !invariant.load !269
  %168 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %169 = load float, ptr %168, align 4
  %multiply.2333 = fmul float %147, %169
  %subtract.2434 = fsub float %167, %multiply.2333
  %170 = insertvalue { float, float, float, float, float, float } %165, float %subtract.2434, 4
  %171 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %172 = load float, ptr %171, align 4, !invariant.load !269
  %173 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %174 = load float, ptr %173, align 4
  %multiply.2535 = fmul float %147, %174
  %subtract.2636 = fsub float %172, %multiply.2535
  %175 = insertvalue { float, float, float, float, float, float } %170, float %subtract.2636, 5
  %176 = extractvalue { float, float, float, float, float, float } %175, 0
  %177 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float } %175, 1
  %179 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float } %175, 2
  %181 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float } %175, 3
  %183 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float } %175, 4
  %185 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float } %175, 5
  %187 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %186, ptr %187, align 4
  br label %fusion_49.in_bounds-after
}

define void @slice_662(ptr noalias align 128 dereferenceable(14417920) %arg0, ptr noalias align 128 dereferenceable(4194304) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !317
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 262144
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index_base, 128
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 128
  %8 = udiv i32 %linear_index1, 128
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 128
  %11 = udiv i32 %linear_index2, 128
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 128
  %14 = udiv i32 %linear_index3, 128
  %15 = icmp ult i32 %linear_index_base, 1048576
  br i1 %15, label %slice_662.in_bounds-true, label %slice_662.in_bounds-after

slice_662.in_bounds-after:                        ; preds = %slice_662.in_bounds-true, %entry
  ret void

slice_662.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 0
  %23 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 0
  %28 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 0
  %33 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_662.in_bounds-after
}

define void @slice_665(ptr noalias align 128 dereferenceable(14417920) %arg0, ptr noalias align 128 dereferenceable(8388608) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !427
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 524288
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 2097152
  br i1 %15, label %slice_665.in_bounds-true, label %slice_665.in_bounds-after

slice_665.in_bounds-after:                        ; preds = %slice_665.in_bounds-true, %entry
  ret void

slice_665.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 128
  %18 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 128
  %23 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 128
  %28 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 128
  %33 = getelementptr inbounds [8192 x [440 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_665.in_bounds-after
}

define void @fusion_644(ptr noalias align 128 dereferenceable(16777216) %arg0, ptr noalias align 128 dereferenceable(2949120) %arg1, ptr noalias align 128 dereferenceable(196608) %arg2, ptr noalias align 128 dereferenceable(196608) %arg3, ptr noalias align 128 dereferenceable(20119552) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !460
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1257472
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 614
  %5 = udiv i32 %linear_index_base, 614
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 614
  %8 = udiv i32 %linear_index1, 614
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 614
  %11 = udiv i32 %linear_index2, 614
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 614
  %14 = udiv i32 %linear_index3, 614
  %15 = icmp ult i32 %linear_index_base, 5029888
  br i1 %15, label %fusion_644.in_bounds-true, label %fusion_644.in_bounds-after

fusion_644.in_bounds-after:                       ; preds = %concatenate.8.merge28, %entry
  ret void

fusion_644.in_bounds-true:                        ; preds = %entry
  br label %concatenate.pivot.518.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 614
  %19 = mul i32 %18, 512
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 512
  %23 = udiv i32 %20, 512
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !269
  br label %concatenate.8.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.512.1
  %26 = phi i32 [ 512, %concatenate.pivot.512.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 614
  %29 = mul i32 %28, 6
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 6
  %33 = udiv i32 %30, 6
  %34 = getelementptr inbounds float, ptr %arg3, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !269
  br label %concatenate.8.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.518.2
  %36 = phi i32 [ 518, %concatenate.pivot.518.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 614
  %39 = mul i32 %38, 90
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 90
  %43 = udiv i32 %40, 90
  %44 = mul nuw nsw i32 %37, 1
  %45 = add nuw nsw i32 0, %44
  %46 = urem i32 %45, 6
  %47 = udiv i32 %45, 6
  %48 = udiv i32 %47, 15
  %49 = mul nuw nsw i32 %5, 1
  %50 = add nuw nsw i32 0, %49
  %51 = udiv i32 %50, 8192
  %52 = getelementptr inbounds float, ptr %arg1, i32 %40
  %53 = load float, ptr %52, align 4, !invariant.load !269
  br label %concatenate.8.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.608.3
  %54 = phi i32 [ 608, %concatenate.pivot.608.3 ]
  %55 = sub nsw i32 %4, %54
  %56 = udiv i32 %linear_index_base, 614
  %57 = mul i32 %56, 6
  %58 = add i32 %57, %55
  %59 = udiv i32 %58, 1
  %60 = urem i32 %59, 6
  %61 = udiv i32 %58, 6
  %62 = getelementptr inbounds float, ptr %arg2, i32 %58
  %63 = load float, ptr %62, align 4, !invariant.load !269
  br label %concatenate.8.merge

concatenate.pivot.518.:                           ; preds = %fusion_644.in_bounds-true
  %64 = icmp ult i32 %4, 518
  br i1 %64, label %concatenate.pivot.512., label %concatenate.pivot.608.

concatenate.pivot.512.:                           ; preds = %concatenate.pivot.518.
  %65 = icmp ult i32 %4, 512
  br i1 %65, label %concatenate.pivot.0., label %concatenate.pivot.512.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.512.
  br label %concat_index_from_operand_id0

concatenate.pivot.512.1:                          ; preds = %concatenate.pivot.512.
  br label %concat_index_from_operand_id1

concatenate.pivot.608.:                           ; preds = %concatenate.pivot.518.
  %66 = icmp ult i32 %4, 608
  br i1 %66, label %concatenate.pivot.518.2, label %concatenate.pivot.608.3

concatenate.pivot.518.2:                          ; preds = %concatenate.pivot.608.
  br label %concat_index_from_operand_id2

concatenate.pivot.608.3:                          ; preds = %concatenate.pivot.608.
  br label %concat_index_from_operand_id3

concatenate.8.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %67 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %53, %concat_index_from_operand_id2 ], [ %63, %concat_index_from_operand_id3 ]
  %68 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %67, ptr %68, align 4
  br label %concatenate.pivot.518.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %69 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %70 = sub nsw i32 %7, %69
  %71 = udiv i32 %linear_index1, 614
  %72 = mul i32 %71, 512
  %73 = add i32 %72, %70
  %74 = udiv i32 %73, 1
  %75 = urem i32 %74, 512
  %76 = udiv i32 %73, 512
  %77 = getelementptr inbounds float, ptr %arg0, i32 %73
  %78 = load float, ptr %77, align 4, !invariant.load !269
  br label %concatenate.8.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.512.12
  %79 = phi i32 [ 512, %concatenate.pivot.512.12 ]
  %80 = sub nsw i32 %7, %79
  %81 = udiv i32 %linear_index1, 614
  %82 = mul i32 %81, 6
  %83 = add i32 %82, %80
  %84 = udiv i32 %83, 1
  %85 = urem i32 %84, 6
  %86 = udiv i32 %83, 6
  %87 = getelementptr inbounds float, ptr %arg3, i32 %83
  %88 = load float, ptr %87, align 4, !invariant.load !269
  br label %concatenate.8.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.518.14
  %89 = phi i32 [ 518, %concatenate.pivot.518.14 ]
  %90 = sub nsw i32 %7, %89
  %91 = udiv i32 %linear_index1, 614
  %92 = mul i32 %91, 90
  %93 = add i32 %92, %90
  %94 = udiv i32 %93, 1
  %95 = urem i32 %94, 90
  %96 = udiv i32 %93, 90
  %97 = mul nuw nsw i32 %90, 1
  %98 = add nuw nsw i32 0, %97
  %99 = urem i32 %98, 6
  %100 = udiv i32 %98, 6
  %101 = udiv i32 %100, 15
  %102 = mul nuw nsw i32 %8, 1
  %103 = add nuw nsw i32 0, %102
  %104 = udiv i32 %103, 8192
  %105 = getelementptr inbounds float, ptr %arg1, i32 %93
  %106 = load float, ptr %105, align 4, !invariant.load !269
  br label %concatenate.8.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.608.15
  %107 = phi i32 [ 608, %concatenate.pivot.608.15 ]
  %108 = sub nsw i32 %7, %107
  %109 = udiv i32 %linear_index1, 614
  %110 = mul i32 %109, 6
  %111 = add i32 %110, %108
  %112 = udiv i32 %111, 1
  %113 = urem i32 %112, 6
  %114 = udiv i32 %111, 6
  %115 = getelementptr inbounds float, ptr %arg2, i32 %111
  %116 = load float, ptr %115, align 4, !invariant.load !269
  br label %concatenate.8.merge4

concatenate.pivot.518.9:                          ; preds = %concatenate.8.merge
  %117 = icmp ult i32 %7, 518
  br i1 %117, label %concatenate.pivot.512.10, label %concatenate.pivot.608.13

concatenate.pivot.512.10:                         ; preds = %concatenate.pivot.518.9
  %118 = icmp ult i32 %7, 512
  br i1 %118, label %concatenate.pivot.0.11, label %concatenate.pivot.512.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.512.10
  br label %concat_index_from_operand_id05

concatenate.pivot.512.12:                         ; preds = %concatenate.pivot.512.10
  br label %concat_index_from_operand_id16

concatenate.pivot.608.13:                         ; preds = %concatenate.pivot.518.9
  %119 = icmp ult i32 %7, 608
  br i1 %119, label %concatenate.pivot.518.14, label %concatenate.pivot.608.15

concatenate.pivot.518.14:                         ; preds = %concatenate.pivot.608.13
  br label %concat_index_from_operand_id27

concatenate.pivot.608.15:                         ; preds = %concatenate.pivot.608.13
  br label %concat_index_from_operand_id38

concatenate.8.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %120 = phi float [ %78, %concat_index_from_operand_id05 ], [ %88, %concat_index_from_operand_id16 ], [ %106, %concat_index_from_operand_id27 ], [ %116, %concat_index_from_operand_id38 ]
  %121 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %120, ptr %121, align 4
  br label %concatenate.pivot.518.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %122 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %123 = sub nsw i32 %10, %122
  %124 = udiv i32 %linear_index2, 614
  %125 = mul i32 %124, 512
  %126 = add i32 %125, %123
  %127 = udiv i32 %126, 1
  %128 = urem i32 %127, 512
  %129 = udiv i32 %126, 512
  %130 = getelementptr inbounds float, ptr %arg0, i32 %126
  %131 = load float, ptr %130, align 4, !invariant.load !269
  br label %concatenate.8.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.512.24
  %132 = phi i32 [ 512, %concatenate.pivot.512.24 ]
  %133 = sub nsw i32 %10, %132
  %134 = udiv i32 %linear_index2, 614
  %135 = mul i32 %134, 6
  %136 = add i32 %135, %133
  %137 = udiv i32 %136, 1
  %138 = urem i32 %137, 6
  %139 = udiv i32 %136, 6
  %140 = getelementptr inbounds float, ptr %arg3, i32 %136
  %141 = load float, ptr %140, align 4, !invariant.load !269
  br label %concatenate.8.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.518.26
  %142 = phi i32 [ 518, %concatenate.pivot.518.26 ]
  %143 = sub nsw i32 %10, %142
  %144 = udiv i32 %linear_index2, 614
  %145 = mul i32 %144, 90
  %146 = add i32 %145, %143
  %147 = udiv i32 %146, 1
  %148 = urem i32 %147, 90
  %149 = udiv i32 %146, 90
  %150 = mul nuw nsw i32 %143, 1
  %151 = add nuw nsw i32 0, %150
  %152 = urem i32 %151, 6
  %153 = udiv i32 %151, 6
  %154 = udiv i32 %153, 15
  %155 = mul nuw nsw i32 %11, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 8192
  %158 = getelementptr inbounds float, ptr %arg1, i32 %146
  %159 = load float, ptr %158, align 4, !invariant.load !269
  br label %concatenate.8.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.608.27
  %160 = phi i32 [ 608, %concatenate.pivot.608.27 ]
  %161 = sub nsw i32 %10, %160
  %162 = udiv i32 %linear_index2, 614
  %163 = mul i32 %162, 6
  %164 = add i32 %163, %161
  %165 = udiv i32 %164, 1
  %166 = urem i32 %165, 6
  %167 = udiv i32 %164, 6
  %168 = getelementptr inbounds float, ptr %arg2, i32 %164
  %169 = load float, ptr %168, align 4, !invariant.load !269
  br label %concatenate.8.merge16

concatenate.pivot.518.21:                         ; preds = %concatenate.8.merge4
  %170 = icmp ult i32 %10, 518
  br i1 %170, label %concatenate.pivot.512.22, label %concatenate.pivot.608.25

concatenate.pivot.512.22:                         ; preds = %concatenate.pivot.518.21
  %171 = icmp ult i32 %10, 512
  br i1 %171, label %concatenate.pivot.0.23, label %concatenate.pivot.512.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.512.22
  br label %concat_index_from_operand_id017

concatenate.pivot.512.24:                         ; preds = %concatenate.pivot.512.22
  br label %concat_index_from_operand_id118

concatenate.pivot.608.25:                         ; preds = %concatenate.pivot.518.21
  %172 = icmp ult i32 %10, 608
  br i1 %172, label %concatenate.pivot.518.26, label %concatenate.pivot.608.27

concatenate.pivot.518.26:                         ; preds = %concatenate.pivot.608.25
  br label %concat_index_from_operand_id219

concatenate.pivot.608.27:                         ; preds = %concatenate.pivot.608.25
  br label %concat_index_from_operand_id320

concatenate.8.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %173 = phi float [ %131, %concat_index_from_operand_id017 ], [ %141, %concat_index_from_operand_id118 ], [ %159, %concat_index_from_operand_id219 ], [ %169, %concat_index_from_operand_id320 ]
  %174 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %173, ptr %174, align 4
  br label %concatenate.pivot.518.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %175 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %176 = sub nsw i32 %13, %175
  %177 = udiv i32 %linear_index3, 614
  %178 = mul i32 %177, 512
  %179 = add i32 %178, %176
  %180 = udiv i32 %179, 1
  %181 = urem i32 %180, 512
  %182 = udiv i32 %179, 512
  %183 = getelementptr inbounds float, ptr %arg0, i32 %179
  %184 = load float, ptr %183, align 4, !invariant.load !269
  br label %concatenate.8.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.512.36
  %185 = phi i32 [ 512, %concatenate.pivot.512.36 ]
  %186 = sub nsw i32 %13, %185
  %187 = udiv i32 %linear_index3, 614
  %188 = mul i32 %187, 6
  %189 = add i32 %188, %186
  %190 = udiv i32 %189, 1
  %191 = urem i32 %190, 6
  %192 = udiv i32 %189, 6
  %193 = getelementptr inbounds float, ptr %arg3, i32 %189
  %194 = load float, ptr %193, align 4, !invariant.load !269
  br label %concatenate.8.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.518.38
  %195 = phi i32 [ 518, %concatenate.pivot.518.38 ]
  %196 = sub nsw i32 %13, %195
  %197 = udiv i32 %linear_index3, 614
  %198 = mul i32 %197, 90
  %199 = add i32 %198, %196
  %200 = udiv i32 %199, 1
  %201 = urem i32 %200, 90
  %202 = udiv i32 %199, 90
  %203 = mul nuw nsw i32 %196, 1
  %204 = add nuw nsw i32 0, %203
  %205 = urem i32 %204, 6
  %206 = udiv i32 %204, 6
  %207 = udiv i32 %206, 15
  %208 = mul nuw nsw i32 %14, 1
  %209 = add nuw nsw i32 0, %208
  %210 = udiv i32 %209, 8192
  %211 = getelementptr inbounds float, ptr %arg1, i32 %199
  %212 = load float, ptr %211, align 4, !invariant.load !269
  br label %concatenate.8.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.608.39
  %213 = phi i32 [ 608, %concatenate.pivot.608.39 ]
  %214 = sub nsw i32 %13, %213
  %215 = udiv i32 %linear_index3, 614
  %216 = mul i32 %215, 6
  %217 = add i32 %216, %214
  %218 = udiv i32 %217, 1
  %219 = urem i32 %218, 6
  %220 = udiv i32 %217, 6
  %221 = getelementptr inbounds float, ptr %arg2, i32 %217
  %222 = load float, ptr %221, align 4, !invariant.load !269
  br label %concatenate.8.merge28

concatenate.pivot.518.33:                         ; preds = %concatenate.8.merge16
  %223 = icmp ult i32 %13, 518
  br i1 %223, label %concatenate.pivot.512.34, label %concatenate.pivot.608.37

concatenate.pivot.512.34:                         ; preds = %concatenate.pivot.518.33
  %224 = icmp ult i32 %13, 512
  br i1 %224, label %concatenate.pivot.0.35, label %concatenate.pivot.512.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.512.34
  br label %concat_index_from_operand_id029

concatenate.pivot.512.36:                         ; preds = %concatenate.pivot.512.34
  br label %concat_index_from_operand_id130

concatenate.pivot.608.37:                         ; preds = %concatenate.pivot.518.33
  %225 = icmp ult i32 %13, 608
  br i1 %225, label %concatenate.pivot.518.38, label %concatenate.pivot.608.39

concatenate.pivot.518.38:                         ; preds = %concatenate.pivot.608.37
  br label %concat_index_from_operand_id231

concatenate.pivot.608.39:                         ; preds = %concatenate.pivot.608.37
  br label %concat_index_from_operand_id332

concatenate.8.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %226 = phi float [ %184, %concat_index_from_operand_id029 ], [ %194, %concat_index_from_operand_id130 ], [ %212, %concat_index_from_operand_id231 ], [ %222, %concat_index_from_operand_id332 ]
  %227 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %226, ptr %227, align 4
  br label %fusion_644.in_bounds-after
}

define void @fusion_8(ptr noalias align 16 dereferenceable(3072) %arg0, ptr noalias align 128 dereferenceable(314368) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(3072) %arg3, ptr noalias align 128 dereferenceable(3072) %arg4, ptr noalias align 128 dereferenceable(3072) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !461
  %2 = mul nuw nsw i32 %0, 768
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 768
  br i1 %6, label %fusion_8.in_bounds-true, label %fusion_8.in_bounds-after

fusion_8.in_bounds-after:                         ; preds = %fusion_8.in_bounds-true, %entry
  ret void

fusion_8.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 512
  %12 = getelementptr inbounds [128 x [614 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.7 = fmul float %9, %13
  %subtract.8 = fsub float %8, %multiply.7
  %14 = insertvalue { float, float } undef, float %subtract.8, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 0
  %18 = add i32 %4, 608
  %19 = getelementptr inbounds [128 x [614 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.10 = fmul float %9, %20
  %subtract.11 = fsub float %16, %multiply.10
  %21 = insertvalue { float, float } %14, float %subtract.11, 1
  %22 = extractvalue { float, float } %21, 0
  %23 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %22, ptr %23, align 4
  %24 = extractvalue { float, float } %21, 1
  %25 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %24, ptr %25, align 4
  br label %fusion_8.in_bounds-after
}

define void @fusion_7(ptr noalias align 16 dereferenceable(6144) %arg0, ptr noalias align 128 dereferenceable(628736) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(6144) %arg3, ptr noalias align 128 dereferenceable(6144) %arg4, ptr noalias align 128 dereferenceable(6144) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 2048
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 1536
  br i1 %6, label %fusion_7.in_bounds-true, label %fusion_7.in_bounds-after

fusion_7.in_bounds-after:                         ; preds = %fusion_7.in_bounds-true, %entry
  ret void

fusion_7.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 512
  %12 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.7 = fmul float %9, %13
  %subtract.8 = fsub float %8, %multiply.7
  %14 = insertvalue { float, float } undef, float %subtract.8, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !269
  %17 = add i32 %5, 0
  %18 = add i32 %4, 608
  %19 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !269
  %multiply.10 = fmul float %9, %20
  %subtract.11 = fsub float %16, %multiply.10
  %21 = insertvalue { float, float } %14, float %subtract.11, 1
  %22 = extractvalue { float, float } %21, 0
  %23 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %22, ptr %23, align 4
  %24 = extractvalue { float, float } %21, 1
  %25 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %24, ptr %25, align 4
  br label %fusion_7.in_bounds-after
}

define void @fusion_12(ptr noalias align 16 dereferenceable(46080) %arg0, ptr noalias align 128 dereferenceable(314368) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(46080) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !316
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 12288
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index, 90
  %6 = icmp ult i32 %linear_index, 11520
  br i1 %6, label %fusion_12.in_bounds-true, label %fusion_12.in_bounds-after

fusion_12.in_bounds-after:                        ; preds = %fusion_12.in_bounds-true, %entry
  ret void

fusion_12.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 518
  %12 = getelementptr inbounds [128 x [614 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.6 = fmul float %9, %13
  %subtract.7 = fsub float %8, %multiply.6
  %14 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %14, align 4
  br label %fusion_12.in_bounds-after
}

define void @fusion_11(ptr noalias align 16 dereferenceable(92160) %arg0, ptr noalias align 128 dereferenceable(628736) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(92160) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !462
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 23552
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index, 90
  %6 = icmp ult i32 %linear_index, 23040
  br i1 %6, label %fusion_11.in_bounds-true, label %fusion_11.in_bounds-after

fusion_11.in_bounds-after:                        ; preds = %fusion_11.in_bounds-true, %entry
  ret void

fusion_11.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = add i32 %5, 0
  %11 = add i32 %4, 518
  %12 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !269
  %multiply.6 = fmul float %9, %13
  %subtract.7 = fsub float %8, %multiply.6
  %14 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %14, align 4
  br label %fusion_11.in_bounds-after
}

define void @fusion_46(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(628736) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(524288) %arg3, ptr noalias align 128 dereferenceable(524288) %arg4, ptr noalias align 16 dereferenceable(524288) %arg5, ptr noalias align 128 dereferenceable(524288) %arg6, ptr noalias align 16 dereferenceable(524288) %arg7, ptr noalias align 128 dereferenceable(524288) %arg8, ptr noalias align 16 dereferenceable(524288) %arg9, ptr noalias align 128 dereferenceable(524288) %arg10, ptr noalias align 16 dereferenceable(524288) %arg11, ptr noalias align 128 dereferenceable(524288) %arg12, ptr noalias align 128 dereferenceable(524288) %arg13) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index_base, 512
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 512
  %8 = udiv i32 %linear_index1, 512
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 512
  %11 = udiv i32 %linear_index2, 512
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 512
  %14 = udiv i32 %linear_index3, 512
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %fusion_46.in_bounds-true, label %fusion_46.in_bounds-after

fusion_46.in_bounds-after:                        ; preds = %fusion_46.in_bounds-true, %entry
  ret void

fusion_46.in_bounds-true:                         ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = add i32 %5, 0
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %multiply.16 = fmul float %18, %22
  %subtract.17 = fsub float %17, %multiply.16
  %23 = insertvalue { float, float, float, float, float, float } undef, float %subtract.17, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %26 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %27 = load float, ptr %26, align 4
  %multiply.18 = fmul float %18, %27
  %subtract.19 = fsub float %25, %multiply.18
  %28 = insertvalue { float, float, float, float, float, float } %23, float %subtract.19, 1
  %29 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %30 = load float, ptr %29, align 4, !invariant.load !269
  %31 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %32 = load float, ptr %31, align 4
  %multiply.20 = fmul float %18, %32
  %subtract.21 = fsub float %30, %multiply.20
  %33 = insertvalue { float, float, float, float, float, float } %28, float %subtract.21, 2
  %34 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %37 = load float, ptr %36, align 4
  %multiply.22 = fmul float %18, %37
  %subtract.23 = fsub float %35, %multiply.22
  %38 = insertvalue { float, float, float, float, float, float } %33, float %subtract.23, 3
  %39 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %40 = load float, ptr %39, align 4, !invariant.load !269
  %41 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %42 = load float, ptr %41, align 4
  %multiply.24 = fmul float %18, %42
  %subtract.25 = fsub float %40, %multiply.24
  %43 = insertvalue { float, float, float, float, float, float } %38, float %subtract.25, 4
  %44 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %45 = load float, ptr %44, align 4, !invariant.load !269
  %46 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %47 = load float, ptr %46, align 4
  %multiply.26 = fmul float %18, %47
  %subtract.27 = fsub float %45, %multiply.26
  %48 = insertvalue { float, float, float, float, float, float } %43, float %subtract.27, 5
  %49 = extractvalue { float, float, float, float, float, float } %48, 0
  %50 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float, float } %48, 1
  %52 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float } %48, 2
  %54 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  store float %53, ptr %54, align 4
  %55 = extractvalue { float, float, float, float, float, float } %48, 3
  %56 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float } %48, 4
  %58 = getelementptr inbounds float, ptr %arg13, i32 %linear_index_base
  store float %57, ptr %58, align 4
  %59 = extractvalue { float, float, float, float, float, float } %48, 5
  %60 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %59, ptr %60, align 4
  %61 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %62 = load float, ptr %61, align 4, !invariant.load !269
  %63 = load float, ptr %arg2, align 4, !invariant.load !269
  %64 = add i32 %8, 0
  %65 = add i32 %7, 0
  %66 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %64, i32 %65
  %67 = load float, ptr %66, align 4, !invariant.load !269
  %multiply.161 = fmul float %63, %67
  %subtract.172 = fsub float %62, %multiply.161
  %68 = insertvalue { float, float, float, float, float, float } undef, float %subtract.172, 0
  %69 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %70 = load float, ptr %69, align 4, !invariant.load !269
  %71 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %72 = load float, ptr %71, align 4
  %multiply.183 = fmul float %63, %72
  %subtract.194 = fsub float %70, %multiply.183
  %73 = insertvalue { float, float, float, float, float, float } %68, float %subtract.194, 1
  %74 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %76 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %77 = load float, ptr %76, align 4
  %multiply.205 = fmul float %63, %77
  %subtract.216 = fsub float %75, %multiply.205
  %78 = insertvalue { float, float, float, float, float, float } %73, float %subtract.216, 2
  %79 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %80 = load float, ptr %79, align 4, !invariant.load !269
  %81 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %82 = load float, ptr %81, align 4
  %multiply.227 = fmul float %63, %82
  %subtract.238 = fsub float %80, %multiply.227
  %83 = insertvalue { float, float, float, float, float, float } %78, float %subtract.238, 3
  %84 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %85 = load float, ptr %84, align 4, !invariant.load !269
  %86 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %87 = load float, ptr %86, align 4
  %multiply.249 = fmul float %63, %87
  %subtract.2510 = fsub float %85, %multiply.249
  %88 = insertvalue { float, float, float, float, float, float } %83, float %subtract.2510, 4
  %89 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %90 = load float, ptr %89, align 4, !invariant.load !269
  %91 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %92 = load float, ptr %91, align 4
  %multiply.2611 = fmul float %63, %92
  %subtract.2712 = fsub float %90, %multiply.2611
  %93 = insertvalue { float, float, float, float, float, float } %88, float %subtract.2712, 5
  %94 = extractvalue { float, float, float, float, float, float } %93, 0
  %95 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  store float %94, ptr %95, align 4
  %96 = extractvalue { float, float, float, float, float, float } %93, 1
  %97 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  store float %96, ptr %97, align 4
  %98 = extractvalue { float, float, float, float, float, float } %93, 2
  %99 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  store float %98, ptr %99, align 4
  %100 = extractvalue { float, float, float, float, float, float } %93, 3
  %101 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %100, ptr %101, align 4
  %102 = extractvalue { float, float, float, float, float, float } %93, 4
  %103 = getelementptr inbounds float, ptr %arg13, i32 %linear_index1
  store float %102, ptr %103, align 4
  %104 = extractvalue { float, float, float, float, float, float } %93, 5
  %105 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %104, ptr %105, align 4
  %106 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %107 = load float, ptr %106, align 4, !invariant.load !269
  %108 = load float, ptr %arg2, align 4, !invariant.load !269
  %109 = add i32 %11, 0
  %110 = add i32 %10, 0
  %111 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %109, i32 %110
  %112 = load float, ptr %111, align 4, !invariant.load !269
  %multiply.1613 = fmul float %108, %112
  %subtract.1714 = fsub float %107, %multiply.1613
  %113 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1714, 0
  %114 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %115 = load float, ptr %114, align 4, !invariant.load !269
  %116 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %117 = load float, ptr %116, align 4
  %multiply.1815 = fmul float %108, %117
  %subtract.1916 = fsub float %115, %multiply.1815
  %118 = insertvalue { float, float, float, float, float, float } %113, float %subtract.1916, 1
  %119 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %120 = load float, ptr %119, align 4, !invariant.load !269
  %121 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %122 = load float, ptr %121, align 4
  %multiply.2017 = fmul float %108, %122
  %subtract.2118 = fsub float %120, %multiply.2017
  %123 = insertvalue { float, float, float, float, float, float } %118, float %subtract.2118, 2
  %124 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %125 = load float, ptr %124, align 4, !invariant.load !269
  %126 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %127 = load float, ptr %126, align 4
  %multiply.2219 = fmul float %108, %127
  %subtract.2320 = fsub float %125, %multiply.2219
  %128 = insertvalue { float, float, float, float, float, float } %123, float %subtract.2320, 3
  %129 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %130 = load float, ptr %129, align 4, !invariant.load !269
  %131 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %132 = load float, ptr %131, align 4
  %multiply.2421 = fmul float %108, %132
  %subtract.2522 = fsub float %130, %multiply.2421
  %133 = insertvalue { float, float, float, float, float, float } %128, float %subtract.2522, 4
  %134 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %135 = load float, ptr %134, align 4, !invariant.load !269
  %136 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %137 = load float, ptr %136, align 4
  %multiply.2623 = fmul float %108, %137
  %subtract.2724 = fsub float %135, %multiply.2623
  %138 = insertvalue { float, float, float, float, float, float } %133, float %subtract.2724, 5
  %139 = extractvalue { float, float, float, float, float, float } %138, 0
  %140 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float } %138, 1
  %142 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float } %138, 2
  %144 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  store float %143, ptr %144, align 4
  %145 = extractvalue { float, float, float, float, float, float } %138, 3
  %146 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %145, ptr %146, align 4
  %147 = extractvalue { float, float, float, float, float, float } %138, 4
  %148 = getelementptr inbounds float, ptr %arg13, i32 %linear_index2
  store float %147, ptr %148, align 4
  %149 = extractvalue { float, float, float, float, float, float } %138, 5
  %150 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %149, ptr %150, align 4
  %151 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %152 = load float, ptr %151, align 4, !invariant.load !269
  %153 = load float, ptr %arg2, align 4, !invariant.load !269
  %154 = add i32 %14, 0
  %155 = add i32 %13, 0
  %156 = getelementptr inbounds [256 x [614 x float]], ptr %arg1, i32 0, i32 %154, i32 %155
  %157 = load float, ptr %156, align 4, !invariant.load !269
  %multiply.1625 = fmul float %153, %157
  %subtract.1726 = fsub float %152, %multiply.1625
  %158 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1726, 0
  %159 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %160 = load float, ptr %159, align 4, !invariant.load !269
  %161 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %162 = load float, ptr %161, align 4
  %multiply.1827 = fmul float %153, %162
  %subtract.1928 = fsub float %160, %multiply.1827
  %163 = insertvalue { float, float, float, float, float, float } %158, float %subtract.1928, 1
  %164 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %165 = load float, ptr %164, align 4, !invariant.load !269
  %166 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %167 = load float, ptr %166, align 4
  %multiply.2029 = fmul float %153, %167
  %subtract.2130 = fsub float %165, %multiply.2029
  %168 = insertvalue { float, float, float, float, float, float } %163, float %subtract.2130, 2
  %169 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %170 = load float, ptr %169, align 4, !invariant.load !269
  %171 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %172 = load float, ptr %171, align 4
  %multiply.2231 = fmul float %153, %172
  %subtract.2332 = fsub float %170, %multiply.2231
  %173 = insertvalue { float, float, float, float, float, float } %168, float %subtract.2332, 3
  %174 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %175 = load float, ptr %174, align 4, !invariant.load !269
  %176 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %177 = load float, ptr %176, align 4
  %multiply.2433 = fmul float %153, %177
  %subtract.2534 = fsub float %175, %multiply.2433
  %178 = insertvalue { float, float, float, float, float, float } %173, float %subtract.2534, 4
  %179 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %180 = load float, ptr %179, align 4, !invariant.load !269
  %181 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %182 = load float, ptr %181, align 4
  %multiply.2635 = fmul float %153, %182
  %subtract.2736 = fsub float %180, %multiply.2635
  %183 = insertvalue { float, float, float, float, float, float } %178, float %subtract.2736, 5
  %184 = extractvalue { float, float, float, float, float, float } %183, 0
  %185 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float } %183, 1
  %187 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  store float %186, ptr %187, align 4
  %188 = extractvalue { float, float, float, float, float, float } %183, 2
  %189 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  store float %188, ptr %189, align 4
  %190 = extractvalue { float, float, float, float, float, float } %183, 3
  %191 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %190, ptr %191, align 4
  %192 = extractvalue { float, float, float, float, float, float } %183, 4
  %193 = getelementptr inbounds float, ptr %arg13, i32 %linear_index3
  store float %192, ptr %193, align 4
  %194 = extractvalue { float, float, float, float, float, float } %183, 5
  %195 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %194, ptr %195, align 4
  br label %fusion_46.in_bounds-after
}

define void @fusion_357(ptr noalias align 16 dereferenceable(262144) %arg0, ptr noalias align 128 dereferenceable(8650752) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(12582912) %arg4, ptr noalias align 16 dereferenceable(262144) %arg5, ptr noalias align 128 dereferenceable(15728640) %arg6, ptr noalias align 128 dereferenceable(15728640) %arg7, ptr noalias align 16 dereferenceable(262144) %arg8, ptr noalias align 16 dereferenceable(262144) %arg9, ptr noalias align 128 dereferenceable(11796480) %arg10, ptr noalias align 16 dereferenceable(262144) %arg11, ptr noalias align 128 dereferenceable(11796480) %arg12, ptr noalias align 16 dereferenceable(262144) %arg13, ptr noalias align 16 dereferenceable(262144) %arg14, ptr noalias align 128 dereferenceable(67371008) %arg15, ptr noalias align 16 dereferenceable(262144) %arg16, ptr noalias align 16 dereferenceable(262144) %arg17, ptr noalias align 16 dereferenceable(262144) %arg18, ptr noalias align 16 dereferenceable(262144) %arg19, ptr noalias align 16 dereferenceable(262144) %arg20, ptr noalias align 16 dereferenceable(262144) %arg21, ptr noalias align 128 dereferenceable(262144) %arg22, ptr noalias align 16 dereferenceable(262144) %arg23, ptr noalias align 128 dereferenceable(262144) %arg24, ptr noalias align 16 dereferenceable(262144) %arg25, ptr noalias align 128 dereferenceable(262144) %arg26, ptr noalias align 16 dereferenceable(262144) %arg27, ptr noalias align 128 dereferenceable(262144) %arg28, ptr noalias align 16 dereferenceable(262144) %arg29, ptr noalias align 128 dereferenceable(262144) %arg30, ptr noalias align 16 dereferenceable(262144) %arg31, ptr noalias align 128 dereferenceable(314368) %arg32, ptr noalias align 16 dereferenceable(262144) %arg33, ptr noalias align 128 dereferenceable(458752) %arg34, ptr noalias align 128 dereferenceable(262144) %arg35, ptr noalias align 128 dereferenceable(262144) %arg36, ptr noalias align 128 dereferenceable(262144) %arg37, ptr noalias align 128 dereferenceable(262144) %arg38, ptr noalias align 128 dereferenceable(262144) %arg39, ptr noalias align 128 dereferenceable(262144) %arg40, ptr noalias align 128 dereferenceable(262144) %arg41, ptr noalias align 128 dereferenceable(262144) %arg42, ptr noalias align 128 dereferenceable(32768) %arg43, ptr noalias align 128 dereferenceable(32768) %arg44, ptr noalias align 128 dereferenceable(32768) %arg45, ptr noalias align 128 dereferenceable(32768) %arg46, ptr noalias align 128 dereferenceable(32768) %arg47, ptr noalias align 128 dereferenceable(262144) %arg48, ptr noalias align 128 dereferenceable(262144) %arg49) {
entry:
  %return_buffer276 = alloca float, align 4
  %result_from_other_lane274 = alloca float, align 4
  %return_buffer273 = alloca float, align 4
  %result_from_other_lane271 = alloca float, align 4
  %return_buffer270 = alloca float, align 4
  %result_from_other_lane268 = alloca float, align 4
  %return_buffer262 = alloca float, align 4
  %result_from_other_lane260 = alloca float, align 4
  %return_buffer259 = alloca float, align 4
  %result_from_other_lane257 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer248 = alloca float, align 4
  %result_from_other_lane246 = alloca float, align 4
  %return_buffer245 = alloca float, align 4
  %result_from_other_lane243 = alloca float, align 4
  %return_buffer242 = alloca float, align 4
  %result_from_other_lane240 = alloca float, align 4
  %return_buffer234 = alloca float, align 4
  %result_from_other_lane232 = alloca float, align 4
  %return_buffer231 = alloca float, align 4
  %result_from_other_lane229 = alloca float, align 4
  %return_buffer228 = alloca float, align 4
  %result_from_other_lane226 = alloca float, align 4
  %return_buffer224 = alloca float, align 4
  %result_from_other_lane222 = alloca float, align 4
  %return_buffer221 = alloca float, align 4
  %result_from_other_lane219 = alloca float, align 4
  %return_buffer218 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer112 = alloca float, align 4
  %return_buffer106 = alloca float, align 4
  %return_buffer100 = alloca float, align 4
  %return_buffer94 = alloca float, align 4
  %return_buffer88 = alloca float, align 4
  %tile_loop.invar_address79 = alloca i32, align 4
  %return_buffer32 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result11 = alloca float, align 4
  %reduction_input_address10 = alloca float, align 4
  %partial_reduction_result8 = alloca float, align 4
  %reduction_input_address7 = alloca float, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after278, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_121_constant_68 = load float, ptr @54, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_121_constant_68, ptr %2, align 4
  %region_0_121_constant_683 = load float, ptr @54, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_121_constant_683, ptr %3, align 4
  %region_0_121_constant_686 = load float, ptr @54, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_121_constant_686, ptr %4, align 4
  %region_0_121_constant_689 = load float, ptr @54, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  store float %region_0_121_constant_689, ptr %5, align 4
  %region_0_121_constant_6812 = load float, ptr @54, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  store float %region_0_121_constant_6812, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !337
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !463
  %9 = urem i32 %7, 8
  %10 = udiv i32 %7, 8
  %11 = mul i32 %8, 12
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 8192
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 8
  %thread_id.y = udiv i32 %9, 8
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 1
  %17 = udiv i32 %12, 1
  %18 = urem i32 %17, 8192
  %19 = udiv i32 %12, 8192
  %20 = icmp eq i32 %18, 8191
  %tile_bound = select i1 %20, i32 1, i32 1
  %21 = icmp eq i32 %16, 0
  %tile_bound13 = select i1 %21, i32 8, i32 128
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 1
  %tile_origin.2 = mul i32 %16, 128
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = icmp eq i32 128, %tile_bound13
  br i1 %24, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit76, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !464

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result217 = load float, ptr %current_output, align 4
  %25 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result217, i32 4, i32 31)
  store float %25, ptr %result_from_other_lane, align 4
  call void @region_1_69(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer218)
  %26 = load float, ptr %return_buffer218, align 4
  store float %26, ptr %current_output, align 4
  %partial_reduction_result220 = load float, ptr %current_output, align 4
  %27 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result220, i32 2, i32 31)
  store float %27, ptr %result_from_other_lane219, align 4
  call void @region_1_69(ptr %current_output, ptr %result_from_other_lane219, ptr %return_buffer221)
  %28 = load float, ptr %return_buffer221, align 4
  store float %28, ptr %current_output, align 4
  %partial_reduction_result223 = load float, ptr %current_output, align 4
  %29 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result223, i32 1, i32 31)
  store float %29, ptr %result_from_other_lane222, align 4
  call void @region_1_69(ptr %current_output, ptr %result_from_other_lane222, ptr %return_buffer224)
  %30 = load float, ptr %return_buffer224, align 4
  store float %30, ptr %current_output, align 4
  %31 = udiv i32 %thread_id.x, 32
  %32 = and i32 %thread_id.x, 7
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %current_output225 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %partial_reduction_result227 = load float, ptr %current_output225, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result227, i32 4, i32 31)
  store float %34, ptr %result_from_other_lane226, align 4
  call void @region_2_76(ptr %current_output225, ptr %result_from_other_lane226, ptr %return_buffer228)
  %35 = load float, ptr %return_buffer228, align 4
  store float %35, ptr %current_output225, align 4
  %partial_reduction_result230 = load float, ptr %current_output225, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result230, i32 2, i32 31)
  store float %36, ptr %result_from_other_lane229, align 4
  call void @region_2_76(ptr %current_output225, ptr %result_from_other_lane229, ptr %return_buffer231)
  %37 = load float, ptr %return_buffer231, align 4
  store float %37, ptr %current_output225, align 4
  %partial_reduction_result233 = load float, ptr %current_output225, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result233, i32 1, i32 31)
  store float %38, ptr %result_from_other_lane232, align 4
  call void @region_2_76(ptr %current_output225, ptr %result_from_other_lane232, ptr %return_buffer234)
  %39 = load float, ptr %return_buffer234, align 4
  store float %39, ptr %current_output225, align 4
  %40 = udiv i32 %thread_id.x, 32
  %41 = and i32 %thread_id.x, 7
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %reduction_write_output-true235, label %reduction_write_output-after236

reduction_write_output-after236:                  ; preds = %reduction_write_output-true235, %reduction_write_output-after
  %current_output239 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %partial_reduction_result241 = load float, ptr %current_output239, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result241, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane240, align 4
  call void @region_3_83(ptr %current_output239, ptr %result_from_other_lane240, ptr %return_buffer242)
  %44 = load float, ptr %return_buffer242, align 4
  store float %44, ptr %current_output239, align 4
  %partial_reduction_result244 = load float, ptr %current_output239, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result244, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane243, align 4
  call void @region_3_83(ptr %current_output239, ptr %result_from_other_lane243, ptr %return_buffer245)
  %46 = load float, ptr %return_buffer245, align 4
  store float %46, ptr %current_output239, align 4
  %partial_reduction_result247 = load float, ptr %current_output239, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result247, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane246, align 4
  call void @region_3_83(ptr %current_output239, ptr %result_from_other_lane246, ptr %return_buffer248)
  %48 = load float, ptr %return_buffer248, align 4
  store float %48, ptr %current_output239, align 4
  %49 = udiv i32 %thread_id.x, 32
  %50 = and i32 %thread_id.x, 7
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %reduction_write_output-true249, label %reduction_write_output-after250

reduction_write_output-after250:                  ; preds = %reduction_write_output-true249, %reduction_write_output-after236
  %current_output253 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  %partial_reduction_result255 = load float, ptr %current_output253, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 4, i32 31)
  store float %52, ptr %result_from_other_lane254, align 4
  call void @region_4_90(ptr %current_output253, ptr %result_from_other_lane254, ptr %return_buffer256)
  %53 = load float, ptr %return_buffer256, align 4
  store float %53, ptr %current_output253, align 4
  %partial_reduction_result258 = load float, ptr %current_output253, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result258, i32 2, i32 31)
  store float %54, ptr %result_from_other_lane257, align 4
  call void @region_4_90(ptr %current_output253, ptr %result_from_other_lane257, ptr %return_buffer259)
  %55 = load float, ptr %return_buffer259, align 4
  store float %55, ptr %current_output253, align 4
  %partial_reduction_result261 = load float, ptr %current_output253, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result261, i32 1, i32 31)
  store float %56, ptr %result_from_other_lane260, align 4
  call void @region_4_90(ptr %current_output253, ptr %result_from_other_lane260, ptr %return_buffer262)
  %57 = load float, ptr %return_buffer262, align 4
  store float %57, ptr %current_output253, align 4
  %58 = udiv i32 %thread_id.x, 32
  %59 = and i32 %thread_id.x, 7
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %reduction_write_output-true263, label %reduction_write_output-after264

reduction_write_output-after264:                  ; preds = %reduction_write_output-true263, %reduction_write_output-after250
  %current_output267 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  %partial_reduction_result269 = load float, ptr %current_output267, align 4
  %61 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result269, i32 4, i32 31)
  store float %61, ptr %result_from_other_lane268, align 4
  call void @region_5_97(ptr %current_output267, ptr %result_from_other_lane268, ptr %return_buffer270)
  %62 = load float, ptr %return_buffer270, align 4
  store float %62, ptr %current_output267, align 4
  %partial_reduction_result272 = load float, ptr %current_output267, align 4
  %63 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result272, i32 2, i32 31)
  store float %63, ptr %result_from_other_lane271, align 4
  call void @region_5_97(ptr %current_output267, ptr %result_from_other_lane271, ptr %return_buffer273)
  %64 = load float, ptr %return_buffer273, align 4
  store float %64, ptr %current_output267, align 4
  %partial_reduction_result275 = load float, ptr %current_output267, align 4
  %65 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result275, i32 1, i32 31)
  store float %65, ptr %result_from_other_lane274, align 4
  call void @region_5_97(ptr %current_output267, ptr %result_from_other_lane274, ptr %return_buffer276)
  %66 = load float, ptr %return_buffer276, align 4
  store float %66, ptr %current_output267, align 4
  %67 = udiv i32 %thread_id.x, 32
  %68 = and i32 %thread_id.x, 7
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %reduction_write_output-true277, label %reduction_write_output-after278

reduction_write_output-after278:                  ; preds = %reduction_write_output-true277, %reduction_write_output-after264
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %70 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %71 = icmp uge i32 %tile_loop.indvar, 16
  br i1 %71, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc14 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc14, ptr %tile_loop.invar_address, align 4
  %72 = icmp eq i32 %tile_loop.indvar, 0
  %73 = mul i32 %tile_loop.indvar, 8
  %74 = add i32 %73, 0
  %x_loc = add i32 %74, %70
  %75 = add i32 %tile_origin.1, %y_in_tile.indvar
  %76 = add i32 %tile_origin.2, %x_loc
  %Arg_16.17 = getelementptr inbounds [8192 x [8 x float]], ptr %arg16, i32 0, i32 %75, i32 %76
  %Arg_16.1715 = load float, ptr %Arg_16.17, align 4, !invariant.load !269
  %77 = add i32 %75, 0
  %78 = add i32 %76, 1816
  %Arg_15.16 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %77, i32 %78
  %Arg_15.1616 = load float, ptr %Arg_15.16, align 4, !invariant.load !269
  %multiply.67 = fmul float %Arg_16.1715, %Arg_15.1616
  store float %multiply.67, ptr %reduction_input_address, align 4
  %79 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_69(ptr %79, ptr %reduction_input_address, ptr %return_buffer)
  %80 = load float, ptr %return_buffer, align 4
  store float %80, ptr %79, align 4
  %Arg_17.18 = getelementptr inbounds [8192 x [8 x float]], ptr %arg17, i32 0, i32 %75, i32 %76
  %Arg_17.1817 = load float, ptr %Arg_17.18, align 4, !invariant.load !269
  %81 = add i32 %75, 0
  %82 = add i32 %76, 1840
  %Arg_15.1618 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %81, i32 %82
  %Arg_15.1619 = load float, ptr %Arg_15.1618, align 4, !invariant.load !269
  %multiply.75 = fmul float %Arg_17.1817, %Arg_15.1619
  store float %multiply.75, ptr %reduction_input_address1, align 4
  %83 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  call void @region_2_76(ptr %83, ptr %reduction_input_address1, ptr %return_buffer20)
  %84 = load float, ptr %return_buffer20, align 4
  store float %84, ptr %83, align 4
  %Arg_18.19 = getelementptr inbounds [8192 x [8 x float]], ptr %arg18, i32 0, i32 %75, i32 %76
  %Arg_18.1921 = load float, ptr %Arg_18.19, align 4, !invariant.load !269
  %85 = add i32 %75, 0
  %86 = add i32 %76, 1832
  %Arg_15.1622 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %85, i32 %86
  %Arg_15.1623 = load float, ptr %Arg_15.1622, align 4, !invariant.load !269
  %multiply.82 = fmul float %Arg_18.1921, %Arg_15.1623
  store float %multiply.82, ptr %reduction_input_address4, align 4
  %87 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  call void @region_3_83(ptr %87, ptr %reduction_input_address4, ptr %return_buffer24)
  %88 = load float, ptr %return_buffer24, align 4
  store float %88, ptr %87, align 4
  %Arg_19.20 = getelementptr inbounds [8192 x [8 x float]], ptr %arg19, i32 0, i32 %75, i32 %76
  %Arg_19.2025 = load float, ptr %Arg_19.20, align 4, !invariant.load !269
  %89 = add i32 %75, 0
  %90 = add i32 %76, 1824
  %Arg_15.1626 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %89, i32 %90
  %Arg_15.1627 = load float, ptr %Arg_15.1626, align 4, !invariant.load !269
  %multiply.89 = fmul float %Arg_19.2025, %Arg_15.1627
  store float %multiply.89, ptr %reduction_input_address7, align 4
  %91 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  call void @region_4_90(ptr %91, ptr %reduction_input_address7, ptr %return_buffer28)
  %92 = load float, ptr %return_buffer28, align 4
  store float %92, ptr %91, align 4
  %Arg_20.21 = getelementptr inbounds [8192 x [8 x float]], ptr %arg20, i32 0, i32 %75, i32 %76
  %Arg_20.2129 = load float, ptr %Arg_20.21, align 4, !invariant.load !269
  %93 = add i32 %75, 0
  %94 = add i32 %76, 1848
  %Arg_15.1630 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %93, i32 %94
  %Arg_15.1631 = load float, ptr %Arg_15.1630, align 4, !invariant.load !269
  %multiply.96 = fmul float %Arg_20.2129, %Arg_15.1631
  store float %multiply.96, ptr %reduction_input_address10, align 4
  %95 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  call void @region_5_97(ptr %95, ptr %reduction_input_address10, ptr %return_buffer32)
  %96 = load float, ptr %return_buffer32, align 4
  store float %96, ptr %95, align 4
  %Arg_0.1 = getelementptr inbounds [8192 x [8 x float]], ptr %arg0, i32 0, i32 %75, i32 %76
  %Arg_0.133 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %Arg_2.3 = load float, ptr %arg2, align 4, !invariant.load !269
  %97 = add i32 %75, 0
  %98 = add i32 %76, 256
  %Arg_1.2 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %97, i32 %98
  %Arg_1.234 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %multiply.38 = fmul float %Arg_2.3, %Arg_1.234
  %subtract.39 = fsub float %Arg_0.133, %multiply.38
  %Arg_3.4 = getelementptr inbounds [8192 x [8 x float]], ptr %arg3, i32 0, i32 %75, i32 %76
  %Arg_3.435 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  %99 = add i32 %75, 0
  %100 = add i32 %76, 104
  %Arg_4.5 = getelementptr inbounds [8192 x [384 x float]], ptr %arg4, i32 0, i32 %99, i32 %100
  %Arg_4.536 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  %multiply.41 = fmul float %Arg_2.3, %Arg_4.536
  %subtract.42 = fsub float %Arg_3.435, %multiply.41
  %Arg_5.6 = getelementptr inbounds [8192 x [8 x float]], ptr %arg5, i32 0, i32 %75, i32 %76
  %Arg_5.637 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  %101 = add i32 %75, 0
  %102 = add i32 %76, 0
  %103 = add i32 %101, 0
  %104 = add i32 %102, 200
  %Arg_7.8 = getelementptr inbounds [8192 x [480 x float]], ptr %arg7, i32 0, i32 %103, i32 %104
  %Arg_7.838 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  %105 = add i32 %101, 0
  %106 = add i32 %102, 200
  %Arg_6.7 = getelementptr inbounds [8192 x [480 x float]], ptr %arg6, i32 0, i32 %105, i32 %106
  %Arg_6.739 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  %add.45 = fadd float %Arg_7.838, %Arg_6.739
  %multiply.47 = fmul float %Arg_2.3, %add.45
  %subtract.48 = fsub float %Arg_5.637, %multiply.47
  %Arg_8.9 = getelementptr inbounds [8192 x [8 x float]], ptr %arg8, i32 0, i32 %75, i32 %76
  %Arg_8.940 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  %107 = add i32 %75, 0
  %108 = add i32 %76, 192
  %Arg_7.841 = getelementptr inbounds [8192 x [480 x float]], ptr %arg7, i32 0, i32 %107, i32 %108
  %Arg_7.842 = load float, ptr %Arg_7.841, align 4, !invariant.load !269
  %109 = add i32 %75, 0
  %110 = add i32 %76, 192
  %Arg_6.743 = getelementptr inbounds [8192 x [480 x float]], ptr %arg6, i32 0, i32 %109, i32 %110
  %Arg_6.744 = load float, ptr %Arg_6.743, align 4, !invariant.load !269
  %add.51 = fadd float %Arg_7.842, %Arg_6.744
  %multiply.52 = fmul float %Arg_2.3, %add.51
  %subtract.53 = fsub float %Arg_8.940, %multiply.52
  %Arg_9.10 = getelementptr inbounds [8192 x [8 x float]], ptr %arg9, i32 0, i32 %75, i32 %76
  %Arg_9.1045 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  %111 = add i32 %75, 0
  %112 = add i32 %76, 96
  %Arg_10.11 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %111, i32 %112
  %Arg_10.1146 = load float, ptr %Arg_10.11, align 4, !invariant.load !269
  %multiply.55 = fmul float %Arg_2.3, %Arg_10.1146
  %subtract.56 = fsub float %Arg_9.1045, %multiply.55
  %Arg_11.12 = getelementptr inbounds [8192 x [8 x float]], ptr %arg11, i32 0, i32 %75, i32 %76
  %Arg_11.1247 = load float, ptr %Arg_11.12, align 4, !invariant.load !269
  %113 = add i32 %75, 0
  %114 = add i32 %76, 96
  %Arg_12.13 = getelementptr inbounds [8192 x [360 x float]], ptr %arg12, i32 0, i32 %113, i32 %114
  %Arg_12.1348 = load float, ptr %Arg_12.13, align 4, !invariant.load !269
  %multiply.58 = fmul float %Arg_2.3, %Arg_12.1348
  %subtract.59 = fsub float %Arg_11.1247, %multiply.58
  %Arg_13.14 = getelementptr inbounds [8192 x [8 x float]], ptr %arg13, i32 0, i32 %75, i32 %76
  %Arg_13.1449 = load float, ptr %Arg_13.14, align 4, !invariant.load !269
  %115 = add i32 %75, 0
  %116 = add i32 %76, 96
  %Arg_4.550 = getelementptr inbounds [8192 x [384 x float]], ptr %arg4, i32 0, i32 %115, i32 %116
  %Arg_4.551 = load float, ptr %Arg_4.550, align 4, !invariant.load !269
  %multiply.61 = fmul float %Arg_2.3, %Arg_4.551
  %subtract.62 = fsub float %Arg_13.1449, %multiply.61
  %Arg_14.15 = getelementptr inbounds [8192 x [8 x float]], ptr %arg14, i32 0, i32 %75, i32 %76
  %Arg_14.1552 = load float, ptr %Arg_14.15, align 4, !invariant.load !269
  %117 = add i32 %75, 0
  %118 = add i32 %76, 1856
  %Arg_15.1653 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %117, i32 %118
  %Arg_15.1654 = load float, ptr %Arg_15.1653, align 4, !invariant.load !269
  %multiply.64 = fmul float %Arg_2.3, %Arg_15.1654
  %subtract.65 = fsub float %Arg_14.1552, %multiply.64
  %119 = mul nuw nsw i32 %76, 1
  %120 = add nuw nsw i32 0, %119
  %121 = mul nuw nsw i32 %75, 8
  %122 = add nuw nsw i32 %120, %121
  %123 = urem i32 %122, 512
  %124 = udiv i32 %122, 512
  %125 = udiv i32 %124, 128
  %Arg_31.32 = getelementptr inbounds [128 x [512 x float]], ptr %arg31, i32 0, i32 %124, i32 %123
  %Arg_31.3255 = load float, ptr %Arg_31.32, align 4, !invariant.load !269
  %Arg_2.356 = load float, ptr %arg2, align 4, !invariant.load !269
  %126 = add i32 %124, 0
  %127 = add i32 %123, 0
  %Arg_32.33 = getelementptr inbounds [128 x [614 x float]], ptr %arg32, i32 0, i32 %126, i32 %127
  %Arg_32.3357 = load float, ptr %Arg_32.33, align 4, !invariant.load !269
  %multiply.104 = fmul float %Arg_2.356, %Arg_32.3357
  %subtract.105 = fsub float %Arg_31.3255, %multiply.104
  %128 = mul nuw nsw i32 %76, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %75, 8
  %131 = add nuw nsw i32 %129, %130
  %132 = urem i32 %131, 512
  %133 = udiv i32 %131, 512
  %134 = udiv i32 %133, 128
  %Arg_29.30 = getelementptr inbounds [128 x [512 x float]], ptr %arg29, i32 0, i32 %133, i32 %132
  %Arg_29.3058 = load float, ptr %Arg_29.30, align 4, !invariant.load !269
  %Arg_2.359 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_30.31 = getelementptr inbounds [128 x [512 x float]], ptr %arg30, i32 0, i32 %133, i32 %132
  %Arg_30.3160 = load float, ptr %Arg_30.31, align 4
  %multiply.106 = fmul float %Arg_2.359, %Arg_30.3160
  %subtract.107 = fsub float %Arg_29.3058, %multiply.106
  %135 = mul nuw nsw i32 %76, 1
  %136 = add nuw nsw i32 0, %135
  %137 = mul nuw nsw i32 %75, 8
  %138 = add nuw nsw i32 %136, %137
  %139 = urem i32 %138, 512
  %140 = udiv i32 %138, 512
  %141 = udiv i32 %140, 128
  %Arg_27.28 = getelementptr inbounds [128 x [512 x float]], ptr %arg27, i32 0, i32 %140, i32 %139
  %Arg_27.2861 = load float, ptr %Arg_27.28, align 4, !invariant.load !269
  %Arg_2.362 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_28.29 = getelementptr inbounds [128 x [512 x float]], ptr %arg28, i32 0, i32 %140, i32 %139
  %Arg_28.2963 = load float, ptr %Arg_28.29, align 4
  %multiply.108 = fmul float %Arg_2.362, %Arg_28.2963
  %subtract.109 = fsub float %Arg_27.2861, %multiply.108
  %142 = mul nuw nsw i32 %76, 1
  %143 = add nuw nsw i32 0, %142
  %144 = mul nuw nsw i32 %75, 8
  %145 = add nuw nsw i32 %143, %144
  %146 = urem i32 %145, 512
  %147 = udiv i32 %145, 512
  %148 = udiv i32 %147, 128
  %Arg_25.26 = getelementptr inbounds [128 x [512 x float]], ptr %arg25, i32 0, i32 %147, i32 %146
  %Arg_25.2664 = load float, ptr %Arg_25.26, align 4, !invariant.load !269
  %Arg_2.365 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_26.27 = getelementptr inbounds [128 x [512 x float]], ptr %arg26, i32 0, i32 %147, i32 %146
  %Arg_26.2766 = load float, ptr %Arg_26.27, align 4
  %multiply.110 = fmul float %Arg_2.365, %Arg_26.2766
  %subtract.111 = fsub float %Arg_25.2664, %multiply.110
  %149 = mul nuw nsw i32 %76, 1
  %150 = add nuw nsw i32 0, %149
  %151 = mul nuw nsw i32 %75, 8
  %152 = add nuw nsw i32 %150, %151
  %153 = urem i32 %152, 512
  %154 = udiv i32 %152, 512
  %155 = udiv i32 %154, 128
  %Arg_23.24 = getelementptr inbounds [128 x [512 x float]], ptr %arg23, i32 0, i32 %154, i32 %153
  %Arg_23.2467 = load float, ptr %Arg_23.24, align 4, !invariant.load !269
  %Arg_2.368 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_24.25 = getelementptr inbounds [128 x [512 x float]], ptr %arg24, i32 0, i32 %154, i32 %153
  %Arg_24.2569 = load float, ptr %Arg_24.25, align 4
  %multiply.112 = fmul float %Arg_2.368, %Arg_24.2569
  %subtract.113 = fsub float %Arg_23.2467, %multiply.112
  %156 = mul nuw nsw i32 %76, 1
  %157 = add nuw nsw i32 0, %156
  %158 = mul nuw nsw i32 %75, 8
  %159 = add nuw nsw i32 %157, %158
  %160 = urem i32 %159, 512
  %161 = udiv i32 %159, 512
  %162 = udiv i32 %161, 128
  %Arg_21.22 = getelementptr inbounds [128 x [512 x float]], ptr %arg21, i32 0, i32 %161, i32 %160
  %Arg_21.2270 = load float, ptr %Arg_21.22, align 4, !invariant.load !269
  %Arg_2.371 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_22.23 = getelementptr inbounds [128 x [512 x float]], ptr %arg22, i32 0, i32 %161, i32 %160
  %Arg_22.2372 = load float, ptr %Arg_22.23, align 4
  %multiply.114 = fmul float %Arg_2.371, %Arg_22.2372
  %subtract.115 = fsub float %Arg_21.2270, %multiply.114
  %163 = mul nuw nsw i32 %76, 1
  %164 = add nuw nsw i32 0, %163
  %165 = mul nuw nsw i32 %75, 8
  %166 = add nuw nsw i32 %164, %165
  %167 = urem i32 %166, 256
  %168 = udiv i32 %166, 256
  %169 = udiv i32 %168, 256
  %Arg_33.34 = getelementptr inbounds [256 x [256 x float]], ptr %arg33, i32 0, i32 %168, i32 %167
  %Arg_33.3473 = load float, ptr %Arg_33.34, align 4, !invariant.load !269
  %Arg_2.374 = load float, ptr %arg2, align 4, !invariant.load !269
  %170 = add i32 %168, 192
  %171 = add i32 %167, 0
  %Arg_34.35 = getelementptr inbounds [448 x [256 x float]], ptr %arg34, i32 0, i32 %170, i32 %171
  %Arg_34.3575 = load float, ptr %Arg_34.35, align 4, !invariant.load !269
  %multiply.118 = fmul float %Arg_2.374, %Arg_34.3575
  %subtract.119 = fsub float %Arg_33.3473, %multiply.118
  %172 = getelementptr inbounds [8192 x [8 x float]], ptr %arg37, i32 0, i32 %75, i32 %76
  store float %subtract.48, ptr %172, align 4
  %173 = getelementptr inbounds [8192 x [8 x float]], ptr %arg35, i32 0, i32 %75, i32 %76
  store float %subtract.39, ptr %173, align 4
  %174 = mul nuw nsw i32 %76, 1
  %175 = add nuw nsw i32 0, %174
  %176 = mul nuw nsw i32 %75, 8
  %177 = add nuw nsw i32 %175, %176
  %178 = urem i32 %177, 512
  %179 = udiv i32 %177, 512
  %180 = udiv i32 %179, 128
  %181 = getelementptr inbounds [128 x [512 x float]], ptr %arg30, i32 0, i32 %179, i32 %178
  store float %subtract.107, ptr %181, align 4
  %182 = mul nuw nsw i32 %76, 1
  %183 = add nuw nsw i32 0, %182
  %184 = mul nuw nsw i32 %75, 8
  %185 = add nuw nsw i32 %183, %184
  %186 = urem i32 %185, 256
  %187 = udiv i32 %185, 256
  %188 = udiv i32 %187, 256
  %189 = getelementptr inbounds [256 x [256 x float]], ptr %arg49, i32 0, i32 %187, i32 %186
  store float %subtract.119, ptr %189, align 4
  %190 = mul nuw nsw i32 %76, 1
  %191 = add nuw nsw i32 0, %190
  %192 = mul nuw nsw i32 %75, 8
  %193 = add nuw nsw i32 %191, %192
  %194 = urem i32 %193, 512
  %195 = udiv i32 %193, 512
  %196 = udiv i32 %195, 128
  %197 = getelementptr inbounds [128 x [512 x float]], ptr %arg24, i32 0, i32 %195, i32 %194
  store float %subtract.113, ptr %197, align 4
  %198 = getelementptr inbounds [8192 x [8 x float]], ptr %arg40, i32 0, i32 %75, i32 %76
  store float %subtract.59, ptr %198, align 4
  %199 = getelementptr inbounds [8192 x [8 x float]], ptr %arg38, i32 0, i32 %75, i32 %76
  store float %subtract.53, ptr %199, align 4
  %200 = mul nuw nsw i32 %76, 1
  %201 = add nuw nsw i32 0, %200
  %202 = mul nuw nsw i32 %75, 8
  %203 = add nuw nsw i32 %201, %202
  %204 = urem i32 %203, 512
  %205 = udiv i32 %203, 512
  %206 = udiv i32 %205, 128
  %207 = getelementptr inbounds [128 x [512 x float]], ptr %arg28, i32 0, i32 %205, i32 %204
  store float %subtract.109, ptr %207, align 4
  %208 = mul nuw nsw i32 %76, 1
  %209 = add nuw nsw i32 0, %208
  %210 = mul nuw nsw i32 %75, 8
  %211 = add nuw nsw i32 %209, %210
  %212 = urem i32 %211, 512
  %213 = udiv i32 %211, 512
  %214 = udiv i32 %213, 128
  %215 = getelementptr inbounds [128 x [512 x float]], ptr %arg48, i32 0, i32 %213, i32 %212
  store float %subtract.105, ptr %215, align 4
  %216 = getelementptr inbounds [8192 x [8 x float]], ptr %arg41, i32 0, i32 %75, i32 %76
  store float %subtract.62, ptr %216, align 4
  %217 = mul nuw nsw i32 %76, 1
  %218 = add nuw nsw i32 0, %217
  %219 = mul nuw nsw i32 %75, 8
  %220 = add nuw nsw i32 %218, %219
  %221 = urem i32 %220, 512
  %222 = udiv i32 %220, 512
  %223 = udiv i32 %222, 128
  %224 = getelementptr inbounds [128 x [512 x float]], ptr %arg22, i32 0, i32 %222, i32 %221
  store float %subtract.115, ptr %224, align 4
  %225 = getelementptr inbounds [8192 x [8 x float]], ptr %arg36, i32 0, i32 %75, i32 %76
  store float %subtract.42, ptr %225, align 4
  %226 = getelementptr inbounds [8192 x [8 x float]], ptr %arg42, i32 0, i32 %75, i32 %76
  store float %subtract.65, ptr %226, align 4
  %227 = getelementptr inbounds [8192 x [8 x float]], ptr %arg39, i32 0, i32 %75, i32 %76
  store float %subtract.56, ptr %227, align 4
  %228 = mul nuw nsw i32 %76, 1
  %229 = add nuw nsw i32 0, %228
  %230 = mul nuw nsw i32 %75, 8
  %231 = add nuw nsw i32 %229, %230
  %232 = urem i32 %231, 512
  %233 = udiv i32 %231, 512
  %234 = udiv i32 %233, 128
  %235 = getelementptr inbounds [128 x [512 x float]], ptr %arg26, i32 0, i32 %233, i32 %232
  store float %subtract.111, ptr %235, align 4
  br label %tile_loop.loop_header, !llvm.loop !465

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %236 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address79, align 4
  br label %tile_loop.loop_header77

tile_loop.loop_header77:                          ; preds = %x_in_tile-after, %is_full_tile-false
  %tile_loop.indvar80 = load i32, ptr %tile_loop.invar_address79, align 4
  %237 = icmp uge i32 %tile_loop.indvar80, 16
  br i1 %237, label %tile_loop.loop_exit76, label %tile_loop.loop_body78

tile_loop.loop_body78:                            ; preds = %tile_loop.loop_header77
  %invar.inc81 = add nuw nsw i32 %tile_loop.indvar80, 1
  store i32 %invar.inc81, ptr %tile_loop.invar_address79, align 4
  %238 = icmp eq i32 %tile_loop.indvar80, 0
  %239 = mul i32 %tile_loop.indvar80, 8
  %240 = add i32 %239, 0
  %x_loc82 = add i32 %240, %236
  %241 = add i32 %tile_origin.1, %y_in_tile.indvar
  %242 = add i32 %tile_origin.2, %x_loc82
  %243 = icmp ult i32 %x_loc82, %tile_bound13
  br i1 %243, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body78
  br label %tile_loop.loop_header77, !llvm.loop !466

tile_loop.loop_exit76:                            ; preds = %tile_loop.loop_header77
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body78
  %Arg_16.1783 = getelementptr inbounds [8192 x [8 x float]], ptr %arg16, i32 0, i32 %241, i32 %242
  %Arg_16.1784 = load float, ptr %Arg_16.1783, align 4, !invariant.load !269
  %244 = add i32 %241, 0
  %245 = add i32 %242, 1816
  %Arg_15.1685 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %244, i32 %245
  %Arg_15.1686 = load float, ptr %Arg_15.1685, align 4, !invariant.load !269
  %multiply.6787 = fmul float %Arg_16.1784, %Arg_15.1686
  store float %multiply.6787, ptr %reduction_input_address, align 4
  %246 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_69(ptr %246, ptr %reduction_input_address, ptr %return_buffer88)
  %247 = load float, ptr %return_buffer88, align 4
  store float %247, ptr %246, align 4
  %Arg_17.1889 = getelementptr inbounds [8192 x [8 x float]], ptr %arg17, i32 0, i32 %241, i32 %242
  %Arg_17.1890 = load float, ptr %Arg_17.1889, align 4, !invariant.load !269
  %248 = add i32 %241, 0
  %249 = add i32 %242, 1840
  %Arg_15.1691 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %248, i32 %249
  %Arg_15.1692 = load float, ptr %Arg_15.1691, align 4, !invariant.load !269
  %multiply.7593 = fmul float %Arg_17.1890, %Arg_15.1692
  store float %multiply.7593, ptr %reduction_input_address1, align 4
  %250 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  call void @region_2_76(ptr %250, ptr %reduction_input_address1, ptr %return_buffer94)
  %251 = load float, ptr %return_buffer94, align 4
  store float %251, ptr %250, align 4
  %Arg_18.1995 = getelementptr inbounds [8192 x [8 x float]], ptr %arg18, i32 0, i32 %241, i32 %242
  %Arg_18.1996 = load float, ptr %Arg_18.1995, align 4, !invariant.load !269
  %252 = add i32 %241, 0
  %253 = add i32 %242, 1832
  %Arg_15.1697 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %252, i32 %253
  %Arg_15.1698 = load float, ptr %Arg_15.1697, align 4, !invariant.load !269
  %multiply.8299 = fmul float %Arg_18.1996, %Arg_15.1698
  store float %multiply.8299, ptr %reduction_input_address4, align 4
  %254 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  call void @region_3_83(ptr %254, ptr %reduction_input_address4, ptr %return_buffer100)
  %255 = load float, ptr %return_buffer100, align 4
  store float %255, ptr %254, align 4
  %Arg_19.20101 = getelementptr inbounds [8192 x [8 x float]], ptr %arg19, i32 0, i32 %241, i32 %242
  %Arg_19.20102 = load float, ptr %Arg_19.20101, align 4, !invariant.load !269
  %256 = add i32 %241, 0
  %257 = add i32 %242, 1824
  %Arg_15.16103 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %256, i32 %257
  %Arg_15.16104 = load float, ptr %Arg_15.16103, align 4, !invariant.load !269
  %multiply.89105 = fmul float %Arg_19.20102, %Arg_15.16104
  store float %multiply.89105, ptr %reduction_input_address7, align 4
  %258 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  call void @region_4_90(ptr %258, ptr %reduction_input_address7, ptr %return_buffer106)
  %259 = load float, ptr %return_buffer106, align 4
  store float %259, ptr %258, align 4
  %Arg_20.21107 = getelementptr inbounds [8192 x [8 x float]], ptr %arg20, i32 0, i32 %241, i32 %242
  %Arg_20.21108 = load float, ptr %Arg_20.21107, align 4, !invariant.load !269
  %260 = add i32 %241, 0
  %261 = add i32 %242, 1848
  %Arg_15.16109 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %260, i32 %261
  %Arg_15.16110 = load float, ptr %Arg_15.16109, align 4, !invariant.load !269
  %multiply.96111 = fmul float %Arg_20.21108, %Arg_15.16110
  store float %multiply.96111, ptr %reduction_input_address10, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  call void @region_5_97(ptr %262, ptr %reduction_input_address10, ptr %return_buffer112)
  %263 = load float, ptr %return_buffer112, align 4
  store float %263, ptr %262, align 4
  %Arg_0.1113 = getelementptr inbounds [8192 x [8 x float]], ptr %arg0, i32 0, i32 %241, i32 %242
  %Arg_0.1114 = load float, ptr %Arg_0.1113, align 4, !invariant.load !269
  %Arg_2.3115 = load float, ptr %arg2, align 4, !invariant.load !269
  %264 = add i32 %241, 0
  %265 = add i32 %242, 256
  %Arg_1.2116 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %264, i32 %265
  %Arg_1.2117 = load float, ptr %Arg_1.2116, align 4, !invariant.load !269
  %multiply.38118 = fmul float %Arg_2.3115, %Arg_1.2117
  %subtract.39119 = fsub float %Arg_0.1114, %multiply.38118
  %Arg_3.4120 = getelementptr inbounds [8192 x [8 x float]], ptr %arg3, i32 0, i32 %241, i32 %242
  %Arg_3.4121 = load float, ptr %Arg_3.4120, align 4, !invariant.load !269
  %266 = add i32 %241, 0
  %267 = add i32 %242, 104
  %Arg_4.5122 = getelementptr inbounds [8192 x [384 x float]], ptr %arg4, i32 0, i32 %266, i32 %267
  %Arg_4.5123 = load float, ptr %Arg_4.5122, align 4, !invariant.load !269
  %multiply.41124 = fmul float %Arg_2.3115, %Arg_4.5123
  %subtract.42125 = fsub float %Arg_3.4121, %multiply.41124
  %Arg_5.6126 = getelementptr inbounds [8192 x [8 x float]], ptr %arg5, i32 0, i32 %241, i32 %242
  %Arg_5.6127 = load float, ptr %Arg_5.6126, align 4, !invariant.load !269
  %268 = add i32 %241, 0
  %269 = add i32 %242, 0
  %270 = add i32 %268, 0
  %271 = add i32 %269, 200
  %Arg_7.8128 = getelementptr inbounds [8192 x [480 x float]], ptr %arg7, i32 0, i32 %270, i32 %271
  %Arg_7.8129 = load float, ptr %Arg_7.8128, align 4, !invariant.load !269
  %272 = add i32 %268, 0
  %273 = add i32 %269, 200
  %Arg_6.7130 = getelementptr inbounds [8192 x [480 x float]], ptr %arg6, i32 0, i32 %272, i32 %273
  %Arg_6.7131 = load float, ptr %Arg_6.7130, align 4, !invariant.load !269
  %add.45132 = fadd float %Arg_7.8129, %Arg_6.7131
  %multiply.47133 = fmul float %Arg_2.3115, %add.45132
  %subtract.48134 = fsub float %Arg_5.6127, %multiply.47133
  %Arg_8.9135 = getelementptr inbounds [8192 x [8 x float]], ptr %arg8, i32 0, i32 %241, i32 %242
  %Arg_8.9136 = load float, ptr %Arg_8.9135, align 4, !invariant.load !269
  %274 = add i32 %241, 0
  %275 = add i32 %242, 192
  %Arg_7.8137 = getelementptr inbounds [8192 x [480 x float]], ptr %arg7, i32 0, i32 %274, i32 %275
  %Arg_7.8138 = load float, ptr %Arg_7.8137, align 4, !invariant.load !269
  %276 = add i32 %241, 0
  %277 = add i32 %242, 192
  %Arg_6.7139 = getelementptr inbounds [8192 x [480 x float]], ptr %arg6, i32 0, i32 %276, i32 %277
  %Arg_6.7140 = load float, ptr %Arg_6.7139, align 4, !invariant.load !269
  %add.51141 = fadd float %Arg_7.8138, %Arg_6.7140
  %multiply.52142 = fmul float %Arg_2.3115, %add.51141
  %subtract.53143 = fsub float %Arg_8.9136, %multiply.52142
  %Arg_9.10144 = getelementptr inbounds [8192 x [8 x float]], ptr %arg9, i32 0, i32 %241, i32 %242
  %Arg_9.10145 = load float, ptr %Arg_9.10144, align 4, !invariant.load !269
  %278 = add i32 %241, 0
  %279 = add i32 %242, 96
  %Arg_10.11146 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %278, i32 %279
  %Arg_10.11147 = load float, ptr %Arg_10.11146, align 4, !invariant.load !269
  %multiply.55148 = fmul float %Arg_2.3115, %Arg_10.11147
  %subtract.56149 = fsub float %Arg_9.10145, %multiply.55148
  %Arg_11.12150 = getelementptr inbounds [8192 x [8 x float]], ptr %arg11, i32 0, i32 %241, i32 %242
  %Arg_11.12151 = load float, ptr %Arg_11.12150, align 4, !invariant.load !269
  %280 = add i32 %241, 0
  %281 = add i32 %242, 96
  %Arg_12.13152 = getelementptr inbounds [8192 x [360 x float]], ptr %arg12, i32 0, i32 %280, i32 %281
  %Arg_12.13153 = load float, ptr %Arg_12.13152, align 4, !invariant.load !269
  %multiply.58154 = fmul float %Arg_2.3115, %Arg_12.13153
  %subtract.59155 = fsub float %Arg_11.12151, %multiply.58154
  %Arg_13.14156 = getelementptr inbounds [8192 x [8 x float]], ptr %arg13, i32 0, i32 %241, i32 %242
  %Arg_13.14157 = load float, ptr %Arg_13.14156, align 4, !invariant.load !269
  %282 = add i32 %241, 0
  %283 = add i32 %242, 96
  %Arg_4.5158 = getelementptr inbounds [8192 x [384 x float]], ptr %arg4, i32 0, i32 %282, i32 %283
  %Arg_4.5159 = load float, ptr %Arg_4.5158, align 4, !invariant.load !269
  %multiply.61160 = fmul float %Arg_2.3115, %Arg_4.5159
  %subtract.62161 = fsub float %Arg_13.14157, %multiply.61160
  %Arg_14.15162 = getelementptr inbounds [8192 x [8 x float]], ptr %arg14, i32 0, i32 %241, i32 %242
  %Arg_14.15163 = load float, ptr %Arg_14.15162, align 4, !invariant.load !269
  %284 = add i32 %241, 0
  %285 = add i32 %242, 1856
  %Arg_15.16164 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg15, i32 0, i32 %284, i32 %285
  %Arg_15.16165 = load float, ptr %Arg_15.16164, align 4, !invariant.load !269
  %multiply.64166 = fmul float %Arg_2.3115, %Arg_15.16165
  %subtract.65167 = fsub float %Arg_14.15163, %multiply.64166
  %286 = mul nuw nsw i32 %242, 1
  %287 = add nuw nsw i32 0, %286
  %288 = mul nuw nsw i32 %241, 8
  %289 = add nuw nsw i32 %287, %288
  %290 = urem i32 %289, 512
  %291 = udiv i32 %289, 512
  %292 = udiv i32 %291, 128
  %Arg_31.32168 = getelementptr inbounds [128 x [512 x float]], ptr %arg31, i32 0, i32 %291, i32 %290
  %Arg_31.32169 = load float, ptr %Arg_31.32168, align 4, !invariant.load !269
  %Arg_2.3170 = load float, ptr %arg2, align 4, !invariant.load !269
  %293 = add i32 %291, 0
  %294 = add i32 %290, 0
  %Arg_32.33171 = getelementptr inbounds [128 x [614 x float]], ptr %arg32, i32 0, i32 %293, i32 %294
  %Arg_32.33172 = load float, ptr %Arg_32.33171, align 4, !invariant.load !269
  %multiply.104173 = fmul float %Arg_2.3170, %Arg_32.33172
  %subtract.105174 = fsub float %Arg_31.32169, %multiply.104173
  %295 = mul nuw nsw i32 %242, 1
  %296 = add nuw nsw i32 0, %295
  %297 = mul nuw nsw i32 %241, 8
  %298 = add nuw nsw i32 %296, %297
  %299 = urem i32 %298, 512
  %300 = udiv i32 %298, 512
  %301 = udiv i32 %300, 128
  %Arg_29.30175 = getelementptr inbounds [128 x [512 x float]], ptr %arg29, i32 0, i32 %300, i32 %299
  %Arg_29.30176 = load float, ptr %Arg_29.30175, align 4, !invariant.load !269
  %Arg_2.3177 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_30.31178 = getelementptr inbounds [128 x [512 x float]], ptr %arg30, i32 0, i32 %300, i32 %299
  %Arg_30.31179 = load float, ptr %Arg_30.31178, align 4
  %multiply.106180 = fmul float %Arg_2.3177, %Arg_30.31179
  %subtract.107181 = fsub float %Arg_29.30176, %multiply.106180
  %302 = mul nuw nsw i32 %242, 1
  %303 = add nuw nsw i32 0, %302
  %304 = mul nuw nsw i32 %241, 8
  %305 = add nuw nsw i32 %303, %304
  %306 = urem i32 %305, 512
  %307 = udiv i32 %305, 512
  %308 = udiv i32 %307, 128
  %Arg_27.28182 = getelementptr inbounds [128 x [512 x float]], ptr %arg27, i32 0, i32 %307, i32 %306
  %Arg_27.28183 = load float, ptr %Arg_27.28182, align 4, !invariant.load !269
  %Arg_2.3184 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_28.29185 = getelementptr inbounds [128 x [512 x float]], ptr %arg28, i32 0, i32 %307, i32 %306
  %Arg_28.29186 = load float, ptr %Arg_28.29185, align 4
  %multiply.108187 = fmul float %Arg_2.3184, %Arg_28.29186
  %subtract.109188 = fsub float %Arg_27.28183, %multiply.108187
  %309 = mul nuw nsw i32 %242, 1
  %310 = add nuw nsw i32 0, %309
  %311 = mul nuw nsw i32 %241, 8
  %312 = add nuw nsw i32 %310, %311
  %313 = urem i32 %312, 512
  %314 = udiv i32 %312, 512
  %315 = udiv i32 %314, 128
  %Arg_25.26189 = getelementptr inbounds [128 x [512 x float]], ptr %arg25, i32 0, i32 %314, i32 %313
  %Arg_25.26190 = load float, ptr %Arg_25.26189, align 4, !invariant.load !269
  %Arg_2.3191 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_26.27192 = getelementptr inbounds [128 x [512 x float]], ptr %arg26, i32 0, i32 %314, i32 %313
  %Arg_26.27193 = load float, ptr %Arg_26.27192, align 4
  %multiply.110194 = fmul float %Arg_2.3191, %Arg_26.27193
  %subtract.111195 = fsub float %Arg_25.26190, %multiply.110194
  %316 = mul nuw nsw i32 %242, 1
  %317 = add nuw nsw i32 0, %316
  %318 = mul nuw nsw i32 %241, 8
  %319 = add nuw nsw i32 %317, %318
  %320 = urem i32 %319, 512
  %321 = udiv i32 %319, 512
  %322 = udiv i32 %321, 128
  %Arg_23.24196 = getelementptr inbounds [128 x [512 x float]], ptr %arg23, i32 0, i32 %321, i32 %320
  %Arg_23.24197 = load float, ptr %Arg_23.24196, align 4, !invariant.load !269
  %Arg_2.3198 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_24.25199 = getelementptr inbounds [128 x [512 x float]], ptr %arg24, i32 0, i32 %321, i32 %320
  %Arg_24.25200 = load float, ptr %Arg_24.25199, align 4
  %multiply.112201 = fmul float %Arg_2.3198, %Arg_24.25200
  %subtract.113202 = fsub float %Arg_23.24197, %multiply.112201
  %323 = mul nuw nsw i32 %242, 1
  %324 = add nuw nsw i32 0, %323
  %325 = mul nuw nsw i32 %241, 8
  %326 = add nuw nsw i32 %324, %325
  %327 = urem i32 %326, 512
  %328 = udiv i32 %326, 512
  %329 = udiv i32 %328, 128
  %Arg_21.22203 = getelementptr inbounds [128 x [512 x float]], ptr %arg21, i32 0, i32 %328, i32 %327
  %Arg_21.22204 = load float, ptr %Arg_21.22203, align 4, !invariant.load !269
  %Arg_2.3205 = load float, ptr %arg2, align 4, !invariant.load !269
  %Arg_22.23206 = getelementptr inbounds [128 x [512 x float]], ptr %arg22, i32 0, i32 %328, i32 %327
  %Arg_22.23207 = load float, ptr %Arg_22.23206, align 4
  %multiply.114208 = fmul float %Arg_2.3205, %Arg_22.23207
  %subtract.115209 = fsub float %Arg_21.22204, %multiply.114208
  %330 = mul nuw nsw i32 %242, 1
  %331 = add nuw nsw i32 0, %330
  %332 = mul nuw nsw i32 %241, 8
  %333 = add nuw nsw i32 %331, %332
  %334 = urem i32 %333, 256
  %335 = udiv i32 %333, 256
  %336 = udiv i32 %335, 256
  %Arg_33.34210 = getelementptr inbounds [256 x [256 x float]], ptr %arg33, i32 0, i32 %335, i32 %334
  %Arg_33.34211 = load float, ptr %Arg_33.34210, align 4, !invariant.load !269
  %Arg_2.3212 = load float, ptr %arg2, align 4, !invariant.load !269
  %337 = add i32 %335, 192
  %338 = add i32 %334, 0
  %Arg_34.35213 = getelementptr inbounds [448 x [256 x float]], ptr %arg34, i32 0, i32 %337, i32 %338
  %Arg_34.35214 = load float, ptr %Arg_34.35213, align 4, !invariant.load !269
  %multiply.118215 = fmul float %Arg_2.3212, %Arg_34.35214
  %subtract.119216 = fsub float %Arg_33.34211, %multiply.118215
  %339 = getelementptr inbounds [8192 x [8 x float]], ptr %arg37, i32 0, i32 %241, i32 %242
  store float %subtract.48134, ptr %339, align 4
  %340 = getelementptr inbounds [8192 x [8 x float]], ptr %arg35, i32 0, i32 %241, i32 %242
  store float %subtract.39119, ptr %340, align 4
  %341 = mul nuw nsw i32 %242, 1
  %342 = add nuw nsw i32 0, %341
  %343 = mul nuw nsw i32 %241, 8
  %344 = add nuw nsw i32 %342, %343
  %345 = urem i32 %344, 512
  %346 = udiv i32 %344, 512
  %347 = udiv i32 %346, 128
  %348 = getelementptr inbounds [128 x [512 x float]], ptr %arg30, i32 0, i32 %346, i32 %345
  store float %subtract.107181, ptr %348, align 4
  %349 = mul nuw nsw i32 %242, 1
  %350 = add nuw nsw i32 0, %349
  %351 = mul nuw nsw i32 %241, 8
  %352 = add nuw nsw i32 %350, %351
  %353 = urem i32 %352, 256
  %354 = udiv i32 %352, 256
  %355 = udiv i32 %354, 256
  %356 = getelementptr inbounds [256 x [256 x float]], ptr %arg49, i32 0, i32 %354, i32 %353
  store float %subtract.119216, ptr %356, align 4
  %357 = mul nuw nsw i32 %242, 1
  %358 = add nuw nsw i32 0, %357
  %359 = mul nuw nsw i32 %241, 8
  %360 = add nuw nsw i32 %358, %359
  %361 = urem i32 %360, 512
  %362 = udiv i32 %360, 512
  %363 = udiv i32 %362, 128
  %364 = getelementptr inbounds [128 x [512 x float]], ptr %arg24, i32 0, i32 %362, i32 %361
  store float %subtract.113202, ptr %364, align 4
  %365 = getelementptr inbounds [8192 x [8 x float]], ptr %arg40, i32 0, i32 %241, i32 %242
  store float %subtract.59155, ptr %365, align 4
  %366 = getelementptr inbounds [8192 x [8 x float]], ptr %arg38, i32 0, i32 %241, i32 %242
  store float %subtract.53143, ptr %366, align 4
  %367 = mul nuw nsw i32 %242, 1
  %368 = add nuw nsw i32 0, %367
  %369 = mul nuw nsw i32 %241, 8
  %370 = add nuw nsw i32 %368, %369
  %371 = urem i32 %370, 512
  %372 = udiv i32 %370, 512
  %373 = udiv i32 %372, 128
  %374 = getelementptr inbounds [128 x [512 x float]], ptr %arg28, i32 0, i32 %372, i32 %371
  store float %subtract.109188, ptr %374, align 4
  %375 = mul nuw nsw i32 %242, 1
  %376 = add nuw nsw i32 0, %375
  %377 = mul nuw nsw i32 %241, 8
  %378 = add nuw nsw i32 %376, %377
  %379 = urem i32 %378, 512
  %380 = udiv i32 %378, 512
  %381 = udiv i32 %380, 128
  %382 = getelementptr inbounds [128 x [512 x float]], ptr %arg48, i32 0, i32 %380, i32 %379
  store float %subtract.105174, ptr %382, align 4
  %383 = getelementptr inbounds [8192 x [8 x float]], ptr %arg41, i32 0, i32 %241, i32 %242
  store float %subtract.62161, ptr %383, align 4
  %384 = mul nuw nsw i32 %242, 1
  %385 = add nuw nsw i32 0, %384
  %386 = mul nuw nsw i32 %241, 8
  %387 = add nuw nsw i32 %385, %386
  %388 = urem i32 %387, 512
  %389 = udiv i32 %387, 512
  %390 = udiv i32 %389, 128
  %391 = getelementptr inbounds [128 x [512 x float]], ptr %arg22, i32 0, i32 %389, i32 %388
  store float %subtract.115209, ptr %391, align 4
  %392 = getelementptr inbounds [8192 x [8 x float]], ptr %arg36, i32 0, i32 %241, i32 %242
  store float %subtract.42125, ptr %392, align 4
  %393 = getelementptr inbounds [8192 x [8 x float]], ptr %arg42, i32 0, i32 %241, i32 %242
  store float %subtract.65167, ptr %393, align 4
  %394 = getelementptr inbounds [8192 x [8 x float]], ptr %arg39, i32 0, i32 %241, i32 %242
  store float %subtract.56149, ptr %394, align 4
  %395 = mul nuw nsw i32 %242, 1
  %396 = add nuw nsw i32 0, %395
  %397 = mul nuw nsw i32 %241, 8
  %398 = add nuw nsw i32 %396, %397
  %399 = urem i32 %398, 512
  %400 = udiv i32 %398, 512
  %401 = udiv i32 %400, 128
  %402 = getelementptr inbounds [128 x [512 x float]], ptr %arg26, i32 0, i32 %400, i32 %399
  store float %subtract.111195, ptr %402, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %403 = mul i32 %thread_id.x, 1
  %404 = add i32 %tile_origin.1, %thread_id.y
  %405 = add i32 %tile_origin.2, %403
  %406 = add i32 %405, 0
  %407 = udiv i32 %404, 1
  %output_element_address = getelementptr inbounds [8192 x float], ptr %arg43, i32 0, i32 %407
  %output = load float, ptr %current_output, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true235:                   ; preds = %reduction_write_output-after
  %408 = mul i32 %thread_id.x, 1
  %409 = add i32 %tile_origin.1, %thread_id.y
  %410 = add i32 %tile_origin.2, %408
  %411 = add i32 %410, 0
  %412 = udiv i32 %409, 1
  %output_element_address237 = getelementptr inbounds [8192 x float], ptr %arg44, i32 0, i32 %412
  %output238 = load float, ptr %current_output225, align 4
  store float %output238, ptr %output_element_address237, align 4
  br label %reduction_write_output-after236

reduction_write_output-true249:                   ; preds = %reduction_write_output-after236
  %413 = mul i32 %thread_id.x, 1
  %414 = add i32 %tile_origin.1, %thread_id.y
  %415 = add i32 %tile_origin.2, %413
  %416 = add i32 %415, 0
  %417 = udiv i32 %414, 1
  %output_element_address251 = getelementptr inbounds [8192 x float], ptr %arg45, i32 0, i32 %417
  %output252 = load float, ptr %current_output239, align 4
  store float %output252, ptr %output_element_address251, align 4
  br label %reduction_write_output-after250

reduction_write_output-true263:                   ; preds = %reduction_write_output-after250
  %418 = mul i32 %thread_id.x, 1
  %419 = add i32 %tile_origin.1, %thread_id.y
  %420 = add i32 %tile_origin.2, %418
  %421 = add i32 %420, 0
  %422 = udiv i32 %419, 1
  %output_element_address265 = getelementptr inbounds [8192 x float], ptr %arg46, i32 0, i32 %422
  %output266 = load float, ptr %current_output253, align 4
  store float %output266, ptr %output_element_address265, align 4
  br label %reduction_write_output-after264

reduction_write_output-true277:                   ; preds = %reduction_write_output-after264
  %423 = mul i32 %thread_id.x, 1
  %424 = add i32 %tile_origin.1, %thread_id.y
  %425 = add i32 %tile_origin.2, %423
  %426 = add i32 %425, 0
  %427 = udiv i32 %424, 1
  %output_element_address279 = getelementptr inbounds [8192 x float], ptr %arg47, i32 0, i32 %427
  %output280 = load float, ptr %current_output267, align 4
  store float %output280, ptr %output_element_address279, align 4
  br label %reduction_write_output-after278
}

define internal void @region_1_69(ptr dereferenceable(4) %Arg_0.70.typed, ptr dereferenceable(4) %Arg_1.71.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.72.typed = alloca float, align 4
  %Arg_0.70 = load float, ptr %Arg_0.70.typed, align 4
  %Arg_1.71 = load float, ptr %Arg_1.71.typed, align 4
  %add.72 = fadd float %Arg_0.70, %Arg_1.71
  store float %add.72, ptr %add.72.typed, align 4
  %load_ret_value = load float, ptr %add.72.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_76(ptr dereferenceable(4) %Arg_0.77.typed, ptr dereferenceable(4) %Arg_1.78.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.79.typed = alloca float, align 4
  %Arg_0.77 = load float, ptr %Arg_0.77.typed, align 4
  %Arg_1.78 = load float, ptr %Arg_1.78.typed, align 4
  %add.79 = fadd float %Arg_0.77, %Arg_1.78
  store float %add.79, ptr %add.79.typed, align 4
  %load_ret_value = load float, ptr %add.79.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_83(ptr dereferenceable(4) %Arg_0.84.typed, ptr dereferenceable(4) %Arg_1.85.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.86.typed = alloca float, align 4
  %Arg_0.84 = load float, ptr %Arg_0.84.typed, align 4
  %Arg_1.85 = load float, ptr %Arg_1.85.typed, align 4
  %add.86 = fadd float %Arg_0.84, %Arg_1.85
  store float %add.86, ptr %add.86.typed, align 4
  %load_ret_value = load float, ptr %add.86.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_90(ptr dereferenceable(4) %Arg_0.91.typed, ptr dereferenceable(4) %Arg_1.92.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.93.typed = alloca float, align 4
  %Arg_0.91 = load float, ptr %Arg_0.91.typed, align 4
  %Arg_1.92 = load float, ptr %Arg_1.92.typed, align 4
  %add.93 = fadd float %Arg_0.91, %Arg_1.92
  store float %add.93, ptr %add.93.typed, align 4
  %load_ret_value = load float, ptr %add.93.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_97(ptr dereferenceable(4) %Arg_0.98.typed, ptr dereferenceable(4) %Arg_1.99.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.100.typed = alloca float, align 4
  %Arg_0.98 = load float, ptr %Arg_0.98.typed, align 4
  %Arg_1.99 = load float, ptr %Arg_1.99.typed, align 4
  %add.100 = fadd float %Arg_0.98, %Arg_1.99
  store float %add.100, ptr %add.100.typed, align 4
  %load_ret_value = load float, ptr %add.100.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_332(ptr noalias align 16 dereferenceable(327680) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(4) %arg11, ptr noalias align 128 dereferenceable(2560) %arg12, ptr noalias align 128 dereferenceable(327680) %arg13) {
entry:
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_39_constant_32 = load float, ptr @56, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_39_constant_32, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !420
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 64
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 1
  %13 = udiv i32 %8, 1
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 1
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 128, i32 4096
  %17 = icmp eq i32 %12, 0
  %tile_bound1 = select i1 %17, i32 10, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %concatenate.24.merge26, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !467

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !468

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache88, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache88, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result85 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_33__1(ptr %30, ptr %result_from_other_lane, ptr %return_buffer86)
  %32 = load float, ptr %return_buffer86, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result88 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane87, align 4
  call void @region_1_33__1(ptr %30, ptr %result_from_other_lane87, ptr %return_buffer89)
  %34 = load float, ptr %return_buffer89, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result91 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane90, align 4
  call void @region_1_33__1(ptr %30, ptr %result_from_other_lane90, ptr %return_buffer92)
  %36 = load float, ptr %return_buffer92, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result94 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane93, align 4
  call void @region_1_33__1(ptr %30, ptr %result_from_other_lane93, ptr %return_buffer95)
  %38 = load float, ptr %return_buffer95, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result97 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane96, align 4
  call void @region_1_33__1(ptr %30, ptr %result_from_other_lane96, ptr %return_buffer98)
  %40 = load float, ptr %return_buffer98, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 10
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 1280
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 10
  %55 = udiv i32 %52, 10
  %56 = urem i32 %55, 128
  %57 = udiv i32 %52, 1280
  %58 = mul i32 %thread_id.x, 1
  %59 = sub i32 %x_loc, %58
  %60 = mul nuw nsw i32 %54, 1
  %61 = add nuw nsw i32 0, %60
  %62 = udiv i32 %61, 10
  %63 = mul nuw nsw i32 %56, 1
  %64 = add nuw nsw i32 0, %63
  %65 = mul nuw nsw i32 %57, 128
  %66 = add nuw nsw i32 %64, %65
  %67 = udiv i32 %66, 8192
  %Arg_11.12 = load float, ptr %arg11, align 4, !invariant.load !269
  br label %concatenate.pivot.5.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %68 = phi i32 [ 0, %concatenate.pivot.0. ]
  %69 = sub nsw i32 %61, %68
  %70 = udiv i32 %52, 10
  %71 = mul i32 %70, 1
  %72 = add i32 %71, %69
  %73 = udiv i32 %72, 1
  %74 = urem i32 %73, 1
  %75 = udiv i32 %72, 1
  %Arg_10.11 = getelementptr inbounds float, ptr %arg10, i32 %72
  %Arg_10.113 = load float, ptr %Arg_10.11, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.1.13
  %76 = phi i32 [ 1, %concatenate.pivot.1.13 ]
  %77 = sub nsw i32 %61, %76
  %78 = udiv i32 %52, 10
  %79 = mul i32 %78, 1
  %80 = add i32 %79, %77
  %81 = udiv i32 %80, 1
  %82 = urem i32 %81, 1
  %83 = udiv i32 %80, 1
  %Arg_9.10 = getelementptr inbounds float, ptr %arg9, i32 %80
  %Arg_9.104 = load float, ptr %Arg_9.10, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.2.14
  %84 = phi i32 [ 2, %concatenate.pivot.2.14 ]
  %85 = sub nsw i32 %61, %84
  %86 = udiv i32 %52, 10
  %87 = mul i32 %86, 1
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 1
  %91 = udiv i32 %88, 1
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %88
  %Arg_8.95 = load float, ptr %Arg_8.9, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.3.15
  %92 = phi i32 [ 3, %concatenate.pivot.3.15 ]
  %93 = sub nsw i32 %61, %92
  %94 = udiv i32 %52, 10
  %95 = mul i32 %94, 1
  %96 = add i32 %95, %93
  %97 = udiv i32 %96, 1
  %98 = urem i32 %97, 1
  %99 = udiv i32 %96, 1
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %96
  %Arg_7.86 = load float, ptr %Arg_7.8, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.4.16
  %100 = phi i32 [ 4, %concatenate.pivot.4.16 ]
  %101 = sub nsw i32 %61, %100
  %102 = udiv i32 %52, 10
  %103 = mul i32 %102, 1
  %104 = add i32 %103, %101
  %105 = udiv i32 %104, 1
  %106 = urem i32 %105, 1
  %107 = udiv i32 %104, 1
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %104
  %Arg_6.77 = load float, ptr %Arg_6.7, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id5:                    ; preds = %concatenate.pivot.5.17
  %108 = phi i32 [ 5, %concatenate.pivot.5.17 ]
  %109 = sub nsw i32 %61, %108
  %110 = udiv i32 %52, 10
  %111 = mul i32 %110, 1
  %112 = add i32 %111, %109
  %113 = udiv i32 %112, 1
  %114 = urem i32 %113, 1
  %115 = udiv i32 %112, 1
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %112
  %Arg_5.68 = load float, ptr %Arg_5.6, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id6:                    ; preds = %concatenate.pivot.6.18
  %116 = phi i32 [ 6, %concatenate.pivot.6.18 ]
  %117 = sub nsw i32 %61, %116
  %118 = udiv i32 %52, 10
  %119 = mul i32 %118, 1
  %120 = add i32 %119, %117
  %121 = udiv i32 %120, 1
  %122 = urem i32 %121, 1
  %123 = udiv i32 %120, 1
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %120
  %Arg_4.59 = load float, ptr %Arg_4.5, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id7:                    ; preds = %concatenate.pivot.7.19
  %124 = phi i32 [ 7, %concatenate.pivot.7.19 ]
  %125 = sub nsw i32 %61, %124
  %126 = udiv i32 %52, 10
  %127 = mul i32 %126, 1
  %128 = add i32 %127, %125
  %129 = udiv i32 %128, 1
  %130 = urem i32 %129, 1
  %131 = udiv i32 %128, 1
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %128
  %Arg_3.410 = load float, ptr %Arg_3.4, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id8:                    ; preds = %concatenate.pivot.8.20
  %132 = phi i32 [ 8, %concatenate.pivot.8.20 ]
  %133 = sub nsw i32 %61, %132
  %134 = udiv i32 %52, 10
  %135 = mul i32 %134, 1
  %136 = add i32 %135, %133
  %137 = udiv i32 %136, 1
  %138 = urem i32 %137, 1
  %139 = udiv i32 %136, 1
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %136
  %Arg_2.311 = load float, ptr %Arg_2.3, align 4, !invariant.load !269
  br label %concatenate.24.merge

concat_index_from_operand_id9:                    ; preds = %concatenate.pivot.9.21
  %140 = phi i32 [ 9, %concatenate.pivot.9.21 ]
  %141 = sub nsw i32 %61, %140
  %142 = udiv i32 %52, 10
  %143 = mul i32 %142, 1
  %144 = add i32 %143, %141
  %145 = udiv i32 %144, 1
  %146 = urem i32 %145, 1
  %147 = udiv i32 %144, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %144
  %Arg_1.212 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  br label %concatenate.24.merge

concatenate.pivot.5.:                             ; preds = %x_in_tile-true
  %148 = icmp ult i32 %61, 5
  br i1 %148, label %concatenate.pivot.2., label %concatenate.pivot.7.

concatenate.pivot.2.:                             ; preds = %concatenate.pivot.5.
  %149 = icmp ult i32 %61, 2
  br i1 %149, label %concatenate.pivot.1., label %concatenate.pivot.3.

concatenate.pivot.1.:                             ; preds = %concatenate.pivot.2.
  %150 = icmp ult i32 %61, 1
  br i1 %150, label %concatenate.pivot.0., label %concatenate.pivot.1.13

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id0

concatenate.pivot.1.13:                           ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id1

concatenate.pivot.3.:                             ; preds = %concatenate.pivot.2.
  %151 = icmp ult i32 %61, 3
  br i1 %151, label %concatenate.pivot.2.14, label %concatenate.pivot.4.

concatenate.pivot.2.14:                           ; preds = %concatenate.pivot.3.
  br label %concat_index_from_operand_id2

concatenate.pivot.4.:                             ; preds = %concatenate.pivot.3.
  %152 = icmp ult i32 %61, 4
  br i1 %152, label %concatenate.pivot.3.15, label %concatenate.pivot.4.16

concatenate.pivot.3.15:                           ; preds = %concatenate.pivot.4.
  br label %concat_index_from_operand_id3

concatenate.pivot.4.16:                           ; preds = %concatenate.pivot.4.
  br label %concat_index_from_operand_id4

concatenate.pivot.7.:                             ; preds = %concatenate.pivot.5.
  %153 = icmp ult i32 %61, 7
  br i1 %153, label %concatenate.pivot.6., label %concatenate.pivot.8.

concatenate.pivot.6.:                             ; preds = %concatenate.pivot.7.
  %154 = icmp ult i32 %61, 6
  br i1 %154, label %concatenate.pivot.5.17, label %concatenate.pivot.6.18

concatenate.pivot.5.17:                           ; preds = %concatenate.pivot.6.
  br label %concat_index_from_operand_id5

concatenate.pivot.6.18:                           ; preds = %concatenate.pivot.6.
  br label %concat_index_from_operand_id6

concatenate.pivot.8.:                             ; preds = %concatenate.pivot.7.
  %155 = icmp ult i32 %61, 8
  br i1 %155, label %concatenate.pivot.7.19, label %concatenate.pivot.9.

concatenate.pivot.7.19:                           ; preds = %concatenate.pivot.8.
  br label %concat_index_from_operand_id7

concatenate.pivot.9.:                             ; preds = %concatenate.pivot.8.
  %156 = icmp ult i32 %61, 9
  br i1 %156, label %concatenate.pivot.8.20, label %concatenate.pivot.9.21

concatenate.pivot.8.20:                           ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id8

concatenate.pivot.9.21:                           ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id9

concatenate.24.merge:                             ; preds = %concat_index_from_operand_id9, %concat_index_from_operand_id8, %concat_index_from_operand_id7, %concat_index_from_operand_id6, %concat_index_from_operand_id5, %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %157 = phi float [ %Arg_10.113, %concat_index_from_operand_id0 ], [ %Arg_9.104, %concat_index_from_operand_id1 ], [ %Arg_8.95, %concat_index_from_operand_id2 ], [ %Arg_7.86, %concat_index_from_operand_id3 ], [ %Arg_6.77, %concat_index_from_operand_id4 ], [ %Arg_5.68, %concat_index_from_operand_id5 ], [ %Arg_4.59, %concat_index_from_operand_id6 ], [ %Arg_3.410, %concat_index_from_operand_id7 ], [ %Arg_2.311, %concat_index_from_operand_id8 ], [ %Arg_1.212, %concat_index_from_operand_id9 ]
  %multiply.25 = fmul float %Arg_11.12, %157
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.122 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %multiply.26 = fmul float %multiply.25, %Arg_0.122
  %region_0_39_constant_27 = load float, ptr @55, align 4
  %Arg_0.123 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.124 = load float, ptr %Arg_0.123, align 4, !invariant.load !269
  %subtract.29 = fsub float %region_0_39_constant_27, %Arg_0.124
  %multiply.30 = fmul float %multiply.26, %subtract.29
  store float %multiply.30, ptr %reduction_input_address, align 4
  %158 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %59
  call void @region_1_33__1(ptr %158, ptr %reduction_input_address, ptr %return_buffer)
  %159 = load float, ptr %return_buffer, align 4
  store float %159, ptr %158, align 4
  %160 = mul nuw nsw i32 %54, 1
  %161 = add nuw nsw i32 0, %160
  %162 = udiv i32 %161, 10
  %163 = mul nuw nsw i32 %56, 1
  %164 = add nuw nsw i32 0, %163
  %165 = mul nuw nsw i32 %57, 128
  %166 = add nuw nsw i32 %164, %165
  %167 = udiv i32 %166, 8192
  %Arg_11.1225 = load float, ptr %arg11, align 4, !invariant.load !269
  br label %concatenate.pivot.5.57

concat_index_from_operand_id027:                  ; preds = %concatenate.pivot.0.60
  %168 = phi i32 [ 0, %concatenate.pivot.0.60 ]
  %169 = sub nsw i32 %161, %168
  %170 = udiv i32 %52, 10
  %171 = mul i32 %170, 1
  %172 = add i32 %171, %169
  %173 = udiv i32 %172, 1
  %174 = urem i32 %173, 1
  %175 = udiv i32 %172, 1
  %Arg_10.1128 = getelementptr inbounds float, ptr %arg10, i32 %172
  %Arg_10.1129 = load float, ptr %Arg_10.1128, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.1.61
  %176 = phi i32 [ 1, %concatenate.pivot.1.61 ]
  %177 = sub nsw i32 %161, %176
  %178 = udiv i32 %52, 10
  %179 = mul i32 %178, 1
  %180 = add i32 %179, %177
  %181 = udiv i32 %180, 1
  %182 = urem i32 %181, 1
  %183 = udiv i32 %180, 1
  %Arg_9.1031 = getelementptr inbounds float, ptr %arg9, i32 %180
  %Arg_9.1032 = load float, ptr %Arg_9.1031, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id233:                  ; preds = %concatenate.pivot.2.63
  %184 = phi i32 [ 2, %concatenate.pivot.2.63 ]
  %185 = sub nsw i32 %161, %184
  %186 = udiv i32 %52, 10
  %187 = mul i32 %186, 1
  %188 = add i32 %187, %185
  %189 = udiv i32 %188, 1
  %190 = urem i32 %189, 1
  %191 = udiv i32 %188, 1
  %Arg_8.934 = getelementptr inbounds float, ptr %arg8, i32 %188
  %Arg_8.935 = load float, ptr %Arg_8.934, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id336:                  ; preds = %concatenate.pivot.3.65
  %192 = phi i32 [ 3, %concatenate.pivot.3.65 ]
  %193 = sub nsw i32 %161, %192
  %194 = udiv i32 %52, 10
  %195 = mul i32 %194, 1
  %196 = add i32 %195, %193
  %197 = udiv i32 %196, 1
  %198 = urem i32 %197, 1
  %199 = udiv i32 %196, 1
  %Arg_7.837 = getelementptr inbounds float, ptr %arg7, i32 %196
  %Arg_7.838 = load float, ptr %Arg_7.837, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id439:                  ; preds = %concatenate.pivot.4.66
  %200 = phi i32 [ 4, %concatenate.pivot.4.66 ]
  %201 = sub nsw i32 %161, %200
  %202 = udiv i32 %52, 10
  %203 = mul i32 %202, 1
  %204 = add i32 %203, %201
  %205 = udiv i32 %204, 1
  %206 = urem i32 %205, 1
  %207 = udiv i32 %204, 1
  %Arg_6.740 = getelementptr inbounds float, ptr %arg6, i32 %204
  %Arg_6.741 = load float, ptr %Arg_6.740, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id542:                  ; preds = %concatenate.pivot.5.69
  %208 = phi i32 [ 5, %concatenate.pivot.5.69 ]
  %209 = sub nsw i32 %161, %208
  %210 = udiv i32 %52, 10
  %211 = mul i32 %210, 1
  %212 = add i32 %211, %209
  %213 = udiv i32 %212, 1
  %214 = urem i32 %213, 1
  %215 = udiv i32 %212, 1
  %Arg_5.643 = getelementptr inbounds float, ptr %arg5, i32 %212
  %Arg_5.644 = load float, ptr %Arg_5.643, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id645:                  ; preds = %concatenate.pivot.6.70
  %216 = phi i32 [ 6, %concatenate.pivot.6.70 ]
  %217 = sub nsw i32 %161, %216
  %218 = udiv i32 %52, 10
  %219 = mul i32 %218, 1
  %220 = add i32 %219, %217
  %221 = udiv i32 %220, 1
  %222 = urem i32 %221, 1
  %223 = udiv i32 %220, 1
  %Arg_4.546 = getelementptr inbounds float, ptr %arg4, i32 %220
  %Arg_4.547 = load float, ptr %Arg_4.546, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id748:                  ; preds = %concatenate.pivot.7.72
  %224 = phi i32 [ 7, %concatenate.pivot.7.72 ]
  %225 = sub nsw i32 %161, %224
  %226 = udiv i32 %52, 10
  %227 = mul i32 %226, 1
  %228 = add i32 %227, %225
  %229 = udiv i32 %228, 1
  %230 = urem i32 %229, 1
  %231 = udiv i32 %228, 1
  %Arg_3.449 = getelementptr inbounds float, ptr %arg3, i32 %228
  %Arg_3.450 = load float, ptr %Arg_3.449, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id851:                  ; preds = %concatenate.pivot.8.74
  %232 = phi i32 [ 8, %concatenate.pivot.8.74 ]
  %233 = sub nsw i32 %161, %232
  %234 = udiv i32 %52, 10
  %235 = mul i32 %234, 1
  %236 = add i32 %235, %233
  %237 = udiv i32 %236, 1
  %238 = urem i32 %237, 1
  %239 = udiv i32 %236, 1
  %Arg_2.352 = getelementptr inbounds float, ptr %arg2, i32 %236
  %Arg_2.353 = load float, ptr %Arg_2.352, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concat_index_from_operand_id954:                  ; preds = %concatenate.pivot.9.75
  %240 = phi i32 [ 9, %concatenate.pivot.9.75 ]
  %241 = sub nsw i32 %161, %240
  %242 = udiv i32 %52, 10
  %243 = mul i32 %242, 1
  %244 = add i32 %243, %241
  %245 = udiv i32 %244, 1
  %246 = urem i32 %245, 1
  %247 = udiv i32 %244, 1
  %Arg_1.255 = getelementptr inbounds float, ptr %arg1, i32 %244
  %Arg_1.256 = load float, ptr %Arg_1.255, align 4, !invariant.load !269
  br label %concatenate.24.merge26

concatenate.pivot.5.57:                           ; preds = %concatenate.24.merge
  %248 = icmp ult i32 %161, 5
  br i1 %248, label %concatenate.pivot.2.58, label %concatenate.pivot.7.67

concatenate.pivot.2.58:                           ; preds = %concatenate.pivot.5.57
  %249 = icmp ult i32 %161, 2
  br i1 %249, label %concatenate.pivot.1.59, label %concatenate.pivot.3.62

concatenate.pivot.1.59:                           ; preds = %concatenate.pivot.2.58
  %250 = icmp ult i32 %161, 1
  br i1 %250, label %concatenate.pivot.0.60, label %concatenate.pivot.1.61

concatenate.pivot.0.60:                           ; preds = %concatenate.pivot.1.59
  br label %concat_index_from_operand_id027

concatenate.pivot.1.61:                           ; preds = %concatenate.pivot.1.59
  br label %concat_index_from_operand_id130

concatenate.pivot.3.62:                           ; preds = %concatenate.pivot.2.58
  %251 = icmp ult i32 %161, 3
  br i1 %251, label %concatenate.pivot.2.63, label %concatenate.pivot.4.64

concatenate.pivot.2.63:                           ; preds = %concatenate.pivot.3.62
  br label %concat_index_from_operand_id233

concatenate.pivot.4.64:                           ; preds = %concatenate.pivot.3.62
  %252 = icmp ult i32 %161, 4
  br i1 %252, label %concatenate.pivot.3.65, label %concatenate.pivot.4.66

concatenate.pivot.3.65:                           ; preds = %concatenate.pivot.4.64
  br label %concat_index_from_operand_id336

concatenate.pivot.4.66:                           ; preds = %concatenate.pivot.4.64
  br label %concat_index_from_operand_id439

concatenate.pivot.7.67:                           ; preds = %concatenate.pivot.5.57
  %253 = icmp ult i32 %161, 7
  br i1 %253, label %concatenate.pivot.6.68, label %concatenate.pivot.8.71

concatenate.pivot.6.68:                           ; preds = %concatenate.pivot.7.67
  %254 = icmp ult i32 %161, 6
  br i1 %254, label %concatenate.pivot.5.69, label %concatenate.pivot.6.70

concatenate.pivot.5.69:                           ; preds = %concatenate.pivot.6.68
  br label %concat_index_from_operand_id542

concatenate.pivot.6.70:                           ; preds = %concatenate.pivot.6.68
  br label %concat_index_from_operand_id645

concatenate.pivot.8.71:                           ; preds = %concatenate.pivot.7.67
  %255 = icmp ult i32 %161, 8
  br i1 %255, label %concatenate.pivot.7.72, label %concatenate.pivot.9.73

concatenate.pivot.7.72:                           ; preds = %concatenate.pivot.8.71
  br label %concat_index_from_operand_id748

concatenate.pivot.9.73:                           ; preds = %concatenate.pivot.8.71
  %256 = icmp ult i32 %161, 9
  br i1 %256, label %concatenate.pivot.8.74, label %concatenate.pivot.9.75

concatenate.pivot.8.74:                           ; preds = %concatenate.pivot.9.73
  br label %concat_index_from_operand_id851

concatenate.pivot.9.75:                           ; preds = %concatenate.pivot.9.73
  br label %concat_index_from_operand_id954

concatenate.24.merge26:                           ; preds = %concat_index_from_operand_id954, %concat_index_from_operand_id851, %concat_index_from_operand_id748, %concat_index_from_operand_id645, %concat_index_from_operand_id542, %concat_index_from_operand_id439, %concat_index_from_operand_id336, %concat_index_from_operand_id233, %concat_index_from_operand_id130, %concat_index_from_operand_id027
  %257 = phi float [ %Arg_10.1129, %concat_index_from_operand_id027 ], [ %Arg_9.1032, %concat_index_from_operand_id130 ], [ %Arg_8.935, %concat_index_from_operand_id233 ], [ %Arg_7.838, %concat_index_from_operand_id336 ], [ %Arg_6.741, %concat_index_from_operand_id439 ], [ %Arg_5.644, %concat_index_from_operand_id542 ], [ %Arg_4.547, %concat_index_from_operand_id645 ], [ %Arg_3.450, %concat_index_from_operand_id748 ], [ %Arg_2.353, %concat_index_from_operand_id851 ], [ %Arg_1.256, %concat_index_from_operand_id954 ]
  %multiply.2576 = fmul float %Arg_11.1225, %257
  %Arg_0.177 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.178 = load float, ptr %Arg_0.177, align 4, !invariant.load !269
  %multiply.2679 = fmul float %multiply.2576, %Arg_0.178
  %region_0_39_constant_2780 = load float, ptr @55, align 4
  %Arg_0.181 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.182 = load float, ptr %Arg_0.181, align 4, !invariant.load !269
  %subtract.2983 = fsub float %region_0_39_constant_2780, %Arg_0.182
  %multiply.3084 = fmul float %multiply.2679, %subtract.2983
  %258 = mul nuw nsw i32 %54, 1
  %259 = add nuw nsw i32 0, %258
  %260 = udiv i32 %259, 10
  %261 = mul nuw nsw i32 %56, 1
  %262 = add nuw nsw i32 0, %261
  %263 = mul nuw nsw i32 %57, 128
  %264 = add nuw nsw i32 %262, %263
  %265 = udiv i32 %264, 8192
  %266 = getelementptr inbounds float, ptr %arg13, i32 %52
  store float %multiply.3084, ptr %266, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %267 = mul i32 %thread_id.y, 1
  %268 = add i32 %tile_origin.1, %thread_id.x
  %269 = add i32 %tile_origin.2, %267
  %270 = add i32 %269, 0
  %271 = mul i32 %tile_origin.0, 10
  %272 = add i32 %271, %270
  %273 = udiv i32 %272, 1
  %274 = urem i32 %273, 10
  %275 = udiv i32 %272, 10
  %output_element_address = getelementptr inbounds [64 x [10 x float]], ptr %arg12, i32 0, i32 %275, i32 %274
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_33__1(ptr dereferenceable(4) %Arg_0.34.typed, ptr dereferenceable(4) %Arg_1.35.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.36.typed = alloca float, align 4
  %Arg_0.34 = load float, ptr %Arg_0.34.typed, align 4
  %Arg_1.35 = load float, ptr %Arg_1.35.typed, align 4
  %add.36 = fadd float %Arg_0.34, %Arg_1.35
  store float %add.36, ptr %add.36.typed, align 4
  %load_ret_value = load float, ptr %add.36.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @reduce_3891(ptr noalias align 128 dereferenceable(2560) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(40) %arg2) {
entry:
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane9 = alloca float, align 4
  %return_buffer8 = alloca float, align 4
  %result_from_other_lane6 = alloca float, align 4
  %return_buffer5 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 1
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 1
  %13 = udiv i32 %8, 1
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 1
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 64, i32 4096
  %17 = icmp eq i32 %12, 0
  %tile_bound1 = select i1 %17, i32 10, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !469

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !470

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache89, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache89, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result4 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_3__3(ptr %30, ptr %result_from_other_lane, ptr %return_buffer5)
  %32 = load float, ptr %return_buffer5, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result7 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result7, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane6, align 4
  call void @region_1_3__3(ptr %30, ptr %result_from_other_lane6, ptr %return_buffer8)
  %34 = load float, ptr %return_buffer8, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result10 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane9, align 4
  call void @region_1_3__3(ptr %30, ptr %result_from_other_lane9, ptr %return_buffer11)
  %36 = load float, ptr %return_buffer11, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result13 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane12, align 4
  call void @region_1_3__3(ptr %30, ptr %result_from_other_lane12, ptr %return_buffer14)
  %38 = load float, ptr %return_buffer14, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result16 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane15, align 4
  call void @region_1_3__3(ptr %30, ptr %result_from_other_lane15, ptr %return_buffer17)
  %40 = load float, ptr %return_buffer17, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul i32 %thread_id.x, 1
  %48 = sub i32 %x_loc, %47
  %Arg_0.1 = getelementptr inbounds [64 x [10 x float]], ptr %arg0, i32 0, i32 %25, i32 %26
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %49 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %48
  call void @region_1_3__3(ptr %49, ptr %reduction_input_address, ptr %return_buffer)
  %50 = load float, ptr %return_buffer, align 4
  store float %50, ptr %49, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %51 = mul i32 %thread_id.y, 1
  %52 = add i32 %tile_origin.1, %thread_id.x
  %53 = add i32 %tile_origin.2, %51
  %54 = add i32 %53, 0
  %55 = mul i32 %tile_origin.0, 10
  %56 = add i32 %55, %54
  %57 = udiv i32 %56, 1
  %output_element_address = getelementptr inbounds [10 x float], ptr %arg2, i32 0, i32 %57
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_3__3(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_331(ptr noalias align 16 dereferenceable(40) %arg0, ptr noalias align 128 dereferenceable(40) %arg1, ptr noalias align 16 dereferenceable(4) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !471
  %2 = mul nuw nsw i32 %0, 10
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 10
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 10
  br i1 %4, label %fusion_331.in_bounds-true, label %fusion_331.in_bounds-after

fusion_331.in_bounds-after:                       ; preds = %fusion_331.in_bounds-true, %entry
  ret void

fusion_331.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.5 = fmul float %7, %9
  %subtract.6 = fsub float %6, %multiply.5
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %subtract.6, ptr %10, align 4
  br label %fusion_331.in_bounds-after
}

define void @fusion_330(ptr noalias align 16 dereferenceable(20440) %arg0, ptr noalias align 128 dereferenceable(20440) %arg1, ptr noalias align 16 dereferenceable(4) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !361
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 5120
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 10
  %5 = udiv i32 %linear_index, 10
  %6 = icmp ult i32 %linear_index, 5110
  br i1 %6, label %fusion_330.in_bounds-true, label %fusion_330.in_bounds-after

fusion_330.in_bounds-after:                       ; preds = %fusion_330.in_bounds-true, %entry
  ret void

fusion_330.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = load float, ptr %arg2, align 4, !invariant.load !269
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.5 = fmul float %9, %11
  %subtract.6 = fsub float %8, %multiply.5
  %12 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %subtract.6, ptr %12, align 4
  br label %fusion_330.in_bounds-after
}

define void @fusion_328(ptr noalias align 128 dereferenceable(16744448) %arg0, ptr noalias align 16 dereferenceable(16744448) %arg1, ptr noalias align 128 dereferenceable(130816) %arg2, ptr noalias align 128 dereferenceable(16744448) %arg3) {
entry:
  %return_buffer24 = alloca float, align 4
  %result_from_other_lane22 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %result_from_other_lane19 = alloca float, align 4
  %return_buffer18 = alloca float, align 4
  %result_from_other_lane16 = alloca float, align 4
  %return_buffer15 = alloca float, align 4
  %result_from_other_lane13 = alloca float, align 4
  %return_buffer12 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @58, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !317
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 1024
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 16
  %13 = udiv i32 %8, 16
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 16
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 128, i32 4096
  %17 = icmp eq i32 %12, 15
  %tile_bound1 = select i1 %17, i32 31, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !472

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !473

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache90, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache90, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result11 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result11, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_9__4(ptr %30, ptr %result_from_other_lane, ptr %return_buffer12)
  %32 = load float, ptr %return_buffer12, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result14 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane13, align 4
  call void @region_1_9__4(ptr %30, ptr %result_from_other_lane13, ptr %return_buffer15)
  %34 = load float, ptr %return_buffer15, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result17 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result17, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane16, align 4
  call void @region_1_9__4(ptr %30, ptr %result_from_other_lane16, ptr %return_buffer18)
  %36 = load float, ptr %return_buffer18, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result20 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result20, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane19, align 4
  call void @region_1_9__4(ptr %30, ptr %result_from_other_lane19, ptr %return_buffer21)
  %38 = load float, ptr %return_buffer21, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result23 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result23, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane22, align 4
  call void @region_1_9__4(ptr %30, ptr %result_from_other_lane22, ptr %return_buffer24)
  %40 = load float, ptr %return_buffer24, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 511
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 65408
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 511
  %55 = udiv i32 %52, 511
  %56 = urem i32 %55, 128
  %57 = udiv i32 %52, 65408
  %58 = mul i32 %thread_id.x, 1
  %59 = sub i32 %x_loc, %58
  %60 = mul nuw nsw i32 %54, 1
  %61 = add nuw nsw i32 0, %60
  %62 = udiv i32 %61, 511
  %63 = mul nuw nsw i32 %56, 1
  %64 = add nuw nsw i32 0, %63
  %65 = mul nuw nsw i32 %57, 128
  %66 = add nuw nsw i32 %64, %65
  %67 = udiv i32 %66, 8192
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %52
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !269
  %region_0_15_constant_3 = load float, ptr @57, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %68 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  %69 = trunc i8 %68 to i1
  %70 = select i1 %69, float %Arg_0.14, float %region_0_15_constant_3
  store float %70, ptr %reduction_input_address, align 4
  %71 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %59
  call void @region_1_9__4(ptr %71, ptr %reduction_input_address, ptr %return_buffer)
  %72 = load float, ptr %return_buffer, align 4
  store float %72, ptr %71, align 4
  %73 = mul nuw nsw i32 %54, 1
  %74 = add nuw nsw i32 0, %73
  %75 = udiv i32 %74, 511
  %76 = mul nuw nsw i32 %56, 1
  %77 = add nuw nsw i32 0, %76
  %78 = mul nuw nsw i32 %57, 128
  %79 = add nuw nsw i32 %77, %78
  %80 = udiv i32 %79, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %52
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !269
  %region_0_15_constant_37 = load float, ptr @57, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %81 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !269
  %82 = trunc i8 %81 to i1
  %83 = select i1 %82, float %Arg_0.110, float %region_0_15_constant_37
  %84 = mul nuw nsw i32 %54, 1
  %85 = add nuw nsw i32 0, %84
  %86 = udiv i32 %85, 511
  %87 = mul nuw nsw i32 %56, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %57, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = udiv i32 %90, 8192
  %92 = getelementptr inbounds float, ptr %arg3, i32 %52
  store float %83, ptr %92, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %93 = mul i32 %thread_id.y, 1
  %94 = add i32 %tile_origin.1, %thread_id.x
  %95 = add i32 %tile_origin.2, %93
  %96 = add i32 %95, 0
  %97 = mul i32 %tile_origin.0, 511
  %98 = add i32 %97, %96
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 511
  %101 = udiv i32 %98, 511
  %output_element_address = getelementptr inbounds [64 x [511 x float]], ptr %arg2, i32 0, i32 %101, i32 %100
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_9__4(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @reduce_3908(ptr noalias align 128 dereferenceable(130816) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(2044) %arg2) {
entry:
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane9 = alloca float, align 4
  %return_buffer8 = alloca float, align 4
  %result_from_other_lane6 = alloca float, align 4
  %return_buffer5 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !266
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !269
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !417
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 16
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 16
  %13 = udiv i32 %8, 16
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 16
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 64, i32 4096
  %17 = icmp eq i32 %12, 15
  %tile_bound1 = select i1 %17, i32 31, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !474

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !475

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache91, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache91, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result4 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_3__4(ptr %30, ptr %result_from_other_lane, ptr %return_buffer5)
  %32 = load float, ptr %return_buffer5, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result7 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result7, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane6, align 4
  call void @region_1_3__4(ptr %30, ptr %result_from_other_lane6, ptr %return_buffer8)
  %34 = load float, ptr %return_buffer8, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result10 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane9, align 4
  call void @region_1_3__4(ptr %30, ptr %result_from_other_lane9, ptr %return_buffer11)
  %36 = load float, ptr %return_buffer11, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result13 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane12, align 4
  call void @region_1_3__4(ptr %30, ptr %result_from_other_lane12, ptr %return_buffer14)
  %38 = load float, ptr %return_buffer14, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result16 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane15, align 4
  call void @region_1_3__4(ptr %30, ptr %result_from_other_lane15, ptr %return_buffer17)
  %40 = load float, ptr %return_buffer17, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul i32 %thread_id.x, 1
  %48 = sub i32 %x_loc, %47
  %Arg_0.1 = getelementptr inbounds [64 x [511 x float]], ptr %arg0, i32 0, i32 %25, i32 %26
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !269
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %49 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %48
  call void @region_1_3__4(ptr %49, ptr %reduction_input_address, ptr %return_buffer)
  %50 = load float, ptr %return_buffer, align 4
  store float %50, ptr %49, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %51 = mul i32 %thread_id.y, 1
  %52 = add i32 %tile_origin.1, %thread_id.x
  %53 = add i32 %tile_origin.2, %51
  %54 = add i32 %53, 0
  %55 = mul i32 %tile_origin.0, 511
  %56 = add i32 %55, %54
  %57 = udiv i32 %56, 1
  %output_element_address = getelementptr inbounds [511 x float], ptr %arg2, i32 0, i32 %57
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_3__4(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_327(ptr noalias align 16 dereferenceable(2044) %arg0, ptr noalias align 128 dereferenceable(2044) %arg1, ptr noalias align 16 dereferenceable(4) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !476
  %2 = mul nuw nsw i32 %0, 511
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 511
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 511
  br i1 %4, label %fusion_327.in_bounds-true, label %fusion_327.in_bounds-after

fusion_327.in_bounds-after:                       ; preds = %fusion_327.in_bounds-true, %entry
  ret void

fusion_327.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !269
  %7 = load float, ptr %arg2, align 4, !invariant.load !269
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.5 = fmul float %7, %9
  %subtract.6 = fsub float %6, %multiply.5
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %subtract.6, ptr %10, align 4
  br label %fusion_327.in_bounds-after
}

define void @fusion_326(ptr noalias align 16 dereferenceable(1128288) %arg0, ptr noalias align 128 dereferenceable(1128288) %arg1, ptr noalias align 16 dereferenceable(4) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !477
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 70656
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 511
  %5 = udiv i32 %linear_index_base, 511
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 511
  %8 = udiv i32 %linear_index1, 511
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 511
  %11 = udiv i32 %linear_index2, 511
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 511
  %14 = udiv i32 %linear_index3, 511
  %15 = icmp ult i32 %linear_index_base, 282072
  br i1 %15, label %fusion_326.in_bounds-true, label %fusion_326.in_bounds-after

fusion_326.in_bounds-after:                       ; preds = %fusion_326.in_bounds-true, %entry
  ret void

fusion_326.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %20 = load float, ptr %19, align 4
  %multiply.5 = fmul float %18, %20
  %subtract.6 = fsub float %17, %multiply.5
  %21 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %subtract.6, ptr %21, align 4
  %22 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %24 = load float, ptr %arg2, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %26 = load float, ptr %25, align 4
  %multiply.51 = fmul float %24, %26
  %subtract.62 = fsub float %23, %multiply.51
  %27 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %subtract.62, ptr %27, align 4
  %28 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = load float, ptr %arg2, align 4, !invariant.load !269
  %31 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %32 = load float, ptr %31, align 4
  %multiply.53 = fmul float %30, %32
  %subtract.64 = fsub float %29, %multiply.53
  %33 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %subtract.64, ptr %33, align 4
  %34 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = load float, ptr %arg2, align 4, !invariant.load !269
  %37 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %38 = load float, ptr %37, align 4
  %multiply.55 = fmul float %36, %38
  %subtract.66 = fsub float %35, %multiply.55
  %39 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %subtract.66, ptr %39, align 4
  br label %fusion_326.in_bounds-after
}

define void @fusion_359(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 128 dereferenceable(8650752) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(2097152) %arg3, ptr noalias align 128 dereferenceable(10485760) %arg4, ptr noalias align 128 dereferenceable(14680064) %arg5, ptr noalias align 16 dereferenceable(2097152) %arg6, ptr noalias align 128 dereferenceable(11534336) %arg7, ptr noalias align 16 dereferenceable(2097152) %arg8, ptr noalias align 128 dereferenceable(7340032) %arg9, ptr noalias align 128 dereferenceable(11534336) %arg10, ptr noalias align 128 dereferenceable(11534336) %arg11, ptr noalias align 16 dereferenceable(2097152) %arg12, ptr noalias align 128 dereferenceable(10485760) %arg13, ptr noalias align 128 dereferenceable(14680064) %arg14, ptr noalias align 128 dereferenceable(14680064) %arg15, ptr noalias align 16 dereferenceable(2097152) %arg16, ptr noalias align 128 dereferenceable(7340032) %arg17, ptr noalias align 128 dereferenceable(11534336) %arg18, ptr noalias align 128 dereferenceable(11796480) %arg19, ptr noalias align 16 dereferenceable(2097152) %arg20, ptr noalias align 128 dereferenceable(7340032) %arg21, ptr noalias align 128 dereferenceable(11534336) %arg22, ptr noalias align 128 dereferenceable(11796480) %arg23, ptr noalias align 16 dereferenceable(2097152) %arg24, ptr noalias align 128 dereferenceable(7340032) %arg25, ptr noalias align 128 dereferenceable(11534336) %arg26, ptr noalias align 128 dereferenceable(12582912) %arg27, ptr noalias align 16 dereferenceable(2097152) %arg28, ptr noalias align 128 dereferenceable(6291456) %arg29, ptr noalias align 16 dereferenceable(2097152) %arg30, ptr noalias align 128 dereferenceable(14680064) %arg31, ptr noalias align 128 dereferenceable(14680064) %arg32, ptr noalias align 16 dereferenceable(2097152) %arg33, ptr noalias align 128 dereferenceable(11534336) %arg34, ptr noalias align 16 dereferenceable(2097152) %arg35, ptr noalias align 128 dereferenceable(11534336) %arg36, ptr noalias align 16 dereferenceable(2097152) %arg37, ptr noalias align 128 dereferenceable(18087936) %arg38, ptr noalias align 16 dereferenceable(2097152) %arg39, ptr noalias align 128 dereferenceable(67371008) %arg40, ptr noalias align 16 dereferenceable(32768) %arg41, ptr noalias align 16 dereferenceable(2097152) %arg42, ptr noalias align 16 dereferenceable(2097152) %arg43, ptr noalias align 128 dereferenceable(11534336) %arg44, ptr noalias align 128 dereferenceable(2097152) %arg45, ptr noalias align 128 dereferenceable(2097152) %arg46, ptr noalias align 128 dereferenceable(2097152) %arg47, ptr noalias align 128 dereferenceable(2097152) %arg48, ptr noalias align 128 dereferenceable(2097152) %arg49, ptr noalias align 128 dereferenceable(2097152) %arg50, ptr noalias align 128 dereferenceable(2097152) %arg51, ptr noalias align 128 dereferenceable(2097152) %arg52, ptr noalias align 128 dereferenceable(2097152) %arg53, ptr noalias align 128 dereferenceable(2097152) %arg54, ptr noalias align 128 dereferenceable(2097152) %arg55, ptr noalias align 128 dereferenceable(2097152) %arg56, ptr noalias align 128 dereferenceable(2097152) %arg57, ptr noalias align 128 dereferenceable(2097152) %arg58, ptr noalias align 128 dereferenceable(2097152) %arg59, ptr noalias align 128 dereferenceable(2097152) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !265
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 131072
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 64
  %5 = udiv i32 %linear_index_base, 64
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 64
  %8 = udiv i32 %linear_index1, 64
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 64
  %11 = udiv i32 %linear_index2, 64
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 64
  %14 = udiv i32 %linear_index3, 64
  %15 = icmp ult i32 %linear_index_base, 524288
  br i1 %15, label %fusion_359.in_bounds-true, label %fusion_359.in_bounds-after

fusion_359.in_bounds-after:                       ; preds = %fusion_359.in_bounds-true, %entry
  ret void

fusion_359.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg2, align 4, !invariant.load !269
  %19 = add i32 %5, 0
  %20 = add i32 %4, 192
  %21 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %multiply.48 = fmul float %18, %22
  %subtract.49 = fsub float %17, %multiply.48
  %23 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.49, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !269
  %26 = add i32 %5, 0
  %27 = add i32 %4, 0
  %28 = add i32 %26, 0
  %29 = add i32 %27, 0
  %30 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %28, i32 %29
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %32 = add i32 %26, 0
  %33 = add i32 %27, 0
  %34 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %32, i32 %33
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %add.52 = fadd float %31, %35
  %36 = add i32 %26, 0
  %37 = add i32 %27, 0
  %38 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !269
  %add.54 = fadd float %add.52, %39
  %multiply.56 = fmul float %18, %add.54
  %subtract.57 = fsub float %25, %multiply.56
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %23, float %subtract.57, 1
  %41 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %43 = add i32 %5, 0
  %44 = add i32 %4, 32
  %45 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %multiply.59 = fmul float %18, %46
  %subtract.60 = fsub float %42, %multiply.59
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.60, 2
  %48 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %50 = add i32 %5, 0
  %51 = add i32 %4, 32
  %52 = add i32 %50, 0
  %53 = add i32 %51, 0
  %54 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !269
  %56 = add i32 %50, 0
  %57 = add i32 %51, 0
  %58 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %56, i32 %57
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %add.63 = fadd float %55, %59
  %60 = add i32 %50, 0
  %61 = add i32 %51, 0
  %62 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %60, i32 %61
  %63 = load float, ptr %62, align 4, !invariant.load !269
  %add.65 = fadd float %add.63, %63
  %multiply.67 = fmul float %18, %add.65
  %subtract.68 = fsub float %49, %multiply.67
  %64 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.68, 3
  %65 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %66 = load float, ptr %65, align 4, !invariant.load !269
  %67 = add i32 %5, 0
  %68 = add i32 %4, 0
  %69 = add i32 %67, 0
  %70 = add i32 %68, 0
  %71 = getelementptr inbounds [8192 x [448 x float]], ptr %arg15, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %73 = add i32 %67, 0
  %74 = add i32 %68, 0
  %75 = getelementptr inbounds [8192 x [448 x float]], ptr %arg14, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !269
  %add.71 = fadd float %72, %76
  %77 = add i32 %67, 0
  %78 = add i32 %68, 0
  %79 = getelementptr inbounds [8192 x [320 x float]], ptr %arg13, i32 0, i32 %77, i32 %78
  %80 = load float, ptr %79, align 4, !invariant.load !269
  %add.73 = fadd float %add.71, %80
  %multiply.75 = fmul float %18, %add.73
  %subtract.76 = fsub float %66, %multiply.75
  %81 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %64, float %subtract.76, 4
  %82 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  %83 = load float, ptr %82, align 4, !invariant.load !269
  %84 = add i32 %5, 0
  %85 = add i32 %4, 32
  %86 = add i32 %84, 0
  %87 = add i32 %85, 0
  %88 = getelementptr inbounds [8192 x [360 x float]], ptr %arg19, i32 0, i32 %86, i32 %87
  %89 = load float, ptr %88, align 4, !invariant.load !269
  %90 = add i32 %84, 0
  %91 = add i32 %85, 0
  %92 = getelementptr inbounds [8192 x [352 x float]], ptr %arg18, i32 0, i32 %90, i32 %91
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %add.79 = fadd float %89, %93
  %94 = add i32 %84, 0
  %95 = add i32 %85, 0
  %96 = getelementptr inbounds [8192 x [224 x float]], ptr %arg17, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !269
  %add.81 = fadd float %add.79, %97
  %multiply.83 = fmul float %18, %add.81
  %subtract.84 = fsub float %83, %multiply.83
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %81, float %subtract.84, 5
  %99 = getelementptr inbounds float, ptr %arg20, i32 %linear_index_base
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %101 = add i32 %5, 0
  %102 = add i32 %4, 32
  %103 = add i32 %101, 0
  %104 = add i32 %102, 0
  %105 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %103, i32 %104
  %106 = load float, ptr %105, align 4, !invariant.load !269
  %107 = add i32 %101, 0
  %108 = add i32 %102, 0
  %109 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %107, i32 %108
  %110 = load float, ptr %109, align 4, !invariant.load !269
  %add.87 = fadd float %106, %110
  %111 = add i32 %101, 0
  %112 = add i32 %102, 0
  %113 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %111, i32 %112
  %114 = load float, ptr %113, align 4, !invariant.load !269
  %add.89 = fadd float %add.87, %114
  %multiply.91 = fmul float %18, %add.89
  %subtract.92 = fsub float %100, %multiply.91
  %115 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.92, 6
  %116 = getelementptr inbounds float, ptr %arg24, i32 %linear_index_base
  %117 = load float, ptr %116, align 4, !invariant.load !269
  %118 = add i32 %5, 0
  %119 = add i32 %4, 32
  %120 = add i32 %118, 0
  %121 = add i32 %119, 0
  %122 = getelementptr inbounds [8192 x [384 x float]], ptr %arg27, i32 0, i32 %120, i32 %121
  %123 = load float, ptr %122, align 4, !invariant.load !269
  %124 = add i32 %118, 0
  %125 = add i32 %119, 0
  %126 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %124, i32 %125
  %127 = load float, ptr %126, align 4, !invariant.load !269
  %add.95 = fadd float %123, %127
  %128 = add i32 %118, 0
  %129 = add i32 %119, 0
  %130 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %128, i32 %129
  %131 = load float, ptr %130, align 4, !invariant.load !269
  %add.97 = fadd float %add.95, %131
  %multiply.99 = fmul float %18, %add.97
  %subtract.100 = fsub float %117, %multiply.99
  %132 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, float %subtract.100, 7
  %133 = getelementptr inbounds float, ptr %arg28, i32 %linear_index_base
  %134 = load float, ptr %133, align 4, !invariant.load !269
  %135 = add i32 %5, 0
  %136 = add i32 %4, 0
  %137 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %135, i32 %136
  %138 = load float, ptr %137, align 4, !invariant.load !269
  %multiply.102 = fmul float %18, %138
  %subtract.103 = fsub float %134, %multiply.102
  %139 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %132, float %subtract.103, 8
  %140 = getelementptr inbounds float, ptr %arg30, i32 %linear_index_base
  %141 = load float, ptr %140, align 4, !invariant.load !269
  %142 = add i32 %5, 0
  %143 = add i32 %4, 0
  %144 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %142, i32 %143
  %145 = load float, ptr %144, align 4, !invariant.load !269
  %146 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %142, i32 %143
  %147 = load float, ptr %146, align 4, !invariant.load !269
  %add.104 = fadd float %145, %147
  %multiply.106 = fmul float %18, %add.104
  %subtract.107 = fsub float %141, %multiply.106
  %148 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, float %subtract.107, 9
  %149 = getelementptr inbounds float, ptr %arg33, i32 %linear_index_base
  %150 = load float, ptr %149, align 4, !invariant.load !269
  %151 = add i32 %5, 0
  %152 = add i32 %4, 32
  %153 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %151, i32 %152
  %154 = load float, ptr %153, align 4, !invariant.load !269
  %multiply.109 = fmul float %18, %154
  %subtract.110 = fsub float %150, %multiply.109
  %155 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, float %subtract.110, 10
  %156 = getelementptr inbounds float, ptr %arg35, i32 %linear_index_base
  %157 = load float, ptr %156, align 4, !invariant.load !269
  %158 = add i32 %5, 0
  %159 = add i32 %4, 32
  %160 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %158, i32 %159
  %161 = load float, ptr %160, align 4, !invariant.load !269
  %multiply.112 = fmul float %18, %161
  %subtract.113 = fsub float %157, %multiply.112
  %162 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, float %subtract.113, 11
  %163 = getelementptr inbounds float, ptr %arg37, i32 %linear_index_base
  %164 = load float, ptr %163, align 4, !invariant.load !269
  %165 = add i32 %5, 0
  %166 = add i32 %4, 360
  %167 = getelementptr inbounds [8192 x [552 x float]], ptr %arg38, i32 0, i32 %165, i32 %166
  %168 = load float, ptr %167, align 4, !invariant.load !269
  %multiply.115 = fmul float %18, %168
  %subtract.116 = fsub float %164, %multiply.115
  %169 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, float %subtract.116, 12
  %170 = getelementptr inbounds float, ptr %arg39, i32 %linear_index_base
  %171 = load float, ptr %170, align 4, !invariant.load !269
  %172 = getelementptr inbounds [8192 x [1 x float]], ptr %arg41, i32 0, i32 %5, i32 0
  %173 = load float, ptr %172, align 4, !invariant.load !269
  %174 = add i32 %5, 0
  %175 = add i32 %4, 1752
  %176 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %174, i32 %175
  %177 = load float, ptr %176, align 4, !invariant.load !269
  %multiply.120 = fmul float %173, %177
  %multiply.121 = fmul float %18, %multiply.120
  %subtract.122 = fsub float %171, %multiply.121
  %178 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %169, float %subtract.122, 13
  %179 = getelementptr inbounds float, ptr %arg42, i32 %linear_index_base
  %180 = load float, ptr %179, align 4, !invariant.load !269
  %181 = add i32 %5, 0
  %182 = add i32 %4, 1864
  %183 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %181, i32 %182
  %184 = load float, ptr %183, align 4, !invariant.load !269
  %multiply.124 = fmul float %18, %184
  %subtract.125 = fsub float %180, %multiply.124
  %185 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, float %subtract.125, 14
  %186 = getelementptr inbounds float, ptr %arg43, i32 %linear_index_base
  %187 = load float, ptr %186, align 4, !invariant.load !269
  %188 = add i32 %5, 0
  %189 = add i32 %4, 32
  %190 = getelementptr inbounds [8192 x [352 x float]], ptr %arg44, i32 0, i32 %188, i32 %189
  %191 = load float, ptr %190, align 4, !invariant.load !269
  %multiply.127 = fmul float %18, %191
  %subtract.128 = fsub float %187, %multiply.127
  %192 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, float %subtract.128, 15
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 0
  %194 = getelementptr inbounds float, ptr %arg45, i32 %linear_index_base
  store float %193, ptr %194, align 4
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 1
  %196 = getelementptr inbounds float, ptr %arg46, i32 %linear_index_base
  store float %195, ptr %196, align 4
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 2
  %198 = getelementptr inbounds float, ptr %arg47, i32 %linear_index_base
  store float %197, ptr %198, align 4
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 3
  %200 = getelementptr inbounds float, ptr %arg48, i32 %linear_index_base
  store float %199, ptr %200, align 4
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 4
  %202 = getelementptr inbounds float, ptr %arg49, i32 %linear_index_base
  store float %201, ptr %202, align 4
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 5
  %204 = getelementptr inbounds float, ptr %arg50, i32 %linear_index_base
  store float %203, ptr %204, align 4
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 6
  %206 = getelementptr inbounds float, ptr %arg51, i32 %linear_index_base
  store float %205, ptr %206, align 4
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 7
  %208 = getelementptr inbounds float, ptr %arg52, i32 %linear_index_base
  store float %207, ptr %208, align 4
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 8
  %210 = getelementptr inbounds float, ptr %arg53, i32 %linear_index_base
  store float %209, ptr %210, align 4
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 9
  %212 = getelementptr inbounds float, ptr %arg54, i32 %linear_index_base
  store float %211, ptr %212, align 4
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 10
  %214 = getelementptr inbounds float, ptr %arg55, i32 %linear_index_base
  store float %213, ptr %214, align 4
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 11
  %216 = getelementptr inbounds float, ptr %arg56, i32 %linear_index_base
  store float %215, ptr %216, align 4
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 12
  %218 = getelementptr inbounds float, ptr %arg57, i32 %linear_index_base
  store float %217, ptr %218, align 4
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 13
  %220 = getelementptr inbounds float, ptr %arg58, i32 %linear_index_base
  store float %219, ptr %220, align 4
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 14
  %222 = getelementptr inbounds float, ptr %arg59, i32 %linear_index_base
  store float %221, ptr %222, align 4
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 15
  %224 = getelementptr inbounds float, ptr %arg60, i32 %linear_index_base
  store float %223, ptr %224, align 4
  %225 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %226 = load float, ptr %225, align 4, !invariant.load !269
  %227 = load float, ptr %arg2, align 4, !invariant.load !269
  %228 = add i32 %8, 0
  %229 = add i32 %7, 192
  %230 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %228, i32 %229
  %231 = load float, ptr %230, align 4, !invariant.load !269
  %multiply.481 = fmul float %227, %231
  %subtract.492 = fsub float %226, %multiply.481
  %232 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.492, 0
  %233 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %234 = load float, ptr %233, align 4, !invariant.load !269
  %235 = add i32 %8, 0
  %236 = add i32 %7, 0
  %237 = add i32 %235, 0
  %238 = add i32 %236, 0
  %239 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %237, i32 %238
  %240 = load float, ptr %239, align 4, !invariant.load !269
  %241 = add i32 %235, 0
  %242 = add i32 %236, 0
  %243 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %241, i32 %242
  %244 = load float, ptr %243, align 4, !invariant.load !269
  %add.523 = fadd float %240, %244
  %245 = add i32 %235, 0
  %246 = add i32 %236, 0
  %247 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %245, i32 %246
  %248 = load float, ptr %247, align 4, !invariant.load !269
  %add.544 = fadd float %add.523, %248
  %multiply.565 = fmul float %227, %add.544
  %subtract.576 = fsub float %234, %multiply.565
  %249 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %232, float %subtract.576, 1
  %250 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %251 = load float, ptr %250, align 4, !invariant.load !269
  %252 = add i32 %8, 0
  %253 = add i32 %7, 32
  %254 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %252, i32 %253
  %255 = load float, ptr %254, align 4, !invariant.load !269
  %multiply.597 = fmul float %227, %255
  %subtract.608 = fsub float %251, %multiply.597
  %256 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %249, float %subtract.608, 2
  %257 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %258 = load float, ptr %257, align 4, !invariant.load !269
  %259 = add i32 %8, 0
  %260 = add i32 %7, 32
  %261 = add i32 %259, 0
  %262 = add i32 %260, 0
  %263 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %261, i32 %262
  %264 = load float, ptr %263, align 4, !invariant.load !269
  %265 = add i32 %259, 0
  %266 = add i32 %260, 0
  %267 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %265, i32 %266
  %268 = load float, ptr %267, align 4, !invariant.load !269
  %add.639 = fadd float %264, %268
  %269 = add i32 %259, 0
  %270 = add i32 %260, 0
  %271 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %269, i32 %270
  %272 = load float, ptr %271, align 4, !invariant.load !269
  %add.6510 = fadd float %add.639, %272
  %multiply.6711 = fmul float %227, %add.6510
  %subtract.6812 = fsub float %258, %multiply.6711
  %273 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, float %subtract.6812, 3
  %274 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %275 = load float, ptr %274, align 4, !invariant.load !269
  %276 = add i32 %8, 0
  %277 = add i32 %7, 0
  %278 = add i32 %276, 0
  %279 = add i32 %277, 0
  %280 = getelementptr inbounds [8192 x [448 x float]], ptr %arg15, i32 0, i32 %278, i32 %279
  %281 = load float, ptr %280, align 4, !invariant.load !269
  %282 = add i32 %276, 0
  %283 = add i32 %277, 0
  %284 = getelementptr inbounds [8192 x [448 x float]], ptr %arg14, i32 0, i32 %282, i32 %283
  %285 = load float, ptr %284, align 4, !invariant.load !269
  %add.7113 = fadd float %281, %285
  %286 = add i32 %276, 0
  %287 = add i32 %277, 0
  %288 = getelementptr inbounds [8192 x [320 x float]], ptr %arg13, i32 0, i32 %286, i32 %287
  %289 = load float, ptr %288, align 4, !invariant.load !269
  %add.7314 = fadd float %add.7113, %289
  %multiply.7515 = fmul float %227, %add.7314
  %subtract.7616 = fsub float %275, %multiply.7515
  %290 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %273, float %subtract.7616, 4
  %291 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  %292 = load float, ptr %291, align 4, !invariant.load !269
  %293 = add i32 %8, 0
  %294 = add i32 %7, 32
  %295 = add i32 %293, 0
  %296 = add i32 %294, 0
  %297 = getelementptr inbounds [8192 x [360 x float]], ptr %arg19, i32 0, i32 %295, i32 %296
  %298 = load float, ptr %297, align 4, !invariant.load !269
  %299 = add i32 %293, 0
  %300 = add i32 %294, 0
  %301 = getelementptr inbounds [8192 x [352 x float]], ptr %arg18, i32 0, i32 %299, i32 %300
  %302 = load float, ptr %301, align 4, !invariant.load !269
  %add.7917 = fadd float %298, %302
  %303 = add i32 %293, 0
  %304 = add i32 %294, 0
  %305 = getelementptr inbounds [8192 x [224 x float]], ptr %arg17, i32 0, i32 %303, i32 %304
  %306 = load float, ptr %305, align 4, !invariant.load !269
  %add.8118 = fadd float %add.7917, %306
  %multiply.8319 = fmul float %227, %add.8118
  %subtract.8420 = fsub float %292, %multiply.8319
  %307 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %290, float %subtract.8420, 5
  %308 = getelementptr inbounds float, ptr %arg20, i32 %linear_index1
  %309 = load float, ptr %308, align 4, !invariant.load !269
  %310 = add i32 %8, 0
  %311 = add i32 %7, 32
  %312 = add i32 %310, 0
  %313 = add i32 %311, 0
  %314 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %312, i32 %313
  %315 = load float, ptr %314, align 4, !invariant.load !269
  %316 = add i32 %310, 0
  %317 = add i32 %311, 0
  %318 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %316, i32 %317
  %319 = load float, ptr %318, align 4, !invariant.load !269
  %add.8721 = fadd float %315, %319
  %320 = add i32 %310, 0
  %321 = add i32 %311, 0
  %322 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %320, i32 %321
  %323 = load float, ptr %322, align 4, !invariant.load !269
  %add.8922 = fadd float %add.8721, %323
  %multiply.9123 = fmul float %227, %add.8922
  %subtract.9224 = fsub float %309, %multiply.9123
  %324 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, float %subtract.9224, 6
  %325 = getelementptr inbounds float, ptr %arg24, i32 %linear_index1
  %326 = load float, ptr %325, align 4, !invariant.load !269
  %327 = add i32 %8, 0
  %328 = add i32 %7, 32
  %329 = add i32 %327, 0
  %330 = add i32 %328, 0
  %331 = getelementptr inbounds [8192 x [384 x float]], ptr %arg27, i32 0, i32 %329, i32 %330
  %332 = load float, ptr %331, align 4, !invariant.load !269
  %333 = add i32 %327, 0
  %334 = add i32 %328, 0
  %335 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %333, i32 %334
  %336 = load float, ptr %335, align 4, !invariant.load !269
  %add.9525 = fadd float %332, %336
  %337 = add i32 %327, 0
  %338 = add i32 %328, 0
  %339 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %337, i32 %338
  %340 = load float, ptr %339, align 4, !invariant.load !269
  %add.9726 = fadd float %add.9525, %340
  %multiply.9927 = fmul float %227, %add.9726
  %subtract.10028 = fsub float %326, %multiply.9927
  %341 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %324, float %subtract.10028, 7
  %342 = getelementptr inbounds float, ptr %arg28, i32 %linear_index1
  %343 = load float, ptr %342, align 4, !invariant.load !269
  %344 = add i32 %8, 0
  %345 = add i32 %7, 0
  %346 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %344, i32 %345
  %347 = load float, ptr %346, align 4, !invariant.load !269
  %multiply.10229 = fmul float %227, %347
  %subtract.10330 = fsub float %343, %multiply.10229
  %348 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %341, float %subtract.10330, 8
  %349 = getelementptr inbounds float, ptr %arg30, i32 %linear_index1
  %350 = load float, ptr %349, align 4, !invariant.load !269
  %351 = add i32 %8, 0
  %352 = add i32 %7, 0
  %353 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %351, i32 %352
  %354 = load float, ptr %353, align 4, !invariant.load !269
  %355 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %351, i32 %352
  %356 = load float, ptr %355, align 4, !invariant.load !269
  %add.10431 = fadd float %354, %356
  %multiply.10632 = fmul float %227, %add.10431
  %subtract.10733 = fsub float %350, %multiply.10632
  %357 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %348, float %subtract.10733, 9
  %358 = getelementptr inbounds float, ptr %arg33, i32 %linear_index1
  %359 = load float, ptr %358, align 4, !invariant.load !269
  %360 = add i32 %8, 0
  %361 = add i32 %7, 32
  %362 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %360, i32 %361
  %363 = load float, ptr %362, align 4, !invariant.load !269
  %multiply.10934 = fmul float %227, %363
  %subtract.11035 = fsub float %359, %multiply.10934
  %364 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %357, float %subtract.11035, 10
  %365 = getelementptr inbounds float, ptr %arg35, i32 %linear_index1
  %366 = load float, ptr %365, align 4, !invariant.load !269
  %367 = add i32 %8, 0
  %368 = add i32 %7, 32
  %369 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %367, i32 %368
  %370 = load float, ptr %369, align 4, !invariant.load !269
  %multiply.11236 = fmul float %227, %370
  %subtract.11337 = fsub float %366, %multiply.11236
  %371 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %364, float %subtract.11337, 11
  %372 = getelementptr inbounds float, ptr %arg37, i32 %linear_index1
  %373 = load float, ptr %372, align 4, !invariant.load !269
  %374 = add i32 %8, 0
  %375 = add i32 %7, 360
  %376 = getelementptr inbounds [8192 x [552 x float]], ptr %arg38, i32 0, i32 %374, i32 %375
  %377 = load float, ptr %376, align 4, !invariant.load !269
  %multiply.11538 = fmul float %227, %377
  %subtract.11639 = fsub float %373, %multiply.11538
  %378 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %371, float %subtract.11639, 12
  %379 = getelementptr inbounds float, ptr %arg39, i32 %linear_index1
  %380 = load float, ptr %379, align 4, !invariant.load !269
  %381 = getelementptr inbounds [8192 x [1 x float]], ptr %arg41, i32 0, i32 %8, i32 0
  %382 = load float, ptr %381, align 4, !invariant.load !269
  %383 = add i32 %8, 0
  %384 = add i32 %7, 1752
  %385 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %383, i32 %384
  %386 = load float, ptr %385, align 4, !invariant.load !269
  %multiply.12040 = fmul float %382, %386
  %multiply.12141 = fmul float %227, %multiply.12040
  %subtract.12242 = fsub float %380, %multiply.12141
  %387 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %378, float %subtract.12242, 13
  %388 = getelementptr inbounds float, ptr %arg42, i32 %linear_index1
  %389 = load float, ptr %388, align 4, !invariant.load !269
  %390 = add i32 %8, 0
  %391 = add i32 %7, 1864
  %392 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %390, i32 %391
  %393 = load float, ptr %392, align 4, !invariant.load !269
  %multiply.12443 = fmul float %227, %393
  %subtract.12544 = fsub float %389, %multiply.12443
  %394 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, float %subtract.12544, 14
  %395 = getelementptr inbounds float, ptr %arg43, i32 %linear_index1
  %396 = load float, ptr %395, align 4, !invariant.load !269
  %397 = add i32 %8, 0
  %398 = add i32 %7, 32
  %399 = getelementptr inbounds [8192 x [352 x float]], ptr %arg44, i32 0, i32 %397, i32 %398
  %400 = load float, ptr %399, align 4, !invariant.load !269
  %multiply.12745 = fmul float %227, %400
  %subtract.12846 = fsub float %396, %multiply.12745
  %401 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %394, float %subtract.12846, 15
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 0
  %403 = getelementptr inbounds float, ptr %arg45, i32 %linear_index1
  store float %402, ptr %403, align 4
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 1
  %405 = getelementptr inbounds float, ptr %arg46, i32 %linear_index1
  store float %404, ptr %405, align 4
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 2
  %407 = getelementptr inbounds float, ptr %arg47, i32 %linear_index1
  store float %406, ptr %407, align 4
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 3
  %409 = getelementptr inbounds float, ptr %arg48, i32 %linear_index1
  store float %408, ptr %409, align 4
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 4
  %411 = getelementptr inbounds float, ptr %arg49, i32 %linear_index1
  store float %410, ptr %411, align 4
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 5
  %413 = getelementptr inbounds float, ptr %arg50, i32 %linear_index1
  store float %412, ptr %413, align 4
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 6
  %415 = getelementptr inbounds float, ptr %arg51, i32 %linear_index1
  store float %414, ptr %415, align 4
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 7
  %417 = getelementptr inbounds float, ptr %arg52, i32 %linear_index1
  store float %416, ptr %417, align 4
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 8
  %419 = getelementptr inbounds float, ptr %arg53, i32 %linear_index1
  store float %418, ptr %419, align 4
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 9
  %421 = getelementptr inbounds float, ptr %arg54, i32 %linear_index1
  store float %420, ptr %421, align 4
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 10
  %423 = getelementptr inbounds float, ptr %arg55, i32 %linear_index1
  store float %422, ptr %423, align 4
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 11
  %425 = getelementptr inbounds float, ptr %arg56, i32 %linear_index1
  store float %424, ptr %425, align 4
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 12
  %427 = getelementptr inbounds float, ptr %arg57, i32 %linear_index1
  store float %426, ptr %427, align 4
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 13
  %429 = getelementptr inbounds float, ptr %arg58, i32 %linear_index1
  store float %428, ptr %429, align 4
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 14
  %431 = getelementptr inbounds float, ptr %arg59, i32 %linear_index1
  store float %430, ptr %431, align 4
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %401, 15
  %433 = getelementptr inbounds float, ptr %arg60, i32 %linear_index1
  store float %432, ptr %433, align 4
  %434 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %435 = load float, ptr %434, align 4, !invariant.load !269
  %436 = load float, ptr %arg2, align 4, !invariant.load !269
  %437 = add i32 %11, 0
  %438 = add i32 %10, 192
  %439 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %437, i32 %438
  %440 = load float, ptr %439, align 4, !invariant.load !269
  %multiply.4847 = fmul float %436, %440
  %subtract.4948 = fsub float %435, %multiply.4847
  %441 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4948, 0
  %442 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %443 = load float, ptr %442, align 4, !invariant.load !269
  %444 = add i32 %11, 0
  %445 = add i32 %10, 0
  %446 = add i32 %444, 0
  %447 = add i32 %445, 0
  %448 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %446, i32 %447
  %449 = load float, ptr %448, align 4, !invariant.load !269
  %450 = add i32 %444, 0
  %451 = add i32 %445, 0
  %452 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %450, i32 %451
  %453 = load float, ptr %452, align 4, !invariant.load !269
  %add.5249 = fadd float %449, %453
  %454 = add i32 %444, 0
  %455 = add i32 %445, 0
  %456 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %454, i32 %455
  %457 = load float, ptr %456, align 4, !invariant.load !269
  %add.5450 = fadd float %add.5249, %457
  %multiply.5651 = fmul float %436, %add.5450
  %subtract.5752 = fsub float %443, %multiply.5651
  %458 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %441, float %subtract.5752, 1
  %459 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %460 = load float, ptr %459, align 4, !invariant.load !269
  %461 = add i32 %11, 0
  %462 = add i32 %10, 32
  %463 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %461, i32 %462
  %464 = load float, ptr %463, align 4, !invariant.load !269
  %multiply.5953 = fmul float %436, %464
  %subtract.6054 = fsub float %460, %multiply.5953
  %465 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %458, float %subtract.6054, 2
  %466 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %467 = load float, ptr %466, align 4, !invariant.load !269
  %468 = add i32 %11, 0
  %469 = add i32 %10, 32
  %470 = add i32 %468, 0
  %471 = add i32 %469, 0
  %472 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %470, i32 %471
  %473 = load float, ptr %472, align 4, !invariant.load !269
  %474 = add i32 %468, 0
  %475 = add i32 %469, 0
  %476 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %474, i32 %475
  %477 = load float, ptr %476, align 4, !invariant.load !269
  %add.6355 = fadd float %473, %477
  %478 = add i32 %468, 0
  %479 = add i32 %469, 0
  %480 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %478, i32 %479
  %481 = load float, ptr %480, align 4, !invariant.load !269
  %add.6556 = fadd float %add.6355, %481
  %multiply.6757 = fmul float %436, %add.6556
  %subtract.6858 = fsub float %467, %multiply.6757
  %482 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %465, float %subtract.6858, 3
  %483 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %484 = load float, ptr %483, align 4, !invariant.load !269
  %485 = add i32 %11, 0
  %486 = add i32 %10, 0
  %487 = add i32 %485, 0
  %488 = add i32 %486, 0
  %489 = getelementptr inbounds [8192 x [448 x float]], ptr %arg15, i32 0, i32 %487, i32 %488
  %490 = load float, ptr %489, align 4, !invariant.load !269
  %491 = add i32 %485, 0
  %492 = add i32 %486, 0
  %493 = getelementptr inbounds [8192 x [448 x float]], ptr %arg14, i32 0, i32 %491, i32 %492
  %494 = load float, ptr %493, align 4, !invariant.load !269
  %add.7159 = fadd float %490, %494
  %495 = add i32 %485, 0
  %496 = add i32 %486, 0
  %497 = getelementptr inbounds [8192 x [320 x float]], ptr %arg13, i32 0, i32 %495, i32 %496
  %498 = load float, ptr %497, align 4, !invariant.load !269
  %add.7360 = fadd float %add.7159, %498
  %multiply.7561 = fmul float %436, %add.7360
  %subtract.7662 = fsub float %484, %multiply.7561
  %499 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %482, float %subtract.7662, 4
  %500 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  %501 = load float, ptr %500, align 4, !invariant.load !269
  %502 = add i32 %11, 0
  %503 = add i32 %10, 32
  %504 = add i32 %502, 0
  %505 = add i32 %503, 0
  %506 = getelementptr inbounds [8192 x [360 x float]], ptr %arg19, i32 0, i32 %504, i32 %505
  %507 = load float, ptr %506, align 4, !invariant.load !269
  %508 = add i32 %502, 0
  %509 = add i32 %503, 0
  %510 = getelementptr inbounds [8192 x [352 x float]], ptr %arg18, i32 0, i32 %508, i32 %509
  %511 = load float, ptr %510, align 4, !invariant.load !269
  %add.7963 = fadd float %507, %511
  %512 = add i32 %502, 0
  %513 = add i32 %503, 0
  %514 = getelementptr inbounds [8192 x [224 x float]], ptr %arg17, i32 0, i32 %512, i32 %513
  %515 = load float, ptr %514, align 4, !invariant.load !269
  %add.8164 = fadd float %add.7963, %515
  %multiply.8365 = fmul float %436, %add.8164
  %subtract.8466 = fsub float %501, %multiply.8365
  %516 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, float %subtract.8466, 5
  %517 = getelementptr inbounds float, ptr %arg20, i32 %linear_index2
  %518 = load float, ptr %517, align 4, !invariant.load !269
  %519 = add i32 %11, 0
  %520 = add i32 %10, 32
  %521 = add i32 %519, 0
  %522 = add i32 %520, 0
  %523 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %521, i32 %522
  %524 = load float, ptr %523, align 4, !invariant.load !269
  %525 = add i32 %519, 0
  %526 = add i32 %520, 0
  %527 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %525, i32 %526
  %528 = load float, ptr %527, align 4, !invariant.load !269
  %add.8767 = fadd float %524, %528
  %529 = add i32 %519, 0
  %530 = add i32 %520, 0
  %531 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %529, i32 %530
  %532 = load float, ptr %531, align 4, !invariant.load !269
  %add.8968 = fadd float %add.8767, %532
  %multiply.9169 = fmul float %436, %add.8968
  %subtract.9270 = fsub float %518, %multiply.9169
  %533 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %516, float %subtract.9270, 6
  %534 = getelementptr inbounds float, ptr %arg24, i32 %linear_index2
  %535 = load float, ptr %534, align 4, !invariant.load !269
  %536 = add i32 %11, 0
  %537 = add i32 %10, 32
  %538 = add i32 %536, 0
  %539 = add i32 %537, 0
  %540 = getelementptr inbounds [8192 x [384 x float]], ptr %arg27, i32 0, i32 %538, i32 %539
  %541 = load float, ptr %540, align 4, !invariant.load !269
  %542 = add i32 %536, 0
  %543 = add i32 %537, 0
  %544 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %542, i32 %543
  %545 = load float, ptr %544, align 4, !invariant.load !269
  %add.9571 = fadd float %541, %545
  %546 = add i32 %536, 0
  %547 = add i32 %537, 0
  %548 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %546, i32 %547
  %549 = load float, ptr %548, align 4, !invariant.load !269
  %add.9772 = fadd float %add.9571, %549
  %multiply.9973 = fmul float %436, %add.9772
  %subtract.10074 = fsub float %535, %multiply.9973
  %550 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %533, float %subtract.10074, 7
  %551 = getelementptr inbounds float, ptr %arg28, i32 %linear_index2
  %552 = load float, ptr %551, align 4, !invariant.load !269
  %553 = add i32 %11, 0
  %554 = add i32 %10, 0
  %555 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %553, i32 %554
  %556 = load float, ptr %555, align 4, !invariant.load !269
  %multiply.10275 = fmul float %436, %556
  %subtract.10376 = fsub float %552, %multiply.10275
  %557 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %550, float %subtract.10376, 8
  %558 = getelementptr inbounds float, ptr %arg30, i32 %linear_index2
  %559 = load float, ptr %558, align 4, !invariant.load !269
  %560 = add i32 %11, 0
  %561 = add i32 %10, 0
  %562 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %560, i32 %561
  %563 = load float, ptr %562, align 4, !invariant.load !269
  %564 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %560, i32 %561
  %565 = load float, ptr %564, align 4, !invariant.load !269
  %add.10477 = fadd float %563, %565
  %multiply.10678 = fmul float %436, %add.10477
  %subtract.10779 = fsub float %559, %multiply.10678
  %566 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %557, float %subtract.10779, 9
  %567 = getelementptr inbounds float, ptr %arg33, i32 %linear_index2
  %568 = load float, ptr %567, align 4, !invariant.load !269
  %569 = add i32 %11, 0
  %570 = add i32 %10, 32
  %571 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %569, i32 %570
  %572 = load float, ptr %571, align 4, !invariant.load !269
  %multiply.10980 = fmul float %436, %572
  %subtract.11081 = fsub float %568, %multiply.10980
  %573 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %566, float %subtract.11081, 10
  %574 = getelementptr inbounds float, ptr %arg35, i32 %linear_index2
  %575 = load float, ptr %574, align 4, !invariant.load !269
  %576 = add i32 %11, 0
  %577 = add i32 %10, 32
  %578 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %576, i32 %577
  %579 = load float, ptr %578, align 4, !invariant.load !269
  %multiply.11282 = fmul float %436, %579
  %subtract.11383 = fsub float %575, %multiply.11282
  %580 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %573, float %subtract.11383, 11
  %581 = getelementptr inbounds float, ptr %arg37, i32 %linear_index2
  %582 = load float, ptr %581, align 4, !invariant.load !269
  %583 = add i32 %11, 0
  %584 = add i32 %10, 360
  %585 = getelementptr inbounds [8192 x [552 x float]], ptr %arg38, i32 0, i32 %583, i32 %584
  %586 = load float, ptr %585, align 4, !invariant.load !269
  %multiply.11584 = fmul float %436, %586
  %subtract.11685 = fsub float %582, %multiply.11584
  %587 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %580, float %subtract.11685, 12
  %588 = getelementptr inbounds float, ptr %arg39, i32 %linear_index2
  %589 = load float, ptr %588, align 4, !invariant.load !269
  %590 = getelementptr inbounds [8192 x [1 x float]], ptr %arg41, i32 0, i32 %11, i32 0
  %591 = load float, ptr %590, align 4, !invariant.load !269
  %592 = add i32 %11, 0
  %593 = add i32 %10, 1752
  %594 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %592, i32 %593
  %595 = load float, ptr %594, align 4, !invariant.load !269
  %multiply.12086 = fmul float %591, %595
  %multiply.12187 = fmul float %436, %multiply.12086
  %subtract.12288 = fsub float %589, %multiply.12187
  %596 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %587, float %subtract.12288, 13
  %597 = getelementptr inbounds float, ptr %arg42, i32 %linear_index2
  %598 = load float, ptr %597, align 4, !invariant.load !269
  %599 = add i32 %11, 0
  %600 = add i32 %10, 1864
  %601 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %599, i32 %600
  %602 = load float, ptr %601, align 4, !invariant.load !269
  %multiply.12489 = fmul float %436, %602
  %subtract.12590 = fsub float %598, %multiply.12489
  %603 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %596, float %subtract.12590, 14
  %604 = getelementptr inbounds float, ptr %arg43, i32 %linear_index2
  %605 = load float, ptr %604, align 4, !invariant.load !269
  %606 = add i32 %11, 0
  %607 = add i32 %10, 32
  %608 = getelementptr inbounds [8192 x [352 x float]], ptr %arg44, i32 0, i32 %606, i32 %607
  %609 = load float, ptr %608, align 4, !invariant.load !269
  %multiply.12791 = fmul float %436, %609
  %subtract.12892 = fsub float %605, %multiply.12791
  %610 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %603, float %subtract.12892, 15
  %611 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 0
  %612 = getelementptr inbounds float, ptr %arg45, i32 %linear_index2
  store float %611, ptr %612, align 4
  %613 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 1
  %614 = getelementptr inbounds float, ptr %arg46, i32 %linear_index2
  store float %613, ptr %614, align 4
  %615 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 2
  %616 = getelementptr inbounds float, ptr %arg47, i32 %linear_index2
  store float %615, ptr %616, align 4
  %617 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 3
  %618 = getelementptr inbounds float, ptr %arg48, i32 %linear_index2
  store float %617, ptr %618, align 4
  %619 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 4
  %620 = getelementptr inbounds float, ptr %arg49, i32 %linear_index2
  store float %619, ptr %620, align 4
  %621 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 5
  %622 = getelementptr inbounds float, ptr %arg50, i32 %linear_index2
  store float %621, ptr %622, align 4
  %623 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 6
  %624 = getelementptr inbounds float, ptr %arg51, i32 %linear_index2
  store float %623, ptr %624, align 4
  %625 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 7
  %626 = getelementptr inbounds float, ptr %arg52, i32 %linear_index2
  store float %625, ptr %626, align 4
  %627 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 8
  %628 = getelementptr inbounds float, ptr %arg53, i32 %linear_index2
  store float %627, ptr %628, align 4
  %629 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 9
  %630 = getelementptr inbounds float, ptr %arg54, i32 %linear_index2
  store float %629, ptr %630, align 4
  %631 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 10
  %632 = getelementptr inbounds float, ptr %arg55, i32 %linear_index2
  store float %631, ptr %632, align 4
  %633 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 11
  %634 = getelementptr inbounds float, ptr %arg56, i32 %linear_index2
  store float %633, ptr %634, align 4
  %635 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 12
  %636 = getelementptr inbounds float, ptr %arg57, i32 %linear_index2
  store float %635, ptr %636, align 4
  %637 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 13
  %638 = getelementptr inbounds float, ptr %arg58, i32 %linear_index2
  store float %637, ptr %638, align 4
  %639 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 14
  %640 = getelementptr inbounds float, ptr %arg59, i32 %linear_index2
  store float %639, ptr %640, align 4
  %641 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %610, 15
  %642 = getelementptr inbounds float, ptr %arg60, i32 %linear_index2
  store float %641, ptr %642, align 4
  %643 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %644 = load float, ptr %643, align 4, !invariant.load !269
  %645 = load float, ptr %arg2, align 4, !invariant.load !269
  %646 = add i32 %14, 0
  %647 = add i32 %13, 192
  %648 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %646, i32 %647
  %649 = load float, ptr %648, align 4, !invariant.load !269
  %multiply.4893 = fmul float %645, %649
  %subtract.4994 = fsub float %644, %multiply.4893
  %650 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4994, 0
  %651 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %652 = load float, ptr %651, align 4, !invariant.load !269
  %653 = add i32 %14, 0
  %654 = add i32 %13, 0
  %655 = add i32 %653, 0
  %656 = add i32 %654, 0
  %657 = getelementptr inbounds [8192 x [264 x float]], ptr %arg1, i32 0, i32 %655, i32 %656
  %658 = load float, ptr %657, align 4, !invariant.load !269
  %659 = add i32 %653, 0
  %660 = add i32 %654, 0
  %661 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %659, i32 %660
  %662 = load float, ptr %661, align 4, !invariant.load !269
  %add.5295 = fadd float %658, %662
  %663 = add i32 %653, 0
  %664 = add i32 %654, 0
  %665 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %663, i32 %664
  %666 = load float, ptr %665, align 4, !invariant.load !269
  %add.5496 = fadd float %add.5295, %666
  %multiply.5697 = fmul float %645, %add.5496
  %subtract.5798 = fsub float %652, %multiply.5697
  %667 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %650, float %subtract.5798, 1
  %668 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %669 = load float, ptr %668, align 4, !invariant.load !269
  %670 = add i32 %14, 0
  %671 = add i32 %13, 32
  %672 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %670, i32 %671
  %673 = load float, ptr %672, align 4, !invariant.load !269
  %multiply.5999 = fmul float %645, %673
  %subtract.60100 = fsub float %669, %multiply.5999
  %674 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %667, float %subtract.60100, 2
  %675 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %676 = load float, ptr %675, align 4, !invariant.load !269
  %677 = add i32 %14, 0
  %678 = add i32 %13, 32
  %679 = add i32 %677, 0
  %680 = add i32 %678, 0
  %681 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %679, i32 %680
  %682 = load float, ptr %681, align 4, !invariant.load !269
  %683 = add i32 %677, 0
  %684 = add i32 %678, 0
  %685 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %683, i32 %684
  %686 = load float, ptr %685, align 4, !invariant.load !269
  %add.63101 = fadd float %682, %686
  %687 = add i32 %677, 0
  %688 = add i32 %678, 0
  %689 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %687, i32 %688
  %690 = load float, ptr %689, align 4, !invariant.load !269
  %add.65102 = fadd float %add.63101, %690
  %multiply.67103 = fmul float %645, %add.65102
  %subtract.68104 = fsub float %676, %multiply.67103
  %691 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %674, float %subtract.68104, 3
  %692 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %693 = load float, ptr %692, align 4, !invariant.load !269
  %694 = add i32 %14, 0
  %695 = add i32 %13, 0
  %696 = add i32 %694, 0
  %697 = add i32 %695, 0
  %698 = getelementptr inbounds [8192 x [448 x float]], ptr %arg15, i32 0, i32 %696, i32 %697
  %699 = load float, ptr %698, align 4, !invariant.load !269
  %700 = add i32 %694, 0
  %701 = add i32 %695, 0
  %702 = getelementptr inbounds [8192 x [448 x float]], ptr %arg14, i32 0, i32 %700, i32 %701
  %703 = load float, ptr %702, align 4, !invariant.load !269
  %add.71105 = fadd float %699, %703
  %704 = add i32 %694, 0
  %705 = add i32 %695, 0
  %706 = getelementptr inbounds [8192 x [320 x float]], ptr %arg13, i32 0, i32 %704, i32 %705
  %707 = load float, ptr %706, align 4, !invariant.load !269
  %add.73106 = fadd float %add.71105, %707
  %multiply.75107 = fmul float %645, %add.73106
  %subtract.76108 = fsub float %693, %multiply.75107
  %708 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %691, float %subtract.76108, 4
  %709 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  %710 = load float, ptr %709, align 4, !invariant.load !269
  %711 = add i32 %14, 0
  %712 = add i32 %13, 32
  %713 = add i32 %711, 0
  %714 = add i32 %712, 0
  %715 = getelementptr inbounds [8192 x [360 x float]], ptr %arg19, i32 0, i32 %713, i32 %714
  %716 = load float, ptr %715, align 4, !invariant.load !269
  %717 = add i32 %711, 0
  %718 = add i32 %712, 0
  %719 = getelementptr inbounds [8192 x [352 x float]], ptr %arg18, i32 0, i32 %717, i32 %718
  %720 = load float, ptr %719, align 4, !invariant.load !269
  %add.79109 = fadd float %716, %720
  %721 = add i32 %711, 0
  %722 = add i32 %712, 0
  %723 = getelementptr inbounds [8192 x [224 x float]], ptr %arg17, i32 0, i32 %721, i32 %722
  %724 = load float, ptr %723, align 4, !invariant.load !269
  %add.81110 = fadd float %add.79109, %724
  %multiply.83111 = fmul float %645, %add.81110
  %subtract.84112 = fsub float %710, %multiply.83111
  %725 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %708, float %subtract.84112, 5
  %726 = getelementptr inbounds float, ptr %arg20, i32 %linear_index3
  %727 = load float, ptr %726, align 4, !invariant.load !269
  %728 = add i32 %14, 0
  %729 = add i32 %13, 32
  %730 = add i32 %728, 0
  %731 = add i32 %729, 0
  %732 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %730, i32 %731
  %733 = load float, ptr %732, align 4, !invariant.load !269
  %734 = add i32 %728, 0
  %735 = add i32 %729, 0
  %736 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %734, i32 %735
  %737 = load float, ptr %736, align 4, !invariant.load !269
  %add.87113 = fadd float %733, %737
  %738 = add i32 %728, 0
  %739 = add i32 %729, 0
  %740 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %738, i32 %739
  %741 = load float, ptr %740, align 4, !invariant.load !269
  %add.89114 = fadd float %add.87113, %741
  %multiply.91115 = fmul float %645, %add.89114
  %subtract.92116 = fsub float %727, %multiply.91115
  %742 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %725, float %subtract.92116, 6
  %743 = getelementptr inbounds float, ptr %arg24, i32 %linear_index3
  %744 = load float, ptr %743, align 4, !invariant.load !269
  %745 = add i32 %14, 0
  %746 = add i32 %13, 32
  %747 = add i32 %745, 0
  %748 = add i32 %746, 0
  %749 = getelementptr inbounds [8192 x [384 x float]], ptr %arg27, i32 0, i32 %747, i32 %748
  %750 = load float, ptr %749, align 4, !invariant.load !269
  %751 = add i32 %745, 0
  %752 = add i32 %746, 0
  %753 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %751, i32 %752
  %754 = load float, ptr %753, align 4, !invariant.load !269
  %add.95117 = fadd float %750, %754
  %755 = add i32 %745, 0
  %756 = add i32 %746, 0
  %757 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %755, i32 %756
  %758 = load float, ptr %757, align 4, !invariant.load !269
  %add.97118 = fadd float %add.95117, %758
  %multiply.99119 = fmul float %645, %add.97118
  %subtract.100120 = fsub float %744, %multiply.99119
  %759 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %742, float %subtract.100120, 7
  %760 = getelementptr inbounds float, ptr %arg28, i32 %linear_index3
  %761 = load float, ptr %760, align 4, !invariant.load !269
  %762 = add i32 %14, 0
  %763 = add i32 %13, 0
  %764 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %762, i32 %763
  %765 = load float, ptr %764, align 4, !invariant.load !269
  %multiply.102121 = fmul float %645, %765
  %subtract.103122 = fsub float %761, %multiply.102121
  %766 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %759, float %subtract.103122, 8
  %767 = getelementptr inbounds float, ptr %arg30, i32 %linear_index3
  %768 = load float, ptr %767, align 4, !invariant.load !269
  %769 = add i32 %14, 0
  %770 = add i32 %13, 0
  %771 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %769, i32 %770
  %772 = load float, ptr %771, align 4, !invariant.load !269
  %773 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %769, i32 %770
  %774 = load float, ptr %773, align 4, !invariant.load !269
  %add.104123 = fadd float %772, %774
  %multiply.106124 = fmul float %645, %add.104123
  %subtract.107125 = fsub float %768, %multiply.106124
  %775 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %766, float %subtract.107125, 9
  %776 = getelementptr inbounds float, ptr %arg33, i32 %linear_index3
  %777 = load float, ptr %776, align 4, !invariant.load !269
  %778 = add i32 %14, 0
  %779 = add i32 %13, 32
  %780 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %778, i32 %779
  %781 = load float, ptr %780, align 4, !invariant.load !269
  %multiply.109126 = fmul float %645, %781
  %subtract.110127 = fsub float %777, %multiply.109126
  %782 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %775, float %subtract.110127, 10
  %783 = getelementptr inbounds float, ptr %arg35, i32 %linear_index3
  %784 = load float, ptr %783, align 4, !invariant.load !269
  %785 = add i32 %14, 0
  %786 = add i32 %13, 32
  %787 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %785, i32 %786
  %788 = load float, ptr %787, align 4, !invariant.load !269
  %multiply.112128 = fmul float %645, %788
  %subtract.113129 = fsub float %784, %multiply.112128
  %789 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %782, float %subtract.113129, 11
  %790 = getelementptr inbounds float, ptr %arg37, i32 %linear_index3
  %791 = load float, ptr %790, align 4, !invariant.load !269
  %792 = add i32 %14, 0
  %793 = add i32 %13, 360
  %794 = getelementptr inbounds [8192 x [552 x float]], ptr %arg38, i32 0, i32 %792, i32 %793
  %795 = load float, ptr %794, align 4, !invariant.load !269
  %multiply.115130 = fmul float %645, %795
  %subtract.116131 = fsub float %791, %multiply.115130
  %796 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %789, float %subtract.116131, 12
  %797 = getelementptr inbounds float, ptr %arg39, i32 %linear_index3
  %798 = load float, ptr %797, align 4, !invariant.load !269
  %799 = getelementptr inbounds [8192 x [1 x float]], ptr %arg41, i32 0, i32 %14, i32 0
  %800 = load float, ptr %799, align 4, !invariant.load !269
  %801 = add i32 %14, 0
  %802 = add i32 %13, 1752
  %803 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %801, i32 %802
  %804 = load float, ptr %803, align 4, !invariant.load !269
  %multiply.120132 = fmul float %800, %804
  %multiply.121133 = fmul float %645, %multiply.120132
  %subtract.122134 = fsub float %798, %multiply.121133
  %805 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %796, float %subtract.122134, 13
  %806 = getelementptr inbounds float, ptr %arg42, i32 %linear_index3
  %807 = load float, ptr %806, align 4, !invariant.load !269
  %808 = add i32 %14, 0
  %809 = add i32 %13, 1864
  %810 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg40, i32 0, i32 %808, i32 %809
  %811 = load float, ptr %810, align 4, !invariant.load !269
  %multiply.124135 = fmul float %645, %811
  %subtract.125136 = fsub float %807, %multiply.124135
  %812 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %805, float %subtract.125136, 14
  %813 = getelementptr inbounds float, ptr %arg43, i32 %linear_index3
  %814 = load float, ptr %813, align 4, !invariant.load !269
  %815 = add i32 %14, 0
  %816 = add i32 %13, 32
  %817 = getelementptr inbounds [8192 x [352 x float]], ptr %arg44, i32 0, i32 %815, i32 %816
  %818 = load float, ptr %817, align 4, !invariant.load !269
  %multiply.127137 = fmul float %645, %818
  %subtract.128138 = fsub float %814, %multiply.127137
  %819 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %812, float %subtract.128138, 15
  %820 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 0
  %821 = getelementptr inbounds float, ptr %arg45, i32 %linear_index3
  store float %820, ptr %821, align 4
  %822 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 1
  %823 = getelementptr inbounds float, ptr %arg46, i32 %linear_index3
  store float %822, ptr %823, align 4
  %824 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 2
  %825 = getelementptr inbounds float, ptr %arg47, i32 %linear_index3
  store float %824, ptr %825, align 4
  %826 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 3
  %827 = getelementptr inbounds float, ptr %arg48, i32 %linear_index3
  store float %826, ptr %827, align 4
  %828 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 4
  %829 = getelementptr inbounds float, ptr %arg49, i32 %linear_index3
  store float %828, ptr %829, align 4
  %830 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 5
  %831 = getelementptr inbounds float, ptr %arg50, i32 %linear_index3
  store float %830, ptr %831, align 4
  %832 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 6
  %833 = getelementptr inbounds float, ptr %arg51, i32 %linear_index3
  store float %832, ptr %833, align 4
  %834 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 7
  %835 = getelementptr inbounds float, ptr %arg52, i32 %linear_index3
  store float %834, ptr %835, align 4
  %836 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 8
  %837 = getelementptr inbounds float, ptr %arg53, i32 %linear_index3
  store float %836, ptr %837, align 4
  %838 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 9
  %839 = getelementptr inbounds float, ptr %arg54, i32 %linear_index3
  store float %838, ptr %839, align 4
  %840 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 10
  %841 = getelementptr inbounds float, ptr %arg55, i32 %linear_index3
  store float %840, ptr %841, align 4
  %842 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 11
  %843 = getelementptr inbounds float, ptr %arg56, i32 %linear_index3
  store float %842, ptr %843, align 4
  %844 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 12
  %845 = getelementptr inbounds float, ptr %arg57, i32 %linear_index3
  store float %844, ptr %845, align 4
  %846 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 13
  %847 = getelementptr inbounds float, ptr %arg58, i32 %linear_index3
  store float %846, ptr %847, align 4
  %848 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 14
  %849 = getelementptr inbounds float, ptr %arg59, i32 %linear_index3
  store float %848, ptr %849, align 4
  %850 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %819, 15
  %851 = getelementptr inbounds float, ptr %arg60, i32 %linear_index3
  store float %850, ptr %851, align 4
  br label %fusion_359.in_bounds-after
}

define void @fusion_352(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(10485760) %arg2, ptr noalias align 128 dereferenceable(14680064) %arg3, ptr noalias align 128 dereferenceable(8650752) %arg4, ptr noalias align 16 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(10485760) %arg6, ptr noalias align 128 dereferenceable(14680064) %arg7, ptr noalias align 128 dereferenceable(14680064) %arg8, ptr noalias align 16 dereferenceable(4194304) %arg9, ptr noalias align 128 dereferenceable(6291456) %arg10, ptr noalias align 16 dereferenceable(4194304) %arg11, ptr noalias align 128 dereferenceable(14680064) %arg12, ptr noalias align 128 dereferenceable(14680064) %arg13, ptr noalias align 16 dereferenceable(4194304) %arg14, ptr noalias align 128 dereferenceable(18087936) %arg15, ptr noalias align 16 dereferenceable(4194304) %arg16, ptr noalias align 128 dereferenceable(67371008) %arg17, ptr noalias align 128 dereferenceable(4194304) %arg18, ptr noalias align 128 dereferenceable(4194304) %arg19, ptr noalias align 128 dereferenceable(4194304) %arg20, ptr noalias align 128 dereferenceable(4194304) %arg21, ptr noalias align 128 dereferenceable(4194304) %arg22, ptr noalias align 128 dereferenceable(4194304) %arg23) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !317
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 262144
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index_base, 128
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 128
  %8 = udiv i32 %linear_index1, 128
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 128
  %11 = udiv i32 %linear_index2, 128
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 128
  %14 = udiv i32 %linear_index3, 128
  %15 = icmp ult i32 %linear_index_base, 1048576
  br i1 %15, label %fusion_352.in_bounds-true, label %fusion_352.in_bounds-after

fusion_352.in_bounds-after:                       ; preds = %fusion_352.in_bounds-true, %entry
  ret void

fusion_352.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg1, align 4, !invariant.load !269
  %19 = add i32 %5, 0
  %20 = add i32 %4, 64
  %21 = add i32 %19, 0
  %22 = add i32 %20, 0
  %23 = getelementptr inbounds [8192 x [264 x float]], ptr %arg4, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = add i32 %19, 0
  %26 = add i32 %20, 0
  %27 = getelementptr inbounds [8192 x [448 x float]], ptr %arg3, i32 0, i32 %25, i32 %26
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %add.22 = fadd float %24, %28
  %29 = add i32 %19, 0
  %30 = add i32 %20, 0
  %31 = getelementptr inbounds [8192 x [320 x float]], ptr %arg2, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %add.24 = fadd float %add.22, %32
  %multiply.26 = fmul float %18, %add.24
  %subtract.27 = fsub float %17, %multiply.26
  %33 = insertvalue { float, float, float, float, float, float } undef, float %subtract.27, 0
  %34 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = add i32 %5, 0
  %37 = add i32 %4, 64
  %38 = add i32 %36, 0
  %39 = add i32 %37, 0
  %40 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %42 = add i32 %36, 0
  %43 = add i32 %37, 0
  %44 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %42, i32 %43
  %45 = load float, ptr %44, align 4, !invariant.load !269
  %add.30 = fadd float %41, %45
  %46 = add i32 %36, 0
  %47 = add i32 %37, 0
  %48 = getelementptr inbounds [8192 x [320 x float]], ptr %arg6, i32 0, i32 %46, i32 %47
  %49 = load float, ptr %48, align 4, !invariant.load !269
  %add.32 = fadd float %add.30, %49
  %multiply.34 = fmul float %18, %add.32
  %subtract.35 = fsub float %35, %multiply.34
  %50 = insertvalue { float, float, float, float, float, float } %33, float %subtract.35, 1
  %51 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %52 = load float, ptr %51, align 4, !invariant.load !269
  %53 = add i32 %5, 0
  %54 = add i32 %4, 64
  %55 = getelementptr inbounds [8192 x [192 x float]], ptr %arg10, i32 0, i32 %53, i32 %54
  %56 = load float, ptr %55, align 4, !invariant.load !269
  %multiply.37 = fmul float %18, %56
  %subtract.38 = fsub float %52, %multiply.37
  %57 = insertvalue { float, float, float, float, float, float } %50, float %subtract.38, 2
  %58 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %59 = load float, ptr %58, align 4, !invariant.load !269
  %60 = add i32 %5, 0
  %61 = add i32 %4, 64
  %62 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %60, i32 %61
  %63 = load float, ptr %62, align 4, !invariant.load !269
  %64 = getelementptr inbounds [8192 x [448 x float]], ptr %arg13, i32 0, i32 %60, i32 %61
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %add.39 = fadd float %63, %65
  %multiply.41 = fmul float %18, %add.39
  %subtract.42 = fsub float %59, %multiply.41
  %66 = insertvalue { float, float, float, float, float, float } %57, float %subtract.42, 3
  %67 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  %68 = load float, ptr %67, align 4, !invariant.load !269
  %69 = add i32 %5, 0
  %70 = add i32 %4, 424
  %71 = getelementptr inbounds [8192 x [552 x float]], ptr %arg15, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !269
  %multiply.44 = fmul float %18, %72
  %subtract.45 = fsub float %68, %multiply.44
  %73 = insertvalue { float, float, float, float, float, float } %66, float %subtract.45, 4
  %74 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %76 = add i32 %5, 0
  %77 = add i32 %4, 1928
  %78 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg17, i32 0, i32 %76, i32 %77
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %multiply.47 = fmul float %18, %79
  %subtract.48 = fsub float %75, %multiply.47
  %80 = insertvalue { float, float, float, float, float, float } %73, float %subtract.48, 5
  %81 = extractvalue { float, float, float, float, float, float } %80, 0
  %82 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  store float %81, ptr %82, align 4
  %83 = extractvalue { float, float, float, float, float, float } %80, 1
  %84 = getelementptr inbounds float, ptr %arg19, i32 %linear_index_base
  store float %83, ptr %84, align 4
  %85 = extractvalue { float, float, float, float, float, float } %80, 2
  %86 = getelementptr inbounds float, ptr %arg20, i32 %linear_index_base
  store float %85, ptr %86, align 4
  %87 = extractvalue { float, float, float, float, float, float } %80, 3
  %88 = getelementptr inbounds float, ptr %arg21, i32 %linear_index_base
  store float %87, ptr %88, align 4
  %89 = extractvalue { float, float, float, float, float, float } %80, 4
  %90 = getelementptr inbounds float, ptr %arg22, i32 %linear_index_base
  store float %89, ptr %90, align 4
  %91 = extractvalue { float, float, float, float, float, float } %80, 5
  %92 = getelementptr inbounds float, ptr %arg23, i32 %linear_index_base
  store float %91, ptr %92, align 4
  %93 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %94 = load float, ptr %93, align 4, !invariant.load !269
  %95 = load float, ptr %arg1, align 4, !invariant.load !269
  %96 = add i32 %8, 0
  %97 = add i32 %7, 64
  %98 = add i32 %96, 0
  %99 = add i32 %97, 0
  %100 = getelementptr inbounds [8192 x [264 x float]], ptr %arg4, i32 0, i32 %98, i32 %99
  %101 = load float, ptr %100, align 4, !invariant.load !269
  %102 = add i32 %96, 0
  %103 = add i32 %97, 0
  %104 = getelementptr inbounds [8192 x [448 x float]], ptr %arg3, i32 0, i32 %102, i32 %103
  %105 = load float, ptr %104, align 4, !invariant.load !269
  %add.221 = fadd float %101, %105
  %106 = add i32 %96, 0
  %107 = add i32 %97, 0
  %108 = getelementptr inbounds [8192 x [320 x float]], ptr %arg2, i32 0, i32 %106, i32 %107
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %add.242 = fadd float %add.221, %109
  %multiply.263 = fmul float %95, %add.242
  %subtract.274 = fsub float %94, %multiply.263
  %110 = insertvalue { float, float, float, float, float, float } undef, float %subtract.274, 0
  %111 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %112 = load float, ptr %111, align 4, !invariant.load !269
  %113 = add i32 %8, 0
  %114 = add i32 %7, 64
  %115 = add i32 %113, 0
  %116 = add i32 %114, 0
  %117 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !269
  %119 = add i32 %113, 0
  %120 = add i32 %114, 0
  %121 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %119, i32 %120
  %122 = load float, ptr %121, align 4, !invariant.load !269
  %add.305 = fadd float %118, %122
  %123 = add i32 %113, 0
  %124 = add i32 %114, 0
  %125 = getelementptr inbounds [8192 x [320 x float]], ptr %arg6, i32 0, i32 %123, i32 %124
  %126 = load float, ptr %125, align 4, !invariant.load !269
  %add.326 = fadd float %add.305, %126
  %multiply.347 = fmul float %95, %add.326
  %subtract.358 = fsub float %112, %multiply.347
  %127 = insertvalue { float, float, float, float, float, float } %110, float %subtract.358, 1
  %128 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %129 = load float, ptr %128, align 4, !invariant.load !269
  %130 = add i32 %8, 0
  %131 = add i32 %7, 64
  %132 = getelementptr inbounds [8192 x [192 x float]], ptr %arg10, i32 0, i32 %130, i32 %131
  %133 = load float, ptr %132, align 4, !invariant.load !269
  %multiply.379 = fmul float %95, %133
  %subtract.3810 = fsub float %129, %multiply.379
  %134 = insertvalue { float, float, float, float, float, float } %127, float %subtract.3810, 2
  %135 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %136 = load float, ptr %135, align 4, !invariant.load !269
  %137 = add i32 %8, 0
  %138 = add i32 %7, 64
  %139 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %137, i32 %138
  %140 = load float, ptr %139, align 4, !invariant.load !269
  %141 = getelementptr inbounds [8192 x [448 x float]], ptr %arg13, i32 0, i32 %137, i32 %138
  %142 = load float, ptr %141, align 4, !invariant.load !269
  %add.3911 = fadd float %140, %142
  %multiply.4112 = fmul float %95, %add.3911
  %subtract.4213 = fsub float %136, %multiply.4112
  %143 = insertvalue { float, float, float, float, float, float } %134, float %subtract.4213, 3
  %144 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  %145 = load float, ptr %144, align 4, !invariant.load !269
  %146 = add i32 %8, 0
  %147 = add i32 %7, 424
  %148 = getelementptr inbounds [8192 x [552 x float]], ptr %arg15, i32 0, i32 %146, i32 %147
  %149 = load float, ptr %148, align 4, !invariant.load !269
  %multiply.4414 = fmul float %95, %149
  %subtract.4515 = fsub float %145, %multiply.4414
  %150 = insertvalue { float, float, float, float, float, float } %143, float %subtract.4515, 4
  %151 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  %152 = load float, ptr %151, align 4, !invariant.load !269
  %153 = add i32 %8, 0
  %154 = add i32 %7, 1928
  %155 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg17, i32 0, i32 %153, i32 %154
  %156 = load float, ptr %155, align 4, !invariant.load !269
  %multiply.4716 = fmul float %95, %156
  %subtract.4817 = fsub float %152, %multiply.4716
  %157 = insertvalue { float, float, float, float, float, float } %150, float %subtract.4817, 5
  %158 = extractvalue { float, float, float, float, float, float } %157, 0
  %159 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float } %157, 1
  %161 = getelementptr inbounds float, ptr %arg19, i32 %linear_index1
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float } %157, 2
  %163 = getelementptr inbounds float, ptr %arg20, i32 %linear_index1
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float } %157, 3
  %165 = getelementptr inbounds float, ptr %arg21, i32 %linear_index1
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float } %157, 4
  %167 = getelementptr inbounds float, ptr %arg22, i32 %linear_index1
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float } %157, 5
  %169 = getelementptr inbounds float, ptr %arg23, i32 %linear_index1
  store float %168, ptr %169, align 4
  %170 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %171 = load float, ptr %170, align 4, !invariant.load !269
  %172 = load float, ptr %arg1, align 4, !invariant.load !269
  %173 = add i32 %11, 0
  %174 = add i32 %10, 64
  %175 = add i32 %173, 0
  %176 = add i32 %174, 0
  %177 = getelementptr inbounds [8192 x [264 x float]], ptr %arg4, i32 0, i32 %175, i32 %176
  %178 = load float, ptr %177, align 4, !invariant.load !269
  %179 = add i32 %173, 0
  %180 = add i32 %174, 0
  %181 = getelementptr inbounds [8192 x [448 x float]], ptr %arg3, i32 0, i32 %179, i32 %180
  %182 = load float, ptr %181, align 4, !invariant.load !269
  %add.2218 = fadd float %178, %182
  %183 = add i32 %173, 0
  %184 = add i32 %174, 0
  %185 = getelementptr inbounds [8192 x [320 x float]], ptr %arg2, i32 0, i32 %183, i32 %184
  %186 = load float, ptr %185, align 4, !invariant.load !269
  %add.2419 = fadd float %add.2218, %186
  %multiply.2620 = fmul float %172, %add.2419
  %subtract.2721 = fsub float %171, %multiply.2620
  %187 = insertvalue { float, float, float, float, float, float } undef, float %subtract.2721, 0
  %188 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %189 = load float, ptr %188, align 4, !invariant.load !269
  %190 = add i32 %11, 0
  %191 = add i32 %10, 64
  %192 = add i32 %190, 0
  %193 = add i32 %191, 0
  %194 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %192, i32 %193
  %195 = load float, ptr %194, align 4, !invariant.load !269
  %196 = add i32 %190, 0
  %197 = add i32 %191, 0
  %198 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %196, i32 %197
  %199 = load float, ptr %198, align 4, !invariant.load !269
  %add.3022 = fadd float %195, %199
  %200 = add i32 %190, 0
  %201 = add i32 %191, 0
  %202 = getelementptr inbounds [8192 x [320 x float]], ptr %arg6, i32 0, i32 %200, i32 %201
  %203 = load float, ptr %202, align 4, !invariant.load !269
  %add.3223 = fadd float %add.3022, %203
  %multiply.3424 = fmul float %172, %add.3223
  %subtract.3525 = fsub float %189, %multiply.3424
  %204 = insertvalue { float, float, float, float, float, float } %187, float %subtract.3525, 1
  %205 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %206 = load float, ptr %205, align 4, !invariant.load !269
  %207 = add i32 %11, 0
  %208 = add i32 %10, 64
  %209 = getelementptr inbounds [8192 x [192 x float]], ptr %arg10, i32 0, i32 %207, i32 %208
  %210 = load float, ptr %209, align 4, !invariant.load !269
  %multiply.3726 = fmul float %172, %210
  %subtract.3827 = fsub float %206, %multiply.3726
  %211 = insertvalue { float, float, float, float, float, float } %204, float %subtract.3827, 2
  %212 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %213 = load float, ptr %212, align 4, !invariant.load !269
  %214 = add i32 %11, 0
  %215 = add i32 %10, 64
  %216 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %214, i32 %215
  %217 = load float, ptr %216, align 4, !invariant.load !269
  %218 = getelementptr inbounds [8192 x [448 x float]], ptr %arg13, i32 0, i32 %214, i32 %215
  %219 = load float, ptr %218, align 4, !invariant.load !269
  %add.3928 = fadd float %217, %219
  %multiply.4129 = fmul float %172, %add.3928
  %subtract.4230 = fsub float %213, %multiply.4129
  %220 = insertvalue { float, float, float, float, float, float } %211, float %subtract.4230, 3
  %221 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  %222 = load float, ptr %221, align 4, !invariant.load !269
  %223 = add i32 %11, 0
  %224 = add i32 %10, 424
  %225 = getelementptr inbounds [8192 x [552 x float]], ptr %arg15, i32 0, i32 %223, i32 %224
  %226 = load float, ptr %225, align 4, !invariant.load !269
  %multiply.4431 = fmul float %172, %226
  %subtract.4532 = fsub float %222, %multiply.4431
  %227 = insertvalue { float, float, float, float, float, float } %220, float %subtract.4532, 4
  %228 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  %229 = load float, ptr %228, align 4, !invariant.load !269
  %230 = add i32 %11, 0
  %231 = add i32 %10, 1928
  %232 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg17, i32 0, i32 %230, i32 %231
  %233 = load float, ptr %232, align 4, !invariant.load !269
  %multiply.4733 = fmul float %172, %233
  %subtract.4834 = fsub float %229, %multiply.4733
  %234 = insertvalue { float, float, float, float, float, float } %227, float %subtract.4834, 5
  %235 = extractvalue { float, float, float, float, float, float } %234, 0
  %236 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  store float %235, ptr %236, align 4
  %237 = extractvalue { float, float, float, float, float, float } %234, 1
  %238 = getelementptr inbounds float, ptr %arg19, i32 %linear_index2
  store float %237, ptr %238, align 4
  %239 = extractvalue { float, float, float, float, float, float } %234, 2
  %240 = getelementptr inbounds float, ptr %arg20, i32 %linear_index2
  store float %239, ptr %240, align 4
  %241 = extractvalue { float, float, float, float, float, float } %234, 3
  %242 = getelementptr inbounds float, ptr %arg21, i32 %linear_index2
  store float %241, ptr %242, align 4
  %243 = extractvalue { float, float, float, float, float, float } %234, 4
  %244 = getelementptr inbounds float, ptr %arg22, i32 %linear_index2
  store float %243, ptr %244, align 4
  %245 = extractvalue { float, float, float, float, float, float } %234, 5
  %246 = getelementptr inbounds float, ptr %arg23, i32 %linear_index2
  store float %245, ptr %246, align 4
  %247 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %248 = load float, ptr %247, align 4, !invariant.load !269
  %249 = load float, ptr %arg1, align 4, !invariant.load !269
  %250 = add i32 %14, 0
  %251 = add i32 %13, 64
  %252 = add i32 %250, 0
  %253 = add i32 %251, 0
  %254 = getelementptr inbounds [8192 x [264 x float]], ptr %arg4, i32 0, i32 %252, i32 %253
  %255 = load float, ptr %254, align 4, !invariant.load !269
  %256 = add i32 %250, 0
  %257 = add i32 %251, 0
  %258 = getelementptr inbounds [8192 x [448 x float]], ptr %arg3, i32 0, i32 %256, i32 %257
  %259 = load float, ptr %258, align 4, !invariant.load !269
  %add.2235 = fadd float %255, %259
  %260 = add i32 %250, 0
  %261 = add i32 %251, 0
  %262 = getelementptr inbounds [8192 x [320 x float]], ptr %arg2, i32 0, i32 %260, i32 %261
  %263 = load float, ptr %262, align 4, !invariant.load !269
  %add.2436 = fadd float %add.2235, %263
  %multiply.2637 = fmul float %249, %add.2436
  %subtract.2738 = fsub float %248, %multiply.2637
  %264 = insertvalue { float, float, float, float, float, float } undef, float %subtract.2738, 0
  %265 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %266 = load float, ptr %265, align 4, !invariant.load !269
  %267 = add i32 %14, 0
  %268 = add i32 %13, 64
  %269 = add i32 %267, 0
  %270 = add i32 %268, 0
  %271 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %269, i32 %270
  %272 = load float, ptr %271, align 4, !invariant.load !269
  %273 = add i32 %267, 0
  %274 = add i32 %268, 0
  %275 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %273, i32 %274
  %276 = load float, ptr %275, align 4, !invariant.load !269
  %add.3039 = fadd float %272, %276
  %277 = add i32 %267, 0
  %278 = add i32 %268, 0
  %279 = getelementptr inbounds [8192 x [320 x float]], ptr %arg6, i32 0, i32 %277, i32 %278
  %280 = load float, ptr %279, align 4, !invariant.load !269
  %add.3240 = fadd float %add.3039, %280
  %multiply.3441 = fmul float %249, %add.3240
  %subtract.3542 = fsub float %266, %multiply.3441
  %281 = insertvalue { float, float, float, float, float, float } %264, float %subtract.3542, 1
  %282 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %283 = load float, ptr %282, align 4, !invariant.load !269
  %284 = add i32 %14, 0
  %285 = add i32 %13, 64
  %286 = getelementptr inbounds [8192 x [192 x float]], ptr %arg10, i32 0, i32 %284, i32 %285
  %287 = load float, ptr %286, align 4, !invariant.load !269
  %multiply.3743 = fmul float %249, %287
  %subtract.3844 = fsub float %283, %multiply.3743
  %288 = insertvalue { float, float, float, float, float, float } %281, float %subtract.3844, 2
  %289 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %290 = load float, ptr %289, align 4, !invariant.load !269
  %291 = add i32 %14, 0
  %292 = add i32 %13, 64
  %293 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %291, i32 %292
  %294 = load float, ptr %293, align 4, !invariant.load !269
  %295 = getelementptr inbounds [8192 x [448 x float]], ptr %arg13, i32 0, i32 %291, i32 %292
  %296 = load float, ptr %295, align 4, !invariant.load !269
  %add.3945 = fadd float %294, %296
  %multiply.4146 = fmul float %249, %add.3945
  %subtract.4247 = fsub float %290, %multiply.4146
  %297 = insertvalue { float, float, float, float, float, float } %288, float %subtract.4247, 3
  %298 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  %299 = load float, ptr %298, align 4, !invariant.load !269
  %300 = add i32 %14, 0
  %301 = add i32 %13, 424
  %302 = getelementptr inbounds [8192 x [552 x float]], ptr %arg15, i32 0, i32 %300, i32 %301
  %303 = load float, ptr %302, align 4, !invariant.load !269
  %multiply.4448 = fmul float %249, %303
  %subtract.4549 = fsub float %299, %multiply.4448
  %304 = insertvalue { float, float, float, float, float, float } %297, float %subtract.4549, 4
  %305 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  %306 = load float, ptr %305, align 4, !invariant.load !269
  %307 = add i32 %14, 0
  %308 = add i32 %13, 1928
  %309 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg17, i32 0, i32 %307, i32 %308
  %310 = load float, ptr %309, align 4, !invariant.load !269
  %multiply.4750 = fmul float %249, %310
  %subtract.4851 = fsub float %306, %multiply.4750
  %311 = insertvalue { float, float, float, float, float, float } %304, float %subtract.4851, 5
  %312 = extractvalue { float, float, float, float, float, float } %311, 0
  %313 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  store float %312, ptr %313, align 4
  %314 = extractvalue { float, float, float, float, float, float } %311, 1
  %315 = getelementptr inbounds float, ptr %arg19, i32 %linear_index3
  store float %314, ptr %315, align 4
  %316 = extractvalue { float, float, float, float, float, float } %311, 2
  %317 = getelementptr inbounds float, ptr %arg20, i32 %linear_index3
  store float %316, ptr %317, align 4
  %318 = extractvalue { float, float, float, float, float, float } %311, 3
  %319 = getelementptr inbounds float, ptr %arg21, i32 %linear_index3
  store float %318, ptr %319, align 4
  %320 = extractvalue { float, float, float, float, float, float } %311, 4
  %321 = getelementptr inbounds float, ptr %arg22, i32 %linear_index3
  store float %320, ptr %321, align 4
  %322 = extractvalue { float, float, float, float, float, float } %311, 5
  %323 = getelementptr inbounds float, ptr %arg23, i32 %linear_index3
  store float %322, ptr %323, align 4
  br label %fusion_352.in_bounds-after
}

define void @add_151(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(48496640) %arg1, ptr noalias align 128 dereferenceable(48496640) %arg2) {
entry:
  %loop.invar_address = alloca i32, align 4
  store i32 0, ptr %loop.invar_address, align 4
  br label %loop.loop_header

loop.loop_header:                                 ; preds = %add_151.in_bounds-after, %entry
  %loop.indvar = load i32, ptr %loop.invar_address, align 4
  %0 = icmp uge i32 %loop.indvar, 12124160
  br i1 %0, label %loop.loop_exit, label %loop.loop_body

loop.loop_body:                                   ; preds = %loop.loop_header
  %invar.inc = add nuw nsw i32 %loop.indvar, 442368
  store i32 %invar.inc, ptr %loop.invar_address, align 4
  %1 = icmp eq i32 %loop.indvar, 0
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !390
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !340
  %4 = mul nuw nsw i32 %2, 128
  %linear_index = add nuw nsw i32 %4, %3
  %linear_index_in_range = icmp ult i32 %linear_index, 110592
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %linear_index_plus_base = add nuw nsw i32 %linear_index_base, %loop.indvar
  %5 = udiv i32 %linear_index_plus_base, 1
  %6 = urem i32 %5, 1480
  %7 = udiv i32 %linear_index_plus_base, 1480
  %linear_index1 = add nuw nsw i32 %linear_index_plus_base, 1
  %8 = udiv i32 %linear_index1, 1
  %9 = urem i32 %8, 1480
  %10 = udiv i32 %linear_index1, 1480
  %linear_index2 = add nuw nsw i32 %linear_index_plus_base, 2
  %11 = udiv i32 %linear_index2, 1
  %12 = urem i32 %11, 1480
  %13 = udiv i32 %linear_index2, 1480
  %linear_index3 = add nuw nsw i32 %linear_index_plus_base, 3
  %14 = udiv i32 %linear_index3, 1
  %15 = urem i32 %14, 1480
  %16 = udiv i32 %linear_index3, 1480
  %17 = icmp ult i32 %linear_index_plus_base, 12124160
  br i1 %17, label %add_151.in_bounds-true, label %add_151.in_bounds-after

add_151.in_bounds-after:                          ; preds = %add_151.in_bounds-true, %loop.loop_body
  br label %loop.loop_header, !llvm.loop !478

loop.loop_exit:                                   ; preds = %loop.loop_header
  ret void

add_151.in_bounds-true:                           ; preds = %loop.loop_body
  %18 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_plus_base
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_plus_base
  %21 = load float, ptr %20, align 4, !invariant.load !269
  %add.3 = fadd float %19, %21
  %22 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_plus_base
  store float %add.3, ptr %22, align 4
  %23 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %add.31 = fadd float %24, %26
  %27 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %add.31, ptr %27, align 4
  %28 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %31 = load float, ptr %30, align 4, !invariant.load !269
  %add.32 = fadd float %29, %31
  %32 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %add.32, ptr %32, align 4
  %33 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %36 = load float, ptr %35, align 4, !invariant.load !269
  %add.33 = fadd float %34, %36
  %37 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %add.33, ptr %37, align 4
  br label %add_151.in_bounds-after
}

define void @slice_659(ptr noalias align 128 dereferenceable(63438848) %arg0, ptr noalias align 128 dereferenceable(4194304) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !317
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 262144
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index_base, 128
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 128
  %8 = udiv i32 %linear_index1, 128
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 128
  %11 = udiv i32 %linear_index2, 128
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 128
  %14 = udiv i32 %linear_index3, 128
  %15 = icmp ult i32 %linear_index_base, 1048576
  br i1 %15, label %slice_659.in_bounds-true, label %slice_659.in_bounds-after

slice_659.in_bounds-after:                        ; preds = %slice_659.in_bounds-true, %entry
  ret void

slice_659.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 0
  %23 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 0
  %28 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 0
  %33 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_659.in_bounds-after
}

define void @slice_664(ptr noalias align 128 dereferenceable(63438848) %arg0, ptr noalias align 128 dereferenceable(8388608) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !427
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 524288
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 2097152
  br i1 %15, label %slice_664.in_bounds-true, label %slice_664.in_bounds-after

slice_664.in_bounds-after:                        ; preds = %slice_664.in_bounds-true, %entry
  ret void

slice_664.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 128
  %18 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 128
  %23 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 128
  %28 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 128
  %33 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !269
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_664.in_bounds-after
}

define void @fusion_1(ptr noalias align 16 dereferenceable(1835008) %arg0, ptr noalias align 128 dereferenceable(14417920) %arg1, ptr noalias align 128 dereferenceable(63438848) %arg2, ptr noalias align 128 dereferenceable(1835008) %arg3, ptr noalias align 128 dereferenceable(63438848) %arg4, ptr noalias align 16 dereferenceable(4) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !448
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 114688
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 56
  %5 = udiv i32 %linear_index_base, 56
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 56
  %8 = udiv i32 %linear_index1, 56
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 56
  %11 = udiv i32 %linear_index2, 56
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 56
  %14 = udiv i32 %linear_index3, 56
  %15 = icmp ult i32 %linear_index_base, 458752
  br i1 %15, label %fusion_1.in_bounds-true, label %fusion_1.in_bounds-after

fusion_1.in_bounds-after:                         ; preds = %fusion_1.in_bounds-true, %entry
  ret void

fusion_1.in_bounds-true:                          ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg5, align 4, !invariant.load !269
  %19 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %20 = load float, ptr %19, align 4
  %21 = add i32 %5, 0
  %22 = add i32 %4, 384
  %23 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg4, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !269
  %add.9 = fadd float %20, %24
  %25 = add i32 %5, 0
  %26 = add i32 %4, 384
  %27 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg2, i32 0, i32 %25, i32 %26
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %add.11 = fadd float %add.9, %28
  %29 = add i32 %5, 0
  %30 = add i32 %4, 384
  %31 = getelementptr inbounds [8192 x [440 x float]], ptr %arg1, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %add.13 = fadd float %add.11, %32
  %multiply.14 = fmul float %18, %add.13
  %subtract.15 = fsub float %17, %multiply.14
  %33 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %subtract.15, ptr %33, align 4
  %34 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %35 = load float, ptr %34, align 4, !invariant.load !269
  %36 = load float, ptr %arg5, align 4, !invariant.load !269
  %37 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %38 = load float, ptr %37, align 4
  %39 = add i32 %8, 0
  %40 = add i32 %7, 384
  %41 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg4, i32 0, i32 %39, i32 %40
  %42 = load float, ptr %41, align 4, !invariant.load !269
  %add.91 = fadd float %38, %42
  %43 = add i32 %8, 0
  %44 = add i32 %7, 384
  %45 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg2, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %add.112 = fadd float %add.91, %46
  %47 = add i32 %8, 0
  %48 = add i32 %7, 384
  %49 = getelementptr inbounds [8192 x [440 x float]], ptr %arg1, i32 0, i32 %47, i32 %48
  %50 = load float, ptr %49, align 4, !invariant.load !269
  %add.133 = fadd float %add.112, %50
  %multiply.144 = fmul float %36, %add.133
  %subtract.155 = fsub float %35, %multiply.144
  %51 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %subtract.155, ptr %51, align 4
  %52 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %53 = load float, ptr %52, align 4, !invariant.load !269
  %54 = load float, ptr %arg5, align 4, !invariant.load !269
  %55 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %56 = load float, ptr %55, align 4
  %57 = add i32 %11, 0
  %58 = add i32 %10, 384
  %59 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg4, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !269
  %add.96 = fadd float %56, %60
  %61 = add i32 %11, 0
  %62 = add i32 %10, 384
  %63 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg2, i32 0, i32 %61, i32 %62
  %64 = load float, ptr %63, align 4, !invariant.load !269
  %add.117 = fadd float %add.96, %64
  %65 = add i32 %11, 0
  %66 = add i32 %10, 384
  %67 = getelementptr inbounds [8192 x [440 x float]], ptr %arg1, i32 0, i32 %65, i32 %66
  %68 = load float, ptr %67, align 4, !invariant.load !269
  %add.138 = fadd float %add.117, %68
  %multiply.149 = fmul float %54, %add.138
  %subtract.1510 = fsub float %53, %multiply.149
  %69 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %subtract.1510, ptr %69, align 4
  %70 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %71 = load float, ptr %70, align 4, !invariant.load !269
  %72 = load float, ptr %arg5, align 4, !invariant.load !269
  %73 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %74 = load float, ptr %73, align 4
  %75 = add i32 %14, 0
  %76 = add i32 %13, 384
  %77 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg4, i32 0, i32 %75, i32 %76
  %78 = load float, ptr %77, align 4, !invariant.load !269
  %add.911 = fadd float %74, %78
  %79 = add i32 %14, 0
  %80 = add i32 %13, 384
  %81 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg2, i32 0, i32 %79, i32 %80
  %82 = load float, ptr %81, align 4, !invariant.load !269
  %add.1112 = fadd float %add.911, %82
  %83 = add i32 %14, 0
  %84 = add i32 %13, 384
  %85 = getelementptr inbounds [8192 x [440 x float]], ptr %arg1, i32 0, i32 %83, i32 %84
  %86 = load float, ptr %85, align 4, !invariant.load !269
  %add.1313 = fadd float %add.1112, %86
  %multiply.1414 = fmul float %72, %add.1313
  %subtract.1515 = fsub float %71, %multiply.1414
  %87 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %subtract.1515, ptr %87, align 4
  br label %fusion_1.in_bounds-after
}

define void @fusion_546(ptr noalias align 128 dereferenceable(63438848) %arg0, ptr noalias align 128 dereferenceable(63438848) %arg1, ptr noalias align 128 dereferenceable(49020928) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !479
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 3063808
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 1496
  %5 = udiv i32 %linear_index_base, 1496
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 1496
  %8 = udiv i32 %linear_index1, 1496
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 1496
  %11 = udiv i32 %linear_index2, 1496
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 1496
  %14 = udiv i32 %linear_index3, 1496
  %15 = icmp ult i32 %linear_index_base, 12255232
  br i1 %15, label %fusion_546.in_bounds-true, label %fusion_546.in_bounds-after

fusion_546.in_bounds-after:                       ; preds = %fusion_546.in_bounds-true, %entry
  ret void

fusion_546.in_bounds-true:                        ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 440
  %18 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg1, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = add i32 %5, 0
  %21 = add i32 %4, 440
  %22 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %20, i32 %21
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %add.5 = fadd float %19, %23
  %24 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %add.5, ptr %24, align 4
  %25 = add i32 %8, 0
  %26 = add i32 %7, 440
  %27 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg1, i32 0, i32 %25, i32 %26
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = add i32 %8, 0
  %30 = add i32 %7, 440
  %31 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %add.51 = fadd float %28, %32
  %33 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %add.51, ptr %33, align 4
  %34 = add i32 %11, 0
  %35 = add i32 %10, 440
  %36 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg1, i32 0, i32 %34, i32 %35
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %11, 0
  %39 = add i32 %10, 440
  %40 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %add.52 = fadd float %37, %41
  %42 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %add.52, ptr %42, align 4
  %43 = add i32 %14, 0
  %44 = add i32 %13, 440
  %45 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg1, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %47 = add i32 %14, 0
  %48 = add i32 %13, 440
  %49 = getelementptr inbounds [8192 x [1936 x float]], ptr %arg0, i32 0, i32 %47, i32 %48
  %50 = load float, ptr %49, align 4, !invariant.load !269
  %add.53 = fadd float %46, %50
  %51 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %add.53, ptr %51, align 4
  br label %fusion_546.in_bounds-after
}

define void @fusion_138(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(9961472) %arg1, ptr noalias align 128 dereferenceable(4718592) %arg2, ptr noalias align 16 dereferenceable(4) %arg3, ptr noalias align 16 dereferenceable(524288) %arg4, ptr noalias align 128 dereferenceable(9961472) %arg5, ptr noalias align 16 dereferenceable(524288) %arg6, ptr noalias align 128 dereferenceable(9961472) %arg7, ptr noalias align 16 dereferenceable(524288) %arg8, ptr noalias align 128 dereferenceable(67371008) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(524288) %arg12, ptr noalias align 128 dereferenceable(49020928) %arg13, ptr noalias align 128 dereferenceable(524288) %arg14, ptr noalias align 128 dereferenceable(524288) %arg15, ptr noalias align 16 dereferenceable(524288) %arg16, ptr noalias align 128 dereferenceable(12582912) %arg17, ptr noalias align 16 dereferenceable(524288) %arg18, ptr noalias align 128 dereferenceable(15728640) %arg19, ptr noalias align 128 dereferenceable(15728640) %arg20, ptr noalias align 16 dereferenceable(524288) %arg21, ptr noalias align 128 dereferenceable(9961472) %arg22, ptr noalias align 16 dereferenceable(524288) %arg23, ptr noalias align 128 dereferenceable(9961472) %arg24, ptr noalias align 128 dereferenceable(524288) %arg25, ptr noalias align 128 dereferenceable(524288) %arg26, ptr noalias align 128 dereferenceable(524288) %arg27, ptr noalias align 128 dereferenceable(524288) %arg28, ptr noalias align 128 dereferenceable(524288) %arg29, ptr noalias align 128 dereferenceable(524288) %arg30, ptr noalias align 128 dereferenceable(524288) %arg31) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 16
  %5 = udiv i32 %linear_index_base, 16
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 16
  %8 = udiv i32 %linear_index1, 16
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 16
  %11 = udiv i32 %linear_index2, 16
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 16
  %14 = udiv i32 %linear_index3, 16
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %fusion_138.in_bounds-true, label %fusion_138.in_bounds-after

fusion_138.in_bounds-after:                       ; preds = %concatenate.50.merge75, %entry
  ret void

fusion_138.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !269
  %18 = load float, ptr %arg3, align 4, !invariant.load !269
  %19 = add i32 %5, 0
  %20 = add i32 %4, 128
  %21 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !269
  %23 = add i32 %5, 0
  %24 = add i32 %4, 0
  %25 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %23, i32 %24
  %26 = load float, ptr %25, align 4, !invariant.load !269
  %add.29 = fadd float %22, %26
  %multiply.30 = fmul float %18, %add.29
  %subtract.31 = fsub float %17, %multiply.30
  %27 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.31, 0
  %28 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %29 = load float, ptr %28, align 4, !invariant.load !269
  %30 = add i32 %5, 0
  %31 = add i32 %4, 0
  %32 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %30, i32 %31
  %33 = load float, ptr %32, align 4, !invariant.load !269
  %34 = add i32 %5, 0
  %35 = add i32 %4, 32
  %36 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %34, i32 %35
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %add.34 = fadd float %33, %37
  %multiply.35 = fmul float %18, %add.34
  %subtract.36 = fsub float %29, %multiply.35
  %38 = insertvalue { float, float, float, float, float, float, float, float, float } %27, float %subtract.36, 1
  %39 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %40 = load float, ptr %39, align 4, !invariant.load !269
  %41 = add i32 %5, 0
  %42 = add i32 %4, 0
  %43 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %41, i32 %42
  %44 = load float, ptr %43, align 4, !invariant.load !269
  %45 = add i32 %5, 0
  %46 = add i32 %4, 80
  %47 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !269
  %add.39 = fadd float %44, %48
  %multiply.40 = fmul float %18, %add.39
  %subtract.41 = fsub float %40, %multiply.40
  %49 = insertvalue { float, float, float, float, float, float, float, float, float } %38, float %subtract.41, 2
  %50 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %51 = load float, ptr %50, align 4, !invariant.load !269
  br label %concatenate.pivot.8.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %52 = phi i32 [ 0, %concatenate.pivot.0. ]
  %53 = sub nsw i32 %4, %52
  %54 = udiv i32 %linear_index_base, 16
  %55 = mul i32 %54, 8
  %56 = add i32 %55, %53
  %57 = udiv i32 %56, 1
  %58 = urem i32 %57, 8
  %59 = udiv i32 %56, 8
  %60 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %5, i32 0
  %61 = load float, ptr %60, align 4, !invariant.load !269
  %62 = add i32 %5, 0
  %63 = add i32 %53, 1816
  %64 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %62, i32 %63
  %65 = load float, ptr %64, align 4, !invariant.load !269
  %multiply.45 = fmul float %61, %65
  br label %concatenate.50.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.8.1
  %66 = phi i32 [ 8, %concatenate.pivot.8.1 ]
  %67 = sub nsw i32 %4, %66
  %68 = udiv i32 %linear_index_base, 16
  %69 = mul i32 %68, 8
  %70 = add i32 %69, %67
  %71 = udiv i32 %70, 1
  %72 = urem i32 %71, 8
  %73 = udiv i32 %70, 8
  %74 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %5, i32 0
  %75 = load float, ptr %74, align 4, !invariant.load !269
  %76 = add i32 %5, 0
  %77 = add i32 %67, 1824
  %78 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %76, i32 %77
  %79 = load float, ptr %78, align 4, !invariant.load !269
  %multiply.49 = fmul float %75, %79
  br label %concatenate.50.merge

concatenate.pivot.8.:                             ; preds = %fusion_138.in_bounds-true
  %80 = icmp ult i32 %4, 8
  br i1 %80, label %concatenate.pivot.0., label %concatenate.pivot.8.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.8.
  br label %concat_index_from_operand_id0

concatenate.pivot.8.1:                            ; preds = %concatenate.pivot.8.
  br label %concat_index_from_operand_id1

concatenate.50.merge:                             ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %81 = phi float [ %multiply.45, %concat_index_from_operand_id0 ], [ %multiply.49, %concat_index_from_operand_id1 ]
  %multiply.51 = fmul float %18, %81
  %subtract.52 = fsub float %51, %multiply.51
  %82 = insertvalue { float, float, float, float, float, float, float, float, float } %49, float %subtract.52, 3
  %83 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %84 = load float, ptr %83, align 4, !invariant.load !269
  %85 = load float, ptr %arg3, align 4, !invariant.load !269
  %86 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  %87 = load float, ptr %86, align 4
  %88 = getelementptr inbounds float, ptr %arg15, i32 %linear_index_base
  %89 = load float, ptr %88, align 4
  %add.53 = fadd float %87, %89
  %90 = add i32 %5, 0
  %91 = add i32 %4, 1480
  %92 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg13, i32 0, i32 %90, i32 %91
  %93 = load float, ptr %92, align 4, !invariant.load !269
  %add.55 = fadd float %add.53, %93
  %multiply.56 = fmul float %85, %add.55
  %subtract.57 = fsub float %84, %multiply.56
  %94 = insertvalue { float, float, float, float, float, float, float, float, float } %82, float %subtract.57, 4
  %95 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  %96 = load float, ptr %95, align 4, !invariant.load !269
  %97 = add i32 %5, 0
  %98 = add i32 %4, 112
  %99 = getelementptr inbounds [8192 x [384 x float]], ptr %arg17, i32 0, i32 %97, i32 %98
  %100 = load float, ptr %99, align 4, !invariant.load !269
  %multiply.59 = fmul float %85, %100
  %subtract.60 = fsub float %96, %multiply.59
  %101 = insertvalue { float, float, float, float, float, float, float, float, float } %94, float %subtract.60, 5
  %102 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  %103 = load float, ptr %102, align 4, !invariant.load !269
  %104 = add i32 %5, 0
  %105 = add i32 %4, 8
  %106 = add i32 %104, 0
  %107 = add i32 %105, 200
  %108 = getelementptr inbounds [8192 x [480 x float]], ptr %arg20, i32 0, i32 %106, i32 %107
  %109 = load float, ptr %108, align 4, !invariant.load !269
  %110 = add i32 %104, 0
  %111 = add i32 %105, 200
  %112 = getelementptr inbounds [8192 x [480 x float]], ptr %arg19, i32 0, i32 %110, i32 %111
  %113 = load float, ptr %112, align 4, !invariant.load !269
  %add.63 = fadd float %109, %113
  %multiply.65 = fmul float %85, %add.63
  %subtract.66 = fsub float %103, %multiply.65
  %114 = insertvalue { float, float, float, float, float, float, float, float, float } %101, float %subtract.66, 6
  %115 = getelementptr inbounds float, ptr %arg21, i32 %linear_index_base
  %116 = load float, ptr %115, align 4, !invariant.load !269
  %117 = add i32 %5, 0
  %118 = add i32 %4, 0
  %119 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %117, i32 %118
  %120 = load float, ptr %119, align 4, !invariant.load !269
  %multiply.68 = fmul float %85, %120
  %subtract.69 = fsub float %116, %multiply.68
  %121 = insertvalue { float, float, float, float, float, float, float, float, float } %114, float %subtract.69, 7
  %122 = getelementptr inbounds float, ptr %arg23, i32 %linear_index_base
  %123 = load float, ptr %122, align 4, !invariant.load !269
  %124 = add i32 %5, 0
  %125 = add i32 %4, 0
  %126 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %124, i32 %125
  %127 = load float, ptr %126, align 4, !invariant.load !269
  %multiply.71 = fmul float %85, %127
  %subtract.72 = fsub float %123, %multiply.71
  %128 = insertvalue { float, float, float, float, float, float, float, float, float } %121, float %subtract.72, 8
  %129 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 0
  %130 = getelementptr inbounds float, ptr %arg25, i32 %linear_index_base
  store float %129, ptr %130, align 4
  %131 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 1
  %132 = getelementptr inbounds float, ptr %arg26, i32 %linear_index_base
  store float %131, ptr %132, align 4
  %133 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 2
  %134 = getelementptr inbounds float, ptr %arg27, i32 %linear_index_base
  store float %133, ptr %134, align 4
  %135 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 3
  %136 = getelementptr inbounds float, ptr %arg28, i32 %linear_index_base
  store float %135, ptr %136, align 4
  %137 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 4
  %138 = getelementptr inbounds float, ptr %arg29, i32 %linear_index_base
  store float %137, ptr %138, align 4
  %139 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 5
  %140 = getelementptr inbounds float, ptr %arg30, i32 %linear_index_base
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 6
  %142 = getelementptr inbounds float, ptr %arg31, i32 %linear_index_base
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 7
  %144 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  store float %143, ptr %144, align 4
  %145 = extractvalue { float, float, float, float, float, float, float, float, float } %128, 8
  %146 = getelementptr inbounds float, ptr %arg15, i32 %linear_index_base
  store float %145, ptr %146, align 4
  %147 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %148 = load float, ptr %147, align 4, !invariant.load !269
  %149 = load float, ptr %arg3, align 4, !invariant.load !269
  %150 = add i32 %8, 0
  %151 = add i32 %7, 128
  %152 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %150, i32 %151
  %153 = load float, ptr %152, align 4, !invariant.load !269
  %154 = add i32 %8, 0
  %155 = add i32 %7, 0
  %156 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %154, i32 %155
  %157 = load float, ptr %156, align 4, !invariant.load !269
  %add.292 = fadd float %153, %157
  %multiply.303 = fmul float %149, %add.292
  %subtract.314 = fsub float %148, %multiply.303
  %158 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.314, 0
  %159 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %160 = load float, ptr %159, align 4, !invariant.load !269
  %161 = add i32 %8, 0
  %162 = add i32 %7, 0
  %163 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %161, i32 %162
  %164 = load float, ptr %163, align 4, !invariant.load !269
  %165 = add i32 %8, 0
  %166 = add i32 %7, 32
  %167 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %165, i32 %166
  %168 = load float, ptr %167, align 4, !invariant.load !269
  %add.345 = fadd float %164, %168
  %multiply.356 = fmul float %149, %add.345
  %subtract.367 = fsub float %160, %multiply.356
  %169 = insertvalue { float, float, float, float, float, float, float, float, float } %158, float %subtract.367, 1
  %170 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %171 = load float, ptr %170, align 4, !invariant.load !269
  %172 = add i32 %8, 0
  %173 = add i32 %7, 0
  %174 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %172, i32 %173
  %175 = load float, ptr %174, align 4, !invariant.load !269
  %176 = add i32 %8, 0
  %177 = add i32 %7, 80
  %178 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %176, i32 %177
  %179 = load float, ptr %178, align 4, !invariant.load !269
  %add.398 = fadd float %175, %179
  %multiply.409 = fmul float %149, %add.398
  %subtract.4110 = fsub float %171, %multiply.409
  %180 = insertvalue { float, float, float, float, float, float, float, float, float } %169, float %subtract.4110, 2
  %181 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %182 = load float, ptr %181, align 4, !invariant.load !269
  br label %concatenate.pivot.8.16

concat_index_from_operand_id012:                  ; preds = %concatenate.pivot.0.17
  %183 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %184 = sub nsw i32 %7, %183
  %185 = udiv i32 %linear_index1, 16
  %186 = mul i32 %185, 8
  %187 = add i32 %186, %184
  %188 = udiv i32 %187, 1
  %189 = urem i32 %188, 8
  %190 = udiv i32 %187, 8
  %191 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %8, i32 0
  %192 = load float, ptr %191, align 4, !invariant.load !269
  %193 = add i32 %8, 0
  %194 = add i32 %184, 1816
  %195 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %193, i32 %194
  %196 = load float, ptr %195, align 4, !invariant.load !269
  %multiply.4513 = fmul float %192, %196
  br label %concatenate.50.merge11

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.8.18
  %197 = phi i32 [ 8, %concatenate.pivot.8.18 ]
  %198 = sub nsw i32 %7, %197
  %199 = udiv i32 %linear_index1, 16
  %200 = mul i32 %199, 8
  %201 = add i32 %200, %198
  %202 = udiv i32 %201, 1
  %203 = urem i32 %202, 8
  %204 = udiv i32 %201, 8
  %205 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %8, i32 0
  %206 = load float, ptr %205, align 4, !invariant.load !269
  %207 = add i32 %8, 0
  %208 = add i32 %198, 1824
  %209 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %207, i32 %208
  %210 = load float, ptr %209, align 4, !invariant.load !269
  %multiply.4915 = fmul float %206, %210
  br label %concatenate.50.merge11

concatenate.pivot.8.16:                           ; preds = %concatenate.50.merge
  %211 = icmp ult i32 %7, 8
  br i1 %211, label %concatenate.pivot.0.17, label %concatenate.pivot.8.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.8.16
  br label %concat_index_from_operand_id012

concatenate.pivot.8.18:                           ; preds = %concatenate.pivot.8.16
  br label %concat_index_from_operand_id114

concatenate.50.merge11:                           ; preds = %concat_index_from_operand_id114, %concat_index_from_operand_id012
  %212 = phi float [ %multiply.4513, %concat_index_from_operand_id012 ], [ %multiply.4915, %concat_index_from_operand_id114 ]
  %multiply.5119 = fmul float %149, %212
  %subtract.5220 = fsub float %182, %multiply.5119
  %213 = insertvalue { float, float, float, float, float, float, float, float, float } %180, float %subtract.5220, 3
  %214 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %215 = load float, ptr %214, align 4, !invariant.load !269
  %216 = load float, ptr %arg3, align 4, !invariant.load !269
  %217 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  %218 = load float, ptr %217, align 4
  %219 = getelementptr inbounds float, ptr %arg15, i32 %linear_index1
  %220 = load float, ptr %219, align 4
  %add.5321 = fadd float %218, %220
  %221 = add i32 %8, 0
  %222 = add i32 %7, 1480
  %223 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg13, i32 0, i32 %221, i32 %222
  %224 = load float, ptr %223, align 4, !invariant.load !269
  %add.5522 = fadd float %add.5321, %224
  %multiply.5623 = fmul float %216, %add.5522
  %subtract.5724 = fsub float %215, %multiply.5623
  %225 = insertvalue { float, float, float, float, float, float, float, float, float } %213, float %subtract.5724, 4
  %226 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  %227 = load float, ptr %226, align 4, !invariant.load !269
  %228 = add i32 %8, 0
  %229 = add i32 %7, 112
  %230 = getelementptr inbounds [8192 x [384 x float]], ptr %arg17, i32 0, i32 %228, i32 %229
  %231 = load float, ptr %230, align 4, !invariant.load !269
  %multiply.5925 = fmul float %216, %231
  %subtract.6026 = fsub float %227, %multiply.5925
  %232 = insertvalue { float, float, float, float, float, float, float, float, float } %225, float %subtract.6026, 5
  %233 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  %234 = load float, ptr %233, align 4, !invariant.load !269
  %235 = add i32 %8, 0
  %236 = add i32 %7, 8
  %237 = add i32 %235, 0
  %238 = add i32 %236, 200
  %239 = getelementptr inbounds [8192 x [480 x float]], ptr %arg20, i32 0, i32 %237, i32 %238
  %240 = load float, ptr %239, align 4, !invariant.load !269
  %241 = add i32 %235, 0
  %242 = add i32 %236, 200
  %243 = getelementptr inbounds [8192 x [480 x float]], ptr %arg19, i32 0, i32 %241, i32 %242
  %244 = load float, ptr %243, align 4, !invariant.load !269
  %add.6327 = fadd float %240, %244
  %multiply.6528 = fmul float %216, %add.6327
  %subtract.6629 = fsub float %234, %multiply.6528
  %245 = insertvalue { float, float, float, float, float, float, float, float, float } %232, float %subtract.6629, 6
  %246 = getelementptr inbounds float, ptr %arg21, i32 %linear_index1
  %247 = load float, ptr %246, align 4, !invariant.load !269
  %248 = add i32 %8, 0
  %249 = add i32 %7, 0
  %250 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %248, i32 %249
  %251 = load float, ptr %250, align 4, !invariant.load !269
  %multiply.6830 = fmul float %216, %251
  %subtract.6931 = fsub float %247, %multiply.6830
  %252 = insertvalue { float, float, float, float, float, float, float, float, float } %245, float %subtract.6931, 7
  %253 = getelementptr inbounds float, ptr %arg23, i32 %linear_index1
  %254 = load float, ptr %253, align 4, !invariant.load !269
  %255 = add i32 %8, 0
  %256 = add i32 %7, 0
  %257 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %255, i32 %256
  %258 = load float, ptr %257, align 4, !invariant.load !269
  %multiply.7132 = fmul float %216, %258
  %subtract.7233 = fsub float %254, %multiply.7132
  %259 = insertvalue { float, float, float, float, float, float, float, float, float } %252, float %subtract.7233, 8
  %260 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 0
  %261 = getelementptr inbounds float, ptr %arg25, i32 %linear_index1
  store float %260, ptr %261, align 4
  %262 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 1
  %263 = getelementptr inbounds float, ptr %arg26, i32 %linear_index1
  store float %262, ptr %263, align 4
  %264 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 2
  %265 = getelementptr inbounds float, ptr %arg27, i32 %linear_index1
  store float %264, ptr %265, align 4
  %266 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 3
  %267 = getelementptr inbounds float, ptr %arg28, i32 %linear_index1
  store float %266, ptr %267, align 4
  %268 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 4
  %269 = getelementptr inbounds float, ptr %arg29, i32 %linear_index1
  store float %268, ptr %269, align 4
  %270 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 5
  %271 = getelementptr inbounds float, ptr %arg30, i32 %linear_index1
  store float %270, ptr %271, align 4
  %272 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 6
  %273 = getelementptr inbounds float, ptr %arg31, i32 %linear_index1
  store float %272, ptr %273, align 4
  %274 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 7
  %275 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  store float %274, ptr %275, align 4
  %276 = extractvalue { float, float, float, float, float, float, float, float, float } %259, 8
  %277 = getelementptr inbounds float, ptr %arg15, i32 %linear_index1
  store float %276, ptr %277, align 4
  %278 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %279 = load float, ptr %278, align 4, !invariant.load !269
  %280 = load float, ptr %arg3, align 4, !invariant.load !269
  %281 = add i32 %11, 0
  %282 = add i32 %10, 128
  %283 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %281, i32 %282
  %284 = load float, ptr %283, align 4, !invariant.load !269
  %285 = add i32 %11, 0
  %286 = add i32 %10, 0
  %287 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %285, i32 %286
  %288 = load float, ptr %287, align 4, !invariant.load !269
  %add.2934 = fadd float %284, %288
  %multiply.3035 = fmul float %280, %add.2934
  %subtract.3136 = fsub float %279, %multiply.3035
  %289 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.3136, 0
  %290 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %291 = load float, ptr %290, align 4, !invariant.load !269
  %292 = add i32 %11, 0
  %293 = add i32 %10, 0
  %294 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %292, i32 %293
  %295 = load float, ptr %294, align 4, !invariant.load !269
  %296 = add i32 %11, 0
  %297 = add i32 %10, 32
  %298 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %296, i32 %297
  %299 = load float, ptr %298, align 4, !invariant.load !269
  %add.3437 = fadd float %295, %299
  %multiply.3538 = fmul float %280, %add.3437
  %subtract.3639 = fsub float %291, %multiply.3538
  %300 = insertvalue { float, float, float, float, float, float, float, float, float } %289, float %subtract.3639, 1
  %301 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %302 = load float, ptr %301, align 4, !invariant.load !269
  %303 = add i32 %11, 0
  %304 = add i32 %10, 0
  %305 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %303, i32 %304
  %306 = load float, ptr %305, align 4, !invariant.load !269
  %307 = add i32 %11, 0
  %308 = add i32 %10, 80
  %309 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %307, i32 %308
  %310 = load float, ptr %309, align 4, !invariant.load !269
  %add.3940 = fadd float %306, %310
  %multiply.4041 = fmul float %280, %add.3940
  %subtract.4142 = fsub float %302, %multiply.4041
  %311 = insertvalue { float, float, float, float, float, float, float, float, float } %300, float %subtract.4142, 2
  %312 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %313 = load float, ptr %312, align 4, !invariant.load !269
  br label %concatenate.pivot.8.48

concat_index_from_operand_id044:                  ; preds = %concatenate.pivot.0.49
  %314 = phi i32 [ 0, %concatenate.pivot.0.49 ]
  %315 = sub nsw i32 %10, %314
  %316 = udiv i32 %linear_index2, 16
  %317 = mul i32 %316, 8
  %318 = add i32 %317, %315
  %319 = udiv i32 %318, 1
  %320 = urem i32 %319, 8
  %321 = udiv i32 %318, 8
  %322 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %11, i32 0
  %323 = load float, ptr %322, align 4, !invariant.load !269
  %324 = add i32 %11, 0
  %325 = add i32 %315, 1816
  %326 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %324, i32 %325
  %327 = load float, ptr %326, align 4, !invariant.load !269
  %multiply.4545 = fmul float %323, %327
  br label %concatenate.50.merge43

concat_index_from_operand_id146:                  ; preds = %concatenate.pivot.8.50
  %328 = phi i32 [ 8, %concatenate.pivot.8.50 ]
  %329 = sub nsw i32 %10, %328
  %330 = udiv i32 %linear_index2, 16
  %331 = mul i32 %330, 8
  %332 = add i32 %331, %329
  %333 = udiv i32 %332, 1
  %334 = urem i32 %333, 8
  %335 = udiv i32 %332, 8
  %336 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %11, i32 0
  %337 = load float, ptr %336, align 4, !invariant.load !269
  %338 = add i32 %11, 0
  %339 = add i32 %329, 1824
  %340 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %338, i32 %339
  %341 = load float, ptr %340, align 4, !invariant.load !269
  %multiply.4947 = fmul float %337, %341
  br label %concatenate.50.merge43

concatenate.pivot.8.48:                           ; preds = %concatenate.50.merge11
  %342 = icmp ult i32 %10, 8
  br i1 %342, label %concatenate.pivot.0.49, label %concatenate.pivot.8.50

concatenate.pivot.0.49:                           ; preds = %concatenate.pivot.8.48
  br label %concat_index_from_operand_id044

concatenate.pivot.8.50:                           ; preds = %concatenate.pivot.8.48
  br label %concat_index_from_operand_id146

concatenate.50.merge43:                           ; preds = %concat_index_from_operand_id146, %concat_index_from_operand_id044
  %343 = phi float [ %multiply.4545, %concat_index_from_operand_id044 ], [ %multiply.4947, %concat_index_from_operand_id146 ]
  %multiply.5151 = fmul float %280, %343
  %subtract.5252 = fsub float %313, %multiply.5151
  %344 = insertvalue { float, float, float, float, float, float, float, float, float } %311, float %subtract.5252, 3
  %345 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %346 = load float, ptr %345, align 4, !invariant.load !269
  %347 = load float, ptr %arg3, align 4, !invariant.load !269
  %348 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  %349 = load float, ptr %348, align 4
  %350 = getelementptr inbounds float, ptr %arg15, i32 %linear_index2
  %351 = load float, ptr %350, align 4
  %add.5353 = fadd float %349, %351
  %352 = add i32 %11, 0
  %353 = add i32 %10, 1480
  %354 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg13, i32 0, i32 %352, i32 %353
  %355 = load float, ptr %354, align 4, !invariant.load !269
  %add.5554 = fadd float %add.5353, %355
  %multiply.5655 = fmul float %347, %add.5554
  %subtract.5756 = fsub float %346, %multiply.5655
  %356 = insertvalue { float, float, float, float, float, float, float, float, float } %344, float %subtract.5756, 4
  %357 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  %358 = load float, ptr %357, align 4, !invariant.load !269
  %359 = add i32 %11, 0
  %360 = add i32 %10, 112
  %361 = getelementptr inbounds [8192 x [384 x float]], ptr %arg17, i32 0, i32 %359, i32 %360
  %362 = load float, ptr %361, align 4, !invariant.load !269
  %multiply.5957 = fmul float %347, %362
  %subtract.6058 = fsub float %358, %multiply.5957
  %363 = insertvalue { float, float, float, float, float, float, float, float, float } %356, float %subtract.6058, 5
  %364 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  %365 = load float, ptr %364, align 4, !invariant.load !269
  %366 = add i32 %11, 0
  %367 = add i32 %10, 8
  %368 = add i32 %366, 0
  %369 = add i32 %367, 200
  %370 = getelementptr inbounds [8192 x [480 x float]], ptr %arg20, i32 0, i32 %368, i32 %369
  %371 = load float, ptr %370, align 4, !invariant.load !269
  %372 = add i32 %366, 0
  %373 = add i32 %367, 200
  %374 = getelementptr inbounds [8192 x [480 x float]], ptr %arg19, i32 0, i32 %372, i32 %373
  %375 = load float, ptr %374, align 4, !invariant.load !269
  %add.6359 = fadd float %371, %375
  %multiply.6560 = fmul float %347, %add.6359
  %subtract.6661 = fsub float %365, %multiply.6560
  %376 = insertvalue { float, float, float, float, float, float, float, float, float } %363, float %subtract.6661, 6
  %377 = getelementptr inbounds float, ptr %arg21, i32 %linear_index2
  %378 = load float, ptr %377, align 4, !invariant.load !269
  %379 = add i32 %11, 0
  %380 = add i32 %10, 0
  %381 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %379, i32 %380
  %382 = load float, ptr %381, align 4, !invariant.load !269
  %multiply.6862 = fmul float %347, %382
  %subtract.6963 = fsub float %378, %multiply.6862
  %383 = insertvalue { float, float, float, float, float, float, float, float, float } %376, float %subtract.6963, 7
  %384 = getelementptr inbounds float, ptr %arg23, i32 %linear_index2
  %385 = load float, ptr %384, align 4, !invariant.load !269
  %386 = add i32 %11, 0
  %387 = add i32 %10, 0
  %388 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %386, i32 %387
  %389 = load float, ptr %388, align 4, !invariant.load !269
  %multiply.7164 = fmul float %347, %389
  %subtract.7265 = fsub float %385, %multiply.7164
  %390 = insertvalue { float, float, float, float, float, float, float, float, float } %383, float %subtract.7265, 8
  %391 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 0
  %392 = getelementptr inbounds float, ptr %arg25, i32 %linear_index2
  store float %391, ptr %392, align 4
  %393 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 1
  %394 = getelementptr inbounds float, ptr %arg26, i32 %linear_index2
  store float %393, ptr %394, align 4
  %395 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 2
  %396 = getelementptr inbounds float, ptr %arg27, i32 %linear_index2
  store float %395, ptr %396, align 4
  %397 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 3
  %398 = getelementptr inbounds float, ptr %arg28, i32 %linear_index2
  store float %397, ptr %398, align 4
  %399 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 4
  %400 = getelementptr inbounds float, ptr %arg29, i32 %linear_index2
  store float %399, ptr %400, align 4
  %401 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 5
  %402 = getelementptr inbounds float, ptr %arg30, i32 %linear_index2
  store float %401, ptr %402, align 4
  %403 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 6
  %404 = getelementptr inbounds float, ptr %arg31, i32 %linear_index2
  store float %403, ptr %404, align 4
  %405 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 7
  %406 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  store float %405, ptr %406, align 4
  %407 = extractvalue { float, float, float, float, float, float, float, float, float } %390, 8
  %408 = getelementptr inbounds float, ptr %arg15, i32 %linear_index2
  store float %407, ptr %408, align 4
  %409 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %410 = load float, ptr %409, align 4, !invariant.load !269
  %411 = load float, ptr %arg3, align 4, !invariant.load !269
  %412 = add i32 %14, 0
  %413 = add i32 %13, 128
  %414 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %412, i32 %413
  %415 = load float, ptr %414, align 4, !invariant.load !269
  %416 = add i32 %14, 0
  %417 = add i32 %13, 0
  %418 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %416, i32 %417
  %419 = load float, ptr %418, align 4, !invariant.load !269
  %add.2966 = fadd float %415, %419
  %multiply.3067 = fmul float %411, %add.2966
  %subtract.3168 = fsub float %410, %multiply.3067
  %420 = insertvalue { float, float, float, float, float, float, float, float, float } undef, float %subtract.3168, 0
  %421 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %422 = load float, ptr %421, align 4, !invariant.load !269
  %423 = add i32 %14, 0
  %424 = add i32 %13, 0
  %425 = getelementptr inbounds [8192 x [304 x float]], ptr %arg5, i32 0, i32 %423, i32 %424
  %426 = load float, ptr %425, align 4, !invariant.load !269
  %427 = add i32 %14, 0
  %428 = add i32 %13, 32
  %429 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %427, i32 %428
  %430 = load float, ptr %429, align 4, !invariant.load !269
  %add.3469 = fadd float %426, %430
  %multiply.3570 = fmul float %411, %add.3469
  %subtract.3671 = fsub float %422, %multiply.3570
  %431 = insertvalue { float, float, float, float, float, float, float, float, float } %420, float %subtract.3671, 1
  %432 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %433 = load float, ptr %432, align 4, !invariant.load !269
  %434 = add i32 %14, 0
  %435 = add i32 %13, 0
  %436 = getelementptr inbounds [8192 x [304 x float]], ptr %arg7, i32 0, i32 %434, i32 %435
  %437 = load float, ptr %436, align 4, !invariant.load !269
  %438 = add i32 %14, 0
  %439 = add i32 %13, 80
  %440 = getelementptr inbounds [8192 x [144 x float]], ptr %arg2, i32 0, i32 %438, i32 %439
  %441 = load float, ptr %440, align 4, !invariant.load !269
  %add.3972 = fadd float %437, %441
  %multiply.4073 = fmul float %411, %add.3972
  %subtract.4174 = fsub float %433, %multiply.4073
  %442 = insertvalue { float, float, float, float, float, float, float, float, float } %431, float %subtract.4174, 2
  %443 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %444 = load float, ptr %443, align 4, !invariant.load !269
  br label %concatenate.pivot.8.80

concat_index_from_operand_id076:                  ; preds = %concatenate.pivot.0.81
  %445 = phi i32 [ 0, %concatenate.pivot.0.81 ]
  %446 = sub nsw i32 %13, %445
  %447 = udiv i32 %linear_index3, 16
  %448 = mul i32 %447, 8
  %449 = add i32 %448, %446
  %450 = udiv i32 %449, 1
  %451 = urem i32 %450, 8
  %452 = udiv i32 %449, 8
  %453 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %14, i32 0
  %454 = load float, ptr %453, align 4, !invariant.load !269
  %455 = add i32 %14, 0
  %456 = add i32 %446, 1816
  %457 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %455, i32 %456
  %458 = load float, ptr %457, align 4, !invariant.load !269
  %multiply.4577 = fmul float %454, %458
  br label %concatenate.50.merge75

concat_index_from_operand_id178:                  ; preds = %concatenate.pivot.8.82
  %459 = phi i32 [ 8, %concatenate.pivot.8.82 ]
  %460 = sub nsw i32 %13, %459
  %461 = udiv i32 %linear_index3, 16
  %462 = mul i32 %461, 8
  %463 = add i32 %462, %460
  %464 = udiv i32 %463, 1
  %465 = urem i32 %464, 8
  %466 = udiv i32 %463, 8
  %467 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %14, i32 0
  %468 = load float, ptr %467, align 4, !invariant.load !269
  %469 = add i32 %14, 0
  %470 = add i32 %460, 1824
  %471 = getelementptr inbounds [8192 x [2056 x float]], ptr %arg9, i32 0, i32 %469, i32 %470
  %472 = load float, ptr %471, align 4, !invariant.load !269
  %multiply.4979 = fmul float %468, %472
  br label %concatenate.50.merge75

concatenate.pivot.8.80:                           ; preds = %concatenate.50.merge43
  %473 = icmp ult i32 %13, 8
  br i1 %473, label %concatenate.pivot.0.81, label %concatenate.pivot.8.82

concatenate.pivot.0.81:                           ; preds = %concatenate.pivot.8.80
  br label %concat_index_from_operand_id076

concatenate.pivot.8.82:                           ; preds = %concatenate.pivot.8.80
  br label %concat_index_from_operand_id178

concatenate.50.merge75:                           ; preds = %concat_index_from_operand_id178, %concat_index_from_operand_id076
  %474 = phi float [ %multiply.4577, %concat_index_from_operand_id076 ], [ %multiply.4979, %concat_index_from_operand_id178 ]
  %multiply.5183 = fmul float %411, %474
  %subtract.5284 = fsub float %444, %multiply.5183
  %475 = insertvalue { float, float, float, float, float, float, float, float, float } %442, float %subtract.5284, 3
  %476 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %477 = load float, ptr %476, align 4, !invariant.load !269
  %478 = load float, ptr %arg3, align 4, !invariant.load !269
  %479 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  %480 = load float, ptr %479, align 4
  %481 = getelementptr inbounds float, ptr %arg15, i32 %linear_index3
  %482 = load float, ptr %481, align 4
  %add.5385 = fadd float %480, %482
  %483 = add i32 %14, 0
  %484 = add i32 %13, 1480
  %485 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg13, i32 0, i32 %483, i32 %484
  %486 = load float, ptr %485, align 4, !invariant.load !269
  %add.5586 = fadd float %add.5385, %486
  %multiply.5687 = fmul float %478, %add.5586
  %subtract.5788 = fsub float %477, %multiply.5687
  %487 = insertvalue { float, float, float, float, float, float, float, float, float } %475, float %subtract.5788, 4
  %488 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  %489 = load float, ptr %488, align 4, !invariant.load !269
  %490 = add i32 %14, 0
  %491 = add i32 %13, 112
  %492 = getelementptr inbounds [8192 x [384 x float]], ptr %arg17, i32 0, i32 %490, i32 %491
  %493 = load float, ptr %492, align 4, !invariant.load !269
  %multiply.5989 = fmul float %478, %493
  %subtract.6090 = fsub float %489, %multiply.5989
  %494 = insertvalue { float, float, float, float, float, float, float, float, float } %487, float %subtract.6090, 5
  %495 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  %496 = load float, ptr %495, align 4, !invariant.load !269
  %497 = add i32 %14, 0
  %498 = add i32 %13, 8
  %499 = add i32 %497, 0
  %500 = add i32 %498, 200
  %501 = getelementptr inbounds [8192 x [480 x float]], ptr %arg20, i32 0, i32 %499, i32 %500
  %502 = load float, ptr %501, align 4, !invariant.load !269
  %503 = add i32 %497, 0
  %504 = add i32 %498, 200
  %505 = getelementptr inbounds [8192 x [480 x float]], ptr %arg19, i32 0, i32 %503, i32 %504
  %506 = load float, ptr %505, align 4, !invariant.load !269
  %add.6391 = fadd float %502, %506
  %multiply.6592 = fmul float %478, %add.6391
  %subtract.6693 = fsub float %496, %multiply.6592
  %507 = insertvalue { float, float, float, float, float, float, float, float, float } %494, float %subtract.6693, 6
  %508 = getelementptr inbounds float, ptr %arg21, i32 %linear_index3
  %509 = load float, ptr %508, align 4, !invariant.load !269
  %510 = add i32 %14, 0
  %511 = add i32 %13, 0
  %512 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %510, i32 %511
  %513 = load float, ptr %512, align 4, !invariant.load !269
  %multiply.6894 = fmul float %478, %513
  %subtract.6995 = fsub float %509, %multiply.6894
  %514 = insertvalue { float, float, float, float, float, float, float, float, float } %507, float %subtract.6995, 7
  %515 = getelementptr inbounds float, ptr %arg23, i32 %linear_index3
  %516 = load float, ptr %515, align 4, !invariant.load !269
  %517 = add i32 %14, 0
  %518 = add i32 %13, 0
  %519 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %517, i32 %518
  %520 = load float, ptr %519, align 4, !invariant.load !269
  %multiply.7196 = fmul float %478, %520
  %subtract.7297 = fsub float %516, %multiply.7196
  %521 = insertvalue { float, float, float, float, float, float, float, float, float } %514, float %subtract.7297, 8
  %522 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 0
  %523 = getelementptr inbounds float, ptr %arg25, i32 %linear_index3
  store float %522, ptr %523, align 4
  %524 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 1
  %525 = getelementptr inbounds float, ptr %arg26, i32 %linear_index3
  store float %524, ptr %525, align 4
  %526 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 2
  %527 = getelementptr inbounds float, ptr %arg27, i32 %linear_index3
  store float %526, ptr %527, align 4
  %528 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 3
  %529 = getelementptr inbounds float, ptr %arg28, i32 %linear_index3
  store float %528, ptr %529, align 4
  %530 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 4
  %531 = getelementptr inbounds float, ptr %arg29, i32 %linear_index3
  store float %530, ptr %531, align 4
  %532 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 5
  %533 = getelementptr inbounds float, ptr %arg30, i32 %linear_index3
  store float %532, ptr %533, align 4
  %534 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 6
  %535 = getelementptr inbounds float, ptr %arg31, i32 %linear_index3
  store float %534, ptr %535, align 4
  %536 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 7
  %537 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  store float %536, ptr %537, align 4
  %538 = extractvalue { float, float, float, float, float, float, float, float, float } %521, 8
  %539 = getelementptr inbounds float, ptr %arg15, i32 %linear_index3
  store float %538, ptr %539, align 4
  br label %fusion_138.in_bounds-after
}

define void @fusion_657(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(49020928) %arg1, ptr noalias align 128 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !428
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !317
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 12124160
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1480
  %5 = udiv i32 %linear_index, 1480
  %6 = icmp ult i32 %linear_index, 12124160
  br i1 %6, label %fusion_657.in_bounds-true, label %fusion_657.in_bounds-after

fusion_657.in_bounds-after:                       ; preds = %slice1-after, %entry
  ret void

fusion_657.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !269
  %9 = add i32 %5, 0
  %10 = add i32 %4, 0
  %11 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg1, i32 0, i32 %9, i32 %10
  %12 = load float, ptr %11, align 4, !invariant.load !269
  %add.4 = fadd float %8, %12
  %13 = icmp sge i32 %5, 0
  %14 = icmp slt i32 %5, 8192
  %15 = and i1 %13, %14
  %16 = icmp sge i32 %4, 1224
  %17 = icmp slt i32 %4, 1480
  %18 = and i1 %16, %17
  %19 = and i1 %15, %18
  br i1 %19, label %slice0-true, label %slice0-after

slice0-after:                                     ; preds = %slice0-true, %fusion_657.in_bounds-true
  %20 = icmp sge i32 %5, 0
  %21 = icmp slt i32 %5, 8192
  %22 = and i1 %20, %21
  %23 = icmp sge i32 %4, 968
  %24 = icmp slt i32 %4, 1224
  %25 = and i1 %23, %24
  %26 = and i1 %22, %25
  br i1 %26, label %slice1-true, label %slice1-after

slice1-after:                                     ; preds = %slice1-true, %slice0-after
  br label %fusion_657.in_bounds-after

slice0-true:                                      ; preds = %fusion_657.in_bounds-true
  %27 = sub i32 %5, 0
  %28 = sub i32 %4, 1224
  %29 = getelementptr inbounds [8192 x [256 x float]], ptr %arg2, i32 0, i32 %27, i32 %28
  store float %add.4, ptr %29, align 4
  br label %slice0-after

slice1-true:                                      ; preds = %slice0-after
  %30 = sub i32 %5, 0
  %31 = sub i32 %4, 968
  %32 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %30, i32 %31
  store float %add.4, ptr %32, align 4
  br label %slice1-after
}

define void @fusion_659(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(49020928) %arg1, ptr noalias align 128 dereferenceable(31719424) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !480
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !318
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1982464
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 968
  %5 = udiv i32 %linear_index_base, 968
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 968
  %8 = udiv i32 %linear_index1, 968
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 968
  %11 = udiv i32 %linear_index2, 968
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 968
  %14 = udiv i32 %linear_index3, 968
  %15 = icmp ult i32 %linear_index_base, 7929856
  br i1 %15, label %fusion_659.in_bounds-true, label %fusion_659.in_bounds-after

fusion_659.in_bounds-after:                       ; preds = %fusion_659.in_bounds-true, %entry
  ret void

fusion_659.in_bounds-true:                        ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !269
  %20 = add i32 %16, 0
  %21 = add i32 %17, 0
  %22 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg1, i32 0, i32 %20, i32 %21
  %23 = load float, ptr %22, align 4, !invariant.load !269
  %add.4 = fadd float %19, %23
  %24 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %add.4, ptr %24, align 4
  %25 = add i32 %8, 0
  %26 = add i32 %7, 0
  %27 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %25, i32 %26
  %28 = load float, ptr %27, align 4, !invariant.load !269
  %29 = add i32 %25, 0
  %30 = add i32 %26, 0
  %31 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg1, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !269
  %add.41 = fadd float %28, %32
  %33 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %add.41, ptr %33, align 4
  %34 = add i32 %11, 0
  %35 = add i32 %10, 0
  %36 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %34, i32 %35
  %37 = load float, ptr %36, align 4, !invariant.load !269
  %38 = add i32 %34, 0
  %39 = add i32 %35, 0
  %40 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg1, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !269
  %add.42 = fadd float %37, %41
  %42 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %add.42, ptr %42, align 4
  %43 = add i32 %14, 0
  %44 = add i32 %13, 0
  %45 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !269
  %47 = add i32 %43, 0
  %48 = add i32 %44, 0
  %49 = getelementptr inbounds [8192 x [1496 x float]], ptr %arg1, i32 0, i32 %47, i32 %48
  %50 = load float, ptr %49, align 4, !invariant.load !269
  %add.43 = fadd float %46, %50
  %51 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %add.43, ptr %51, align 4
  br label %fusion_659.in_bounds-after
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263}

!0 = !{ptr @fusion_650, !"kernel", i32 1}
!1 = !{ptr @fusion_650, !"reqntidx", i32 512}
!2 = !{ptr @fusion_660, !"kernel", i32 1}
!3 = !{ptr @fusion_660, !"reqntidx", i32 512}
!4 = !{ptr @fusion_662, !"kernel", i32 1}
!5 = !{ptr @fusion_662, !"reqntidx", i32 512}
!6 = !{ptr @fusion_544, !"kernel", i32 1}
!7 = !{ptr @fusion_544, !"reqntidx", i32 1}
!8 = !{ptr @concatenate_338, !"kernel", i32 1}
!9 = !{ptr @concatenate_338, !"reqntidx", i32 1024}
!10 = !{ptr @fusion_485, !"kernel", i32 1}
!11 = !{ptr @fusion_485, !"reqntidx", i32 1024}
!12 = !{ptr @reduce_24, !"kernel", i32 1}
!13 = !{ptr @reduce_24, !"reqntidx", i32 1024}
!14 = !{ptr @fusion_484, !"kernel", i32 1}
!15 = !{ptr @fusion_484, !"reqntidx", i32 256}
!16 = !{ptr @fusion_479, !"kernel", i32 1}
!17 = !{ptr @fusion_479, !"reqntidx", i32 1024}
!18 = !{ptr @concatenate_307, !"kernel", i32 1}
!19 = !{ptr @concatenate_307, !"reqntidx", i32 1024}
!20 = !{ptr @concatenate_379, !"kernel", i32 1}
!21 = !{ptr @concatenate_379, !"reqntidx", i32 1024}
!22 = !{ptr @concatenate_340, !"kernel", i32 1}
!23 = !{ptr @concatenate_340, !"reqntidx", i32 1024}
!24 = !{ptr @concatenate_333, !"kernel", i32 1}
!25 = !{ptr @concatenate_333, !"reqntidx", i32 1024}
!26 = !{ptr @concatenate_308, !"kernel", i32 1}
!27 = !{ptr @concatenate_308, !"reqntidx", i32 1024}
!28 = !{ptr @concatenate_386, !"kernel", i32 1}
!29 = !{ptr @concatenate_386, !"reqntidx", i32 1024}
!30 = !{ptr @concatenate_334, !"kernel", i32 1}
!31 = !{ptr @concatenate_334, !"reqntidx", i32 1024}
!32 = !{ptr @concatenate_350, !"kernel", i32 1}
!33 = !{ptr @concatenate_350, !"reqntidx", i32 1024}
!34 = !{ptr @concatenate_313, !"kernel", i32 1}
!35 = !{ptr @concatenate_313, !"reqntidx", i32 1024}
!36 = !{ptr @concatenate_331, !"kernel", i32 1}
!37 = !{ptr @concatenate_331, !"reqntidx", i32 1024}
!38 = !{ptr @concatenate_312, !"kernel", i32 1}
!39 = !{ptr @concatenate_312, !"reqntidx", i32 1024}
!40 = !{ptr @concatenate_309, !"kernel", i32 1}
!41 = !{ptr @concatenate_309, !"reqntidx", i32 1024}
!42 = !{ptr @concatenate_326, !"kernel", i32 1}
!43 = !{ptr @concatenate_326, !"reqntidx", i32 256}
!44 = !{ptr @concatenate_303, !"kernel", i32 1}
!45 = !{ptr @concatenate_303, !"reqntidx", i32 256}
!46 = !{ptr @fusion_323, !"kernel", i32 1}
!47 = !{ptr @fusion_323, !"reqntidx", i32 1024}
!48 = !{ptr @fusion_462, !"kernel", i32 1}
!49 = !{ptr @fusion_462, !"reqntidx", i32 1024}
!50 = !{ptr @fusion_699, !"kernel", i32 1}
!51 = !{ptr @fusion_699, !"reqntidx", i32 1024}
!52 = !{ptr @fusion_434, !"kernel", i32 1}
!53 = !{ptr @fusion_434, !"reqntidx", i32 1024}
!54 = !{ptr @fusion_409, !"kernel", i32 1}
!55 = !{ptr @fusion_409, !"reqntidx", i32 1024}
!56 = !{ptr @fusion_416, !"kernel", i32 1}
!57 = !{ptr @fusion_416, !"reqntidx", i32 1024}
!58 = !{ptr @fusion_725, !"kernel", i32 1}
!59 = !{ptr @fusion_725, !"reqntidx", i32 1024}
!60 = !{ptr @fusion_694, !"kernel", i32 1}
!61 = !{ptr @fusion_694, !"reqntidx", i32 1024}
!62 = !{ptr @fusion_450, !"kernel", i32 1}
!63 = !{ptr @fusion_450, !"reqntidx", i32 128}
!64 = !{ptr @fusion_449, !"kernel", i32 1}
!65 = !{ptr @fusion_449, !"reqntidx", i32 1024}
!66 = !{ptr @fusion_319, !"kernel", i32 1}
!67 = !{ptr @fusion_319, !"reqntidx", i32 1024}
!68 = !{ptr @fusion_317, !"kernel", i32 1}
!69 = !{ptr @fusion_317, !"reqntidx", i32 1024}
!70 = !{ptr @fusion_445, !"kernel", i32 1}
!71 = !{ptr @fusion_445, !"reqntidx", i32 1024}
!72 = !{ptr @fusion_321, !"kernel", i32 1}
!73 = !{ptr @fusion_321, !"reqntidx", i32 1024}
!74 = !{ptr @fusion_309, !"kernel", i32 1}
!75 = !{ptr @fusion_309, !"reqntidx", i32 1024}
!76 = !{ptr @fusion_500, !"kernel", i32 1}
!77 = !{ptr @fusion_500, !"reqntidx", i32 128}
!78 = !{ptr @concatenate_343, !"kernel", i32 1}
!79 = !{ptr @concatenate_343, !"reqntidx", i32 256}
!80 = !{ptr @fusion_237, !"kernel", i32 1}
!81 = !{ptr @fusion_237, !"reqntidx", i32 1024}
!82 = !{ptr @concatenate_358, !"kernel", i32 1}
!83 = !{ptr @concatenate_358, !"reqntidx", i32 256}
!84 = !{ptr @fusion_363, !"kernel", i32 1}
!85 = !{ptr @fusion_363, !"reqntidx", i32 1024}
!86 = !{ptr @fusion_351, !"kernel", i32 1}
!87 = !{ptr @fusion_351, !"reqntidx", i32 128}
!88 = !{ptr @fusion_299, !"kernel", i32 1}
!89 = !{ptr @fusion_299, !"reqntidx", i32 1024}
!90 = !{ptr @fusion_526, !"kernel", i32 1}
!91 = !{ptr @fusion_526, !"reqntidx", i32 128}
!92 = !{ptr @concatenate_349, !"kernel", i32 1}
!93 = !{ptr @concatenate_349, !"reqntidx", i32 256}
!94 = !{ptr @concatenate_370, !"kernel", i32 1}
!95 = !{ptr @concatenate_370, !"reqntidx", i32 256}
!96 = !{ptr @fusion_390, !"kernel", i32 1}
!97 = !{ptr @fusion_390, !"reqntidx", i32 1024}
!98 = !{ptr @fusion_235, !"kernel", i32 1}
!99 = !{ptr @fusion_235, !"reqntidx", i32 1024}
!100 = !{ptr @fusion_304, !"kernel", i32 1}
!101 = !{ptr @fusion_304, !"reqntidx", i32 128}
!102 = !{ptr @fusion_232, !"kernel", i32 1}
!103 = !{ptr @fusion_232, !"reqntidx", i32 128}
!104 = !{ptr @concatenate_341, !"kernel", i32 1}
!105 = !{ptr @concatenate_341, !"reqntidx", i32 256}
!106 = !{ptr @fusion_185, !"kernel", i32 1}
!107 = !{ptr @fusion_185, !"reqntidx", i32 1024}
!108 = !{ptr @fusion_756, !"kernel", i32 1}
!109 = !{ptr @fusion_756, !"reqntidx", i32 1024}
!110 = !{ptr @concatenate_344, !"kernel", i32 1}
!111 = !{ptr @concatenate_344, !"reqntidx", i32 256}
!112 = !{ptr @fusion_279, !"kernel", i32 1}
!113 = !{ptr @fusion_279, !"reqntidx", i32 1024}
!114 = !{ptr @concatenate_382, !"kernel", i32 1}
!115 = !{ptr @concatenate_382, !"reqntidx", i32 256}
!116 = !{ptr @concatenate_381, !"kernel", i32 1}
!117 = !{ptr @concatenate_381, !"reqntidx", i32 256}
!118 = !{ptr @fusion_389, !"kernel", i32 1}
!119 = !{ptr @fusion_389, !"reqntidx", i32 1024}
!120 = !{ptr @fusion_137, !"kernel", i32 1}
!121 = !{ptr @fusion_137, !"reqntidx", i32 256}
!122 = !{ptr @fusion_370, !"kernel", i32 1}
!123 = !{ptr @fusion_370, !"reqntidx", i32 1024}
!124 = !{ptr @fusion_213, !"kernel", i32 1}
!125 = !{ptr @fusion_213, !"reqntidx", i32 256}
!126 = !{ptr @concatenate_342, !"kernel", i32 1}
!127 = !{ptr @concatenate_342, !"reqntidx", i32 256}
!128 = !{ptr @fusion_289, !"kernel", i32 1}
!129 = !{ptr @fusion_289, !"reqntidx", i32 1024}
!130 = !{ptr @fusion_438, !"kernel", i32 1}
!131 = !{ptr @fusion_438, !"reqntidx", i32 1024}
!132 = !{ptr @fusion_270, !"kernel", i32 1}
!133 = !{ptr @fusion_270, !"reqntidx", i32 1024}
!134 = !{ptr @fusion_421, !"kernel", i32 1}
!135 = !{ptr @fusion_421, !"reqntidx", i32 1024}
!136 = !{ptr @fusion_104, !"kernel", i32 1}
!137 = !{ptr @fusion_104, !"reqntidx", i32 256}
!138 = !{ptr @concatenate_378, !"kernel", i32 1}
!139 = !{ptr @concatenate_378, !"reqntidx", i32 256}
!140 = !{ptr @fusion_356, !"kernel", i32 1}
!141 = !{ptr @fusion_356, !"reqntidx", i32 1024}
!142 = !{ptr @fusion_140, !"kernel", i32 1}
!143 = !{ptr @fusion_140, !"reqntidx", i32 1024}
!144 = !{ptr @fusion_377, !"kernel", i32 1}
!145 = !{ptr @fusion_377, !"reqntidx", i32 1024}
!146 = !{ptr @fusion_361, !"kernel", i32 1}
!147 = !{ptr @fusion_361, !"reqntidx", i32 1024}
!148 = !{ptr @fusion_380, !"kernel", i32 1}
!149 = !{ptr @fusion_380, !"reqntidx", i32 1024}
!150 = !{ptr @concatenate_389, !"kernel", i32 1}
!151 = !{ptr @concatenate_389, !"reqntidx", i32 256}
!152 = !{ptr @fusion_340, !"kernel", i32 1}
!153 = !{ptr @fusion_340, !"reqntidx", i32 96}
!154 = !{ptr @slice_956, !"kernel", i32 1}
!155 = !{ptr @slice_956, !"reqntidx", i32 256}
!156 = !{ptr @fusion_346, !"kernel", i32 1}
!157 = !{ptr @fusion_346, !"reqntidx", i32 256}
!158 = !{ptr @fusion_345, !"kernel", i32 1}
!159 = !{ptr @fusion_345, !"reqntidx", i32 256}
!160 = !{ptr @slice_612, !"kernel", i32 1}
!161 = !{ptr @slice_612, !"reqntidx", i32 256}
!162 = !{ptr @fusion_565, !"kernel", i32 1}
!163 = !{ptr @fusion_565, !"reqntidx", i32 1024}
!164 = !{ptr @fusion_552, !"kernel", i32 1}
!165 = !{ptr @fusion_552, !"reqntidx", i32 1024}
!166 = !{ptr @fusion_15, !"kernel", i32 1}
!167 = !{ptr @fusion_15, !"reqntidx", i32 1024}
!168 = !{ptr @fusion_16, !"kernel", i32 1}
!169 = !{ptr @fusion_16, !"reqntidx", i32 6}
!170 = !{ptr @fusion_6, !"kernel", i32 1}
!171 = !{ptr @fusion_6, !"reqntidx", i32 336}
!172 = !{ptr @fusion_9, !"kernel", i32 1}
!173 = !{ptr @fusion_9, !"reqntidx", i32 1024}
!174 = !{ptr @fusion_548, !"kernel", i32 1}
!175 = !{ptr @fusion_548, !"reqntidx", i32 256}
!176 = !{ptr @fusion_19, !"kernel", i32 1}
!177 = !{ptr @fusion_19, !"reqntidx", i32 1024}
!178 = !{ptr @reduce, !"kernel", i32 1}
!179 = !{ptr @reduce, !"reqntidx", i32 1024}
!180 = !{ptr @fusion_18, !"kernel", i32 1}
!181 = !{ptr @fusion_18, !"reqntidx", i32 90}
!182 = !{ptr @fusion_10, !"kernel", i32 1}
!183 = !{ptr @fusion_10, !"reqntidx", i32 1024}
!184 = !{ptr @fusion_13, !"kernel", i32 1}
!185 = !{ptr @fusion_13, !"reqntidx", i32 256}
!186 = !{ptr @fusion_69, !"kernel", i32 1}
!187 = !{ptr @fusion_69, !"reqntidx", i32 1024}
!188 = !{ptr @fusion_79, !"kernel", i32 1}
!189 = !{ptr @fusion_79, !"reqntidx", i32 1024}
!190 = !{ptr @fusion_68, !"kernel", i32 1}
!191 = !{ptr @fusion_68, !"reqntidx", i32 256}
!192 = !{ptr @fusion_391, !"kernel", i32 1}
!193 = !{ptr @fusion_391, !"reqntidx", i32 256}
!194 = !{ptr @fusion_734, !"kernel", i32 1}
!195 = !{ptr @fusion_734, !"reqntidx", i32 1024}
!196 = !{ptr @add_225, !"kernel", i32 1}
!197 = !{ptr @add_225, !"reqntidx", i32 256}
!198 = !{ptr @add_220, !"kernel", i32 1}
!199 = !{ptr @add_220, !"reqntidx", i32 256}
!200 = !{ptr @fusion_729, !"kernel", i32 1}
!201 = !{ptr @fusion_729, !"reqntidx", i32 1024}
!202 = !{ptr @fusion_362, !"kernel", i32 1}
!203 = !{ptr @fusion_362, !"reqntidx", i32 512}
!204 = !{ptr @fusion_48, !"kernel", i32 1}
!205 = !{ptr @fusion_48, !"reqntidx", i32 1024}
!206 = !{ptr @fusion_45, !"kernel", i32 1}
!207 = !{ptr @fusion_45, !"reqntidx", i32 1024}
!208 = !{ptr @fusion_49, !"kernel", i32 1}
!209 = !{ptr @fusion_49, !"reqntidx", i32 256}
!210 = !{ptr @slice_662, !"kernel", i32 1}
!211 = !{ptr @slice_662, !"reqntidx", i32 256}
!212 = !{ptr @slice_665, !"kernel", i32 1}
!213 = !{ptr @slice_665, !"reqntidx", i32 256}
!214 = !{ptr @fusion_644, !"kernel", i32 1}
!215 = !{ptr @fusion_644, !"reqntidx", i32 256}
!216 = !{ptr @fusion_8, !"kernel", i32 1}
!217 = !{ptr @fusion_8, !"reqntidx", i32 768}
!218 = !{ptr @fusion_7, !"kernel", i32 1}
!219 = !{ptr @fusion_7, !"reqntidx", i32 1024}
!220 = !{ptr @fusion_12, !"kernel", i32 1}
!221 = !{ptr @fusion_12, !"reqntidx", i32 1024}
!222 = !{ptr @fusion_11, !"kernel", i32 1}
!223 = !{ptr @fusion_11, !"reqntidx", i32 1024}
!224 = !{ptr @fusion_46, !"kernel", i32 1}
!225 = !{ptr @fusion_46, !"reqntidx", i32 256}
!226 = !{ptr @fusion_357, !"kernel", i32 1}
!227 = !{ptr @fusion_357, !"reqntidx", i32 96}
!228 = !{ptr @fusion_332, !"kernel", i32 1}
!229 = !{ptr @fusion_332, !"reqntidx", i32 1024}
!230 = !{ptr @reduce_3891, !"kernel", i32 1}
!231 = !{ptr @reduce_3891, !"reqntidx", i32 1024}
!232 = !{ptr @fusion_331, !"kernel", i32 1}
!233 = !{ptr @fusion_331, !"reqntidx", i32 10}
!234 = !{ptr @fusion_330, !"kernel", i32 1}
!235 = !{ptr @fusion_330, !"reqntidx", i32 1024}
!236 = !{ptr @fusion_328, !"kernel", i32 1}
!237 = !{ptr @fusion_328, !"reqntidx", i32 1024}
!238 = !{ptr @reduce_3908, !"kernel", i32 1}
!239 = !{ptr @reduce_3908, !"reqntidx", i32 1024}
!240 = !{ptr @fusion_327, !"kernel", i32 1}
!241 = !{ptr @fusion_327, !"reqntidx", i32 511}
!242 = !{ptr @fusion_326, !"kernel", i32 1}
!243 = !{ptr @fusion_326, !"reqntidx", i32 256}
!244 = !{ptr @fusion_359, !"kernel", i32 1}
!245 = !{ptr @fusion_359, !"reqntidx", i32 256}
!246 = !{ptr @fusion_352, !"kernel", i32 1}
!247 = !{ptr @fusion_352, !"reqntidx", i32 256}
!248 = !{ptr @add_151, !"kernel", i32 1}
!249 = !{ptr @add_151, !"reqntidx", i32 128}
!250 = !{ptr @slice_659, !"kernel", i32 1}
!251 = !{ptr @slice_659, !"reqntidx", i32 256}
!252 = !{ptr @slice_664, !"kernel", i32 1}
!253 = !{ptr @slice_664, !"reqntidx", i32 256}
!254 = !{ptr @fusion_1, !"kernel", i32 1}
!255 = !{ptr @fusion_1, !"reqntidx", i32 256}
!256 = !{ptr @fusion_546, !"kernel", i32 1}
!257 = !{ptr @fusion_546, !"reqntidx", i32 256}
!258 = !{ptr @fusion_138, !"kernel", i32 1}
!259 = !{ptr @fusion_138, !"reqntidx", i32 256}
!260 = !{ptr @fusion_657, !"kernel", i32 1}
!261 = !{ptr @fusion_657, !"reqntidx", i32 1024}
!262 = !{ptr @fusion_659, !"kernel", i32 1}
!263 = !{ptr @fusion_659, !"reqntidx", i32 256}
!264 = !{i32 0, i32 6}
!265 = !{i32 0, i32 512}
!266 = !{i32 0, i32 1}
!267 = distinct !{!267, !268}
!268 = !{!"llvm.loop.vectorize.enable", i1 false}
!269 = !{}
!270 = distinct !{!270, !268, !271}
!271 = !{!"llvm.loop.unroll.full"}
!272 = distinct !{!272, !268, !271}
!273 = distinct !{!273, !268}
!274 = distinct !{!274, !268, !271}
!275 = distinct !{!275, !268, !271}
!276 = distinct !{!276, !268}
!277 = distinct !{!277, !268, !271}
!278 = distinct !{!278, !268, !271}
!279 = distinct !{!279, !268}
!280 = distinct !{!280, !268, !271}
!281 = distinct !{!281, !268, !271}
!282 = distinct !{!282, !268}
!283 = distinct !{!283, !268, !271}
!284 = distinct !{!284, !268, !271}
!285 = distinct !{!285, !268}
!286 = distinct !{!286, !268, !271}
!287 = distinct !{!287, !268, !271}
!288 = !{i32 0, i32 8}
!289 = distinct !{!289, !268}
!290 = distinct !{!290, !268, !271}
!291 = distinct !{!291, !268, !271}
!292 = distinct !{!292, !268}
!293 = distinct !{!293, !268, !271}
!294 = distinct !{!294, !268, !271}
!295 = distinct !{!295, !268}
!296 = distinct !{!296, !268, !271}
!297 = distinct !{!297, !268, !271}
!298 = distinct !{!298, !268}
!299 = distinct !{!299, !268, !271}
!300 = distinct !{!300, !268, !271}
!301 = distinct !{!301, !268}
!302 = distinct !{!302, !268, !271}
!303 = distinct !{!303, !268, !271}
!304 = distinct !{!304, !268}
!305 = distinct !{!305, !268, !271}
!306 = distinct !{!306, !268, !271}
!307 = distinct !{!307, !268}
!308 = distinct !{!308, !268, !271}
!309 = distinct !{!309, !268, !271}
!310 = distinct !{!310, !268}
!311 = distinct !{!311, !268, !271}
!312 = distinct !{!312, !268, !271}
!313 = distinct !{!313, !268}
!314 = distinct !{!314, !268, !271}
!315 = distinct !{!315, !268, !271}
!316 = !{i32 0, i32 12}
!317 = !{i32 0, i32 1024}
!318 = !{i32 0, i32 256}
!319 = distinct !{!319, !268, !271}
!320 = distinct !{!320, !268}
!321 = !{i32 0, i32 4}
!322 = distinct !{!322, !268, !271}
!323 = distinct !{!323, !268}
!324 = distinct !{!324, !268, !271}
!325 = distinct !{!325, !268}
!326 = !{i32 0, i32 28}
!327 = !{i32 0, i32 36}
!328 = !{i32 0, i32 39}
!329 = !{i32 0, i32 40}
!330 = !{i32 0, i32 44}
!331 = !{i32 0, i32 48}
!332 = !{i32 0, i32 56}
!333 = !{i32 0, i32 66}
!334 = !{i32 0, i32 76}
!335 = !{i32 0, i32 88}
!336 = !{i32 0, i32 90}
!337 = !{i32 0, i32 96}
!338 = !{i32 0, i32 112}
!339 = !{i32 0, i32 120}
!340 = !{i32 0, i32 128}
!341 = distinct !{!341, !268, !271}
!342 = distinct !{!342, !268}
!343 = distinct !{!343, !268, !271}
!344 = distinct !{!344, !268}
!345 = !{i32 0, i32 2}
!346 = distinct !{!346, !268, !271}
!347 = distinct !{!347, !268}
!348 = distinct !{!348, !268, !271}
!349 = distinct !{!349, !268}
!350 = distinct !{!350, !268, !271}
!351 = distinct !{!351, !268}
!352 = !{i32 0, i32 32}
!353 = distinct !{!353, !268, !271}
!354 = distinct !{!354, !268}
!355 = distinct !{!355, !268, !271}
!356 = distinct !{!356, !268}
!357 = distinct !{!357, !268, !271}
!358 = distinct !{!358, !268}
!359 = distinct !{!359, !268, !271}
!360 = distinct !{!360, !268}
!361 = !{i32 0, i32 5}
!362 = distinct !{!362, !268, !271}
!363 = distinct !{!363, !268}
!364 = distinct !{!364, !268, !271}
!365 = distinct !{!365, !268}
!366 = distinct !{!366, !268, !271}
!367 = distinct !{!367, !268}
!368 = distinct !{!368, !268, !271}
!369 = distinct !{!369, !268}
!370 = distinct !{!370, !268, !271}
!371 = distinct !{!371, !268}
!372 = distinct !{!372, !268, !271}
!373 = distinct !{!373, !268}
!374 = distinct !{!374, !268, !271}
!375 = distinct !{!375, !268}
!376 = distinct !{!376, !268, !271}
!377 = distinct !{!377, !268}
!378 = distinct !{!378, !268, !271}
!379 = distinct !{!379, !268}
!380 = distinct !{!380, !268, !271}
!381 = distinct !{!381, !268}
!382 = distinct !{!382, !268, !271}
!383 = distinct !{!383, !268}
!384 = !{i32 0, i32 1152}
!385 = distinct !{!385, !268, !271}
!386 = distinct !{!386, !268}
!387 = !{i32 0, i32 1792}
!388 = distinct !{!388, !268, !271}
!389 = distinct !{!389, !268}
!390 = !{i32 0, i32 864}
!391 = distinct !{!391, !268}
!392 = distinct !{!392, !268, !271}
!393 = distinct !{!393, !268}
!394 = !{i32 0, i32 2112}
!395 = !{i32 0, i32 2432}
!396 = distinct !{!396, !268, !271}
!397 = distinct !{!397, !268}
!398 = !{i32 0, i32 2560}
!399 = distinct !{!399, !268, !271}
!400 = distinct !{!400, !268}
!401 = distinct !{!401, !268, !271}
!402 = distinct !{!402, !268}
!403 = distinct !{!403, !268, !271}
!404 = distinct !{!404, !268}
!405 = distinct !{!405, !268, !271}
!406 = distinct !{!406, !268}
!407 = distinct !{!407, !268, !271}
!408 = distinct !{!408, !268}
!409 = distinct !{!409, !268, !271}
!410 = distinct !{!410, !268}
!411 = !{i32 0, i32 2816}
!412 = !{i32 0, i32 2880}
!413 = !{i32 0, i32 3072}
!414 = distinct !{!414, !268, !271}
!415 = distinct !{!415, !268}
!416 = !{i32 0, i32 3584}
!417 = !{i32 0, i32 16}
!418 = !{i32 0, i32 1536}
!419 = !{i32 0, i32 3840}
!420 = !{i32 0, i32 64}
!421 = !{i32 0, i32 12416}
!422 = !{i32 0, i32 2731}
!423 = distinct !{!423, !268}
!424 = distinct !{!424, !268, !271}
!425 = distinct !{!425, !268, !271}
!426 = !{i32 0, i32 192}
!427 = !{i32 0, i32 2048}
!428 = !{i32 0, i32 11840}
!429 = !{i32 0, i32 34816}
!430 = distinct !{!430, !268, !271}
!431 = distinct !{!431, !268}
!432 = !{i32 0, i32 336}
!433 = !{i32 0, i32 9}
!434 = distinct !{!434, !268, !271}
!435 = distinct !{!435, !268}
!436 = !{i32 0, i32 3}
!437 = distinct !{!437, !268, !271}
!438 = distinct !{!438, !268}
!439 = !{i32 0, i32 132}
!440 = distinct !{!440, !268, !271}
!441 = distinct !{!441, !268}
!442 = distinct !{!442, !268, !271}
!443 = distinct !{!443, !268}
!444 = distinct !{!444, !268, !271}
!445 = distinct !{!445, !268}
!446 = distinct !{!446, !268, !271}
!447 = distinct !{!447, !268}
!448 = !{i32 0, i32 448}
!449 = distinct !{!449, !268, !271}
!450 = distinct !{!450, !268}
!451 = distinct !{!451, !268, !271}
!452 = distinct !{!452, !268}
!453 = distinct !{!453, !268, !271}
!454 = distinct !{!454, !268}
!455 = distinct !{!455, !268, !271}
!456 = distinct !{!456, !268}
!457 = distinct !{!457, !268, !271}
!458 = distinct !{!458, !268}
!459 = !{i32 0, i32 740}
!460 = !{i32 0, i32 4912}
!461 = !{i32 0, i32 768}
!462 = !{i32 0, i32 23}
!463 = !{i32 0, i32 683}
!464 = distinct !{!464, !268}
!465 = distinct !{!465, !268, !271}
!466 = distinct !{!466, !268, !271}
!467 = distinct !{!467, !268, !271}
!468 = distinct !{!468, !268}
!469 = distinct !{!469, !268, !271}
!470 = distinct !{!470, !268}
!471 = !{i32 0, i32 10}
!472 = distinct !{!472, !268, !271}
!473 = distinct !{!473, !268}
!474 = distinct !{!474, !268, !271}
!475 = distinct !{!475, !268}
!476 = !{i32 0, i32 511}
!477 = !{i32 0, i32 276}
!478 = distinct !{!478, !268}
!479 = !{i32 0, i32 11968}
!480 = !{i32 0, i32 7744}
