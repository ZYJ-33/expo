target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

@buffer_for_constant_34 = constant [64 x i8] c"\00\00\00\80\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 128
@buffer_for_constant_32 = constant [64 x i8] zeroinitializer, align 128
@0 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@1 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache1 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@2 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache2 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@3 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache3 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache4 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache5 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@4 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache6 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache7 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache8 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@5 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache9 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache10 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache11 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache12 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache13 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@6 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache14 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache15 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache16 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache17 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache18 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache19 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache20 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@shared_cache21 = private addrspace(3) global [1 x [1 x [16 x float]]] undef
@7 = private unnamed_addr constant [4 x i8] zeroinitializer
@shared_cache22 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache23 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@8 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@shared_cache24 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@9 = private unnamed_addr constant [4 x i8] zeroinitializer
@10 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@11 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache25 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache26 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@12 = private unnamed_addr constant [4 x i8] zeroinitializer
@13 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache27 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@14 = private unnamed_addr constant [4 x i8] zeroinitializer
@15 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache28 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache29 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@16 = private unnamed_addr constant [4 x i8] zeroinitializer
@17 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache30 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache31 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache32 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache33 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache34 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache35 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache36 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@18 = private unnamed_addr constant [4 x i8] zeroinitializer
@19 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache37 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache38 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@20 = private unnamed_addr constant [4 x i8] zeroinitializer
@21 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@22 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache39 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache40 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache41 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache42 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache43 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache44 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache45 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache46 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@23 = private unnamed_addr constant [4 x i8] zeroinitializer
@24 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache47 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache48 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache49 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@25 = private unnamed_addr constant [4 x i8] zeroinitializer
@26 = private unnamed_addr constant [4 x i8] c"\00\00\80?"
@27 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache50 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache51 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache52 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache53 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache54 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache55 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache56 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache57 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@28 = private unnamed_addr constant [4 x i8] zeroinitializer
@29 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache58 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@30 = private unnamed_addr constant [4 x i8] zeroinitializer
@31 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache59 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@32 = private unnamed_addr constant [4 x i8] zeroinitializer
@33 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache60 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@34 = private unnamed_addr constant [4 x i8] zeroinitializer
@35 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache61 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@36 = private unnamed_addr constant [4 x i8] zeroinitializer
@37 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache62 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache63 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@38 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@39 = private unnamed_addr constant [4 x i8] zeroinitializer
@40 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache64 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache65 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@41 = private unnamed_addr constant [4 x i8] zeroinitializer
@42 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache66 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@43 = private unnamed_addr constant [4 x i8] zeroinitializer
@44 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache67 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache68 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache69 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache70 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@shared_cache71 = private addrspace(3) global [1 x [1 x [32 x [33 x float]]]] undef
@45 = private unnamed_addr constant [4 x i8] zeroinitializer
@46 = private unnamed_addr constant [4 x i8] c"\00\00\00\80"
@shared_cache72 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache73 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache74 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache75 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache76 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache77 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef
@shared_cache78 = private addrspace(3) global [1 x [2 x [32 x [33 x float]]]] undef

define void @fusion_564(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(4) %arg4, ptr noalias align 128 dereferenceable(4) %arg5) {
entry:
  %return_buffer195 = alloca float, align 4
  %result_from_other_lane193 = alloca float, align 4
  %return_buffer192 = alloca float, align 4
  %result_from_other_lane190 = alloca float, align 4
  %return_buffer189 = alloca float, align 4
  %result_from_other_lane187 = alloca float, align 4
  %return_buffer186 = alloca float, align 4
  %result_from_other_lane184 = alloca float, align 4
  %return_buffer183 = alloca float, align 4
  %result_from_other_lane181 = alloca float, align 4
  %initial_value_addr180 = alloca float, align 4
  %return_buffer175 = alloca float, align 4
  %result_from_other_lane173 = alloca float, align 4
  %return_buffer172 = alloca float, align 4
  %result_from_other_lane170 = alloca float, align 4
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer145 = alloca float, align 4
  %tile_loop.invar_address129 = alloca i32, align 4
  %return_buffer125 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %y_in_tile.invar_address95 = alloca i32, align 4
  %partial_reduction_result81 = alloca float, align 4
  %reduction_input_address80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %tile_loop.invar_address22 = alloca i32, align 4
  %return_buffer18 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !192
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after179, %reduce-group-0-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_27_constant_11 = load float, ptr @0, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_27_constant_11, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %6 = urem i32 %4, 512
  %7 = udiv i32 %4, 512
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 1
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 512
  %thread_id.y = udiv i32 %6, 512
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 1
  %14 = udiv i32 %9, 1
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 1
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 1, i32 1
  %18 = icmp eq i32 %13, 0
  %tile_bound1 = select i1 %18, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 1
  %tile_origin.2 = mul i32 %13, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = icmp eq i32 8192, %tile_bound1
  br i1 %21, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit19, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !195

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result51 = load float, ptr %current_output, align 4
  %22 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %22, ptr %result_from_other_lane, align 4
  call void @region_1_12(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer52)
  %23 = load float, ptr %return_buffer52, align 4
  store float %23, ptr %current_output, align 4
  %partial_reduction_result54 = load float, ptr %current_output, align 4
  %24 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %24, ptr %result_from_other_lane53, align 4
  call void @region_1_12(ptr %current_output, ptr %result_from_other_lane53, ptr %return_buffer55)
  %25 = load float, ptr %return_buffer55, align 4
  store float %25, ptr %current_output, align 4
  %partial_reduction_result57 = load float, ptr %current_output, align 4
  %26 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %26, ptr %result_from_other_lane56, align 4
  call void @region_1_12(ptr %current_output, ptr %result_from_other_lane56, ptr %return_buffer58)
  %27 = load float, ptr %return_buffer58, align 4
  store float %27, ptr %current_output, align 4
  %partial_reduction_result60 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %28, ptr %result_from_other_lane59, align 4
  call void @region_1_12(ptr %current_output, ptr %result_from_other_lane59, ptr %return_buffer61)
  %29 = load float, ptr %return_buffer61, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result63 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %30, ptr %result_from_other_lane62, align 4
  call void @region_1_12(ptr %current_output, ptr %result_from_other_lane62, ptr %return_buffer64)
  %31 = load float, ptr %return_buffer64, align 4
  store float %31, ptr %current_output, align 4
  %32 = udiv i32 %thread_id.x, 32
  %33 = icmp eq i32 %lane_id, 0
  br i1 %33, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %34 = icmp eq i32 %32, 0
  br i1 %34, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %35 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %36 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %36, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %37 = icmp eq i32 %tile_loop.indvar, 0
  %38 = mul i32 %tile_loop.indvar, 1024
  %39 = add i32 %38, 0
  %x_loc = add i32 %39, %35
  %40 = add i32 %tile_origin.1, %y_in_tile.indvar
  %41 = add i32 %tile_origin.2, %x_loc
  %42 = mul nuw nsw i32 %41, 1
  %43 = add nuw nsw i32 0, %42
  %44 = mul nuw nsw i32 %40, 8192
  %45 = add nuw nsw i32 %43, %44
  %46 = mul nuw nsw i32 %tile_origin.0, 8192
  %47 = add nuw nsw i32 %45, %46
  %48 = udiv i32 %47, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %47
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %47
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.5 = fmul float %Arg_1.23, %Arg_0.14
  %region_0_27_constant_6 = load float, ptr @1, align 4
  %Arg_0.15 = getelementptr inbounds float, ptr %arg0, i32 %47
  %Arg_0.16 = load float, ptr %Arg_0.15, align 4, !invariant.load !197
  %subtract.8 = fsub float %region_0_27_constant_6, %Arg_0.16
  %multiply.9 = fmul float %multiply.5, %subtract.8
  store float %multiply.9, ptr %reduction_input_address, align 4
  %49 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_12(ptr %49, ptr %reduction_input_address, ptr %return_buffer)
  %50 = load float, ptr %return_buffer, align 4
  store float %50, ptr %49, align 4
  %51 = mul i32 %tile_loop.indvar, 1024
  %52 = add i32 %51, 1
  %x_loc7 = add i32 %52, %35
  %53 = add i32 %tile_origin.1, %y_in_tile.indvar
  %54 = add i32 %tile_origin.2, %x_loc7
  %55 = mul nuw nsw i32 %54, 1
  %56 = add nuw nsw i32 0, %55
  %57 = mul nuw nsw i32 %53, 8192
  %58 = add nuw nsw i32 %56, %57
  %59 = mul nuw nsw i32 %tile_origin.0, 8192
  %60 = add nuw nsw i32 %58, %59
  %61 = udiv i32 %60, 1
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %60
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !197
  %Arg_0.110 = getelementptr inbounds float, ptr %arg0, i32 %60
  %Arg_0.111 = load float, ptr %Arg_0.110, align 4, !invariant.load !197
  %multiply.512 = fmul float %Arg_1.29, %Arg_0.111
  %region_0_27_constant_613 = load float, ptr @1, align 4
  %Arg_0.114 = getelementptr inbounds float, ptr %arg0, i32 %60
  %Arg_0.115 = load float, ptr %Arg_0.114, align 4, !invariant.load !197
  %subtract.816 = fsub float %region_0_27_constant_613, %Arg_0.115
  %multiply.917 = fmul float %multiply.512, %subtract.816
  store float %multiply.917, ptr %reduction_input_address, align 4
  %62 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_12(ptr %62, ptr %reduction_input_address, ptr %return_buffer18)
  %63 = load float, ptr %return_buffer18, align 4
  store float %63, ptr %62, align 4
  br label %tile_loop.loop_header, !llvm.loop !198

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %64 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address22, align 4
  br label %tile_loop.loop_header20

tile_loop.loop_header20:                          ; preds = %x_in_tile-after39, %is_full_tile-false
  %tile_loop.indvar23 = load i32, ptr %tile_loop.invar_address22, align 4
  %65 = icmp uge i32 %tile_loop.indvar23, 8
  br i1 %65, label %tile_loop.loop_exit19, label %tile_loop.loop_body21

tile_loop.loop_body21:                            ; preds = %tile_loop.loop_header20
  %invar.inc24 = add nuw nsw i32 %tile_loop.indvar23, 1
  store i32 %invar.inc24, ptr %tile_loop.invar_address22, align 4
  %66 = icmp eq i32 %tile_loop.indvar23, 0
  %67 = mul i32 %tile_loop.indvar23, 1024
  %68 = add i32 %67, 0
  %x_loc25 = add i32 %68, %64
  %69 = add i32 %tile_origin.1, %y_in_tile.indvar
  %70 = add i32 %tile_origin.2, %x_loc25
  %71 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %71, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body21
  %72 = mul i32 %tile_loop.indvar23, 1024
  %73 = add i32 %72, 1
  %x_loc37 = add i32 %73, %64
  %74 = add i32 %tile_origin.1, %y_in_tile.indvar
  %75 = add i32 %tile_origin.2, %x_loc37
  %76 = icmp ult i32 %x_loc37, %tile_bound1
  br i1 %76, label %x_in_tile-true38, label %x_in_tile-after39

x_in_tile-after39:                                ; preds = %x_in_tile-true38, %x_in_tile-after
  br label %tile_loop.loop_header20, !llvm.loop !200

tile_loop.loop_exit19:                            ; preds = %tile_loop.loop_header20
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body21
  %77 = mul nuw nsw i32 %70, 1
  %78 = add nuw nsw i32 0, %77
  %79 = mul nuw nsw i32 %69, 8192
  %80 = add nuw nsw i32 %78, %79
  %81 = mul nuw nsw i32 %tile_origin.0, 8192
  %82 = add nuw nsw i32 %80, %81
  %83 = udiv i32 %82, 1
  %Arg_1.226 = getelementptr inbounds float, ptr %arg1, i32 %82
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !197
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %82
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !197
  %multiply.530 = fmul float %Arg_1.227, %Arg_0.129
  %region_0_27_constant_631 = load float, ptr @1, align 4
  %Arg_0.132 = getelementptr inbounds float, ptr %arg0, i32 %82
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !197
  %subtract.834 = fsub float %region_0_27_constant_631, %Arg_0.133
  %multiply.935 = fmul float %multiply.530, %subtract.834
  store float %multiply.935, ptr %reduction_input_address, align 4
  %84 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_12(ptr %84, ptr %reduction_input_address, ptr %return_buffer36)
  %85 = load float, ptr %return_buffer36, align 4
  store float %85, ptr %84, align 4
  br label %x_in_tile-after

x_in_tile-true38:                                 ; preds = %x_in_tile-after
  %86 = mul nuw nsw i32 %75, 1
  %87 = add nuw nsw i32 0, %86
  %88 = mul nuw nsw i32 %74, 8192
  %89 = add nuw nsw i32 %87, %88
  %90 = mul nuw nsw i32 %tile_origin.0, 8192
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 1
  %Arg_1.240 = getelementptr inbounds float, ptr %arg1, i32 %91
  %Arg_1.241 = load float, ptr %Arg_1.240, align 4, !invariant.load !197
  %Arg_0.142 = getelementptr inbounds float, ptr %arg0, i32 %91
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !197
  %multiply.544 = fmul float %Arg_1.241, %Arg_0.143
  %region_0_27_constant_645 = load float, ptr @1, align 4
  %Arg_0.146 = getelementptr inbounds float, ptr %arg0, i32 %91
  %Arg_0.147 = load float, ptr %Arg_0.146, align 4, !invariant.load !197
  %subtract.848 = fsub float %region_0_27_constant_645, %Arg_0.147
  %multiply.949 = fmul float %multiply.544, %subtract.848
  store float %multiply.949, ptr %reduction_input_address, align 4
  %93 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_12(ptr %93, ptr %reduction_input_address, ptr %return_buffer50)
  %94 = load float, ptr %return_buffer50, align 4
  store float %94, ptr %93, align 4
  br label %x_in_tile-after39

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %95 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i32 0, i32 %7, i32 0, i32 %32
  %96 = addrspacecast ptr addrspace(3) %95 to ptr
  %97 = load float, ptr %current_output, align 4
  store float %97, ptr %96, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %98 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache, i32 0, i32 %7, i32 0, i32 %lane_id
  %99 = addrspacecast ptr addrspace(3) %98 to ptr
  store float %region_0_27_constant_11, ptr %initial_value_addr, align 4
  %100 = icmp ult i32 %thread_id.x, 16
  %101 = select i1 %100, ptr %99, ptr %initial_value_addr
  %partial_reduction_result66 = load float, ptr %101, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %102, ptr %result_from_other_lane65, align 4
  call void @region_1_12(ptr %101, ptr %result_from_other_lane65, ptr %return_buffer67)
  %103 = load float, ptr %return_buffer67, align 4
  store float %103, ptr %101, align 4
  %partial_reduction_result69 = load float, ptr %101, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %104, ptr %result_from_other_lane68, align 4
  call void @region_1_12(ptr %101, ptr %result_from_other_lane68, ptr %return_buffer70)
  %105 = load float, ptr %return_buffer70, align 4
  store float %105, ptr %101, align 4
  %partial_reduction_result72 = load float, ptr %101, align 4
  %106 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %106, ptr %result_from_other_lane71, align 4
  call void @region_1_12(ptr %101, ptr %result_from_other_lane71, ptr %return_buffer73)
  %107 = load float, ptr %return_buffer73, align 4
  store float %107, ptr %101, align 4
  %partial_reduction_result75 = load float, ptr %101, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %108, ptr %result_from_other_lane74, align 4
  call void @region_1_12(ptr %101, ptr %result_from_other_lane74, ptr %return_buffer76)
  %109 = load float, ptr %return_buffer76, align 4
  store float %109, ptr %101, align 4
  %partial_reduction_result78 = load float, ptr %101, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %110, ptr %result_from_other_lane77, align 4
  call void @region_1_12(ptr %101, ptr %result_from_other_lane77, ptr %return_buffer79)
  %111 = load float, ptr %return_buffer79, align 4
  store float %111, ptr %101, align 4
  %112 = icmp eq i32 %thread_id.x, 0
  br i1 %112, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %113 = mul i32 %thread_id.x, 2
  %114 = add i32 %tile_origin.1, %thread_id.y
  %115 = add i32 %tile_origin.2, %113
  %116 = add i32 %115, 0
  %output = load float, ptr %101, align 4
  store float %output, ptr %arg4, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_27_constant_1182 = load float, ptr @0, align 4
  %117 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  store float %region_0_27_constant_1182, ptr %117, align 4
  %118 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %119 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %120 = urem i32 %118, 512
  %121 = udiv i32 %118, 512
  %122 = mul i32 %119, 1
  %123 = add i32 %122, %121
  %124 = icmp ult i32 %123, 1
  br i1 %124, label %125, label %early_return83

125:                                              ; preds = %reduce-group-1-true
  %thread_id.x84 = urem i32 %120, 512
  %thread_id.y85 = udiv i32 %120, 512
  %lane_id86 = urem i32 %120, 32
  %126 = udiv i32 %123, 1
  %127 = urem i32 %126, 1
  %128 = udiv i32 %123, 1
  %129 = urem i32 %128, 1
  %130 = udiv i32 %123, 1
  %131 = icmp eq i32 %129, 0
  %tile_bound87 = select i1 %131, i32 1, i32 1
  %132 = icmp eq i32 %127, 0
  %tile_bound88 = select i1 %132, i32 8192, i32 8192
  %tile_origin.089 = mul i32 %130, 1
  %tile_origin.190 = mul i32 %129, 1
  %tile_origin.291 = mul i32 %127, 8192
  store i32 %thread_id.y85, ptr %y_in_tile.invar_address95, align 4
  br label %y_in_tile.loop_header93

y_in_tile.loop_header93:                          ; preds = %is_full_tile-after100, %125
  %y_in_tile.indvar96 = load i32, ptr %y_in_tile.invar_address95, align 4
  %133 = icmp uge i32 %y_in_tile.indvar96, %tile_bound87
  br i1 %133, label %y_in_tile.loop_exit92, label %y_in_tile.loop_body94

y_in_tile.loop_body94:                            ; preds = %y_in_tile.loop_header93
  %invar.inc97 = add nuw nsw i32 %y_in_tile.indvar96, 1
  store i32 %invar.inc97, ptr %y_in_tile.invar_address95, align 4
  %134 = icmp eq i32 %y_in_tile.indvar96, %thread_id.y85
  %135 = icmp eq i32 8192, %tile_bound88
  br i1 %135, label %is_full_tile-true98, label %is_full_tile-false99

is_full_tile-after100:                            ; preds = %tile_loop.loop_exit126, %tile_loop.loop_exit101
  br label %y_in_tile.loop_header93, !llvm.loop !201

y_in_tile.loop_exit92:                            ; preds = %y_in_tile.loop_header93
  %current_output160 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  %partial_reduction_result162 = load float, ptr %current_output160, align 4
  %136 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 16, i32 31)
  store float %136, ptr %result_from_other_lane161, align 4
  call void @region_2_21(ptr %current_output160, ptr %result_from_other_lane161, ptr %return_buffer163)
  %137 = load float, ptr %return_buffer163, align 4
  store float %137, ptr %current_output160, align 4
  %partial_reduction_result165 = load float, ptr %current_output160, align 4
  %138 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 8, i32 31)
  store float %138, ptr %result_from_other_lane164, align 4
  call void @region_2_21(ptr %current_output160, ptr %result_from_other_lane164, ptr %return_buffer166)
  %139 = load float, ptr %return_buffer166, align 4
  store float %139, ptr %current_output160, align 4
  %partial_reduction_result168 = load float, ptr %current_output160, align 4
  %140 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 4, i32 31)
  store float %140, ptr %result_from_other_lane167, align 4
  call void @region_2_21(ptr %current_output160, ptr %result_from_other_lane167, ptr %return_buffer169)
  %141 = load float, ptr %return_buffer169, align 4
  store float %141, ptr %current_output160, align 4
  %partial_reduction_result171 = load float, ptr %current_output160, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result171, i32 2, i32 31)
  store float %142, ptr %result_from_other_lane170, align 4
  call void @region_2_21(ptr %current_output160, ptr %result_from_other_lane170, ptr %return_buffer172)
  %143 = load float, ptr %return_buffer172, align 4
  store float %143, ptr %current_output160, align 4
  %partial_reduction_result174 = load float, ptr %current_output160, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result174, i32 1, i32 31)
  store float %144, ptr %result_from_other_lane173, align 4
  call void @region_2_21(ptr %current_output160, ptr %result_from_other_lane173, ptr %return_buffer175)
  %145 = load float, ptr %return_buffer175, align 4
  store float %145, ptr %current_output160, align 4
  %146 = udiv i32 %thread_id.x84, 32
  %147 = icmp eq i32 %lane_id86, 0
  br i1 %147, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %y_in_tile.loop_exit92
  call void @llvm.nvvm.barrier0()
  %148 = icmp eq i32 %146, 0
  br i1 %148, label %inter_warp_reduce-true178, label %inter_warp_reduce-after179

inter_warp_reduce-after179:                       ; preds = %reduction_write_output-after197, %intra_warp_reduce_write-after177
  br label %reduce-group-1-after

early_return83:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true98:                              ; preds = %y_in_tile.loop_body94
  %149 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %tile_loop.loop_body103, %is_full_tile-true98
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %150 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %150, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %151 = icmp eq i32 %tile_loop.indvar105, 0
  %152 = mul i32 %tile_loop.indvar105, 1024
  %153 = add i32 %152, 0
  %x_loc107 = add i32 %153, %149
  %154 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %155 = add i32 %tile_origin.291, %x_loc107
  %156 = mul nuw nsw i32 %155, 1
  %157 = add nuw nsw i32 0, %156
  %158 = mul nuw nsw i32 %154, 8192
  %159 = add nuw nsw i32 %157, %158
  %160 = mul nuw nsw i32 %tile_origin.089, 8192
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 1
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %161
  %Arg_3.4108 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %161
  %Arg_2.3109 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %multiply.17 = fmul float %Arg_3.4108, %Arg_2.3109
  %region_0_27_constant_6110 = load float, ptr @1, align 4
  %Arg_2.3111 = getelementptr inbounds float, ptr %arg2, i32 %161
  %Arg_2.3112 = load float, ptr %Arg_2.3111, align 4, !invariant.load !197
  %subtract.18 = fsub float %region_0_27_constant_6110, %Arg_2.3112
  %multiply.19 = fmul float %multiply.17, %subtract.18
  store float %multiply.19, ptr %reduction_input_address80, align 4
  %163 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_21(ptr %163, ptr %reduction_input_address80, ptr %return_buffer113)
  %164 = load float, ptr %return_buffer113, align 4
  store float %164, ptr %163, align 4
  %165 = mul i32 %tile_loop.indvar105, 1024
  %166 = add i32 %165, 1
  %x_loc114 = add i32 %166, %149
  %167 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %168 = add i32 %tile_origin.291, %x_loc114
  %169 = mul nuw nsw i32 %168, 1
  %170 = add nuw nsw i32 0, %169
  %171 = mul nuw nsw i32 %167, 8192
  %172 = add nuw nsw i32 %170, %171
  %173 = mul nuw nsw i32 %tile_origin.089, 8192
  %174 = add nuw nsw i32 %172, %173
  %175 = udiv i32 %174, 1
  %Arg_3.4115 = getelementptr inbounds float, ptr %arg3, i32 %174
  %Arg_3.4116 = load float, ptr %Arg_3.4115, align 4, !invariant.load !197
  %Arg_2.3117 = getelementptr inbounds float, ptr %arg2, i32 %174
  %Arg_2.3118 = load float, ptr %Arg_2.3117, align 4, !invariant.load !197
  %multiply.17119 = fmul float %Arg_3.4116, %Arg_2.3118
  %region_0_27_constant_6120 = load float, ptr @1, align 4
  %Arg_2.3121 = getelementptr inbounds float, ptr %arg2, i32 %174
  %Arg_2.3122 = load float, ptr %Arg_2.3121, align 4, !invariant.load !197
  %subtract.18123 = fsub float %region_0_27_constant_6120, %Arg_2.3122
  %multiply.19124 = fmul float %multiply.17119, %subtract.18123
  store float %multiply.19124, ptr %reduction_input_address80, align 4
  %176 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_21(ptr %176, ptr %reduction_input_address80, ptr %return_buffer125)
  %177 = load float, ptr %return_buffer125, align 4
  store float %177, ptr %176, align 4
  br label %tile_loop.loop_header102, !llvm.loop !202

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after100

is_full_tile-false99:                             ; preds = %y_in_tile.loop_body94
  %178 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address129, align 4
  br label %tile_loop.loop_header127

tile_loop.loop_header127:                         ; preds = %x_in_tile-after148, %is_full_tile-false99
  %tile_loop.indvar130 = load i32, ptr %tile_loop.invar_address129, align 4
  %179 = icmp uge i32 %tile_loop.indvar130, 8
  br i1 %179, label %tile_loop.loop_exit126, label %tile_loop.loop_body128

tile_loop.loop_body128:                           ; preds = %tile_loop.loop_header127
  %invar.inc131 = add nuw nsw i32 %tile_loop.indvar130, 1
  store i32 %invar.inc131, ptr %tile_loop.invar_address129, align 4
  %180 = icmp eq i32 %tile_loop.indvar130, 0
  %181 = mul i32 %tile_loop.indvar130, 1024
  %182 = add i32 %181, 0
  %x_loc132 = add i32 %182, %178
  %183 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %184 = add i32 %tile_origin.291, %x_loc132
  %185 = icmp ult i32 %x_loc132, %tile_bound88
  br i1 %185, label %x_in_tile-true133, label %x_in_tile-after134

x_in_tile-after134:                               ; preds = %x_in_tile-true133, %tile_loop.loop_body128
  %186 = mul i32 %tile_loop.indvar130, 1024
  %187 = add i32 %186, 1
  %x_loc146 = add i32 %187, %178
  %188 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %189 = add i32 %tile_origin.291, %x_loc146
  %190 = icmp ult i32 %x_loc146, %tile_bound88
  br i1 %190, label %x_in_tile-true147, label %x_in_tile-after148

x_in_tile-after148:                               ; preds = %x_in_tile-true147, %x_in_tile-after134
  br label %tile_loop.loop_header127, !llvm.loop !203

tile_loop.loop_exit126:                           ; preds = %tile_loop.loop_header127
  br label %is_full_tile-after100

x_in_tile-true133:                                ; preds = %tile_loop.loop_body128
  %191 = mul nuw nsw i32 %184, 1
  %192 = add nuw nsw i32 0, %191
  %193 = mul nuw nsw i32 %183, 8192
  %194 = add nuw nsw i32 %192, %193
  %195 = mul nuw nsw i32 %tile_origin.089, 8192
  %196 = add nuw nsw i32 %194, %195
  %197 = udiv i32 %196, 1
  %Arg_3.4135 = getelementptr inbounds float, ptr %arg3, i32 %196
  %Arg_3.4136 = load float, ptr %Arg_3.4135, align 4, !invariant.load !197
  %Arg_2.3137 = getelementptr inbounds float, ptr %arg2, i32 %196
  %Arg_2.3138 = load float, ptr %Arg_2.3137, align 4, !invariant.load !197
  %multiply.17139 = fmul float %Arg_3.4136, %Arg_2.3138
  %region_0_27_constant_6140 = load float, ptr @1, align 4
  %Arg_2.3141 = getelementptr inbounds float, ptr %arg2, i32 %196
  %Arg_2.3142 = load float, ptr %Arg_2.3141, align 4, !invariant.load !197
  %subtract.18143 = fsub float %region_0_27_constant_6140, %Arg_2.3142
  %multiply.19144 = fmul float %multiply.17139, %subtract.18143
  store float %multiply.19144, ptr %reduction_input_address80, align 4
  %198 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_21(ptr %198, ptr %reduction_input_address80, ptr %return_buffer145)
  %199 = load float, ptr %return_buffer145, align 4
  store float %199, ptr %198, align 4
  br label %x_in_tile-after134

x_in_tile-true147:                                ; preds = %x_in_tile-after134
  %200 = mul nuw nsw i32 %189, 1
  %201 = add nuw nsw i32 0, %200
  %202 = mul nuw nsw i32 %188, 8192
  %203 = add nuw nsw i32 %201, %202
  %204 = mul nuw nsw i32 %tile_origin.089, 8192
  %205 = add nuw nsw i32 %203, %204
  %206 = udiv i32 %205, 1
  %Arg_3.4149 = getelementptr inbounds float, ptr %arg3, i32 %205
  %Arg_3.4150 = load float, ptr %Arg_3.4149, align 4, !invariant.load !197
  %Arg_2.3151 = getelementptr inbounds float, ptr %arg2, i32 %205
  %Arg_2.3152 = load float, ptr %Arg_2.3151, align 4, !invariant.load !197
  %multiply.17153 = fmul float %Arg_3.4150, %Arg_2.3152
  %region_0_27_constant_6154 = load float, ptr @1, align 4
  %Arg_2.3155 = getelementptr inbounds float, ptr %arg2, i32 %205
  %Arg_2.3156 = load float, ptr %Arg_2.3155, align 4, !invariant.load !197
  %subtract.18157 = fsub float %region_0_27_constant_6154, %Arg_2.3156
  %multiply.19158 = fmul float %multiply.17153, %subtract.18157
  store float %multiply.19158, ptr %reduction_input_address80, align 4
  %207 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_21(ptr %207, ptr %reduction_input_address80, ptr %return_buffer159)
  %208 = load float, ptr %return_buffer159, align 4
  store float %208, ptr %207, align 4
  br label %x_in_tile-after148

intra_warp_reduce_write-true176:                  ; preds = %y_in_tile.loop_exit92
  %209 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i32 0, i32 %121, i32 0, i32 %146
  %210 = addrspacecast ptr addrspace(3) %209 to ptr
  %211 = load float, ptr %current_output160, align 4
  store float %211, ptr %210, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %212 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache1, i32 0, i32 %121, i32 0, i32 %lane_id86
  %213 = addrspacecast ptr addrspace(3) %212 to ptr
  store float %region_0_27_constant_1182, ptr %initial_value_addr180, align 4
  %214 = icmp ult i32 %thread_id.x84, 16
  %215 = select i1 %214, ptr %213, ptr %initial_value_addr180
  %partial_reduction_result182 = load float, ptr %215, align 4
  %216 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  store float %216, ptr %result_from_other_lane181, align 4
  call void @region_2_21(ptr %215, ptr %result_from_other_lane181, ptr %return_buffer183)
  %217 = load float, ptr %return_buffer183, align 4
  store float %217, ptr %215, align 4
  %partial_reduction_result185 = load float, ptr %215, align 4
  %218 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result185, i32 8, i32 31)
  store float %218, ptr %result_from_other_lane184, align 4
  call void @region_2_21(ptr %215, ptr %result_from_other_lane184, ptr %return_buffer186)
  %219 = load float, ptr %return_buffer186, align 4
  store float %219, ptr %215, align 4
  %partial_reduction_result188 = load float, ptr %215, align 4
  %220 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result188, i32 4, i32 31)
  store float %220, ptr %result_from_other_lane187, align 4
  call void @region_2_21(ptr %215, ptr %result_from_other_lane187, ptr %return_buffer189)
  %221 = load float, ptr %return_buffer189, align 4
  store float %221, ptr %215, align 4
  %partial_reduction_result191 = load float, ptr %215, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result191, i32 2, i32 31)
  store float %222, ptr %result_from_other_lane190, align 4
  call void @region_2_21(ptr %215, ptr %result_from_other_lane190, ptr %return_buffer192)
  %223 = load float, ptr %return_buffer192, align 4
  store float %223, ptr %215, align 4
  %partial_reduction_result194 = load float, ptr %215, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result194, i32 1, i32 31)
  store float %224, ptr %result_from_other_lane193, align 4
  call void @region_2_21(ptr %215, ptr %result_from_other_lane193, ptr %return_buffer195)
  %225 = load float, ptr %return_buffer195, align 4
  store float %225, ptr %215, align 4
  %226 = icmp eq i32 %thread_id.x84, 0
  br i1 %226, label %reduction_write_output-true196, label %reduction_write_output-after197

reduction_write_output-after197:                  ; preds = %reduction_write_output-true196, %inter_warp_reduce-true178
  br label %inter_warp_reduce-after179

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178
  %227 = mul i32 %thread_id.x84, 2
  %228 = add i32 %tile_origin.190, %thread_id.y85
  %229 = add i32 %tile_origin.291, %227
  %230 = add i32 %229, 0
  %output198 = load float, ptr %215, align 4
  store float %output198, ptr %arg5, align 4
  br label %reduction_write_output-after197
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

define internal void @region_1_12(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare float @llvm.nvvm.shfl.sync.down.f32(i32, float, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

define internal void @region_2_21(ptr dereferenceable(4) %Arg_0.22.typed, ptr dereferenceable(4) %Arg_1.23.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.24.typed = alloca float, align 4
  %Arg_0.22 = load float, ptr %Arg_0.22.typed, align 4
  %Arg_1.23 = load float, ptr %Arg_1.23.typed, align 4
  %add.24 = fadd float %Arg_0.22, %Arg_1.23
  store float %add.24, ptr %add.24.typed, align 4
  %load_ret_value = load float, ptr %add.24.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_434(ptr noalias align 16 dereferenceable(4) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(4) %arg3, ptr noalias align 128 dereferenceable(4) %arg4, ptr noalias align 128 dereferenceable(4) %arg5, ptr noalias align 128 dereferenceable(4) %arg6) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !194
  %2 = mul nuw nsw i32 %0, 1
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 1
  br i1 %4, label %fusion_434.in_bounds-true, label %fusion_434.in_bounds-after

fusion_434.in_bounds-after:                       ; preds = %fusion_434.in_bounds-true, %entry
  ret void

fusion_434.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = load float, ptr %arg1, align 4, !invariant.load !197
  %multiply.8 = fmul float %7, %8
  %subtract.9 = fsub float %6, %multiply.8
  %9 = insertvalue { float, float } undef, float %subtract.9, 0
  %10 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %12 = load float, ptr %arg4, align 4, !invariant.load !197
  %multiply.11 = fmul float %7, %12
  %subtract.12 = fsub float %11, %multiply.11
  %13 = insertvalue { float, float } %9, float %subtract.12, 1
  %14 = extractvalue { float, float } %13, 0
  %15 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %14, ptr %15, align 4
  %16 = extractvalue { float, float } %13, 1
  %17 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %16, ptr %17, align 4
  br label %fusion_434.in_bounds-after
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #3

define void @fusion_570(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(4) %arg8, ptr noalias align 128 dereferenceable(4) %arg9, ptr noalias align 128 dereferenceable(4) %arg10, ptr noalias align 128 dereferenceable(4) %arg11) {
entry:
  %return_buffer433 = alloca float, align 4
  %result_from_other_lane431 = alloca float, align 4
  %return_buffer430 = alloca float, align 4
  %result_from_other_lane428 = alloca float, align 4
  %return_buffer427 = alloca float, align 4
  %result_from_other_lane425 = alloca float, align 4
  %return_buffer424 = alloca float, align 4
  %result_from_other_lane422 = alloca float, align 4
  %return_buffer421 = alloca float, align 4
  %result_from_other_lane419 = alloca float, align 4
  %initial_value_addr418 = alloca float, align 4
  %return_buffer413 = alloca float, align 4
  %result_from_other_lane411 = alloca float, align 4
  %return_buffer410 = alloca float, align 4
  %result_from_other_lane408 = alloca float, align 4
  %return_buffer407 = alloca float, align 4
  %result_from_other_lane405 = alloca float, align 4
  %return_buffer404 = alloca float, align 4
  %result_from_other_lane402 = alloca float, align 4
  %return_buffer401 = alloca float, align 4
  %result_from_other_lane399 = alloca float, align 4
  %return_buffer397 = alloca float, align 4
  %return_buffer383 = alloca float, align 4
  %tile_loop.invar_address367 = alloca i32, align 4
  %return_buffer363 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %tile_loop.invar_address342 = alloca i32, align 4
  %y_in_tile.invar_address333 = alloca i32, align 4
  %partial_reduction_result319 = alloca float, align 4
  %reduction_input_address318 = alloca float, align 4
  %return_buffer314 = alloca float, align 4
  %result_from_other_lane312 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %result_from_other_lane309 = alloca float, align 4
  %return_buffer308 = alloca float, align 4
  %result_from_other_lane306 = alloca float, align 4
  %return_buffer305 = alloca float, align 4
  %result_from_other_lane303 = alloca float, align 4
  %return_buffer302 = alloca float, align 4
  %result_from_other_lane300 = alloca float, align 4
  %initial_value_addr299 = alloca float, align 4
  %return_buffer294 = alloca float, align 4
  %result_from_other_lane292 = alloca float, align 4
  %return_buffer291 = alloca float, align 4
  %result_from_other_lane289 = alloca float, align 4
  %return_buffer288 = alloca float, align 4
  %result_from_other_lane286 = alloca float, align 4
  %return_buffer285 = alloca float, align 4
  %result_from_other_lane283 = alloca float, align 4
  %return_buffer282 = alloca float, align 4
  %result_from_other_lane280 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %return_buffer264 = alloca float, align 4
  %tile_loop.invar_address248 = alloca i32, align 4
  %return_buffer244 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address223 = alloca i32, align 4
  %y_in_tile.invar_address214 = alloca i32, align 4
  %partial_reduction_result200 = alloca float, align 4
  %reduction_input_address199 = alloca float, align 4
  %return_buffer195 = alloca float, align 4
  %result_from_other_lane193 = alloca float, align 4
  %return_buffer192 = alloca float, align 4
  %result_from_other_lane190 = alloca float, align 4
  %return_buffer189 = alloca float, align 4
  %result_from_other_lane187 = alloca float, align 4
  %return_buffer186 = alloca float, align 4
  %result_from_other_lane184 = alloca float, align 4
  %return_buffer183 = alloca float, align 4
  %result_from_other_lane181 = alloca float, align 4
  %initial_value_addr180 = alloca float, align 4
  %return_buffer175 = alloca float, align 4
  %result_from_other_lane173 = alloca float, align 4
  %return_buffer172 = alloca float, align 4
  %result_from_other_lane170 = alloca float, align 4
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer145 = alloca float, align 4
  %tile_loop.invar_address129 = alloca i32, align 4
  %return_buffer125 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %y_in_tile.invar_address95 = alloca i32, align 4
  %partial_reduction_result81 = alloca float, align 4
  %reduction_input_address80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %tile_loop.invar_address22 = alloca i32, align 4
  %return_buffer18 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !204
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after179, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %inter_warp_reduce-after298, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %inter_warp_reduce-after417, %reduce-group-2-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_49_constant_15 = load float, ptr @2, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_49_constant_15, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %8 = urem i32 %6, 512
  %9 = udiv i32 %6, 512
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 1
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 512
  %thread_id.y = udiv i32 %8, 512
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 1
  %16 = udiv i32 %11, 1
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 1
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 1, i32 1
  %20 = icmp eq i32 %15, 0
  %tile_bound1 = select i1 %20, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 1
  %tile_origin.2 = mul i32 %15, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = icmp eq i32 8192, %tile_bound1
  br i1 %23, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit19, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !205

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result51 = load float, ptr %current_output, align 4
  %24 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %24, ptr %result_from_other_lane, align 4
  call void @region_1_16(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer52)
  %25 = load float, ptr %return_buffer52, align 4
  store float %25, ptr %current_output, align 4
  %partial_reduction_result54 = load float, ptr %current_output, align 4
  %26 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %26, ptr %result_from_other_lane53, align 4
  call void @region_1_16(ptr %current_output, ptr %result_from_other_lane53, ptr %return_buffer55)
  %27 = load float, ptr %return_buffer55, align 4
  store float %27, ptr %current_output, align 4
  %partial_reduction_result57 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %28, ptr %result_from_other_lane56, align 4
  call void @region_1_16(ptr %current_output, ptr %result_from_other_lane56, ptr %return_buffer58)
  %29 = load float, ptr %return_buffer58, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result60 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %30, ptr %result_from_other_lane59, align 4
  call void @region_1_16(ptr %current_output, ptr %result_from_other_lane59, ptr %return_buffer61)
  %31 = load float, ptr %return_buffer61, align 4
  store float %31, ptr %current_output, align 4
  %partial_reduction_result63 = load float, ptr %current_output, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %32, ptr %result_from_other_lane62, align 4
  call void @region_1_16(ptr %current_output, ptr %result_from_other_lane62, ptr %return_buffer64)
  %33 = load float, ptr %return_buffer64, align 4
  store float %33, ptr %current_output, align 4
  %34 = udiv i32 %thread_id.x, 32
  %35 = icmp eq i32 %lane_id, 0
  br i1 %35, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %36 = icmp eq i32 %34, 0
  br i1 %36, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %37 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %38 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %38, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %39 = icmp eq i32 %tile_loop.indvar, 0
  %40 = mul i32 %tile_loop.indvar, 1024
  %41 = add i32 %40, 0
  %x_loc = add i32 %41, %37
  %42 = add i32 %tile_origin.1, %y_in_tile.indvar
  %43 = add i32 %tile_origin.2, %x_loc
  %44 = mul nuw nsw i32 %43, 1
  %45 = add nuw nsw i32 0, %44
  %46 = mul nuw nsw i32 %42, 8192
  %47 = add nuw nsw i32 %45, %46
  %48 = mul nuw nsw i32 %tile_origin.0, 8192
  %49 = add nuw nsw i32 %47, %48
  %50 = udiv i32 %49, 1
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %49
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %49
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.9 = fmul float %Arg_1.23, %Arg_0.14
  %region_0_49_constant_10 = load float, ptr @3, align 4
  %Arg_0.15 = getelementptr inbounds float, ptr %arg0, i32 %49
  %Arg_0.16 = load float, ptr %Arg_0.15, align 4, !invariant.load !197
  %subtract.12 = fsub float %region_0_49_constant_10, %Arg_0.16
  %multiply.13 = fmul float %multiply.9, %subtract.12
  store float %multiply.13, ptr %reduction_input_address, align 4
  %51 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_16(ptr %51, ptr %reduction_input_address, ptr %return_buffer)
  %52 = load float, ptr %return_buffer, align 4
  store float %52, ptr %51, align 4
  %53 = mul i32 %tile_loop.indvar, 1024
  %54 = add i32 %53, 1
  %x_loc7 = add i32 %54, %37
  %55 = add i32 %tile_origin.1, %y_in_tile.indvar
  %56 = add i32 %tile_origin.2, %x_loc7
  %57 = mul nuw nsw i32 %56, 1
  %58 = add nuw nsw i32 0, %57
  %59 = mul nuw nsw i32 %55, 8192
  %60 = add nuw nsw i32 %58, %59
  %61 = mul nuw nsw i32 %tile_origin.0, 8192
  %62 = add nuw nsw i32 %60, %61
  %63 = udiv i32 %62, 1
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %62
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !197
  %Arg_0.110 = getelementptr inbounds float, ptr %arg0, i32 %62
  %Arg_0.111 = load float, ptr %Arg_0.110, align 4, !invariant.load !197
  %multiply.912 = fmul float %Arg_1.29, %Arg_0.111
  %region_0_49_constant_1013 = load float, ptr @3, align 4
  %Arg_0.114 = getelementptr inbounds float, ptr %arg0, i32 %62
  %Arg_0.115 = load float, ptr %Arg_0.114, align 4, !invariant.load !197
  %subtract.1216 = fsub float %region_0_49_constant_1013, %Arg_0.115
  %multiply.1317 = fmul float %multiply.912, %subtract.1216
  store float %multiply.1317, ptr %reduction_input_address, align 4
  %64 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_16(ptr %64, ptr %reduction_input_address, ptr %return_buffer18)
  %65 = load float, ptr %return_buffer18, align 4
  store float %65, ptr %64, align 4
  br label %tile_loop.loop_header, !llvm.loop !206

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %66 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address22, align 4
  br label %tile_loop.loop_header20

tile_loop.loop_header20:                          ; preds = %x_in_tile-after39, %is_full_tile-false
  %tile_loop.indvar23 = load i32, ptr %tile_loop.invar_address22, align 4
  %67 = icmp uge i32 %tile_loop.indvar23, 8
  br i1 %67, label %tile_loop.loop_exit19, label %tile_loop.loop_body21

tile_loop.loop_body21:                            ; preds = %tile_loop.loop_header20
  %invar.inc24 = add nuw nsw i32 %tile_loop.indvar23, 1
  store i32 %invar.inc24, ptr %tile_loop.invar_address22, align 4
  %68 = icmp eq i32 %tile_loop.indvar23, 0
  %69 = mul i32 %tile_loop.indvar23, 1024
  %70 = add i32 %69, 0
  %x_loc25 = add i32 %70, %66
  %71 = add i32 %tile_origin.1, %y_in_tile.indvar
  %72 = add i32 %tile_origin.2, %x_loc25
  %73 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %73, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body21
  %74 = mul i32 %tile_loop.indvar23, 1024
  %75 = add i32 %74, 1
  %x_loc37 = add i32 %75, %66
  %76 = add i32 %tile_origin.1, %y_in_tile.indvar
  %77 = add i32 %tile_origin.2, %x_loc37
  %78 = icmp ult i32 %x_loc37, %tile_bound1
  br i1 %78, label %x_in_tile-true38, label %x_in_tile-after39

x_in_tile-after39:                                ; preds = %x_in_tile-true38, %x_in_tile-after
  br label %tile_loop.loop_header20, !llvm.loop !207

tile_loop.loop_exit19:                            ; preds = %tile_loop.loop_header20
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body21
  %79 = mul nuw nsw i32 %72, 1
  %80 = add nuw nsw i32 0, %79
  %81 = mul nuw nsw i32 %71, 8192
  %82 = add nuw nsw i32 %80, %81
  %83 = mul nuw nsw i32 %tile_origin.0, 8192
  %84 = add nuw nsw i32 %82, %83
  %85 = udiv i32 %84, 1
  %Arg_1.226 = getelementptr inbounds float, ptr %arg1, i32 %84
  %Arg_1.227 = load float, ptr %Arg_1.226, align 4, !invariant.load !197
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %84
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !197
  %multiply.930 = fmul float %Arg_1.227, %Arg_0.129
  %region_0_49_constant_1031 = load float, ptr @3, align 4
  %Arg_0.132 = getelementptr inbounds float, ptr %arg0, i32 %84
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !197
  %subtract.1234 = fsub float %region_0_49_constant_1031, %Arg_0.133
  %multiply.1335 = fmul float %multiply.930, %subtract.1234
  store float %multiply.1335, ptr %reduction_input_address, align 4
  %86 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_16(ptr %86, ptr %reduction_input_address, ptr %return_buffer36)
  %87 = load float, ptr %return_buffer36, align 4
  store float %87, ptr %86, align 4
  br label %x_in_tile-after

x_in_tile-true38:                                 ; preds = %x_in_tile-after
  %88 = mul nuw nsw i32 %77, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %76, 8192
  %91 = add nuw nsw i32 %89, %90
  %92 = mul nuw nsw i32 %tile_origin.0, 8192
  %93 = add nuw nsw i32 %91, %92
  %94 = udiv i32 %93, 1
  %Arg_1.240 = getelementptr inbounds float, ptr %arg1, i32 %93
  %Arg_1.241 = load float, ptr %Arg_1.240, align 4, !invariant.load !197
  %Arg_0.142 = getelementptr inbounds float, ptr %arg0, i32 %93
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !197
  %multiply.944 = fmul float %Arg_1.241, %Arg_0.143
  %region_0_49_constant_1045 = load float, ptr @3, align 4
  %Arg_0.146 = getelementptr inbounds float, ptr %arg0, i32 %93
  %Arg_0.147 = load float, ptr %Arg_0.146, align 4, !invariant.load !197
  %subtract.1248 = fsub float %region_0_49_constant_1045, %Arg_0.147
  %multiply.1349 = fmul float %multiply.944, %subtract.1248
  store float %multiply.1349, ptr %reduction_input_address, align 4
  %95 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_16(ptr %95, ptr %reduction_input_address, ptr %return_buffer50)
  %96 = load float, ptr %return_buffer50, align 4
  store float %96, ptr %95, align 4
  br label %x_in_tile-after39

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %97 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i32 0, i32 %9, i32 0, i32 %34
  %98 = addrspacecast ptr addrspace(3) %97 to ptr
  %99 = load float, ptr %current_output, align 4
  store float %99, ptr %98, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %100 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache2, i32 0, i32 %9, i32 0, i32 %lane_id
  %101 = addrspacecast ptr addrspace(3) %100 to ptr
  store float %region_0_49_constant_15, ptr %initial_value_addr, align 4
  %102 = icmp ult i32 %thread_id.x, 16
  %103 = select i1 %102, ptr %101, ptr %initial_value_addr
  %partial_reduction_result66 = load float, ptr %103, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %104, ptr %result_from_other_lane65, align 4
  call void @region_1_16(ptr %103, ptr %result_from_other_lane65, ptr %return_buffer67)
  %105 = load float, ptr %return_buffer67, align 4
  store float %105, ptr %103, align 4
  %partial_reduction_result69 = load float, ptr %103, align 4
  %106 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %106, ptr %result_from_other_lane68, align 4
  call void @region_1_16(ptr %103, ptr %result_from_other_lane68, ptr %return_buffer70)
  %107 = load float, ptr %return_buffer70, align 4
  store float %107, ptr %103, align 4
  %partial_reduction_result72 = load float, ptr %103, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %108, ptr %result_from_other_lane71, align 4
  call void @region_1_16(ptr %103, ptr %result_from_other_lane71, ptr %return_buffer73)
  %109 = load float, ptr %return_buffer73, align 4
  store float %109, ptr %103, align 4
  %partial_reduction_result75 = load float, ptr %103, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %110, ptr %result_from_other_lane74, align 4
  call void @region_1_16(ptr %103, ptr %result_from_other_lane74, ptr %return_buffer76)
  %111 = load float, ptr %return_buffer76, align 4
  store float %111, ptr %103, align 4
  %partial_reduction_result78 = load float, ptr %103, align 4
  %112 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %112, ptr %result_from_other_lane77, align 4
  call void @region_1_16(ptr %103, ptr %result_from_other_lane77, ptr %return_buffer79)
  %113 = load float, ptr %return_buffer79, align 4
  store float %113, ptr %103, align 4
  %114 = icmp eq i32 %thread_id.x, 0
  br i1 %114, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %115 = mul i32 %thread_id.x, 2
  %116 = add i32 %tile_origin.1, %thread_id.y
  %117 = add i32 %tile_origin.2, %115
  %118 = add i32 %117, 0
  %output = load float, ptr %103, align 4
  store float %output, ptr %arg8, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_49_constant_1582 = load float, ptr @2, align 4
  %119 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  store float %region_0_49_constant_1582, ptr %119, align 4
  %120 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %121 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %122 = urem i32 %120, 512
  %123 = udiv i32 %120, 512
  %124 = mul i32 %121, 1
  %125 = add i32 %124, %123
  %126 = icmp ult i32 %125, 1
  br i1 %126, label %127, label %early_return83

127:                                              ; preds = %reduce-group-1-true
  %thread_id.x84 = urem i32 %122, 512
  %thread_id.y85 = udiv i32 %122, 512
  %lane_id86 = urem i32 %122, 32
  %128 = udiv i32 %125, 1
  %129 = urem i32 %128, 1
  %130 = udiv i32 %125, 1
  %131 = urem i32 %130, 1
  %132 = udiv i32 %125, 1
  %133 = icmp eq i32 %131, 0
  %tile_bound87 = select i1 %133, i32 1, i32 1
  %134 = icmp eq i32 %129, 0
  %tile_bound88 = select i1 %134, i32 8192, i32 8192
  %tile_origin.089 = mul i32 %132, 1
  %tile_origin.190 = mul i32 %131, 1
  %tile_origin.291 = mul i32 %129, 8192
  store i32 %thread_id.y85, ptr %y_in_tile.invar_address95, align 4
  br label %y_in_tile.loop_header93

y_in_tile.loop_header93:                          ; preds = %is_full_tile-after100, %127
  %y_in_tile.indvar96 = load i32, ptr %y_in_tile.invar_address95, align 4
  %135 = icmp uge i32 %y_in_tile.indvar96, %tile_bound87
  br i1 %135, label %y_in_tile.loop_exit92, label %y_in_tile.loop_body94

y_in_tile.loop_body94:                            ; preds = %y_in_tile.loop_header93
  %invar.inc97 = add nuw nsw i32 %y_in_tile.indvar96, 1
  store i32 %invar.inc97, ptr %y_in_tile.invar_address95, align 4
  %136 = icmp eq i32 %y_in_tile.indvar96, %thread_id.y85
  %137 = icmp eq i32 8192, %tile_bound88
  br i1 %137, label %is_full_tile-true98, label %is_full_tile-false99

is_full_tile-after100:                            ; preds = %tile_loop.loop_exit126, %tile_loop.loop_exit101
  br label %y_in_tile.loop_header93, !llvm.loop !208

y_in_tile.loop_exit92:                            ; preds = %y_in_tile.loop_header93
  %current_output160 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  %partial_reduction_result162 = load float, ptr %current_output160, align 4
  %138 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 16, i32 31)
  store float %138, ptr %result_from_other_lane161, align 4
  call void @region_2_25(ptr %current_output160, ptr %result_from_other_lane161, ptr %return_buffer163)
  %139 = load float, ptr %return_buffer163, align 4
  store float %139, ptr %current_output160, align 4
  %partial_reduction_result165 = load float, ptr %current_output160, align 4
  %140 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 8, i32 31)
  store float %140, ptr %result_from_other_lane164, align 4
  call void @region_2_25(ptr %current_output160, ptr %result_from_other_lane164, ptr %return_buffer166)
  %141 = load float, ptr %return_buffer166, align 4
  store float %141, ptr %current_output160, align 4
  %partial_reduction_result168 = load float, ptr %current_output160, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 4, i32 31)
  store float %142, ptr %result_from_other_lane167, align 4
  call void @region_2_25(ptr %current_output160, ptr %result_from_other_lane167, ptr %return_buffer169)
  %143 = load float, ptr %return_buffer169, align 4
  store float %143, ptr %current_output160, align 4
  %partial_reduction_result171 = load float, ptr %current_output160, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result171, i32 2, i32 31)
  store float %144, ptr %result_from_other_lane170, align 4
  call void @region_2_25(ptr %current_output160, ptr %result_from_other_lane170, ptr %return_buffer172)
  %145 = load float, ptr %return_buffer172, align 4
  store float %145, ptr %current_output160, align 4
  %partial_reduction_result174 = load float, ptr %current_output160, align 4
  %146 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result174, i32 1, i32 31)
  store float %146, ptr %result_from_other_lane173, align 4
  call void @region_2_25(ptr %current_output160, ptr %result_from_other_lane173, ptr %return_buffer175)
  %147 = load float, ptr %return_buffer175, align 4
  store float %147, ptr %current_output160, align 4
  %148 = udiv i32 %thread_id.x84, 32
  %149 = icmp eq i32 %lane_id86, 0
  br i1 %149, label %intra_warp_reduce_write-true176, label %intra_warp_reduce_write-after177

intra_warp_reduce_write-after177:                 ; preds = %intra_warp_reduce_write-true176, %y_in_tile.loop_exit92
  call void @llvm.nvvm.barrier0()
  %150 = icmp eq i32 %148, 0
  br i1 %150, label %inter_warp_reduce-true178, label %inter_warp_reduce-after179

inter_warp_reduce-after179:                       ; preds = %reduction_write_output-after197, %intra_warp_reduce_write-after177
  br label %reduce-group-1-after

early_return83:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true98:                              ; preds = %y_in_tile.loop_body94
  %151 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %tile_loop.loop_body103, %is_full_tile-true98
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %152 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %152, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %153 = icmp eq i32 %tile_loop.indvar105, 0
  %154 = mul i32 %tile_loop.indvar105, 1024
  %155 = add i32 %154, 0
  %x_loc107 = add i32 %155, %151
  %156 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %157 = add i32 %tile_origin.291, %x_loc107
  %158 = mul nuw nsw i32 %157, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %156, 8192
  %161 = add nuw nsw i32 %159, %160
  %162 = mul nuw nsw i32 %tile_origin.089, 8192
  %163 = add nuw nsw i32 %161, %162
  %164 = udiv i32 %163, 1
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %163
  %Arg_3.4108 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %163
  %Arg_2.3109 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %multiply.21 = fmul float %Arg_3.4108, %Arg_2.3109
  %region_0_49_constant_10110 = load float, ptr @3, align 4
  %Arg_2.3111 = getelementptr inbounds float, ptr %arg2, i32 %163
  %Arg_2.3112 = load float, ptr %Arg_2.3111, align 4, !invariant.load !197
  %subtract.22 = fsub float %region_0_49_constant_10110, %Arg_2.3112
  %multiply.23 = fmul float %multiply.21, %subtract.22
  store float %multiply.23, ptr %reduction_input_address80, align 4
  %165 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_25(ptr %165, ptr %reduction_input_address80, ptr %return_buffer113)
  %166 = load float, ptr %return_buffer113, align 4
  store float %166, ptr %165, align 4
  %167 = mul i32 %tile_loop.indvar105, 1024
  %168 = add i32 %167, 1
  %x_loc114 = add i32 %168, %151
  %169 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %170 = add i32 %tile_origin.291, %x_loc114
  %171 = mul nuw nsw i32 %170, 1
  %172 = add nuw nsw i32 0, %171
  %173 = mul nuw nsw i32 %169, 8192
  %174 = add nuw nsw i32 %172, %173
  %175 = mul nuw nsw i32 %tile_origin.089, 8192
  %176 = add nuw nsw i32 %174, %175
  %177 = udiv i32 %176, 1
  %Arg_3.4115 = getelementptr inbounds float, ptr %arg3, i32 %176
  %Arg_3.4116 = load float, ptr %Arg_3.4115, align 4, !invariant.load !197
  %Arg_2.3117 = getelementptr inbounds float, ptr %arg2, i32 %176
  %Arg_2.3118 = load float, ptr %Arg_2.3117, align 4, !invariant.load !197
  %multiply.21119 = fmul float %Arg_3.4116, %Arg_2.3118
  %region_0_49_constant_10120 = load float, ptr @3, align 4
  %Arg_2.3121 = getelementptr inbounds float, ptr %arg2, i32 %176
  %Arg_2.3122 = load float, ptr %Arg_2.3121, align 4, !invariant.load !197
  %subtract.22123 = fsub float %region_0_49_constant_10120, %Arg_2.3122
  %multiply.23124 = fmul float %multiply.21119, %subtract.22123
  store float %multiply.23124, ptr %reduction_input_address80, align 4
  %178 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_25(ptr %178, ptr %reduction_input_address80, ptr %return_buffer125)
  %179 = load float, ptr %return_buffer125, align 4
  store float %179, ptr %178, align 4
  br label %tile_loop.loop_header102, !llvm.loop !209

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after100

is_full_tile-false99:                             ; preds = %y_in_tile.loop_body94
  %180 = mul i32 %thread_id.x84, 2
  store i32 0, ptr %tile_loop.invar_address129, align 4
  br label %tile_loop.loop_header127

tile_loop.loop_header127:                         ; preds = %x_in_tile-after148, %is_full_tile-false99
  %tile_loop.indvar130 = load i32, ptr %tile_loop.invar_address129, align 4
  %181 = icmp uge i32 %tile_loop.indvar130, 8
  br i1 %181, label %tile_loop.loop_exit126, label %tile_loop.loop_body128

tile_loop.loop_body128:                           ; preds = %tile_loop.loop_header127
  %invar.inc131 = add nuw nsw i32 %tile_loop.indvar130, 1
  store i32 %invar.inc131, ptr %tile_loop.invar_address129, align 4
  %182 = icmp eq i32 %tile_loop.indvar130, 0
  %183 = mul i32 %tile_loop.indvar130, 1024
  %184 = add i32 %183, 0
  %x_loc132 = add i32 %184, %180
  %185 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %186 = add i32 %tile_origin.291, %x_loc132
  %187 = icmp ult i32 %x_loc132, %tile_bound88
  br i1 %187, label %x_in_tile-true133, label %x_in_tile-after134

x_in_tile-after134:                               ; preds = %x_in_tile-true133, %tile_loop.loop_body128
  %188 = mul i32 %tile_loop.indvar130, 1024
  %189 = add i32 %188, 1
  %x_loc146 = add i32 %189, %180
  %190 = add i32 %tile_origin.190, %y_in_tile.indvar96
  %191 = add i32 %tile_origin.291, %x_loc146
  %192 = icmp ult i32 %x_loc146, %tile_bound88
  br i1 %192, label %x_in_tile-true147, label %x_in_tile-after148

x_in_tile-after148:                               ; preds = %x_in_tile-true147, %x_in_tile-after134
  br label %tile_loop.loop_header127, !llvm.loop !210

tile_loop.loop_exit126:                           ; preds = %tile_loop.loop_header127
  br label %is_full_tile-after100

x_in_tile-true133:                                ; preds = %tile_loop.loop_body128
  %193 = mul nuw nsw i32 %186, 1
  %194 = add nuw nsw i32 0, %193
  %195 = mul nuw nsw i32 %185, 8192
  %196 = add nuw nsw i32 %194, %195
  %197 = mul nuw nsw i32 %tile_origin.089, 8192
  %198 = add nuw nsw i32 %196, %197
  %199 = udiv i32 %198, 1
  %Arg_3.4135 = getelementptr inbounds float, ptr %arg3, i32 %198
  %Arg_3.4136 = load float, ptr %Arg_3.4135, align 4, !invariant.load !197
  %Arg_2.3137 = getelementptr inbounds float, ptr %arg2, i32 %198
  %Arg_2.3138 = load float, ptr %Arg_2.3137, align 4, !invariant.load !197
  %multiply.21139 = fmul float %Arg_3.4136, %Arg_2.3138
  %region_0_49_constant_10140 = load float, ptr @3, align 4
  %Arg_2.3141 = getelementptr inbounds float, ptr %arg2, i32 %198
  %Arg_2.3142 = load float, ptr %Arg_2.3141, align 4, !invariant.load !197
  %subtract.22143 = fsub float %region_0_49_constant_10140, %Arg_2.3142
  %multiply.23144 = fmul float %multiply.21139, %subtract.22143
  store float %multiply.23144, ptr %reduction_input_address80, align 4
  %200 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_25(ptr %200, ptr %reduction_input_address80, ptr %return_buffer145)
  %201 = load float, ptr %return_buffer145, align 4
  store float %201, ptr %200, align 4
  br label %x_in_tile-after134

x_in_tile-true147:                                ; preds = %x_in_tile-after134
  %202 = mul nuw nsw i32 %191, 1
  %203 = add nuw nsw i32 0, %202
  %204 = mul nuw nsw i32 %190, 8192
  %205 = add nuw nsw i32 %203, %204
  %206 = mul nuw nsw i32 %tile_origin.089, 8192
  %207 = add nuw nsw i32 %205, %206
  %208 = udiv i32 %207, 1
  %Arg_3.4149 = getelementptr inbounds float, ptr %arg3, i32 %207
  %Arg_3.4150 = load float, ptr %Arg_3.4149, align 4, !invariant.load !197
  %Arg_2.3151 = getelementptr inbounds float, ptr %arg2, i32 %207
  %Arg_2.3152 = load float, ptr %Arg_2.3151, align 4, !invariant.load !197
  %multiply.21153 = fmul float %Arg_3.4150, %Arg_2.3152
  %region_0_49_constant_10154 = load float, ptr @3, align 4
  %Arg_2.3155 = getelementptr inbounds float, ptr %arg2, i32 %207
  %Arg_2.3156 = load float, ptr %Arg_2.3155, align 4, !invariant.load !197
  %subtract.22157 = fsub float %region_0_49_constant_10154, %Arg_2.3156
  %multiply.23158 = fmul float %multiply.21153, %subtract.22157
  store float %multiply.23158, ptr %reduction_input_address80, align 4
  %209 = getelementptr inbounds float, ptr %partial_reduction_result81, i32 0
  call void @region_2_25(ptr %209, ptr %reduction_input_address80, ptr %return_buffer159)
  %210 = load float, ptr %return_buffer159, align 4
  store float %210, ptr %209, align 4
  br label %x_in_tile-after148

intra_warp_reduce_write-true176:                  ; preds = %y_in_tile.loop_exit92
  %211 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i32 0, i32 %123, i32 0, i32 %148
  %212 = addrspacecast ptr addrspace(3) %211 to ptr
  %213 = load float, ptr %current_output160, align 4
  store float %213, ptr %212, align 4
  br label %intra_warp_reduce_write-after177

inter_warp_reduce-true178:                        ; preds = %intra_warp_reduce_write-after177
  %214 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache3, i32 0, i32 %123, i32 0, i32 %lane_id86
  %215 = addrspacecast ptr addrspace(3) %214 to ptr
  store float %region_0_49_constant_1582, ptr %initial_value_addr180, align 4
  %216 = icmp ult i32 %thread_id.x84, 16
  %217 = select i1 %216, ptr %215, ptr %initial_value_addr180
  %partial_reduction_result182 = load float, ptr %217, align 4
  %218 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result182, i32 16, i32 31)
  store float %218, ptr %result_from_other_lane181, align 4
  call void @region_2_25(ptr %217, ptr %result_from_other_lane181, ptr %return_buffer183)
  %219 = load float, ptr %return_buffer183, align 4
  store float %219, ptr %217, align 4
  %partial_reduction_result185 = load float, ptr %217, align 4
  %220 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result185, i32 8, i32 31)
  store float %220, ptr %result_from_other_lane184, align 4
  call void @region_2_25(ptr %217, ptr %result_from_other_lane184, ptr %return_buffer186)
  %221 = load float, ptr %return_buffer186, align 4
  store float %221, ptr %217, align 4
  %partial_reduction_result188 = load float, ptr %217, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result188, i32 4, i32 31)
  store float %222, ptr %result_from_other_lane187, align 4
  call void @region_2_25(ptr %217, ptr %result_from_other_lane187, ptr %return_buffer189)
  %223 = load float, ptr %return_buffer189, align 4
  store float %223, ptr %217, align 4
  %partial_reduction_result191 = load float, ptr %217, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result191, i32 2, i32 31)
  store float %224, ptr %result_from_other_lane190, align 4
  call void @region_2_25(ptr %217, ptr %result_from_other_lane190, ptr %return_buffer192)
  %225 = load float, ptr %return_buffer192, align 4
  store float %225, ptr %217, align 4
  %partial_reduction_result194 = load float, ptr %217, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result194, i32 1, i32 31)
  store float %226, ptr %result_from_other_lane193, align 4
  call void @region_2_25(ptr %217, ptr %result_from_other_lane193, ptr %return_buffer195)
  %227 = load float, ptr %return_buffer195, align 4
  store float %227, ptr %217, align 4
  %228 = icmp eq i32 %thread_id.x84, 0
  br i1 %228, label %reduction_write_output-true196, label %reduction_write_output-after197

reduction_write_output-after197:                  ; preds = %reduction_write_output-true196, %inter_warp_reduce-true178
  br label %inter_warp_reduce-after179

reduction_write_output-true196:                   ; preds = %inter_warp_reduce-true178
  %229 = mul i32 %thread_id.x84, 2
  %230 = add i32 %tile_origin.190, %thread_id.y85
  %231 = add i32 %tile_origin.291, %229
  %232 = add i32 %231, 0
  %output198 = load float, ptr %217, align 4
  store float %output198, ptr %arg9, align 4
  br label %reduction_write_output-after197

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %region_0_49_constant_15201 = load float, ptr @2, align 4
  %233 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  store float %region_0_49_constant_15201, ptr %233, align 4
  %234 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %235 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %236 = urem i32 %234, 512
  %237 = udiv i32 %234, 512
  %238 = mul i32 %235, 1
  %239 = add i32 %238, %237
  %240 = icmp ult i32 %239, 1
  br i1 %240, label %241, label %early_return202

241:                                              ; preds = %reduce-group-2-true
  %thread_id.x203 = urem i32 %236, 512
  %thread_id.y204 = udiv i32 %236, 512
  %lane_id205 = urem i32 %236, 32
  %242 = udiv i32 %239, 1
  %243 = urem i32 %242, 1
  %244 = udiv i32 %239, 1
  %245 = urem i32 %244, 1
  %246 = udiv i32 %239, 1
  %247 = icmp eq i32 %245, 0
  %tile_bound206 = select i1 %247, i32 1, i32 1
  %248 = icmp eq i32 %243, 0
  %tile_bound207 = select i1 %248, i32 8192, i32 8192
  %tile_origin.0208 = mul i32 %246, 1
  %tile_origin.1209 = mul i32 %245, 1
  %tile_origin.2210 = mul i32 %243, 8192
  store i32 %thread_id.y204, ptr %y_in_tile.invar_address214, align 4
  br label %y_in_tile.loop_header212

y_in_tile.loop_header212:                         ; preds = %is_full_tile-after219, %241
  %y_in_tile.indvar215 = load i32, ptr %y_in_tile.invar_address214, align 4
  %249 = icmp uge i32 %y_in_tile.indvar215, %tile_bound206
  br i1 %249, label %y_in_tile.loop_exit211, label %y_in_tile.loop_body213

y_in_tile.loop_body213:                           ; preds = %y_in_tile.loop_header212
  %invar.inc216 = add nuw nsw i32 %y_in_tile.indvar215, 1
  store i32 %invar.inc216, ptr %y_in_tile.invar_address214, align 4
  %250 = icmp eq i32 %y_in_tile.indvar215, %thread_id.y204
  %251 = icmp eq i32 8192, %tile_bound207
  br i1 %251, label %is_full_tile-true217, label %is_full_tile-false218

is_full_tile-after219:                            ; preds = %tile_loop.loop_exit245, %tile_loop.loop_exit220
  br label %y_in_tile.loop_header212, !llvm.loop !211

y_in_tile.loop_exit211:                           ; preds = %y_in_tile.loop_header212
  %current_output279 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  %partial_reduction_result281 = load float, ptr %current_output279, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result281, i32 16, i32 31)
  store float %252, ptr %result_from_other_lane280, align 4
  call void @region_3_34(ptr %current_output279, ptr %result_from_other_lane280, ptr %return_buffer282)
  %253 = load float, ptr %return_buffer282, align 4
  store float %253, ptr %current_output279, align 4
  %partial_reduction_result284 = load float, ptr %current_output279, align 4
  %254 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result284, i32 8, i32 31)
  store float %254, ptr %result_from_other_lane283, align 4
  call void @region_3_34(ptr %current_output279, ptr %result_from_other_lane283, ptr %return_buffer285)
  %255 = load float, ptr %return_buffer285, align 4
  store float %255, ptr %current_output279, align 4
  %partial_reduction_result287 = load float, ptr %current_output279, align 4
  %256 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result287, i32 4, i32 31)
  store float %256, ptr %result_from_other_lane286, align 4
  call void @region_3_34(ptr %current_output279, ptr %result_from_other_lane286, ptr %return_buffer288)
  %257 = load float, ptr %return_buffer288, align 4
  store float %257, ptr %current_output279, align 4
  %partial_reduction_result290 = load float, ptr %current_output279, align 4
  %258 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result290, i32 2, i32 31)
  store float %258, ptr %result_from_other_lane289, align 4
  call void @region_3_34(ptr %current_output279, ptr %result_from_other_lane289, ptr %return_buffer291)
  %259 = load float, ptr %return_buffer291, align 4
  store float %259, ptr %current_output279, align 4
  %partial_reduction_result293 = load float, ptr %current_output279, align 4
  %260 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result293, i32 1, i32 31)
  store float %260, ptr %result_from_other_lane292, align 4
  call void @region_3_34(ptr %current_output279, ptr %result_from_other_lane292, ptr %return_buffer294)
  %261 = load float, ptr %return_buffer294, align 4
  store float %261, ptr %current_output279, align 4
  %262 = udiv i32 %thread_id.x203, 32
  %263 = icmp eq i32 %lane_id205, 0
  br i1 %263, label %intra_warp_reduce_write-true295, label %intra_warp_reduce_write-after296

intra_warp_reduce_write-after296:                 ; preds = %intra_warp_reduce_write-true295, %y_in_tile.loop_exit211
  call void @llvm.nvvm.barrier0()
  %264 = icmp eq i32 %262, 0
  br i1 %264, label %inter_warp_reduce-true297, label %inter_warp_reduce-after298

inter_warp_reduce-after298:                       ; preds = %reduction_write_output-after316, %intra_warp_reduce_write-after296
  br label %reduce-group-2-after

early_return202:                                  ; preds = %reduce-group-2-true
  ret void

is_full_tile-true217:                             ; preds = %y_in_tile.loop_body213
  %265 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address223, align 4
  br label %tile_loop.loop_header221

tile_loop.loop_header221:                         ; preds = %tile_loop.loop_body222, %is_full_tile-true217
  %tile_loop.indvar224 = load i32, ptr %tile_loop.invar_address223, align 4
  %266 = icmp uge i32 %tile_loop.indvar224, 8
  br i1 %266, label %tile_loop.loop_exit220, label %tile_loop.loop_body222

tile_loop.loop_body222:                           ; preds = %tile_loop.loop_header221
  %invar.inc225 = add nuw nsw i32 %tile_loop.indvar224, 1
  store i32 %invar.inc225, ptr %tile_loop.invar_address223, align 4
  %267 = icmp eq i32 %tile_loop.indvar224, 0
  %268 = mul i32 %tile_loop.indvar224, 1024
  %269 = add i32 %268, 0
  %x_loc226 = add i32 %269, %265
  %270 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %271 = add i32 %tile_origin.2210, %x_loc226
  %272 = mul nuw nsw i32 %271, 1
  %273 = add nuw nsw i32 0, %272
  %274 = mul nuw nsw i32 %270, 8192
  %275 = add nuw nsw i32 %273, %274
  %276 = mul nuw nsw i32 %tile_origin.0208, 8192
  %277 = add nuw nsw i32 %275, %276
  %278 = udiv i32 %277, 1
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %277
  %Arg_5.6227 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %277
  %Arg_4.5228 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %multiply.30 = fmul float %Arg_5.6227, %Arg_4.5228
  %region_0_49_constant_10229 = load float, ptr @3, align 4
  %Arg_4.5230 = getelementptr inbounds float, ptr %arg4, i32 %277
  %Arg_4.5231 = load float, ptr %Arg_4.5230, align 4, !invariant.load !197
  %subtract.31 = fsub float %region_0_49_constant_10229, %Arg_4.5231
  %multiply.32 = fmul float %multiply.30, %subtract.31
  store float %multiply.32, ptr %reduction_input_address199, align 4
  %279 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_34(ptr %279, ptr %reduction_input_address199, ptr %return_buffer232)
  %280 = load float, ptr %return_buffer232, align 4
  store float %280, ptr %279, align 4
  %281 = mul i32 %tile_loop.indvar224, 1024
  %282 = add i32 %281, 1
  %x_loc233 = add i32 %282, %265
  %283 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %284 = add i32 %tile_origin.2210, %x_loc233
  %285 = mul nuw nsw i32 %284, 1
  %286 = add nuw nsw i32 0, %285
  %287 = mul nuw nsw i32 %283, 8192
  %288 = add nuw nsw i32 %286, %287
  %289 = mul nuw nsw i32 %tile_origin.0208, 8192
  %290 = add nuw nsw i32 %288, %289
  %291 = udiv i32 %290, 1
  %Arg_5.6234 = getelementptr inbounds float, ptr %arg5, i32 %290
  %Arg_5.6235 = load float, ptr %Arg_5.6234, align 4, !invariant.load !197
  %Arg_4.5236 = getelementptr inbounds float, ptr %arg4, i32 %290
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !197
  %multiply.30238 = fmul float %Arg_5.6235, %Arg_4.5237
  %region_0_49_constant_10239 = load float, ptr @3, align 4
  %Arg_4.5240 = getelementptr inbounds float, ptr %arg4, i32 %290
  %Arg_4.5241 = load float, ptr %Arg_4.5240, align 4, !invariant.load !197
  %subtract.31242 = fsub float %region_0_49_constant_10239, %Arg_4.5241
  %multiply.32243 = fmul float %multiply.30238, %subtract.31242
  store float %multiply.32243, ptr %reduction_input_address199, align 4
  %292 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_34(ptr %292, ptr %reduction_input_address199, ptr %return_buffer244)
  %293 = load float, ptr %return_buffer244, align 4
  store float %293, ptr %292, align 4
  br label %tile_loop.loop_header221, !llvm.loop !212

tile_loop.loop_exit220:                           ; preds = %tile_loop.loop_header221
  br label %is_full_tile-after219

is_full_tile-false218:                            ; preds = %y_in_tile.loop_body213
  %294 = mul i32 %thread_id.x203, 2
  store i32 0, ptr %tile_loop.invar_address248, align 4
  br label %tile_loop.loop_header246

tile_loop.loop_header246:                         ; preds = %x_in_tile-after267, %is_full_tile-false218
  %tile_loop.indvar249 = load i32, ptr %tile_loop.invar_address248, align 4
  %295 = icmp uge i32 %tile_loop.indvar249, 8
  br i1 %295, label %tile_loop.loop_exit245, label %tile_loop.loop_body247

tile_loop.loop_body247:                           ; preds = %tile_loop.loop_header246
  %invar.inc250 = add nuw nsw i32 %tile_loop.indvar249, 1
  store i32 %invar.inc250, ptr %tile_loop.invar_address248, align 4
  %296 = icmp eq i32 %tile_loop.indvar249, 0
  %297 = mul i32 %tile_loop.indvar249, 1024
  %298 = add i32 %297, 0
  %x_loc251 = add i32 %298, %294
  %299 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %300 = add i32 %tile_origin.2210, %x_loc251
  %301 = icmp ult i32 %x_loc251, %tile_bound207
  br i1 %301, label %x_in_tile-true252, label %x_in_tile-after253

x_in_tile-after253:                               ; preds = %x_in_tile-true252, %tile_loop.loop_body247
  %302 = mul i32 %tile_loop.indvar249, 1024
  %303 = add i32 %302, 1
  %x_loc265 = add i32 %303, %294
  %304 = add i32 %tile_origin.1209, %y_in_tile.indvar215
  %305 = add i32 %tile_origin.2210, %x_loc265
  %306 = icmp ult i32 %x_loc265, %tile_bound207
  br i1 %306, label %x_in_tile-true266, label %x_in_tile-after267

x_in_tile-after267:                               ; preds = %x_in_tile-true266, %x_in_tile-after253
  br label %tile_loop.loop_header246, !llvm.loop !213

tile_loop.loop_exit245:                           ; preds = %tile_loop.loop_header246
  br label %is_full_tile-after219

x_in_tile-true252:                                ; preds = %tile_loop.loop_body247
  %307 = mul nuw nsw i32 %300, 1
  %308 = add nuw nsw i32 0, %307
  %309 = mul nuw nsw i32 %299, 8192
  %310 = add nuw nsw i32 %308, %309
  %311 = mul nuw nsw i32 %tile_origin.0208, 8192
  %312 = add nuw nsw i32 %310, %311
  %313 = udiv i32 %312, 1
  %Arg_5.6254 = getelementptr inbounds float, ptr %arg5, i32 %312
  %Arg_5.6255 = load float, ptr %Arg_5.6254, align 4, !invariant.load !197
  %Arg_4.5256 = getelementptr inbounds float, ptr %arg4, i32 %312
  %Arg_4.5257 = load float, ptr %Arg_4.5256, align 4, !invariant.load !197
  %multiply.30258 = fmul float %Arg_5.6255, %Arg_4.5257
  %region_0_49_constant_10259 = load float, ptr @3, align 4
  %Arg_4.5260 = getelementptr inbounds float, ptr %arg4, i32 %312
  %Arg_4.5261 = load float, ptr %Arg_4.5260, align 4, !invariant.load !197
  %subtract.31262 = fsub float %region_0_49_constant_10259, %Arg_4.5261
  %multiply.32263 = fmul float %multiply.30258, %subtract.31262
  store float %multiply.32263, ptr %reduction_input_address199, align 4
  %314 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_34(ptr %314, ptr %reduction_input_address199, ptr %return_buffer264)
  %315 = load float, ptr %return_buffer264, align 4
  store float %315, ptr %314, align 4
  br label %x_in_tile-after253

x_in_tile-true266:                                ; preds = %x_in_tile-after253
  %316 = mul nuw nsw i32 %305, 1
  %317 = add nuw nsw i32 0, %316
  %318 = mul nuw nsw i32 %304, 8192
  %319 = add nuw nsw i32 %317, %318
  %320 = mul nuw nsw i32 %tile_origin.0208, 8192
  %321 = add nuw nsw i32 %319, %320
  %322 = udiv i32 %321, 1
  %Arg_5.6268 = getelementptr inbounds float, ptr %arg5, i32 %321
  %Arg_5.6269 = load float, ptr %Arg_5.6268, align 4, !invariant.load !197
  %Arg_4.5270 = getelementptr inbounds float, ptr %arg4, i32 %321
  %Arg_4.5271 = load float, ptr %Arg_4.5270, align 4, !invariant.load !197
  %multiply.30272 = fmul float %Arg_5.6269, %Arg_4.5271
  %region_0_49_constant_10273 = load float, ptr @3, align 4
  %Arg_4.5274 = getelementptr inbounds float, ptr %arg4, i32 %321
  %Arg_4.5275 = load float, ptr %Arg_4.5274, align 4, !invariant.load !197
  %subtract.31276 = fsub float %region_0_49_constant_10273, %Arg_4.5275
  %multiply.32277 = fmul float %multiply.30272, %subtract.31276
  store float %multiply.32277, ptr %reduction_input_address199, align 4
  %323 = getelementptr inbounds float, ptr %partial_reduction_result200, i32 0
  call void @region_3_34(ptr %323, ptr %reduction_input_address199, ptr %return_buffer278)
  %324 = load float, ptr %return_buffer278, align 4
  store float %324, ptr %323, align 4
  br label %x_in_tile-after267

intra_warp_reduce_write-true295:                  ; preds = %y_in_tile.loop_exit211
  %325 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i32 0, i32 %237, i32 0, i32 %262
  %326 = addrspacecast ptr addrspace(3) %325 to ptr
  %327 = load float, ptr %current_output279, align 4
  store float %327, ptr %326, align 4
  br label %intra_warp_reduce_write-after296

inter_warp_reduce-true297:                        ; preds = %intra_warp_reduce_write-after296
  %328 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache4, i32 0, i32 %237, i32 0, i32 %lane_id205
  %329 = addrspacecast ptr addrspace(3) %328 to ptr
  store float %region_0_49_constant_15201, ptr %initial_value_addr299, align 4
  %330 = icmp ult i32 %thread_id.x203, 16
  %331 = select i1 %330, ptr %329, ptr %initial_value_addr299
  %partial_reduction_result301 = load float, ptr %331, align 4
  %332 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result301, i32 16, i32 31)
  store float %332, ptr %result_from_other_lane300, align 4
  call void @region_3_34(ptr %331, ptr %result_from_other_lane300, ptr %return_buffer302)
  %333 = load float, ptr %return_buffer302, align 4
  store float %333, ptr %331, align 4
  %partial_reduction_result304 = load float, ptr %331, align 4
  %334 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result304, i32 8, i32 31)
  store float %334, ptr %result_from_other_lane303, align 4
  call void @region_3_34(ptr %331, ptr %result_from_other_lane303, ptr %return_buffer305)
  %335 = load float, ptr %return_buffer305, align 4
  store float %335, ptr %331, align 4
  %partial_reduction_result307 = load float, ptr %331, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result307, i32 4, i32 31)
  store float %336, ptr %result_from_other_lane306, align 4
  call void @region_3_34(ptr %331, ptr %result_from_other_lane306, ptr %return_buffer308)
  %337 = load float, ptr %return_buffer308, align 4
  store float %337, ptr %331, align 4
  %partial_reduction_result310 = load float, ptr %331, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result310, i32 2, i32 31)
  store float %338, ptr %result_from_other_lane309, align 4
  call void @region_3_34(ptr %331, ptr %result_from_other_lane309, ptr %return_buffer311)
  %339 = load float, ptr %return_buffer311, align 4
  store float %339, ptr %331, align 4
  %partial_reduction_result313 = load float, ptr %331, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result313, i32 1, i32 31)
  store float %340, ptr %result_from_other_lane312, align 4
  call void @region_3_34(ptr %331, ptr %result_from_other_lane312, ptr %return_buffer314)
  %341 = load float, ptr %return_buffer314, align 4
  store float %341, ptr %331, align 4
  %342 = icmp eq i32 %thread_id.x203, 0
  br i1 %342, label %reduction_write_output-true315, label %reduction_write_output-after316

reduction_write_output-after316:                  ; preds = %reduction_write_output-true315, %inter_warp_reduce-true297
  br label %inter_warp_reduce-after298

reduction_write_output-true315:                   ; preds = %inter_warp_reduce-true297
  %343 = mul i32 %thread_id.x203, 2
  %344 = add i32 %tile_origin.1209, %thread_id.y204
  %345 = add i32 %tile_origin.2210, %343
  %346 = add i32 %345, 0
  %output317 = load float, ptr %331, align 4
  store float %output317, ptr %arg10, align 4
  br label %reduction_write_output-after316

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %region_0_49_constant_15320 = load float, ptr @2, align 4
  %347 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  store float %region_0_49_constant_15320, ptr %347, align 4
  %348 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %349 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %350 = urem i32 %348, 512
  %351 = udiv i32 %348, 512
  %352 = mul i32 %349, 1
  %353 = add i32 %352, %351
  %354 = icmp ult i32 %353, 1
  br i1 %354, label %355, label %early_return321

355:                                              ; preds = %reduce-group-3-true
  %thread_id.x322 = urem i32 %350, 512
  %thread_id.y323 = udiv i32 %350, 512
  %lane_id324 = urem i32 %350, 32
  %356 = udiv i32 %353, 1
  %357 = urem i32 %356, 1
  %358 = udiv i32 %353, 1
  %359 = urem i32 %358, 1
  %360 = udiv i32 %353, 1
  %361 = icmp eq i32 %359, 0
  %tile_bound325 = select i1 %361, i32 1, i32 1
  %362 = icmp eq i32 %357, 0
  %tile_bound326 = select i1 %362, i32 8192, i32 8192
  %tile_origin.0327 = mul i32 %360, 1
  %tile_origin.1328 = mul i32 %359, 1
  %tile_origin.2329 = mul i32 %357, 8192
  store i32 %thread_id.y323, ptr %y_in_tile.invar_address333, align 4
  br label %y_in_tile.loop_header331

y_in_tile.loop_header331:                         ; preds = %is_full_tile-after338, %355
  %y_in_tile.indvar334 = load i32, ptr %y_in_tile.invar_address333, align 4
  %363 = icmp uge i32 %y_in_tile.indvar334, %tile_bound325
  br i1 %363, label %y_in_tile.loop_exit330, label %y_in_tile.loop_body332

y_in_tile.loop_body332:                           ; preds = %y_in_tile.loop_header331
  %invar.inc335 = add nuw nsw i32 %y_in_tile.indvar334, 1
  store i32 %invar.inc335, ptr %y_in_tile.invar_address333, align 4
  %364 = icmp eq i32 %y_in_tile.indvar334, %thread_id.y323
  %365 = icmp eq i32 8192, %tile_bound326
  br i1 %365, label %is_full_tile-true336, label %is_full_tile-false337

is_full_tile-after338:                            ; preds = %tile_loop.loop_exit364, %tile_loop.loop_exit339
  br label %y_in_tile.loop_header331, !llvm.loop !214

y_in_tile.loop_exit330:                           ; preds = %y_in_tile.loop_header331
  %current_output398 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  %partial_reduction_result400 = load float, ptr %current_output398, align 4
  %366 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result400, i32 16, i32 31)
  store float %366, ptr %result_from_other_lane399, align 4
  call void @region_4_43(ptr %current_output398, ptr %result_from_other_lane399, ptr %return_buffer401)
  %367 = load float, ptr %return_buffer401, align 4
  store float %367, ptr %current_output398, align 4
  %partial_reduction_result403 = load float, ptr %current_output398, align 4
  %368 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result403, i32 8, i32 31)
  store float %368, ptr %result_from_other_lane402, align 4
  call void @region_4_43(ptr %current_output398, ptr %result_from_other_lane402, ptr %return_buffer404)
  %369 = load float, ptr %return_buffer404, align 4
  store float %369, ptr %current_output398, align 4
  %partial_reduction_result406 = load float, ptr %current_output398, align 4
  %370 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result406, i32 4, i32 31)
  store float %370, ptr %result_from_other_lane405, align 4
  call void @region_4_43(ptr %current_output398, ptr %result_from_other_lane405, ptr %return_buffer407)
  %371 = load float, ptr %return_buffer407, align 4
  store float %371, ptr %current_output398, align 4
  %partial_reduction_result409 = load float, ptr %current_output398, align 4
  %372 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result409, i32 2, i32 31)
  store float %372, ptr %result_from_other_lane408, align 4
  call void @region_4_43(ptr %current_output398, ptr %result_from_other_lane408, ptr %return_buffer410)
  %373 = load float, ptr %return_buffer410, align 4
  store float %373, ptr %current_output398, align 4
  %partial_reduction_result412 = load float, ptr %current_output398, align 4
  %374 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result412, i32 1, i32 31)
  store float %374, ptr %result_from_other_lane411, align 4
  call void @region_4_43(ptr %current_output398, ptr %result_from_other_lane411, ptr %return_buffer413)
  %375 = load float, ptr %return_buffer413, align 4
  store float %375, ptr %current_output398, align 4
  %376 = udiv i32 %thread_id.x322, 32
  %377 = icmp eq i32 %lane_id324, 0
  br i1 %377, label %intra_warp_reduce_write-true414, label %intra_warp_reduce_write-after415

intra_warp_reduce_write-after415:                 ; preds = %intra_warp_reduce_write-true414, %y_in_tile.loop_exit330
  call void @llvm.nvvm.barrier0()
  %378 = icmp eq i32 %376, 0
  br i1 %378, label %inter_warp_reduce-true416, label %inter_warp_reduce-after417

inter_warp_reduce-after417:                       ; preds = %reduction_write_output-after435, %intra_warp_reduce_write-after415
  br label %reduce-group-3-after

early_return321:                                  ; preds = %reduce-group-3-true
  ret void

is_full_tile-true336:                             ; preds = %y_in_tile.loop_body332
  %379 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address342, align 4
  br label %tile_loop.loop_header340

tile_loop.loop_header340:                         ; preds = %tile_loop.loop_body341, %is_full_tile-true336
  %tile_loop.indvar343 = load i32, ptr %tile_loop.invar_address342, align 4
  %380 = icmp uge i32 %tile_loop.indvar343, 8
  br i1 %380, label %tile_loop.loop_exit339, label %tile_loop.loop_body341

tile_loop.loop_body341:                           ; preds = %tile_loop.loop_header340
  %invar.inc344 = add nuw nsw i32 %tile_loop.indvar343, 1
  store i32 %invar.inc344, ptr %tile_loop.invar_address342, align 4
  %381 = icmp eq i32 %tile_loop.indvar343, 0
  %382 = mul i32 %tile_loop.indvar343, 1024
  %383 = add i32 %382, 0
  %x_loc345 = add i32 %383, %379
  %384 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %385 = add i32 %tile_origin.2329, %x_loc345
  %386 = mul nuw nsw i32 %385, 1
  %387 = add nuw nsw i32 0, %386
  %388 = mul nuw nsw i32 %384, 8192
  %389 = add nuw nsw i32 %387, %388
  %390 = mul nuw nsw i32 %tile_origin.0327, 8192
  %391 = add nuw nsw i32 %389, %390
  %392 = udiv i32 %391, 1
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %391
  %Arg_7.8346 = load float, ptr %Arg_7.8, align 4, !invariant.load !197
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %391
  %Arg_6.7347 = load float, ptr %Arg_6.7, align 4, !invariant.load !197
  %multiply.39 = fmul float %Arg_7.8346, %Arg_6.7347
  %region_0_49_constant_10348 = load float, ptr @3, align 4
  %Arg_6.7349 = getelementptr inbounds float, ptr %arg6, i32 %391
  %Arg_6.7350 = load float, ptr %Arg_6.7349, align 4, !invariant.load !197
  %subtract.40 = fsub float %region_0_49_constant_10348, %Arg_6.7350
  %multiply.41 = fmul float %multiply.39, %subtract.40
  store float %multiply.41, ptr %reduction_input_address318, align 4
  %393 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_43(ptr %393, ptr %reduction_input_address318, ptr %return_buffer351)
  %394 = load float, ptr %return_buffer351, align 4
  store float %394, ptr %393, align 4
  %395 = mul i32 %tile_loop.indvar343, 1024
  %396 = add i32 %395, 1
  %x_loc352 = add i32 %396, %379
  %397 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %398 = add i32 %tile_origin.2329, %x_loc352
  %399 = mul nuw nsw i32 %398, 1
  %400 = add nuw nsw i32 0, %399
  %401 = mul nuw nsw i32 %397, 8192
  %402 = add nuw nsw i32 %400, %401
  %403 = mul nuw nsw i32 %tile_origin.0327, 8192
  %404 = add nuw nsw i32 %402, %403
  %405 = udiv i32 %404, 1
  %Arg_7.8353 = getelementptr inbounds float, ptr %arg7, i32 %404
  %Arg_7.8354 = load float, ptr %Arg_7.8353, align 4, !invariant.load !197
  %Arg_6.7355 = getelementptr inbounds float, ptr %arg6, i32 %404
  %Arg_6.7356 = load float, ptr %Arg_6.7355, align 4, !invariant.load !197
  %multiply.39357 = fmul float %Arg_7.8354, %Arg_6.7356
  %region_0_49_constant_10358 = load float, ptr @3, align 4
  %Arg_6.7359 = getelementptr inbounds float, ptr %arg6, i32 %404
  %Arg_6.7360 = load float, ptr %Arg_6.7359, align 4, !invariant.load !197
  %subtract.40361 = fsub float %region_0_49_constant_10358, %Arg_6.7360
  %multiply.41362 = fmul float %multiply.39357, %subtract.40361
  store float %multiply.41362, ptr %reduction_input_address318, align 4
  %406 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_43(ptr %406, ptr %reduction_input_address318, ptr %return_buffer363)
  %407 = load float, ptr %return_buffer363, align 4
  store float %407, ptr %406, align 4
  br label %tile_loop.loop_header340, !llvm.loop !215

tile_loop.loop_exit339:                           ; preds = %tile_loop.loop_header340
  br label %is_full_tile-after338

is_full_tile-false337:                            ; preds = %y_in_tile.loop_body332
  %408 = mul i32 %thread_id.x322, 2
  store i32 0, ptr %tile_loop.invar_address367, align 4
  br label %tile_loop.loop_header365

tile_loop.loop_header365:                         ; preds = %x_in_tile-after386, %is_full_tile-false337
  %tile_loop.indvar368 = load i32, ptr %tile_loop.invar_address367, align 4
  %409 = icmp uge i32 %tile_loop.indvar368, 8
  br i1 %409, label %tile_loop.loop_exit364, label %tile_loop.loop_body366

tile_loop.loop_body366:                           ; preds = %tile_loop.loop_header365
  %invar.inc369 = add nuw nsw i32 %tile_loop.indvar368, 1
  store i32 %invar.inc369, ptr %tile_loop.invar_address367, align 4
  %410 = icmp eq i32 %tile_loop.indvar368, 0
  %411 = mul i32 %tile_loop.indvar368, 1024
  %412 = add i32 %411, 0
  %x_loc370 = add i32 %412, %408
  %413 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %414 = add i32 %tile_origin.2329, %x_loc370
  %415 = icmp ult i32 %x_loc370, %tile_bound326
  br i1 %415, label %x_in_tile-true371, label %x_in_tile-after372

x_in_tile-after372:                               ; preds = %x_in_tile-true371, %tile_loop.loop_body366
  %416 = mul i32 %tile_loop.indvar368, 1024
  %417 = add i32 %416, 1
  %x_loc384 = add i32 %417, %408
  %418 = add i32 %tile_origin.1328, %y_in_tile.indvar334
  %419 = add i32 %tile_origin.2329, %x_loc384
  %420 = icmp ult i32 %x_loc384, %tile_bound326
  br i1 %420, label %x_in_tile-true385, label %x_in_tile-after386

x_in_tile-after386:                               ; preds = %x_in_tile-true385, %x_in_tile-after372
  br label %tile_loop.loop_header365, !llvm.loop !216

tile_loop.loop_exit364:                           ; preds = %tile_loop.loop_header365
  br label %is_full_tile-after338

x_in_tile-true371:                                ; preds = %tile_loop.loop_body366
  %421 = mul nuw nsw i32 %414, 1
  %422 = add nuw nsw i32 0, %421
  %423 = mul nuw nsw i32 %413, 8192
  %424 = add nuw nsw i32 %422, %423
  %425 = mul nuw nsw i32 %tile_origin.0327, 8192
  %426 = add nuw nsw i32 %424, %425
  %427 = udiv i32 %426, 1
  %Arg_7.8373 = getelementptr inbounds float, ptr %arg7, i32 %426
  %Arg_7.8374 = load float, ptr %Arg_7.8373, align 4, !invariant.load !197
  %Arg_6.7375 = getelementptr inbounds float, ptr %arg6, i32 %426
  %Arg_6.7376 = load float, ptr %Arg_6.7375, align 4, !invariant.load !197
  %multiply.39377 = fmul float %Arg_7.8374, %Arg_6.7376
  %region_0_49_constant_10378 = load float, ptr @3, align 4
  %Arg_6.7379 = getelementptr inbounds float, ptr %arg6, i32 %426
  %Arg_6.7380 = load float, ptr %Arg_6.7379, align 4, !invariant.load !197
  %subtract.40381 = fsub float %region_0_49_constant_10378, %Arg_6.7380
  %multiply.41382 = fmul float %multiply.39377, %subtract.40381
  store float %multiply.41382, ptr %reduction_input_address318, align 4
  %428 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_43(ptr %428, ptr %reduction_input_address318, ptr %return_buffer383)
  %429 = load float, ptr %return_buffer383, align 4
  store float %429, ptr %428, align 4
  br label %x_in_tile-after372

x_in_tile-true385:                                ; preds = %x_in_tile-after372
  %430 = mul nuw nsw i32 %419, 1
  %431 = add nuw nsw i32 0, %430
  %432 = mul nuw nsw i32 %418, 8192
  %433 = add nuw nsw i32 %431, %432
  %434 = mul nuw nsw i32 %tile_origin.0327, 8192
  %435 = add nuw nsw i32 %433, %434
  %436 = udiv i32 %435, 1
  %Arg_7.8387 = getelementptr inbounds float, ptr %arg7, i32 %435
  %Arg_7.8388 = load float, ptr %Arg_7.8387, align 4, !invariant.load !197
  %Arg_6.7389 = getelementptr inbounds float, ptr %arg6, i32 %435
  %Arg_6.7390 = load float, ptr %Arg_6.7389, align 4, !invariant.load !197
  %multiply.39391 = fmul float %Arg_7.8388, %Arg_6.7390
  %region_0_49_constant_10392 = load float, ptr @3, align 4
  %Arg_6.7393 = getelementptr inbounds float, ptr %arg6, i32 %435
  %Arg_6.7394 = load float, ptr %Arg_6.7393, align 4, !invariant.load !197
  %subtract.40395 = fsub float %region_0_49_constant_10392, %Arg_6.7394
  %multiply.41396 = fmul float %multiply.39391, %subtract.40395
  store float %multiply.41396, ptr %reduction_input_address318, align 4
  %437 = getelementptr inbounds float, ptr %partial_reduction_result319, i32 0
  call void @region_4_43(ptr %437, ptr %reduction_input_address318, ptr %return_buffer397)
  %438 = load float, ptr %return_buffer397, align 4
  store float %438, ptr %437, align 4
  br label %x_in_tile-after386

intra_warp_reduce_write-true414:                  ; preds = %y_in_tile.loop_exit330
  %439 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i32 0, i32 %351, i32 0, i32 %376
  %440 = addrspacecast ptr addrspace(3) %439 to ptr
  %441 = load float, ptr %current_output398, align 4
  store float %441, ptr %440, align 4
  br label %intra_warp_reduce_write-after415

inter_warp_reduce-true416:                        ; preds = %intra_warp_reduce_write-after415
  %442 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache5, i32 0, i32 %351, i32 0, i32 %lane_id324
  %443 = addrspacecast ptr addrspace(3) %442 to ptr
  store float %region_0_49_constant_15320, ptr %initial_value_addr418, align 4
  %444 = icmp ult i32 %thread_id.x322, 16
  %445 = select i1 %444, ptr %443, ptr %initial_value_addr418
  %partial_reduction_result420 = load float, ptr %445, align 4
  %446 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result420, i32 16, i32 31)
  store float %446, ptr %result_from_other_lane419, align 4
  call void @region_4_43(ptr %445, ptr %result_from_other_lane419, ptr %return_buffer421)
  %447 = load float, ptr %return_buffer421, align 4
  store float %447, ptr %445, align 4
  %partial_reduction_result423 = load float, ptr %445, align 4
  %448 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result423, i32 8, i32 31)
  store float %448, ptr %result_from_other_lane422, align 4
  call void @region_4_43(ptr %445, ptr %result_from_other_lane422, ptr %return_buffer424)
  %449 = load float, ptr %return_buffer424, align 4
  store float %449, ptr %445, align 4
  %partial_reduction_result426 = load float, ptr %445, align 4
  %450 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result426, i32 4, i32 31)
  store float %450, ptr %result_from_other_lane425, align 4
  call void @region_4_43(ptr %445, ptr %result_from_other_lane425, ptr %return_buffer427)
  %451 = load float, ptr %return_buffer427, align 4
  store float %451, ptr %445, align 4
  %partial_reduction_result429 = load float, ptr %445, align 4
  %452 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result429, i32 2, i32 31)
  store float %452, ptr %result_from_other_lane428, align 4
  call void @region_4_43(ptr %445, ptr %result_from_other_lane428, ptr %return_buffer430)
  %453 = load float, ptr %return_buffer430, align 4
  store float %453, ptr %445, align 4
  %partial_reduction_result432 = load float, ptr %445, align 4
  %454 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result432, i32 1, i32 31)
  store float %454, ptr %result_from_other_lane431, align 4
  call void @region_4_43(ptr %445, ptr %result_from_other_lane431, ptr %return_buffer433)
  %455 = load float, ptr %return_buffer433, align 4
  store float %455, ptr %445, align 4
  %456 = icmp eq i32 %thread_id.x322, 0
  br i1 %456, label %reduction_write_output-true434, label %reduction_write_output-after435

reduction_write_output-after435:                  ; preds = %reduction_write_output-true434, %inter_warp_reduce-true416
  br label %inter_warp_reduce-after417

reduction_write_output-true434:                   ; preds = %inter_warp_reduce-true416
  %457 = mul i32 %thread_id.x322, 2
  %458 = add i32 %tile_origin.1328, %thread_id.y323
  %459 = add i32 %tile_origin.2329, %457
  %460 = add i32 %459, 0
  %output436 = load float, ptr %445, align 4
  store float %output436, ptr %arg11, align 4
  br label %reduction_write_output-after435
}

define internal void @region_1_16(ptr dereferenceable(4) %Arg_0.17.typed, ptr dereferenceable(4) %Arg_1.18.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.19.typed = alloca float, align 4
  %Arg_0.17 = load float, ptr %Arg_0.17.typed, align 4
  %Arg_1.18 = load float, ptr %Arg_1.18.typed, align 4
  %add.19 = fadd float %Arg_0.17, %Arg_1.18
  store float %add.19, ptr %add.19.typed, align 4
  %load_ret_value = load float, ptr %add.19.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_25(ptr dereferenceable(4) %Arg_0.26.typed, ptr dereferenceable(4) %Arg_1.27.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.28.typed = alloca float, align 4
  %Arg_0.26 = load float, ptr %Arg_0.26.typed, align 4
  %Arg_1.27 = load float, ptr %Arg_1.27.typed, align 4
  %add.28 = fadd float %Arg_0.26, %Arg_1.27
  store float %add.28, ptr %add.28.typed, align 4
  %load_ret_value = load float, ptr %add.28.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_34(ptr dereferenceable(4) %Arg_0.35.typed, ptr dereferenceable(4) %Arg_1.36.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.37.typed = alloca float, align 4
  %Arg_0.35 = load float, ptr %Arg_0.35.typed, align 4
  %Arg_1.36 = load float, ptr %Arg_1.36.typed, align 4
  %add.37 = fadd float %Arg_0.35, %Arg_1.36
  store float %add.37, ptr %add.37.typed, align 4
  %load_ret_value = load float, ptr %add.37.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_43(ptr dereferenceable(4) %Arg_0.44.typed, ptr dereferenceable(4) %Arg_1.45.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.46.typed = alloca float, align 4
  %Arg_0.44 = load float, ptr %Arg_0.44.typed, align 4
  %Arg_1.45 = load float, ptr %Arg_1.45.typed, align 4
  %add.46 = fadd float %Arg_0.44, %Arg_1.45
  store float %add.46, ptr %add.46.typed, align 4
  %load_ret_value = load float, ptr %add.46.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_547(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(32768) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 16 dereferenceable(32768) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 128 dereferenceable(4) %arg17, ptr noalias align 128 dereferenceable(4) %arg18, ptr noalias align 128 dereferenceable(4) %arg19, ptr noalias align 128 dereferenceable(4) %arg20, ptr noalias align 128 dereferenceable(4) %arg21, ptr noalias align 128 dereferenceable(4) %arg22, ptr noalias align 128 dereferenceable(4) %arg23) {
entry:
  %return_buffer873 = alloca float, align 4
  %result_from_other_lane871 = alloca float, align 4
  %return_buffer870 = alloca float, align 4
  %result_from_other_lane868 = alloca float, align 4
  %return_buffer867 = alloca float, align 4
  %result_from_other_lane865 = alloca float, align 4
  %return_buffer864 = alloca float, align 4
  %result_from_other_lane862 = alloca float, align 4
  %return_buffer861 = alloca float, align 4
  %result_from_other_lane859 = alloca float, align 4
  %initial_value_addr858 = alloca float, align 4
  %return_buffer853 = alloca float, align 4
  %result_from_other_lane851 = alloca float, align 4
  %return_buffer850 = alloca float, align 4
  %result_from_other_lane848 = alloca float, align 4
  %return_buffer847 = alloca float, align 4
  %result_from_other_lane845 = alloca float, align 4
  %return_buffer844 = alloca float, align 4
  %result_from_other_lane842 = alloca float, align 4
  %return_buffer841 = alloca float, align 4
  %result_from_other_lane839 = alloca float, align 4
  %return_buffer837 = alloca float, align 4
  %return_buffer823 = alloca float, align 4
  %tile_loop.invar_address807 = alloca i32, align 4
  %return_buffer803 = alloca float, align 4
  %return_buffer791 = alloca float, align 4
  %tile_loop.invar_address782 = alloca i32, align 4
  %y_in_tile.invar_address773 = alloca i32, align 4
  %partial_reduction_result759 = alloca float, align 4
  %reduction_input_address758 = alloca float, align 4
  %return_buffer754 = alloca float, align 4
  %result_from_other_lane752 = alloca float, align 4
  %return_buffer751 = alloca float, align 4
  %result_from_other_lane749 = alloca float, align 4
  %return_buffer748 = alloca float, align 4
  %result_from_other_lane746 = alloca float, align 4
  %return_buffer745 = alloca float, align 4
  %result_from_other_lane743 = alloca float, align 4
  %return_buffer742 = alloca float, align 4
  %result_from_other_lane740 = alloca float, align 4
  %initial_value_addr739 = alloca float, align 4
  %return_buffer734 = alloca float, align 4
  %result_from_other_lane732 = alloca float, align 4
  %return_buffer731 = alloca float, align 4
  %result_from_other_lane729 = alloca float, align 4
  %return_buffer728 = alloca float, align 4
  %result_from_other_lane726 = alloca float, align 4
  %return_buffer725 = alloca float, align 4
  %result_from_other_lane723 = alloca float, align 4
  %return_buffer722 = alloca float, align 4
  %result_from_other_lane720 = alloca float, align 4
  %return_buffer718 = alloca float, align 4
  %return_buffer704 = alloca float, align 4
  %tile_loop.invar_address688 = alloca i32, align 4
  %return_buffer684 = alloca float, align 4
  %return_buffer672 = alloca float, align 4
  %tile_loop.invar_address663 = alloca i32, align 4
  %y_in_tile.invar_address654 = alloca i32, align 4
  %partial_reduction_result640 = alloca float, align 4
  %reduction_input_address639 = alloca float, align 4
  %return_buffer635 = alloca float, align 4
  %result_from_other_lane633 = alloca float, align 4
  %return_buffer632 = alloca float, align 4
  %result_from_other_lane630 = alloca float, align 4
  %return_buffer629 = alloca float, align 4
  %result_from_other_lane627 = alloca float, align 4
  %return_buffer626 = alloca float, align 4
  %result_from_other_lane624 = alloca float, align 4
  %return_buffer623 = alloca float, align 4
  %result_from_other_lane621 = alloca float, align 4
  %initial_value_addr620 = alloca float, align 4
  %return_buffer615 = alloca float, align 4
  %result_from_other_lane613 = alloca float, align 4
  %return_buffer612 = alloca float, align 4
  %result_from_other_lane610 = alloca float, align 4
  %return_buffer609 = alloca float, align 4
  %result_from_other_lane607 = alloca float, align 4
  %return_buffer606 = alloca float, align 4
  %result_from_other_lane604 = alloca float, align 4
  %return_buffer603 = alloca float, align 4
  %result_from_other_lane601 = alloca float, align 4
  %return_buffer599 = alloca float, align 4
  %return_buffer585 = alloca float, align 4
  %tile_loop.invar_address569 = alloca i32, align 4
  %return_buffer565 = alloca float, align 4
  %return_buffer553 = alloca float, align 4
  %tile_loop.invar_address544 = alloca i32, align 4
  %y_in_tile.invar_address535 = alloca i32, align 4
  %partial_reduction_result521 = alloca float, align 4
  %reduction_input_address520 = alloca float, align 4
  %return_buffer516 = alloca float, align 4
  %result_from_other_lane514 = alloca float, align 4
  %return_buffer513 = alloca float, align 4
  %result_from_other_lane511 = alloca float, align 4
  %return_buffer510 = alloca float, align 4
  %result_from_other_lane508 = alloca float, align 4
  %return_buffer507 = alloca float, align 4
  %result_from_other_lane505 = alloca float, align 4
  %return_buffer504 = alloca float, align 4
  %result_from_other_lane502 = alloca float, align 4
  %initial_value_addr501 = alloca float, align 4
  %return_buffer496 = alloca float, align 4
  %result_from_other_lane494 = alloca float, align 4
  %return_buffer493 = alloca float, align 4
  %result_from_other_lane491 = alloca float, align 4
  %return_buffer490 = alloca float, align 4
  %result_from_other_lane488 = alloca float, align 4
  %return_buffer487 = alloca float, align 4
  %result_from_other_lane485 = alloca float, align 4
  %return_buffer484 = alloca float, align 4
  %result_from_other_lane482 = alloca float, align 4
  %return_buffer480 = alloca float, align 4
  %return_buffer466 = alloca float, align 4
  %tile_loop.invar_address450 = alloca i32, align 4
  %return_buffer446 = alloca float, align 4
  %return_buffer434 = alloca float, align 4
  %tile_loop.invar_address425 = alloca i32, align 4
  %y_in_tile.invar_address416 = alloca i32, align 4
  %partial_reduction_result402 = alloca float, align 4
  %reduction_input_address401 = alloca float, align 4
  %return_buffer397 = alloca float, align 4
  %result_from_other_lane395 = alloca float, align 4
  %return_buffer394 = alloca float, align 4
  %result_from_other_lane392 = alloca float, align 4
  %return_buffer391 = alloca float, align 4
  %result_from_other_lane389 = alloca float, align 4
  %return_buffer388 = alloca float, align 4
  %result_from_other_lane386 = alloca float, align 4
  %return_buffer385 = alloca float, align 4
  %result_from_other_lane383 = alloca float, align 4
  %initial_value_addr382 = alloca float, align 4
  %return_buffer377 = alloca float, align 4
  %result_from_other_lane375 = alloca float, align 4
  %return_buffer374 = alloca float, align 4
  %result_from_other_lane372 = alloca float, align 4
  %return_buffer371 = alloca float, align 4
  %result_from_other_lane369 = alloca float, align 4
  %return_buffer368 = alloca float, align 4
  %result_from_other_lane366 = alloca float, align 4
  %return_buffer365 = alloca float, align 4
  %result_from_other_lane363 = alloca float, align 4
  %return_buffer361 = alloca float, align 4
  %return_buffer347 = alloca float, align 4
  %tile_loop.invar_address331 = alloca i32, align 4
  %return_buffer327 = alloca float, align 4
  %return_buffer315 = alloca float, align 4
  %tile_loop.invar_address306 = alloca i32, align 4
  %y_in_tile.invar_address297 = alloca i32, align 4
  %partial_reduction_result283 = alloca float, align 4
  %reduction_input_address282 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %initial_value_addr263 = alloca float, align 4
  %return_buffer258 = alloca float, align 4
  %result_from_other_lane256 = alloca float, align 4
  %return_buffer255 = alloca float, align 4
  %result_from_other_lane253 = alloca float, align 4
  %return_buffer252 = alloca float, align 4
  %result_from_other_lane250 = alloca float, align 4
  %return_buffer249 = alloca float, align 4
  %result_from_other_lane247 = alloca float, align 4
  %return_buffer246 = alloca float, align 4
  %result_from_other_lane244 = alloca float, align 4
  %return_buffer242 = alloca float, align 4
  %return_buffer228 = alloca float, align 4
  %tile_loop.invar_address212 = alloca i32, align 4
  %return_buffer208 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %tile_loop.invar_address188 = alloca i32, align 4
  %y_in_tile.invar_address179 = alloca i32, align 4
  %partial_reduction_result165 = alloca float, align 4
  %reduction_input_address164 = alloca float, align 4
  %return_buffer160 = alloca float, align 4
  %result_from_other_lane158 = alloca float, align 4
  %return_buffer157 = alloca float, align 4
  %result_from_other_lane155 = alloca float, align 4
  %return_buffer154 = alloca float, align 4
  %result_from_other_lane152 = alloca float, align 4
  %return_buffer151 = alloca float, align 4
  %result_from_other_lane149 = alloca float, align 4
  %return_buffer148 = alloca float, align 4
  %result_from_other_lane146 = alloca float, align 4
  %initial_value_addr145 = alloca float, align 4
  %return_buffer140 = alloca float, align 4
  %result_from_other_lane138 = alloca float, align 4
  %return_buffer137 = alloca float, align 4
  %result_from_other_lane135 = alloca float, align 4
  %return_buffer134 = alloca float, align 4
  %result_from_other_lane132 = alloca float, align 4
  %return_buffer131 = alloca float, align 4
  %result_from_other_lane129 = alloca float, align 4
  %return_buffer128 = alloca float, align 4
  %result_from_other_lane126 = alloca float, align 4
  %return_buffer124 = alloca float, align 4
  %return_buffer115 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %return_buffer100 = alloca float, align 4
  %return_buffer93 = alloca float, align 4
  %tile_loop.invar_address87 = alloca i32, align 4
  %y_in_tile.invar_address78 = alloca i32, align 4
  %partial_reduction_result64 = alloca float, align 4
  %reduction_input_address63 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %result_from_other_lane60 = alloca float, align 4
  %return_buffer59 = alloca float, align 4
  %result_from_other_lane57 = alloca float, align 4
  %return_buffer56 = alloca float, align 4
  %result_from_other_lane54 = alloca float, align 4
  %return_buffer53 = alloca float, align 4
  %result_from_other_lane51 = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %result_from_other_lane48 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer47 = alloca float, align 4
  %result_from_other_lane45 = alloca float, align 4
  %return_buffer44 = alloca float, align 4
  %result_from_other_lane42 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %tile_loop.invar_address15 = alloca i32, align 4
  %return_buffer11 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !217
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after144, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %inter_warp_reduce-after262, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %inter_warp_reduce-after381, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %inter_warp_reduce-after500, %reduce-group-3-after
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %reduce-group-5-true, label %reduce-group-5-after

reduce-group-5-after:                             ; preds = %inter_warp_reduce-after619, %reduce-group-4-after
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %reduce-group-6-true, label %reduce-group-6-after

reduce-group-6-after:                             ; preds = %inter_warp_reduce-after738, %reduce-group-5-after
  %8 = icmp eq i32 %0, 7
  br i1 %8, label %reduce-group-7-true, label %reduce-group-7-after

reduce-group-7-after:                             ; preds = %inter_warp_reduce-after857, %reduce-group-6-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_89_constant_19 = load float, ptr @4, align 4
  %9 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_89_constant_19, ptr %9, align 4
  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %11 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %12 = urem i32 %10, 512
  %13 = udiv i32 %10, 512
  %14 = mul i32 %11, 1
  %15 = add i32 %14, %13
  %16 = icmp ult i32 %15, 1
  br i1 %16, label %17, label %early_return

17:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %12, 512
  %thread_id.y = udiv i32 %12, 512
  %lane_id = urem i32 %12, 32
  %18 = udiv i32 %15, 1
  %19 = urem i32 %18, 1
  %20 = udiv i32 %15, 1
  %21 = urem i32 %20, 1
  %22 = udiv i32 %15, 1
  %23 = icmp eq i32 %21, 0
  %tile_bound = select i1 %23, i32 1, i32 1
  %24 = icmp eq i32 %19, 0
  %tile_bound1 = select i1 %24, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %22, 1
  %tile_origin.1 = mul i32 %21, 1
  %tile_origin.2 = mul i32 %19, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %17
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %25 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %25, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %26 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %27 = icmp eq i32 8192, %tile_bound1
  br i1 %27, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit12, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !218

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result34 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 16, i32 31)
  store float %28, ptr %result_from_other_lane, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer35)
  %29 = load float, ptr %return_buffer35, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result37 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 8, i32 31)
  store float %30, ptr %result_from_other_lane36, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane36, ptr %return_buffer38)
  %31 = load float, ptr %return_buffer38, align 4
  store float %31, ptr %current_output, align 4
  %partial_reduction_result40 = load float, ptr %current_output, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 4, i32 31)
  store float %32, ptr %result_from_other_lane39, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane39, ptr %return_buffer41)
  %33 = load float, ptr %return_buffer41, align 4
  store float %33, ptr %current_output, align 4
  %partial_reduction_result43 = load float, ptr %current_output, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result43, i32 2, i32 31)
  store float %34, ptr %result_from_other_lane42, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane42, ptr %return_buffer44)
  %35 = load float, ptr %return_buffer44, align 4
  store float %35, ptr %current_output, align 4
  %partial_reduction_result46 = load float, ptr %current_output, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result46, i32 1, i32 31)
  store float %36, ptr %result_from_other_lane45, align 4
  call void @region_1_20(ptr %current_output, ptr %result_from_other_lane45, ptr %return_buffer47)
  %37 = load float, ptr %return_buffer47, align 4
  store float %37, ptr %current_output, align 4
  %38 = udiv i32 %thread_id.x, 32
  %39 = icmp eq i32 %lane_id, 0
  br i1 %39, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %40 = icmp eq i32 %38, 0
  br i1 %40, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %41 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %42 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %42, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %43 = icmp eq i32 %tile_loop.indvar, 0
  %44 = mul i32 %tile_loop.indvar, 1024
  %45 = add i32 %44, 0
  %x_loc = add i32 %45, %41
  %46 = add i32 %tile_origin.1, %y_in_tile.indvar
  %47 = add i32 %tile_origin.2, %x_loc
  %48 = mul nuw nsw i32 %47, 1
  %49 = add nuw nsw i32 0, %48
  %50 = mul nuw nsw i32 %46, 8192
  %51 = add nuw nsw i32 %49, %50
  %52 = mul nuw nsw i32 %tile_origin.0, 8192
  %53 = add nuw nsw i32 %51, %52
  %54 = udiv i32 %53, 1
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %53
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %53
  %Arg_1.24 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %add.17 = fadd float %Arg_0.13, %Arg_1.24
  store float %add.17, ptr %reduction_input_address, align 4
  %55 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %55, ptr %reduction_input_address, ptr %return_buffer)
  %56 = load float, ptr %return_buffer, align 4
  store float %56, ptr %55, align 4
  %57 = mul i32 %tile_loop.indvar, 1024
  %58 = add i32 %57, 1
  %x_loc5 = add i32 %58, %41
  %59 = add i32 %tile_origin.1, %y_in_tile.indvar
  %60 = add i32 %tile_origin.2, %x_loc5
  %61 = mul nuw nsw i32 %60, 1
  %62 = add nuw nsw i32 0, %61
  %63 = mul nuw nsw i32 %59, 8192
  %64 = add nuw nsw i32 %62, %63
  %65 = mul nuw nsw i32 %tile_origin.0, 8192
  %66 = add nuw nsw i32 %64, %65
  %67 = udiv i32 %66, 1
  %Arg_0.16 = getelementptr inbounds float, ptr %arg0, i32 %66
  %Arg_0.17 = load float, ptr %Arg_0.16, align 4, !invariant.load !197
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %66
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !197
  %add.1710 = fadd float %Arg_0.17, %Arg_1.29
  store float %add.1710, ptr %reduction_input_address, align 4
  %68 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %68, ptr %reduction_input_address, ptr %return_buffer11)
  %69 = load float, ptr %return_buffer11, align 4
  store float %69, ptr %68, align 4
  br label %tile_loop.loop_header, !llvm.loop !219

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %70 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address15, align 4
  br label %tile_loop.loop_header13

tile_loop.loop_header13:                          ; preds = %x_in_tile-after27, %is_full_tile-false
  %tile_loop.indvar16 = load i32, ptr %tile_loop.invar_address15, align 4
  %71 = icmp uge i32 %tile_loop.indvar16, 8
  br i1 %71, label %tile_loop.loop_exit12, label %tile_loop.loop_body14

tile_loop.loop_body14:                            ; preds = %tile_loop.loop_header13
  %invar.inc17 = add nuw nsw i32 %tile_loop.indvar16, 1
  store i32 %invar.inc17, ptr %tile_loop.invar_address15, align 4
  %72 = icmp eq i32 %tile_loop.indvar16, 0
  %73 = mul i32 %tile_loop.indvar16, 1024
  %74 = add i32 %73, 0
  %x_loc18 = add i32 %74, %70
  %75 = add i32 %tile_origin.1, %y_in_tile.indvar
  %76 = add i32 %tile_origin.2, %x_loc18
  %77 = icmp ult i32 %x_loc18, %tile_bound1
  br i1 %77, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body14
  %78 = mul i32 %tile_loop.indvar16, 1024
  %79 = add i32 %78, 1
  %x_loc25 = add i32 %79, %70
  %80 = add i32 %tile_origin.1, %y_in_tile.indvar
  %81 = add i32 %tile_origin.2, %x_loc25
  %82 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %82, label %x_in_tile-true26, label %x_in_tile-after27

x_in_tile-after27:                                ; preds = %x_in_tile-true26, %x_in_tile-after
  br label %tile_loop.loop_header13, !llvm.loop !220

tile_loop.loop_exit12:                            ; preds = %tile_loop.loop_header13
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body14
  %83 = mul nuw nsw i32 %76, 1
  %84 = add nuw nsw i32 0, %83
  %85 = mul nuw nsw i32 %75, 8192
  %86 = add nuw nsw i32 %84, %85
  %87 = mul nuw nsw i32 %tile_origin.0, 8192
  %88 = add nuw nsw i32 %86, %87
  %89 = udiv i32 %88, 1
  %Arg_0.119 = getelementptr inbounds float, ptr %arg0, i32 %88
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !197
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %88
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %add.1723 = fadd float %Arg_0.120, %Arg_1.222
  store float %add.1723, ptr %reduction_input_address, align 4
  %90 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %90, ptr %reduction_input_address, ptr %return_buffer24)
  %91 = load float, ptr %return_buffer24, align 4
  store float %91, ptr %90, align 4
  br label %x_in_tile-after

x_in_tile-true26:                                 ; preds = %x_in_tile-after
  %92 = mul nuw nsw i32 %81, 1
  %93 = add nuw nsw i32 0, %92
  %94 = mul nuw nsw i32 %80, 8192
  %95 = add nuw nsw i32 %93, %94
  %96 = mul nuw nsw i32 %tile_origin.0, 8192
  %97 = add nuw nsw i32 %95, %96
  %98 = udiv i32 %97, 1
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %97
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !197
  %Arg_1.230 = getelementptr inbounds float, ptr %arg1, i32 %97
  %Arg_1.231 = load float, ptr %Arg_1.230, align 4, !invariant.load !197
  %add.1732 = fadd float %Arg_0.129, %Arg_1.231
  store float %add.1732, ptr %reduction_input_address, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20(ptr %99, ptr %reduction_input_address, ptr %return_buffer33)
  %100 = load float, ptr %return_buffer33, align 4
  store float %100, ptr %99, align 4
  br label %x_in_tile-after27

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %101 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i32 0, i32 %13, i32 0, i32 %38
  %102 = addrspacecast ptr addrspace(3) %101 to ptr
  %103 = load float, ptr %current_output, align 4
  store float %103, ptr %102, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %104 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache6, i32 0, i32 %13, i32 0, i32 %lane_id
  %105 = addrspacecast ptr addrspace(3) %104 to ptr
  store float %region_0_89_constant_19, ptr %initial_value_addr, align 4
  %106 = icmp ult i32 %thread_id.x, 16
  %107 = select i1 %106, ptr %105, ptr %initial_value_addr
  %partial_reduction_result49 = load float, ptr %107, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result49, i32 16, i32 31)
  store float %108, ptr %result_from_other_lane48, align 4
  call void @region_1_20(ptr %107, ptr %result_from_other_lane48, ptr %return_buffer50)
  %109 = load float, ptr %return_buffer50, align 4
  store float %109, ptr %107, align 4
  %partial_reduction_result52 = load float, ptr %107, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result52, i32 8, i32 31)
  store float %110, ptr %result_from_other_lane51, align 4
  call void @region_1_20(ptr %107, ptr %result_from_other_lane51, ptr %return_buffer53)
  %111 = load float, ptr %return_buffer53, align 4
  store float %111, ptr %107, align 4
  %partial_reduction_result55 = load float, ptr %107, align 4
  %112 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result55, i32 4, i32 31)
  store float %112, ptr %result_from_other_lane54, align 4
  call void @region_1_20(ptr %107, ptr %result_from_other_lane54, ptr %return_buffer56)
  %113 = load float, ptr %return_buffer56, align 4
  store float %113, ptr %107, align 4
  %partial_reduction_result58 = load float, ptr %107, align 4
  %114 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result58, i32 2, i32 31)
  store float %114, ptr %result_from_other_lane57, align 4
  call void @region_1_20(ptr %107, ptr %result_from_other_lane57, ptr %return_buffer59)
  %115 = load float, ptr %return_buffer59, align 4
  store float %115, ptr %107, align 4
  %partial_reduction_result61 = load float, ptr %107, align 4
  %116 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 1, i32 31)
  store float %116, ptr %result_from_other_lane60, align 4
  call void @region_1_20(ptr %107, ptr %result_from_other_lane60, ptr %return_buffer62)
  %117 = load float, ptr %return_buffer62, align 4
  store float %117, ptr %107, align 4
  %118 = icmp eq i32 %thread_id.x, 0
  br i1 %118, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %119 = mul i32 %thread_id.x, 2
  %120 = add i32 %tile_origin.1, %thread_id.y
  %121 = add i32 %tile_origin.2, %119
  %122 = add i32 %121, 0
  %output = load float, ptr %107, align 4
  store float %output, ptr %arg16, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_89_constant_1965 = load float, ptr @4, align 4
  %123 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  store float %region_0_89_constant_1965, ptr %123, align 4
  %124 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %125 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %126 = urem i32 %124, 512
  %127 = udiv i32 %124, 512
  %128 = mul i32 %125, 1
  %129 = add i32 %128, %127
  %130 = icmp ult i32 %129, 1
  br i1 %130, label %131, label %early_return66

131:                                              ; preds = %reduce-group-1-true
  %thread_id.x67 = urem i32 %126, 512
  %thread_id.y68 = udiv i32 %126, 512
  %lane_id69 = urem i32 %126, 32
  %132 = udiv i32 %129, 1
  %133 = urem i32 %132, 1
  %134 = udiv i32 %129, 1
  %135 = urem i32 %134, 1
  %136 = udiv i32 %129, 1
  %137 = icmp eq i32 %135, 0
  %tile_bound70 = select i1 %137, i32 1, i32 1
  %138 = icmp eq i32 %133, 0
  %tile_bound71 = select i1 %138, i32 8192, i32 8192
  %tile_origin.072 = mul i32 %136, 1
  %tile_origin.173 = mul i32 %135, 1
  %tile_origin.274 = mul i32 %133, 8192
  store i32 %thread_id.y68, ptr %y_in_tile.invar_address78, align 4
  br label %y_in_tile.loop_header76

y_in_tile.loop_header76:                          ; preds = %is_full_tile-after83, %131
  %y_in_tile.indvar79 = load i32, ptr %y_in_tile.invar_address78, align 4
  %139 = icmp uge i32 %y_in_tile.indvar79, %tile_bound70
  br i1 %139, label %y_in_tile.loop_exit75, label %y_in_tile.loop_body77

y_in_tile.loop_body77:                            ; preds = %y_in_tile.loop_header76
  %invar.inc80 = add nuw nsw i32 %y_in_tile.indvar79, 1
  store i32 %invar.inc80, ptr %y_in_tile.invar_address78, align 4
  %140 = icmp eq i32 %y_in_tile.indvar79, %thread_id.y68
  %141 = icmp eq i32 8192, %tile_bound71
  br i1 %141, label %is_full_tile-true81, label %is_full_tile-false82

is_full_tile-after83:                             ; preds = %tile_loop.loop_exit101, %tile_loop.loop_exit84
  br label %y_in_tile.loop_header76, !llvm.loop !221

y_in_tile.loop_exit75:                            ; preds = %y_in_tile.loop_header76
  %current_output125 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  %partial_reduction_result127 = load float, ptr %current_output125, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result127, i32 16, i32 31)
  store float %142, ptr %result_from_other_lane126, align 4
  call void @region_2_27(ptr %current_output125, ptr %result_from_other_lane126, ptr %return_buffer128)
  %143 = load float, ptr %return_buffer128, align 4
  store float %143, ptr %current_output125, align 4
  %partial_reduction_result130 = load float, ptr %current_output125, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result130, i32 8, i32 31)
  store float %144, ptr %result_from_other_lane129, align 4
  call void @region_2_27(ptr %current_output125, ptr %result_from_other_lane129, ptr %return_buffer131)
  %145 = load float, ptr %return_buffer131, align 4
  store float %145, ptr %current_output125, align 4
  %partial_reduction_result133 = load float, ptr %current_output125, align 4
  %146 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result133, i32 4, i32 31)
  store float %146, ptr %result_from_other_lane132, align 4
  call void @region_2_27(ptr %current_output125, ptr %result_from_other_lane132, ptr %return_buffer134)
  %147 = load float, ptr %return_buffer134, align 4
  store float %147, ptr %current_output125, align 4
  %partial_reduction_result136 = load float, ptr %current_output125, align 4
  %148 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result136, i32 2, i32 31)
  store float %148, ptr %result_from_other_lane135, align 4
  call void @region_2_27(ptr %current_output125, ptr %result_from_other_lane135, ptr %return_buffer137)
  %149 = load float, ptr %return_buffer137, align 4
  store float %149, ptr %current_output125, align 4
  %partial_reduction_result139 = load float, ptr %current_output125, align 4
  %150 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result139, i32 1, i32 31)
  store float %150, ptr %result_from_other_lane138, align 4
  call void @region_2_27(ptr %current_output125, ptr %result_from_other_lane138, ptr %return_buffer140)
  %151 = load float, ptr %return_buffer140, align 4
  store float %151, ptr %current_output125, align 4
  %152 = udiv i32 %thread_id.x67, 32
  %153 = icmp eq i32 %lane_id69, 0
  br i1 %153, label %intra_warp_reduce_write-true141, label %intra_warp_reduce_write-after142

intra_warp_reduce_write-after142:                 ; preds = %intra_warp_reduce_write-true141, %y_in_tile.loop_exit75
  call void @llvm.nvvm.barrier0()
  %154 = icmp eq i32 %152, 0
  br i1 %154, label %inter_warp_reduce-true143, label %inter_warp_reduce-after144

inter_warp_reduce-after144:                       ; preds = %reduction_write_output-after162, %intra_warp_reduce_write-after142
  br label %reduce-group-1-after

early_return66:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true81:                              ; preds = %y_in_tile.loop_body77
  %155 = mul i32 %thread_id.x67, 2
  store i32 0, ptr %tile_loop.invar_address87, align 4
  br label %tile_loop.loop_header85

tile_loop.loop_header85:                          ; preds = %tile_loop.loop_body86, %is_full_tile-true81
  %tile_loop.indvar88 = load i32, ptr %tile_loop.invar_address87, align 4
  %156 = icmp uge i32 %tile_loop.indvar88, 8
  br i1 %156, label %tile_loop.loop_exit84, label %tile_loop.loop_body86

tile_loop.loop_body86:                            ; preds = %tile_loop.loop_header85
  %invar.inc89 = add nuw nsw i32 %tile_loop.indvar88, 1
  store i32 %invar.inc89, ptr %tile_loop.invar_address87, align 4
  %157 = icmp eq i32 %tile_loop.indvar88, 0
  %158 = mul i32 %tile_loop.indvar88, 1024
  %159 = add i32 %158, 0
  %x_loc90 = add i32 %159, %155
  %160 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %161 = add i32 %tile_origin.274, %x_loc90
  %162 = mul nuw nsw i32 %161, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %160, 8192
  %165 = add nuw nsw i32 %163, %164
  %166 = mul nuw nsw i32 %tile_origin.072, 8192
  %167 = add nuw nsw i32 %165, %166
  %168 = udiv i32 %167, 1
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %167
  %Arg_2.391 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %167
  %Arg_3.492 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %add.25 = fadd float %Arg_2.391, %Arg_3.492
  store float %add.25, ptr %reduction_input_address63, align 4
  %169 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27(ptr %169, ptr %reduction_input_address63, ptr %return_buffer93)
  %170 = load float, ptr %return_buffer93, align 4
  store float %170, ptr %169, align 4
  %171 = mul i32 %tile_loop.indvar88, 1024
  %172 = add i32 %171, 1
  %x_loc94 = add i32 %172, %155
  %173 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %174 = add i32 %tile_origin.274, %x_loc94
  %175 = mul nuw nsw i32 %174, 1
  %176 = add nuw nsw i32 0, %175
  %177 = mul nuw nsw i32 %173, 8192
  %178 = add nuw nsw i32 %176, %177
  %179 = mul nuw nsw i32 %tile_origin.072, 8192
  %180 = add nuw nsw i32 %178, %179
  %181 = udiv i32 %180, 1
  %Arg_2.395 = getelementptr inbounds float, ptr %arg2, i32 %180
  %Arg_2.396 = load float, ptr %Arg_2.395, align 4, !invariant.load !197
  %Arg_3.497 = getelementptr inbounds float, ptr %arg3, i32 %180
  %Arg_3.498 = load float, ptr %Arg_3.497, align 4, !invariant.load !197
  %add.2599 = fadd float %Arg_2.396, %Arg_3.498
  store float %add.2599, ptr %reduction_input_address63, align 4
  %182 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27(ptr %182, ptr %reduction_input_address63, ptr %return_buffer100)
  %183 = load float, ptr %return_buffer100, align 4
  store float %183, ptr %182, align 4
  br label %tile_loop.loop_header85, !llvm.loop !222

tile_loop.loop_exit84:                            ; preds = %tile_loop.loop_header85
  br label %is_full_tile-after83

is_full_tile-false82:                             ; preds = %y_in_tile.loop_body77
  %184 = mul i32 %thread_id.x67, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %x_in_tile-after118, %is_full_tile-false82
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %185 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %185, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %186 = icmp eq i32 %tile_loop.indvar105, 0
  %187 = mul i32 %tile_loop.indvar105, 1024
  %188 = add i32 %187, 0
  %x_loc107 = add i32 %188, %184
  %189 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %190 = add i32 %tile_origin.274, %x_loc107
  %191 = icmp ult i32 %x_loc107, %tile_bound71
  br i1 %191, label %x_in_tile-true108, label %x_in_tile-after109

x_in_tile-after109:                               ; preds = %x_in_tile-true108, %tile_loop.loop_body103
  %192 = mul i32 %tile_loop.indvar105, 1024
  %193 = add i32 %192, 1
  %x_loc116 = add i32 %193, %184
  %194 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %195 = add i32 %tile_origin.274, %x_loc116
  %196 = icmp ult i32 %x_loc116, %tile_bound71
  br i1 %196, label %x_in_tile-true117, label %x_in_tile-after118

x_in_tile-after118:                               ; preds = %x_in_tile-true117, %x_in_tile-after109
  br label %tile_loop.loop_header102, !llvm.loop !223

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after83

x_in_tile-true108:                                ; preds = %tile_loop.loop_body103
  %197 = mul nuw nsw i32 %190, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %189, 8192
  %200 = add nuw nsw i32 %198, %199
  %201 = mul nuw nsw i32 %tile_origin.072, 8192
  %202 = add nuw nsw i32 %200, %201
  %203 = udiv i32 %202, 1
  %Arg_2.3110 = getelementptr inbounds float, ptr %arg2, i32 %202
  %Arg_2.3111 = load float, ptr %Arg_2.3110, align 4, !invariant.load !197
  %Arg_3.4112 = getelementptr inbounds float, ptr %arg3, i32 %202
  %Arg_3.4113 = load float, ptr %Arg_3.4112, align 4, !invariant.load !197
  %add.25114 = fadd float %Arg_2.3111, %Arg_3.4113
  store float %add.25114, ptr %reduction_input_address63, align 4
  %204 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27(ptr %204, ptr %reduction_input_address63, ptr %return_buffer115)
  %205 = load float, ptr %return_buffer115, align 4
  store float %205, ptr %204, align 4
  br label %x_in_tile-after109

x_in_tile-true117:                                ; preds = %x_in_tile-after109
  %206 = mul nuw nsw i32 %195, 1
  %207 = add nuw nsw i32 0, %206
  %208 = mul nuw nsw i32 %194, 8192
  %209 = add nuw nsw i32 %207, %208
  %210 = mul nuw nsw i32 %tile_origin.072, 8192
  %211 = add nuw nsw i32 %209, %210
  %212 = udiv i32 %211, 1
  %Arg_2.3119 = getelementptr inbounds float, ptr %arg2, i32 %211
  %Arg_2.3120 = load float, ptr %Arg_2.3119, align 4, !invariant.load !197
  %Arg_3.4121 = getelementptr inbounds float, ptr %arg3, i32 %211
  %Arg_3.4122 = load float, ptr %Arg_3.4121, align 4, !invariant.load !197
  %add.25123 = fadd float %Arg_2.3120, %Arg_3.4122
  store float %add.25123, ptr %reduction_input_address63, align 4
  %213 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27(ptr %213, ptr %reduction_input_address63, ptr %return_buffer124)
  %214 = load float, ptr %return_buffer124, align 4
  store float %214, ptr %213, align 4
  br label %x_in_tile-after118

intra_warp_reduce_write-true141:                  ; preds = %y_in_tile.loop_exit75
  %215 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i32 0, i32 %127, i32 0, i32 %152
  %216 = addrspacecast ptr addrspace(3) %215 to ptr
  %217 = load float, ptr %current_output125, align 4
  store float %217, ptr %216, align 4
  br label %intra_warp_reduce_write-after142

inter_warp_reduce-true143:                        ; preds = %intra_warp_reduce_write-after142
  %218 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache7, i32 0, i32 %127, i32 0, i32 %lane_id69
  %219 = addrspacecast ptr addrspace(3) %218 to ptr
  store float %region_0_89_constant_1965, ptr %initial_value_addr145, align 4
  %220 = icmp ult i32 %thread_id.x67, 16
  %221 = select i1 %220, ptr %219, ptr %initial_value_addr145
  %partial_reduction_result147 = load float, ptr %221, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result147, i32 16, i32 31)
  store float %222, ptr %result_from_other_lane146, align 4
  call void @region_2_27(ptr %221, ptr %result_from_other_lane146, ptr %return_buffer148)
  %223 = load float, ptr %return_buffer148, align 4
  store float %223, ptr %221, align 4
  %partial_reduction_result150 = load float, ptr %221, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result150, i32 8, i32 31)
  store float %224, ptr %result_from_other_lane149, align 4
  call void @region_2_27(ptr %221, ptr %result_from_other_lane149, ptr %return_buffer151)
  %225 = load float, ptr %return_buffer151, align 4
  store float %225, ptr %221, align 4
  %partial_reduction_result153 = load float, ptr %221, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result153, i32 4, i32 31)
  store float %226, ptr %result_from_other_lane152, align 4
  call void @region_2_27(ptr %221, ptr %result_from_other_lane152, ptr %return_buffer154)
  %227 = load float, ptr %return_buffer154, align 4
  store float %227, ptr %221, align 4
  %partial_reduction_result156 = load float, ptr %221, align 4
  %228 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result156, i32 2, i32 31)
  store float %228, ptr %result_from_other_lane155, align 4
  call void @region_2_27(ptr %221, ptr %result_from_other_lane155, ptr %return_buffer157)
  %229 = load float, ptr %return_buffer157, align 4
  store float %229, ptr %221, align 4
  %partial_reduction_result159 = load float, ptr %221, align 4
  %230 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result159, i32 1, i32 31)
  store float %230, ptr %result_from_other_lane158, align 4
  call void @region_2_27(ptr %221, ptr %result_from_other_lane158, ptr %return_buffer160)
  %231 = load float, ptr %return_buffer160, align 4
  store float %231, ptr %221, align 4
  %232 = icmp eq i32 %thread_id.x67, 0
  br i1 %232, label %reduction_write_output-true161, label %reduction_write_output-after162

reduction_write_output-after162:                  ; preds = %reduction_write_output-true161, %inter_warp_reduce-true143
  br label %inter_warp_reduce-after144

reduction_write_output-true161:                   ; preds = %inter_warp_reduce-true143
  %233 = mul i32 %thread_id.x67, 2
  %234 = add i32 %tile_origin.173, %thread_id.y68
  %235 = add i32 %tile_origin.274, %233
  %236 = add i32 %235, 0
  %output163 = load float, ptr %221, align 4
  store float %output163, ptr %arg17, align 4
  br label %reduction_write_output-after162

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %region_0_89_constant_19166 = load float, ptr @4, align 4
  %237 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  store float %region_0_89_constant_19166, ptr %237, align 4
  %238 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %239 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %240 = urem i32 %238, 512
  %241 = udiv i32 %238, 512
  %242 = mul i32 %239, 1
  %243 = add i32 %242, %241
  %244 = icmp ult i32 %243, 1
  br i1 %244, label %245, label %early_return167

245:                                              ; preds = %reduce-group-2-true
  %thread_id.x168 = urem i32 %240, 512
  %thread_id.y169 = udiv i32 %240, 512
  %lane_id170 = urem i32 %240, 32
  %246 = udiv i32 %243, 1
  %247 = urem i32 %246, 1
  %248 = udiv i32 %243, 1
  %249 = urem i32 %248, 1
  %250 = udiv i32 %243, 1
  %251 = icmp eq i32 %249, 0
  %tile_bound171 = select i1 %251, i32 1, i32 1
  %252 = icmp eq i32 %247, 0
  %tile_bound172 = select i1 %252, i32 8192, i32 8192
  %tile_origin.0173 = mul i32 %250, 1
  %tile_origin.1174 = mul i32 %249, 1
  %tile_origin.2175 = mul i32 %247, 8192
  store i32 %thread_id.y169, ptr %y_in_tile.invar_address179, align 4
  br label %y_in_tile.loop_header177

y_in_tile.loop_header177:                         ; preds = %is_full_tile-after184, %245
  %y_in_tile.indvar180 = load i32, ptr %y_in_tile.invar_address179, align 4
  %253 = icmp uge i32 %y_in_tile.indvar180, %tile_bound171
  br i1 %253, label %y_in_tile.loop_exit176, label %y_in_tile.loop_body178

y_in_tile.loop_body178:                           ; preds = %y_in_tile.loop_header177
  %invar.inc181 = add nuw nsw i32 %y_in_tile.indvar180, 1
  store i32 %invar.inc181, ptr %y_in_tile.invar_address179, align 4
  %254 = icmp eq i32 %y_in_tile.indvar180, %thread_id.y169
  %255 = icmp eq i32 8192, %tile_bound172
  br i1 %255, label %is_full_tile-true182, label %is_full_tile-false183

is_full_tile-after184:                            ; preds = %tile_loop.loop_exit209, %tile_loop.loop_exit185
  br label %y_in_tile.loop_header177, !llvm.loop !224

y_in_tile.loop_exit176:                           ; preds = %y_in_tile.loop_header177
  %current_output243 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  %partial_reduction_result245 = load float, ptr %current_output243, align 4
  %256 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result245, i32 16, i32 31)
  store float %256, ptr %result_from_other_lane244, align 4
  call void @region_3_38(ptr %current_output243, ptr %result_from_other_lane244, ptr %return_buffer246)
  %257 = load float, ptr %return_buffer246, align 4
  store float %257, ptr %current_output243, align 4
  %partial_reduction_result248 = load float, ptr %current_output243, align 4
  %258 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result248, i32 8, i32 31)
  store float %258, ptr %result_from_other_lane247, align 4
  call void @region_3_38(ptr %current_output243, ptr %result_from_other_lane247, ptr %return_buffer249)
  %259 = load float, ptr %return_buffer249, align 4
  store float %259, ptr %current_output243, align 4
  %partial_reduction_result251 = load float, ptr %current_output243, align 4
  %260 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result251, i32 4, i32 31)
  store float %260, ptr %result_from_other_lane250, align 4
  call void @region_3_38(ptr %current_output243, ptr %result_from_other_lane250, ptr %return_buffer252)
  %261 = load float, ptr %return_buffer252, align 4
  store float %261, ptr %current_output243, align 4
  %partial_reduction_result254 = load float, ptr %current_output243, align 4
  %262 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result254, i32 2, i32 31)
  store float %262, ptr %result_from_other_lane253, align 4
  call void @region_3_38(ptr %current_output243, ptr %result_from_other_lane253, ptr %return_buffer255)
  %263 = load float, ptr %return_buffer255, align 4
  store float %263, ptr %current_output243, align 4
  %partial_reduction_result257 = load float, ptr %current_output243, align 4
  %264 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result257, i32 1, i32 31)
  store float %264, ptr %result_from_other_lane256, align 4
  call void @region_3_38(ptr %current_output243, ptr %result_from_other_lane256, ptr %return_buffer258)
  %265 = load float, ptr %return_buffer258, align 4
  store float %265, ptr %current_output243, align 4
  %266 = udiv i32 %thread_id.x168, 32
  %267 = icmp eq i32 %lane_id170, 0
  br i1 %267, label %intra_warp_reduce_write-true259, label %intra_warp_reduce_write-after260

intra_warp_reduce_write-after260:                 ; preds = %intra_warp_reduce_write-true259, %y_in_tile.loop_exit176
  call void @llvm.nvvm.barrier0()
  %268 = icmp eq i32 %266, 0
  br i1 %268, label %inter_warp_reduce-true261, label %inter_warp_reduce-after262

inter_warp_reduce-after262:                       ; preds = %reduction_write_output-after280, %intra_warp_reduce_write-after260
  br label %reduce-group-2-after

early_return167:                                  ; preds = %reduce-group-2-true
  ret void

is_full_tile-true182:                             ; preds = %y_in_tile.loop_body178
  %269 = mul i32 %thread_id.x168, 2
  store i32 0, ptr %tile_loop.invar_address188, align 4
  br label %tile_loop.loop_header186

tile_loop.loop_header186:                         ; preds = %tile_loop.loop_body187, %is_full_tile-true182
  %tile_loop.indvar189 = load i32, ptr %tile_loop.invar_address188, align 4
  %270 = icmp uge i32 %tile_loop.indvar189, 8
  br i1 %270, label %tile_loop.loop_exit185, label %tile_loop.loop_body187

tile_loop.loop_body187:                           ; preds = %tile_loop.loop_header186
  %invar.inc190 = add nuw nsw i32 %tile_loop.indvar189, 1
  store i32 %invar.inc190, ptr %tile_loop.invar_address188, align 4
  %271 = icmp eq i32 %tile_loop.indvar189, 0
  %272 = mul i32 %tile_loop.indvar189, 1024
  %273 = add i32 %272, 0
  %x_loc191 = add i32 %273, %269
  %274 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %275 = add i32 %tile_origin.2175, %x_loc191
  %276 = mul nuw nsw i32 %275, 1
  %277 = add nuw nsw i32 0, %276
  %278 = mul nuw nsw i32 %274, 8192
  %279 = add nuw nsw i32 %277, %278
  %280 = mul nuw nsw i32 %tile_origin.0173, 8192
  %281 = add nuw nsw i32 %279, %280
  %282 = udiv i32 %281, 1
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %281
  %Arg_5.6192 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %281
  %Arg_4.5193 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %multiply.32 = fmul float %Arg_5.6192, %Arg_4.5193
  %region_0_89_constant_33 = load float, ptr @5, align 4
  %Arg_4.5194 = getelementptr inbounds float, ptr %arg4, i32 %281
  %Arg_4.5195 = load float, ptr %Arg_4.5194, align 4, !invariant.load !197
  %subtract.35 = fsub float %region_0_89_constant_33, %Arg_4.5195
  %multiply.36 = fmul float %multiply.32, %subtract.35
  store float %multiply.36, ptr %reduction_input_address164, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_38(ptr %283, ptr %reduction_input_address164, ptr %return_buffer196)
  %284 = load float, ptr %return_buffer196, align 4
  store float %284, ptr %283, align 4
  %285 = mul i32 %tile_loop.indvar189, 1024
  %286 = add i32 %285, 1
  %x_loc197 = add i32 %286, %269
  %287 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %288 = add i32 %tile_origin.2175, %x_loc197
  %289 = mul nuw nsw i32 %288, 1
  %290 = add nuw nsw i32 0, %289
  %291 = mul nuw nsw i32 %287, 8192
  %292 = add nuw nsw i32 %290, %291
  %293 = mul nuw nsw i32 %tile_origin.0173, 8192
  %294 = add nuw nsw i32 %292, %293
  %295 = udiv i32 %294, 1
  %Arg_5.6198 = getelementptr inbounds float, ptr %arg5, i32 %294
  %Arg_5.6199 = load float, ptr %Arg_5.6198, align 4, !invariant.load !197
  %Arg_4.5200 = getelementptr inbounds float, ptr %arg4, i32 %294
  %Arg_4.5201 = load float, ptr %Arg_4.5200, align 4, !invariant.load !197
  %multiply.32202 = fmul float %Arg_5.6199, %Arg_4.5201
  %region_0_89_constant_33203 = load float, ptr @5, align 4
  %Arg_4.5204 = getelementptr inbounds float, ptr %arg4, i32 %294
  %Arg_4.5205 = load float, ptr %Arg_4.5204, align 4, !invariant.load !197
  %subtract.35206 = fsub float %region_0_89_constant_33203, %Arg_4.5205
  %multiply.36207 = fmul float %multiply.32202, %subtract.35206
  store float %multiply.36207, ptr %reduction_input_address164, align 4
  %296 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_38(ptr %296, ptr %reduction_input_address164, ptr %return_buffer208)
  %297 = load float, ptr %return_buffer208, align 4
  store float %297, ptr %296, align 4
  br label %tile_loop.loop_header186, !llvm.loop !225

tile_loop.loop_exit185:                           ; preds = %tile_loop.loop_header186
  br label %is_full_tile-after184

is_full_tile-false183:                            ; preds = %y_in_tile.loop_body178
  %298 = mul i32 %thread_id.x168, 2
  store i32 0, ptr %tile_loop.invar_address212, align 4
  br label %tile_loop.loop_header210

tile_loop.loop_header210:                         ; preds = %x_in_tile-after231, %is_full_tile-false183
  %tile_loop.indvar213 = load i32, ptr %tile_loop.invar_address212, align 4
  %299 = icmp uge i32 %tile_loop.indvar213, 8
  br i1 %299, label %tile_loop.loop_exit209, label %tile_loop.loop_body211

tile_loop.loop_body211:                           ; preds = %tile_loop.loop_header210
  %invar.inc214 = add nuw nsw i32 %tile_loop.indvar213, 1
  store i32 %invar.inc214, ptr %tile_loop.invar_address212, align 4
  %300 = icmp eq i32 %tile_loop.indvar213, 0
  %301 = mul i32 %tile_loop.indvar213, 1024
  %302 = add i32 %301, 0
  %x_loc215 = add i32 %302, %298
  %303 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %304 = add i32 %tile_origin.2175, %x_loc215
  %305 = icmp ult i32 %x_loc215, %tile_bound172
  br i1 %305, label %x_in_tile-true216, label %x_in_tile-after217

x_in_tile-after217:                               ; preds = %x_in_tile-true216, %tile_loop.loop_body211
  %306 = mul i32 %tile_loop.indvar213, 1024
  %307 = add i32 %306, 1
  %x_loc229 = add i32 %307, %298
  %308 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %309 = add i32 %tile_origin.2175, %x_loc229
  %310 = icmp ult i32 %x_loc229, %tile_bound172
  br i1 %310, label %x_in_tile-true230, label %x_in_tile-after231

x_in_tile-after231:                               ; preds = %x_in_tile-true230, %x_in_tile-after217
  br label %tile_loop.loop_header210, !llvm.loop !226

tile_loop.loop_exit209:                           ; preds = %tile_loop.loop_header210
  br label %is_full_tile-after184

x_in_tile-true216:                                ; preds = %tile_loop.loop_body211
  %311 = mul nuw nsw i32 %304, 1
  %312 = add nuw nsw i32 0, %311
  %313 = mul nuw nsw i32 %303, 8192
  %314 = add nuw nsw i32 %312, %313
  %315 = mul nuw nsw i32 %tile_origin.0173, 8192
  %316 = add nuw nsw i32 %314, %315
  %317 = udiv i32 %316, 1
  %Arg_5.6218 = getelementptr inbounds float, ptr %arg5, i32 %316
  %Arg_5.6219 = load float, ptr %Arg_5.6218, align 4, !invariant.load !197
  %Arg_4.5220 = getelementptr inbounds float, ptr %arg4, i32 %316
  %Arg_4.5221 = load float, ptr %Arg_4.5220, align 4, !invariant.load !197
  %multiply.32222 = fmul float %Arg_5.6219, %Arg_4.5221
  %region_0_89_constant_33223 = load float, ptr @5, align 4
  %Arg_4.5224 = getelementptr inbounds float, ptr %arg4, i32 %316
  %Arg_4.5225 = load float, ptr %Arg_4.5224, align 4, !invariant.load !197
  %subtract.35226 = fsub float %region_0_89_constant_33223, %Arg_4.5225
  %multiply.36227 = fmul float %multiply.32222, %subtract.35226
  store float %multiply.36227, ptr %reduction_input_address164, align 4
  %318 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_38(ptr %318, ptr %reduction_input_address164, ptr %return_buffer228)
  %319 = load float, ptr %return_buffer228, align 4
  store float %319, ptr %318, align 4
  br label %x_in_tile-after217

x_in_tile-true230:                                ; preds = %x_in_tile-after217
  %320 = mul nuw nsw i32 %309, 1
  %321 = add nuw nsw i32 0, %320
  %322 = mul nuw nsw i32 %308, 8192
  %323 = add nuw nsw i32 %321, %322
  %324 = mul nuw nsw i32 %tile_origin.0173, 8192
  %325 = add nuw nsw i32 %323, %324
  %326 = udiv i32 %325, 1
  %Arg_5.6232 = getelementptr inbounds float, ptr %arg5, i32 %325
  %Arg_5.6233 = load float, ptr %Arg_5.6232, align 4, !invariant.load !197
  %Arg_4.5234 = getelementptr inbounds float, ptr %arg4, i32 %325
  %Arg_4.5235 = load float, ptr %Arg_4.5234, align 4, !invariant.load !197
  %multiply.32236 = fmul float %Arg_5.6233, %Arg_4.5235
  %region_0_89_constant_33237 = load float, ptr @5, align 4
  %Arg_4.5238 = getelementptr inbounds float, ptr %arg4, i32 %325
  %Arg_4.5239 = load float, ptr %Arg_4.5238, align 4, !invariant.load !197
  %subtract.35240 = fsub float %region_0_89_constant_33237, %Arg_4.5239
  %multiply.36241 = fmul float %multiply.32236, %subtract.35240
  store float %multiply.36241, ptr %reduction_input_address164, align 4
  %327 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_38(ptr %327, ptr %reduction_input_address164, ptr %return_buffer242)
  %328 = load float, ptr %return_buffer242, align 4
  store float %328, ptr %327, align 4
  br label %x_in_tile-after231

intra_warp_reduce_write-true259:                  ; preds = %y_in_tile.loop_exit176
  %329 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i32 0, i32 %241, i32 0, i32 %266
  %330 = addrspacecast ptr addrspace(3) %329 to ptr
  %331 = load float, ptr %current_output243, align 4
  store float %331, ptr %330, align 4
  br label %intra_warp_reduce_write-after260

inter_warp_reduce-true261:                        ; preds = %intra_warp_reduce_write-after260
  %332 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache8, i32 0, i32 %241, i32 0, i32 %lane_id170
  %333 = addrspacecast ptr addrspace(3) %332 to ptr
  store float %region_0_89_constant_19166, ptr %initial_value_addr263, align 4
  %334 = icmp ult i32 %thread_id.x168, 16
  %335 = select i1 %334, ptr %333, ptr %initial_value_addr263
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_3_38(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_3_38(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_3_38(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_3_38(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_3_38(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp eq i32 %thread_id.x168, 0
  br i1 %346, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %inter_warp_reduce-true261
  br label %inter_warp_reduce-after262

reduction_write_output-true279:                   ; preds = %inter_warp_reduce-true261
  %347 = mul i32 %thread_id.x168, 2
  %348 = add i32 %tile_origin.1174, %thread_id.y169
  %349 = add i32 %tile_origin.2175, %347
  %350 = add i32 %349, 0
  %output281 = load float, ptr %335, align 4
  store float %output281, ptr %arg18, align 4
  br label %reduction_write_output-after280

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %region_0_89_constant_19284 = load float, ptr @4, align 4
  %351 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  store float %region_0_89_constant_19284, ptr %351, align 4
  %352 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %353 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %354 = urem i32 %352, 512
  %355 = udiv i32 %352, 512
  %356 = mul i32 %353, 1
  %357 = add i32 %356, %355
  %358 = icmp ult i32 %357, 1
  br i1 %358, label %359, label %early_return285

359:                                              ; preds = %reduce-group-3-true
  %thread_id.x286 = urem i32 %354, 512
  %thread_id.y287 = udiv i32 %354, 512
  %lane_id288 = urem i32 %354, 32
  %360 = udiv i32 %357, 1
  %361 = urem i32 %360, 1
  %362 = udiv i32 %357, 1
  %363 = urem i32 %362, 1
  %364 = udiv i32 %357, 1
  %365 = icmp eq i32 %363, 0
  %tile_bound289 = select i1 %365, i32 1, i32 1
  %366 = icmp eq i32 %361, 0
  %tile_bound290 = select i1 %366, i32 8192, i32 8192
  %tile_origin.0291 = mul i32 %364, 1
  %tile_origin.1292 = mul i32 %363, 1
  %tile_origin.2293 = mul i32 %361, 8192
  store i32 %thread_id.y287, ptr %y_in_tile.invar_address297, align 4
  br label %y_in_tile.loop_header295

y_in_tile.loop_header295:                         ; preds = %is_full_tile-after302, %359
  %y_in_tile.indvar298 = load i32, ptr %y_in_tile.invar_address297, align 4
  %367 = icmp uge i32 %y_in_tile.indvar298, %tile_bound289
  br i1 %367, label %y_in_tile.loop_exit294, label %y_in_tile.loop_body296

y_in_tile.loop_body296:                           ; preds = %y_in_tile.loop_header295
  %invar.inc299 = add nuw nsw i32 %y_in_tile.indvar298, 1
  store i32 %invar.inc299, ptr %y_in_tile.invar_address297, align 4
  %368 = icmp eq i32 %y_in_tile.indvar298, %thread_id.y287
  %369 = icmp eq i32 8192, %tile_bound290
  br i1 %369, label %is_full_tile-true300, label %is_full_tile-false301

is_full_tile-after302:                            ; preds = %tile_loop.loop_exit328, %tile_loop.loop_exit303
  br label %y_in_tile.loop_header295, !llvm.loop !227

y_in_tile.loop_exit294:                           ; preds = %y_in_tile.loop_header295
  %current_output362 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  %partial_reduction_result364 = load float, ptr %current_output362, align 4
  %370 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result364, i32 16, i32 31)
  store float %370, ptr %result_from_other_lane363, align 4
  call void @region_4_47(ptr %current_output362, ptr %result_from_other_lane363, ptr %return_buffer365)
  %371 = load float, ptr %return_buffer365, align 4
  store float %371, ptr %current_output362, align 4
  %partial_reduction_result367 = load float, ptr %current_output362, align 4
  %372 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result367, i32 8, i32 31)
  store float %372, ptr %result_from_other_lane366, align 4
  call void @region_4_47(ptr %current_output362, ptr %result_from_other_lane366, ptr %return_buffer368)
  %373 = load float, ptr %return_buffer368, align 4
  store float %373, ptr %current_output362, align 4
  %partial_reduction_result370 = load float, ptr %current_output362, align 4
  %374 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result370, i32 4, i32 31)
  store float %374, ptr %result_from_other_lane369, align 4
  call void @region_4_47(ptr %current_output362, ptr %result_from_other_lane369, ptr %return_buffer371)
  %375 = load float, ptr %return_buffer371, align 4
  store float %375, ptr %current_output362, align 4
  %partial_reduction_result373 = load float, ptr %current_output362, align 4
  %376 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result373, i32 2, i32 31)
  store float %376, ptr %result_from_other_lane372, align 4
  call void @region_4_47(ptr %current_output362, ptr %result_from_other_lane372, ptr %return_buffer374)
  %377 = load float, ptr %return_buffer374, align 4
  store float %377, ptr %current_output362, align 4
  %partial_reduction_result376 = load float, ptr %current_output362, align 4
  %378 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result376, i32 1, i32 31)
  store float %378, ptr %result_from_other_lane375, align 4
  call void @region_4_47(ptr %current_output362, ptr %result_from_other_lane375, ptr %return_buffer377)
  %379 = load float, ptr %return_buffer377, align 4
  store float %379, ptr %current_output362, align 4
  %380 = udiv i32 %thread_id.x286, 32
  %381 = icmp eq i32 %lane_id288, 0
  br i1 %381, label %intra_warp_reduce_write-true378, label %intra_warp_reduce_write-after379

intra_warp_reduce_write-after379:                 ; preds = %intra_warp_reduce_write-true378, %y_in_tile.loop_exit294
  call void @llvm.nvvm.barrier0()
  %382 = icmp eq i32 %380, 0
  br i1 %382, label %inter_warp_reduce-true380, label %inter_warp_reduce-after381

inter_warp_reduce-after381:                       ; preds = %reduction_write_output-after399, %intra_warp_reduce_write-after379
  br label %reduce-group-3-after

early_return285:                                  ; preds = %reduce-group-3-true
  ret void

is_full_tile-true300:                             ; preds = %y_in_tile.loop_body296
  %383 = mul i32 %thread_id.x286, 2
  store i32 0, ptr %tile_loop.invar_address306, align 4
  br label %tile_loop.loop_header304

tile_loop.loop_header304:                         ; preds = %tile_loop.loop_body305, %is_full_tile-true300
  %tile_loop.indvar307 = load i32, ptr %tile_loop.invar_address306, align 4
  %384 = icmp uge i32 %tile_loop.indvar307, 8
  br i1 %384, label %tile_loop.loop_exit303, label %tile_loop.loop_body305

tile_loop.loop_body305:                           ; preds = %tile_loop.loop_header304
  %invar.inc308 = add nuw nsw i32 %tile_loop.indvar307, 1
  store i32 %invar.inc308, ptr %tile_loop.invar_address306, align 4
  %385 = icmp eq i32 %tile_loop.indvar307, 0
  %386 = mul i32 %tile_loop.indvar307, 1024
  %387 = add i32 %386, 0
  %x_loc309 = add i32 %387, %383
  %388 = add i32 %tile_origin.1292, %y_in_tile.indvar298
  %389 = add i32 %tile_origin.2293, %x_loc309
  %390 = mul nuw nsw i32 %389, 1
  %391 = add nuw nsw i32 0, %390
  %392 = mul nuw nsw i32 %388, 8192
  %393 = add nuw nsw i32 %391, %392
  %394 = mul nuw nsw i32 %tile_origin.0291, 8192
  %395 = add nuw nsw i32 %393, %394
  %396 = udiv i32 %395, 1
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %395
  %Arg_7.8310 = load float, ptr %Arg_7.8, align 4, !invariant.load !197
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %395
  %Arg_6.7311 = load float, ptr %Arg_6.7, align 4, !invariant.load !197
  %multiply.43 = fmul float %Arg_7.8310, %Arg_6.7311
  %region_0_89_constant_33312 = load float, ptr @5, align 4
  %Arg_6.7313 = getelementptr inbounds float, ptr %arg6, i32 %395
  %Arg_6.7314 = load float, ptr %Arg_6.7313, align 4, !invariant.load !197
  %subtract.44 = fsub float %region_0_89_constant_33312, %Arg_6.7314
  %multiply.45 = fmul float %multiply.43, %subtract.44
  store float %multiply.45, ptr %reduction_input_address282, align 4
  %397 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  call void @region_4_47(ptr %397, ptr %reduction_input_address282, ptr %return_buffer315)
  %398 = load float, ptr %return_buffer315, align 4
  store float %398, ptr %397, align 4
  %399 = mul i32 %tile_loop.indvar307, 1024
  %400 = add i32 %399, 1
  %x_loc316 = add i32 %400, %383
  %401 = add i32 %tile_origin.1292, %y_in_tile.indvar298
  %402 = add i32 %tile_origin.2293, %x_loc316
  %403 = mul nuw nsw i32 %402, 1
  %404 = add nuw nsw i32 0, %403
  %405 = mul nuw nsw i32 %401, 8192
  %406 = add nuw nsw i32 %404, %405
  %407 = mul nuw nsw i32 %tile_origin.0291, 8192
  %408 = add nuw nsw i32 %406, %407
  %409 = udiv i32 %408, 1
  %Arg_7.8317 = getelementptr inbounds float, ptr %arg7, i32 %408
  %Arg_7.8318 = load float, ptr %Arg_7.8317, align 4, !invariant.load !197
  %Arg_6.7319 = getelementptr inbounds float, ptr %arg6, i32 %408
  %Arg_6.7320 = load float, ptr %Arg_6.7319, align 4, !invariant.load !197
  %multiply.43321 = fmul float %Arg_7.8318, %Arg_6.7320
  %region_0_89_constant_33322 = load float, ptr @5, align 4
  %Arg_6.7323 = getelementptr inbounds float, ptr %arg6, i32 %408
  %Arg_6.7324 = load float, ptr %Arg_6.7323, align 4, !invariant.load !197
  %subtract.44325 = fsub float %region_0_89_constant_33322, %Arg_6.7324
  %multiply.45326 = fmul float %multiply.43321, %subtract.44325
  store float %multiply.45326, ptr %reduction_input_address282, align 4
  %410 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  call void @region_4_47(ptr %410, ptr %reduction_input_address282, ptr %return_buffer327)
  %411 = load float, ptr %return_buffer327, align 4
  store float %411, ptr %410, align 4
  br label %tile_loop.loop_header304, !llvm.loop !228

tile_loop.loop_exit303:                           ; preds = %tile_loop.loop_header304
  br label %is_full_tile-after302

is_full_tile-false301:                            ; preds = %y_in_tile.loop_body296
  %412 = mul i32 %thread_id.x286, 2
  store i32 0, ptr %tile_loop.invar_address331, align 4
  br label %tile_loop.loop_header329

tile_loop.loop_header329:                         ; preds = %x_in_tile-after350, %is_full_tile-false301
  %tile_loop.indvar332 = load i32, ptr %tile_loop.invar_address331, align 4
  %413 = icmp uge i32 %tile_loop.indvar332, 8
  br i1 %413, label %tile_loop.loop_exit328, label %tile_loop.loop_body330

tile_loop.loop_body330:                           ; preds = %tile_loop.loop_header329
  %invar.inc333 = add nuw nsw i32 %tile_loop.indvar332, 1
  store i32 %invar.inc333, ptr %tile_loop.invar_address331, align 4
  %414 = icmp eq i32 %tile_loop.indvar332, 0
  %415 = mul i32 %tile_loop.indvar332, 1024
  %416 = add i32 %415, 0
  %x_loc334 = add i32 %416, %412
  %417 = add i32 %tile_origin.1292, %y_in_tile.indvar298
  %418 = add i32 %tile_origin.2293, %x_loc334
  %419 = icmp ult i32 %x_loc334, %tile_bound290
  br i1 %419, label %x_in_tile-true335, label %x_in_tile-after336

x_in_tile-after336:                               ; preds = %x_in_tile-true335, %tile_loop.loop_body330
  %420 = mul i32 %tile_loop.indvar332, 1024
  %421 = add i32 %420, 1
  %x_loc348 = add i32 %421, %412
  %422 = add i32 %tile_origin.1292, %y_in_tile.indvar298
  %423 = add i32 %tile_origin.2293, %x_loc348
  %424 = icmp ult i32 %x_loc348, %tile_bound290
  br i1 %424, label %x_in_tile-true349, label %x_in_tile-after350

x_in_tile-after350:                               ; preds = %x_in_tile-true349, %x_in_tile-after336
  br label %tile_loop.loop_header329, !llvm.loop !229

tile_loop.loop_exit328:                           ; preds = %tile_loop.loop_header329
  br label %is_full_tile-after302

x_in_tile-true335:                                ; preds = %tile_loop.loop_body330
  %425 = mul nuw nsw i32 %418, 1
  %426 = add nuw nsw i32 0, %425
  %427 = mul nuw nsw i32 %417, 8192
  %428 = add nuw nsw i32 %426, %427
  %429 = mul nuw nsw i32 %tile_origin.0291, 8192
  %430 = add nuw nsw i32 %428, %429
  %431 = udiv i32 %430, 1
  %Arg_7.8337 = getelementptr inbounds float, ptr %arg7, i32 %430
  %Arg_7.8338 = load float, ptr %Arg_7.8337, align 4, !invariant.load !197
  %Arg_6.7339 = getelementptr inbounds float, ptr %arg6, i32 %430
  %Arg_6.7340 = load float, ptr %Arg_6.7339, align 4, !invariant.load !197
  %multiply.43341 = fmul float %Arg_7.8338, %Arg_6.7340
  %region_0_89_constant_33342 = load float, ptr @5, align 4
  %Arg_6.7343 = getelementptr inbounds float, ptr %arg6, i32 %430
  %Arg_6.7344 = load float, ptr %Arg_6.7343, align 4, !invariant.load !197
  %subtract.44345 = fsub float %region_0_89_constant_33342, %Arg_6.7344
  %multiply.45346 = fmul float %multiply.43341, %subtract.44345
  store float %multiply.45346, ptr %reduction_input_address282, align 4
  %432 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  call void @region_4_47(ptr %432, ptr %reduction_input_address282, ptr %return_buffer347)
  %433 = load float, ptr %return_buffer347, align 4
  store float %433, ptr %432, align 4
  br label %x_in_tile-after336

x_in_tile-true349:                                ; preds = %x_in_tile-after336
  %434 = mul nuw nsw i32 %423, 1
  %435 = add nuw nsw i32 0, %434
  %436 = mul nuw nsw i32 %422, 8192
  %437 = add nuw nsw i32 %435, %436
  %438 = mul nuw nsw i32 %tile_origin.0291, 8192
  %439 = add nuw nsw i32 %437, %438
  %440 = udiv i32 %439, 1
  %Arg_7.8351 = getelementptr inbounds float, ptr %arg7, i32 %439
  %Arg_7.8352 = load float, ptr %Arg_7.8351, align 4, !invariant.load !197
  %Arg_6.7353 = getelementptr inbounds float, ptr %arg6, i32 %439
  %Arg_6.7354 = load float, ptr %Arg_6.7353, align 4, !invariant.load !197
  %multiply.43355 = fmul float %Arg_7.8352, %Arg_6.7354
  %region_0_89_constant_33356 = load float, ptr @5, align 4
  %Arg_6.7357 = getelementptr inbounds float, ptr %arg6, i32 %439
  %Arg_6.7358 = load float, ptr %Arg_6.7357, align 4, !invariant.load !197
  %subtract.44359 = fsub float %region_0_89_constant_33356, %Arg_6.7358
  %multiply.45360 = fmul float %multiply.43355, %subtract.44359
  store float %multiply.45360, ptr %reduction_input_address282, align 4
  %441 = getelementptr inbounds float, ptr %partial_reduction_result283, i32 0
  call void @region_4_47(ptr %441, ptr %reduction_input_address282, ptr %return_buffer361)
  %442 = load float, ptr %return_buffer361, align 4
  store float %442, ptr %441, align 4
  br label %x_in_tile-after350

intra_warp_reduce_write-true378:                  ; preds = %y_in_tile.loop_exit294
  %443 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i32 0, i32 %355, i32 0, i32 %380
  %444 = addrspacecast ptr addrspace(3) %443 to ptr
  %445 = load float, ptr %current_output362, align 4
  store float %445, ptr %444, align 4
  br label %intra_warp_reduce_write-after379

inter_warp_reduce-true380:                        ; preds = %intra_warp_reduce_write-after379
  %446 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache9, i32 0, i32 %355, i32 0, i32 %lane_id288
  %447 = addrspacecast ptr addrspace(3) %446 to ptr
  store float %region_0_89_constant_19284, ptr %initial_value_addr382, align 4
  %448 = icmp ult i32 %thread_id.x286, 16
  %449 = select i1 %448, ptr %447, ptr %initial_value_addr382
  %partial_reduction_result384 = load float, ptr %449, align 4
  %450 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result384, i32 16, i32 31)
  store float %450, ptr %result_from_other_lane383, align 4
  call void @region_4_47(ptr %449, ptr %result_from_other_lane383, ptr %return_buffer385)
  %451 = load float, ptr %return_buffer385, align 4
  store float %451, ptr %449, align 4
  %partial_reduction_result387 = load float, ptr %449, align 4
  %452 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result387, i32 8, i32 31)
  store float %452, ptr %result_from_other_lane386, align 4
  call void @region_4_47(ptr %449, ptr %result_from_other_lane386, ptr %return_buffer388)
  %453 = load float, ptr %return_buffer388, align 4
  store float %453, ptr %449, align 4
  %partial_reduction_result390 = load float, ptr %449, align 4
  %454 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result390, i32 4, i32 31)
  store float %454, ptr %result_from_other_lane389, align 4
  call void @region_4_47(ptr %449, ptr %result_from_other_lane389, ptr %return_buffer391)
  %455 = load float, ptr %return_buffer391, align 4
  store float %455, ptr %449, align 4
  %partial_reduction_result393 = load float, ptr %449, align 4
  %456 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result393, i32 2, i32 31)
  store float %456, ptr %result_from_other_lane392, align 4
  call void @region_4_47(ptr %449, ptr %result_from_other_lane392, ptr %return_buffer394)
  %457 = load float, ptr %return_buffer394, align 4
  store float %457, ptr %449, align 4
  %partial_reduction_result396 = load float, ptr %449, align 4
  %458 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result396, i32 1, i32 31)
  store float %458, ptr %result_from_other_lane395, align 4
  call void @region_4_47(ptr %449, ptr %result_from_other_lane395, ptr %return_buffer397)
  %459 = load float, ptr %return_buffer397, align 4
  store float %459, ptr %449, align 4
  %460 = icmp eq i32 %thread_id.x286, 0
  br i1 %460, label %reduction_write_output-true398, label %reduction_write_output-after399

reduction_write_output-after399:                  ; preds = %reduction_write_output-true398, %inter_warp_reduce-true380
  br label %inter_warp_reduce-after381

reduction_write_output-true398:                   ; preds = %inter_warp_reduce-true380
  %461 = mul i32 %thread_id.x286, 2
  %462 = add i32 %tile_origin.1292, %thread_id.y287
  %463 = add i32 %tile_origin.2293, %461
  %464 = add i32 %463, 0
  %output400 = load float, ptr %449, align 4
  store float %output400, ptr %arg19, align 4
  br label %reduction_write_output-after399

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %region_0_89_constant_19403 = load float, ptr @4, align 4
  %465 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  store float %region_0_89_constant_19403, ptr %465, align 4
  %466 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %467 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %468 = urem i32 %466, 512
  %469 = udiv i32 %466, 512
  %470 = mul i32 %467, 1
  %471 = add i32 %470, %469
  %472 = icmp ult i32 %471, 1
  br i1 %472, label %473, label %early_return404

473:                                              ; preds = %reduce-group-4-true
  %thread_id.x405 = urem i32 %468, 512
  %thread_id.y406 = udiv i32 %468, 512
  %lane_id407 = urem i32 %468, 32
  %474 = udiv i32 %471, 1
  %475 = urem i32 %474, 1
  %476 = udiv i32 %471, 1
  %477 = urem i32 %476, 1
  %478 = udiv i32 %471, 1
  %479 = icmp eq i32 %477, 0
  %tile_bound408 = select i1 %479, i32 1, i32 1
  %480 = icmp eq i32 %475, 0
  %tile_bound409 = select i1 %480, i32 8192, i32 8192
  %tile_origin.0410 = mul i32 %478, 1
  %tile_origin.1411 = mul i32 %477, 1
  %tile_origin.2412 = mul i32 %475, 8192
  store i32 %thread_id.y406, ptr %y_in_tile.invar_address416, align 4
  br label %y_in_tile.loop_header414

y_in_tile.loop_header414:                         ; preds = %is_full_tile-after421, %473
  %y_in_tile.indvar417 = load i32, ptr %y_in_tile.invar_address416, align 4
  %481 = icmp uge i32 %y_in_tile.indvar417, %tile_bound408
  br i1 %481, label %y_in_tile.loop_exit413, label %y_in_tile.loop_body415

y_in_tile.loop_body415:                           ; preds = %y_in_tile.loop_header414
  %invar.inc418 = add nuw nsw i32 %y_in_tile.indvar417, 1
  store i32 %invar.inc418, ptr %y_in_tile.invar_address416, align 4
  %482 = icmp eq i32 %y_in_tile.indvar417, %thread_id.y406
  %483 = icmp eq i32 8192, %tile_bound409
  br i1 %483, label %is_full_tile-true419, label %is_full_tile-false420

is_full_tile-after421:                            ; preds = %tile_loop.loop_exit447, %tile_loop.loop_exit422
  br label %y_in_tile.loop_header414, !llvm.loop !230

y_in_tile.loop_exit413:                           ; preds = %y_in_tile.loop_header414
  %current_output481 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  %partial_reduction_result483 = load float, ptr %current_output481, align 4
  %484 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result483, i32 16, i32 31)
  store float %484, ptr %result_from_other_lane482, align 4
  call void @region_5_56(ptr %current_output481, ptr %result_from_other_lane482, ptr %return_buffer484)
  %485 = load float, ptr %return_buffer484, align 4
  store float %485, ptr %current_output481, align 4
  %partial_reduction_result486 = load float, ptr %current_output481, align 4
  %486 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result486, i32 8, i32 31)
  store float %486, ptr %result_from_other_lane485, align 4
  call void @region_5_56(ptr %current_output481, ptr %result_from_other_lane485, ptr %return_buffer487)
  %487 = load float, ptr %return_buffer487, align 4
  store float %487, ptr %current_output481, align 4
  %partial_reduction_result489 = load float, ptr %current_output481, align 4
  %488 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result489, i32 4, i32 31)
  store float %488, ptr %result_from_other_lane488, align 4
  call void @region_5_56(ptr %current_output481, ptr %result_from_other_lane488, ptr %return_buffer490)
  %489 = load float, ptr %return_buffer490, align 4
  store float %489, ptr %current_output481, align 4
  %partial_reduction_result492 = load float, ptr %current_output481, align 4
  %490 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result492, i32 2, i32 31)
  store float %490, ptr %result_from_other_lane491, align 4
  call void @region_5_56(ptr %current_output481, ptr %result_from_other_lane491, ptr %return_buffer493)
  %491 = load float, ptr %return_buffer493, align 4
  store float %491, ptr %current_output481, align 4
  %partial_reduction_result495 = load float, ptr %current_output481, align 4
  %492 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result495, i32 1, i32 31)
  store float %492, ptr %result_from_other_lane494, align 4
  call void @region_5_56(ptr %current_output481, ptr %result_from_other_lane494, ptr %return_buffer496)
  %493 = load float, ptr %return_buffer496, align 4
  store float %493, ptr %current_output481, align 4
  %494 = udiv i32 %thread_id.x405, 32
  %495 = icmp eq i32 %lane_id407, 0
  br i1 %495, label %intra_warp_reduce_write-true497, label %intra_warp_reduce_write-after498

intra_warp_reduce_write-after498:                 ; preds = %intra_warp_reduce_write-true497, %y_in_tile.loop_exit413
  call void @llvm.nvvm.barrier0()
  %496 = icmp eq i32 %494, 0
  br i1 %496, label %inter_warp_reduce-true499, label %inter_warp_reduce-after500

inter_warp_reduce-after500:                       ; preds = %reduction_write_output-after518, %intra_warp_reduce_write-after498
  br label %reduce-group-4-after

early_return404:                                  ; preds = %reduce-group-4-true
  ret void

is_full_tile-true419:                             ; preds = %y_in_tile.loop_body415
  %497 = mul i32 %thread_id.x405, 2
  store i32 0, ptr %tile_loop.invar_address425, align 4
  br label %tile_loop.loop_header423

tile_loop.loop_header423:                         ; preds = %tile_loop.loop_body424, %is_full_tile-true419
  %tile_loop.indvar426 = load i32, ptr %tile_loop.invar_address425, align 4
  %498 = icmp uge i32 %tile_loop.indvar426, 8
  br i1 %498, label %tile_loop.loop_exit422, label %tile_loop.loop_body424

tile_loop.loop_body424:                           ; preds = %tile_loop.loop_header423
  %invar.inc427 = add nuw nsw i32 %tile_loop.indvar426, 1
  store i32 %invar.inc427, ptr %tile_loop.invar_address425, align 4
  %499 = icmp eq i32 %tile_loop.indvar426, 0
  %500 = mul i32 %tile_loop.indvar426, 1024
  %501 = add i32 %500, 0
  %x_loc428 = add i32 %501, %497
  %502 = add i32 %tile_origin.1411, %y_in_tile.indvar417
  %503 = add i32 %tile_origin.2412, %x_loc428
  %504 = mul nuw nsw i32 %503, 1
  %505 = add nuw nsw i32 0, %504
  %506 = mul nuw nsw i32 %502, 8192
  %507 = add nuw nsw i32 %505, %506
  %508 = mul nuw nsw i32 %tile_origin.0410, 8192
  %509 = add nuw nsw i32 %507, %508
  %510 = udiv i32 %509, 1
  %Arg_9.10 = getelementptr inbounds float, ptr %arg9, i32 %509
  %Arg_9.10429 = load float, ptr %Arg_9.10, align 4, !invariant.load !197
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %509
  %Arg_8.9430 = load float, ptr %Arg_8.9, align 4, !invariant.load !197
  %multiply.52 = fmul float %Arg_9.10429, %Arg_8.9430
  %region_0_89_constant_33431 = load float, ptr @5, align 4
  %Arg_8.9432 = getelementptr inbounds float, ptr %arg8, i32 %509
  %Arg_8.9433 = load float, ptr %Arg_8.9432, align 4, !invariant.load !197
  %subtract.53 = fsub float %region_0_89_constant_33431, %Arg_8.9433
  %multiply.54 = fmul float %multiply.52, %subtract.53
  store float %multiply.54, ptr %reduction_input_address401, align 4
  %511 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  call void @region_5_56(ptr %511, ptr %reduction_input_address401, ptr %return_buffer434)
  %512 = load float, ptr %return_buffer434, align 4
  store float %512, ptr %511, align 4
  %513 = mul i32 %tile_loop.indvar426, 1024
  %514 = add i32 %513, 1
  %x_loc435 = add i32 %514, %497
  %515 = add i32 %tile_origin.1411, %y_in_tile.indvar417
  %516 = add i32 %tile_origin.2412, %x_loc435
  %517 = mul nuw nsw i32 %516, 1
  %518 = add nuw nsw i32 0, %517
  %519 = mul nuw nsw i32 %515, 8192
  %520 = add nuw nsw i32 %518, %519
  %521 = mul nuw nsw i32 %tile_origin.0410, 8192
  %522 = add nuw nsw i32 %520, %521
  %523 = udiv i32 %522, 1
  %Arg_9.10436 = getelementptr inbounds float, ptr %arg9, i32 %522
  %Arg_9.10437 = load float, ptr %Arg_9.10436, align 4, !invariant.load !197
  %Arg_8.9438 = getelementptr inbounds float, ptr %arg8, i32 %522
  %Arg_8.9439 = load float, ptr %Arg_8.9438, align 4, !invariant.load !197
  %multiply.52440 = fmul float %Arg_9.10437, %Arg_8.9439
  %region_0_89_constant_33441 = load float, ptr @5, align 4
  %Arg_8.9442 = getelementptr inbounds float, ptr %arg8, i32 %522
  %Arg_8.9443 = load float, ptr %Arg_8.9442, align 4, !invariant.load !197
  %subtract.53444 = fsub float %region_0_89_constant_33441, %Arg_8.9443
  %multiply.54445 = fmul float %multiply.52440, %subtract.53444
  store float %multiply.54445, ptr %reduction_input_address401, align 4
  %524 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  call void @region_5_56(ptr %524, ptr %reduction_input_address401, ptr %return_buffer446)
  %525 = load float, ptr %return_buffer446, align 4
  store float %525, ptr %524, align 4
  br label %tile_loop.loop_header423, !llvm.loop !231

tile_loop.loop_exit422:                           ; preds = %tile_loop.loop_header423
  br label %is_full_tile-after421

is_full_tile-false420:                            ; preds = %y_in_tile.loop_body415
  %526 = mul i32 %thread_id.x405, 2
  store i32 0, ptr %tile_loop.invar_address450, align 4
  br label %tile_loop.loop_header448

tile_loop.loop_header448:                         ; preds = %x_in_tile-after469, %is_full_tile-false420
  %tile_loop.indvar451 = load i32, ptr %tile_loop.invar_address450, align 4
  %527 = icmp uge i32 %tile_loop.indvar451, 8
  br i1 %527, label %tile_loop.loop_exit447, label %tile_loop.loop_body449

tile_loop.loop_body449:                           ; preds = %tile_loop.loop_header448
  %invar.inc452 = add nuw nsw i32 %tile_loop.indvar451, 1
  store i32 %invar.inc452, ptr %tile_loop.invar_address450, align 4
  %528 = icmp eq i32 %tile_loop.indvar451, 0
  %529 = mul i32 %tile_loop.indvar451, 1024
  %530 = add i32 %529, 0
  %x_loc453 = add i32 %530, %526
  %531 = add i32 %tile_origin.1411, %y_in_tile.indvar417
  %532 = add i32 %tile_origin.2412, %x_loc453
  %533 = icmp ult i32 %x_loc453, %tile_bound409
  br i1 %533, label %x_in_tile-true454, label %x_in_tile-after455

x_in_tile-after455:                               ; preds = %x_in_tile-true454, %tile_loop.loop_body449
  %534 = mul i32 %tile_loop.indvar451, 1024
  %535 = add i32 %534, 1
  %x_loc467 = add i32 %535, %526
  %536 = add i32 %tile_origin.1411, %y_in_tile.indvar417
  %537 = add i32 %tile_origin.2412, %x_loc467
  %538 = icmp ult i32 %x_loc467, %tile_bound409
  br i1 %538, label %x_in_tile-true468, label %x_in_tile-after469

x_in_tile-after469:                               ; preds = %x_in_tile-true468, %x_in_tile-after455
  br label %tile_loop.loop_header448, !llvm.loop !232

tile_loop.loop_exit447:                           ; preds = %tile_loop.loop_header448
  br label %is_full_tile-after421

x_in_tile-true454:                                ; preds = %tile_loop.loop_body449
  %539 = mul nuw nsw i32 %532, 1
  %540 = add nuw nsw i32 0, %539
  %541 = mul nuw nsw i32 %531, 8192
  %542 = add nuw nsw i32 %540, %541
  %543 = mul nuw nsw i32 %tile_origin.0410, 8192
  %544 = add nuw nsw i32 %542, %543
  %545 = udiv i32 %544, 1
  %Arg_9.10456 = getelementptr inbounds float, ptr %arg9, i32 %544
  %Arg_9.10457 = load float, ptr %Arg_9.10456, align 4, !invariant.load !197
  %Arg_8.9458 = getelementptr inbounds float, ptr %arg8, i32 %544
  %Arg_8.9459 = load float, ptr %Arg_8.9458, align 4, !invariant.load !197
  %multiply.52460 = fmul float %Arg_9.10457, %Arg_8.9459
  %region_0_89_constant_33461 = load float, ptr @5, align 4
  %Arg_8.9462 = getelementptr inbounds float, ptr %arg8, i32 %544
  %Arg_8.9463 = load float, ptr %Arg_8.9462, align 4, !invariant.load !197
  %subtract.53464 = fsub float %region_0_89_constant_33461, %Arg_8.9463
  %multiply.54465 = fmul float %multiply.52460, %subtract.53464
  store float %multiply.54465, ptr %reduction_input_address401, align 4
  %546 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  call void @region_5_56(ptr %546, ptr %reduction_input_address401, ptr %return_buffer466)
  %547 = load float, ptr %return_buffer466, align 4
  store float %547, ptr %546, align 4
  br label %x_in_tile-after455

x_in_tile-true468:                                ; preds = %x_in_tile-after455
  %548 = mul nuw nsw i32 %537, 1
  %549 = add nuw nsw i32 0, %548
  %550 = mul nuw nsw i32 %536, 8192
  %551 = add nuw nsw i32 %549, %550
  %552 = mul nuw nsw i32 %tile_origin.0410, 8192
  %553 = add nuw nsw i32 %551, %552
  %554 = udiv i32 %553, 1
  %Arg_9.10470 = getelementptr inbounds float, ptr %arg9, i32 %553
  %Arg_9.10471 = load float, ptr %Arg_9.10470, align 4, !invariant.load !197
  %Arg_8.9472 = getelementptr inbounds float, ptr %arg8, i32 %553
  %Arg_8.9473 = load float, ptr %Arg_8.9472, align 4, !invariant.load !197
  %multiply.52474 = fmul float %Arg_9.10471, %Arg_8.9473
  %region_0_89_constant_33475 = load float, ptr @5, align 4
  %Arg_8.9476 = getelementptr inbounds float, ptr %arg8, i32 %553
  %Arg_8.9477 = load float, ptr %Arg_8.9476, align 4, !invariant.load !197
  %subtract.53478 = fsub float %region_0_89_constant_33475, %Arg_8.9477
  %multiply.54479 = fmul float %multiply.52474, %subtract.53478
  store float %multiply.54479, ptr %reduction_input_address401, align 4
  %555 = getelementptr inbounds float, ptr %partial_reduction_result402, i32 0
  call void @region_5_56(ptr %555, ptr %reduction_input_address401, ptr %return_buffer480)
  %556 = load float, ptr %return_buffer480, align 4
  store float %556, ptr %555, align 4
  br label %x_in_tile-after469

intra_warp_reduce_write-true497:                  ; preds = %y_in_tile.loop_exit413
  %557 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i32 0, i32 %469, i32 0, i32 %494
  %558 = addrspacecast ptr addrspace(3) %557 to ptr
  %559 = load float, ptr %current_output481, align 4
  store float %559, ptr %558, align 4
  br label %intra_warp_reduce_write-after498

inter_warp_reduce-true499:                        ; preds = %intra_warp_reduce_write-after498
  %560 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache10, i32 0, i32 %469, i32 0, i32 %lane_id407
  %561 = addrspacecast ptr addrspace(3) %560 to ptr
  store float %region_0_89_constant_19403, ptr %initial_value_addr501, align 4
  %562 = icmp ult i32 %thread_id.x405, 16
  %563 = select i1 %562, ptr %561, ptr %initial_value_addr501
  %partial_reduction_result503 = load float, ptr %563, align 4
  %564 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result503, i32 16, i32 31)
  store float %564, ptr %result_from_other_lane502, align 4
  call void @region_5_56(ptr %563, ptr %result_from_other_lane502, ptr %return_buffer504)
  %565 = load float, ptr %return_buffer504, align 4
  store float %565, ptr %563, align 4
  %partial_reduction_result506 = load float, ptr %563, align 4
  %566 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result506, i32 8, i32 31)
  store float %566, ptr %result_from_other_lane505, align 4
  call void @region_5_56(ptr %563, ptr %result_from_other_lane505, ptr %return_buffer507)
  %567 = load float, ptr %return_buffer507, align 4
  store float %567, ptr %563, align 4
  %partial_reduction_result509 = load float, ptr %563, align 4
  %568 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result509, i32 4, i32 31)
  store float %568, ptr %result_from_other_lane508, align 4
  call void @region_5_56(ptr %563, ptr %result_from_other_lane508, ptr %return_buffer510)
  %569 = load float, ptr %return_buffer510, align 4
  store float %569, ptr %563, align 4
  %partial_reduction_result512 = load float, ptr %563, align 4
  %570 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result512, i32 2, i32 31)
  store float %570, ptr %result_from_other_lane511, align 4
  call void @region_5_56(ptr %563, ptr %result_from_other_lane511, ptr %return_buffer513)
  %571 = load float, ptr %return_buffer513, align 4
  store float %571, ptr %563, align 4
  %partial_reduction_result515 = load float, ptr %563, align 4
  %572 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result515, i32 1, i32 31)
  store float %572, ptr %result_from_other_lane514, align 4
  call void @region_5_56(ptr %563, ptr %result_from_other_lane514, ptr %return_buffer516)
  %573 = load float, ptr %return_buffer516, align 4
  store float %573, ptr %563, align 4
  %574 = icmp eq i32 %thread_id.x405, 0
  br i1 %574, label %reduction_write_output-true517, label %reduction_write_output-after518

reduction_write_output-after518:                  ; preds = %reduction_write_output-true517, %inter_warp_reduce-true499
  br label %inter_warp_reduce-after500

reduction_write_output-true517:                   ; preds = %inter_warp_reduce-true499
  %575 = mul i32 %thread_id.x405, 2
  %576 = add i32 %tile_origin.1411, %thread_id.y406
  %577 = add i32 %tile_origin.2412, %575
  %578 = add i32 %577, 0
  %output519 = load float, ptr %563, align 4
  store float %output519, ptr %arg20, align 4
  br label %reduction_write_output-after518

reduce-group-5-true:                              ; preds = %reduce-group-4-after
  %region_0_89_constant_19522 = load float, ptr @4, align 4
  %579 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  store float %region_0_89_constant_19522, ptr %579, align 4
  %580 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %581 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %582 = urem i32 %580, 512
  %583 = udiv i32 %580, 512
  %584 = mul i32 %581, 1
  %585 = add i32 %584, %583
  %586 = icmp ult i32 %585, 1
  br i1 %586, label %587, label %early_return523

587:                                              ; preds = %reduce-group-5-true
  %thread_id.x524 = urem i32 %582, 512
  %thread_id.y525 = udiv i32 %582, 512
  %lane_id526 = urem i32 %582, 32
  %588 = udiv i32 %585, 1
  %589 = urem i32 %588, 1
  %590 = udiv i32 %585, 1
  %591 = urem i32 %590, 1
  %592 = udiv i32 %585, 1
  %593 = icmp eq i32 %591, 0
  %tile_bound527 = select i1 %593, i32 1, i32 1
  %594 = icmp eq i32 %589, 0
  %tile_bound528 = select i1 %594, i32 8192, i32 8192
  %tile_origin.0529 = mul i32 %592, 1
  %tile_origin.1530 = mul i32 %591, 1
  %tile_origin.2531 = mul i32 %589, 8192
  store i32 %thread_id.y525, ptr %y_in_tile.invar_address535, align 4
  br label %y_in_tile.loop_header533

y_in_tile.loop_header533:                         ; preds = %is_full_tile-after540, %587
  %y_in_tile.indvar536 = load i32, ptr %y_in_tile.invar_address535, align 4
  %595 = icmp uge i32 %y_in_tile.indvar536, %tile_bound527
  br i1 %595, label %y_in_tile.loop_exit532, label %y_in_tile.loop_body534

y_in_tile.loop_body534:                           ; preds = %y_in_tile.loop_header533
  %invar.inc537 = add nuw nsw i32 %y_in_tile.indvar536, 1
  store i32 %invar.inc537, ptr %y_in_tile.invar_address535, align 4
  %596 = icmp eq i32 %y_in_tile.indvar536, %thread_id.y525
  %597 = icmp eq i32 8192, %tile_bound528
  br i1 %597, label %is_full_tile-true538, label %is_full_tile-false539

is_full_tile-after540:                            ; preds = %tile_loop.loop_exit566, %tile_loop.loop_exit541
  br label %y_in_tile.loop_header533, !llvm.loop !233

y_in_tile.loop_exit532:                           ; preds = %y_in_tile.loop_header533
  %current_output600 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  %partial_reduction_result602 = load float, ptr %current_output600, align 4
  %598 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result602, i32 16, i32 31)
  store float %598, ptr %result_from_other_lane601, align 4
  call void @region_6_65(ptr %current_output600, ptr %result_from_other_lane601, ptr %return_buffer603)
  %599 = load float, ptr %return_buffer603, align 4
  store float %599, ptr %current_output600, align 4
  %partial_reduction_result605 = load float, ptr %current_output600, align 4
  %600 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result605, i32 8, i32 31)
  store float %600, ptr %result_from_other_lane604, align 4
  call void @region_6_65(ptr %current_output600, ptr %result_from_other_lane604, ptr %return_buffer606)
  %601 = load float, ptr %return_buffer606, align 4
  store float %601, ptr %current_output600, align 4
  %partial_reduction_result608 = load float, ptr %current_output600, align 4
  %602 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result608, i32 4, i32 31)
  store float %602, ptr %result_from_other_lane607, align 4
  call void @region_6_65(ptr %current_output600, ptr %result_from_other_lane607, ptr %return_buffer609)
  %603 = load float, ptr %return_buffer609, align 4
  store float %603, ptr %current_output600, align 4
  %partial_reduction_result611 = load float, ptr %current_output600, align 4
  %604 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result611, i32 2, i32 31)
  store float %604, ptr %result_from_other_lane610, align 4
  call void @region_6_65(ptr %current_output600, ptr %result_from_other_lane610, ptr %return_buffer612)
  %605 = load float, ptr %return_buffer612, align 4
  store float %605, ptr %current_output600, align 4
  %partial_reduction_result614 = load float, ptr %current_output600, align 4
  %606 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result614, i32 1, i32 31)
  store float %606, ptr %result_from_other_lane613, align 4
  call void @region_6_65(ptr %current_output600, ptr %result_from_other_lane613, ptr %return_buffer615)
  %607 = load float, ptr %return_buffer615, align 4
  store float %607, ptr %current_output600, align 4
  %608 = udiv i32 %thread_id.x524, 32
  %609 = icmp eq i32 %lane_id526, 0
  br i1 %609, label %intra_warp_reduce_write-true616, label %intra_warp_reduce_write-after617

intra_warp_reduce_write-after617:                 ; preds = %intra_warp_reduce_write-true616, %y_in_tile.loop_exit532
  call void @llvm.nvvm.barrier0()
  %610 = icmp eq i32 %608, 0
  br i1 %610, label %inter_warp_reduce-true618, label %inter_warp_reduce-after619

inter_warp_reduce-after619:                       ; preds = %reduction_write_output-after637, %intra_warp_reduce_write-after617
  br label %reduce-group-5-after

early_return523:                                  ; preds = %reduce-group-5-true
  ret void

is_full_tile-true538:                             ; preds = %y_in_tile.loop_body534
  %611 = mul i32 %thread_id.x524, 2
  store i32 0, ptr %tile_loop.invar_address544, align 4
  br label %tile_loop.loop_header542

tile_loop.loop_header542:                         ; preds = %tile_loop.loop_body543, %is_full_tile-true538
  %tile_loop.indvar545 = load i32, ptr %tile_loop.invar_address544, align 4
  %612 = icmp uge i32 %tile_loop.indvar545, 8
  br i1 %612, label %tile_loop.loop_exit541, label %tile_loop.loop_body543

tile_loop.loop_body543:                           ; preds = %tile_loop.loop_header542
  %invar.inc546 = add nuw nsw i32 %tile_loop.indvar545, 1
  store i32 %invar.inc546, ptr %tile_loop.invar_address544, align 4
  %613 = icmp eq i32 %tile_loop.indvar545, 0
  %614 = mul i32 %tile_loop.indvar545, 1024
  %615 = add i32 %614, 0
  %x_loc547 = add i32 %615, %611
  %616 = add i32 %tile_origin.1530, %y_in_tile.indvar536
  %617 = add i32 %tile_origin.2531, %x_loc547
  %618 = mul nuw nsw i32 %617, 1
  %619 = add nuw nsw i32 0, %618
  %620 = mul nuw nsw i32 %616, 8192
  %621 = add nuw nsw i32 %619, %620
  %622 = mul nuw nsw i32 %tile_origin.0529, 8192
  %623 = add nuw nsw i32 %621, %622
  %624 = udiv i32 %623, 1
  %Arg_11.12 = getelementptr inbounds float, ptr %arg11, i32 %623
  %Arg_11.12548 = load float, ptr %Arg_11.12, align 4, !invariant.load !197
  %Arg_10.11 = getelementptr inbounds float, ptr %arg10, i32 %623
  %Arg_10.11549 = load float, ptr %Arg_10.11, align 4, !invariant.load !197
  %multiply.61 = fmul float %Arg_11.12548, %Arg_10.11549
  %region_0_89_constant_33550 = load float, ptr @5, align 4
  %Arg_10.11551 = getelementptr inbounds float, ptr %arg10, i32 %623
  %Arg_10.11552 = load float, ptr %Arg_10.11551, align 4, !invariant.load !197
  %subtract.62 = fsub float %region_0_89_constant_33550, %Arg_10.11552
  %multiply.63 = fmul float %multiply.61, %subtract.62
  store float %multiply.63, ptr %reduction_input_address520, align 4
  %625 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  call void @region_6_65(ptr %625, ptr %reduction_input_address520, ptr %return_buffer553)
  %626 = load float, ptr %return_buffer553, align 4
  store float %626, ptr %625, align 4
  %627 = mul i32 %tile_loop.indvar545, 1024
  %628 = add i32 %627, 1
  %x_loc554 = add i32 %628, %611
  %629 = add i32 %tile_origin.1530, %y_in_tile.indvar536
  %630 = add i32 %tile_origin.2531, %x_loc554
  %631 = mul nuw nsw i32 %630, 1
  %632 = add nuw nsw i32 0, %631
  %633 = mul nuw nsw i32 %629, 8192
  %634 = add nuw nsw i32 %632, %633
  %635 = mul nuw nsw i32 %tile_origin.0529, 8192
  %636 = add nuw nsw i32 %634, %635
  %637 = udiv i32 %636, 1
  %Arg_11.12555 = getelementptr inbounds float, ptr %arg11, i32 %636
  %Arg_11.12556 = load float, ptr %Arg_11.12555, align 4, !invariant.load !197
  %Arg_10.11557 = getelementptr inbounds float, ptr %arg10, i32 %636
  %Arg_10.11558 = load float, ptr %Arg_10.11557, align 4, !invariant.load !197
  %multiply.61559 = fmul float %Arg_11.12556, %Arg_10.11558
  %region_0_89_constant_33560 = load float, ptr @5, align 4
  %Arg_10.11561 = getelementptr inbounds float, ptr %arg10, i32 %636
  %Arg_10.11562 = load float, ptr %Arg_10.11561, align 4, !invariant.load !197
  %subtract.62563 = fsub float %region_0_89_constant_33560, %Arg_10.11562
  %multiply.63564 = fmul float %multiply.61559, %subtract.62563
  store float %multiply.63564, ptr %reduction_input_address520, align 4
  %638 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  call void @region_6_65(ptr %638, ptr %reduction_input_address520, ptr %return_buffer565)
  %639 = load float, ptr %return_buffer565, align 4
  store float %639, ptr %638, align 4
  br label %tile_loop.loop_header542, !llvm.loop !234

tile_loop.loop_exit541:                           ; preds = %tile_loop.loop_header542
  br label %is_full_tile-after540

is_full_tile-false539:                            ; preds = %y_in_tile.loop_body534
  %640 = mul i32 %thread_id.x524, 2
  store i32 0, ptr %tile_loop.invar_address569, align 4
  br label %tile_loop.loop_header567

tile_loop.loop_header567:                         ; preds = %x_in_tile-after588, %is_full_tile-false539
  %tile_loop.indvar570 = load i32, ptr %tile_loop.invar_address569, align 4
  %641 = icmp uge i32 %tile_loop.indvar570, 8
  br i1 %641, label %tile_loop.loop_exit566, label %tile_loop.loop_body568

tile_loop.loop_body568:                           ; preds = %tile_loop.loop_header567
  %invar.inc571 = add nuw nsw i32 %tile_loop.indvar570, 1
  store i32 %invar.inc571, ptr %tile_loop.invar_address569, align 4
  %642 = icmp eq i32 %tile_loop.indvar570, 0
  %643 = mul i32 %tile_loop.indvar570, 1024
  %644 = add i32 %643, 0
  %x_loc572 = add i32 %644, %640
  %645 = add i32 %tile_origin.1530, %y_in_tile.indvar536
  %646 = add i32 %tile_origin.2531, %x_loc572
  %647 = icmp ult i32 %x_loc572, %tile_bound528
  br i1 %647, label %x_in_tile-true573, label %x_in_tile-after574

x_in_tile-after574:                               ; preds = %x_in_tile-true573, %tile_loop.loop_body568
  %648 = mul i32 %tile_loop.indvar570, 1024
  %649 = add i32 %648, 1
  %x_loc586 = add i32 %649, %640
  %650 = add i32 %tile_origin.1530, %y_in_tile.indvar536
  %651 = add i32 %tile_origin.2531, %x_loc586
  %652 = icmp ult i32 %x_loc586, %tile_bound528
  br i1 %652, label %x_in_tile-true587, label %x_in_tile-after588

x_in_tile-after588:                               ; preds = %x_in_tile-true587, %x_in_tile-after574
  br label %tile_loop.loop_header567, !llvm.loop !235

tile_loop.loop_exit566:                           ; preds = %tile_loop.loop_header567
  br label %is_full_tile-after540

x_in_tile-true573:                                ; preds = %tile_loop.loop_body568
  %653 = mul nuw nsw i32 %646, 1
  %654 = add nuw nsw i32 0, %653
  %655 = mul nuw nsw i32 %645, 8192
  %656 = add nuw nsw i32 %654, %655
  %657 = mul nuw nsw i32 %tile_origin.0529, 8192
  %658 = add nuw nsw i32 %656, %657
  %659 = udiv i32 %658, 1
  %Arg_11.12575 = getelementptr inbounds float, ptr %arg11, i32 %658
  %Arg_11.12576 = load float, ptr %Arg_11.12575, align 4, !invariant.load !197
  %Arg_10.11577 = getelementptr inbounds float, ptr %arg10, i32 %658
  %Arg_10.11578 = load float, ptr %Arg_10.11577, align 4, !invariant.load !197
  %multiply.61579 = fmul float %Arg_11.12576, %Arg_10.11578
  %region_0_89_constant_33580 = load float, ptr @5, align 4
  %Arg_10.11581 = getelementptr inbounds float, ptr %arg10, i32 %658
  %Arg_10.11582 = load float, ptr %Arg_10.11581, align 4, !invariant.load !197
  %subtract.62583 = fsub float %region_0_89_constant_33580, %Arg_10.11582
  %multiply.63584 = fmul float %multiply.61579, %subtract.62583
  store float %multiply.63584, ptr %reduction_input_address520, align 4
  %660 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  call void @region_6_65(ptr %660, ptr %reduction_input_address520, ptr %return_buffer585)
  %661 = load float, ptr %return_buffer585, align 4
  store float %661, ptr %660, align 4
  br label %x_in_tile-after574

x_in_tile-true587:                                ; preds = %x_in_tile-after574
  %662 = mul nuw nsw i32 %651, 1
  %663 = add nuw nsw i32 0, %662
  %664 = mul nuw nsw i32 %650, 8192
  %665 = add nuw nsw i32 %663, %664
  %666 = mul nuw nsw i32 %tile_origin.0529, 8192
  %667 = add nuw nsw i32 %665, %666
  %668 = udiv i32 %667, 1
  %Arg_11.12589 = getelementptr inbounds float, ptr %arg11, i32 %667
  %Arg_11.12590 = load float, ptr %Arg_11.12589, align 4, !invariant.load !197
  %Arg_10.11591 = getelementptr inbounds float, ptr %arg10, i32 %667
  %Arg_10.11592 = load float, ptr %Arg_10.11591, align 4, !invariant.load !197
  %multiply.61593 = fmul float %Arg_11.12590, %Arg_10.11592
  %region_0_89_constant_33594 = load float, ptr @5, align 4
  %Arg_10.11595 = getelementptr inbounds float, ptr %arg10, i32 %667
  %Arg_10.11596 = load float, ptr %Arg_10.11595, align 4, !invariant.load !197
  %subtract.62597 = fsub float %region_0_89_constant_33594, %Arg_10.11596
  %multiply.63598 = fmul float %multiply.61593, %subtract.62597
  store float %multiply.63598, ptr %reduction_input_address520, align 4
  %669 = getelementptr inbounds float, ptr %partial_reduction_result521, i32 0
  call void @region_6_65(ptr %669, ptr %reduction_input_address520, ptr %return_buffer599)
  %670 = load float, ptr %return_buffer599, align 4
  store float %670, ptr %669, align 4
  br label %x_in_tile-after588

intra_warp_reduce_write-true616:                  ; preds = %y_in_tile.loop_exit532
  %671 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i32 0, i32 %583, i32 0, i32 %608
  %672 = addrspacecast ptr addrspace(3) %671 to ptr
  %673 = load float, ptr %current_output600, align 4
  store float %673, ptr %672, align 4
  br label %intra_warp_reduce_write-after617

inter_warp_reduce-true618:                        ; preds = %intra_warp_reduce_write-after617
  %674 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache11, i32 0, i32 %583, i32 0, i32 %lane_id526
  %675 = addrspacecast ptr addrspace(3) %674 to ptr
  store float %region_0_89_constant_19522, ptr %initial_value_addr620, align 4
  %676 = icmp ult i32 %thread_id.x524, 16
  %677 = select i1 %676, ptr %675, ptr %initial_value_addr620
  %partial_reduction_result622 = load float, ptr %677, align 4
  %678 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result622, i32 16, i32 31)
  store float %678, ptr %result_from_other_lane621, align 4
  call void @region_6_65(ptr %677, ptr %result_from_other_lane621, ptr %return_buffer623)
  %679 = load float, ptr %return_buffer623, align 4
  store float %679, ptr %677, align 4
  %partial_reduction_result625 = load float, ptr %677, align 4
  %680 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result625, i32 8, i32 31)
  store float %680, ptr %result_from_other_lane624, align 4
  call void @region_6_65(ptr %677, ptr %result_from_other_lane624, ptr %return_buffer626)
  %681 = load float, ptr %return_buffer626, align 4
  store float %681, ptr %677, align 4
  %partial_reduction_result628 = load float, ptr %677, align 4
  %682 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result628, i32 4, i32 31)
  store float %682, ptr %result_from_other_lane627, align 4
  call void @region_6_65(ptr %677, ptr %result_from_other_lane627, ptr %return_buffer629)
  %683 = load float, ptr %return_buffer629, align 4
  store float %683, ptr %677, align 4
  %partial_reduction_result631 = load float, ptr %677, align 4
  %684 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result631, i32 2, i32 31)
  store float %684, ptr %result_from_other_lane630, align 4
  call void @region_6_65(ptr %677, ptr %result_from_other_lane630, ptr %return_buffer632)
  %685 = load float, ptr %return_buffer632, align 4
  store float %685, ptr %677, align 4
  %partial_reduction_result634 = load float, ptr %677, align 4
  %686 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result634, i32 1, i32 31)
  store float %686, ptr %result_from_other_lane633, align 4
  call void @region_6_65(ptr %677, ptr %result_from_other_lane633, ptr %return_buffer635)
  %687 = load float, ptr %return_buffer635, align 4
  store float %687, ptr %677, align 4
  %688 = icmp eq i32 %thread_id.x524, 0
  br i1 %688, label %reduction_write_output-true636, label %reduction_write_output-after637

reduction_write_output-after637:                  ; preds = %reduction_write_output-true636, %inter_warp_reduce-true618
  br label %inter_warp_reduce-after619

reduction_write_output-true636:                   ; preds = %inter_warp_reduce-true618
  %689 = mul i32 %thread_id.x524, 2
  %690 = add i32 %tile_origin.1530, %thread_id.y525
  %691 = add i32 %tile_origin.2531, %689
  %692 = add i32 %691, 0
  %output638 = load float, ptr %677, align 4
  store float %output638, ptr %arg21, align 4
  br label %reduction_write_output-after637

reduce-group-6-true:                              ; preds = %reduce-group-5-after
  %region_0_89_constant_19641 = load float, ptr @4, align 4
  %693 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  store float %region_0_89_constant_19641, ptr %693, align 4
  %694 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %695 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %696 = urem i32 %694, 512
  %697 = udiv i32 %694, 512
  %698 = mul i32 %695, 1
  %699 = add i32 %698, %697
  %700 = icmp ult i32 %699, 1
  br i1 %700, label %701, label %early_return642

701:                                              ; preds = %reduce-group-6-true
  %thread_id.x643 = urem i32 %696, 512
  %thread_id.y644 = udiv i32 %696, 512
  %lane_id645 = urem i32 %696, 32
  %702 = udiv i32 %699, 1
  %703 = urem i32 %702, 1
  %704 = udiv i32 %699, 1
  %705 = urem i32 %704, 1
  %706 = udiv i32 %699, 1
  %707 = icmp eq i32 %705, 0
  %tile_bound646 = select i1 %707, i32 1, i32 1
  %708 = icmp eq i32 %703, 0
  %tile_bound647 = select i1 %708, i32 8192, i32 8192
  %tile_origin.0648 = mul i32 %706, 1
  %tile_origin.1649 = mul i32 %705, 1
  %tile_origin.2650 = mul i32 %703, 8192
  store i32 %thread_id.y644, ptr %y_in_tile.invar_address654, align 4
  br label %y_in_tile.loop_header652

y_in_tile.loop_header652:                         ; preds = %is_full_tile-after659, %701
  %y_in_tile.indvar655 = load i32, ptr %y_in_tile.invar_address654, align 4
  %709 = icmp uge i32 %y_in_tile.indvar655, %tile_bound646
  br i1 %709, label %y_in_tile.loop_exit651, label %y_in_tile.loop_body653

y_in_tile.loop_body653:                           ; preds = %y_in_tile.loop_header652
  %invar.inc656 = add nuw nsw i32 %y_in_tile.indvar655, 1
  store i32 %invar.inc656, ptr %y_in_tile.invar_address654, align 4
  %710 = icmp eq i32 %y_in_tile.indvar655, %thread_id.y644
  %711 = icmp eq i32 8192, %tile_bound647
  br i1 %711, label %is_full_tile-true657, label %is_full_tile-false658

is_full_tile-after659:                            ; preds = %tile_loop.loop_exit685, %tile_loop.loop_exit660
  br label %y_in_tile.loop_header652, !llvm.loop !236

y_in_tile.loop_exit651:                           ; preds = %y_in_tile.loop_header652
  %current_output719 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  %partial_reduction_result721 = load float, ptr %current_output719, align 4
  %712 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result721, i32 16, i32 31)
  store float %712, ptr %result_from_other_lane720, align 4
  call void @region_7_74(ptr %current_output719, ptr %result_from_other_lane720, ptr %return_buffer722)
  %713 = load float, ptr %return_buffer722, align 4
  store float %713, ptr %current_output719, align 4
  %partial_reduction_result724 = load float, ptr %current_output719, align 4
  %714 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result724, i32 8, i32 31)
  store float %714, ptr %result_from_other_lane723, align 4
  call void @region_7_74(ptr %current_output719, ptr %result_from_other_lane723, ptr %return_buffer725)
  %715 = load float, ptr %return_buffer725, align 4
  store float %715, ptr %current_output719, align 4
  %partial_reduction_result727 = load float, ptr %current_output719, align 4
  %716 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result727, i32 4, i32 31)
  store float %716, ptr %result_from_other_lane726, align 4
  call void @region_7_74(ptr %current_output719, ptr %result_from_other_lane726, ptr %return_buffer728)
  %717 = load float, ptr %return_buffer728, align 4
  store float %717, ptr %current_output719, align 4
  %partial_reduction_result730 = load float, ptr %current_output719, align 4
  %718 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result730, i32 2, i32 31)
  store float %718, ptr %result_from_other_lane729, align 4
  call void @region_7_74(ptr %current_output719, ptr %result_from_other_lane729, ptr %return_buffer731)
  %719 = load float, ptr %return_buffer731, align 4
  store float %719, ptr %current_output719, align 4
  %partial_reduction_result733 = load float, ptr %current_output719, align 4
  %720 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result733, i32 1, i32 31)
  store float %720, ptr %result_from_other_lane732, align 4
  call void @region_7_74(ptr %current_output719, ptr %result_from_other_lane732, ptr %return_buffer734)
  %721 = load float, ptr %return_buffer734, align 4
  store float %721, ptr %current_output719, align 4
  %722 = udiv i32 %thread_id.x643, 32
  %723 = icmp eq i32 %lane_id645, 0
  br i1 %723, label %intra_warp_reduce_write-true735, label %intra_warp_reduce_write-after736

intra_warp_reduce_write-after736:                 ; preds = %intra_warp_reduce_write-true735, %y_in_tile.loop_exit651
  call void @llvm.nvvm.barrier0()
  %724 = icmp eq i32 %722, 0
  br i1 %724, label %inter_warp_reduce-true737, label %inter_warp_reduce-after738

inter_warp_reduce-after738:                       ; preds = %reduction_write_output-after756, %intra_warp_reduce_write-after736
  br label %reduce-group-6-after

early_return642:                                  ; preds = %reduce-group-6-true
  ret void

is_full_tile-true657:                             ; preds = %y_in_tile.loop_body653
  %725 = mul i32 %thread_id.x643, 2
  store i32 0, ptr %tile_loop.invar_address663, align 4
  br label %tile_loop.loop_header661

tile_loop.loop_header661:                         ; preds = %tile_loop.loop_body662, %is_full_tile-true657
  %tile_loop.indvar664 = load i32, ptr %tile_loop.invar_address663, align 4
  %726 = icmp uge i32 %tile_loop.indvar664, 8
  br i1 %726, label %tile_loop.loop_exit660, label %tile_loop.loop_body662

tile_loop.loop_body662:                           ; preds = %tile_loop.loop_header661
  %invar.inc665 = add nuw nsw i32 %tile_loop.indvar664, 1
  store i32 %invar.inc665, ptr %tile_loop.invar_address663, align 4
  %727 = icmp eq i32 %tile_loop.indvar664, 0
  %728 = mul i32 %tile_loop.indvar664, 1024
  %729 = add i32 %728, 0
  %x_loc666 = add i32 %729, %725
  %730 = add i32 %tile_origin.1649, %y_in_tile.indvar655
  %731 = add i32 %tile_origin.2650, %x_loc666
  %732 = mul nuw nsw i32 %731, 1
  %733 = add nuw nsw i32 0, %732
  %734 = mul nuw nsw i32 %730, 8192
  %735 = add nuw nsw i32 %733, %734
  %736 = mul nuw nsw i32 %tile_origin.0648, 8192
  %737 = add nuw nsw i32 %735, %736
  %738 = udiv i32 %737, 1
  %Arg_13.14 = getelementptr inbounds float, ptr %arg13, i32 %737
  %Arg_13.14667 = load float, ptr %Arg_13.14, align 4, !invariant.load !197
  %Arg_12.13 = getelementptr inbounds float, ptr %arg12, i32 %737
  %Arg_12.13668 = load float, ptr %Arg_12.13, align 4, !invariant.load !197
  %multiply.70 = fmul float %Arg_13.14667, %Arg_12.13668
  %region_0_89_constant_33669 = load float, ptr @5, align 4
  %Arg_12.13670 = getelementptr inbounds float, ptr %arg12, i32 %737
  %Arg_12.13671 = load float, ptr %Arg_12.13670, align 4, !invariant.load !197
  %subtract.71 = fsub float %region_0_89_constant_33669, %Arg_12.13671
  %multiply.72 = fmul float %multiply.70, %subtract.71
  store float %multiply.72, ptr %reduction_input_address639, align 4
  %739 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  call void @region_7_74(ptr %739, ptr %reduction_input_address639, ptr %return_buffer672)
  %740 = load float, ptr %return_buffer672, align 4
  store float %740, ptr %739, align 4
  %741 = mul i32 %tile_loop.indvar664, 1024
  %742 = add i32 %741, 1
  %x_loc673 = add i32 %742, %725
  %743 = add i32 %tile_origin.1649, %y_in_tile.indvar655
  %744 = add i32 %tile_origin.2650, %x_loc673
  %745 = mul nuw nsw i32 %744, 1
  %746 = add nuw nsw i32 0, %745
  %747 = mul nuw nsw i32 %743, 8192
  %748 = add nuw nsw i32 %746, %747
  %749 = mul nuw nsw i32 %tile_origin.0648, 8192
  %750 = add nuw nsw i32 %748, %749
  %751 = udiv i32 %750, 1
  %Arg_13.14674 = getelementptr inbounds float, ptr %arg13, i32 %750
  %Arg_13.14675 = load float, ptr %Arg_13.14674, align 4, !invariant.load !197
  %Arg_12.13676 = getelementptr inbounds float, ptr %arg12, i32 %750
  %Arg_12.13677 = load float, ptr %Arg_12.13676, align 4, !invariant.load !197
  %multiply.70678 = fmul float %Arg_13.14675, %Arg_12.13677
  %region_0_89_constant_33679 = load float, ptr @5, align 4
  %Arg_12.13680 = getelementptr inbounds float, ptr %arg12, i32 %750
  %Arg_12.13681 = load float, ptr %Arg_12.13680, align 4, !invariant.load !197
  %subtract.71682 = fsub float %region_0_89_constant_33679, %Arg_12.13681
  %multiply.72683 = fmul float %multiply.70678, %subtract.71682
  store float %multiply.72683, ptr %reduction_input_address639, align 4
  %752 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  call void @region_7_74(ptr %752, ptr %reduction_input_address639, ptr %return_buffer684)
  %753 = load float, ptr %return_buffer684, align 4
  store float %753, ptr %752, align 4
  br label %tile_loop.loop_header661, !llvm.loop !237

tile_loop.loop_exit660:                           ; preds = %tile_loop.loop_header661
  br label %is_full_tile-after659

is_full_tile-false658:                            ; preds = %y_in_tile.loop_body653
  %754 = mul i32 %thread_id.x643, 2
  store i32 0, ptr %tile_loop.invar_address688, align 4
  br label %tile_loop.loop_header686

tile_loop.loop_header686:                         ; preds = %x_in_tile-after707, %is_full_tile-false658
  %tile_loop.indvar689 = load i32, ptr %tile_loop.invar_address688, align 4
  %755 = icmp uge i32 %tile_loop.indvar689, 8
  br i1 %755, label %tile_loop.loop_exit685, label %tile_loop.loop_body687

tile_loop.loop_body687:                           ; preds = %tile_loop.loop_header686
  %invar.inc690 = add nuw nsw i32 %tile_loop.indvar689, 1
  store i32 %invar.inc690, ptr %tile_loop.invar_address688, align 4
  %756 = icmp eq i32 %tile_loop.indvar689, 0
  %757 = mul i32 %tile_loop.indvar689, 1024
  %758 = add i32 %757, 0
  %x_loc691 = add i32 %758, %754
  %759 = add i32 %tile_origin.1649, %y_in_tile.indvar655
  %760 = add i32 %tile_origin.2650, %x_loc691
  %761 = icmp ult i32 %x_loc691, %tile_bound647
  br i1 %761, label %x_in_tile-true692, label %x_in_tile-after693

x_in_tile-after693:                               ; preds = %x_in_tile-true692, %tile_loop.loop_body687
  %762 = mul i32 %tile_loop.indvar689, 1024
  %763 = add i32 %762, 1
  %x_loc705 = add i32 %763, %754
  %764 = add i32 %tile_origin.1649, %y_in_tile.indvar655
  %765 = add i32 %tile_origin.2650, %x_loc705
  %766 = icmp ult i32 %x_loc705, %tile_bound647
  br i1 %766, label %x_in_tile-true706, label %x_in_tile-after707

x_in_tile-after707:                               ; preds = %x_in_tile-true706, %x_in_tile-after693
  br label %tile_loop.loop_header686, !llvm.loop !238

tile_loop.loop_exit685:                           ; preds = %tile_loop.loop_header686
  br label %is_full_tile-after659

x_in_tile-true692:                                ; preds = %tile_loop.loop_body687
  %767 = mul nuw nsw i32 %760, 1
  %768 = add nuw nsw i32 0, %767
  %769 = mul nuw nsw i32 %759, 8192
  %770 = add nuw nsw i32 %768, %769
  %771 = mul nuw nsw i32 %tile_origin.0648, 8192
  %772 = add nuw nsw i32 %770, %771
  %773 = udiv i32 %772, 1
  %Arg_13.14694 = getelementptr inbounds float, ptr %arg13, i32 %772
  %Arg_13.14695 = load float, ptr %Arg_13.14694, align 4, !invariant.load !197
  %Arg_12.13696 = getelementptr inbounds float, ptr %arg12, i32 %772
  %Arg_12.13697 = load float, ptr %Arg_12.13696, align 4, !invariant.load !197
  %multiply.70698 = fmul float %Arg_13.14695, %Arg_12.13697
  %region_0_89_constant_33699 = load float, ptr @5, align 4
  %Arg_12.13700 = getelementptr inbounds float, ptr %arg12, i32 %772
  %Arg_12.13701 = load float, ptr %Arg_12.13700, align 4, !invariant.load !197
  %subtract.71702 = fsub float %region_0_89_constant_33699, %Arg_12.13701
  %multiply.72703 = fmul float %multiply.70698, %subtract.71702
  store float %multiply.72703, ptr %reduction_input_address639, align 4
  %774 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  call void @region_7_74(ptr %774, ptr %reduction_input_address639, ptr %return_buffer704)
  %775 = load float, ptr %return_buffer704, align 4
  store float %775, ptr %774, align 4
  br label %x_in_tile-after693

x_in_tile-true706:                                ; preds = %x_in_tile-after693
  %776 = mul nuw nsw i32 %765, 1
  %777 = add nuw nsw i32 0, %776
  %778 = mul nuw nsw i32 %764, 8192
  %779 = add nuw nsw i32 %777, %778
  %780 = mul nuw nsw i32 %tile_origin.0648, 8192
  %781 = add nuw nsw i32 %779, %780
  %782 = udiv i32 %781, 1
  %Arg_13.14708 = getelementptr inbounds float, ptr %arg13, i32 %781
  %Arg_13.14709 = load float, ptr %Arg_13.14708, align 4, !invariant.load !197
  %Arg_12.13710 = getelementptr inbounds float, ptr %arg12, i32 %781
  %Arg_12.13711 = load float, ptr %Arg_12.13710, align 4, !invariant.load !197
  %multiply.70712 = fmul float %Arg_13.14709, %Arg_12.13711
  %region_0_89_constant_33713 = load float, ptr @5, align 4
  %Arg_12.13714 = getelementptr inbounds float, ptr %arg12, i32 %781
  %Arg_12.13715 = load float, ptr %Arg_12.13714, align 4, !invariant.load !197
  %subtract.71716 = fsub float %region_0_89_constant_33713, %Arg_12.13715
  %multiply.72717 = fmul float %multiply.70712, %subtract.71716
  store float %multiply.72717, ptr %reduction_input_address639, align 4
  %783 = getelementptr inbounds float, ptr %partial_reduction_result640, i32 0
  call void @region_7_74(ptr %783, ptr %reduction_input_address639, ptr %return_buffer718)
  %784 = load float, ptr %return_buffer718, align 4
  store float %784, ptr %783, align 4
  br label %x_in_tile-after707

intra_warp_reduce_write-true735:                  ; preds = %y_in_tile.loop_exit651
  %785 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i32 0, i32 %697, i32 0, i32 %722
  %786 = addrspacecast ptr addrspace(3) %785 to ptr
  %787 = load float, ptr %current_output719, align 4
  store float %787, ptr %786, align 4
  br label %intra_warp_reduce_write-after736

inter_warp_reduce-true737:                        ; preds = %intra_warp_reduce_write-after736
  %788 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache12, i32 0, i32 %697, i32 0, i32 %lane_id645
  %789 = addrspacecast ptr addrspace(3) %788 to ptr
  store float %region_0_89_constant_19641, ptr %initial_value_addr739, align 4
  %790 = icmp ult i32 %thread_id.x643, 16
  %791 = select i1 %790, ptr %789, ptr %initial_value_addr739
  %partial_reduction_result741 = load float, ptr %791, align 4
  %792 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result741, i32 16, i32 31)
  store float %792, ptr %result_from_other_lane740, align 4
  call void @region_7_74(ptr %791, ptr %result_from_other_lane740, ptr %return_buffer742)
  %793 = load float, ptr %return_buffer742, align 4
  store float %793, ptr %791, align 4
  %partial_reduction_result744 = load float, ptr %791, align 4
  %794 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result744, i32 8, i32 31)
  store float %794, ptr %result_from_other_lane743, align 4
  call void @region_7_74(ptr %791, ptr %result_from_other_lane743, ptr %return_buffer745)
  %795 = load float, ptr %return_buffer745, align 4
  store float %795, ptr %791, align 4
  %partial_reduction_result747 = load float, ptr %791, align 4
  %796 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result747, i32 4, i32 31)
  store float %796, ptr %result_from_other_lane746, align 4
  call void @region_7_74(ptr %791, ptr %result_from_other_lane746, ptr %return_buffer748)
  %797 = load float, ptr %return_buffer748, align 4
  store float %797, ptr %791, align 4
  %partial_reduction_result750 = load float, ptr %791, align 4
  %798 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result750, i32 2, i32 31)
  store float %798, ptr %result_from_other_lane749, align 4
  call void @region_7_74(ptr %791, ptr %result_from_other_lane749, ptr %return_buffer751)
  %799 = load float, ptr %return_buffer751, align 4
  store float %799, ptr %791, align 4
  %partial_reduction_result753 = load float, ptr %791, align 4
  %800 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result753, i32 1, i32 31)
  store float %800, ptr %result_from_other_lane752, align 4
  call void @region_7_74(ptr %791, ptr %result_from_other_lane752, ptr %return_buffer754)
  %801 = load float, ptr %return_buffer754, align 4
  store float %801, ptr %791, align 4
  %802 = icmp eq i32 %thread_id.x643, 0
  br i1 %802, label %reduction_write_output-true755, label %reduction_write_output-after756

reduction_write_output-after756:                  ; preds = %reduction_write_output-true755, %inter_warp_reduce-true737
  br label %inter_warp_reduce-after738

reduction_write_output-true755:                   ; preds = %inter_warp_reduce-true737
  %803 = mul i32 %thread_id.x643, 2
  %804 = add i32 %tile_origin.1649, %thread_id.y644
  %805 = add i32 %tile_origin.2650, %803
  %806 = add i32 %805, 0
  %output757 = load float, ptr %791, align 4
  store float %output757, ptr %arg22, align 4
  br label %reduction_write_output-after756

reduce-group-7-true:                              ; preds = %reduce-group-6-after
  %region_0_89_constant_19760 = load float, ptr @4, align 4
  %807 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  store float %region_0_89_constant_19760, ptr %807, align 4
  %808 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %809 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %810 = urem i32 %808, 512
  %811 = udiv i32 %808, 512
  %812 = mul i32 %809, 1
  %813 = add i32 %812, %811
  %814 = icmp ult i32 %813, 1
  br i1 %814, label %815, label %early_return761

815:                                              ; preds = %reduce-group-7-true
  %thread_id.x762 = urem i32 %810, 512
  %thread_id.y763 = udiv i32 %810, 512
  %lane_id764 = urem i32 %810, 32
  %816 = udiv i32 %813, 1
  %817 = urem i32 %816, 1
  %818 = udiv i32 %813, 1
  %819 = urem i32 %818, 1
  %820 = udiv i32 %813, 1
  %821 = icmp eq i32 %819, 0
  %tile_bound765 = select i1 %821, i32 1, i32 1
  %822 = icmp eq i32 %817, 0
  %tile_bound766 = select i1 %822, i32 8192, i32 8192
  %tile_origin.0767 = mul i32 %820, 1
  %tile_origin.1768 = mul i32 %819, 1
  %tile_origin.2769 = mul i32 %817, 8192
  store i32 %thread_id.y763, ptr %y_in_tile.invar_address773, align 4
  br label %y_in_tile.loop_header771

y_in_tile.loop_header771:                         ; preds = %is_full_tile-after778, %815
  %y_in_tile.indvar774 = load i32, ptr %y_in_tile.invar_address773, align 4
  %823 = icmp uge i32 %y_in_tile.indvar774, %tile_bound765
  br i1 %823, label %y_in_tile.loop_exit770, label %y_in_tile.loop_body772

y_in_tile.loop_body772:                           ; preds = %y_in_tile.loop_header771
  %invar.inc775 = add nuw nsw i32 %y_in_tile.indvar774, 1
  store i32 %invar.inc775, ptr %y_in_tile.invar_address773, align 4
  %824 = icmp eq i32 %y_in_tile.indvar774, %thread_id.y763
  %825 = icmp eq i32 8192, %tile_bound766
  br i1 %825, label %is_full_tile-true776, label %is_full_tile-false777

is_full_tile-after778:                            ; preds = %tile_loop.loop_exit804, %tile_loop.loop_exit779
  br label %y_in_tile.loop_header771, !llvm.loop !239

y_in_tile.loop_exit770:                           ; preds = %y_in_tile.loop_header771
  %current_output838 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  %partial_reduction_result840 = load float, ptr %current_output838, align 4
  %826 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result840, i32 16, i32 31)
  store float %826, ptr %result_from_other_lane839, align 4
  call void @region_8_83(ptr %current_output838, ptr %result_from_other_lane839, ptr %return_buffer841)
  %827 = load float, ptr %return_buffer841, align 4
  store float %827, ptr %current_output838, align 4
  %partial_reduction_result843 = load float, ptr %current_output838, align 4
  %828 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result843, i32 8, i32 31)
  store float %828, ptr %result_from_other_lane842, align 4
  call void @region_8_83(ptr %current_output838, ptr %result_from_other_lane842, ptr %return_buffer844)
  %829 = load float, ptr %return_buffer844, align 4
  store float %829, ptr %current_output838, align 4
  %partial_reduction_result846 = load float, ptr %current_output838, align 4
  %830 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result846, i32 4, i32 31)
  store float %830, ptr %result_from_other_lane845, align 4
  call void @region_8_83(ptr %current_output838, ptr %result_from_other_lane845, ptr %return_buffer847)
  %831 = load float, ptr %return_buffer847, align 4
  store float %831, ptr %current_output838, align 4
  %partial_reduction_result849 = load float, ptr %current_output838, align 4
  %832 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result849, i32 2, i32 31)
  store float %832, ptr %result_from_other_lane848, align 4
  call void @region_8_83(ptr %current_output838, ptr %result_from_other_lane848, ptr %return_buffer850)
  %833 = load float, ptr %return_buffer850, align 4
  store float %833, ptr %current_output838, align 4
  %partial_reduction_result852 = load float, ptr %current_output838, align 4
  %834 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result852, i32 1, i32 31)
  store float %834, ptr %result_from_other_lane851, align 4
  call void @region_8_83(ptr %current_output838, ptr %result_from_other_lane851, ptr %return_buffer853)
  %835 = load float, ptr %return_buffer853, align 4
  store float %835, ptr %current_output838, align 4
  %836 = udiv i32 %thread_id.x762, 32
  %837 = icmp eq i32 %lane_id764, 0
  br i1 %837, label %intra_warp_reduce_write-true854, label %intra_warp_reduce_write-after855

intra_warp_reduce_write-after855:                 ; preds = %intra_warp_reduce_write-true854, %y_in_tile.loop_exit770
  call void @llvm.nvvm.barrier0()
  %838 = icmp eq i32 %836, 0
  br i1 %838, label %inter_warp_reduce-true856, label %inter_warp_reduce-after857

inter_warp_reduce-after857:                       ; preds = %reduction_write_output-after875, %intra_warp_reduce_write-after855
  br label %reduce-group-7-after

early_return761:                                  ; preds = %reduce-group-7-true
  ret void

is_full_tile-true776:                             ; preds = %y_in_tile.loop_body772
  %839 = mul i32 %thread_id.x762, 2
  store i32 0, ptr %tile_loop.invar_address782, align 4
  br label %tile_loop.loop_header780

tile_loop.loop_header780:                         ; preds = %tile_loop.loop_body781, %is_full_tile-true776
  %tile_loop.indvar783 = load i32, ptr %tile_loop.invar_address782, align 4
  %840 = icmp uge i32 %tile_loop.indvar783, 8
  br i1 %840, label %tile_loop.loop_exit779, label %tile_loop.loop_body781

tile_loop.loop_body781:                           ; preds = %tile_loop.loop_header780
  %invar.inc784 = add nuw nsw i32 %tile_loop.indvar783, 1
  store i32 %invar.inc784, ptr %tile_loop.invar_address782, align 4
  %841 = icmp eq i32 %tile_loop.indvar783, 0
  %842 = mul i32 %tile_loop.indvar783, 1024
  %843 = add i32 %842, 0
  %x_loc785 = add i32 %843, %839
  %844 = add i32 %tile_origin.1768, %y_in_tile.indvar774
  %845 = add i32 %tile_origin.2769, %x_loc785
  %846 = mul nuw nsw i32 %845, 1
  %847 = add nuw nsw i32 0, %846
  %848 = mul nuw nsw i32 %844, 8192
  %849 = add nuw nsw i32 %847, %848
  %850 = mul nuw nsw i32 %tile_origin.0767, 8192
  %851 = add nuw nsw i32 %849, %850
  %852 = udiv i32 %851, 1
  %Arg_15.16 = getelementptr inbounds float, ptr %arg15, i32 %851
  %Arg_15.16786 = load float, ptr %Arg_15.16, align 4, !invariant.load !197
  %Arg_14.15 = getelementptr inbounds float, ptr %arg14, i32 %851
  %Arg_14.15787 = load float, ptr %Arg_14.15, align 4, !invariant.load !197
  %multiply.79 = fmul float %Arg_15.16786, %Arg_14.15787
  %region_0_89_constant_33788 = load float, ptr @5, align 4
  %Arg_14.15789 = getelementptr inbounds float, ptr %arg14, i32 %851
  %Arg_14.15790 = load float, ptr %Arg_14.15789, align 4, !invariant.load !197
  %subtract.80 = fsub float %region_0_89_constant_33788, %Arg_14.15790
  %multiply.81 = fmul float %multiply.79, %subtract.80
  store float %multiply.81, ptr %reduction_input_address758, align 4
  %853 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  call void @region_8_83(ptr %853, ptr %reduction_input_address758, ptr %return_buffer791)
  %854 = load float, ptr %return_buffer791, align 4
  store float %854, ptr %853, align 4
  %855 = mul i32 %tile_loop.indvar783, 1024
  %856 = add i32 %855, 1
  %x_loc792 = add i32 %856, %839
  %857 = add i32 %tile_origin.1768, %y_in_tile.indvar774
  %858 = add i32 %tile_origin.2769, %x_loc792
  %859 = mul nuw nsw i32 %858, 1
  %860 = add nuw nsw i32 0, %859
  %861 = mul nuw nsw i32 %857, 8192
  %862 = add nuw nsw i32 %860, %861
  %863 = mul nuw nsw i32 %tile_origin.0767, 8192
  %864 = add nuw nsw i32 %862, %863
  %865 = udiv i32 %864, 1
  %Arg_15.16793 = getelementptr inbounds float, ptr %arg15, i32 %864
  %Arg_15.16794 = load float, ptr %Arg_15.16793, align 4, !invariant.load !197
  %Arg_14.15795 = getelementptr inbounds float, ptr %arg14, i32 %864
  %Arg_14.15796 = load float, ptr %Arg_14.15795, align 4, !invariant.load !197
  %multiply.79797 = fmul float %Arg_15.16794, %Arg_14.15796
  %region_0_89_constant_33798 = load float, ptr @5, align 4
  %Arg_14.15799 = getelementptr inbounds float, ptr %arg14, i32 %864
  %Arg_14.15800 = load float, ptr %Arg_14.15799, align 4, !invariant.load !197
  %subtract.80801 = fsub float %region_0_89_constant_33798, %Arg_14.15800
  %multiply.81802 = fmul float %multiply.79797, %subtract.80801
  store float %multiply.81802, ptr %reduction_input_address758, align 4
  %866 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  call void @region_8_83(ptr %866, ptr %reduction_input_address758, ptr %return_buffer803)
  %867 = load float, ptr %return_buffer803, align 4
  store float %867, ptr %866, align 4
  br label %tile_loop.loop_header780, !llvm.loop !240

tile_loop.loop_exit779:                           ; preds = %tile_loop.loop_header780
  br label %is_full_tile-after778

is_full_tile-false777:                            ; preds = %y_in_tile.loop_body772
  %868 = mul i32 %thread_id.x762, 2
  store i32 0, ptr %tile_loop.invar_address807, align 4
  br label %tile_loop.loop_header805

tile_loop.loop_header805:                         ; preds = %x_in_tile-after826, %is_full_tile-false777
  %tile_loop.indvar808 = load i32, ptr %tile_loop.invar_address807, align 4
  %869 = icmp uge i32 %tile_loop.indvar808, 8
  br i1 %869, label %tile_loop.loop_exit804, label %tile_loop.loop_body806

tile_loop.loop_body806:                           ; preds = %tile_loop.loop_header805
  %invar.inc809 = add nuw nsw i32 %tile_loop.indvar808, 1
  store i32 %invar.inc809, ptr %tile_loop.invar_address807, align 4
  %870 = icmp eq i32 %tile_loop.indvar808, 0
  %871 = mul i32 %tile_loop.indvar808, 1024
  %872 = add i32 %871, 0
  %x_loc810 = add i32 %872, %868
  %873 = add i32 %tile_origin.1768, %y_in_tile.indvar774
  %874 = add i32 %tile_origin.2769, %x_loc810
  %875 = icmp ult i32 %x_loc810, %tile_bound766
  br i1 %875, label %x_in_tile-true811, label %x_in_tile-after812

x_in_tile-after812:                               ; preds = %x_in_tile-true811, %tile_loop.loop_body806
  %876 = mul i32 %tile_loop.indvar808, 1024
  %877 = add i32 %876, 1
  %x_loc824 = add i32 %877, %868
  %878 = add i32 %tile_origin.1768, %y_in_tile.indvar774
  %879 = add i32 %tile_origin.2769, %x_loc824
  %880 = icmp ult i32 %x_loc824, %tile_bound766
  br i1 %880, label %x_in_tile-true825, label %x_in_tile-after826

x_in_tile-after826:                               ; preds = %x_in_tile-true825, %x_in_tile-after812
  br label %tile_loop.loop_header805, !llvm.loop !241

tile_loop.loop_exit804:                           ; preds = %tile_loop.loop_header805
  br label %is_full_tile-after778

x_in_tile-true811:                                ; preds = %tile_loop.loop_body806
  %881 = mul nuw nsw i32 %874, 1
  %882 = add nuw nsw i32 0, %881
  %883 = mul nuw nsw i32 %873, 8192
  %884 = add nuw nsw i32 %882, %883
  %885 = mul nuw nsw i32 %tile_origin.0767, 8192
  %886 = add nuw nsw i32 %884, %885
  %887 = udiv i32 %886, 1
  %Arg_15.16813 = getelementptr inbounds float, ptr %arg15, i32 %886
  %Arg_15.16814 = load float, ptr %Arg_15.16813, align 4, !invariant.load !197
  %Arg_14.15815 = getelementptr inbounds float, ptr %arg14, i32 %886
  %Arg_14.15816 = load float, ptr %Arg_14.15815, align 4, !invariant.load !197
  %multiply.79817 = fmul float %Arg_15.16814, %Arg_14.15816
  %region_0_89_constant_33818 = load float, ptr @5, align 4
  %Arg_14.15819 = getelementptr inbounds float, ptr %arg14, i32 %886
  %Arg_14.15820 = load float, ptr %Arg_14.15819, align 4, !invariant.load !197
  %subtract.80821 = fsub float %region_0_89_constant_33818, %Arg_14.15820
  %multiply.81822 = fmul float %multiply.79817, %subtract.80821
  store float %multiply.81822, ptr %reduction_input_address758, align 4
  %888 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  call void @region_8_83(ptr %888, ptr %reduction_input_address758, ptr %return_buffer823)
  %889 = load float, ptr %return_buffer823, align 4
  store float %889, ptr %888, align 4
  br label %x_in_tile-after812

x_in_tile-true825:                                ; preds = %x_in_tile-after812
  %890 = mul nuw nsw i32 %879, 1
  %891 = add nuw nsw i32 0, %890
  %892 = mul nuw nsw i32 %878, 8192
  %893 = add nuw nsw i32 %891, %892
  %894 = mul nuw nsw i32 %tile_origin.0767, 8192
  %895 = add nuw nsw i32 %893, %894
  %896 = udiv i32 %895, 1
  %Arg_15.16827 = getelementptr inbounds float, ptr %arg15, i32 %895
  %Arg_15.16828 = load float, ptr %Arg_15.16827, align 4, !invariant.load !197
  %Arg_14.15829 = getelementptr inbounds float, ptr %arg14, i32 %895
  %Arg_14.15830 = load float, ptr %Arg_14.15829, align 4, !invariant.load !197
  %multiply.79831 = fmul float %Arg_15.16828, %Arg_14.15830
  %region_0_89_constant_33832 = load float, ptr @5, align 4
  %Arg_14.15833 = getelementptr inbounds float, ptr %arg14, i32 %895
  %Arg_14.15834 = load float, ptr %Arg_14.15833, align 4, !invariant.load !197
  %subtract.80835 = fsub float %region_0_89_constant_33832, %Arg_14.15834
  %multiply.81836 = fmul float %multiply.79831, %subtract.80835
  store float %multiply.81836, ptr %reduction_input_address758, align 4
  %897 = getelementptr inbounds float, ptr %partial_reduction_result759, i32 0
  call void @region_8_83(ptr %897, ptr %reduction_input_address758, ptr %return_buffer837)
  %898 = load float, ptr %return_buffer837, align 4
  store float %898, ptr %897, align 4
  br label %x_in_tile-after826

intra_warp_reduce_write-true854:                  ; preds = %y_in_tile.loop_exit770
  %899 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i32 0, i32 %811, i32 0, i32 %836
  %900 = addrspacecast ptr addrspace(3) %899 to ptr
  %901 = load float, ptr %current_output838, align 4
  store float %901, ptr %900, align 4
  br label %intra_warp_reduce_write-after855

inter_warp_reduce-true856:                        ; preds = %intra_warp_reduce_write-after855
  %902 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache13, i32 0, i32 %811, i32 0, i32 %lane_id764
  %903 = addrspacecast ptr addrspace(3) %902 to ptr
  store float %region_0_89_constant_19760, ptr %initial_value_addr858, align 4
  %904 = icmp ult i32 %thread_id.x762, 16
  %905 = select i1 %904, ptr %903, ptr %initial_value_addr858
  %partial_reduction_result860 = load float, ptr %905, align 4
  %906 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result860, i32 16, i32 31)
  store float %906, ptr %result_from_other_lane859, align 4
  call void @region_8_83(ptr %905, ptr %result_from_other_lane859, ptr %return_buffer861)
  %907 = load float, ptr %return_buffer861, align 4
  store float %907, ptr %905, align 4
  %partial_reduction_result863 = load float, ptr %905, align 4
  %908 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result863, i32 8, i32 31)
  store float %908, ptr %result_from_other_lane862, align 4
  call void @region_8_83(ptr %905, ptr %result_from_other_lane862, ptr %return_buffer864)
  %909 = load float, ptr %return_buffer864, align 4
  store float %909, ptr %905, align 4
  %partial_reduction_result866 = load float, ptr %905, align 4
  %910 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result866, i32 4, i32 31)
  store float %910, ptr %result_from_other_lane865, align 4
  call void @region_8_83(ptr %905, ptr %result_from_other_lane865, ptr %return_buffer867)
  %911 = load float, ptr %return_buffer867, align 4
  store float %911, ptr %905, align 4
  %partial_reduction_result869 = load float, ptr %905, align 4
  %912 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result869, i32 2, i32 31)
  store float %912, ptr %result_from_other_lane868, align 4
  call void @region_8_83(ptr %905, ptr %result_from_other_lane868, ptr %return_buffer870)
  %913 = load float, ptr %return_buffer870, align 4
  store float %913, ptr %905, align 4
  %partial_reduction_result872 = load float, ptr %905, align 4
  %914 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result872, i32 1, i32 31)
  store float %914, ptr %result_from_other_lane871, align 4
  call void @region_8_83(ptr %905, ptr %result_from_other_lane871, ptr %return_buffer873)
  %915 = load float, ptr %return_buffer873, align 4
  store float %915, ptr %905, align 4
  %916 = icmp eq i32 %thread_id.x762, 0
  br i1 %916, label %reduction_write_output-true874, label %reduction_write_output-after875

reduction_write_output-after875:                  ; preds = %reduction_write_output-true874, %inter_warp_reduce-true856
  br label %inter_warp_reduce-after857

reduction_write_output-true874:                   ; preds = %inter_warp_reduce-true856
  %917 = mul i32 %thread_id.x762, 2
  %918 = add i32 %tile_origin.1768, %thread_id.y763
  %919 = add i32 %tile_origin.2769, %917
  %920 = add i32 %919, 0
  %output876 = load float, ptr %905, align 4
  store float %output876, ptr %arg23, align 4
  br label %reduction_write_output-after875
}

define internal void @region_1_20(ptr dereferenceable(4) %Arg_0.21.typed, ptr dereferenceable(4) %Arg_1.22.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.23.typed = alloca float, align 4
  %Arg_0.21 = load float, ptr %Arg_0.21.typed, align 4
  %Arg_1.22 = load float, ptr %Arg_1.22.typed, align 4
  %add.23 = fadd float %Arg_0.21, %Arg_1.22
  store float %add.23, ptr %add.23.typed, align 4
  %load_ret_value = load float, ptr %add.23.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_27(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_38(ptr dereferenceable(4) %Arg_0.39.typed, ptr dereferenceable(4) %Arg_1.40.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.41.typed = alloca float, align 4
  %Arg_0.39 = load float, ptr %Arg_0.39.typed, align 4
  %Arg_1.40 = load float, ptr %Arg_1.40.typed, align 4
  %add.41 = fadd float %Arg_0.39, %Arg_1.40
  store float %add.41, ptr %add.41.typed, align 4
  %load_ret_value = load float, ptr %add.41.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_47(ptr dereferenceable(4) %Arg_0.48.typed, ptr dereferenceable(4) %Arg_1.49.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.50.typed = alloca float, align 4
  %Arg_0.48 = load float, ptr %Arg_0.48.typed, align 4
  %Arg_1.49 = load float, ptr %Arg_1.49.typed, align 4
  %add.50 = fadd float %Arg_0.48, %Arg_1.49
  store float %add.50, ptr %add.50.typed, align 4
  %load_ret_value = load float, ptr %add.50.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_56(ptr dereferenceable(4) %Arg_0.57.typed, ptr dereferenceable(4) %Arg_1.58.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.59.typed = alloca float, align 4
  %Arg_0.57 = load float, ptr %Arg_0.57.typed, align 4
  %Arg_1.58 = load float, ptr %Arg_1.58.typed, align 4
  %add.59 = fadd float %Arg_0.57, %Arg_1.58
  store float %add.59, ptr %add.59.typed, align 4
  %load_ret_value = load float, ptr %add.59.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_6_65(ptr dereferenceable(4) %Arg_0.66.typed, ptr dereferenceable(4) %Arg_1.67.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.68.typed = alloca float, align 4
  %Arg_0.66 = load float, ptr %Arg_0.66.typed, align 4
  %Arg_1.67 = load float, ptr %Arg_1.67.typed, align 4
  %add.68 = fadd float %Arg_0.66, %Arg_1.67
  store float %add.68, ptr %add.68.typed, align 4
  %load_ret_value = load float, ptr %add.68.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_7_74(ptr dereferenceable(4) %Arg_0.75.typed, ptr dereferenceable(4) %Arg_1.76.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.77.typed = alloca float, align 4
  %Arg_0.75 = load float, ptr %Arg_0.75.typed, align 4
  %Arg_1.76 = load float, ptr %Arg_1.76.typed, align 4
  %add.77 = fadd float %Arg_0.75, %Arg_1.76
  store float %add.77, ptr %add.77.typed, align 4
  %load_ret_value = load float, ptr %add.77.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_8_83(ptr dereferenceable(4) %Arg_0.84.typed, ptr dereferenceable(4) %Arg_1.85.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.86.typed = alloca float, align 4
  %Arg_0.84 = load float, ptr %Arg_0.84.typed, align 4
  %Arg_1.85 = load float, ptr %Arg_1.85.typed, align 4
  %add.86 = fadd float %Arg_0.84, %Arg_1.85
  store float %add.86, ptr %add.86.typed, align 4
  %load_ret_value = load float, ptr %add.86.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_563(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(32768) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 16 dereferenceable(32768) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 128 dereferenceable(4) %arg17, ptr noalias align 128 dereferenceable(4) %arg18, ptr noalias align 128 dereferenceable(4) %arg19, ptr noalias align 128 dereferenceable(4) %arg20, ptr noalias align 128 dereferenceable(4) %arg21, ptr noalias align 128 dereferenceable(4) %arg22, ptr noalias align 128 dereferenceable(4) %arg23) {
entry:
  %return_buffer766 = alloca float, align 4
  %result_from_other_lane764 = alloca float, align 4
  %return_buffer763 = alloca float, align 4
  %result_from_other_lane761 = alloca float, align 4
  %return_buffer760 = alloca float, align 4
  %result_from_other_lane758 = alloca float, align 4
  %return_buffer757 = alloca float, align 4
  %result_from_other_lane755 = alloca float, align 4
  %return_buffer754 = alloca float, align 4
  %result_from_other_lane752 = alloca float, align 4
  %initial_value_addr751 = alloca float, align 4
  %return_buffer746 = alloca float, align 4
  %result_from_other_lane744 = alloca float, align 4
  %return_buffer743 = alloca float, align 4
  %result_from_other_lane741 = alloca float, align 4
  %return_buffer740 = alloca float, align 4
  %result_from_other_lane738 = alloca float, align 4
  %return_buffer737 = alloca float, align 4
  %result_from_other_lane735 = alloca float, align 4
  %return_buffer734 = alloca float, align 4
  %result_from_other_lane732 = alloca float, align 4
  %return_buffer730 = alloca float, align 4
  %return_buffer721 = alloca float, align 4
  %tile_loop.invar_address710 = alloca i32, align 4
  %return_buffer706 = alloca float, align 4
  %return_buffer699 = alloca float, align 4
  %tile_loop.invar_address693 = alloca i32, align 4
  %y_in_tile.invar_address684 = alloca i32, align 4
  %partial_reduction_result670 = alloca float, align 4
  %reduction_input_address669 = alloca float, align 4
  %return_buffer665 = alloca float, align 4
  %result_from_other_lane663 = alloca float, align 4
  %return_buffer662 = alloca float, align 4
  %result_from_other_lane660 = alloca float, align 4
  %return_buffer659 = alloca float, align 4
  %result_from_other_lane657 = alloca float, align 4
  %return_buffer656 = alloca float, align 4
  %result_from_other_lane654 = alloca float, align 4
  %return_buffer653 = alloca float, align 4
  %result_from_other_lane651 = alloca float, align 4
  %initial_value_addr650 = alloca float, align 4
  %return_buffer645 = alloca float, align 4
  %result_from_other_lane643 = alloca float, align 4
  %return_buffer642 = alloca float, align 4
  %result_from_other_lane640 = alloca float, align 4
  %return_buffer639 = alloca float, align 4
  %result_from_other_lane637 = alloca float, align 4
  %return_buffer636 = alloca float, align 4
  %result_from_other_lane634 = alloca float, align 4
  %return_buffer633 = alloca float, align 4
  %result_from_other_lane631 = alloca float, align 4
  %return_buffer629 = alloca float, align 4
  %return_buffer620 = alloca float, align 4
  %tile_loop.invar_address609 = alloca i32, align 4
  %return_buffer605 = alloca float, align 4
  %return_buffer598 = alloca float, align 4
  %tile_loop.invar_address592 = alloca i32, align 4
  %y_in_tile.invar_address583 = alloca i32, align 4
  %partial_reduction_result569 = alloca float, align 4
  %reduction_input_address568 = alloca float, align 4
  %return_buffer564 = alloca float, align 4
  %result_from_other_lane562 = alloca float, align 4
  %return_buffer561 = alloca float, align 4
  %result_from_other_lane559 = alloca float, align 4
  %return_buffer558 = alloca float, align 4
  %result_from_other_lane556 = alloca float, align 4
  %return_buffer555 = alloca float, align 4
  %result_from_other_lane553 = alloca float, align 4
  %return_buffer552 = alloca float, align 4
  %result_from_other_lane550 = alloca float, align 4
  %initial_value_addr549 = alloca float, align 4
  %return_buffer544 = alloca float, align 4
  %result_from_other_lane542 = alloca float, align 4
  %return_buffer541 = alloca float, align 4
  %result_from_other_lane539 = alloca float, align 4
  %return_buffer538 = alloca float, align 4
  %result_from_other_lane536 = alloca float, align 4
  %return_buffer535 = alloca float, align 4
  %result_from_other_lane533 = alloca float, align 4
  %return_buffer532 = alloca float, align 4
  %result_from_other_lane530 = alloca float, align 4
  %return_buffer528 = alloca float, align 4
  %return_buffer519 = alloca float, align 4
  %tile_loop.invar_address508 = alloca i32, align 4
  %return_buffer504 = alloca float, align 4
  %return_buffer497 = alloca float, align 4
  %tile_loop.invar_address491 = alloca i32, align 4
  %y_in_tile.invar_address482 = alloca i32, align 4
  %partial_reduction_result468 = alloca float, align 4
  %reduction_input_address467 = alloca float, align 4
  %return_buffer463 = alloca float, align 4
  %result_from_other_lane461 = alloca float, align 4
  %return_buffer460 = alloca float, align 4
  %result_from_other_lane458 = alloca float, align 4
  %return_buffer457 = alloca float, align 4
  %result_from_other_lane455 = alloca float, align 4
  %return_buffer454 = alloca float, align 4
  %result_from_other_lane452 = alloca float, align 4
  %return_buffer451 = alloca float, align 4
  %result_from_other_lane449 = alloca float, align 4
  %initial_value_addr448 = alloca float, align 4
  %return_buffer443 = alloca float, align 4
  %result_from_other_lane441 = alloca float, align 4
  %return_buffer440 = alloca float, align 4
  %result_from_other_lane438 = alloca float, align 4
  %return_buffer437 = alloca float, align 4
  %result_from_other_lane435 = alloca float, align 4
  %return_buffer434 = alloca float, align 4
  %result_from_other_lane432 = alloca float, align 4
  %return_buffer431 = alloca float, align 4
  %result_from_other_lane429 = alloca float, align 4
  %return_buffer427 = alloca float, align 4
  %return_buffer418 = alloca float, align 4
  %tile_loop.invar_address407 = alloca i32, align 4
  %return_buffer403 = alloca float, align 4
  %return_buffer396 = alloca float, align 4
  %tile_loop.invar_address390 = alloca i32, align 4
  %y_in_tile.invar_address381 = alloca i32, align 4
  %partial_reduction_result367 = alloca float, align 4
  %reduction_input_address366 = alloca float, align 4
  %return_buffer362 = alloca float, align 4
  %result_from_other_lane360 = alloca float, align 4
  %return_buffer359 = alloca float, align 4
  %result_from_other_lane357 = alloca float, align 4
  %return_buffer356 = alloca float, align 4
  %result_from_other_lane354 = alloca float, align 4
  %return_buffer353 = alloca float, align 4
  %result_from_other_lane351 = alloca float, align 4
  %return_buffer350 = alloca float, align 4
  %result_from_other_lane348 = alloca float, align 4
  %initial_value_addr347 = alloca float, align 4
  %return_buffer342 = alloca float, align 4
  %result_from_other_lane340 = alloca float, align 4
  %return_buffer339 = alloca float, align 4
  %result_from_other_lane337 = alloca float, align 4
  %return_buffer336 = alloca float, align 4
  %result_from_other_lane334 = alloca float, align 4
  %return_buffer333 = alloca float, align 4
  %result_from_other_lane331 = alloca float, align 4
  %return_buffer330 = alloca float, align 4
  %result_from_other_lane328 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %tile_loop.invar_address306 = alloca i32, align 4
  %return_buffer302 = alloca float, align 4
  %return_buffer295 = alloca float, align 4
  %tile_loop.invar_address289 = alloca i32, align 4
  %y_in_tile.invar_address280 = alloca i32, align 4
  %partial_reduction_result266 = alloca float, align 4
  %reduction_input_address265 = alloca float, align 4
  %return_buffer261 = alloca float, align 4
  %result_from_other_lane259 = alloca float, align 4
  %return_buffer258 = alloca float, align 4
  %result_from_other_lane256 = alloca float, align 4
  %return_buffer255 = alloca float, align 4
  %result_from_other_lane253 = alloca float, align 4
  %return_buffer252 = alloca float, align 4
  %result_from_other_lane250 = alloca float, align 4
  %return_buffer249 = alloca float, align 4
  %result_from_other_lane247 = alloca float, align 4
  %initial_value_addr246 = alloca float, align 4
  %return_buffer241 = alloca float, align 4
  %result_from_other_lane239 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %result_from_other_lane236 = alloca float, align 4
  %return_buffer235 = alloca float, align 4
  %result_from_other_lane233 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %result_from_other_lane230 = alloca float, align 4
  %return_buffer229 = alloca float, align 4
  %result_from_other_lane227 = alloca float, align 4
  %return_buffer225 = alloca float, align 4
  %return_buffer216 = alloca float, align 4
  %tile_loop.invar_address205 = alloca i32, align 4
  %return_buffer201 = alloca float, align 4
  %return_buffer194 = alloca float, align 4
  %tile_loop.invar_address188 = alloca i32, align 4
  %y_in_tile.invar_address179 = alloca i32, align 4
  %partial_reduction_result165 = alloca float, align 4
  %reduction_input_address164 = alloca float, align 4
  %return_buffer160 = alloca float, align 4
  %result_from_other_lane158 = alloca float, align 4
  %return_buffer157 = alloca float, align 4
  %result_from_other_lane155 = alloca float, align 4
  %return_buffer154 = alloca float, align 4
  %result_from_other_lane152 = alloca float, align 4
  %return_buffer151 = alloca float, align 4
  %result_from_other_lane149 = alloca float, align 4
  %return_buffer148 = alloca float, align 4
  %result_from_other_lane146 = alloca float, align 4
  %initial_value_addr145 = alloca float, align 4
  %return_buffer140 = alloca float, align 4
  %result_from_other_lane138 = alloca float, align 4
  %return_buffer137 = alloca float, align 4
  %result_from_other_lane135 = alloca float, align 4
  %return_buffer134 = alloca float, align 4
  %result_from_other_lane132 = alloca float, align 4
  %return_buffer131 = alloca float, align 4
  %result_from_other_lane129 = alloca float, align 4
  %return_buffer128 = alloca float, align 4
  %result_from_other_lane126 = alloca float, align 4
  %return_buffer124 = alloca float, align 4
  %return_buffer115 = alloca float, align 4
  %tile_loop.invar_address104 = alloca i32, align 4
  %return_buffer100 = alloca float, align 4
  %return_buffer93 = alloca float, align 4
  %tile_loop.invar_address87 = alloca i32, align 4
  %y_in_tile.invar_address78 = alloca i32, align 4
  %partial_reduction_result64 = alloca float, align 4
  %reduction_input_address63 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %result_from_other_lane60 = alloca float, align 4
  %return_buffer59 = alloca float, align 4
  %result_from_other_lane57 = alloca float, align 4
  %return_buffer56 = alloca float, align 4
  %result_from_other_lane54 = alloca float, align 4
  %return_buffer53 = alloca float, align 4
  %result_from_other_lane51 = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %result_from_other_lane48 = alloca float, align 4
  %initial_value_addr = alloca float, align 4
  %return_buffer47 = alloca float, align 4
  %result_from_other_lane45 = alloca float, align 4
  %return_buffer44 = alloca float, align 4
  %result_from_other_lane42 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %tile_loop.invar_address15 = alloca i32, align 4
  %return_buffer11 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !217
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %inter_warp_reduce-after, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %inter_warp_reduce-after144, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %inter_warp_reduce-after245, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %inter_warp_reduce-after346, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %inter_warp_reduce-after447, %reduce-group-3-after
  %6 = icmp eq i32 %0, 5
  br i1 %6, label %reduce-group-5-true, label %reduce-group-5-after

reduce-group-5-after:                             ; preds = %inter_warp_reduce-after548, %reduce-group-4-after
  %7 = icmp eq i32 %0, 6
  br i1 %7, label %reduce-group-6-true, label %reduce-group-6-after

reduce-group-6-after:                             ; preds = %inter_warp_reduce-after649, %reduce-group-5-after
  %8 = icmp eq i32 %0, 7
  br i1 %8, label %reduce-group-7-true, label %reduce-group-7-after

reduce-group-7-after:                             ; preds = %inter_warp_reduce-after750, %reduce-group-6-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_75_constant_19 = load float, ptr @6, align 4
  %9 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_75_constant_19, ptr %9, align 4
  %10 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %11 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %12 = urem i32 %10, 512
  %13 = udiv i32 %10, 512
  %14 = mul i32 %11, 1
  %15 = add i32 %14, %13
  %16 = icmp ult i32 %15, 1
  br i1 %16, label %17, label %early_return

17:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %12, 512
  %thread_id.y = udiv i32 %12, 512
  %lane_id = urem i32 %12, 32
  %18 = udiv i32 %15, 1
  %19 = urem i32 %18, 1
  %20 = udiv i32 %15, 1
  %21 = urem i32 %20, 1
  %22 = udiv i32 %15, 1
  %23 = icmp eq i32 %21, 0
  %tile_bound = select i1 %23, i32 1, i32 1
  %24 = icmp eq i32 %19, 0
  %tile_bound1 = select i1 %24, i32 8192, i32 8192
  %tile_origin.0 = mul i32 %22, 1
  %tile_origin.1 = mul i32 %21, 1
  %tile_origin.2 = mul i32 %19, 8192
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %is_full_tile-after, %17
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %25 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %25, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 1
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %26 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %27 = icmp eq i32 8192, %tile_bound1
  br i1 %27, label %is_full_tile-true, label %is_full_tile-false

is_full_tile-after:                               ; preds = %tile_loop.loop_exit12, %tile_loop.loop_exit
  br label %y_in_tile.loop_header, !llvm.loop !242

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %partial_reduction_result34 = load float, ptr %current_output, align 4
  %28 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 16, i32 31)
  store float %28, ptr %result_from_other_lane, align 4
  call void @region_1_20__1(ptr %current_output, ptr %result_from_other_lane, ptr %return_buffer35)
  %29 = load float, ptr %return_buffer35, align 4
  store float %29, ptr %current_output, align 4
  %partial_reduction_result37 = load float, ptr %current_output, align 4
  %30 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 8, i32 31)
  store float %30, ptr %result_from_other_lane36, align 4
  call void @region_1_20__1(ptr %current_output, ptr %result_from_other_lane36, ptr %return_buffer38)
  %31 = load float, ptr %return_buffer38, align 4
  store float %31, ptr %current_output, align 4
  %partial_reduction_result40 = load float, ptr %current_output, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 4, i32 31)
  store float %32, ptr %result_from_other_lane39, align 4
  call void @region_1_20__1(ptr %current_output, ptr %result_from_other_lane39, ptr %return_buffer41)
  %33 = load float, ptr %return_buffer41, align 4
  store float %33, ptr %current_output, align 4
  %partial_reduction_result43 = load float, ptr %current_output, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result43, i32 2, i32 31)
  store float %34, ptr %result_from_other_lane42, align 4
  call void @region_1_20__1(ptr %current_output, ptr %result_from_other_lane42, ptr %return_buffer44)
  %35 = load float, ptr %return_buffer44, align 4
  store float %35, ptr %current_output, align 4
  %partial_reduction_result46 = load float, ptr %current_output, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result46, i32 1, i32 31)
  store float %36, ptr %result_from_other_lane45, align 4
  call void @region_1_20__1(ptr %current_output, ptr %result_from_other_lane45, ptr %return_buffer47)
  %37 = load float, ptr %return_buffer47, align 4
  store float %37, ptr %current_output, align 4
  %38 = udiv i32 %thread_id.x, 32
  %39 = icmp eq i32 %lane_id, 0
  br i1 %39, label %intra_warp_reduce_write-true, label %intra_warp_reduce_write-after

intra_warp_reduce_write-after:                    ; preds = %intra_warp_reduce_write-true, %y_in_tile.loop_exit
  call void @llvm.nvvm.barrier0()
  %40 = icmp eq i32 %38, 0
  br i1 %40, label %inter_warp_reduce-true, label %inter_warp_reduce-after

inter_warp_reduce-after:                          ; preds = %reduction_write_output-after, %intra_warp_reduce_write-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

is_full_tile-true:                                ; preds = %y_in_tile.loop_body
  %41 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %tile_loop.loop_body, %is_full_tile-true
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %42 = icmp uge i32 %tile_loop.indvar, 8
  br i1 %42, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %43 = icmp eq i32 %tile_loop.indvar, 0
  %44 = mul i32 %tile_loop.indvar, 1024
  %45 = add i32 %44, 0
  %x_loc = add i32 %45, %41
  %46 = add i32 %tile_origin.1, %y_in_tile.indvar
  %47 = add i32 %tile_origin.2, %x_loc
  %48 = mul nuw nsw i32 %47, 1
  %49 = add nuw nsw i32 0, %48
  %50 = mul nuw nsw i32 %46, 8192
  %51 = add nuw nsw i32 %49, %50
  %52 = mul nuw nsw i32 %tile_origin.0, 8192
  %53 = add nuw nsw i32 %51, %52
  %54 = udiv i32 %53, 1
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %53
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %53
  %Arg_1.24 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %add.17 = fadd float %Arg_0.13, %Arg_1.24
  store float %add.17, ptr %reduction_input_address, align 4
  %55 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20__1(ptr %55, ptr %reduction_input_address, ptr %return_buffer)
  %56 = load float, ptr %return_buffer, align 4
  store float %56, ptr %55, align 4
  %57 = mul i32 %tile_loop.indvar, 1024
  %58 = add i32 %57, 1
  %x_loc5 = add i32 %58, %41
  %59 = add i32 %tile_origin.1, %y_in_tile.indvar
  %60 = add i32 %tile_origin.2, %x_loc5
  %61 = mul nuw nsw i32 %60, 1
  %62 = add nuw nsw i32 0, %61
  %63 = mul nuw nsw i32 %59, 8192
  %64 = add nuw nsw i32 %62, %63
  %65 = mul nuw nsw i32 %tile_origin.0, 8192
  %66 = add nuw nsw i32 %64, %65
  %67 = udiv i32 %66, 1
  %Arg_0.16 = getelementptr inbounds float, ptr %arg0, i32 %66
  %Arg_0.17 = load float, ptr %Arg_0.16, align 4, !invariant.load !197
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %66
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !197
  %add.1710 = fadd float %Arg_0.17, %Arg_1.29
  store float %add.1710, ptr %reduction_input_address, align 4
  %68 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20__1(ptr %68, ptr %reduction_input_address, ptr %return_buffer11)
  %69 = load float, ptr %return_buffer11, align 4
  store float %69, ptr %68, align 4
  br label %tile_loop.loop_header, !llvm.loop !243

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %is_full_tile-after

is_full_tile-false:                               ; preds = %y_in_tile.loop_body
  %70 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address15, align 4
  br label %tile_loop.loop_header13

tile_loop.loop_header13:                          ; preds = %x_in_tile-after27, %is_full_tile-false
  %tile_loop.indvar16 = load i32, ptr %tile_loop.invar_address15, align 4
  %71 = icmp uge i32 %tile_loop.indvar16, 8
  br i1 %71, label %tile_loop.loop_exit12, label %tile_loop.loop_body14

tile_loop.loop_body14:                            ; preds = %tile_loop.loop_header13
  %invar.inc17 = add nuw nsw i32 %tile_loop.indvar16, 1
  store i32 %invar.inc17, ptr %tile_loop.invar_address15, align 4
  %72 = icmp eq i32 %tile_loop.indvar16, 0
  %73 = mul i32 %tile_loop.indvar16, 1024
  %74 = add i32 %73, 0
  %x_loc18 = add i32 %74, %70
  %75 = add i32 %tile_origin.1, %y_in_tile.indvar
  %76 = add i32 %tile_origin.2, %x_loc18
  %77 = icmp ult i32 %x_loc18, %tile_bound1
  br i1 %77, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body14
  %78 = mul i32 %tile_loop.indvar16, 1024
  %79 = add i32 %78, 1
  %x_loc25 = add i32 %79, %70
  %80 = add i32 %tile_origin.1, %y_in_tile.indvar
  %81 = add i32 %tile_origin.2, %x_loc25
  %82 = icmp ult i32 %x_loc25, %tile_bound1
  br i1 %82, label %x_in_tile-true26, label %x_in_tile-after27

x_in_tile-after27:                                ; preds = %x_in_tile-true26, %x_in_tile-after
  br label %tile_loop.loop_header13, !llvm.loop !244

tile_loop.loop_exit12:                            ; preds = %tile_loop.loop_header13
  br label %is_full_tile-after

x_in_tile-true:                                   ; preds = %tile_loop.loop_body14
  %83 = mul nuw nsw i32 %76, 1
  %84 = add nuw nsw i32 0, %83
  %85 = mul nuw nsw i32 %75, 8192
  %86 = add nuw nsw i32 %84, %85
  %87 = mul nuw nsw i32 %tile_origin.0, 8192
  %88 = add nuw nsw i32 %86, %87
  %89 = udiv i32 %88, 1
  %Arg_0.119 = getelementptr inbounds float, ptr %arg0, i32 %88
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !197
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %88
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %add.1723 = fadd float %Arg_0.120, %Arg_1.222
  store float %add.1723, ptr %reduction_input_address, align 4
  %90 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20__1(ptr %90, ptr %reduction_input_address, ptr %return_buffer24)
  %91 = load float, ptr %return_buffer24, align 4
  store float %91, ptr %90, align 4
  br label %x_in_tile-after

x_in_tile-true26:                                 ; preds = %x_in_tile-after
  %92 = mul nuw nsw i32 %81, 1
  %93 = add nuw nsw i32 0, %92
  %94 = mul nuw nsw i32 %80, 8192
  %95 = add nuw nsw i32 %93, %94
  %96 = mul nuw nsw i32 %tile_origin.0, 8192
  %97 = add nuw nsw i32 %95, %96
  %98 = udiv i32 %97, 1
  %Arg_0.128 = getelementptr inbounds float, ptr %arg0, i32 %97
  %Arg_0.129 = load float, ptr %Arg_0.128, align 4, !invariant.load !197
  %Arg_1.230 = getelementptr inbounds float, ptr %arg1, i32 %97
  %Arg_1.231 = load float, ptr %Arg_1.230, align 4, !invariant.load !197
  %add.1732 = fadd float %Arg_0.129, %Arg_1.231
  store float %add.1732, ptr %reduction_input_address, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  call void @region_1_20__1(ptr %99, ptr %reduction_input_address, ptr %return_buffer33)
  %100 = load float, ptr %return_buffer33, align 4
  store float %100, ptr %99, align 4
  br label %x_in_tile-after27

intra_warp_reduce_write-true:                     ; preds = %y_in_tile.loop_exit
  %101 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i32 0, i32 %13, i32 0, i32 %38
  %102 = addrspacecast ptr addrspace(3) %101 to ptr
  %103 = load float, ptr %current_output, align 4
  store float %103, ptr %102, align 4
  br label %intra_warp_reduce_write-after

inter_warp_reduce-true:                           ; preds = %intra_warp_reduce_write-after
  %104 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache14, i32 0, i32 %13, i32 0, i32 %lane_id
  %105 = addrspacecast ptr addrspace(3) %104 to ptr
  store float %region_0_75_constant_19, ptr %initial_value_addr, align 4
  %106 = icmp ult i32 %thread_id.x, 16
  %107 = select i1 %106, ptr %105, ptr %initial_value_addr
  %partial_reduction_result49 = load float, ptr %107, align 4
  %108 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result49, i32 16, i32 31)
  store float %108, ptr %result_from_other_lane48, align 4
  call void @region_1_20__1(ptr %107, ptr %result_from_other_lane48, ptr %return_buffer50)
  %109 = load float, ptr %return_buffer50, align 4
  store float %109, ptr %107, align 4
  %partial_reduction_result52 = load float, ptr %107, align 4
  %110 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result52, i32 8, i32 31)
  store float %110, ptr %result_from_other_lane51, align 4
  call void @region_1_20__1(ptr %107, ptr %result_from_other_lane51, ptr %return_buffer53)
  %111 = load float, ptr %return_buffer53, align 4
  store float %111, ptr %107, align 4
  %partial_reduction_result55 = load float, ptr %107, align 4
  %112 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result55, i32 4, i32 31)
  store float %112, ptr %result_from_other_lane54, align 4
  call void @region_1_20__1(ptr %107, ptr %result_from_other_lane54, ptr %return_buffer56)
  %113 = load float, ptr %return_buffer56, align 4
  store float %113, ptr %107, align 4
  %partial_reduction_result58 = load float, ptr %107, align 4
  %114 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result58, i32 2, i32 31)
  store float %114, ptr %result_from_other_lane57, align 4
  call void @region_1_20__1(ptr %107, ptr %result_from_other_lane57, ptr %return_buffer59)
  %115 = load float, ptr %return_buffer59, align 4
  store float %115, ptr %107, align 4
  %partial_reduction_result61 = load float, ptr %107, align 4
  %116 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result61, i32 1, i32 31)
  store float %116, ptr %result_from_other_lane60, align 4
  call void @region_1_20__1(ptr %107, ptr %result_from_other_lane60, ptr %return_buffer62)
  %117 = load float, ptr %return_buffer62, align 4
  store float %117, ptr %107, align 4
  %118 = icmp eq i32 %thread_id.x, 0
  br i1 %118, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %inter_warp_reduce-true
  br label %inter_warp_reduce-after

reduction_write_output-true:                      ; preds = %inter_warp_reduce-true
  %119 = mul i32 %thread_id.x, 2
  %120 = add i32 %tile_origin.1, %thread_id.y
  %121 = add i32 %tile_origin.2, %119
  %122 = add i32 %121, 0
  %output = load float, ptr %107, align 4
  store float %output, ptr %arg16, align 4
  br label %reduction_write_output-after

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %region_0_75_constant_1965 = load float, ptr @6, align 4
  %123 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  store float %region_0_75_constant_1965, ptr %123, align 4
  %124 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %125 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %126 = urem i32 %124, 512
  %127 = udiv i32 %124, 512
  %128 = mul i32 %125, 1
  %129 = add i32 %128, %127
  %130 = icmp ult i32 %129, 1
  br i1 %130, label %131, label %early_return66

131:                                              ; preds = %reduce-group-1-true
  %thread_id.x67 = urem i32 %126, 512
  %thread_id.y68 = udiv i32 %126, 512
  %lane_id69 = urem i32 %126, 32
  %132 = udiv i32 %129, 1
  %133 = urem i32 %132, 1
  %134 = udiv i32 %129, 1
  %135 = urem i32 %134, 1
  %136 = udiv i32 %129, 1
  %137 = icmp eq i32 %135, 0
  %tile_bound70 = select i1 %137, i32 1, i32 1
  %138 = icmp eq i32 %133, 0
  %tile_bound71 = select i1 %138, i32 8192, i32 8192
  %tile_origin.072 = mul i32 %136, 1
  %tile_origin.173 = mul i32 %135, 1
  %tile_origin.274 = mul i32 %133, 8192
  store i32 %thread_id.y68, ptr %y_in_tile.invar_address78, align 4
  br label %y_in_tile.loop_header76

y_in_tile.loop_header76:                          ; preds = %is_full_tile-after83, %131
  %y_in_tile.indvar79 = load i32, ptr %y_in_tile.invar_address78, align 4
  %139 = icmp uge i32 %y_in_tile.indvar79, %tile_bound70
  br i1 %139, label %y_in_tile.loop_exit75, label %y_in_tile.loop_body77

y_in_tile.loop_body77:                            ; preds = %y_in_tile.loop_header76
  %invar.inc80 = add nuw nsw i32 %y_in_tile.indvar79, 1
  store i32 %invar.inc80, ptr %y_in_tile.invar_address78, align 4
  %140 = icmp eq i32 %y_in_tile.indvar79, %thread_id.y68
  %141 = icmp eq i32 8192, %tile_bound71
  br i1 %141, label %is_full_tile-true81, label %is_full_tile-false82

is_full_tile-after83:                             ; preds = %tile_loop.loop_exit101, %tile_loop.loop_exit84
  br label %y_in_tile.loop_header76, !llvm.loop !245

y_in_tile.loop_exit75:                            ; preds = %y_in_tile.loop_header76
  %current_output125 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  %partial_reduction_result127 = load float, ptr %current_output125, align 4
  %142 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result127, i32 16, i32 31)
  store float %142, ptr %result_from_other_lane126, align 4
  call void @region_2_27__1(ptr %current_output125, ptr %result_from_other_lane126, ptr %return_buffer128)
  %143 = load float, ptr %return_buffer128, align 4
  store float %143, ptr %current_output125, align 4
  %partial_reduction_result130 = load float, ptr %current_output125, align 4
  %144 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result130, i32 8, i32 31)
  store float %144, ptr %result_from_other_lane129, align 4
  call void @region_2_27__1(ptr %current_output125, ptr %result_from_other_lane129, ptr %return_buffer131)
  %145 = load float, ptr %return_buffer131, align 4
  store float %145, ptr %current_output125, align 4
  %partial_reduction_result133 = load float, ptr %current_output125, align 4
  %146 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result133, i32 4, i32 31)
  store float %146, ptr %result_from_other_lane132, align 4
  call void @region_2_27__1(ptr %current_output125, ptr %result_from_other_lane132, ptr %return_buffer134)
  %147 = load float, ptr %return_buffer134, align 4
  store float %147, ptr %current_output125, align 4
  %partial_reduction_result136 = load float, ptr %current_output125, align 4
  %148 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result136, i32 2, i32 31)
  store float %148, ptr %result_from_other_lane135, align 4
  call void @region_2_27__1(ptr %current_output125, ptr %result_from_other_lane135, ptr %return_buffer137)
  %149 = load float, ptr %return_buffer137, align 4
  store float %149, ptr %current_output125, align 4
  %partial_reduction_result139 = load float, ptr %current_output125, align 4
  %150 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result139, i32 1, i32 31)
  store float %150, ptr %result_from_other_lane138, align 4
  call void @region_2_27__1(ptr %current_output125, ptr %result_from_other_lane138, ptr %return_buffer140)
  %151 = load float, ptr %return_buffer140, align 4
  store float %151, ptr %current_output125, align 4
  %152 = udiv i32 %thread_id.x67, 32
  %153 = icmp eq i32 %lane_id69, 0
  br i1 %153, label %intra_warp_reduce_write-true141, label %intra_warp_reduce_write-after142

intra_warp_reduce_write-after142:                 ; preds = %intra_warp_reduce_write-true141, %y_in_tile.loop_exit75
  call void @llvm.nvvm.barrier0()
  %154 = icmp eq i32 %152, 0
  br i1 %154, label %inter_warp_reduce-true143, label %inter_warp_reduce-after144

inter_warp_reduce-after144:                       ; preds = %reduction_write_output-after162, %intra_warp_reduce_write-after142
  br label %reduce-group-1-after

early_return66:                                   ; preds = %reduce-group-1-true
  ret void

is_full_tile-true81:                              ; preds = %y_in_tile.loop_body77
  %155 = mul i32 %thread_id.x67, 2
  store i32 0, ptr %tile_loop.invar_address87, align 4
  br label %tile_loop.loop_header85

tile_loop.loop_header85:                          ; preds = %tile_loop.loop_body86, %is_full_tile-true81
  %tile_loop.indvar88 = load i32, ptr %tile_loop.invar_address87, align 4
  %156 = icmp uge i32 %tile_loop.indvar88, 8
  br i1 %156, label %tile_loop.loop_exit84, label %tile_loop.loop_body86

tile_loop.loop_body86:                            ; preds = %tile_loop.loop_header85
  %invar.inc89 = add nuw nsw i32 %tile_loop.indvar88, 1
  store i32 %invar.inc89, ptr %tile_loop.invar_address87, align 4
  %157 = icmp eq i32 %tile_loop.indvar88, 0
  %158 = mul i32 %tile_loop.indvar88, 1024
  %159 = add i32 %158, 0
  %x_loc90 = add i32 %159, %155
  %160 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %161 = add i32 %tile_origin.274, %x_loc90
  %162 = mul nuw nsw i32 %161, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %160, 8192
  %165 = add nuw nsw i32 %163, %164
  %166 = mul nuw nsw i32 %tile_origin.072, 8192
  %167 = add nuw nsw i32 %165, %166
  %168 = udiv i32 %167, 1
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %167
  %Arg_2.391 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %167
  %Arg_3.492 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %add.25 = fadd float %Arg_2.391, %Arg_3.492
  store float %add.25, ptr %reduction_input_address63, align 4
  %169 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27__1(ptr %169, ptr %reduction_input_address63, ptr %return_buffer93)
  %170 = load float, ptr %return_buffer93, align 4
  store float %170, ptr %169, align 4
  %171 = mul i32 %tile_loop.indvar88, 1024
  %172 = add i32 %171, 1
  %x_loc94 = add i32 %172, %155
  %173 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %174 = add i32 %tile_origin.274, %x_loc94
  %175 = mul nuw nsw i32 %174, 1
  %176 = add nuw nsw i32 0, %175
  %177 = mul nuw nsw i32 %173, 8192
  %178 = add nuw nsw i32 %176, %177
  %179 = mul nuw nsw i32 %tile_origin.072, 8192
  %180 = add nuw nsw i32 %178, %179
  %181 = udiv i32 %180, 1
  %Arg_2.395 = getelementptr inbounds float, ptr %arg2, i32 %180
  %Arg_2.396 = load float, ptr %Arg_2.395, align 4, !invariant.load !197
  %Arg_3.497 = getelementptr inbounds float, ptr %arg3, i32 %180
  %Arg_3.498 = load float, ptr %Arg_3.497, align 4, !invariant.load !197
  %add.2599 = fadd float %Arg_2.396, %Arg_3.498
  store float %add.2599, ptr %reduction_input_address63, align 4
  %182 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27__1(ptr %182, ptr %reduction_input_address63, ptr %return_buffer100)
  %183 = load float, ptr %return_buffer100, align 4
  store float %183, ptr %182, align 4
  br label %tile_loop.loop_header85, !llvm.loop !246

tile_loop.loop_exit84:                            ; preds = %tile_loop.loop_header85
  br label %is_full_tile-after83

is_full_tile-false82:                             ; preds = %y_in_tile.loop_body77
  %184 = mul i32 %thread_id.x67, 2
  store i32 0, ptr %tile_loop.invar_address104, align 4
  br label %tile_loop.loop_header102

tile_loop.loop_header102:                         ; preds = %x_in_tile-after118, %is_full_tile-false82
  %tile_loop.indvar105 = load i32, ptr %tile_loop.invar_address104, align 4
  %185 = icmp uge i32 %tile_loop.indvar105, 8
  br i1 %185, label %tile_loop.loop_exit101, label %tile_loop.loop_body103

tile_loop.loop_body103:                           ; preds = %tile_loop.loop_header102
  %invar.inc106 = add nuw nsw i32 %tile_loop.indvar105, 1
  store i32 %invar.inc106, ptr %tile_loop.invar_address104, align 4
  %186 = icmp eq i32 %tile_loop.indvar105, 0
  %187 = mul i32 %tile_loop.indvar105, 1024
  %188 = add i32 %187, 0
  %x_loc107 = add i32 %188, %184
  %189 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %190 = add i32 %tile_origin.274, %x_loc107
  %191 = icmp ult i32 %x_loc107, %tile_bound71
  br i1 %191, label %x_in_tile-true108, label %x_in_tile-after109

x_in_tile-after109:                               ; preds = %x_in_tile-true108, %tile_loop.loop_body103
  %192 = mul i32 %tile_loop.indvar105, 1024
  %193 = add i32 %192, 1
  %x_loc116 = add i32 %193, %184
  %194 = add i32 %tile_origin.173, %y_in_tile.indvar79
  %195 = add i32 %tile_origin.274, %x_loc116
  %196 = icmp ult i32 %x_loc116, %tile_bound71
  br i1 %196, label %x_in_tile-true117, label %x_in_tile-after118

x_in_tile-after118:                               ; preds = %x_in_tile-true117, %x_in_tile-after109
  br label %tile_loop.loop_header102, !llvm.loop !247

tile_loop.loop_exit101:                           ; preds = %tile_loop.loop_header102
  br label %is_full_tile-after83

x_in_tile-true108:                                ; preds = %tile_loop.loop_body103
  %197 = mul nuw nsw i32 %190, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %189, 8192
  %200 = add nuw nsw i32 %198, %199
  %201 = mul nuw nsw i32 %tile_origin.072, 8192
  %202 = add nuw nsw i32 %200, %201
  %203 = udiv i32 %202, 1
  %Arg_2.3110 = getelementptr inbounds float, ptr %arg2, i32 %202
  %Arg_2.3111 = load float, ptr %Arg_2.3110, align 4, !invariant.load !197
  %Arg_3.4112 = getelementptr inbounds float, ptr %arg3, i32 %202
  %Arg_3.4113 = load float, ptr %Arg_3.4112, align 4, !invariant.load !197
  %add.25114 = fadd float %Arg_2.3111, %Arg_3.4113
  store float %add.25114, ptr %reduction_input_address63, align 4
  %204 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27__1(ptr %204, ptr %reduction_input_address63, ptr %return_buffer115)
  %205 = load float, ptr %return_buffer115, align 4
  store float %205, ptr %204, align 4
  br label %x_in_tile-after109

x_in_tile-true117:                                ; preds = %x_in_tile-after109
  %206 = mul nuw nsw i32 %195, 1
  %207 = add nuw nsw i32 0, %206
  %208 = mul nuw nsw i32 %194, 8192
  %209 = add nuw nsw i32 %207, %208
  %210 = mul nuw nsw i32 %tile_origin.072, 8192
  %211 = add nuw nsw i32 %209, %210
  %212 = udiv i32 %211, 1
  %Arg_2.3119 = getelementptr inbounds float, ptr %arg2, i32 %211
  %Arg_2.3120 = load float, ptr %Arg_2.3119, align 4, !invariant.load !197
  %Arg_3.4121 = getelementptr inbounds float, ptr %arg3, i32 %211
  %Arg_3.4122 = load float, ptr %Arg_3.4121, align 4, !invariant.load !197
  %add.25123 = fadd float %Arg_2.3120, %Arg_3.4122
  store float %add.25123, ptr %reduction_input_address63, align 4
  %213 = getelementptr inbounds float, ptr %partial_reduction_result64, i32 0
  call void @region_2_27__1(ptr %213, ptr %reduction_input_address63, ptr %return_buffer124)
  %214 = load float, ptr %return_buffer124, align 4
  store float %214, ptr %213, align 4
  br label %x_in_tile-after118

intra_warp_reduce_write-true141:                  ; preds = %y_in_tile.loop_exit75
  %215 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %127, i32 0, i32 %152
  %216 = addrspacecast ptr addrspace(3) %215 to ptr
  %217 = load float, ptr %current_output125, align 4
  store float %217, ptr %216, align 4
  br label %intra_warp_reduce_write-after142

inter_warp_reduce-true143:                        ; preds = %intra_warp_reduce_write-after142
  %218 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache15, i32 0, i32 %127, i32 0, i32 %lane_id69
  %219 = addrspacecast ptr addrspace(3) %218 to ptr
  store float %region_0_75_constant_1965, ptr %initial_value_addr145, align 4
  %220 = icmp ult i32 %thread_id.x67, 16
  %221 = select i1 %220, ptr %219, ptr %initial_value_addr145
  %partial_reduction_result147 = load float, ptr %221, align 4
  %222 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result147, i32 16, i32 31)
  store float %222, ptr %result_from_other_lane146, align 4
  call void @region_2_27__1(ptr %221, ptr %result_from_other_lane146, ptr %return_buffer148)
  %223 = load float, ptr %return_buffer148, align 4
  store float %223, ptr %221, align 4
  %partial_reduction_result150 = load float, ptr %221, align 4
  %224 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result150, i32 8, i32 31)
  store float %224, ptr %result_from_other_lane149, align 4
  call void @region_2_27__1(ptr %221, ptr %result_from_other_lane149, ptr %return_buffer151)
  %225 = load float, ptr %return_buffer151, align 4
  store float %225, ptr %221, align 4
  %partial_reduction_result153 = load float, ptr %221, align 4
  %226 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result153, i32 4, i32 31)
  store float %226, ptr %result_from_other_lane152, align 4
  call void @region_2_27__1(ptr %221, ptr %result_from_other_lane152, ptr %return_buffer154)
  %227 = load float, ptr %return_buffer154, align 4
  store float %227, ptr %221, align 4
  %partial_reduction_result156 = load float, ptr %221, align 4
  %228 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result156, i32 2, i32 31)
  store float %228, ptr %result_from_other_lane155, align 4
  call void @region_2_27__1(ptr %221, ptr %result_from_other_lane155, ptr %return_buffer157)
  %229 = load float, ptr %return_buffer157, align 4
  store float %229, ptr %221, align 4
  %partial_reduction_result159 = load float, ptr %221, align 4
  %230 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result159, i32 1, i32 31)
  store float %230, ptr %result_from_other_lane158, align 4
  call void @region_2_27__1(ptr %221, ptr %result_from_other_lane158, ptr %return_buffer160)
  %231 = load float, ptr %return_buffer160, align 4
  store float %231, ptr %221, align 4
  %232 = icmp eq i32 %thread_id.x67, 0
  br i1 %232, label %reduction_write_output-true161, label %reduction_write_output-after162

reduction_write_output-after162:                  ; preds = %reduction_write_output-true161, %inter_warp_reduce-true143
  br label %inter_warp_reduce-after144

reduction_write_output-true161:                   ; preds = %inter_warp_reduce-true143
  %233 = mul i32 %thread_id.x67, 2
  %234 = add i32 %tile_origin.173, %thread_id.y68
  %235 = add i32 %tile_origin.274, %233
  %236 = add i32 %235, 0
  %output163 = load float, ptr %221, align 4
  store float %output163, ptr %arg17, align 4
  br label %reduction_write_output-after162

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %region_0_75_constant_19166 = load float, ptr @6, align 4
  %237 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  store float %region_0_75_constant_19166, ptr %237, align 4
  %238 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %239 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %240 = urem i32 %238, 512
  %241 = udiv i32 %238, 512
  %242 = mul i32 %239, 1
  %243 = add i32 %242, %241
  %244 = icmp ult i32 %243, 1
  br i1 %244, label %245, label %early_return167

245:                                              ; preds = %reduce-group-2-true
  %thread_id.x168 = urem i32 %240, 512
  %thread_id.y169 = udiv i32 %240, 512
  %lane_id170 = urem i32 %240, 32
  %246 = udiv i32 %243, 1
  %247 = urem i32 %246, 1
  %248 = udiv i32 %243, 1
  %249 = urem i32 %248, 1
  %250 = udiv i32 %243, 1
  %251 = icmp eq i32 %249, 0
  %tile_bound171 = select i1 %251, i32 1, i32 1
  %252 = icmp eq i32 %247, 0
  %tile_bound172 = select i1 %252, i32 8192, i32 8192
  %tile_origin.0173 = mul i32 %250, 1
  %tile_origin.1174 = mul i32 %249, 1
  %tile_origin.2175 = mul i32 %247, 8192
  store i32 %thread_id.y169, ptr %y_in_tile.invar_address179, align 4
  br label %y_in_tile.loop_header177

y_in_tile.loop_header177:                         ; preds = %is_full_tile-after184, %245
  %y_in_tile.indvar180 = load i32, ptr %y_in_tile.invar_address179, align 4
  %253 = icmp uge i32 %y_in_tile.indvar180, %tile_bound171
  br i1 %253, label %y_in_tile.loop_exit176, label %y_in_tile.loop_body178

y_in_tile.loop_body178:                           ; preds = %y_in_tile.loop_header177
  %invar.inc181 = add nuw nsw i32 %y_in_tile.indvar180, 1
  store i32 %invar.inc181, ptr %y_in_tile.invar_address179, align 4
  %254 = icmp eq i32 %y_in_tile.indvar180, %thread_id.y169
  %255 = icmp eq i32 8192, %tile_bound172
  br i1 %255, label %is_full_tile-true182, label %is_full_tile-false183

is_full_tile-after184:                            ; preds = %tile_loop.loop_exit202, %tile_loop.loop_exit185
  br label %y_in_tile.loop_header177, !llvm.loop !248

y_in_tile.loop_exit176:                           ; preds = %y_in_tile.loop_header177
  %current_output226 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  %partial_reduction_result228 = load float, ptr %current_output226, align 4
  %256 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result228, i32 16, i32 31)
  store float %256, ptr %result_from_other_lane227, align 4
  call void @region_3_34__1(ptr %current_output226, ptr %result_from_other_lane227, ptr %return_buffer229)
  %257 = load float, ptr %return_buffer229, align 4
  store float %257, ptr %current_output226, align 4
  %partial_reduction_result231 = load float, ptr %current_output226, align 4
  %258 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result231, i32 8, i32 31)
  store float %258, ptr %result_from_other_lane230, align 4
  call void @region_3_34__1(ptr %current_output226, ptr %result_from_other_lane230, ptr %return_buffer232)
  %259 = load float, ptr %return_buffer232, align 4
  store float %259, ptr %current_output226, align 4
  %partial_reduction_result234 = load float, ptr %current_output226, align 4
  %260 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result234, i32 4, i32 31)
  store float %260, ptr %result_from_other_lane233, align 4
  call void @region_3_34__1(ptr %current_output226, ptr %result_from_other_lane233, ptr %return_buffer235)
  %261 = load float, ptr %return_buffer235, align 4
  store float %261, ptr %current_output226, align 4
  %partial_reduction_result237 = load float, ptr %current_output226, align 4
  %262 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result237, i32 2, i32 31)
  store float %262, ptr %result_from_other_lane236, align 4
  call void @region_3_34__1(ptr %current_output226, ptr %result_from_other_lane236, ptr %return_buffer238)
  %263 = load float, ptr %return_buffer238, align 4
  store float %263, ptr %current_output226, align 4
  %partial_reduction_result240 = load float, ptr %current_output226, align 4
  %264 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result240, i32 1, i32 31)
  store float %264, ptr %result_from_other_lane239, align 4
  call void @region_3_34__1(ptr %current_output226, ptr %result_from_other_lane239, ptr %return_buffer241)
  %265 = load float, ptr %return_buffer241, align 4
  store float %265, ptr %current_output226, align 4
  %266 = udiv i32 %thread_id.x168, 32
  %267 = icmp eq i32 %lane_id170, 0
  br i1 %267, label %intra_warp_reduce_write-true242, label %intra_warp_reduce_write-after243

intra_warp_reduce_write-after243:                 ; preds = %intra_warp_reduce_write-true242, %y_in_tile.loop_exit176
  call void @llvm.nvvm.barrier0()
  %268 = icmp eq i32 %266, 0
  br i1 %268, label %inter_warp_reduce-true244, label %inter_warp_reduce-after245

inter_warp_reduce-after245:                       ; preds = %reduction_write_output-after263, %intra_warp_reduce_write-after243
  br label %reduce-group-2-after

early_return167:                                  ; preds = %reduce-group-2-true
  ret void

is_full_tile-true182:                             ; preds = %y_in_tile.loop_body178
  %269 = mul i32 %thread_id.x168, 2
  store i32 0, ptr %tile_loop.invar_address188, align 4
  br label %tile_loop.loop_header186

tile_loop.loop_header186:                         ; preds = %tile_loop.loop_body187, %is_full_tile-true182
  %tile_loop.indvar189 = load i32, ptr %tile_loop.invar_address188, align 4
  %270 = icmp uge i32 %tile_loop.indvar189, 8
  br i1 %270, label %tile_loop.loop_exit185, label %tile_loop.loop_body187

tile_loop.loop_body187:                           ; preds = %tile_loop.loop_header186
  %invar.inc190 = add nuw nsw i32 %tile_loop.indvar189, 1
  store i32 %invar.inc190, ptr %tile_loop.invar_address188, align 4
  %271 = icmp eq i32 %tile_loop.indvar189, 0
  %272 = mul i32 %tile_loop.indvar189, 1024
  %273 = add i32 %272, 0
  %x_loc191 = add i32 %273, %269
  %274 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %275 = add i32 %tile_origin.2175, %x_loc191
  %276 = mul nuw nsw i32 %275, 1
  %277 = add nuw nsw i32 0, %276
  %278 = mul nuw nsw i32 %274, 8192
  %279 = add nuw nsw i32 %277, %278
  %280 = mul nuw nsw i32 %tile_origin.0173, 8192
  %281 = add nuw nsw i32 %279, %280
  %282 = udiv i32 %281, 1
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %281
  %Arg_4.5192 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %281
  %Arg_5.6193 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %add.32 = fadd float %Arg_4.5192, %Arg_5.6193
  store float %add.32, ptr %reduction_input_address164, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_34__1(ptr %283, ptr %reduction_input_address164, ptr %return_buffer194)
  %284 = load float, ptr %return_buffer194, align 4
  store float %284, ptr %283, align 4
  %285 = mul i32 %tile_loop.indvar189, 1024
  %286 = add i32 %285, 1
  %x_loc195 = add i32 %286, %269
  %287 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %288 = add i32 %tile_origin.2175, %x_loc195
  %289 = mul nuw nsw i32 %288, 1
  %290 = add nuw nsw i32 0, %289
  %291 = mul nuw nsw i32 %287, 8192
  %292 = add nuw nsw i32 %290, %291
  %293 = mul nuw nsw i32 %tile_origin.0173, 8192
  %294 = add nuw nsw i32 %292, %293
  %295 = udiv i32 %294, 1
  %Arg_4.5196 = getelementptr inbounds float, ptr %arg4, i32 %294
  %Arg_4.5197 = load float, ptr %Arg_4.5196, align 4, !invariant.load !197
  %Arg_5.6198 = getelementptr inbounds float, ptr %arg5, i32 %294
  %Arg_5.6199 = load float, ptr %Arg_5.6198, align 4, !invariant.load !197
  %add.32200 = fadd float %Arg_4.5197, %Arg_5.6199
  store float %add.32200, ptr %reduction_input_address164, align 4
  %296 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_34__1(ptr %296, ptr %reduction_input_address164, ptr %return_buffer201)
  %297 = load float, ptr %return_buffer201, align 4
  store float %297, ptr %296, align 4
  br label %tile_loop.loop_header186, !llvm.loop !249

tile_loop.loop_exit185:                           ; preds = %tile_loop.loop_header186
  br label %is_full_tile-after184

is_full_tile-false183:                            ; preds = %y_in_tile.loop_body178
  %298 = mul i32 %thread_id.x168, 2
  store i32 0, ptr %tile_loop.invar_address205, align 4
  br label %tile_loop.loop_header203

tile_loop.loop_header203:                         ; preds = %x_in_tile-after219, %is_full_tile-false183
  %tile_loop.indvar206 = load i32, ptr %tile_loop.invar_address205, align 4
  %299 = icmp uge i32 %tile_loop.indvar206, 8
  br i1 %299, label %tile_loop.loop_exit202, label %tile_loop.loop_body204

tile_loop.loop_body204:                           ; preds = %tile_loop.loop_header203
  %invar.inc207 = add nuw nsw i32 %tile_loop.indvar206, 1
  store i32 %invar.inc207, ptr %tile_loop.invar_address205, align 4
  %300 = icmp eq i32 %tile_loop.indvar206, 0
  %301 = mul i32 %tile_loop.indvar206, 1024
  %302 = add i32 %301, 0
  %x_loc208 = add i32 %302, %298
  %303 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %304 = add i32 %tile_origin.2175, %x_loc208
  %305 = icmp ult i32 %x_loc208, %tile_bound172
  br i1 %305, label %x_in_tile-true209, label %x_in_tile-after210

x_in_tile-after210:                               ; preds = %x_in_tile-true209, %tile_loop.loop_body204
  %306 = mul i32 %tile_loop.indvar206, 1024
  %307 = add i32 %306, 1
  %x_loc217 = add i32 %307, %298
  %308 = add i32 %tile_origin.1174, %y_in_tile.indvar180
  %309 = add i32 %tile_origin.2175, %x_loc217
  %310 = icmp ult i32 %x_loc217, %tile_bound172
  br i1 %310, label %x_in_tile-true218, label %x_in_tile-after219

x_in_tile-after219:                               ; preds = %x_in_tile-true218, %x_in_tile-after210
  br label %tile_loop.loop_header203, !llvm.loop !250

tile_loop.loop_exit202:                           ; preds = %tile_loop.loop_header203
  br label %is_full_tile-after184

x_in_tile-true209:                                ; preds = %tile_loop.loop_body204
  %311 = mul nuw nsw i32 %304, 1
  %312 = add nuw nsw i32 0, %311
  %313 = mul nuw nsw i32 %303, 8192
  %314 = add nuw nsw i32 %312, %313
  %315 = mul nuw nsw i32 %tile_origin.0173, 8192
  %316 = add nuw nsw i32 %314, %315
  %317 = udiv i32 %316, 1
  %Arg_4.5211 = getelementptr inbounds float, ptr %arg4, i32 %316
  %Arg_4.5212 = load float, ptr %Arg_4.5211, align 4, !invariant.load !197
  %Arg_5.6213 = getelementptr inbounds float, ptr %arg5, i32 %316
  %Arg_5.6214 = load float, ptr %Arg_5.6213, align 4, !invariant.load !197
  %add.32215 = fadd float %Arg_4.5212, %Arg_5.6214
  store float %add.32215, ptr %reduction_input_address164, align 4
  %318 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_34__1(ptr %318, ptr %reduction_input_address164, ptr %return_buffer216)
  %319 = load float, ptr %return_buffer216, align 4
  store float %319, ptr %318, align 4
  br label %x_in_tile-after210

x_in_tile-true218:                                ; preds = %x_in_tile-after210
  %320 = mul nuw nsw i32 %309, 1
  %321 = add nuw nsw i32 0, %320
  %322 = mul nuw nsw i32 %308, 8192
  %323 = add nuw nsw i32 %321, %322
  %324 = mul nuw nsw i32 %tile_origin.0173, 8192
  %325 = add nuw nsw i32 %323, %324
  %326 = udiv i32 %325, 1
  %Arg_4.5220 = getelementptr inbounds float, ptr %arg4, i32 %325
  %Arg_4.5221 = load float, ptr %Arg_4.5220, align 4, !invariant.load !197
  %Arg_5.6222 = getelementptr inbounds float, ptr %arg5, i32 %325
  %Arg_5.6223 = load float, ptr %Arg_5.6222, align 4, !invariant.load !197
  %add.32224 = fadd float %Arg_4.5221, %Arg_5.6223
  store float %add.32224, ptr %reduction_input_address164, align 4
  %327 = getelementptr inbounds float, ptr %partial_reduction_result165, i32 0
  call void @region_3_34__1(ptr %327, ptr %reduction_input_address164, ptr %return_buffer225)
  %328 = load float, ptr %return_buffer225, align 4
  store float %328, ptr %327, align 4
  br label %x_in_tile-after219

intra_warp_reduce_write-true242:                  ; preds = %y_in_tile.loop_exit176
  %329 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %241, i32 0, i32 %266
  %330 = addrspacecast ptr addrspace(3) %329 to ptr
  %331 = load float, ptr %current_output226, align 4
  store float %331, ptr %330, align 4
  br label %intra_warp_reduce_write-after243

inter_warp_reduce-true244:                        ; preds = %intra_warp_reduce_write-after243
  %332 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache16, i32 0, i32 %241, i32 0, i32 %lane_id170
  %333 = addrspacecast ptr addrspace(3) %332 to ptr
  store float %region_0_75_constant_19166, ptr %initial_value_addr246, align 4
  %334 = icmp ult i32 %thread_id.x168, 16
  %335 = select i1 %334, ptr %333, ptr %initial_value_addr246
  %partial_reduction_result248 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result248, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane247, align 4
  call void @region_3_34__1(ptr %335, ptr %result_from_other_lane247, ptr %return_buffer249)
  %337 = load float, ptr %return_buffer249, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result251 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result251, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane250, align 4
  call void @region_3_34__1(ptr %335, ptr %result_from_other_lane250, ptr %return_buffer252)
  %339 = load float, ptr %return_buffer252, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result254 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result254, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane253, align 4
  call void @region_3_34__1(ptr %335, ptr %result_from_other_lane253, ptr %return_buffer255)
  %341 = load float, ptr %return_buffer255, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result257 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result257, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane256, align 4
  call void @region_3_34__1(ptr %335, ptr %result_from_other_lane256, ptr %return_buffer258)
  %343 = load float, ptr %return_buffer258, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result260 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result260, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane259, align 4
  call void @region_3_34__1(ptr %335, ptr %result_from_other_lane259, ptr %return_buffer261)
  %345 = load float, ptr %return_buffer261, align 4
  store float %345, ptr %335, align 4
  %346 = icmp eq i32 %thread_id.x168, 0
  br i1 %346, label %reduction_write_output-true262, label %reduction_write_output-after263

reduction_write_output-after263:                  ; preds = %reduction_write_output-true262, %inter_warp_reduce-true244
  br label %inter_warp_reduce-after245

reduction_write_output-true262:                   ; preds = %inter_warp_reduce-true244
  %347 = mul i32 %thread_id.x168, 2
  %348 = add i32 %tile_origin.1174, %thread_id.y169
  %349 = add i32 %tile_origin.2175, %347
  %350 = add i32 %349, 0
  %output264 = load float, ptr %335, align 4
  store float %output264, ptr %arg18, align 4
  br label %reduction_write_output-after263

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %region_0_75_constant_19267 = load float, ptr @6, align 4
  %351 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  store float %region_0_75_constant_19267, ptr %351, align 4
  %352 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %353 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %354 = urem i32 %352, 512
  %355 = udiv i32 %352, 512
  %356 = mul i32 %353, 1
  %357 = add i32 %356, %355
  %358 = icmp ult i32 %357, 1
  br i1 %358, label %359, label %early_return268

359:                                              ; preds = %reduce-group-3-true
  %thread_id.x269 = urem i32 %354, 512
  %thread_id.y270 = udiv i32 %354, 512
  %lane_id271 = urem i32 %354, 32
  %360 = udiv i32 %357, 1
  %361 = urem i32 %360, 1
  %362 = udiv i32 %357, 1
  %363 = urem i32 %362, 1
  %364 = udiv i32 %357, 1
  %365 = icmp eq i32 %363, 0
  %tile_bound272 = select i1 %365, i32 1, i32 1
  %366 = icmp eq i32 %361, 0
  %tile_bound273 = select i1 %366, i32 8192, i32 8192
  %tile_origin.0274 = mul i32 %364, 1
  %tile_origin.1275 = mul i32 %363, 1
  %tile_origin.2276 = mul i32 %361, 8192
  store i32 %thread_id.y270, ptr %y_in_tile.invar_address280, align 4
  br label %y_in_tile.loop_header278

y_in_tile.loop_header278:                         ; preds = %is_full_tile-after285, %359
  %y_in_tile.indvar281 = load i32, ptr %y_in_tile.invar_address280, align 4
  %367 = icmp uge i32 %y_in_tile.indvar281, %tile_bound272
  br i1 %367, label %y_in_tile.loop_exit277, label %y_in_tile.loop_body279

y_in_tile.loop_body279:                           ; preds = %y_in_tile.loop_header278
  %invar.inc282 = add nuw nsw i32 %y_in_tile.indvar281, 1
  store i32 %invar.inc282, ptr %y_in_tile.invar_address280, align 4
  %368 = icmp eq i32 %y_in_tile.indvar281, %thread_id.y270
  %369 = icmp eq i32 8192, %tile_bound273
  br i1 %369, label %is_full_tile-true283, label %is_full_tile-false284

is_full_tile-after285:                            ; preds = %tile_loop.loop_exit303, %tile_loop.loop_exit286
  br label %y_in_tile.loop_header278, !llvm.loop !251

y_in_tile.loop_exit277:                           ; preds = %y_in_tile.loop_header278
  %current_output327 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  %partial_reduction_result329 = load float, ptr %current_output327, align 4
  %370 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result329, i32 16, i32 31)
  store float %370, ptr %result_from_other_lane328, align 4
  call void @region_4_41(ptr %current_output327, ptr %result_from_other_lane328, ptr %return_buffer330)
  %371 = load float, ptr %return_buffer330, align 4
  store float %371, ptr %current_output327, align 4
  %partial_reduction_result332 = load float, ptr %current_output327, align 4
  %372 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result332, i32 8, i32 31)
  store float %372, ptr %result_from_other_lane331, align 4
  call void @region_4_41(ptr %current_output327, ptr %result_from_other_lane331, ptr %return_buffer333)
  %373 = load float, ptr %return_buffer333, align 4
  store float %373, ptr %current_output327, align 4
  %partial_reduction_result335 = load float, ptr %current_output327, align 4
  %374 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result335, i32 4, i32 31)
  store float %374, ptr %result_from_other_lane334, align 4
  call void @region_4_41(ptr %current_output327, ptr %result_from_other_lane334, ptr %return_buffer336)
  %375 = load float, ptr %return_buffer336, align 4
  store float %375, ptr %current_output327, align 4
  %partial_reduction_result338 = load float, ptr %current_output327, align 4
  %376 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result338, i32 2, i32 31)
  store float %376, ptr %result_from_other_lane337, align 4
  call void @region_4_41(ptr %current_output327, ptr %result_from_other_lane337, ptr %return_buffer339)
  %377 = load float, ptr %return_buffer339, align 4
  store float %377, ptr %current_output327, align 4
  %partial_reduction_result341 = load float, ptr %current_output327, align 4
  %378 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result341, i32 1, i32 31)
  store float %378, ptr %result_from_other_lane340, align 4
  call void @region_4_41(ptr %current_output327, ptr %result_from_other_lane340, ptr %return_buffer342)
  %379 = load float, ptr %return_buffer342, align 4
  store float %379, ptr %current_output327, align 4
  %380 = udiv i32 %thread_id.x269, 32
  %381 = icmp eq i32 %lane_id271, 0
  br i1 %381, label %intra_warp_reduce_write-true343, label %intra_warp_reduce_write-after344

intra_warp_reduce_write-after344:                 ; preds = %intra_warp_reduce_write-true343, %y_in_tile.loop_exit277
  call void @llvm.nvvm.barrier0()
  %382 = icmp eq i32 %380, 0
  br i1 %382, label %inter_warp_reduce-true345, label %inter_warp_reduce-after346

inter_warp_reduce-after346:                       ; preds = %reduction_write_output-after364, %intra_warp_reduce_write-after344
  br label %reduce-group-3-after

early_return268:                                  ; preds = %reduce-group-3-true
  ret void

is_full_tile-true283:                             ; preds = %y_in_tile.loop_body279
  %383 = mul i32 %thread_id.x269, 2
  store i32 0, ptr %tile_loop.invar_address289, align 4
  br label %tile_loop.loop_header287

tile_loop.loop_header287:                         ; preds = %tile_loop.loop_body288, %is_full_tile-true283
  %tile_loop.indvar290 = load i32, ptr %tile_loop.invar_address289, align 4
  %384 = icmp uge i32 %tile_loop.indvar290, 8
  br i1 %384, label %tile_loop.loop_exit286, label %tile_loop.loop_body288

tile_loop.loop_body288:                           ; preds = %tile_loop.loop_header287
  %invar.inc291 = add nuw nsw i32 %tile_loop.indvar290, 1
  store i32 %invar.inc291, ptr %tile_loop.invar_address289, align 4
  %385 = icmp eq i32 %tile_loop.indvar290, 0
  %386 = mul i32 %tile_loop.indvar290, 1024
  %387 = add i32 %386, 0
  %x_loc292 = add i32 %387, %383
  %388 = add i32 %tile_origin.1275, %y_in_tile.indvar281
  %389 = add i32 %tile_origin.2276, %x_loc292
  %390 = mul nuw nsw i32 %389, 1
  %391 = add nuw nsw i32 0, %390
  %392 = mul nuw nsw i32 %388, 8192
  %393 = add nuw nsw i32 %391, %392
  %394 = mul nuw nsw i32 %tile_origin.0274, 8192
  %395 = add nuw nsw i32 %393, %394
  %396 = udiv i32 %395, 1
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %395
  %Arg_6.7293 = load float, ptr %Arg_6.7, align 4, !invariant.load !197
  %Arg_7.8 = getelementptr inbounds float, ptr %arg7, i32 %395
  %Arg_7.8294 = load float, ptr %Arg_7.8, align 4, !invariant.load !197
  %add.39 = fadd float %Arg_6.7293, %Arg_7.8294
  store float %add.39, ptr %reduction_input_address265, align 4
  %397 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  call void @region_4_41(ptr %397, ptr %reduction_input_address265, ptr %return_buffer295)
  %398 = load float, ptr %return_buffer295, align 4
  store float %398, ptr %397, align 4
  %399 = mul i32 %tile_loop.indvar290, 1024
  %400 = add i32 %399, 1
  %x_loc296 = add i32 %400, %383
  %401 = add i32 %tile_origin.1275, %y_in_tile.indvar281
  %402 = add i32 %tile_origin.2276, %x_loc296
  %403 = mul nuw nsw i32 %402, 1
  %404 = add nuw nsw i32 0, %403
  %405 = mul nuw nsw i32 %401, 8192
  %406 = add nuw nsw i32 %404, %405
  %407 = mul nuw nsw i32 %tile_origin.0274, 8192
  %408 = add nuw nsw i32 %406, %407
  %409 = udiv i32 %408, 1
  %Arg_6.7297 = getelementptr inbounds float, ptr %arg6, i32 %408
  %Arg_6.7298 = load float, ptr %Arg_6.7297, align 4, !invariant.load !197
  %Arg_7.8299 = getelementptr inbounds float, ptr %arg7, i32 %408
  %Arg_7.8300 = load float, ptr %Arg_7.8299, align 4, !invariant.load !197
  %add.39301 = fadd float %Arg_6.7298, %Arg_7.8300
  store float %add.39301, ptr %reduction_input_address265, align 4
  %410 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  call void @region_4_41(ptr %410, ptr %reduction_input_address265, ptr %return_buffer302)
  %411 = load float, ptr %return_buffer302, align 4
  store float %411, ptr %410, align 4
  br label %tile_loop.loop_header287, !llvm.loop !252

tile_loop.loop_exit286:                           ; preds = %tile_loop.loop_header287
  br label %is_full_tile-after285

is_full_tile-false284:                            ; preds = %y_in_tile.loop_body279
  %412 = mul i32 %thread_id.x269, 2
  store i32 0, ptr %tile_loop.invar_address306, align 4
  br label %tile_loop.loop_header304

tile_loop.loop_header304:                         ; preds = %x_in_tile-after320, %is_full_tile-false284
  %tile_loop.indvar307 = load i32, ptr %tile_loop.invar_address306, align 4
  %413 = icmp uge i32 %tile_loop.indvar307, 8
  br i1 %413, label %tile_loop.loop_exit303, label %tile_loop.loop_body305

tile_loop.loop_body305:                           ; preds = %tile_loop.loop_header304
  %invar.inc308 = add nuw nsw i32 %tile_loop.indvar307, 1
  store i32 %invar.inc308, ptr %tile_loop.invar_address306, align 4
  %414 = icmp eq i32 %tile_loop.indvar307, 0
  %415 = mul i32 %tile_loop.indvar307, 1024
  %416 = add i32 %415, 0
  %x_loc309 = add i32 %416, %412
  %417 = add i32 %tile_origin.1275, %y_in_tile.indvar281
  %418 = add i32 %tile_origin.2276, %x_loc309
  %419 = icmp ult i32 %x_loc309, %tile_bound273
  br i1 %419, label %x_in_tile-true310, label %x_in_tile-after311

x_in_tile-after311:                               ; preds = %x_in_tile-true310, %tile_loop.loop_body305
  %420 = mul i32 %tile_loop.indvar307, 1024
  %421 = add i32 %420, 1
  %x_loc318 = add i32 %421, %412
  %422 = add i32 %tile_origin.1275, %y_in_tile.indvar281
  %423 = add i32 %tile_origin.2276, %x_loc318
  %424 = icmp ult i32 %x_loc318, %tile_bound273
  br i1 %424, label %x_in_tile-true319, label %x_in_tile-after320

x_in_tile-after320:                               ; preds = %x_in_tile-true319, %x_in_tile-after311
  br label %tile_loop.loop_header304, !llvm.loop !253

tile_loop.loop_exit303:                           ; preds = %tile_loop.loop_header304
  br label %is_full_tile-after285

x_in_tile-true310:                                ; preds = %tile_loop.loop_body305
  %425 = mul nuw nsw i32 %418, 1
  %426 = add nuw nsw i32 0, %425
  %427 = mul nuw nsw i32 %417, 8192
  %428 = add nuw nsw i32 %426, %427
  %429 = mul nuw nsw i32 %tile_origin.0274, 8192
  %430 = add nuw nsw i32 %428, %429
  %431 = udiv i32 %430, 1
  %Arg_6.7312 = getelementptr inbounds float, ptr %arg6, i32 %430
  %Arg_6.7313 = load float, ptr %Arg_6.7312, align 4, !invariant.load !197
  %Arg_7.8314 = getelementptr inbounds float, ptr %arg7, i32 %430
  %Arg_7.8315 = load float, ptr %Arg_7.8314, align 4, !invariant.load !197
  %add.39316 = fadd float %Arg_6.7313, %Arg_7.8315
  store float %add.39316, ptr %reduction_input_address265, align 4
  %432 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  call void @region_4_41(ptr %432, ptr %reduction_input_address265, ptr %return_buffer317)
  %433 = load float, ptr %return_buffer317, align 4
  store float %433, ptr %432, align 4
  br label %x_in_tile-after311

x_in_tile-true319:                                ; preds = %x_in_tile-after311
  %434 = mul nuw nsw i32 %423, 1
  %435 = add nuw nsw i32 0, %434
  %436 = mul nuw nsw i32 %422, 8192
  %437 = add nuw nsw i32 %435, %436
  %438 = mul nuw nsw i32 %tile_origin.0274, 8192
  %439 = add nuw nsw i32 %437, %438
  %440 = udiv i32 %439, 1
  %Arg_6.7321 = getelementptr inbounds float, ptr %arg6, i32 %439
  %Arg_6.7322 = load float, ptr %Arg_6.7321, align 4, !invariant.load !197
  %Arg_7.8323 = getelementptr inbounds float, ptr %arg7, i32 %439
  %Arg_7.8324 = load float, ptr %Arg_7.8323, align 4, !invariant.load !197
  %add.39325 = fadd float %Arg_6.7322, %Arg_7.8324
  store float %add.39325, ptr %reduction_input_address265, align 4
  %441 = getelementptr inbounds float, ptr %partial_reduction_result266, i32 0
  call void @region_4_41(ptr %441, ptr %reduction_input_address265, ptr %return_buffer326)
  %442 = load float, ptr %return_buffer326, align 4
  store float %442, ptr %441, align 4
  br label %x_in_tile-after320

intra_warp_reduce_write-true343:                  ; preds = %y_in_tile.loop_exit277
  %443 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache17, i32 0, i32 %355, i32 0, i32 %380
  %444 = addrspacecast ptr addrspace(3) %443 to ptr
  %445 = load float, ptr %current_output327, align 4
  store float %445, ptr %444, align 4
  br label %intra_warp_reduce_write-after344

inter_warp_reduce-true345:                        ; preds = %intra_warp_reduce_write-after344
  %446 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache17, i32 0, i32 %355, i32 0, i32 %lane_id271
  %447 = addrspacecast ptr addrspace(3) %446 to ptr
  store float %region_0_75_constant_19267, ptr %initial_value_addr347, align 4
  %448 = icmp ult i32 %thread_id.x269, 16
  %449 = select i1 %448, ptr %447, ptr %initial_value_addr347
  %partial_reduction_result349 = load float, ptr %449, align 4
  %450 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result349, i32 16, i32 31)
  store float %450, ptr %result_from_other_lane348, align 4
  call void @region_4_41(ptr %449, ptr %result_from_other_lane348, ptr %return_buffer350)
  %451 = load float, ptr %return_buffer350, align 4
  store float %451, ptr %449, align 4
  %partial_reduction_result352 = load float, ptr %449, align 4
  %452 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result352, i32 8, i32 31)
  store float %452, ptr %result_from_other_lane351, align 4
  call void @region_4_41(ptr %449, ptr %result_from_other_lane351, ptr %return_buffer353)
  %453 = load float, ptr %return_buffer353, align 4
  store float %453, ptr %449, align 4
  %partial_reduction_result355 = load float, ptr %449, align 4
  %454 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result355, i32 4, i32 31)
  store float %454, ptr %result_from_other_lane354, align 4
  call void @region_4_41(ptr %449, ptr %result_from_other_lane354, ptr %return_buffer356)
  %455 = load float, ptr %return_buffer356, align 4
  store float %455, ptr %449, align 4
  %partial_reduction_result358 = load float, ptr %449, align 4
  %456 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result358, i32 2, i32 31)
  store float %456, ptr %result_from_other_lane357, align 4
  call void @region_4_41(ptr %449, ptr %result_from_other_lane357, ptr %return_buffer359)
  %457 = load float, ptr %return_buffer359, align 4
  store float %457, ptr %449, align 4
  %partial_reduction_result361 = load float, ptr %449, align 4
  %458 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result361, i32 1, i32 31)
  store float %458, ptr %result_from_other_lane360, align 4
  call void @region_4_41(ptr %449, ptr %result_from_other_lane360, ptr %return_buffer362)
  %459 = load float, ptr %return_buffer362, align 4
  store float %459, ptr %449, align 4
  %460 = icmp eq i32 %thread_id.x269, 0
  br i1 %460, label %reduction_write_output-true363, label %reduction_write_output-after364

reduction_write_output-after364:                  ; preds = %reduction_write_output-true363, %inter_warp_reduce-true345
  br label %inter_warp_reduce-after346

reduction_write_output-true363:                   ; preds = %inter_warp_reduce-true345
  %461 = mul i32 %thread_id.x269, 2
  %462 = add i32 %tile_origin.1275, %thread_id.y270
  %463 = add i32 %tile_origin.2276, %461
  %464 = add i32 %463, 0
  %output365 = load float, ptr %449, align 4
  store float %output365, ptr %arg19, align 4
  br label %reduction_write_output-after364

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %region_0_75_constant_19368 = load float, ptr @6, align 4
  %465 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  store float %region_0_75_constant_19368, ptr %465, align 4
  %466 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %467 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %468 = urem i32 %466, 512
  %469 = udiv i32 %466, 512
  %470 = mul i32 %467, 1
  %471 = add i32 %470, %469
  %472 = icmp ult i32 %471, 1
  br i1 %472, label %473, label %early_return369

473:                                              ; preds = %reduce-group-4-true
  %thread_id.x370 = urem i32 %468, 512
  %thread_id.y371 = udiv i32 %468, 512
  %lane_id372 = urem i32 %468, 32
  %474 = udiv i32 %471, 1
  %475 = urem i32 %474, 1
  %476 = udiv i32 %471, 1
  %477 = urem i32 %476, 1
  %478 = udiv i32 %471, 1
  %479 = icmp eq i32 %477, 0
  %tile_bound373 = select i1 %479, i32 1, i32 1
  %480 = icmp eq i32 %475, 0
  %tile_bound374 = select i1 %480, i32 8192, i32 8192
  %tile_origin.0375 = mul i32 %478, 1
  %tile_origin.1376 = mul i32 %477, 1
  %tile_origin.2377 = mul i32 %475, 8192
  store i32 %thread_id.y371, ptr %y_in_tile.invar_address381, align 4
  br label %y_in_tile.loop_header379

y_in_tile.loop_header379:                         ; preds = %is_full_tile-after386, %473
  %y_in_tile.indvar382 = load i32, ptr %y_in_tile.invar_address381, align 4
  %481 = icmp uge i32 %y_in_tile.indvar382, %tile_bound373
  br i1 %481, label %y_in_tile.loop_exit378, label %y_in_tile.loop_body380

y_in_tile.loop_body380:                           ; preds = %y_in_tile.loop_header379
  %invar.inc383 = add nuw nsw i32 %y_in_tile.indvar382, 1
  store i32 %invar.inc383, ptr %y_in_tile.invar_address381, align 4
  %482 = icmp eq i32 %y_in_tile.indvar382, %thread_id.y371
  %483 = icmp eq i32 8192, %tile_bound374
  br i1 %483, label %is_full_tile-true384, label %is_full_tile-false385

is_full_tile-after386:                            ; preds = %tile_loop.loop_exit404, %tile_loop.loop_exit387
  br label %y_in_tile.loop_header379, !llvm.loop !254

y_in_tile.loop_exit378:                           ; preds = %y_in_tile.loop_header379
  %current_output428 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  %partial_reduction_result430 = load float, ptr %current_output428, align 4
  %484 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result430, i32 16, i32 31)
  store float %484, ptr %result_from_other_lane429, align 4
  call void @region_5_48(ptr %current_output428, ptr %result_from_other_lane429, ptr %return_buffer431)
  %485 = load float, ptr %return_buffer431, align 4
  store float %485, ptr %current_output428, align 4
  %partial_reduction_result433 = load float, ptr %current_output428, align 4
  %486 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result433, i32 8, i32 31)
  store float %486, ptr %result_from_other_lane432, align 4
  call void @region_5_48(ptr %current_output428, ptr %result_from_other_lane432, ptr %return_buffer434)
  %487 = load float, ptr %return_buffer434, align 4
  store float %487, ptr %current_output428, align 4
  %partial_reduction_result436 = load float, ptr %current_output428, align 4
  %488 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result436, i32 4, i32 31)
  store float %488, ptr %result_from_other_lane435, align 4
  call void @region_5_48(ptr %current_output428, ptr %result_from_other_lane435, ptr %return_buffer437)
  %489 = load float, ptr %return_buffer437, align 4
  store float %489, ptr %current_output428, align 4
  %partial_reduction_result439 = load float, ptr %current_output428, align 4
  %490 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result439, i32 2, i32 31)
  store float %490, ptr %result_from_other_lane438, align 4
  call void @region_5_48(ptr %current_output428, ptr %result_from_other_lane438, ptr %return_buffer440)
  %491 = load float, ptr %return_buffer440, align 4
  store float %491, ptr %current_output428, align 4
  %partial_reduction_result442 = load float, ptr %current_output428, align 4
  %492 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result442, i32 1, i32 31)
  store float %492, ptr %result_from_other_lane441, align 4
  call void @region_5_48(ptr %current_output428, ptr %result_from_other_lane441, ptr %return_buffer443)
  %493 = load float, ptr %return_buffer443, align 4
  store float %493, ptr %current_output428, align 4
  %494 = udiv i32 %thread_id.x370, 32
  %495 = icmp eq i32 %lane_id372, 0
  br i1 %495, label %intra_warp_reduce_write-true444, label %intra_warp_reduce_write-after445

intra_warp_reduce_write-after445:                 ; preds = %intra_warp_reduce_write-true444, %y_in_tile.loop_exit378
  call void @llvm.nvvm.barrier0()
  %496 = icmp eq i32 %494, 0
  br i1 %496, label %inter_warp_reduce-true446, label %inter_warp_reduce-after447

inter_warp_reduce-after447:                       ; preds = %reduction_write_output-after465, %intra_warp_reduce_write-after445
  br label %reduce-group-4-after

early_return369:                                  ; preds = %reduce-group-4-true
  ret void

is_full_tile-true384:                             ; preds = %y_in_tile.loop_body380
  %497 = mul i32 %thread_id.x370, 2
  store i32 0, ptr %tile_loop.invar_address390, align 4
  br label %tile_loop.loop_header388

tile_loop.loop_header388:                         ; preds = %tile_loop.loop_body389, %is_full_tile-true384
  %tile_loop.indvar391 = load i32, ptr %tile_loop.invar_address390, align 4
  %498 = icmp uge i32 %tile_loop.indvar391, 8
  br i1 %498, label %tile_loop.loop_exit387, label %tile_loop.loop_body389

tile_loop.loop_body389:                           ; preds = %tile_loop.loop_header388
  %invar.inc392 = add nuw nsw i32 %tile_loop.indvar391, 1
  store i32 %invar.inc392, ptr %tile_loop.invar_address390, align 4
  %499 = icmp eq i32 %tile_loop.indvar391, 0
  %500 = mul i32 %tile_loop.indvar391, 1024
  %501 = add i32 %500, 0
  %x_loc393 = add i32 %501, %497
  %502 = add i32 %tile_origin.1376, %y_in_tile.indvar382
  %503 = add i32 %tile_origin.2377, %x_loc393
  %504 = mul nuw nsw i32 %503, 1
  %505 = add nuw nsw i32 0, %504
  %506 = mul nuw nsw i32 %502, 8192
  %507 = add nuw nsw i32 %505, %506
  %508 = mul nuw nsw i32 %tile_origin.0375, 8192
  %509 = add nuw nsw i32 %507, %508
  %510 = udiv i32 %509, 1
  %Arg_8.9 = getelementptr inbounds float, ptr %arg8, i32 %509
  %Arg_8.9394 = load float, ptr %Arg_8.9, align 4, !invariant.load !197
  %Arg_9.10 = getelementptr inbounds float, ptr %arg9, i32 %509
  %Arg_9.10395 = load float, ptr %Arg_9.10, align 4, !invariant.load !197
  %add.46 = fadd float %Arg_8.9394, %Arg_9.10395
  store float %add.46, ptr %reduction_input_address366, align 4
  %511 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  call void @region_5_48(ptr %511, ptr %reduction_input_address366, ptr %return_buffer396)
  %512 = load float, ptr %return_buffer396, align 4
  store float %512, ptr %511, align 4
  %513 = mul i32 %tile_loop.indvar391, 1024
  %514 = add i32 %513, 1
  %x_loc397 = add i32 %514, %497
  %515 = add i32 %tile_origin.1376, %y_in_tile.indvar382
  %516 = add i32 %tile_origin.2377, %x_loc397
  %517 = mul nuw nsw i32 %516, 1
  %518 = add nuw nsw i32 0, %517
  %519 = mul nuw nsw i32 %515, 8192
  %520 = add nuw nsw i32 %518, %519
  %521 = mul nuw nsw i32 %tile_origin.0375, 8192
  %522 = add nuw nsw i32 %520, %521
  %523 = udiv i32 %522, 1
  %Arg_8.9398 = getelementptr inbounds float, ptr %arg8, i32 %522
  %Arg_8.9399 = load float, ptr %Arg_8.9398, align 4, !invariant.load !197
  %Arg_9.10400 = getelementptr inbounds float, ptr %arg9, i32 %522
  %Arg_9.10401 = load float, ptr %Arg_9.10400, align 4, !invariant.load !197
  %add.46402 = fadd float %Arg_8.9399, %Arg_9.10401
  store float %add.46402, ptr %reduction_input_address366, align 4
  %524 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  call void @region_5_48(ptr %524, ptr %reduction_input_address366, ptr %return_buffer403)
  %525 = load float, ptr %return_buffer403, align 4
  store float %525, ptr %524, align 4
  br label %tile_loop.loop_header388, !llvm.loop !255

tile_loop.loop_exit387:                           ; preds = %tile_loop.loop_header388
  br label %is_full_tile-after386

is_full_tile-false385:                            ; preds = %y_in_tile.loop_body380
  %526 = mul i32 %thread_id.x370, 2
  store i32 0, ptr %tile_loop.invar_address407, align 4
  br label %tile_loop.loop_header405

tile_loop.loop_header405:                         ; preds = %x_in_tile-after421, %is_full_tile-false385
  %tile_loop.indvar408 = load i32, ptr %tile_loop.invar_address407, align 4
  %527 = icmp uge i32 %tile_loop.indvar408, 8
  br i1 %527, label %tile_loop.loop_exit404, label %tile_loop.loop_body406

tile_loop.loop_body406:                           ; preds = %tile_loop.loop_header405
  %invar.inc409 = add nuw nsw i32 %tile_loop.indvar408, 1
  store i32 %invar.inc409, ptr %tile_loop.invar_address407, align 4
  %528 = icmp eq i32 %tile_loop.indvar408, 0
  %529 = mul i32 %tile_loop.indvar408, 1024
  %530 = add i32 %529, 0
  %x_loc410 = add i32 %530, %526
  %531 = add i32 %tile_origin.1376, %y_in_tile.indvar382
  %532 = add i32 %tile_origin.2377, %x_loc410
  %533 = icmp ult i32 %x_loc410, %tile_bound374
  br i1 %533, label %x_in_tile-true411, label %x_in_tile-after412

x_in_tile-after412:                               ; preds = %x_in_tile-true411, %tile_loop.loop_body406
  %534 = mul i32 %tile_loop.indvar408, 1024
  %535 = add i32 %534, 1
  %x_loc419 = add i32 %535, %526
  %536 = add i32 %tile_origin.1376, %y_in_tile.indvar382
  %537 = add i32 %tile_origin.2377, %x_loc419
  %538 = icmp ult i32 %x_loc419, %tile_bound374
  br i1 %538, label %x_in_tile-true420, label %x_in_tile-after421

x_in_tile-after421:                               ; preds = %x_in_tile-true420, %x_in_tile-after412
  br label %tile_loop.loop_header405, !llvm.loop !256

tile_loop.loop_exit404:                           ; preds = %tile_loop.loop_header405
  br label %is_full_tile-after386

x_in_tile-true411:                                ; preds = %tile_loop.loop_body406
  %539 = mul nuw nsw i32 %532, 1
  %540 = add nuw nsw i32 0, %539
  %541 = mul nuw nsw i32 %531, 8192
  %542 = add nuw nsw i32 %540, %541
  %543 = mul nuw nsw i32 %tile_origin.0375, 8192
  %544 = add nuw nsw i32 %542, %543
  %545 = udiv i32 %544, 1
  %Arg_8.9413 = getelementptr inbounds float, ptr %arg8, i32 %544
  %Arg_8.9414 = load float, ptr %Arg_8.9413, align 4, !invariant.load !197
  %Arg_9.10415 = getelementptr inbounds float, ptr %arg9, i32 %544
  %Arg_9.10416 = load float, ptr %Arg_9.10415, align 4, !invariant.load !197
  %add.46417 = fadd float %Arg_8.9414, %Arg_9.10416
  store float %add.46417, ptr %reduction_input_address366, align 4
  %546 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  call void @region_5_48(ptr %546, ptr %reduction_input_address366, ptr %return_buffer418)
  %547 = load float, ptr %return_buffer418, align 4
  store float %547, ptr %546, align 4
  br label %x_in_tile-after412

x_in_tile-true420:                                ; preds = %x_in_tile-after412
  %548 = mul nuw nsw i32 %537, 1
  %549 = add nuw nsw i32 0, %548
  %550 = mul nuw nsw i32 %536, 8192
  %551 = add nuw nsw i32 %549, %550
  %552 = mul nuw nsw i32 %tile_origin.0375, 8192
  %553 = add nuw nsw i32 %551, %552
  %554 = udiv i32 %553, 1
  %Arg_8.9422 = getelementptr inbounds float, ptr %arg8, i32 %553
  %Arg_8.9423 = load float, ptr %Arg_8.9422, align 4, !invariant.load !197
  %Arg_9.10424 = getelementptr inbounds float, ptr %arg9, i32 %553
  %Arg_9.10425 = load float, ptr %Arg_9.10424, align 4, !invariant.load !197
  %add.46426 = fadd float %Arg_8.9423, %Arg_9.10425
  store float %add.46426, ptr %reduction_input_address366, align 4
  %555 = getelementptr inbounds float, ptr %partial_reduction_result367, i32 0
  call void @region_5_48(ptr %555, ptr %reduction_input_address366, ptr %return_buffer427)
  %556 = load float, ptr %return_buffer427, align 4
  store float %556, ptr %555, align 4
  br label %x_in_tile-after421

intra_warp_reduce_write-true444:                  ; preds = %y_in_tile.loop_exit378
  %557 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache18, i32 0, i32 %469, i32 0, i32 %494
  %558 = addrspacecast ptr addrspace(3) %557 to ptr
  %559 = load float, ptr %current_output428, align 4
  store float %559, ptr %558, align 4
  br label %intra_warp_reduce_write-after445

inter_warp_reduce-true446:                        ; preds = %intra_warp_reduce_write-after445
  %560 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache18, i32 0, i32 %469, i32 0, i32 %lane_id372
  %561 = addrspacecast ptr addrspace(3) %560 to ptr
  store float %region_0_75_constant_19368, ptr %initial_value_addr448, align 4
  %562 = icmp ult i32 %thread_id.x370, 16
  %563 = select i1 %562, ptr %561, ptr %initial_value_addr448
  %partial_reduction_result450 = load float, ptr %563, align 4
  %564 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result450, i32 16, i32 31)
  store float %564, ptr %result_from_other_lane449, align 4
  call void @region_5_48(ptr %563, ptr %result_from_other_lane449, ptr %return_buffer451)
  %565 = load float, ptr %return_buffer451, align 4
  store float %565, ptr %563, align 4
  %partial_reduction_result453 = load float, ptr %563, align 4
  %566 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result453, i32 8, i32 31)
  store float %566, ptr %result_from_other_lane452, align 4
  call void @region_5_48(ptr %563, ptr %result_from_other_lane452, ptr %return_buffer454)
  %567 = load float, ptr %return_buffer454, align 4
  store float %567, ptr %563, align 4
  %partial_reduction_result456 = load float, ptr %563, align 4
  %568 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result456, i32 4, i32 31)
  store float %568, ptr %result_from_other_lane455, align 4
  call void @region_5_48(ptr %563, ptr %result_from_other_lane455, ptr %return_buffer457)
  %569 = load float, ptr %return_buffer457, align 4
  store float %569, ptr %563, align 4
  %partial_reduction_result459 = load float, ptr %563, align 4
  %570 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result459, i32 2, i32 31)
  store float %570, ptr %result_from_other_lane458, align 4
  call void @region_5_48(ptr %563, ptr %result_from_other_lane458, ptr %return_buffer460)
  %571 = load float, ptr %return_buffer460, align 4
  store float %571, ptr %563, align 4
  %partial_reduction_result462 = load float, ptr %563, align 4
  %572 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result462, i32 1, i32 31)
  store float %572, ptr %result_from_other_lane461, align 4
  call void @region_5_48(ptr %563, ptr %result_from_other_lane461, ptr %return_buffer463)
  %573 = load float, ptr %return_buffer463, align 4
  store float %573, ptr %563, align 4
  %574 = icmp eq i32 %thread_id.x370, 0
  br i1 %574, label %reduction_write_output-true464, label %reduction_write_output-after465

reduction_write_output-after465:                  ; preds = %reduction_write_output-true464, %inter_warp_reduce-true446
  br label %inter_warp_reduce-after447

reduction_write_output-true464:                   ; preds = %inter_warp_reduce-true446
  %575 = mul i32 %thread_id.x370, 2
  %576 = add i32 %tile_origin.1376, %thread_id.y371
  %577 = add i32 %tile_origin.2377, %575
  %578 = add i32 %577, 0
  %output466 = load float, ptr %563, align 4
  store float %output466, ptr %arg20, align 4
  br label %reduction_write_output-after465

reduce-group-5-true:                              ; preds = %reduce-group-4-after
  %region_0_75_constant_19469 = load float, ptr @6, align 4
  %579 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  store float %region_0_75_constant_19469, ptr %579, align 4
  %580 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %581 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %582 = urem i32 %580, 512
  %583 = udiv i32 %580, 512
  %584 = mul i32 %581, 1
  %585 = add i32 %584, %583
  %586 = icmp ult i32 %585, 1
  br i1 %586, label %587, label %early_return470

587:                                              ; preds = %reduce-group-5-true
  %thread_id.x471 = urem i32 %582, 512
  %thread_id.y472 = udiv i32 %582, 512
  %lane_id473 = urem i32 %582, 32
  %588 = udiv i32 %585, 1
  %589 = urem i32 %588, 1
  %590 = udiv i32 %585, 1
  %591 = urem i32 %590, 1
  %592 = udiv i32 %585, 1
  %593 = icmp eq i32 %591, 0
  %tile_bound474 = select i1 %593, i32 1, i32 1
  %594 = icmp eq i32 %589, 0
  %tile_bound475 = select i1 %594, i32 8192, i32 8192
  %tile_origin.0476 = mul i32 %592, 1
  %tile_origin.1477 = mul i32 %591, 1
  %tile_origin.2478 = mul i32 %589, 8192
  store i32 %thread_id.y472, ptr %y_in_tile.invar_address482, align 4
  br label %y_in_tile.loop_header480

y_in_tile.loop_header480:                         ; preds = %is_full_tile-after487, %587
  %y_in_tile.indvar483 = load i32, ptr %y_in_tile.invar_address482, align 4
  %595 = icmp uge i32 %y_in_tile.indvar483, %tile_bound474
  br i1 %595, label %y_in_tile.loop_exit479, label %y_in_tile.loop_body481

y_in_tile.loop_body481:                           ; preds = %y_in_tile.loop_header480
  %invar.inc484 = add nuw nsw i32 %y_in_tile.indvar483, 1
  store i32 %invar.inc484, ptr %y_in_tile.invar_address482, align 4
  %596 = icmp eq i32 %y_in_tile.indvar483, %thread_id.y472
  %597 = icmp eq i32 8192, %tile_bound475
  br i1 %597, label %is_full_tile-true485, label %is_full_tile-false486

is_full_tile-after487:                            ; preds = %tile_loop.loop_exit505, %tile_loop.loop_exit488
  br label %y_in_tile.loop_header480, !llvm.loop !257

y_in_tile.loop_exit479:                           ; preds = %y_in_tile.loop_header480
  %current_output529 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  %partial_reduction_result531 = load float, ptr %current_output529, align 4
  %598 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result531, i32 16, i32 31)
  store float %598, ptr %result_from_other_lane530, align 4
  call void @region_6_55(ptr %current_output529, ptr %result_from_other_lane530, ptr %return_buffer532)
  %599 = load float, ptr %return_buffer532, align 4
  store float %599, ptr %current_output529, align 4
  %partial_reduction_result534 = load float, ptr %current_output529, align 4
  %600 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result534, i32 8, i32 31)
  store float %600, ptr %result_from_other_lane533, align 4
  call void @region_6_55(ptr %current_output529, ptr %result_from_other_lane533, ptr %return_buffer535)
  %601 = load float, ptr %return_buffer535, align 4
  store float %601, ptr %current_output529, align 4
  %partial_reduction_result537 = load float, ptr %current_output529, align 4
  %602 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result537, i32 4, i32 31)
  store float %602, ptr %result_from_other_lane536, align 4
  call void @region_6_55(ptr %current_output529, ptr %result_from_other_lane536, ptr %return_buffer538)
  %603 = load float, ptr %return_buffer538, align 4
  store float %603, ptr %current_output529, align 4
  %partial_reduction_result540 = load float, ptr %current_output529, align 4
  %604 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result540, i32 2, i32 31)
  store float %604, ptr %result_from_other_lane539, align 4
  call void @region_6_55(ptr %current_output529, ptr %result_from_other_lane539, ptr %return_buffer541)
  %605 = load float, ptr %return_buffer541, align 4
  store float %605, ptr %current_output529, align 4
  %partial_reduction_result543 = load float, ptr %current_output529, align 4
  %606 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result543, i32 1, i32 31)
  store float %606, ptr %result_from_other_lane542, align 4
  call void @region_6_55(ptr %current_output529, ptr %result_from_other_lane542, ptr %return_buffer544)
  %607 = load float, ptr %return_buffer544, align 4
  store float %607, ptr %current_output529, align 4
  %608 = udiv i32 %thread_id.x471, 32
  %609 = icmp eq i32 %lane_id473, 0
  br i1 %609, label %intra_warp_reduce_write-true545, label %intra_warp_reduce_write-after546

intra_warp_reduce_write-after546:                 ; preds = %intra_warp_reduce_write-true545, %y_in_tile.loop_exit479
  call void @llvm.nvvm.barrier0()
  %610 = icmp eq i32 %608, 0
  br i1 %610, label %inter_warp_reduce-true547, label %inter_warp_reduce-after548

inter_warp_reduce-after548:                       ; preds = %reduction_write_output-after566, %intra_warp_reduce_write-after546
  br label %reduce-group-5-after

early_return470:                                  ; preds = %reduce-group-5-true
  ret void

is_full_tile-true485:                             ; preds = %y_in_tile.loop_body481
  %611 = mul i32 %thread_id.x471, 2
  store i32 0, ptr %tile_loop.invar_address491, align 4
  br label %tile_loop.loop_header489

tile_loop.loop_header489:                         ; preds = %tile_loop.loop_body490, %is_full_tile-true485
  %tile_loop.indvar492 = load i32, ptr %tile_loop.invar_address491, align 4
  %612 = icmp uge i32 %tile_loop.indvar492, 8
  br i1 %612, label %tile_loop.loop_exit488, label %tile_loop.loop_body490

tile_loop.loop_body490:                           ; preds = %tile_loop.loop_header489
  %invar.inc493 = add nuw nsw i32 %tile_loop.indvar492, 1
  store i32 %invar.inc493, ptr %tile_loop.invar_address491, align 4
  %613 = icmp eq i32 %tile_loop.indvar492, 0
  %614 = mul i32 %tile_loop.indvar492, 1024
  %615 = add i32 %614, 0
  %x_loc494 = add i32 %615, %611
  %616 = add i32 %tile_origin.1477, %y_in_tile.indvar483
  %617 = add i32 %tile_origin.2478, %x_loc494
  %618 = mul nuw nsw i32 %617, 1
  %619 = add nuw nsw i32 0, %618
  %620 = mul nuw nsw i32 %616, 8192
  %621 = add nuw nsw i32 %619, %620
  %622 = mul nuw nsw i32 %tile_origin.0476, 8192
  %623 = add nuw nsw i32 %621, %622
  %624 = udiv i32 %623, 1
  %Arg_10.11 = getelementptr inbounds float, ptr %arg10, i32 %623
  %Arg_10.11495 = load float, ptr %Arg_10.11, align 4, !invariant.load !197
  %Arg_11.12 = getelementptr inbounds float, ptr %arg11, i32 %623
  %Arg_11.12496 = load float, ptr %Arg_11.12, align 4, !invariant.load !197
  %add.53 = fadd float %Arg_10.11495, %Arg_11.12496
  store float %add.53, ptr %reduction_input_address467, align 4
  %625 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  call void @region_6_55(ptr %625, ptr %reduction_input_address467, ptr %return_buffer497)
  %626 = load float, ptr %return_buffer497, align 4
  store float %626, ptr %625, align 4
  %627 = mul i32 %tile_loop.indvar492, 1024
  %628 = add i32 %627, 1
  %x_loc498 = add i32 %628, %611
  %629 = add i32 %tile_origin.1477, %y_in_tile.indvar483
  %630 = add i32 %tile_origin.2478, %x_loc498
  %631 = mul nuw nsw i32 %630, 1
  %632 = add nuw nsw i32 0, %631
  %633 = mul nuw nsw i32 %629, 8192
  %634 = add nuw nsw i32 %632, %633
  %635 = mul nuw nsw i32 %tile_origin.0476, 8192
  %636 = add nuw nsw i32 %634, %635
  %637 = udiv i32 %636, 1
  %Arg_10.11499 = getelementptr inbounds float, ptr %arg10, i32 %636
  %Arg_10.11500 = load float, ptr %Arg_10.11499, align 4, !invariant.load !197
  %Arg_11.12501 = getelementptr inbounds float, ptr %arg11, i32 %636
  %Arg_11.12502 = load float, ptr %Arg_11.12501, align 4, !invariant.load !197
  %add.53503 = fadd float %Arg_10.11500, %Arg_11.12502
  store float %add.53503, ptr %reduction_input_address467, align 4
  %638 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  call void @region_6_55(ptr %638, ptr %reduction_input_address467, ptr %return_buffer504)
  %639 = load float, ptr %return_buffer504, align 4
  store float %639, ptr %638, align 4
  br label %tile_loop.loop_header489, !llvm.loop !258

tile_loop.loop_exit488:                           ; preds = %tile_loop.loop_header489
  br label %is_full_tile-after487

is_full_tile-false486:                            ; preds = %y_in_tile.loop_body481
  %640 = mul i32 %thread_id.x471, 2
  store i32 0, ptr %tile_loop.invar_address508, align 4
  br label %tile_loop.loop_header506

tile_loop.loop_header506:                         ; preds = %x_in_tile-after522, %is_full_tile-false486
  %tile_loop.indvar509 = load i32, ptr %tile_loop.invar_address508, align 4
  %641 = icmp uge i32 %tile_loop.indvar509, 8
  br i1 %641, label %tile_loop.loop_exit505, label %tile_loop.loop_body507

tile_loop.loop_body507:                           ; preds = %tile_loop.loop_header506
  %invar.inc510 = add nuw nsw i32 %tile_loop.indvar509, 1
  store i32 %invar.inc510, ptr %tile_loop.invar_address508, align 4
  %642 = icmp eq i32 %tile_loop.indvar509, 0
  %643 = mul i32 %tile_loop.indvar509, 1024
  %644 = add i32 %643, 0
  %x_loc511 = add i32 %644, %640
  %645 = add i32 %tile_origin.1477, %y_in_tile.indvar483
  %646 = add i32 %tile_origin.2478, %x_loc511
  %647 = icmp ult i32 %x_loc511, %tile_bound475
  br i1 %647, label %x_in_tile-true512, label %x_in_tile-after513

x_in_tile-after513:                               ; preds = %x_in_tile-true512, %tile_loop.loop_body507
  %648 = mul i32 %tile_loop.indvar509, 1024
  %649 = add i32 %648, 1
  %x_loc520 = add i32 %649, %640
  %650 = add i32 %tile_origin.1477, %y_in_tile.indvar483
  %651 = add i32 %tile_origin.2478, %x_loc520
  %652 = icmp ult i32 %x_loc520, %tile_bound475
  br i1 %652, label %x_in_tile-true521, label %x_in_tile-after522

x_in_tile-after522:                               ; preds = %x_in_tile-true521, %x_in_tile-after513
  br label %tile_loop.loop_header506, !llvm.loop !259

tile_loop.loop_exit505:                           ; preds = %tile_loop.loop_header506
  br label %is_full_tile-after487

x_in_tile-true512:                                ; preds = %tile_loop.loop_body507
  %653 = mul nuw nsw i32 %646, 1
  %654 = add nuw nsw i32 0, %653
  %655 = mul nuw nsw i32 %645, 8192
  %656 = add nuw nsw i32 %654, %655
  %657 = mul nuw nsw i32 %tile_origin.0476, 8192
  %658 = add nuw nsw i32 %656, %657
  %659 = udiv i32 %658, 1
  %Arg_10.11514 = getelementptr inbounds float, ptr %arg10, i32 %658
  %Arg_10.11515 = load float, ptr %Arg_10.11514, align 4, !invariant.load !197
  %Arg_11.12516 = getelementptr inbounds float, ptr %arg11, i32 %658
  %Arg_11.12517 = load float, ptr %Arg_11.12516, align 4, !invariant.load !197
  %add.53518 = fadd float %Arg_10.11515, %Arg_11.12517
  store float %add.53518, ptr %reduction_input_address467, align 4
  %660 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  call void @region_6_55(ptr %660, ptr %reduction_input_address467, ptr %return_buffer519)
  %661 = load float, ptr %return_buffer519, align 4
  store float %661, ptr %660, align 4
  br label %x_in_tile-after513

x_in_tile-true521:                                ; preds = %x_in_tile-after513
  %662 = mul nuw nsw i32 %651, 1
  %663 = add nuw nsw i32 0, %662
  %664 = mul nuw nsw i32 %650, 8192
  %665 = add nuw nsw i32 %663, %664
  %666 = mul nuw nsw i32 %tile_origin.0476, 8192
  %667 = add nuw nsw i32 %665, %666
  %668 = udiv i32 %667, 1
  %Arg_10.11523 = getelementptr inbounds float, ptr %arg10, i32 %667
  %Arg_10.11524 = load float, ptr %Arg_10.11523, align 4, !invariant.load !197
  %Arg_11.12525 = getelementptr inbounds float, ptr %arg11, i32 %667
  %Arg_11.12526 = load float, ptr %Arg_11.12525, align 4, !invariant.load !197
  %add.53527 = fadd float %Arg_10.11524, %Arg_11.12526
  store float %add.53527, ptr %reduction_input_address467, align 4
  %669 = getelementptr inbounds float, ptr %partial_reduction_result468, i32 0
  call void @region_6_55(ptr %669, ptr %reduction_input_address467, ptr %return_buffer528)
  %670 = load float, ptr %return_buffer528, align 4
  store float %670, ptr %669, align 4
  br label %x_in_tile-after522

intra_warp_reduce_write-true545:                  ; preds = %y_in_tile.loop_exit479
  %671 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache19, i32 0, i32 %583, i32 0, i32 %608
  %672 = addrspacecast ptr addrspace(3) %671 to ptr
  %673 = load float, ptr %current_output529, align 4
  store float %673, ptr %672, align 4
  br label %intra_warp_reduce_write-after546

inter_warp_reduce-true547:                        ; preds = %intra_warp_reduce_write-after546
  %674 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache19, i32 0, i32 %583, i32 0, i32 %lane_id473
  %675 = addrspacecast ptr addrspace(3) %674 to ptr
  store float %region_0_75_constant_19469, ptr %initial_value_addr549, align 4
  %676 = icmp ult i32 %thread_id.x471, 16
  %677 = select i1 %676, ptr %675, ptr %initial_value_addr549
  %partial_reduction_result551 = load float, ptr %677, align 4
  %678 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result551, i32 16, i32 31)
  store float %678, ptr %result_from_other_lane550, align 4
  call void @region_6_55(ptr %677, ptr %result_from_other_lane550, ptr %return_buffer552)
  %679 = load float, ptr %return_buffer552, align 4
  store float %679, ptr %677, align 4
  %partial_reduction_result554 = load float, ptr %677, align 4
  %680 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result554, i32 8, i32 31)
  store float %680, ptr %result_from_other_lane553, align 4
  call void @region_6_55(ptr %677, ptr %result_from_other_lane553, ptr %return_buffer555)
  %681 = load float, ptr %return_buffer555, align 4
  store float %681, ptr %677, align 4
  %partial_reduction_result557 = load float, ptr %677, align 4
  %682 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result557, i32 4, i32 31)
  store float %682, ptr %result_from_other_lane556, align 4
  call void @region_6_55(ptr %677, ptr %result_from_other_lane556, ptr %return_buffer558)
  %683 = load float, ptr %return_buffer558, align 4
  store float %683, ptr %677, align 4
  %partial_reduction_result560 = load float, ptr %677, align 4
  %684 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result560, i32 2, i32 31)
  store float %684, ptr %result_from_other_lane559, align 4
  call void @region_6_55(ptr %677, ptr %result_from_other_lane559, ptr %return_buffer561)
  %685 = load float, ptr %return_buffer561, align 4
  store float %685, ptr %677, align 4
  %partial_reduction_result563 = load float, ptr %677, align 4
  %686 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result563, i32 1, i32 31)
  store float %686, ptr %result_from_other_lane562, align 4
  call void @region_6_55(ptr %677, ptr %result_from_other_lane562, ptr %return_buffer564)
  %687 = load float, ptr %return_buffer564, align 4
  store float %687, ptr %677, align 4
  %688 = icmp eq i32 %thread_id.x471, 0
  br i1 %688, label %reduction_write_output-true565, label %reduction_write_output-after566

reduction_write_output-after566:                  ; preds = %reduction_write_output-true565, %inter_warp_reduce-true547
  br label %inter_warp_reduce-after548

reduction_write_output-true565:                   ; preds = %inter_warp_reduce-true547
  %689 = mul i32 %thread_id.x471, 2
  %690 = add i32 %tile_origin.1477, %thread_id.y472
  %691 = add i32 %tile_origin.2478, %689
  %692 = add i32 %691, 0
  %output567 = load float, ptr %677, align 4
  store float %output567, ptr %arg21, align 4
  br label %reduction_write_output-after566

reduce-group-6-true:                              ; preds = %reduce-group-5-after
  %region_0_75_constant_19570 = load float, ptr @6, align 4
  %693 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  store float %region_0_75_constant_19570, ptr %693, align 4
  %694 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %695 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %696 = urem i32 %694, 512
  %697 = udiv i32 %694, 512
  %698 = mul i32 %695, 1
  %699 = add i32 %698, %697
  %700 = icmp ult i32 %699, 1
  br i1 %700, label %701, label %early_return571

701:                                              ; preds = %reduce-group-6-true
  %thread_id.x572 = urem i32 %696, 512
  %thread_id.y573 = udiv i32 %696, 512
  %lane_id574 = urem i32 %696, 32
  %702 = udiv i32 %699, 1
  %703 = urem i32 %702, 1
  %704 = udiv i32 %699, 1
  %705 = urem i32 %704, 1
  %706 = udiv i32 %699, 1
  %707 = icmp eq i32 %705, 0
  %tile_bound575 = select i1 %707, i32 1, i32 1
  %708 = icmp eq i32 %703, 0
  %tile_bound576 = select i1 %708, i32 8192, i32 8192
  %tile_origin.0577 = mul i32 %706, 1
  %tile_origin.1578 = mul i32 %705, 1
  %tile_origin.2579 = mul i32 %703, 8192
  store i32 %thread_id.y573, ptr %y_in_tile.invar_address583, align 4
  br label %y_in_tile.loop_header581

y_in_tile.loop_header581:                         ; preds = %is_full_tile-after588, %701
  %y_in_tile.indvar584 = load i32, ptr %y_in_tile.invar_address583, align 4
  %709 = icmp uge i32 %y_in_tile.indvar584, %tile_bound575
  br i1 %709, label %y_in_tile.loop_exit580, label %y_in_tile.loop_body582

y_in_tile.loop_body582:                           ; preds = %y_in_tile.loop_header581
  %invar.inc585 = add nuw nsw i32 %y_in_tile.indvar584, 1
  store i32 %invar.inc585, ptr %y_in_tile.invar_address583, align 4
  %710 = icmp eq i32 %y_in_tile.indvar584, %thread_id.y573
  %711 = icmp eq i32 8192, %tile_bound576
  br i1 %711, label %is_full_tile-true586, label %is_full_tile-false587

is_full_tile-after588:                            ; preds = %tile_loop.loop_exit606, %tile_loop.loop_exit589
  br label %y_in_tile.loop_header581, !llvm.loop !260

y_in_tile.loop_exit580:                           ; preds = %y_in_tile.loop_header581
  %current_output630 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  %partial_reduction_result632 = load float, ptr %current_output630, align 4
  %712 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result632, i32 16, i32 31)
  store float %712, ptr %result_from_other_lane631, align 4
  call void @region_7_62(ptr %current_output630, ptr %result_from_other_lane631, ptr %return_buffer633)
  %713 = load float, ptr %return_buffer633, align 4
  store float %713, ptr %current_output630, align 4
  %partial_reduction_result635 = load float, ptr %current_output630, align 4
  %714 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result635, i32 8, i32 31)
  store float %714, ptr %result_from_other_lane634, align 4
  call void @region_7_62(ptr %current_output630, ptr %result_from_other_lane634, ptr %return_buffer636)
  %715 = load float, ptr %return_buffer636, align 4
  store float %715, ptr %current_output630, align 4
  %partial_reduction_result638 = load float, ptr %current_output630, align 4
  %716 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result638, i32 4, i32 31)
  store float %716, ptr %result_from_other_lane637, align 4
  call void @region_7_62(ptr %current_output630, ptr %result_from_other_lane637, ptr %return_buffer639)
  %717 = load float, ptr %return_buffer639, align 4
  store float %717, ptr %current_output630, align 4
  %partial_reduction_result641 = load float, ptr %current_output630, align 4
  %718 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result641, i32 2, i32 31)
  store float %718, ptr %result_from_other_lane640, align 4
  call void @region_7_62(ptr %current_output630, ptr %result_from_other_lane640, ptr %return_buffer642)
  %719 = load float, ptr %return_buffer642, align 4
  store float %719, ptr %current_output630, align 4
  %partial_reduction_result644 = load float, ptr %current_output630, align 4
  %720 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result644, i32 1, i32 31)
  store float %720, ptr %result_from_other_lane643, align 4
  call void @region_7_62(ptr %current_output630, ptr %result_from_other_lane643, ptr %return_buffer645)
  %721 = load float, ptr %return_buffer645, align 4
  store float %721, ptr %current_output630, align 4
  %722 = udiv i32 %thread_id.x572, 32
  %723 = icmp eq i32 %lane_id574, 0
  br i1 %723, label %intra_warp_reduce_write-true646, label %intra_warp_reduce_write-after647

intra_warp_reduce_write-after647:                 ; preds = %intra_warp_reduce_write-true646, %y_in_tile.loop_exit580
  call void @llvm.nvvm.barrier0()
  %724 = icmp eq i32 %722, 0
  br i1 %724, label %inter_warp_reduce-true648, label %inter_warp_reduce-after649

inter_warp_reduce-after649:                       ; preds = %reduction_write_output-after667, %intra_warp_reduce_write-after647
  br label %reduce-group-6-after

early_return571:                                  ; preds = %reduce-group-6-true
  ret void

is_full_tile-true586:                             ; preds = %y_in_tile.loop_body582
  %725 = mul i32 %thread_id.x572, 2
  store i32 0, ptr %tile_loop.invar_address592, align 4
  br label %tile_loop.loop_header590

tile_loop.loop_header590:                         ; preds = %tile_loop.loop_body591, %is_full_tile-true586
  %tile_loop.indvar593 = load i32, ptr %tile_loop.invar_address592, align 4
  %726 = icmp uge i32 %tile_loop.indvar593, 8
  br i1 %726, label %tile_loop.loop_exit589, label %tile_loop.loop_body591

tile_loop.loop_body591:                           ; preds = %tile_loop.loop_header590
  %invar.inc594 = add nuw nsw i32 %tile_loop.indvar593, 1
  store i32 %invar.inc594, ptr %tile_loop.invar_address592, align 4
  %727 = icmp eq i32 %tile_loop.indvar593, 0
  %728 = mul i32 %tile_loop.indvar593, 1024
  %729 = add i32 %728, 0
  %x_loc595 = add i32 %729, %725
  %730 = add i32 %tile_origin.1578, %y_in_tile.indvar584
  %731 = add i32 %tile_origin.2579, %x_loc595
  %732 = mul nuw nsw i32 %731, 1
  %733 = add nuw nsw i32 0, %732
  %734 = mul nuw nsw i32 %730, 8192
  %735 = add nuw nsw i32 %733, %734
  %736 = mul nuw nsw i32 %tile_origin.0577, 8192
  %737 = add nuw nsw i32 %735, %736
  %738 = udiv i32 %737, 1
  %Arg_12.13 = getelementptr inbounds float, ptr %arg12, i32 %737
  %Arg_12.13596 = load float, ptr %Arg_12.13, align 4, !invariant.load !197
  %Arg_13.14 = getelementptr inbounds float, ptr %arg13, i32 %737
  %Arg_13.14597 = load float, ptr %Arg_13.14, align 4, !invariant.load !197
  %add.60 = fadd float %Arg_12.13596, %Arg_13.14597
  store float %add.60, ptr %reduction_input_address568, align 4
  %739 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  call void @region_7_62(ptr %739, ptr %reduction_input_address568, ptr %return_buffer598)
  %740 = load float, ptr %return_buffer598, align 4
  store float %740, ptr %739, align 4
  %741 = mul i32 %tile_loop.indvar593, 1024
  %742 = add i32 %741, 1
  %x_loc599 = add i32 %742, %725
  %743 = add i32 %tile_origin.1578, %y_in_tile.indvar584
  %744 = add i32 %tile_origin.2579, %x_loc599
  %745 = mul nuw nsw i32 %744, 1
  %746 = add nuw nsw i32 0, %745
  %747 = mul nuw nsw i32 %743, 8192
  %748 = add nuw nsw i32 %746, %747
  %749 = mul nuw nsw i32 %tile_origin.0577, 8192
  %750 = add nuw nsw i32 %748, %749
  %751 = udiv i32 %750, 1
  %Arg_12.13600 = getelementptr inbounds float, ptr %arg12, i32 %750
  %Arg_12.13601 = load float, ptr %Arg_12.13600, align 4, !invariant.load !197
  %Arg_13.14602 = getelementptr inbounds float, ptr %arg13, i32 %750
  %Arg_13.14603 = load float, ptr %Arg_13.14602, align 4, !invariant.load !197
  %add.60604 = fadd float %Arg_12.13601, %Arg_13.14603
  store float %add.60604, ptr %reduction_input_address568, align 4
  %752 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  call void @region_7_62(ptr %752, ptr %reduction_input_address568, ptr %return_buffer605)
  %753 = load float, ptr %return_buffer605, align 4
  store float %753, ptr %752, align 4
  br label %tile_loop.loop_header590, !llvm.loop !261

tile_loop.loop_exit589:                           ; preds = %tile_loop.loop_header590
  br label %is_full_tile-after588

is_full_tile-false587:                            ; preds = %y_in_tile.loop_body582
  %754 = mul i32 %thread_id.x572, 2
  store i32 0, ptr %tile_loop.invar_address609, align 4
  br label %tile_loop.loop_header607

tile_loop.loop_header607:                         ; preds = %x_in_tile-after623, %is_full_tile-false587
  %tile_loop.indvar610 = load i32, ptr %tile_loop.invar_address609, align 4
  %755 = icmp uge i32 %tile_loop.indvar610, 8
  br i1 %755, label %tile_loop.loop_exit606, label %tile_loop.loop_body608

tile_loop.loop_body608:                           ; preds = %tile_loop.loop_header607
  %invar.inc611 = add nuw nsw i32 %tile_loop.indvar610, 1
  store i32 %invar.inc611, ptr %tile_loop.invar_address609, align 4
  %756 = icmp eq i32 %tile_loop.indvar610, 0
  %757 = mul i32 %tile_loop.indvar610, 1024
  %758 = add i32 %757, 0
  %x_loc612 = add i32 %758, %754
  %759 = add i32 %tile_origin.1578, %y_in_tile.indvar584
  %760 = add i32 %tile_origin.2579, %x_loc612
  %761 = icmp ult i32 %x_loc612, %tile_bound576
  br i1 %761, label %x_in_tile-true613, label %x_in_tile-after614

x_in_tile-after614:                               ; preds = %x_in_tile-true613, %tile_loop.loop_body608
  %762 = mul i32 %tile_loop.indvar610, 1024
  %763 = add i32 %762, 1
  %x_loc621 = add i32 %763, %754
  %764 = add i32 %tile_origin.1578, %y_in_tile.indvar584
  %765 = add i32 %tile_origin.2579, %x_loc621
  %766 = icmp ult i32 %x_loc621, %tile_bound576
  br i1 %766, label %x_in_tile-true622, label %x_in_tile-after623

x_in_tile-after623:                               ; preds = %x_in_tile-true622, %x_in_tile-after614
  br label %tile_loop.loop_header607, !llvm.loop !262

tile_loop.loop_exit606:                           ; preds = %tile_loop.loop_header607
  br label %is_full_tile-after588

x_in_tile-true613:                                ; preds = %tile_loop.loop_body608
  %767 = mul nuw nsw i32 %760, 1
  %768 = add nuw nsw i32 0, %767
  %769 = mul nuw nsw i32 %759, 8192
  %770 = add nuw nsw i32 %768, %769
  %771 = mul nuw nsw i32 %tile_origin.0577, 8192
  %772 = add nuw nsw i32 %770, %771
  %773 = udiv i32 %772, 1
  %Arg_12.13615 = getelementptr inbounds float, ptr %arg12, i32 %772
  %Arg_12.13616 = load float, ptr %Arg_12.13615, align 4, !invariant.load !197
  %Arg_13.14617 = getelementptr inbounds float, ptr %arg13, i32 %772
  %Arg_13.14618 = load float, ptr %Arg_13.14617, align 4, !invariant.load !197
  %add.60619 = fadd float %Arg_12.13616, %Arg_13.14618
  store float %add.60619, ptr %reduction_input_address568, align 4
  %774 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  call void @region_7_62(ptr %774, ptr %reduction_input_address568, ptr %return_buffer620)
  %775 = load float, ptr %return_buffer620, align 4
  store float %775, ptr %774, align 4
  br label %x_in_tile-after614

x_in_tile-true622:                                ; preds = %x_in_tile-after614
  %776 = mul nuw nsw i32 %765, 1
  %777 = add nuw nsw i32 0, %776
  %778 = mul nuw nsw i32 %764, 8192
  %779 = add nuw nsw i32 %777, %778
  %780 = mul nuw nsw i32 %tile_origin.0577, 8192
  %781 = add nuw nsw i32 %779, %780
  %782 = udiv i32 %781, 1
  %Arg_12.13624 = getelementptr inbounds float, ptr %arg12, i32 %781
  %Arg_12.13625 = load float, ptr %Arg_12.13624, align 4, !invariant.load !197
  %Arg_13.14626 = getelementptr inbounds float, ptr %arg13, i32 %781
  %Arg_13.14627 = load float, ptr %Arg_13.14626, align 4, !invariant.load !197
  %add.60628 = fadd float %Arg_12.13625, %Arg_13.14627
  store float %add.60628, ptr %reduction_input_address568, align 4
  %783 = getelementptr inbounds float, ptr %partial_reduction_result569, i32 0
  call void @region_7_62(ptr %783, ptr %reduction_input_address568, ptr %return_buffer629)
  %784 = load float, ptr %return_buffer629, align 4
  store float %784, ptr %783, align 4
  br label %x_in_tile-after623

intra_warp_reduce_write-true646:                  ; preds = %y_in_tile.loop_exit580
  %785 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %697, i32 0, i32 %722
  %786 = addrspacecast ptr addrspace(3) %785 to ptr
  %787 = load float, ptr %current_output630, align 4
  store float %787, ptr %786, align 4
  br label %intra_warp_reduce_write-after647

inter_warp_reduce-true648:                        ; preds = %intra_warp_reduce_write-after647
  %788 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache20, i32 0, i32 %697, i32 0, i32 %lane_id574
  %789 = addrspacecast ptr addrspace(3) %788 to ptr
  store float %region_0_75_constant_19570, ptr %initial_value_addr650, align 4
  %790 = icmp ult i32 %thread_id.x572, 16
  %791 = select i1 %790, ptr %789, ptr %initial_value_addr650
  %partial_reduction_result652 = load float, ptr %791, align 4
  %792 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result652, i32 16, i32 31)
  store float %792, ptr %result_from_other_lane651, align 4
  call void @region_7_62(ptr %791, ptr %result_from_other_lane651, ptr %return_buffer653)
  %793 = load float, ptr %return_buffer653, align 4
  store float %793, ptr %791, align 4
  %partial_reduction_result655 = load float, ptr %791, align 4
  %794 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result655, i32 8, i32 31)
  store float %794, ptr %result_from_other_lane654, align 4
  call void @region_7_62(ptr %791, ptr %result_from_other_lane654, ptr %return_buffer656)
  %795 = load float, ptr %return_buffer656, align 4
  store float %795, ptr %791, align 4
  %partial_reduction_result658 = load float, ptr %791, align 4
  %796 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result658, i32 4, i32 31)
  store float %796, ptr %result_from_other_lane657, align 4
  call void @region_7_62(ptr %791, ptr %result_from_other_lane657, ptr %return_buffer659)
  %797 = load float, ptr %return_buffer659, align 4
  store float %797, ptr %791, align 4
  %partial_reduction_result661 = load float, ptr %791, align 4
  %798 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result661, i32 2, i32 31)
  store float %798, ptr %result_from_other_lane660, align 4
  call void @region_7_62(ptr %791, ptr %result_from_other_lane660, ptr %return_buffer662)
  %799 = load float, ptr %return_buffer662, align 4
  store float %799, ptr %791, align 4
  %partial_reduction_result664 = load float, ptr %791, align 4
  %800 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result664, i32 1, i32 31)
  store float %800, ptr %result_from_other_lane663, align 4
  call void @region_7_62(ptr %791, ptr %result_from_other_lane663, ptr %return_buffer665)
  %801 = load float, ptr %return_buffer665, align 4
  store float %801, ptr %791, align 4
  %802 = icmp eq i32 %thread_id.x572, 0
  br i1 %802, label %reduction_write_output-true666, label %reduction_write_output-after667

reduction_write_output-after667:                  ; preds = %reduction_write_output-true666, %inter_warp_reduce-true648
  br label %inter_warp_reduce-after649

reduction_write_output-true666:                   ; preds = %inter_warp_reduce-true648
  %803 = mul i32 %thread_id.x572, 2
  %804 = add i32 %tile_origin.1578, %thread_id.y573
  %805 = add i32 %tile_origin.2579, %803
  %806 = add i32 %805, 0
  %output668 = load float, ptr %791, align 4
  store float %output668, ptr %arg22, align 4
  br label %reduction_write_output-after667

reduce-group-7-true:                              ; preds = %reduce-group-6-after
  %region_0_75_constant_19671 = load float, ptr @6, align 4
  %807 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  store float %region_0_75_constant_19671, ptr %807, align 4
  %808 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %809 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %810 = urem i32 %808, 512
  %811 = udiv i32 %808, 512
  %812 = mul i32 %809, 1
  %813 = add i32 %812, %811
  %814 = icmp ult i32 %813, 1
  br i1 %814, label %815, label %early_return672

815:                                              ; preds = %reduce-group-7-true
  %thread_id.x673 = urem i32 %810, 512
  %thread_id.y674 = udiv i32 %810, 512
  %lane_id675 = urem i32 %810, 32
  %816 = udiv i32 %813, 1
  %817 = urem i32 %816, 1
  %818 = udiv i32 %813, 1
  %819 = urem i32 %818, 1
  %820 = udiv i32 %813, 1
  %821 = icmp eq i32 %819, 0
  %tile_bound676 = select i1 %821, i32 1, i32 1
  %822 = icmp eq i32 %817, 0
  %tile_bound677 = select i1 %822, i32 8192, i32 8192
  %tile_origin.0678 = mul i32 %820, 1
  %tile_origin.1679 = mul i32 %819, 1
  %tile_origin.2680 = mul i32 %817, 8192
  store i32 %thread_id.y674, ptr %y_in_tile.invar_address684, align 4
  br label %y_in_tile.loop_header682

y_in_tile.loop_header682:                         ; preds = %is_full_tile-after689, %815
  %y_in_tile.indvar685 = load i32, ptr %y_in_tile.invar_address684, align 4
  %823 = icmp uge i32 %y_in_tile.indvar685, %tile_bound676
  br i1 %823, label %y_in_tile.loop_exit681, label %y_in_tile.loop_body683

y_in_tile.loop_body683:                           ; preds = %y_in_tile.loop_header682
  %invar.inc686 = add nuw nsw i32 %y_in_tile.indvar685, 1
  store i32 %invar.inc686, ptr %y_in_tile.invar_address684, align 4
  %824 = icmp eq i32 %y_in_tile.indvar685, %thread_id.y674
  %825 = icmp eq i32 8192, %tile_bound677
  br i1 %825, label %is_full_tile-true687, label %is_full_tile-false688

is_full_tile-after689:                            ; preds = %tile_loop.loop_exit707, %tile_loop.loop_exit690
  br label %y_in_tile.loop_header682, !llvm.loop !263

y_in_tile.loop_exit681:                           ; preds = %y_in_tile.loop_header682
  %current_output731 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  %partial_reduction_result733 = load float, ptr %current_output731, align 4
  %826 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result733, i32 16, i32 31)
  store float %826, ptr %result_from_other_lane732, align 4
  call void @region_8_69(ptr %current_output731, ptr %result_from_other_lane732, ptr %return_buffer734)
  %827 = load float, ptr %return_buffer734, align 4
  store float %827, ptr %current_output731, align 4
  %partial_reduction_result736 = load float, ptr %current_output731, align 4
  %828 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result736, i32 8, i32 31)
  store float %828, ptr %result_from_other_lane735, align 4
  call void @region_8_69(ptr %current_output731, ptr %result_from_other_lane735, ptr %return_buffer737)
  %829 = load float, ptr %return_buffer737, align 4
  store float %829, ptr %current_output731, align 4
  %partial_reduction_result739 = load float, ptr %current_output731, align 4
  %830 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result739, i32 4, i32 31)
  store float %830, ptr %result_from_other_lane738, align 4
  call void @region_8_69(ptr %current_output731, ptr %result_from_other_lane738, ptr %return_buffer740)
  %831 = load float, ptr %return_buffer740, align 4
  store float %831, ptr %current_output731, align 4
  %partial_reduction_result742 = load float, ptr %current_output731, align 4
  %832 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result742, i32 2, i32 31)
  store float %832, ptr %result_from_other_lane741, align 4
  call void @region_8_69(ptr %current_output731, ptr %result_from_other_lane741, ptr %return_buffer743)
  %833 = load float, ptr %return_buffer743, align 4
  store float %833, ptr %current_output731, align 4
  %partial_reduction_result745 = load float, ptr %current_output731, align 4
  %834 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result745, i32 1, i32 31)
  store float %834, ptr %result_from_other_lane744, align 4
  call void @region_8_69(ptr %current_output731, ptr %result_from_other_lane744, ptr %return_buffer746)
  %835 = load float, ptr %return_buffer746, align 4
  store float %835, ptr %current_output731, align 4
  %836 = udiv i32 %thread_id.x673, 32
  %837 = icmp eq i32 %lane_id675, 0
  br i1 %837, label %intra_warp_reduce_write-true747, label %intra_warp_reduce_write-after748

intra_warp_reduce_write-after748:                 ; preds = %intra_warp_reduce_write-true747, %y_in_tile.loop_exit681
  call void @llvm.nvvm.barrier0()
  %838 = icmp eq i32 %836, 0
  br i1 %838, label %inter_warp_reduce-true749, label %inter_warp_reduce-after750

inter_warp_reduce-after750:                       ; preds = %reduction_write_output-after768, %intra_warp_reduce_write-after748
  br label %reduce-group-7-after

early_return672:                                  ; preds = %reduce-group-7-true
  ret void

is_full_tile-true687:                             ; preds = %y_in_tile.loop_body683
  %839 = mul i32 %thread_id.x673, 2
  store i32 0, ptr %tile_loop.invar_address693, align 4
  br label %tile_loop.loop_header691

tile_loop.loop_header691:                         ; preds = %tile_loop.loop_body692, %is_full_tile-true687
  %tile_loop.indvar694 = load i32, ptr %tile_loop.invar_address693, align 4
  %840 = icmp uge i32 %tile_loop.indvar694, 8
  br i1 %840, label %tile_loop.loop_exit690, label %tile_loop.loop_body692

tile_loop.loop_body692:                           ; preds = %tile_loop.loop_header691
  %invar.inc695 = add nuw nsw i32 %tile_loop.indvar694, 1
  store i32 %invar.inc695, ptr %tile_loop.invar_address693, align 4
  %841 = icmp eq i32 %tile_loop.indvar694, 0
  %842 = mul i32 %tile_loop.indvar694, 1024
  %843 = add i32 %842, 0
  %x_loc696 = add i32 %843, %839
  %844 = add i32 %tile_origin.1679, %y_in_tile.indvar685
  %845 = add i32 %tile_origin.2680, %x_loc696
  %846 = mul nuw nsw i32 %845, 1
  %847 = add nuw nsw i32 0, %846
  %848 = mul nuw nsw i32 %844, 8192
  %849 = add nuw nsw i32 %847, %848
  %850 = mul nuw nsw i32 %tile_origin.0678, 8192
  %851 = add nuw nsw i32 %849, %850
  %852 = udiv i32 %851, 1
  %Arg_14.15 = getelementptr inbounds float, ptr %arg14, i32 %851
  %Arg_14.15697 = load float, ptr %Arg_14.15, align 4, !invariant.load !197
  %Arg_15.16 = getelementptr inbounds float, ptr %arg15, i32 %851
  %Arg_15.16698 = load float, ptr %Arg_15.16, align 4, !invariant.load !197
  %add.67 = fadd float %Arg_14.15697, %Arg_15.16698
  store float %add.67, ptr %reduction_input_address669, align 4
  %853 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  call void @region_8_69(ptr %853, ptr %reduction_input_address669, ptr %return_buffer699)
  %854 = load float, ptr %return_buffer699, align 4
  store float %854, ptr %853, align 4
  %855 = mul i32 %tile_loop.indvar694, 1024
  %856 = add i32 %855, 1
  %x_loc700 = add i32 %856, %839
  %857 = add i32 %tile_origin.1679, %y_in_tile.indvar685
  %858 = add i32 %tile_origin.2680, %x_loc700
  %859 = mul nuw nsw i32 %858, 1
  %860 = add nuw nsw i32 0, %859
  %861 = mul nuw nsw i32 %857, 8192
  %862 = add nuw nsw i32 %860, %861
  %863 = mul nuw nsw i32 %tile_origin.0678, 8192
  %864 = add nuw nsw i32 %862, %863
  %865 = udiv i32 %864, 1
  %Arg_14.15701 = getelementptr inbounds float, ptr %arg14, i32 %864
  %Arg_14.15702 = load float, ptr %Arg_14.15701, align 4, !invariant.load !197
  %Arg_15.16703 = getelementptr inbounds float, ptr %arg15, i32 %864
  %Arg_15.16704 = load float, ptr %Arg_15.16703, align 4, !invariant.load !197
  %add.67705 = fadd float %Arg_14.15702, %Arg_15.16704
  store float %add.67705, ptr %reduction_input_address669, align 4
  %866 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  call void @region_8_69(ptr %866, ptr %reduction_input_address669, ptr %return_buffer706)
  %867 = load float, ptr %return_buffer706, align 4
  store float %867, ptr %866, align 4
  br label %tile_loop.loop_header691, !llvm.loop !264

tile_loop.loop_exit690:                           ; preds = %tile_loop.loop_header691
  br label %is_full_tile-after689

is_full_tile-false688:                            ; preds = %y_in_tile.loop_body683
  %868 = mul i32 %thread_id.x673, 2
  store i32 0, ptr %tile_loop.invar_address710, align 4
  br label %tile_loop.loop_header708

tile_loop.loop_header708:                         ; preds = %x_in_tile-after724, %is_full_tile-false688
  %tile_loop.indvar711 = load i32, ptr %tile_loop.invar_address710, align 4
  %869 = icmp uge i32 %tile_loop.indvar711, 8
  br i1 %869, label %tile_loop.loop_exit707, label %tile_loop.loop_body709

tile_loop.loop_body709:                           ; preds = %tile_loop.loop_header708
  %invar.inc712 = add nuw nsw i32 %tile_loop.indvar711, 1
  store i32 %invar.inc712, ptr %tile_loop.invar_address710, align 4
  %870 = icmp eq i32 %tile_loop.indvar711, 0
  %871 = mul i32 %tile_loop.indvar711, 1024
  %872 = add i32 %871, 0
  %x_loc713 = add i32 %872, %868
  %873 = add i32 %tile_origin.1679, %y_in_tile.indvar685
  %874 = add i32 %tile_origin.2680, %x_loc713
  %875 = icmp ult i32 %x_loc713, %tile_bound677
  br i1 %875, label %x_in_tile-true714, label %x_in_tile-after715

x_in_tile-after715:                               ; preds = %x_in_tile-true714, %tile_loop.loop_body709
  %876 = mul i32 %tile_loop.indvar711, 1024
  %877 = add i32 %876, 1
  %x_loc722 = add i32 %877, %868
  %878 = add i32 %tile_origin.1679, %y_in_tile.indvar685
  %879 = add i32 %tile_origin.2680, %x_loc722
  %880 = icmp ult i32 %x_loc722, %tile_bound677
  br i1 %880, label %x_in_tile-true723, label %x_in_tile-after724

x_in_tile-after724:                               ; preds = %x_in_tile-true723, %x_in_tile-after715
  br label %tile_loop.loop_header708, !llvm.loop !265

tile_loop.loop_exit707:                           ; preds = %tile_loop.loop_header708
  br label %is_full_tile-after689

x_in_tile-true714:                                ; preds = %tile_loop.loop_body709
  %881 = mul nuw nsw i32 %874, 1
  %882 = add nuw nsw i32 0, %881
  %883 = mul nuw nsw i32 %873, 8192
  %884 = add nuw nsw i32 %882, %883
  %885 = mul nuw nsw i32 %tile_origin.0678, 8192
  %886 = add nuw nsw i32 %884, %885
  %887 = udiv i32 %886, 1
  %Arg_14.15716 = getelementptr inbounds float, ptr %arg14, i32 %886
  %Arg_14.15717 = load float, ptr %Arg_14.15716, align 4, !invariant.load !197
  %Arg_15.16718 = getelementptr inbounds float, ptr %arg15, i32 %886
  %Arg_15.16719 = load float, ptr %Arg_15.16718, align 4, !invariant.load !197
  %add.67720 = fadd float %Arg_14.15717, %Arg_15.16719
  store float %add.67720, ptr %reduction_input_address669, align 4
  %888 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  call void @region_8_69(ptr %888, ptr %reduction_input_address669, ptr %return_buffer721)
  %889 = load float, ptr %return_buffer721, align 4
  store float %889, ptr %888, align 4
  br label %x_in_tile-after715

x_in_tile-true723:                                ; preds = %x_in_tile-after715
  %890 = mul nuw nsw i32 %879, 1
  %891 = add nuw nsw i32 0, %890
  %892 = mul nuw nsw i32 %878, 8192
  %893 = add nuw nsw i32 %891, %892
  %894 = mul nuw nsw i32 %tile_origin.0678, 8192
  %895 = add nuw nsw i32 %893, %894
  %896 = udiv i32 %895, 1
  %Arg_14.15725 = getelementptr inbounds float, ptr %arg14, i32 %895
  %Arg_14.15726 = load float, ptr %Arg_14.15725, align 4, !invariant.load !197
  %Arg_15.16727 = getelementptr inbounds float, ptr %arg15, i32 %895
  %Arg_15.16728 = load float, ptr %Arg_15.16727, align 4, !invariant.load !197
  %add.67729 = fadd float %Arg_14.15726, %Arg_15.16728
  store float %add.67729, ptr %reduction_input_address669, align 4
  %897 = getelementptr inbounds float, ptr %partial_reduction_result670, i32 0
  call void @region_8_69(ptr %897, ptr %reduction_input_address669, ptr %return_buffer730)
  %898 = load float, ptr %return_buffer730, align 4
  store float %898, ptr %897, align 4
  br label %x_in_tile-after724

intra_warp_reduce_write-true747:                  ; preds = %y_in_tile.loop_exit681
  %899 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %811, i32 0, i32 %836
  %900 = addrspacecast ptr addrspace(3) %899 to ptr
  %901 = load float, ptr %current_output731, align 4
  store float %901, ptr %900, align 4
  br label %intra_warp_reduce_write-after748

inter_warp_reduce-true749:                        ; preds = %intra_warp_reduce_write-after748
  %902 = getelementptr inbounds [1 x [1 x [16 x float]]], ptr addrspace(3) @shared_cache21, i32 0, i32 %811, i32 0, i32 %lane_id675
  %903 = addrspacecast ptr addrspace(3) %902 to ptr
  store float %region_0_75_constant_19671, ptr %initial_value_addr751, align 4
  %904 = icmp ult i32 %thread_id.x673, 16
  %905 = select i1 %904, ptr %903, ptr %initial_value_addr751
  %partial_reduction_result753 = load float, ptr %905, align 4
  %906 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result753, i32 16, i32 31)
  store float %906, ptr %result_from_other_lane752, align 4
  call void @region_8_69(ptr %905, ptr %result_from_other_lane752, ptr %return_buffer754)
  %907 = load float, ptr %return_buffer754, align 4
  store float %907, ptr %905, align 4
  %partial_reduction_result756 = load float, ptr %905, align 4
  %908 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result756, i32 8, i32 31)
  store float %908, ptr %result_from_other_lane755, align 4
  call void @region_8_69(ptr %905, ptr %result_from_other_lane755, ptr %return_buffer757)
  %909 = load float, ptr %return_buffer757, align 4
  store float %909, ptr %905, align 4
  %partial_reduction_result759 = load float, ptr %905, align 4
  %910 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result759, i32 4, i32 31)
  store float %910, ptr %result_from_other_lane758, align 4
  call void @region_8_69(ptr %905, ptr %result_from_other_lane758, ptr %return_buffer760)
  %911 = load float, ptr %return_buffer760, align 4
  store float %911, ptr %905, align 4
  %partial_reduction_result762 = load float, ptr %905, align 4
  %912 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result762, i32 2, i32 31)
  store float %912, ptr %result_from_other_lane761, align 4
  call void @region_8_69(ptr %905, ptr %result_from_other_lane761, ptr %return_buffer763)
  %913 = load float, ptr %return_buffer763, align 4
  store float %913, ptr %905, align 4
  %partial_reduction_result765 = load float, ptr %905, align 4
  %914 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result765, i32 1, i32 31)
  store float %914, ptr %result_from_other_lane764, align 4
  call void @region_8_69(ptr %905, ptr %result_from_other_lane764, ptr %return_buffer766)
  %915 = load float, ptr %return_buffer766, align 4
  store float %915, ptr %905, align 4
  %916 = icmp eq i32 %thread_id.x673, 0
  br i1 %916, label %reduction_write_output-true767, label %reduction_write_output-after768

reduction_write_output-after768:                  ; preds = %reduction_write_output-true767, %inter_warp_reduce-true749
  br label %inter_warp_reduce-after750

reduction_write_output-true767:                   ; preds = %inter_warp_reduce-true749
  %917 = mul i32 %thread_id.x673, 2
  %918 = add i32 %tile_origin.1679, %thread_id.y674
  %919 = add i32 %tile_origin.2680, %917
  %920 = add i32 %919, 0
  %output769 = load float, ptr %905, align 4
  store float %output769, ptr %arg23, align 4
  br label %reduction_write_output-after768
}

define internal void @region_1_20__1(ptr dereferenceable(4) %Arg_0.21.typed, ptr dereferenceable(4) %Arg_1.22.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.23.typed = alloca float, align 4
  %Arg_0.21 = load float, ptr %Arg_0.21.typed, align 4
  %Arg_1.22 = load float, ptr %Arg_1.22.typed, align 4
  %add.23 = fadd float %Arg_0.21, %Arg_1.22
  store float %add.23, ptr %add.23.typed, align 4
  %load_ret_value = load float, ptr %add.23.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_27__1(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_34__1(ptr dereferenceable(4) %Arg_0.35.typed, ptr dereferenceable(4) %Arg_1.36.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.37.typed = alloca float, align 4
  %Arg_0.35 = load float, ptr %Arg_0.35.typed, align 4
  %Arg_1.36 = load float, ptr %Arg_1.36.typed, align 4
  %add.37 = fadd float %Arg_0.35, %Arg_1.36
  store float %add.37, ptr %add.37.typed, align 4
  %load_ret_value = load float, ptr %add.37.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_41(ptr dereferenceable(4) %Arg_0.42.typed, ptr dereferenceable(4) %Arg_1.43.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.44.typed = alloca float, align 4
  %Arg_0.42 = load float, ptr %Arg_0.42.typed, align 4
  %Arg_1.43 = load float, ptr %Arg_1.43.typed, align 4
  %add.44 = fadd float %Arg_0.42, %Arg_1.43
  store float %add.44, ptr %add.44.typed, align 4
  %load_ret_value = load float, ptr %add.44.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_48(ptr dereferenceable(4) %Arg_0.49.typed, ptr dereferenceable(4) %Arg_1.50.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.51.typed = alloca float, align 4
  %Arg_0.49 = load float, ptr %Arg_0.49.typed, align 4
  %Arg_1.50 = load float, ptr %Arg_1.50.typed, align 4
  %add.51 = fadd float %Arg_0.49, %Arg_1.50
  store float %add.51, ptr %add.51.typed, align 4
  %load_ret_value = load float, ptr %add.51.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_6_55(ptr dereferenceable(4) %Arg_0.56.typed, ptr dereferenceable(4) %Arg_1.57.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.58.typed = alloca float, align 4
  %Arg_0.56 = load float, ptr %Arg_0.56.typed, align 4
  %Arg_1.57 = load float, ptr %Arg_1.57.typed, align 4
  %add.58 = fadd float %Arg_0.56, %Arg_1.57
  store float %add.58, ptr %add.58.typed, align 4
  %load_ret_value = load float, ptr %add.58.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_7_62(ptr dereferenceable(4) %Arg_0.63.typed, ptr dereferenceable(4) %Arg_1.64.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.65.typed = alloca float, align 4
  %Arg_0.63 = load float, ptr %Arg_0.63.typed, align 4
  %Arg_1.64 = load float, ptr %Arg_1.64.typed, align 4
  %add.65 = fadd float %Arg_0.63, %Arg_1.64
  store float %add.65, ptr %add.65.typed, align 4
  %load_ret_value = load float, ptr %add.65.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_8_69(ptr dereferenceable(4) %Arg_0.70.typed, ptr dereferenceable(4) %Arg_1.71.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.72.typed = alloca float, align 4
  %Arg_0.70 = load float, ptr %Arg_0.70.typed, align 4
  %Arg_1.71 = load float, ptr %Arg_1.71.typed, align 4
  %add.72 = fadd float %Arg_0.70, %Arg_1.71
  store float %add.72, ptr %add.72.typed, align 4
  %load_ret_value = load float, ptr %add.72.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_445(ptr noalias align 16 dereferenceable(4) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(4) %arg3, ptr noalias align 128 dereferenceable(4) %arg4, ptr noalias align 16 dereferenceable(4) %arg5, ptr noalias align 128 dereferenceable(4) %arg6, ptr noalias align 16 dereferenceable(4) %arg7, ptr noalias align 128 dereferenceable(4) %arg8, ptr noalias align 16 dereferenceable(4) %arg9, ptr noalias align 128 dereferenceable(4) %arg10, ptr noalias align 16 dereferenceable(4) %arg11, ptr noalias align 128 dereferenceable(4) %arg12, ptr noalias align 16 dereferenceable(4) %arg13, ptr noalias align 128 dereferenceable(4) %arg14, ptr noalias align 16 dereferenceable(4) %arg15, ptr noalias align 128 dereferenceable(4) %arg16, ptr noalias align 16 dereferenceable(4) %arg17, ptr noalias align 128 dereferenceable(4) %arg18, ptr noalias align 16 dereferenceable(4) %arg19, ptr noalias align 128 dereferenceable(4) %arg20, ptr noalias align 16 dereferenceable(4) %arg21, ptr noalias align 128 dereferenceable(4) %arg22, ptr noalias align 16 dereferenceable(4) %arg23, ptr noalias align 128 dereferenceable(4) %arg24, ptr noalias align 16 dereferenceable(4) %arg25, ptr noalias align 128 dereferenceable(4) %arg26, ptr noalias align 16 dereferenceable(4) %arg27, ptr noalias align 128 dereferenceable(4) %arg28, ptr noalias align 16 dereferenceable(4) %arg29, ptr noalias align 128 dereferenceable(4) %arg30, ptr noalias align 16 dereferenceable(4) %arg31, ptr noalias align 128 dereferenceable(4) %arg32, ptr noalias align 16 dereferenceable(4) %arg33, ptr noalias align 128 dereferenceable(4) %arg34, ptr noalias align 16 dereferenceable(4) %arg35, ptr noalias align 128 dereferenceable(4) %arg36, ptr noalias align 16 dereferenceable(4) %arg37, ptr noalias align 128 dereferenceable(4) %arg38, ptr noalias align 16 dereferenceable(4) %arg39, ptr noalias align 128 dereferenceable(4) %arg40, ptr noalias align 128 dereferenceable(4) %arg41, ptr noalias align 128 dereferenceable(4) %arg42, ptr noalias align 128 dereferenceable(4) %arg43, ptr noalias align 128 dereferenceable(4) %arg44, ptr noalias align 128 dereferenceable(4) %arg45, ptr noalias align 128 dereferenceable(4) %arg46, ptr noalias align 128 dereferenceable(4) %arg47, ptr noalias align 128 dereferenceable(4) %arg48, ptr noalias align 128 dereferenceable(4) %arg49, ptr noalias align 128 dereferenceable(4) %arg50, ptr noalias align 128 dereferenceable(4) %arg51, ptr noalias align 128 dereferenceable(4) %arg52, ptr noalias align 128 dereferenceable(4) %arg53, ptr noalias align 128 dereferenceable(4) %arg54, ptr noalias align 128 dereferenceable(4) %arg55, ptr noalias align 128 dereferenceable(4) %arg56, ptr noalias align 128 dereferenceable(4) %arg57, ptr noalias align 128 dereferenceable(4) %arg58, ptr noalias align 128 dereferenceable(4) %arg59, ptr noalias align 128 dereferenceable(4) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !194
  %2 = mul nuw nsw i32 %0, 1
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 1
  br i1 %4, label %fusion_445.in_bounds-true, label %fusion_445.in_bounds-after

fusion_445.in_bounds-after:                       ; preds = %fusion_445.in_bounds-true, %entry
  ret void

fusion_445.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = load float, ptr %arg1, align 4, !invariant.load !197
  %multiply.44 = fmul float %7, %8
  %subtract.45 = fsub float %6, %multiply.44
  %9 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %10 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %12 = load float, ptr %arg4, align 4, !invariant.load !197
  %multiply.47 = fmul float %7, %12
  %subtract.48 = fsub float %11, %multiply.47
  %13 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %9, float %subtract.48, 1
  %14 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %15 = load float, ptr %14, align 4, !invariant.load !197
  %16 = load float, ptr %arg6, align 4, !invariant.load !197
  %multiply.50 = fmul float %7, %16
  %subtract.51 = fsub float %15, %multiply.50
  %17 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %13, float %subtract.51, 2
  %18 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = load float, ptr %arg8, align 4, !invariant.load !197
  %multiply.53 = fmul float %7, %20
  %subtract.54 = fsub float %19, %multiply.53
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %17, float %subtract.54, 3
  %22 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = load float, ptr %arg10, align 4, !invariant.load !197
  %multiply.56 = fmul float %7, %24
  %subtract.57 = fsub float %23, %multiply.56
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.57, 4
  %26 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = load float, ptr %arg12, align 4, !invariant.load !197
  %multiply.59 = fmul float %7, %28
  %subtract.60 = fsub float %27, %multiply.59
  %29 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.60, 5
  %30 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %32 = load float, ptr %arg14, align 4, !invariant.load !197
  %multiply.62 = fmul float %7, %32
  %subtract.63 = fsub float %31, %multiply.62
  %33 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %29, float %subtract.63, 6
  %34 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %35 = load float, ptr %34, align 4, !invariant.load !197
  %36 = load float, ptr %arg16, align 4, !invariant.load !197
  %multiply.65 = fmul float %7, %36
  %subtract.66 = fsub float %35, %multiply.65
  %37 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %33, float %subtract.66, 7
  %38 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %40 = load float, ptr %arg18, align 4, !invariant.load !197
  %multiply.68 = fmul float %7, %40
  %subtract.69 = fsub float %39, %multiply.68
  %41 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %37, float %subtract.69, 8
  %42 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %43 = load float, ptr %42, align 4, !invariant.load !197
  %44 = load float, ptr %arg20, align 4, !invariant.load !197
  %multiply.71 = fmul float %7, %44
  %subtract.72 = fsub float %43, %multiply.71
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %41, float %subtract.72, 9
  %46 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !197
  %48 = load float, ptr %arg22, align 4, !invariant.load !197
  %multiply.74 = fmul float %7, %48
  %subtract.75 = fsub float %47, %multiply.74
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.75, 10
  %50 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = load float, ptr %arg24, align 4, !invariant.load !197
  %multiply.77 = fmul float %7, %52
  %subtract.78 = fsub float %51, %multiply.77
  %53 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.78, 11
  %54 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %56 = load float, ptr %arg26, align 4, !invariant.load !197
  %multiply.80 = fmul float %7, %56
  %subtract.81 = fsub float %55, %multiply.80
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %53, float %subtract.81, 12
  %58 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %60 = load float, ptr %arg28, align 4, !invariant.load !197
  %multiply.83 = fmul float %7, %60
  %subtract.84 = fsub float %59, %multiply.83
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.84, 13
  %62 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %64 = load float, ptr %arg30, align 4, !invariant.load !197
  %multiply.86 = fmul float %7, %64
  %subtract.87 = fsub float %63, %multiply.86
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.87, 14
  %66 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %68 = load float, ptr %arg32, align 4, !invariant.load !197
  %multiply.89 = fmul float %7, %68
  %subtract.90 = fsub float %67, %multiply.89
  %69 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.90, 15
  %70 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %71 = load float, ptr %70, align 4, !invariant.load !197
  %72 = load float, ptr %arg34, align 4, !invariant.load !197
  %multiply.92 = fmul float %7, %72
  %subtract.93 = fsub float %71, %multiply.92
  %73 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %69, float %subtract.93, 16
  %74 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %75 = load float, ptr %74, align 4, !invariant.load !197
  %76 = load float, ptr %arg36, align 4, !invariant.load !197
  %multiply.95 = fmul float %7, %76
  %subtract.96 = fsub float %75, %multiply.95
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %73, float %subtract.96, 17
  %78 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %80 = load float, ptr %arg38, align 4, !invariant.load !197
  %multiply.98 = fmul float %7, %80
  %subtract.99 = fsub float %79, %multiply.98
  %81 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.99, 18
  %82 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %84 = load float, ptr %arg40, align 4, !invariant.load !197
  %multiply.101 = fmul float %7, %84
  %subtract.102 = fsub float %83, %multiply.101
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %81, float %subtract.102, 19
  %86 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 0
  %87 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %86, ptr %87, align 4
  %88 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 1
  %89 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %88, ptr %89, align 4
  %90 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 2
  %91 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %90, ptr %91, align 4
  %92 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 3
  %93 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %92, ptr %93, align 4
  %94 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 4
  %95 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %94, ptr %95, align 4
  %96 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 5
  %97 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %96, ptr %97, align 4
  %98 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 6
  %99 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %98, ptr %99, align 4
  %100 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 7
  %101 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %100, ptr %101, align 4
  %102 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 8
  %103 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %102, ptr %103, align 4
  %104 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 9
  %105 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %104, ptr %105, align 4
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 10
  %107 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 11
  %109 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 12
  %111 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 13
  %113 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 14
  %115 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 15
  %117 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 16
  %119 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 17
  %121 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 18
  %123 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, 19
  %125 = getelementptr inbounds float, ptr %arg60, i32 %linear_index
  store float %124, ptr %125, align 4
  br label %fusion_445.in_bounds-after
}

define void @concatenate_267(ptr noalias align 16 dereferenceable(3072) %arg0, ptr noalias align 16 dereferenceable(35904) %arg1, ptr noalias align 128 dereferenceable(38976) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !266
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 10240
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 9744
  br i1 %6, label %concatenate_267.in_bounds-true, label %concatenate_267.in_bounds-after

concatenate_267.in_bounds-after:                  ; preds = %concatenate.3.merge, %entry
  ret void

concatenate_267.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.128.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [128 x [6 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.128.1
  %11 = phi i32 [ 128, %concatenate.pivot.128.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [1496 x [6 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.3.merge

concatenate.pivot.128.:                           ; preds = %concatenate_267.in_bounds-true
  %15 = icmp ult i32 %5, 128
  br i1 %15, label %concatenate.pivot.0., label %concatenate.pivot.128.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id0

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %16 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ]
  %17 = getelementptr inbounds float, ptr %arg2, i32 %linear_index
  store float %16, ptr %17, align 4
  br label %concatenate_267.in_bounds-after
}

define void @fusion_310(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8) {
entry:
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer67 = alloca float, align 4
  %result_from_other_lane65 = alloca float, align 4
  %return_buffer57 = alloca float, align 4
  %result_from_other_lane55 = alloca float, align 4
  %return_buffer54 = alloca float, align 4
  %result_from_other_lane52 = alloca float, align 4
  %return_buffer51 = alloca float, align 4
  %result_from_other_lane49 = alloca float, align 4
  %return_buffer48 = alloca float, align 4
  %result_from_other_lane46 = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %result_from_other_lane43 = alloca float, align 4
  %return_buffer39 = alloca float, align 4
  %result_from_other_lane37 = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %result_from_other_lane34 = alloca float, align 4
  %return_buffer33 = alloca float, align 4
  %result_from_other_lane31 = alloca float, align 4
  %return_buffer30 = alloca float, align 4
  %result_from_other_lane28 = alloca float, align 4
  %return_buffer27 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer25 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after81, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_44_constant_11 = load float, ptr @7, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_44_constant_11, ptr %2, align 4
  %region_0_44_constant_113 = load float, ptr @7, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_44_constant_113, ptr %3, align 4
  %region_0_44_constant_116 = load float, ptr @7, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_44_constant_116, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound7 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc8 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc8, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound7
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !269

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !270

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache22, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result26 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_12__1(ptr %32, ptr %result_from_other_lane, ptr %return_buffer27)
  %34 = load float, ptr %return_buffer27, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result29 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result29, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane28, align 4
  call void @region_1_12__1(ptr %32, ptr %result_from_other_lane28, ptr %return_buffer30)
  %36 = load float, ptr %return_buffer30, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result32 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result32, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane31, align 4
  call void @region_1_12__1(ptr %32, ptr %result_from_other_lane31, ptr %return_buffer33)
  %38 = load float, ptr %return_buffer33, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result35 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result35, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane34, align 4
  call void @region_1_12__1(ptr %32, ptr %result_from_other_lane34, ptr %return_buffer36)
  %40 = load float, ptr %return_buffer36, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result38 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result38, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane37, align 4
  call void @region_1_12__1(ptr %32, ptr %result_from_other_lane37, ptr %return_buffer39)
  %42 = load float, ptr %return_buffer39, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound7
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address40 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address40 to ptr
  %current_output41 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output41, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr42 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache23, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr42 to ptr
  %partial_reduction_result44 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result44, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane43, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane43, ptr %return_buffer45)
  %53 = load float, ptr %return_buffer45, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result47 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result47, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane46, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane46, ptr %return_buffer48)
  %55 = load float, ptr %return_buffer48, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result50 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result50, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane49, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane49, ptr %return_buffer51)
  %57 = load float, ptr %return_buffer51, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result53 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result53, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane52, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane52, ptr %return_buffer54)
  %59 = load float, ptr %return_buffer54, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result56 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result56, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane55, align 4
  call void @region_2_26(ptr %51, ptr %result_from_other_lane55, ptr %return_buffer57)
  %61 = load float, ptr %return_buffer57, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound7
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true58, label %reduction_write_output-after59

reduction_write_output-after59:                   ; preds = %reduction_write_output-true58, %reduction_write_output-after
  %shmem_output_address62 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address62 to ptr
  %current_output63 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %69 = load float, ptr %current_output63, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr64 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache24, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr64 to ptr
  %partial_reduction_result66 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result66, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane65, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane65, ptr %return_buffer67)
  %72 = load float, ptr %return_buffer67, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result69 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane68, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane68, ptr %return_buffer70)
  %74 = load float, ptr %return_buffer70, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result72 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane71, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane71, ptr %return_buffer73)
  %76 = load float, ptr %return_buffer73, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result75 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane74, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane74, ptr %return_buffer76)
  %78 = load float, ptr %return_buffer76, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result78 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane77, align 4
  call void @region_3_38__1(ptr %70, ptr %result_from_other_lane77, ptr %return_buffer79)
  %80 = load float, ptr %return_buffer79, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound7
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true80, label %reduction_write_output-after81

reduction_write_output-after81:                   ; preds = %reduction_write_output-true80, %reduction_write_output-after59
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.19 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.210 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %multiply.9 = fmul float %Arg_0.19, %Arg_1.210
  store float %multiply.9, ptr %reduction_input_address, align 4
  %108 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_12__1(ptr %108, ptr %reduction_input_address, ptr %return_buffer)
  %109 = load float, ptr %return_buffer, align 4
  store float %109, ptr %108, align 4
  %110 = mul nuw nsw i32 %94, 1
  %111 = add nuw nsw i32 0, %110
  %112 = udiv i32 %111, 128
  %113 = mul nuw nsw i32 %96, 1
  %114 = add nuw nsw i32 0, %113
  %115 = mul nuw nsw i32 %97, 128
  %116 = add nuw nsw i32 %114, %115
  %117 = udiv i32 %116, 8192
  %Arg_0.111 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.112 = load float, ptr %Arg_0.111, align 4, !invariant.load !197
  %Arg_3.4 = getelementptr inbounds [8192 x [1 x float]], ptr %arg3, i32 0, i32 %116, i32 0
  %Arg_3.413 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %116, i32 0
  %Arg_2.314 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %multiply.17 = fmul float %Arg_3.413, %Arg_2.314
  %region_0_44_constant_18 = load float, ptr @8, align 4
  %Arg_2.315 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %116, i32 0
  %Arg_2.316 = load float, ptr %Arg_2.315, align 4, !invariant.load !197
  %subtract.20 = fsub float %region_0_44_constant_18, %Arg_2.316
  %multiply.21 = fmul float %multiply.17, %subtract.20
  %multiply.24 = fmul float %Arg_0.112, %multiply.21
  store float %multiply.24, ptr %reduction_input_address1, align 4
  %118 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_26(ptr %118, ptr %reduction_input_address1, ptr %return_buffer17)
  %119 = load float, ptr %return_buffer17, align 4
  store float %119, ptr %118, align 4
  %120 = mul nuw nsw i32 %94, 1
  %121 = add nuw nsw i32 0, %120
  %122 = udiv i32 %121, 128
  %123 = mul nuw nsw i32 %96, 1
  %124 = add nuw nsw i32 0, %123
  %125 = mul nuw nsw i32 %97, 128
  %126 = add nuw nsw i32 %124, %125
  %127 = udiv i32 %126, 8192
  %Arg_0.118 = getelementptr inbounds float, ptr %arg0, i32 %92
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %126, i32 0
  %Arg_5.620 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %126, i32 0
  %Arg_4.521 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %multiply.31 = fmul float %Arg_5.620, %Arg_4.521
  %region_0_44_constant_1822 = load float, ptr @8, align 4
  %Arg_4.523 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %126, i32 0
  %Arg_4.524 = load float, ptr %Arg_4.523, align 4, !invariant.load !197
  %subtract.32 = fsub float %region_0_44_constant_1822, %Arg_4.524
  %multiply.33 = fmul float %multiply.31, %subtract.32
  %multiply.36 = fmul float %Arg_0.119, %multiply.33
  store float %multiply.36, ptr %reduction_input_address4, align 4
  %128 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 %99
  call void @region_3_38__1(ptr %128, ptr %reduction_input_address4, ptr %return_buffer25)
  %129 = load float, ptr %return_buffer25, align 4
  store float %129, ptr %128, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %130 = mul i32 %thread_id.y, 1
  %131 = add i32 %tile_origin.1, %thread_id.x
  %132 = add i32 %tile_origin.2, %130
  %133 = add i32 %132, 0
  %134 = mul i32 %tile_origin.0, 128
  %135 = add i32 %134, %133
  %136 = udiv i32 %135, 1
  %137 = urem i32 %136, 128
  %138 = udiv i32 %135, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %138, i32 %137
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true58:                    ; preds = %reduction_write_output-after
  %139 = mul i32 %thread_id.y, 1
  %140 = add i32 %tile_origin.1, %thread_id.x
  %141 = add i32 %tile_origin.2, %139
  %142 = add i32 %141, 0
  %143 = mul i32 %tile_origin.0, 128
  %144 = add i32 %143, %142
  %145 = udiv i32 %144, 1
  %146 = urem i32 %145, 128
  %147 = udiv i32 %144, 128
  %output_element_address60 = getelementptr inbounds [64 x [128 x float]], ptr %arg7, i32 0, i32 %147, i32 %146
  %output61 = load float, ptr %51, align 4
  store float %output61, ptr %output_element_address60, align 4
  br label %reduction_write_output-after59

reduction_write_output-true80:                    ; preds = %reduction_write_output-after59
  %148 = mul i32 %thread_id.y, 1
  %149 = add i32 %tile_origin.1, %thread_id.x
  %150 = add i32 %tile_origin.2, %148
  %151 = add i32 %150, 0
  %152 = mul i32 %tile_origin.0, 128
  %153 = add i32 %152, %151
  %154 = udiv i32 %153, 1
  %155 = urem i32 %154, 128
  %156 = udiv i32 %153, 128
  %output_element_address82 = getelementptr inbounds [64 x [128 x float]], ptr %arg8, i32 0, i32 %156, i32 %155
  %output83 = load float, ptr %70, align 4
  store float %output83, ptr %output_element_address82, align 4
  br label %reduction_write_output-after81
}

define internal void @region_1_12__1(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_26(ptr dereferenceable(4) %Arg_0.27.typed, ptr dereferenceable(4) %Arg_1.28.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.29.typed = alloca float, align 4
  %Arg_0.27 = load float, ptr %Arg_0.27.typed, align 4
  %Arg_1.28 = load float, ptr %Arg_1.28.typed, align 4
  %add.29 = fadd float %Arg_0.27, %Arg_1.28
  store float %add.29, ptr %add.29.typed, align 4
  %load_ret_value = load float, ptr %add.29.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_38__1(ptr dereferenceable(4) %Arg_0.39.typed, ptr dereferenceable(4) %Arg_1.40.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.41.typed = alloca float, align 4
  %Arg_0.39 = load float, ptr %Arg_0.39.typed, align 4
  %Arg_1.40 = load float, ptr %Arg_1.40.typed, align 4
  %add.41 = fadd float %Arg_0.39, %Arg_1.40
  store float %add.41, ptr %add.41.typed, align 4
  %load_ret_value = load float, ptr %add.41.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_236(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(114688) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !271
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 28672
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 28672
  br i1 %6, label %concatenate_236.in_bounds-true, label %concatenate_236.in_bounds-after

concatenate_236.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_236.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [128 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_236.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_236.in_bounds-after
}

define void @concatenate_262(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(163840) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !272
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 40960
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 40960
  br i1 %6, label %concatenate_262.in_bounds-true, label %concatenate_262.in_bounds-after

concatenate_262.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_262.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [128 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_262.in_bounds-true
  %19 = icmp ult i32 %5, 64
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %20 = icmp ult i32 %5, 192
  br i1 %20, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_262.in_bounds-after
}

define void @concatenate_237(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(180224) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !273
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 45056
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 45056
  br i1 %6, label %concatenate_237.in_bounds-true, label %concatenate_237.in_bounds-after

concatenate_237.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_237.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_237.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_237.in_bounds-after
}

define void @concatenate_303(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 128 dereferenceable(196608) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !274
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 49152
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 49152
  br i1 %6, label %concatenate_303.in_bounds-true, label %concatenate_303.in_bounds-after

concatenate_303.in_bounds-after:                  ; preds = %concatenate.3.merge, %entry
  ret void

concatenate_303.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.3.merge

concatenate.pivot.64.:                            ; preds = %concatenate_303.in_bounds-true
  %15 = icmp ult i32 %5, 64
  br i1 %15, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %16 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ]
  %17 = getelementptr inbounds float, ptr %arg2, i32 %linear_index
  store float %16, ptr %17, align 4
  br label %concatenate_303.in_bounds-after
}

define void @concatenate_263(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(229376) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !275
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 57344
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 57344
  br i1 %6, label %concatenate_263.in_bounds-true, label %concatenate_263.in_bounds-after

concatenate_263.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_263.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [128 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [128 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_263.in_bounds-true
  %19 = icmp ult i32 %5, 64
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %20 = icmp ult i32 %5, 192
  br i1 %20, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_263.in_bounds-after
}

define void @concatenate_242(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(311296) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !276
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 77824
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 77824
  br i1 %6, label %concatenate_242.in_bounds-true, label %concatenate_242.in_bounds-after

concatenate_242.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_242.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.16.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [16 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.16.1
  %11 = phi i32 [ 16, %concatenate.pivot.16.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [32 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %15 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.16.:                            ; preds = %concatenate_242.in_bounds-true
  %19 = icmp ult i32 %5, 16
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.16.
  %20 = icmp ult i32 %5, 48
  br i1 %20, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_242.in_bounds-after
}

define void @concatenate_260(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(360448) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !277
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 90112
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 90112
  br i1 %6, label %concatenate_260.in_bounds-true, label %concatenate_260.in_bounds-after

concatenate_260.in_bounds-after:                  ; preds = %concatenate.4.merge, %entry
  ret void

concatenate_260.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_260.in_bounds-true
  %19 = icmp ult i32 %5, 32
  br i1 %19, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %20 = icmp ult i32 %5, 96
  br i1 %20, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %21 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ]
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %21, ptr %22, align 4
  br label %concatenate_260.in_bounds-after
}

define void @concatenate_238(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 16 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(8192) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(368640) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !278
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 92160
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 92160
  br i1 %6, label %concatenate_238.in_bounds-true, label %concatenate_238.in_bounds-after

concatenate_238.in_bounds-after:                  ; preds = %concatenate.5.merge, %entry
  ret void

concatenate_238.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [32 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %11 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [64 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %15 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %19 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !197
  br label %concatenate.5.merge

concatenate.pivot.96.:                            ; preds = %concatenate_238.in_bounds-true
  %23 = icmp ult i32 %5, 96
  br i1 %23, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %24 = icmp ult i32 %5, 32
  br i1 %24, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %25 = icmp ult i32 %5, 104
  br i1 %25, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %26 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ]
  %27 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %26, ptr %27, align 4
  br label %concatenate_238.in_bounds-after
}

define void @concatenate_298(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(131072) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 16 dereferenceable(8192) %arg4, ptr noalias align 128 dereferenceable(401408) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !279
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 100352
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 100352
  br i1 %6, label %concatenate_298.in_bounds-true, label %concatenate_298.in_bounds-after

concatenate_298.in_bounds-after:                  ; preds = %concatenate.6.merge, %entry
  ret void

concatenate_298.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %7 = phi i32 [ 0, %concatenate.pivot.0. ]
  %8 = sub nsw i32 %5, %7
  %9 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %8, i32 %4
  %10 = load float, ptr %9, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %11 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %12 = sub nsw i32 %5, %11
  %13 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %12, i32 %4
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %15 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %16 = sub nsw i32 %5, %15
  %17 = getelementptr inbounds [128 x [256 x float]], ptr %arg2, i32 0, i32 %16, i32 %4
  %18 = load float, ptr %17, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.320.3
  %19 = phi i32 [ 320, %concatenate.pivot.320.3 ]
  %20 = sub nsw i32 %5, %19
  %21 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %20, i32 %4
  %22 = load float, ptr %21, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.384.4
  %23 = phi i32 [ 384, %concatenate.pivot.384.4 ]
  %24 = sub nsw i32 %5, %23
  %25 = getelementptr inbounds [8 x [256 x float]], ptr %arg4, i32 0, i32 %24, i32 %4
  %26 = load float, ptr %25, align 4, !invariant.load !197
  br label %concatenate.6.merge

concatenate.pivot.192.:                           ; preds = %concatenate_298.in_bounds-true
  %27 = icmp ult i32 %5, 192
  br i1 %27, label %concatenate.pivot.64., label %concatenate.pivot.320.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %28 = icmp ult i32 %5, 64
  br i1 %28, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.320.:                           ; preds = %concatenate.pivot.192.
  %29 = icmp ult i32 %5, 320
  br i1 %29, label %concatenate.pivot.192.2, label %concatenate.pivot.384.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.320.
  br label %concat_index_from_operand_id2

concatenate.pivot.384.:                           ; preds = %concatenate.pivot.320.
  %30 = icmp ult i32 %5, 384
  br i1 %30, label %concatenate.pivot.320.3, label %concatenate.pivot.384.4

concatenate.pivot.320.3:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id3

concatenate.pivot.384.4:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %31 = phi float [ %10, %concat_index_from_operand_id0 ], [ %14, %concat_index_from_operand_id1 ], [ %18, %concat_index_from_operand_id2 ], [ %22, %concat_index_from_operand_id3 ], [ %26, %concat_index_from_operand_id4 ]
  %32 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %31, ptr %32, align 4
  br label %concatenate_298.in_bounds-after
}

define void @concatenate_255(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 128 dereferenceable(458752) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !280
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 28672
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 114688
  br i1 %15, label %concatenate_255.in_bounds-true, label %concatenate_255.in_bounds-after

concatenate_255.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_255.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %5, %16
  %18 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %17, i32 %4
  %19 = load float, ptr %18, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %20 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %21 = sub nsw i32 %5, %20
  %22 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %21, i32 %4
  %23 = load float, ptr %22, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %24 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %25 = sub nsw i32 %5, %24
  %26 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %25, i32 %4
  %27 = load float, ptr %26, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_255.in_bounds-true
  %28 = icmp ult i32 %5, 64
  br i1 %28, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %29 = icmp ult i32 %5, 192
  br i1 %29, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %30 = phi float [ %19, %concat_index_from_operand_id0 ], [ %23, %concat_index_from_operand_id1 ], [ %27, %concat_index_from_operand_id2 ]
  %31 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %30, ptr %31, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %32 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %33 = sub nsw i32 %8, %32
  %34 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %33, i32 %7
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %36 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %37 = sub nsw i32 %8, %36
  %38 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %37, i32 %7
  %39 = load float, ptr %38, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %40 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %41 = sub nsw i32 %8, %40
  %42 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %41, i32 %7
  %43 = load float, ptr %42, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %44 = icmp ult i32 %8, 64
  br i1 %44, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %45 = icmp ult i32 %8, 192
  br i1 %45, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %46 = phi float [ %35, %concat_index_from_operand_id04 ], [ %39, %concat_index_from_operand_id15 ], [ %43, %concat_index_from_operand_id26 ]
  %47 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %46, ptr %47, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %48 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %49 = sub nsw i32 %11, %48
  %50 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %49, i32 %10
  %51 = load float, ptr %50, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %52 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %53 = sub nsw i32 %11, %52
  %54 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %53, i32 %10
  %55 = load float, ptr %54, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %56 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %57 = sub nsw i32 %11, %56
  %58 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %57, i32 %10
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %60 = icmp ult i32 %11, 64
  br i1 %60, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %61 = icmp ult i32 %11, 192
  br i1 %61, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %62 = phi float [ %51, %concat_index_from_operand_id013 ], [ %55, %concat_index_from_operand_id114 ], [ %59, %concat_index_from_operand_id215 ]
  %63 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %62, ptr %63, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %64 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %65 = sub nsw i32 %14, %64
  %66 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %65, i32 %13
  %67 = load float, ptr %66, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %68 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %69 = sub nsw i32 %14, %68
  %70 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %69, i32 %13
  %71 = load float, ptr %70, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %72 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %73 = sub nsw i32 %14, %72
  %74 = getelementptr inbounds [256 x [256 x float]], ptr %arg2, i32 0, i32 %73, i32 %13
  %75 = load float, ptr %74, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %76 = icmp ult i32 %14, 64
  br i1 %76, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %77 = icmp ult i32 %14, 192
  br i1 %77, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %78 = phi float [ %67, %concat_index_from_operand_id022 ], [ %71, %concat_index_from_operand_id123 ], [ %75, %concat_index_from_operand_id224 ]
  %79 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %78, ptr %79, align 4
  br label %concatenate_255.in_bounds-after
}

define void @concatenate_235(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 16 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(8192) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(466944) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !281
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 29184
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 116736
  br i1 %15, label %concatenate_235.in_bounds-true, label %concatenate_235.in_bounds-after

concatenate_235.in_bounds-after:                  ; preds = %concatenate.5.merge28, %entry
  ret void

concatenate_235.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %5, %16
  %18 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %17, i32 %4
  %19 = load float, ptr %18, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %20 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %21 = sub nsw i32 %5, %20
  %22 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %21, i32 %4
  %23 = load float, ptr %22, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %24 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %25 = sub nsw i32 %5, %24
  %26 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %25, i32 %4
  %27 = load float, ptr %26, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.200.3
  %28 = phi i32 [ 200, %concatenate.pivot.200.3 ]
  %29 = sub nsw i32 %5, %28
  %30 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %29, i32 %4
  %31 = load float, ptr %30, align 4, !invariant.load !197
  br label %concatenate.5.merge

concatenate.pivot.192.:                           ; preds = %concatenate_235.in_bounds-true
  %32 = icmp ult i32 %5, 192
  br i1 %32, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %33 = icmp ult i32 %5, 64
  br i1 %33, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.200.:                           ; preds = %concatenate.pivot.192.
  %34 = icmp ult i32 %5, 200
  br i1 %34, label %concatenate.pivot.192.2, label %concatenate.pivot.200.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id2

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %35 = phi float [ %19, %concat_index_from_operand_id0 ], [ %23, %concat_index_from_operand_id1 ], [ %27, %concat_index_from_operand_id2 ], [ %31, %concat_index_from_operand_id3 ]
  %36 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %35, ptr %36, align 4
  br label %concatenate.pivot.192.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %37 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %38 = sub nsw i32 %8, %37
  %39 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %38, i32 %7
  %40 = load float, ptr %39, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.64.12
  %41 = phi i32 [ 64, %concatenate.pivot.64.12 ]
  %42 = sub nsw i32 %8, %41
  %43 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %42, i32 %7
  %44 = load float, ptr %43, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.192.14
  %45 = phi i32 [ 192, %concatenate.pivot.192.14 ]
  %46 = sub nsw i32 %8, %45
  %47 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %46, i32 %7
  %48 = load float, ptr %47, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.200.15
  %49 = phi i32 [ 200, %concatenate.pivot.200.15 ]
  %50 = sub nsw i32 %8, %49
  %51 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %50, i32 %7
  %52 = load float, ptr %51, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concatenate.pivot.192.9:                          ; preds = %concatenate.5.merge
  %53 = icmp ult i32 %8, 192
  br i1 %53, label %concatenate.pivot.64.10, label %concatenate.pivot.200.13

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %54 = icmp ult i32 %8, 64
  br i1 %54, label %concatenate.pivot.0.11, label %concatenate.pivot.64.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id05

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id16

concatenate.pivot.200.13:                         ; preds = %concatenate.pivot.192.9
  %55 = icmp ult i32 %8, 200
  br i1 %55, label %concatenate.pivot.192.14, label %concatenate.pivot.200.15

concatenate.pivot.192.14:                         ; preds = %concatenate.pivot.200.13
  br label %concat_index_from_operand_id27

concatenate.pivot.200.15:                         ; preds = %concatenate.pivot.200.13
  br label %concat_index_from_operand_id38

concatenate.5.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %56 = phi float [ %40, %concat_index_from_operand_id05 ], [ %44, %concat_index_from_operand_id16 ], [ %48, %concat_index_from_operand_id27 ], [ %52, %concat_index_from_operand_id38 ]
  %57 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %56, ptr %57, align 4
  br label %concatenate.pivot.192.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %58 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %59 = sub nsw i32 %11, %58
  %60 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %59, i32 %10
  %61 = load float, ptr %60, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.64.24
  %62 = phi i32 [ 64, %concatenate.pivot.64.24 ]
  %63 = sub nsw i32 %11, %62
  %64 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %63, i32 %10
  %65 = load float, ptr %64, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.192.26
  %66 = phi i32 [ 192, %concatenate.pivot.192.26 ]
  %67 = sub nsw i32 %11, %66
  %68 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %67, i32 %10
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.200.27
  %70 = phi i32 [ 200, %concatenate.pivot.200.27 ]
  %71 = sub nsw i32 %11, %70
  %72 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %71, i32 %10
  %73 = load float, ptr %72, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concatenate.pivot.192.21:                         ; preds = %concatenate.5.merge4
  %74 = icmp ult i32 %11, 192
  br i1 %74, label %concatenate.pivot.64.22, label %concatenate.pivot.200.25

concatenate.pivot.64.22:                          ; preds = %concatenate.pivot.192.21
  %75 = icmp ult i32 %11, 64
  br i1 %75, label %concatenate.pivot.0.23, label %concatenate.pivot.64.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id017

concatenate.pivot.64.24:                          ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id118

concatenate.pivot.200.25:                         ; preds = %concatenate.pivot.192.21
  %76 = icmp ult i32 %11, 200
  br i1 %76, label %concatenate.pivot.192.26, label %concatenate.pivot.200.27

concatenate.pivot.192.26:                         ; preds = %concatenate.pivot.200.25
  br label %concat_index_from_operand_id219

concatenate.pivot.200.27:                         ; preds = %concatenate.pivot.200.25
  br label %concat_index_from_operand_id320

concatenate.5.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %77 = phi float [ %61, %concat_index_from_operand_id017 ], [ %65, %concat_index_from_operand_id118 ], [ %69, %concat_index_from_operand_id219 ], [ %73, %concat_index_from_operand_id320 ]
  %78 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %77, ptr %78, align 4
  br label %concatenate.pivot.192.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %79 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %80 = sub nsw i32 %14, %79
  %81 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %80, i32 %13
  %82 = load float, ptr %81, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.64.36
  %83 = phi i32 [ 64, %concatenate.pivot.64.36 ]
  %84 = sub nsw i32 %14, %83
  %85 = getelementptr inbounds [128 x [256 x float]], ptr %arg1, i32 0, i32 %84, i32 %13
  %86 = load float, ptr %85, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.192.38
  %87 = phi i32 [ 192, %concatenate.pivot.192.38 ]
  %88 = sub nsw i32 %14, %87
  %89 = getelementptr inbounds [8 x [256 x float]], ptr %arg2, i32 0, i32 %88, i32 %13
  %90 = load float, ptr %89, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.200.39
  %91 = phi i32 [ 200, %concatenate.pivot.200.39 ]
  %92 = sub nsw i32 %14, %91
  %93 = getelementptr inbounds [256 x [256 x float]], ptr %arg3, i32 0, i32 %92, i32 %13
  %94 = load float, ptr %93, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concatenate.pivot.192.33:                         ; preds = %concatenate.5.merge16
  %95 = icmp ult i32 %14, 192
  br i1 %95, label %concatenate.pivot.64.34, label %concatenate.pivot.200.37

concatenate.pivot.64.34:                          ; preds = %concatenate.pivot.192.33
  %96 = icmp ult i32 %14, 64
  br i1 %96, label %concatenate.pivot.0.35, label %concatenate.pivot.64.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id029

concatenate.pivot.64.36:                          ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id130

concatenate.pivot.200.37:                         ; preds = %concatenate.pivot.192.33
  %97 = icmp ult i32 %14, 200
  br i1 %97, label %concatenate.pivot.192.38, label %concatenate.pivot.200.39

concatenate.pivot.192.38:                         ; preds = %concatenate.pivot.200.37
  br label %concat_index_from_operand_id231

concatenate.pivot.200.39:                         ; preds = %concatenate.pivot.200.37
  br label %concat_index_from_operand_id332

concatenate.5.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %98 = phi float [ %82, %concat_index_from_operand_id029 ], [ %86, %concat_index_from_operand_id130 ], [ %90, %concat_index_from_operand_id231 ], [ %94, %concat_index_from_operand_id332 ]
  %99 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %98, ptr %99, align 4
  br label %concatenate_235.in_bounds-after
}

define void @concatenate_269(ptr noalias align 16 dereferenceable(46080) %arg0, ptr noalias align 16 dereferenceable(538560) %arg1, ptr noalias align 128 dereferenceable(584640) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !282
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 36608
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index_base, 90
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 90
  %8 = udiv i32 %linear_index1, 90
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 90
  %11 = udiv i32 %linear_index2, 90
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 90
  %14 = udiv i32 %linear_index3, 90
  %15 = icmp ult i32 %linear_index_base, 146160
  br i1 %15, label %concatenate_269.in_bounds-true, label %concatenate_269.in_bounds-after

concatenate_269.in_bounds-after:                  ; preds = %concatenate.3.merge14, %entry
  ret void

concatenate_269.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.128.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %5, %16
  %18 = getelementptr inbounds [128 x [90 x float]], ptr %arg0, i32 0, i32 %17, i32 %4
  %19 = load float, ptr %18, align 4, !invariant.load !197
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.128.1
  %20 = phi i32 [ 128, %concatenate.pivot.128.1 ]
  %21 = sub nsw i32 %5, %20
  %22 = getelementptr inbounds [1496 x [90 x float]], ptr %arg1, i32 0, i32 %21, i32 %4
  %23 = load float, ptr %22, align 4, !invariant.load !197
  br label %concatenate.3.merge

concatenate.pivot.128.:                           ; preds = %concatenate_269.in_bounds-true
  %24 = icmp ult i32 %5, 128
  br i1 %24, label %concatenate.pivot.0., label %concatenate.pivot.128.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id0

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %25 = phi float [ %19, %concat_index_from_operand_id0 ], [ %23, %concat_index_from_operand_id1 ]
  %26 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %25, ptr %26, align 4
  br label %concatenate.pivot.128.5

concat_index_from_operand_id03:                   ; preds = %concatenate.pivot.0.6
  %27 = phi i32 [ 0, %concatenate.pivot.0.6 ]
  %28 = sub nsw i32 %8, %27
  %29 = getelementptr inbounds [128 x [90 x float]], ptr %arg0, i32 0, i32 %28, i32 %7
  %30 = load float, ptr %29, align 4, !invariant.load !197
  br label %concatenate.3.merge2

concat_index_from_operand_id14:                   ; preds = %concatenate.pivot.128.7
  %31 = phi i32 [ 128, %concatenate.pivot.128.7 ]
  %32 = sub nsw i32 %8, %31
  %33 = getelementptr inbounds [1496 x [90 x float]], ptr %arg1, i32 0, i32 %32, i32 %7
  %34 = load float, ptr %33, align 4, !invariant.load !197
  br label %concatenate.3.merge2

concatenate.pivot.128.5:                          ; preds = %concatenate.3.merge
  %35 = icmp ult i32 %8, 128
  br i1 %35, label %concatenate.pivot.0.6, label %concatenate.pivot.128.7

concatenate.pivot.0.6:                            ; preds = %concatenate.pivot.128.5
  br label %concat_index_from_operand_id03

concatenate.pivot.128.7:                          ; preds = %concatenate.pivot.128.5
  br label %concat_index_from_operand_id14

concatenate.3.merge2:                             ; preds = %concat_index_from_operand_id14, %concat_index_from_operand_id03
  %36 = phi float [ %30, %concat_index_from_operand_id03 ], [ %34, %concat_index_from_operand_id14 ]
  %37 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %36, ptr %37, align 4
  br label %concatenate.pivot.128.11

concat_index_from_operand_id09:                   ; preds = %concatenate.pivot.0.12
  %38 = phi i32 [ 0, %concatenate.pivot.0.12 ]
  %39 = sub nsw i32 %11, %38
  %40 = getelementptr inbounds [128 x [90 x float]], ptr %arg0, i32 0, i32 %39, i32 %10
  %41 = load float, ptr %40, align 4, !invariant.load !197
  br label %concatenate.3.merge8

concat_index_from_operand_id110:                  ; preds = %concatenate.pivot.128.13
  %42 = phi i32 [ 128, %concatenate.pivot.128.13 ]
  %43 = sub nsw i32 %11, %42
  %44 = getelementptr inbounds [1496 x [90 x float]], ptr %arg1, i32 0, i32 %43, i32 %10
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.3.merge8

concatenate.pivot.128.11:                         ; preds = %concatenate.3.merge2
  %46 = icmp ult i32 %11, 128
  br i1 %46, label %concatenate.pivot.0.12, label %concatenate.pivot.128.13

concatenate.pivot.0.12:                           ; preds = %concatenate.pivot.128.11
  br label %concat_index_from_operand_id09

concatenate.pivot.128.13:                         ; preds = %concatenate.pivot.128.11
  br label %concat_index_from_operand_id110

concatenate.3.merge8:                             ; preds = %concat_index_from_operand_id110, %concat_index_from_operand_id09
  %47 = phi float [ %41, %concat_index_from_operand_id09 ], [ %45, %concat_index_from_operand_id110 ]
  %48 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %47, ptr %48, align 4
  br label %concatenate.pivot.128.17

concat_index_from_operand_id015:                  ; preds = %concatenate.pivot.0.18
  %49 = phi i32 [ 0, %concatenate.pivot.0.18 ]
  %50 = sub nsw i32 %14, %49
  %51 = getelementptr inbounds [128 x [90 x float]], ptr %arg0, i32 0, i32 %50, i32 %13
  %52 = load float, ptr %51, align 4, !invariant.load !197
  br label %concatenate.3.merge14

concat_index_from_operand_id116:                  ; preds = %concatenate.pivot.128.19
  %53 = phi i32 [ 128, %concatenate.pivot.128.19 ]
  %54 = sub nsw i32 %14, %53
  %55 = getelementptr inbounds [1496 x [90 x float]], ptr %arg1, i32 0, i32 %54, i32 %13
  %56 = load float, ptr %55, align 4, !invariant.load !197
  br label %concatenate.3.merge14

concatenate.pivot.128.17:                         ; preds = %concatenate.3.merge8
  %57 = icmp ult i32 %14, 128
  br i1 %57, label %concatenate.pivot.0.18, label %concatenate.pivot.128.19

concatenate.pivot.0.18:                           ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id015

concatenate.pivot.128.19:                         ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id116

concatenate.3.merge14:                            ; preds = %concat_index_from_operand_id116, %concat_index_from_operand_id015
  %58 = phi float [ %52, %concat_index_from_operand_id015 ], [ %56, %concat_index_from_operand_id116 ]
  %59 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %58, ptr %59, align 4
  br label %concatenate_269.in_bounds-after
}

define void @fusion_408(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6) {
entry:
  %return_buffer169 = alloca float, align 4
  %result_from_other_lane167 = alloca float, align 4
  %return_buffer166 = alloca float, align 4
  %result_from_other_lane164 = alloca float, align 4
  %return_buffer163 = alloca float, align 4
  %result_from_other_lane161 = alloca float, align 4
  %return_buffer160 = alloca float, align 4
  %result_from_other_lane158 = alloca float, align 4
  %return_buffer157 = alloca float, align 4
  %result_from_other_lane155 = alloca float, align 4
  %return_buffer147 = alloca float, align 4
  %result_from_other_lane145 = alloca float, align 4
  %return_buffer144 = alloca float, align 4
  %result_from_other_lane142 = alloca float, align 4
  %return_buffer141 = alloca float, align 4
  %result_from_other_lane139 = alloca float, align 4
  %return_buffer138 = alloca float, align 4
  %result_from_other_lane136 = alloca float, align 4
  %return_buffer135 = alloca float, align 4
  %result_from_other_lane133 = alloca float, align 4
  %return_buffer125 = alloca float, align 4
  %result_from_other_lane123 = alloca float, align 4
  %return_buffer122 = alloca float, align 4
  %result_from_other_lane120 = alloca float, align 4
  %return_buffer119 = alloca float, align 4
  %result_from_other_lane117 = alloca float, align 4
  %return_buffer116 = alloca float, align 4
  %result_from_other_lane114 = alloca float, align 4
  %return_buffer113 = alloca float, align 4
  %result_from_other_lane111 = alloca float, align 4
  %return_buffer107 = alloca float, align 4
  %result_from_other_lane105 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %return_buffer62 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after171, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_34_constant_20 = load float, ptr @11, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_34_constant_20, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_34_constant_20, ptr %3, align 4
  %region_0_34_constant_5 = load float, ptr @9, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_34_constant_5, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_34_constant_5, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after44, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc42 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc42
  %35 = icmp ult i32 %x_loc42, %tile_bound3
  br i1 %35, label %x_in_tile-true43, label %x_in_tile-after44

x_in_tile-after44:                                ; preds = %x_in_tile-true43, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !284

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !285

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result94 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane, ptr %return_buffer95)
  %40 = load float, ptr %return_buffer95, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result97 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane96, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane96, ptr %return_buffer98)
  %42 = load float, ptr %return_buffer98, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result100 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane99, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane99, ptr %return_buffer101)
  %44 = load float, ptr %return_buffer101, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result103 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane102, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane102, ptr %return_buffer104)
  %46 = load float, ptr %return_buffer104, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result106 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result106, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane105, align 4
  call void @region_1_21(ptr %38, ptr %result_from_other_lane105, ptr %return_buffer107)
  %48 = load float, ptr %return_buffer107, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address108 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address108 to ptr
  %current_output109 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output109, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr110 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache25, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr110 to ptr
  %partial_reduction_result112 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result112, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane111, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane111, ptr %return_buffer113)
  %59 = load float, ptr %return_buffer113, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result115 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result115, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane114, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane114, ptr %return_buffer116)
  %61 = load float, ptr %return_buffer116, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result118 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result118, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane117, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane117, ptr %return_buffer119)
  %63 = load float, ptr %return_buffer119, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result121 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result121, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane120, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane120, ptr %return_buffer122)
  %65 = load float, ptr %return_buffer122, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result124 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result124, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane123, align 4
  call void @region_1_21(ptr %57, ptr %result_from_other_lane123, ptr %return_buffer125)
  %67 = load float, ptr %return_buffer125, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true126, label %reduction_write_output-after127

reduction_write_output-after127:                  ; preds = %reduction_write_output-true126, %reduction_write_output-after
  %shmem_output_address130 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address130 to ptr
  %current_output131 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output131, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr132 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr132 to ptr
  %partial_reduction_result134 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result134, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane133, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane133, ptr %return_buffer135)
  %78 = load float, ptr %return_buffer135, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result137 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result137, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane136, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane136, ptr %return_buffer138)
  %80 = load float, ptr %return_buffer138, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result140 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result140, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane139, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane139, ptr %return_buffer141)
  %82 = load float, ptr %return_buffer141, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result143 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result143, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane142, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane142, ptr %return_buffer144)
  %84 = load float, ptr %return_buffer144, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result146 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result146, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane145, align 4
  call void @region_2_28(ptr %76, ptr %result_from_other_lane145, ptr %return_buffer147)
  %86 = load float, ptr %return_buffer147, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true148, label %reduction_write_output-after149

reduction_write_output-after149:                  ; preds = %reduction_write_output-true148, %reduction_write_output-after127
  %shmem_output_address152 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address152 to ptr
  %current_output153 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output153, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr154 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache26, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr154 to ptr
  %partial_reduction_result156 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result156, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane155, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane155, ptr %return_buffer157)
  %97 = load float, ptr %return_buffer157, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result159 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result159, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane158, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane158, ptr %return_buffer160)
  %99 = load float, ptr %return_buffer160, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result162 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result162, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane161, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane161, ptr %return_buffer163)
  %101 = load float, ptr %return_buffer163, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result165 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result165, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane164, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane164, ptr %return_buffer166)
  %103 = load float, ptr %return_buffer166, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result168 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result168, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane167, align 4
  call void @region_2_28(ptr %95, ptr %result_from_other_lane167, ptr %return_buffer169)
  %105 = load float, ptr %return_buffer169, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true170, label %reduction_write_output-after171

reduction_write_output-after171:                  ; preds = %reduction_write_output-true170, %reduction_write_output-after149
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %131, i32 %126
  %Arg_3.45 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %region_0_34_constant_56 = load float, ptr @9, align 4
  %compare.7 = fcmp ogt float %Arg_3.45, %region_0_34_constant_56
  %133 = zext i1 %compare.7 to i8
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %131, i32 0
  %Arg_2.37 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.28 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %multiply.8 = fmul float %Arg_2.37, %Arg_1.28
  %region_0_34_constant_9 = load float, ptr @10, align 4
  %Arg_1.29 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.210 = load float, ptr %Arg_1.29, align 4, !invariant.load !197
  %subtract.11 = fsub float %region_0_34_constant_9, %Arg_1.210
  %multiply.12 = fmul float %multiply.8, %subtract.11
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %126, i32 0
  %Arg_0.111 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.17 = fmul float %multiply.12, %Arg_0.111
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %multiply.17, float %region_0_34_constant_56
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_21(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_3.412 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %144, i32 %139
  %Arg_3.413 = load float, ptr %Arg_3.412, align 4, !invariant.load !197
  %Arg_2.314 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %144, i32 0
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !197
  %Arg_1.216 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.217 = load float, ptr %Arg_1.216, align 4, !invariant.load !197
  %multiply.818 = fmul float %Arg_2.315, %Arg_1.217
  %region_0_34_constant_919 = load float, ptr @10, align 4
  %Arg_1.220 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.221 = load float, ptr %Arg_1.220, align 4, !invariant.load !197
  %subtract.1122 = fsub float %region_0_34_constant_919, %Arg_1.221
  %multiply.1223 = fmul float %multiply.818, %subtract.1122
  %multiply.26 = fmul float %Arg_3.413, %multiply.1223
  store float %multiply.26, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_28(ptr %146, ptr %reduction_input_address1, ptr %return_buffer24)
  %147 = load float, ptr %return_buffer24, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_3.425 = getelementptr inbounds float, ptr %arg3, i32 %117
  %Arg_3.426 = load float, ptr %Arg_3.425, align 4, !invariant.load !197
  %region_0_34_constant_527 = load float, ptr @9, align 4
  %compare.728 = fcmp ogt float %Arg_3.426, %region_0_34_constant_527
  %156 = zext i1 %compare.728 to i8
  %Arg_2.329 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %154, i32 0
  %Arg_2.330 = load float, ptr %Arg_2.329, align 4, !invariant.load !197
  %Arg_1.231 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.232 = load float, ptr %Arg_1.231, align 4, !invariant.load !197
  %multiply.833 = fmul float %Arg_2.330, %Arg_1.232
  %region_0_34_constant_934 = load float, ptr @10, align 4
  %Arg_1.235 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.236 = load float, ptr %Arg_1.235, align 4, !invariant.load !197
  %subtract.1137 = fsub float %region_0_34_constant_934, %Arg_1.236
  %multiply.1238 = fmul float %multiply.833, %subtract.1137
  %Arg_0.139 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %149, i32 0
  %Arg_0.140 = load float, ptr %Arg_0.139, align 4, !invariant.load !197
  %multiply.1741 = fmul float %multiply.1238, %Arg_0.140
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %multiply.1741, float %region_0_34_constant_527
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true43:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc42, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_3.445 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %187, i32 %182
  %Arg_3.446 = load float, ptr %Arg_3.445, align 4, !invariant.load !197
  %region_0_34_constant_547 = load float, ptr @9, align 4
  %compare.748 = fcmp ogt float %Arg_3.446, %region_0_34_constant_547
  %189 = zext i1 %compare.748 to i8
  %Arg_2.349 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %187, i32 0
  %Arg_2.350 = load float, ptr %Arg_2.349, align 4, !invariant.load !197
  %Arg_1.251 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.252 = load float, ptr %Arg_1.251, align 4, !invariant.load !197
  %multiply.853 = fmul float %Arg_2.350, %Arg_1.252
  %region_0_34_constant_954 = load float, ptr @10, align 4
  %Arg_1.255 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.256 = load float, ptr %Arg_1.255, align 4, !invariant.load !197
  %subtract.1157 = fsub float %region_0_34_constant_954, %Arg_1.256
  %multiply.1258 = fmul float %multiply.853, %subtract.1157
  %Arg_0.159 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %182, i32 0
  %Arg_0.160 = load float, ptr %Arg_0.159, align 4, !invariant.load !197
  %multiply.1761 = fmul float %multiply.1258, %Arg_0.160
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %multiply.1761, float %region_0_34_constant_547
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_21(ptr %192, ptr %reduction_input_address, ptr %return_buffer62)
  %193 = load float, ptr %return_buffer62, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_3.463 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %200, i32 %195
  %Arg_3.464 = load float, ptr %Arg_3.463, align 4, !invariant.load !197
  %Arg_2.365 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %200, i32 0
  %Arg_2.366 = load float, ptr %Arg_2.365, align 4, !invariant.load !197
  %Arg_1.267 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.268 = load float, ptr %Arg_1.267, align 4, !invariant.load !197
  %multiply.869 = fmul float %Arg_2.366, %Arg_1.268
  %region_0_34_constant_970 = load float, ptr @10, align 4
  %Arg_1.271 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.272 = load float, ptr %Arg_1.271, align 4, !invariant.load !197
  %subtract.1173 = fsub float %region_0_34_constant_970, %Arg_1.272
  %multiply.1274 = fmul float %multiply.869, %subtract.1173
  %multiply.2675 = fmul float %Arg_3.464, %multiply.1274
  store float %multiply.2675, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_28(ptr %202, ptr %reduction_input_address1, ptr %return_buffer76)
  %203 = load float, ptr %return_buffer76, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_3.477 = getelementptr inbounds float, ptr %arg3, i32 %173
  %Arg_3.478 = load float, ptr %Arg_3.477, align 4, !invariant.load !197
  %region_0_34_constant_579 = load float, ptr @9, align 4
  %compare.780 = fcmp ogt float %Arg_3.478, %region_0_34_constant_579
  %212 = zext i1 %compare.780 to i8
  %Arg_2.381 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %210, i32 0
  %Arg_2.382 = load float, ptr %Arg_2.381, align 4, !invariant.load !197
  %Arg_1.283 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.284 = load float, ptr %Arg_1.283, align 4, !invariant.load !197
  %multiply.885 = fmul float %Arg_2.382, %Arg_1.284
  %region_0_34_constant_986 = load float, ptr @10, align 4
  %Arg_1.287 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.288 = load float, ptr %Arg_1.287, align 4, !invariant.load !197
  %subtract.1189 = fsub float %region_0_34_constant_986, %Arg_1.288
  %multiply.1290 = fmul float %multiply.885, %subtract.1189
  %Arg_0.191 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %205, i32 0
  %Arg_0.192 = load float, ptr %Arg_0.191, align 4, !invariant.load !197
  %multiply.1793 = fmul float %multiply.1290, %Arg_0.192
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %multiply.1793, float %region_0_34_constant_579
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after44

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true126:                   ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address128 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %241, i32 %240
  %output129 = load float, ptr %57, align 4
  store float %output129, ptr %output_element_address128, align 4
  br label %reduction_write_output-after127

reduction_write_output-true148:                   ; preds = %reduction_write_output-after127
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address150 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %250, i32 %249
  %output151 = load float, ptr %76, align 4
  store float %output151, ptr %output_element_address150, align 4
  br label %reduction_write_output-after149

reduction_write_output-true170:                   ; preds = %reduction_write_output-after149
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address172 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %259, i32 %258
  %output173 = load float, ptr %95, align 4
  store float %output173, ptr %output_element_address172, align 4
  br label %reduction_write_output-after171
}

define internal void @region_1_21(ptr dereferenceable(4) %Arg_0.22.typed, ptr dereferenceable(4) %Arg_1.23.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.24.typed = alloca float, align 4
  %Arg_0.22 = load float, ptr %Arg_0.22.typed, align 4
  %Arg_1.23 = load float, ptr %Arg_1.23.typed, align 4
  %add.24 = fadd float %Arg_0.22, %Arg_1.23
  store float %add.24, ptr %add.24.typed, align 4
  %load_ret_value = load float, ptr %add.24.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_28(ptr dereferenceable(4) %Arg_0.29.typed, ptr dereferenceable(4) %Arg_1.30.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.31.typed = alloca float, align 4
  %Arg_0.29 = load float, ptr %Arg_0.29.typed, align 4
  %Arg_1.30 = load float, ptr %Arg_1.30.typed, align 4
  %add.31 = fadd float %Arg_0.29, %Arg_1.30
  store float %add.31, ptr %add.31.typed, align 4
  %load_ret_value = load float, ptr %add.31.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_392(ptr noalias align 128 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @13, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !286

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !287

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache27, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_15_constant_3 = load float, ptr @12, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 128
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_15_constant_37 = load float, ptr @12, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 128
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 128
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 16384
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 128
  %126 = udiv i32 %123, 128
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 16384
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 128
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_15_constant_316 = load float, ptr @12, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [128 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_15_constant_323 = load float, ptr @12, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 128
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 128
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 128
  %172 = udiv i32 %169, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 128
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 128
  %181 = udiv i32 %178, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_376(ptr noalias align 128 dereferenceable(8388608) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @15, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !288

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !289

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9__1(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache28, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9__1(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_15_constant_3 = load float, ptr @14, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9__1(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 256
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_15_constant_37 = load float, ptr @14, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 256
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 256
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 32768
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 256
  %126 = udiv i32 %123, 256
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 32768
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 256
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_15_constant_316 = load float, ptr @14, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [256 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9__1(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 256
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_15_constant_323 = load float, ptr @14, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 256
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 256
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 256
  %172 = udiv i32 %169, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 256
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 256
  %181 = udiv i32 %178, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9__1(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_644(ptr noalias align 128 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(1024) %arg2) {
entry:
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 4
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 64, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc4 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc4
  %33 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %33, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !290

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !291

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane, ptr %return_buffer11)
  %38 = load float, ptr %return_buffer11, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result13 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane12, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane12, ptr %return_buffer14)
  %40 = load float, ptr %return_buffer14, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result16 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane15, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane15, ptr %return_buffer17)
  %42 = load float, ptr %return_buffer17, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result19 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane18, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane18, ptr %return_buffer20)
  %44 = load float, ptr %return_buffer20, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result22 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane21, align 4
  call void @region_1_3(ptr %36, ptr %result_from_other_lane21, ptr %return_buffer23)
  %46 = load float, ptr %return_buffer23, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output25, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache29, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane27, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane27, ptr %return_buffer29)
  %57 = load float, ptr %return_buffer29, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result31 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane30, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane30, ptr %return_buffer32)
  %59 = load float, ptr %return_buffer32, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result34 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane33, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane33, ptr %return_buffer35)
  %61 = load float, ptr %return_buffer35, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result37 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane36, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane36, ptr %return_buffer38)
  %63 = load float, ptr %return_buffer38, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result40 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane39, align 4
  call void @region_1_3(ptr %55, ptr %result_from_other_lane39, ptr %return_buffer41)
  %65 = load float, ptr %return_buffer41, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul i32 %thread_id.x, 2
  %73 = sub i32 %x_loc, %72
  %Arg_0.1 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %74 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %73
  call void @region_1_3(ptr %74, ptr %reduction_input_address, ptr %return_buffer)
  %75 = load float, ptr %return_buffer, align 4
  store float %75, ptr %74, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc4, %76
  %Arg_0.17 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_3(ptr %78, ptr %reduction_input_address, ptr %return_buffer9)
  %79 = load float, ptr %return_buffer9, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %80 = mul i32 %thread_id.y, 2
  %81 = add i32 %tile_origin.1, %thread_id.x
  %82 = add i32 %tile_origin.2, %80
  %83 = add i32 %82, 0
  %84 = mul i32 %tile_origin.0, 256
  %85 = add i32 %84, %83
  %86 = udiv i32 %85, 1
  %output_element_address = getelementptr inbounds [256 x float], ptr %arg2, i32 0, i32 %86
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %87 = mul i32 %thread_id.y, 2
  %88 = add i32 %tile_origin.1, %thread_id.x
  %89 = add i32 %tile_origin.2, %87
  %90 = add i32 %89, 1
  %91 = mul i32 %tile_origin.0, 256
  %92 = add i32 %91, %90
  %93 = udiv i32 %92, 1
  %output_element_address44 = getelementptr inbounds [256 x float], ptr %arg2, i32 0, i32 %93
  %output45 = load float, ptr %55, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43
}

define internal void @region_1_3(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_304(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6) {
entry:
  %return_buffer142 = alloca float, align 4
  %result_from_other_lane140 = alloca float, align 4
  %return_buffer139 = alloca float, align 4
  %result_from_other_lane137 = alloca float, align 4
  %return_buffer136 = alloca float, align 4
  %result_from_other_lane134 = alloca float, align 4
  %return_buffer133 = alloca float, align 4
  %result_from_other_lane131 = alloca float, align 4
  %return_buffer130 = alloca float, align 4
  %result_from_other_lane128 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane75 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer54 = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after144, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_30_constant_16 = load float, ptr @17, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_30_constant_16, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_30_constant_16, ptr %3, align 4
  %region_0_30_constant_5 = load float, ptr @16, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_30_constant_5, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_30_constant_5, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after32, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc30 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc30
  %35 = icmp ult i32 %x_loc30, %tile_bound3
  br i1 %35, label %x_in_tile-true31, label %x_in_tile-after32

x_in_tile-after32:                                ; preds = %x_in_tile-true31, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !292

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !293

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result67 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane, ptr %return_buffer68)
  %40 = load float, ptr %return_buffer68, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result70 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane69, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane69, ptr %return_buffer71)
  %42 = load float, ptr %return_buffer71, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result73 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane72, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane72, ptr %return_buffer74)
  %44 = load float, ptr %return_buffer74, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result76 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane75, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane75, ptr %return_buffer77)
  %46 = load float, ptr %return_buffer77, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result79 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane78, align 4
  call void @region_1_17(ptr %38, ptr %result_from_other_lane78, ptr %return_buffer80)
  %48 = load float, ptr %return_buffer80, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output82, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache30, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane84, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane84, ptr %return_buffer86)
  %59 = load float, ptr %return_buffer86, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result88 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane87, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane87, ptr %return_buffer89)
  %61 = load float, ptr %return_buffer89, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result91 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane90, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane90, ptr %return_buffer92)
  %63 = load float, ptr %return_buffer92, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result94 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane93, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane93, ptr %return_buffer95)
  %65 = load float, ptr %return_buffer95, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result97 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane96, align 4
  call void @region_1_17(ptr %57, ptr %result_from_other_lane96, ptr %return_buffer98)
  %67 = load float, ptr %return_buffer98, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %reduction_write_output-after
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output104, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane106, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane106, ptr %return_buffer108)
  %78 = load float, ptr %return_buffer108, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result110 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane109, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane109, ptr %return_buffer111)
  %80 = load float, ptr %return_buffer111, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result113 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane112, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane112, ptr %return_buffer114)
  %82 = load float, ptr %return_buffer114, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result116 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane115, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane115, ptr %return_buffer117)
  %84 = load float, ptr %return_buffer117, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result119 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane118, align 4
  call void @region_2_24(ptr %76, ptr %result_from_other_lane118, ptr %return_buffer120)
  %86 = load float, ptr %return_buffer120, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  %shmem_output_address125 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address125 to ptr
  %current_output126 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output126, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr127 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache31, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr127 to ptr
  %partial_reduction_result129 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane128, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane128, ptr %return_buffer130)
  %97 = load float, ptr %return_buffer130, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result132 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result132, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane131, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane131, ptr %return_buffer133)
  %99 = load float, ptr %return_buffer133, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result135 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result135, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane134, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane134, ptr %return_buffer136)
  %101 = load float, ptr %return_buffer136, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result138 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result138, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane137, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane137, ptr %return_buffer139)
  %103 = load float, ptr %return_buffer139, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result141 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result141, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane140, align 4
  call void @region_2_24(ptr %95, ptr %result_from_other_lane140, ptr %return_buffer142)
  %105 = load float, ptr %return_buffer142, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true143, label %reduction_write_output-after144

reduction_write_output-after144:                  ; preds = %reduction_write_output-true143, %reduction_write_output-after122
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_3.4 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %131, i32 %126
  %Arg_3.45 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %region_0_30_constant_56 = load float, ptr @16, align 4
  %compare.7 = fcmp ogt float %Arg_3.45, %region_0_30_constant_56
  %133 = zext i1 %compare.7 to i8
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.27 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %131, i32 0
  %Arg_2.38 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %add.8 = fadd float %Arg_1.27, %Arg_2.38
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %126, i32 0
  %Arg_0.19 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.13 = fmul float %add.8, %Arg_0.19
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %multiply.13, float %region_0_30_constant_56
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_17(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_3.410 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %144, i32 %139
  %Arg_3.411 = load float, ptr %Arg_3.410, align 4, !invariant.load !197
  %Arg_1.212 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.213 = load float, ptr %Arg_1.212, align 4, !invariant.load !197
  %Arg_2.314 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %144, i32 0
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !197
  %add.816 = fadd float %Arg_1.213, %Arg_2.315
  %multiply.22 = fmul float %Arg_3.411, %add.816
  store float %multiply.22, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_24(ptr %146, ptr %reduction_input_address1, ptr %return_buffer17)
  %147 = load float, ptr %return_buffer17, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_3.418 = getelementptr inbounds float, ptr %arg3, i32 %117
  %Arg_3.419 = load float, ptr %Arg_3.418, align 4, !invariant.load !197
  %region_0_30_constant_520 = load float, ptr @16, align 4
  %compare.721 = fcmp ogt float %Arg_3.419, %region_0_30_constant_520
  %156 = zext i1 %compare.721 to i8
  %Arg_1.222 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.223 = load float, ptr %Arg_1.222, align 4, !invariant.load !197
  %Arg_2.324 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %154, i32 0
  %Arg_2.325 = load float, ptr %Arg_2.324, align 4, !invariant.load !197
  %add.826 = fadd float %Arg_1.223, %Arg_2.325
  %Arg_0.127 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %149, i32 0
  %Arg_0.128 = load float, ptr %Arg_0.127, align 4, !invariant.load !197
  %multiply.1329 = fmul float %add.826, %Arg_0.128
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %multiply.1329, float %region_0_30_constant_520
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true31:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc30, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_3.433 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %187, i32 %182
  %Arg_3.434 = load float, ptr %Arg_3.433, align 4, !invariant.load !197
  %region_0_30_constant_535 = load float, ptr @16, align 4
  %compare.736 = fcmp ogt float %Arg_3.434, %region_0_30_constant_535
  %189 = zext i1 %compare.736 to i8
  %Arg_1.237 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !197
  %Arg_2.339 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %187, i32 0
  %Arg_2.340 = load float, ptr %Arg_2.339, align 4, !invariant.load !197
  %add.841 = fadd float %Arg_1.238, %Arg_2.340
  %Arg_0.142 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %182, i32 0
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !197
  %multiply.1344 = fmul float %add.841, %Arg_0.143
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %multiply.1344, float %region_0_30_constant_535
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_17(ptr %192, ptr %reduction_input_address, ptr %return_buffer45)
  %193 = load float, ptr %return_buffer45, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_3.446 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %200, i32 %195
  %Arg_3.447 = load float, ptr %Arg_3.446, align 4, !invariant.load !197
  %Arg_1.248 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.249 = load float, ptr %Arg_1.248, align 4, !invariant.load !197
  %Arg_2.350 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %200, i32 0
  %Arg_2.351 = load float, ptr %Arg_2.350, align 4, !invariant.load !197
  %add.852 = fadd float %Arg_1.249, %Arg_2.351
  %multiply.2253 = fmul float %Arg_3.447, %add.852
  store float %multiply.2253, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_24(ptr %202, ptr %reduction_input_address1, ptr %return_buffer54)
  %203 = load float, ptr %return_buffer54, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_3.455 = getelementptr inbounds float, ptr %arg3, i32 %173
  %Arg_3.456 = load float, ptr %Arg_3.455, align 4, !invariant.load !197
  %region_0_30_constant_557 = load float, ptr @16, align 4
  %compare.758 = fcmp ogt float %Arg_3.456, %region_0_30_constant_557
  %212 = zext i1 %compare.758 to i8
  %Arg_1.259 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.260 = load float, ptr %Arg_1.259, align 4, !invariant.load !197
  %Arg_2.361 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %210, i32 0
  %Arg_2.362 = load float, ptr %Arg_2.361, align 4, !invariant.load !197
  %add.863 = fadd float %Arg_1.260, %Arg_2.362
  %Arg_0.164 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %205, i32 0
  %Arg_0.165 = load float, ptr %Arg_0.164, align 4, !invariant.load !197
  %multiply.1366 = fmul float %add.863, %Arg_0.165
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %multiply.1366, float %region_0_30_constant_557
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg5, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after32

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true99:                    ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address101 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %241, i32 %240
  %output102 = load float, ptr %57, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address123 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %250, i32 %249
  %output124 = load float, ptr %76, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduction_write_output-true143:                   ; preds = %reduction_write_output-after122
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address145 = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %259, i32 %258
  %output146 = load float, ptr %95, align 4
  store float %output146, ptr %output_element_address145, align 4
  br label %reduction_write_output-after144
}

define internal void @region_1_17(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_24(ptr dereferenceable(4) %Arg_0.25.typed, ptr dereferenceable(4) %Arg_1.26.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.27.typed = alloca float, align 4
  %Arg_0.25 = load float, ptr %Arg_0.25.typed, align 4
  %Arg_1.26 = load float, ptr %Arg_1.26.typed, align 4
  %add.27 = fadd float %Arg_0.25, %Arg_1.26
  store float %add.27, ptr %add.27.typed, align 4
  %load_ret_value = load float, ptr %add.27.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_614(ptr noalias align 128 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 128 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 128 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !294
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 2
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 2
  %18 = udiv i32 %13, 2
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 2
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 1
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !295

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !296

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache32, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 128
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 128
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 2
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 2
  %110 = udiv i32 %105, 2
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 2
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 1
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !297

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !298

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache33, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !197
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 128
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [128 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 128
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [128 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !197
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 2
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 2
  %202 = udiv i32 %197, 2
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 2
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 1
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !299

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !300

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache34, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !197
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 128
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [128 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 128
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [128 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !197
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 2
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 2
  %294 = udiv i32 %289, 2
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 2
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 1
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !301

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !302

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache35, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [128 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !197
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 128
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [128 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 128
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [128 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !197
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 2
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 2
  %386 = udiv i32 %381, 2
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 2
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 1
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !303

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !304

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache36, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !197
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 128
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [128 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 128
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [128 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_286(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(4194304) %arg4, ptr noalias align 128 dereferenceable(32768) %arg5) {
entry:
  %return_buffer126 = alloca float, align 4
  %result_from_other_lane124 = alloca float, align 4
  %return_buffer123 = alloca float, align 4
  %result_from_other_lane121 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer82 = alloca float, align 4
  %result_from_other_lane80 = alloca float, align 4
  %return_buffer79 = alloca float, align 4
  %result_from_other_lane77 = alloca float, align 4
  %return_buffer76 = alloca float, align 4
  %result_from_other_lane74 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %result_from_other_lane71 = alloca float, align 4
  %return_buffer70 = alloca float, align 4
  %result_from_other_lane68 = alloca float, align 4
  %return_buffer64 = alloca float, align 4
  %result_from_other_lane62 = alloca float, align 4
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, i32 2, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after128, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_28_constant_14 = load float, ptr @19, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_28_constant_14, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_28_constant_14, ptr %3, align 4
  %region_0_28_constant_4 = load float, ptr @18, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_28_constant_4, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  store float %region_0_28_constant_4, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 128
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 128, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound3 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after25, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc4 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc4, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound3
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc23 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc23
  %35 = icmp ult i32 %x_loc23, %tile_bound3
  br i1 %35, label %x_in_tile-true24, label %x_in_tile-after25

x_in_tile-after25:                                ; preds = %x_in_tile-true24, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !305

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !306

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result51 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane, ptr %return_buffer52)
  %40 = load float, ptr %return_buffer52, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result54 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane53, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane53, ptr %return_buffer55)
  %42 = load float, ptr %return_buffer55, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result57 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane56, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane56, ptr %return_buffer58)
  %44 = load float, ptr %return_buffer58, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result60 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane59, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane59, ptr %return_buffer61)
  %46 = load float, ptr %return_buffer61, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result63 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result63, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane62, align 4
  call void @region_1_15(ptr %38, ptr %result_from_other_lane62, ptr %return_buffer64)
  %48 = load float, ptr %return_buffer64, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound3
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address65 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address65 to ptr
  %current_output66 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output66, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr67 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache37, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr67 to ptr
  %partial_reduction_result69 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result69, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane68, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane68, ptr %return_buffer70)
  %59 = load float, ptr %return_buffer70, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result72 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result72, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane71, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane71, ptr %return_buffer73)
  %61 = load float, ptr %return_buffer73, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result75 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result75, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane74, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane74, ptr %return_buffer76)
  %63 = load float, ptr %return_buffer76, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result78 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result78, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane77, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane77, ptr %return_buffer79)
  %65 = load float, ptr %return_buffer79, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result81 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result81, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane80, align 4
  call void @region_1_15(ptr %57, ptr %result_from_other_lane80, ptr %return_buffer82)
  %67 = load float, ptr %return_buffer82, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound3
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true83, label %reduction_write_output-after84

reduction_write_output-after84:                   ; preds = %reduction_write_output-true83, %reduction_write_output-after
  %shmem_output_address87 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %74 = addrspacecast ptr addrspace(3) %shmem_output_address87 to ptr
  %current_output88 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %75 = load float, ptr %current_output88, align 4
  store float %75, ptr %74, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr89 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %76 = addrspacecast ptr addrspace(3) %shmem_transposed_addr89 to ptr
  %partial_reduction_result91 = load float, ptr %76, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 16, i32 31)
  store float %77, ptr %result_from_other_lane90, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane90, ptr %return_buffer92)
  %78 = load float, ptr %return_buffer92, align 4
  store float %78, ptr %76, align 4
  %partial_reduction_result94 = load float, ptr %76, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 8, i32 31)
  store float %79, ptr %result_from_other_lane93, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane93, ptr %return_buffer95)
  %80 = load float, ptr %return_buffer95, align 4
  store float %80, ptr %76, align 4
  %partial_reduction_result97 = load float, ptr %76, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 4, i32 31)
  store float %81, ptr %result_from_other_lane96, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane96, ptr %return_buffer98)
  %82 = load float, ptr %return_buffer98, align 4
  store float %82, ptr %76, align 4
  %partial_reduction_result100 = load float, ptr %76, align 4
  %83 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 2, i32 31)
  store float %83, ptr %result_from_other_lane99, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane99, ptr %return_buffer101)
  %84 = load float, ptr %return_buffer101, align 4
  store float %84, ptr %76, align 4
  %partial_reduction_result103 = load float, ptr %76, align 4
  %85 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 1, i32 31)
  store float %85, ptr %result_from_other_lane102, align 4
  call void @region_2_22(ptr %76, ptr %result_from_other_lane102, ptr %return_buffer104)
  %86 = load float, ptr %return_buffer104, align 4
  store float %86, ptr %76, align 4
  %87 = icmp ult i32 %thread_id.x, %tile_bound
  %88 = mul i32 %thread_id.y, 2
  %89 = icmp ult i32 %88, %tile_bound3
  %90 = and i1 %89, %87
  %91 = icmp eq i32 %lane_id, 0
  %92 = and i1 %90, %91
  br i1 %92, label %reduction_write_output-true105, label %reduction_write_output-after106

reduction_write_output-after106:                  ; preds = %reduction_write_output-true105, %reduction_write_output-after84
  %shmem_output_address109 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %93 = addrspacecast ptr addrspace(3) %shmem_output_address109 to ptr
  %current_output110 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 1
  %94 = load float, ptr %current_output110, align 4
  store float %94, ptr %93, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr111 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache38, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %95 = addrspacecast ptr addrspace(3) %shmem_transposed_addr111 to ptr
  %partial_reduction_result113 = load float, ptr %95, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 16, i32 31)
  store float %96, ptr %result_from_other_lane112, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane112, ptr %return_buffer114)
  %97 = load float, ptr %return_buffer114, align 4
  store float %97, ptr %95, align 4
  %partial_reduction_result116 = load float, ptr %95, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 8, i32 31)
  store float %98, ptr %result_from_other_lane115, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane115, ptr %return_buffer117)
  %99 = load float, ptr %return_buffer117, align 4
  store float %99, ptr %95, align 4
  %partial_reduction_result119 = load float, ptr %95, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 4, i32 31)
  store float %100, ptr %result_from_other_lane118, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane118, ptr %return_buffer120)
  %101 = load float, ptr %return_buffer120, align 4
  store float %101, ptr %95, align 4
  %partial_reduction_result122 = load float, ptr %95, align 4
  %102 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result122, i32 2, i32 31)
  store float %102, ptr %result_from_other_lane121, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane121, ptr %return_buffer123)
  %103 = load float, ptr %return_buffer123, align 4
  store float %103, ptr %95, align 4
  %partial_reduction_result125 = load float, ptr %95, align 4
  %104 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result125, i32 1, i32 31)
  store float %104, ptr %result_from_other_lane124, align 4
  call void @region_2_22(ptr %95, ptr %result_from_other_lane124, ptr %return_buffer126)
  %105 = load float, ptr %return_buffer126, align 4
  store float %105, ptr %95, align 4
  %106 = icmp ult i32 %thread_id.x, %tile_bound
  %107 = mul i32 %thread_id.y, 2
  %108 = icmp ult i32 %107, %tile_bound3
  %109 = and i1 %108, %106
  %110 = icmp eq i32 %lane_id, 0
  %111 = and i1 %109, %110
  br i1 %111, label %reduction_write_output-true127, label %reduction_write_output-after128

reduction_write_output-after128:                  ; preds = %reduction_write_output-true127, %reduction_write_output-after106
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %112 = mul nuw nsw i32 %29, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %28, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = mul nuw nsw i32 %tile_origin.0, 16384
  %117 = add nuw nsw i32 %115, %116
  %118 = udiv i32 %117, 1
  %119 = urem i32 %118, 128
  %120 = udiv i32 %117, 128
  %121 = urem i32 %120, 128
  %122 = udiv i32 %117, 16384
  %123 = mul i32 %thread_id.x, 2
  %124 = sub i32 %x_loc, %123
  %125 = mul nuw nsw i32 %119, 1
  %126 = add nuw nsw i32 0, %125
  %127 = udiv i32 %126, 128
  %128 = mul nuw nsw i32 %121, 1
  %129 = add nuw nsw i32 0, %128
  %130 = mul nuw nsw i32 %122, 128
  %131 = add nuw nsw i32 %129, %130
  %132 = udiv i32 %131, 8192
  %Arg_2.3 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %131, i32 %126
  %Arg_2.35 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %region_0_28_constant_46 = load float, ptr @18, align 4
  %compare.6 = fcmp ogt float %Arg_2.35, %region_0_28_constant_46
  %133 = zext i1 %compare.6 to i8
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %131, i32 0
  %Arg_1.27 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %126, i32 0
  %Arg_0.18 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.11 = fmul float %Arg_1.27, %Arg_0.18
  %134 = trunc i8 %133 to i1
  %135 = select i1 %134, float %multiply.11, float %region_0_28_constant_46
  store float %135, ptr %reduction_input_address, align 4
  %136 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %124
  call void @region_1_15(ptr %136, ptr %reduction_input_address, ptr %return_buffer)
  %137 = load float, ptr %return_buffer, align 4
  store float %137, ptr %136, align 4
  %138 = mul nuw nsw i32 %119, 1
  %139 = add nuw nsw i32 0, %138
  %140 = udiv i32 %139, 128
  %141 = mul nuw nsw i32 %121, 1
  %142 = add nuw nsw i32 0, %141
  %143 = mul nuw nsw i32 %122, 128
  %144 = add nuw nsw i32 %142, %143
  %145 = udiv i32 %144, 8192
  %Arg_2.39 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %144, i32 %139
  %Arg_2.310 = load float, ptr %Arg_2.39, align 4, !invariant.load !197
  %Arg_1.211 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %144, i32 0
  %Arg_1.212 = load float, ptr %Arg_1.211, align 4, !invariant.load !197
  %multiply.20 = fmul float %Arg_2.310, %Arg_1.212
  store float %multiply.20, ptr %reduction_input_address1, align 4
  %146 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %124
  call void @region_2_22(ptr %146, ptr %reduction_input_address1, ptr %return_buffer13)
  %147 = load float, ptr %return_buffer13, align 4
  store float %147, ptr %146, align 4
  %148 = mul nuw nsw i32 %119, 1
  %149 = add nuw nsw i32 0, %148
  %150 = udiv i32 %149, 128
  %151 = mul nuw nsw i32 %121, 1
  %152 = add nuw nsw i32 0, %151
  %153 = mul nuw nsw i32 %122, 128
  %154 = add nuw nsw i32 %152, %153
  %155 = udiv i32 %154, 8192
  %Arg_2.314 = getelementptr inbounds float, ptr %arg2, i32 %117
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !197
  %region_0_28_constant_416 = load float, ptr @18, align 4
  %compare.617 = fcmp ogt float %Arg_2.315, %region_0_28_constant_416
  %156 = zext i1 %compare.617 to i8
  %Arg_1.218 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %154, i32 0
  %Arg_1.219 = load float, ptr %Arg_1.218, align 4, !invariant.load !197
  %Arg_0.120 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %149, i32 0
  %Arg_0.121 = load float, ptr %Arg_0.120, align 4, !invariant.load !197
  %multiply.1122 = fmul float %Arg_1.219, %Arg_0.121
  %157 = trunc i8 %156 to i1
  %158 = select i1 %157, float %multiply.1122, float %region_0_28_constant_416
  %159 = mul nuw nsw i32 %119, 1
  %160 = add nuw nsw i32 0, %159
  %161 = udiv i32 %160, 128
  %162 = mul nuw nsw i32 %121, 1
  %163 = add nuw nsw i32 0, %162
  %164 = mul nuw nsw i32 %122, 128
  %165 = add nuw nsw i32 %163, %164
  %166 = udiv i32 %165, 8192
  %167 = getelementptr inbounds [8192 x [128 x float]], ptr %arg4, i32 0, i32 %165, i32 %160
  store float %158, ptr %167, align 4
  br label %x_in_tile-after

x_in_tile-true24:                                 ; preds = %x_in_tile-after
  %168 = mul nuw nsw i32 %34, 1
  %169 = add nuw nsw i32 0, %168
  %170 = mul nuw nsw i32 %33, 128
  %171 = add nuw nsw i32 %169, %170
  %172 = mul nuw nsw i32 %tile_origin.0, 16384
  %173 = add nuw nsw i32 %171, %172
  %174 = udiv i32 %173, 1
  %175 = urem i32 %174, 128
  %176 = udiv i32 %173, 128
  %177 = urem i32 %176, 128
  %178 = udiv i32 %173, 16384
  %179 = mul i32 %thread_id.x, 2
  %180 = sub i32 %x_loc23, %179
  %181 = mul nuw nsw i32 %175, 1
  %182 = add nuw nsw i32 0, %181
  %183 = udiv i32 %182, 128
  %184 = mul nuw nsw i32 %177, 1
  %185 = add nuw nsw i32 0, %184
  %186 = mul nuw nsw i32 %178, 128
  %187 = add nuw nsw i32 %185, %186
  %188 = udiv i32 %187, 8192
  %Arg_2.326 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %187, i32 %182
  %Arg_2.327 = load float, ptr %Arg_2.326, align 4, !invariant.load !197
  %region_0_28_constant_428 = load float, ptr @18, align 4
  %compare.629 = fcmp ogt float %Arg_2.327, %region_0_28_constant_428
  %189 = zext i1 %compare.629 to i8
  %Arg_1.230 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %187, i32 0
  %Arg_1.231 = load float, ptr %Arg_1.230, align 4, !invariant.load !197
  %Arg_0.132 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %182, i32 0
  %Arg_0.133 = load float, ptr %Arg_0.132, align 4, !invariant.load !197
  %multiply.1134 = fmul float %Arg_1.231, %Arg_0.133
  %190 = trunc i8 %189 to i1
  %191 = select i1 %190, float %multiply.1134, float %region_0_28_constant_428
  store float %191, ptr %reduction_input_address, align 4
  %192 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %180
  call void @region_1_15(ptr %192, ptr %reduction_input_address, ptr %return_buffer35)
  %193 = load float, ptr %return_buffer35, align 4
  store float %193, ptr %192, align 4
  %194 = mul nuw nsw i32 %175, 1
  %195 = add nuw nsw i32 0, %194
  %196 = udiv i32 %195, 128
  %197 = mul nuw nsw i32 %177, 1
  %198 = add nuw nsw i32 0, %197
  %199 = mul nuw nsw i32 %178, 128
  %200 = add nuw nsw i32 %198, %199
  %201 = udiv i32 %200, 8192
  %Arg_2.336 = getelementptr inbounds [8192 x [128 x float]], ptr %arg2, i32 0, i32 %200, i32 %195
  %Arg_2.337 = load float, ptr %Arg_2.336, align 4, !invariant.load !197
  %Arg_1.238 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %200, i32 0
  %Arg_1.239 = load float, ptr %Arg_1.238, align 4, !invariant.load !197
  %multiply.2040 = fmul float %Arg_2.337, %Arg_1.239
  store float %multiply.2040, ptr %reduction_input_address1, align 4
  %202 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %180
  call void @region_2_22(ptr %202, ptr %reduction_input_address1, ptr %return_buffer41)
  %203 = load float, ptr %return_buffer41, align 4
  store float %203, ptr %202, align 4
  %204 = mul nuw nsw i32 %175, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %177, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %178, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %Arg_2.342 = getelementptr inbounds float, ptr %arg2, i32 %173
  %Arg_2.343 = load float, ptr %Arg_2.342, align 4, !invariant.load !197
  %region_0_28_constant_444 = load float, ptr @18, align 4
  %compare.645 = fcmp ogt float %Arg_2.343, %region_0_28_constant_444
  %212 = zext i1 %compare.645 to i8
  %Arg_1.246 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %210, i32 0
  %Arg_1.247 = load float, ptr %Arg_1.246, align 4, !invariant.load !197
  %Arg_0.148 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %205, i32 0
  %Arg_0.149 = load float, ptr %Arg_0.148, align 4, !invariant.load !197
  %multiply.1150 = fmul float %Arg_1.247, %Arg_0.149
  %213 = trunc i8 %212 to i1
  %214 = select i1 %213, float %multiply.1150, float %region_0_28_constant_444
  %215 = mul nuw nsw i32 %175, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 128
  %218 = mul nuw nsw i32 %177, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %178, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %223 = getelementptr inbounds [8192 x [128 x float]], ptr %arg4, i32 0, i32 %221, i32 %216
  store float %214, ptr %223, align 4
  br label %x_in_tile-after25

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %224 = mul i32 %thread_id.y, 2
  %225 = add i32 %tile_origin.1, %thread_id.x
  %226 = add i32 %tile_origin.2, %224
  %227 = add i32 %226, 0
  %228 = mul i32 %tile_origin.0, 128
  %229 = add i32 %228, %227
  %230 = udiv i32 %229, 1
  %231 = urem i32 %230, 128
  %232 = udiv i32 %229, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %232, i32 %231
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true83:                    ; preds = %reduction_write_output-after
  %233 = mul i32 %thread_id.y, 2
  %234 = add i32 %tile_origin.1, %thread_id.x
  %235 = add i32 %tile_origin.2, %233
  %236 = add i32 %235, 1
  %237 = mul i32 %tile_origin.0, 128
  %238 = add i32 %237, %236
  %239 = udiv i32 %238, 1
  %240 = urem i32 %239, 128
  %241 = udiv i32 %238, 128
  %output_element_address85 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %241, i32 %240
  %output86 = load float, ptr %57, align 4
  store float %output86, ptr %output_element_address85, align 4
  br label %reduction_write_output-after84

reduction_write_output-true105:                   ; preds = %reduction_write_output-after84
  %242 = mul i32 %thread_id.y, 2
  %243 = add i32 %tile_origin.1, %thread_id.x
  %244 = add i32 %tile_origin.2, %242
  %245 = add i32 %244, 0
  %246 = mul i32 %tile_origin.0, 128
  %247 = add i32 %246, %245
  %248 = udiv i32 %247, 1
  %249 = urem i32 %248, 128
  %250 = udiv i32 %247, 128
  %output_element_address107 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %250, i32 %249
  %output108 = load float, ptr %76, align 4
  store float %output108, ptr %output_element_address107, align 4
  br label %reduction_write_output-after106

reduction_write_output-true127:                   ; preds = %reduction_write_output-after106
  %251 = mul i32 %thread_id.y, 2
  %252 = add i32 %tile_origin.1, %thread_id.x
  %253 = add i32 %tile_origin.2, %251
  %254 = add i32 %253, 1
  %255 = mul i32 %tile_origin.0, 128
  %256 = add i32 %255, %254
  %257 = udiv i32 %256, 1
  %258 = urem i32 %257, 128
  %259 = udiv i32 %256, 128
  %output_element_address129 = getelementptr inbounds [64 x [128 x float]], ptr %arg5, i32 0, i32 %259, i32 %258
  %output130 = load float, ptr %95, align 4
  store float %output130, ptr %output_element_address129, align 4
  br label %reduction_write_output-after128
}

define internal void @region_1_15(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_22(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_398(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(4194304) %arg6, ptr noalias align 128 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(4194304) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10) {
entry:
  %return_buffer129 = alloca float, align 4
  %result_from_other_lane127 = alloca float, align 4
  %return_buffer126 = alloca float, align 4
  %result_from_other_lane124 = alloca float, align 4
  %return_buffer123 = alloca float, align 4
  %result_from_other_lane121 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer107 = alloca float, align 4
  %result_from_other_lane105 = alloca float, align 4
  %return_buffer104 = alloca float, align 4
  %result_from_other_lane102 = alloca float, align 4
  %return_buffer101 = alloca float, align 4
  %result_from_other_lane99 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer83 = alloca float, align 4
  %result_from_other_lane81 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer45 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after131, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_53_constant_32 = load float, ptr @22, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_53_constant_32, ptr %2, align 4
  %region_0_53_constant_8 = load float, ptr @20, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_53_constant_8, ptr %3, align 4
  %region_0_53_constant_85 = load float, ptr @20, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_53_constant_85, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound6 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc7 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc7, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound6
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !307

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !308

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache39, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result76 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane, ptr %return_buffer77)
  %34 = load float, ptr %return_buffer77, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result79 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane78, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane78, ptr %return_buffer80)
  %36 = load float, ptr %return_buffer80, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result82 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result82, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane81, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane81, ptr %return_buffer83)
  %38 = load float, ptr %return_buffer83, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result85 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane84, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane84, ptr %return_buffer86)
  %40 = load float, ptr %return_buffer86, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result88 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane87, align 4
  call void @region_1_33(ptr %32, ptr %result_from_other_lane87, ptr %return_buffer89)
  %42 = load float, ptr %return_buffer89, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound6
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address90 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address90 to ptr
  %current_output91 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output91, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr92 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache40, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr92 to ptr
  %partial_reduction_result94 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane93, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane93, ptr %return_buffer95)
  %53 = load float, ptr %return_buffer95, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result97 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane96, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane96, ptr %return_buffer98)
  %55 = load float, ptr %return_buffer98, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result100 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result100, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane99, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane99, ptr %return_buffer101)
  %57 = load float, ptr %return_buffer101, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result103 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result103, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane102, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane102, ptr %return_buffer104)
  %59 = load float, ptr %return_buffer104, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result106 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result106, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane105, align 4
  call void @region_2_40(ptr %51, ptr %result_from_other_lane105, ptr %return_buffer107)
  %61 = load float, ptr %return_buffer107, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound6
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true108, label %reduction_write_output-after109

reduction_write_output-after109:                  ; preds = %reduction_write_output-true108, %reduction_write_output-after
  %shmem_output_address112 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address112 to ptr
  %current_output113 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %69 = load float, ptr %current_output113, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr114 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache41, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr114 to ptr
  %partial_reduction_result116 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane115, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane115, ptr %return_buffer117)
  %72 = load float, ptr %return_buffer117, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result119 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane118, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane118, ptr %return_buffer120)
  %74 = load float, ptr %return_buffer120, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result122 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result122, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane121, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane121, ptr %return_buffer123)
  %76 = load float, ptr %return_buffer123, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result125 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result125, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane124, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane124, ptr %return_buffer126)
  %78 = load float, ptr %return_buffer126, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result128 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result128, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane127, align 4
  call void @region_3_47(ptr %70, ptr %result_from_other_lane127, ptr %return_buffer129)
  %80 = load float, ptr %return_buffer129, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound6
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true130, label %reduction_write_output-after131

reduction_write_output-after131:                  ; preds = %reduction_write_output-true130, %reduction_write_output-after109
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_6.7 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.78 = load float, ptr %Arg_6.7, align 4, !invariant.load !197
  %region_0_53_constant_89 = load float, ptr @20, align 4
  %compare.10 = fcmp ogt float %Arg_6.78, %region_0_53_constant_89
  %108 = zext i1 %compare.10 to i8
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %106, i32 0
  %Arg_5.610 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.511 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %multiply.11 = fmul float %Arg_5.610, %Arg_4.511
  %region_0_53_constant_12 = load float, ptr @21, align 4
  %Arg_4.512 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.513 = load float, ptr %Arg_4.512, align 4, !invariant.load !197
  %subtract.14 = fsub float %region_0_53_constant_12, %Arg_4.513
  %multiply.15 = fmul float %multiply.11, %subtract.14
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %101, i32 0
  %Arg_3.414 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %multiply.20 = fmul float %multiply.15, %Arg_3.414
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %106, i32 0
  %Arg_2.315 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.216 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %multiply.21 = fmul float %Arg_2.315, %Arg_1.216
  %Arg_1.217 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.218 = load float, ptr %Arg_1.217, align 4, !invariant.load !197
  %subtract.22 = fsub float %region_0_53_constant_12, %Arg_1.218
  %multiply.23 = fmul float %multiply.21, %subtract.22
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %101, i32 0
  %Arg_0.119 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.28 = fmul float %multiply.23, %Arg_0.119
  %add.29 = fadd float %multiply.20, %multiply.28
  %109 = trunc i8 %108 to i1
  %110 = select i1 %109, float %add.29, float %region_0_53_constant_89
  store float %110, ptr %reduction_input_address, align 4
  %111 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_33(ptr %111, ptr %reduction_input_address, ptr %return_buffer)
  %112 = load float, ptr %return_buffer, align 4
  store float %112, ptr %111, align 4
  %113 = mul nuw nsw i32 %94, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %96, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %97, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %Arg_6.720 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.721 = load float, ptr %Arg_6.720, align 4, !invariant.load !197
  %Arg_5.622 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %119, i32 0
  %Arg_5.623 = load float, ptr %Arg_5.622, align 4, !invariant.load !197
  %Arg_4.524 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %119, i32 0
  %Arg_4.525 = load float, ptr %Arg_4.524, align 4, !invariant.load !197
  %multiply.1126 = fmul float %Arg_5.623, %Arg_4.525
  %region_0_53_constant_1227 = load float, ptr @21, align 4
  %Arg_4.528 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %119, i32 0
  %Arg_4.529 = load float, ptr %Arg_4.528, align 4, !invariant.load !197
  %subtract.1430 = fsub float %region_0_53_constant_1227, %Arg_4.529
  %multiply.1531 = fmul float %multiply.1126, %subtract.1430
  %multiply.38 = fmul float %Arg_6.721, %multiply.1531
  store float %multiply.38, ptr %reduction_input_address1, align 4
  %121 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_40(ptr %121, ptr %reduction_input_address1, ptr %return_buffer32)
  %122 = load float, ptr %return_buffer32, align 4
  store float %122, ptr %121, align 4
  %123 = mul nuw nsw i32 %94, 1
  %124 = add nuw nsw i32 0, %123
  %125 = udiv i32 %124, 128
  %126 = mul nuw nsw i32 %96, 1
  %127 = add nuw nsw i32 0, %126
  %128 = mul nuw nsw i32 %97, 128
  %129 = add nuw nsw i32 %127, %128
  %130 = udiv i32 %129, 8192
  %Arg_6.733 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.734 = load float, ptr %Arg_6.733, align 4, !invariant.load !197
  %Arg_2.335 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %129, i32 0
  %Arg_2.336 = load float, ptr %Arg_2.335, align 4, !invariant.load !197
  %Arg_1.237 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %129, i32 0
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !197
  %multiply.2139 = fmul float %Arg_2.336, %Arg_1.238
  %region_0_53_constant_1240 = load float, ptr @21, align 4
  %Arg_1.241 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %129, i32 0
  %Arg_1.242 = load float, ptr %Arg_1.241, align 4, !invariant.load !197
  %subtract.2243 = fsub float %region_0_53_constant_1240, %Arg_1.242
  %multiply.2344 = fmul float %multiply.2139, %subtract.2243
  %multiply.45 = fmul float %Arg_6.734, %multiply.2344
  store float %multiply.45, ptr %reduction_input_address3, align 4
  %131 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %99
  call void @region_3_47(ptr %131, ptr %reduction_input_address3, ptr %return_buffer45)
  %132 = load float, ptr %return_buffer45, align 4
  store float %132, ptr %131, align 4
  %133 = mul nuw nsw i32 %94, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 128
  %136 = mul nuw nsw i32 %96, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %97, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %Arg_6.746 = getelementptr inbounds float, ptr %arg6, i32 %92
  %Arg_6.747 = load float, ptr %Arg_6.746, align 4, !invariant.load !197
  %region_0_53_constant_848 = load float, ptr @20, align 4
  %compare.1049 = fcmp ogt float %Arg_6.747, %region_0_53_constant_848
  %141 = zext i1 %compare.1049 to i8
  %Arg_5.650 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %139, i32 0
  %Arg_5.651 = load float, ptr %Arg_5.650, align 4, !invariant.load !197
  %Arg_4.552 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.553 = load float, ptr %Arg_4.552, align 4, !invariant.load !197
  %multiply.1154 = fmul float %Arg_5.651, %Arg_4.553
  %region_0_53_constant_1255 = load float, ptr @21, align 4
  %Arg_4.556 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.557 = load float, ptr %Arg_4.556, align 4, !invariant.load !197
  %subtract.1458 = fsub float %region_0_53_constant_1255, %Arg_4.557
  %multiply.1559 = fmul float %multiply.1154, %subtract.1458
  %Arg_3.460 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %134, i32 0
  %Arg_3.461 = load float, ptr %Arg_3.460, align 4, !invariant.load !197
  %multiply.2062 = fmul float %multiply.1559, %Arg_3.461
  %Arg_2.363 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %139, i32 0
  %Arg_2.364 = load float, ptr %Arg_2.363, align 4, !invariant.load !197
  %Arg_1.265 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %139, i32 0
  %Arg_1.266 = load float, ptr %Arg_1.265, align 4, !invariant.load !197
  %multiply.2167 = fmul float %Arg_2.364, %Arg_1.266
  %Arg_1.268 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %139, i32 0
  %Arg_1.269 = load float, ptr %Arg_1.268, align 4, !invariant.load !197
  %subtract.2270 = fsub float %region_0_53_constant_1255, %Arg_1.269
  %multiply.2371 = fmul float %multiply.2167, %subtract.2270
  %Arg_0.172 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %134, i32 0
  %Arg_0.173 = load float, ptr %Arg_0.172, align 4, !invariant.load !197
  %multiply.2874 = fmul float %multiply.2371, %Arg_0.173
  %add.2975 = fadd float %multiply.2062, %multiply.2874
  %142 = trunc i8 %141 to i1
  %143 = select i1 %142, float %add.2975, float %region_0_53_constant_848
  %144 = mul nuw nsw i32 %94, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %96, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %97, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %152 = getelementptr inbounds float, ptr %arg8, i32 %92
  store float %143, ptr %152, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %153 = mul i32 %thread_id.y, 1
  %154 = add i32 %tile_origin.1, %thread_id.x
  %155 = add i32 %tile_origin.2, %153
  %156 = add i32 %155, 0
  %157 = mul i32 %tile_origin.0, 128
  %158 = add i32 %157, %156
  %159 = udiv i32 %158, 1
  %160 = urem i32 %159, 128
  %161 = udiv i32 %158, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg7, i32 0, i32 %161, i32 %160
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true108:                   ; preds = %reduction_write_output-after
  %162 = mul i32 %thread_id.y, 1
  %163 = add i32 %tile_origin.1, %thread_id.x
  %164 = add i32 %tile_origin.2, %162
  %165 = add i32 %164, 0
  %166 = mul i32 %tile_origin.0, 128
  %167 = add i32 %166, %165
  %168 = udiv i32 %167, 1
  %169 = urem i32 %168, 128
  %170 = udiv i32 %167, 128
  %output_element_address110 = getelementptr inbounds [64 x [128 x float]], ptr %arg9, i32 0, i32 %170, i32 %169
  %output111 = load float, ptr %51, align 4
  store float %output111, ptr %output_element_address110, align 4
  br label %reduction_write_output-after109

reduction_write_output-true130:                   ; preds = %reduction_write_output-after109
  %171 = mul i32 %thread_id.y, 1
  %172 = add i32 %tile_origin.1, %thread_id.x
  %173 = add i32 %tile_origin.2, %171
  %174 = add i32 %173, 0
  %175 = mul i32 %tile_origin.0, 128
  %176 = add i32 %175, %174
  %177 = udiv i32 %176, 1
  %178 = urem i32 %177, 128
  %179 = udiv i32 %176, 128
  %output_element_address132 = getelementptr inbounds [64 x [128 x float]], ptr %arg10, i32 0, i32 %179, i32 %178
  %output133 = load float, ptr %70, align 4
  store float %output133, ptr %output_element_address132, align 4
  br label %reduction_write_output-after131
}

define internal void @region_1_33(ptr dereferenceable(4) %Arg_0.34.typed, ptr dereferenceable(4) %Arg_1.35.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.36.typed = alloca float, align 4
  %Arg_0.34 = load float, ptr %Arg_0.34.typed, align 4
  %Arg_1.35 = load float, ptr %Arg_1.35.typed, align 4
  %add.36 = fadd float %Arg_0.34, %Arg_1.35
  store float %add.36, ptr %add.36.typed, align 4
  %load_ret_value = load float, ptr %add.36.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_40(ptr dereferenceable(4) %Arg_0.41.typed, ptr dereferenceable(4) %Arg_1.42.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.43.typed = alloca float, align 4
  %Arg_0.41 = load float, ptr %Arg_0.41.typed, align 4
  %Arg_1.42 = load float, ptr %Arg_1.42.typed, align 4
  %add.43 = fadd float %Arg_0.41, %Arg_1.42
  store float %add.43, ptr %add.43.typed, align 4
  %load_ret_value = load float, ptr %add.43.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_47(ptr dereferenceable(4) %Arg_0.48.typed, ptr dereferenceable(4) %Arg_1.49.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.50.typed = alloca float, align 4
  %Arg_0.48 = load float, ptr %Arg_0.48.typed, align 4
  %Arg_1.49 = load float, ptr %Arg_1.49.typed, align 4
  %add.50 = fadd float %Arg_0.48, %Arg_1.49
  store float %add.50, ptr %add.50.typed, align 4
  %load_ret_value = load float, ptr %add.50.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_280(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(65536) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 128 dereferenceable(65536) %arg4, ptr noalias align 16 dereferenceable(65536) %arg5, ptr noalias align 128 dereferenceable(65536) %arg6, ptr noalias align 16 dereferenceable(65536) %arg7, ptr noalias align 128 dereferenceable(65536) %arg8, ptr noalias align 16 dereferenceable(65536) %arg9, ptr noalias align 128 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(65536) %arg11) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !309
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_280.in_bounds-true, label %fusion_280.in_bounds-after

fusion_280.in_bounds-after:                       ; preds = %fusion_280.in_bounds-true, %entry
  ret void

fusion_280.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %multiply.13 = fmul float %9, %11
  %subtract.14 = fsub float %8, %multiply.13
  %12 = insertvalue { float, float, float, float, float } undef, float %subtract.14, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.15 = fmul float %9, %16
  %subtract.16 = fsub float %14, %multiply.15
  %17 = insertvalue { float, float, float, float, float } %12, float %subtract.16, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4
  %multiply.17 = fmul float %9, %21
  %subtract.18 = fsub float %19, %multiply.17
  %22 = insertvalue { float, float, float, float, float } %17, float %subtract.18, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4
  %multiply.19 = fmul float %9, %26
  %subtract.20 = fsub float %24, %multiply.19
  %27 = insertvalue { float, float, float, float, float } %22, float %subtract.20, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4
  %multiply.21 = fmul float %9, %31
  %subtract.22 = fsub float %29, %multiply.21
  %32 = insertvalue { float, float, float, float, float } %27, float %subtract.22, 4
  %33 = extractvalue { float, float, float, float, float } %32, 0
  %34 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  store float %33, ptr %34, align 4
  %35 = extractvalue { float, float, float, float, float } %32, 1
  %36 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %35, ptr %36, align 4
  %37 = extractvalue { float, float, float, float, float } %32, 2
  %38 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %37, ptr %38, align 4
  %39 = extractvalue { float, float, float, float, float } %32, 3
  %40 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %39, ptr %40, align 4
  %41 = extractvalue { float, float, float, float, float } %32, 4
  %42 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %41, ptr %42, align 4
  br label %fusion_280.in_bounds-after
}

define void @fusion_285(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40, ptr noalias align 128 dereferenceable(512) %arg41, ptr noalias align 128 dereferenceable(512) %arg42, ptr noalias align 128 dereferenceable(512) %arg43, ptr noalias align 128 dereferenceable(512) %arg44, ptr noalias align 128 dereferenceable(512) %arg45, ptr noalias align 128 dereferenceable(512) %arg46, ptr noalias align 128 dereferenceable(512) %arg47, ptr noalias align 128 dereferenceable(512) %arg48, ptr noalias align 128 dereferenceable(512) %arg49, ptr noalias align 128 dereferenceable(512) %arg50, ptr noalias align 128 dereferenceable(512) %arg51, ptr noalias align 128 dereferenceable(512) %arg52, ptr noalias align 128 dereferenceable(512) %arg53, ptr noalias align 128 dereferenceable(512) %arg54, ptr noalias align 128 dereferenceable(512) %arg55) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 128
  br i1 %4, label %fusion_285.in_bounds-true, label %fusion_285.in_bounds-after

fusion_285.in_bounds-after:                       ; preds = %fusion_285.in_bounds-true, %entry
  ret void

fusion_285.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4, !invariant.load !197
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !197
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !197
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !197
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4, !invariant.load !197
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !197
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !197
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !197
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !197
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4, !invariant.load !197
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !197
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4, !invariant.load !197
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4, !invariant.load !197
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !197
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_285.in_bounds-after
}

define void @fusion_639(ptr noalias align 128 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(65536) %arg3, ptr noalias align 128 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(65536) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 128 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 128 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !294
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 4
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 4
  %18 = udiv i32 %13, 4
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 4
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 3
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !310

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !311

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7__1(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache42, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7__1(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7__1(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [256 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7__1(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 256
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 256
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [256 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 4
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 4
  %110 = udiv i32 %105, 4
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 4
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 3
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !312

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !313

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12__1(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache43, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12__1(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12__1(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !197
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12__1(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 256
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 256
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [256 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !197
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 4
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 4
  %202 = udiv i32 %197, 4
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 4
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 3
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !314

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !315

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17__1(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache44, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17__1(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17__1(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [256 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !197
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17__1(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 256
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 256
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [256 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !197
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 4
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 4
  %294 = udiv i32 %289, 4
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 4
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 3
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !316

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !317

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22__1(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache45, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22__1(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22__1(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [256 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !197
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22__1(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 256
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [256 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 256
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [256 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !197
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 4
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 4
  %386 = udiv i32 %381, 4
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 4
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 3
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !318

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !319

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27__1(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache46, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27__1(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [256 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27__1(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [256 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !197
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27__1(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 256
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [256 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 256
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [256 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7__1(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12__1(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17__1(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22__1(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27__1(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_208(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(1024) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1024) %arg3, ptr noalias align 128 dereferenceable(1024) %arg4, ptr noalias align 16 dereferenceable(1024) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 16 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 16 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10, ptr noalias align 16 dereferenceable(1024) %arg11, ptr noalias align 128 dereferenceable(1024) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 256
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 256
  br i1 %4, label %fusion_208.in_bounds-true, label %fusion_208.in_bounds-after

fusion_208.in_bounds-after:                       ; preds = %fusion_208.in_bounds-true, %entry
  ret void

fusion_208.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.15 = fmul float %7, %9
  %subtract.16 = fsub float %6, %multiply.15
  %10 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.17 = fmul float %7, %14
  %subtract.18 = fsub float %12, %multiply.17
  %15 = insertvalue { float, float, float, float, float, float } %10, float %subtract.18, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.19 = fmul float %7, %19
  %subtract.20 = fsub float %17, %multiply.19
  %20 = insertvalue { float, float, float, float, float, float } %15, float %subtract.20, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.21 = fmul float %7, %24
  %subtract.22 = fsub float %22, %multiply.21
  %25 = insertvalue { float, float, float, float, float, float } %20, float %subtract.22, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.23 = fmul float %7, %29
  %subtract.24 = fsub float %27, %multiply.23
  %30 = insertvalue { float, float, float, float, float, float } %25, float %subtract.24, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.25 = fmul float %7, %34
  %subtract.26 = fsub float %32, %multiply.25
  %35 = insertvalue { float, float, float, float, float, float } %30, float %subtract.26, 5
  %36 = extractvalue { float, float, float, float, float, float } %35, 0
  %37 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %36, ptr %37, align 4
  %38 = extractvalue { float, float, float, float, float, float } %35, 1
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %35, 2
  %41 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %35, 3
  %43 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %35, 4
  %45 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %35, 5
  %47 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %46, ptr %47, align 4
  br label %fusion_208.in_bounds-after
}

define void @fusion_268(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(4194304) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 128 dereferenceable(4194304) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 128 dereferenceable(32768) %arg9) {
entry:
  %return_buffer99 = alloca float, align 4
  %result_from_other_lane97 = alloca float, align 4
  %return_buffer96 = alloca float, align 4
  %result_from_other_lane94 = alloca float, align 4
  %return_buffer93 = alloca float, align 4
  %result_from_other_lane91 = alloca float, align 4
  %return_buffer90 = alloca float, align 4
  %result_from_other_lane88 = alloca float, align 4
  %return_buffer87 = alloca float, align 4
  %result_from_other_lane85 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane75 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane66 = alloca float, align 4
  %return_buffer65 = alloca float, align 4
  %result_from_other_lane63 = alloca float, align 4
  %return_buffer59 = alloca float, align 4
  %result_from_other_lane57 = alloca float, align 4
  %return_buffer56 = alloca float, align 4
  %result_from_other_lane54 = alloca float, align 4
  %return_buffer53 = alloca float, align 4
  %result_from_other_lane51 = alloca float, align 4
  %return_buffer50 = alloca float, align 4
  %result_from_other_lane48 = alloca float, align 4
  %return_buffer47 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer27 = alloca float, align 4
  %return_buffer22 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after101, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_45_constant_24 = load float, ptr @24, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_45_constant_24, ptr %2, align 4
  %region_0_45_constant_7 = load float, ptr @23, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_45_constant_7, ptr %3, align 4
  %region_0_45_constant_75 = load float, ptr @23, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_45_constant_75, ptr %4, align 4
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %7 = urem i32 %5, 1024
  %8 = udiv i32 %5, 1024
  %9 = mul i32 %6, 1
  %10 = add i32 %9, %8
  %11 = icmp ult i32 %10, 256
  br i1 %11, label %12, label %early_return

12:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %7, 32
  %thread_id.y = udiv i32 %7, 32
  %lane_id = urem i32 %7, 32
  %13 = udiv i32 %10, 1
  %14 = urem i32 %13, 4
  %15 = udiv i32 %10, 4
  %16 = urem i32 %15, 1
  %17 = udiv i32 %10, 4
  %18 = icmp eq i32 %16, 0
  %tile_bound = select i1 %18, i32 128, i32 4096
  %19 = icmp eq i32 %14, 3
  %tile_bound6 = select i1 %19, i32 32, i32 32
  %tile_origin.0 = mul i32 %17, 1
  %tile_origin.1 = mul i32 %16, 4096
  %tile_origin.2 = mul i32 %14, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %12
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %20 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %20, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %21 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %22 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %23 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %23, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc7 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc7, ptr %tile_loop.invar_address, align 4
  %24 = icmp eq i32 %tile_loop.indvar, 0
  %25 = mul i32 %tile_loop.indvar, 1
  %26 = add i32 %25, 0
  %x_loc = add i32 %26, %22
  %27 = add i32 %tile_origin.1, %y_in_tile.indvar
  %28 = add i32 %tile_origin.2, %x_loc
  %29 = icmp ult i32 %x_loc, %tile_bound6
  br i1 %29, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !320

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !321

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %30 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %31 = load float, ptr %current_output, align 4
  store float %31, ptr %30, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache47, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %32 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result46 = load float, ptr %32, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result46, i32 16, i32 31)
  store float %33, ptr %result_from_other_lane, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane, ptr %return_buffer47)
  %34 = load float, ptr %return_buffer47, align 4
  store float %34, ptr %32, align 4
  %partial_reduction_result49 = load float, ptr %32, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result49, i32 8, i32 31)
  store float %35, ptr %result_from_other_lane48, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane48, ptr %return_buffer50)
  %36 = load float, ptr %return_buffer50, align 4
  store float %36, ptr %32, align 4
  %partial_reduction_result52 = load float, ptr %32, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result52, i32 4, i32 31)
  store float %37, ptr %result_from_other_lane51, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane51, ptr %return_buffer53)
  %38 = load float, ptr %return_buffer53, align 4
  store float %38, ptr %32, align 4
  %partial_reduction_result55 = load float, ptr %32, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result55, i32 2, i32 31)
  store float %39, ptr %result_from_other_lane54, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane54, ptr %return_buffer56)
  %40 = load float, ptr %return_buffer56, align 4
  store float %40, ptr %32, align 4
  %partial_reduction_result58 = load float, ptr %32, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result58, i32 1, i32 31)
  store float %41, ptr %result_from_other_lane57, align 4
  call void @region_1_25(ptr %32, ptr %result_from_other_lane57, ptr %return_buffer59)
  %42 = load float, ptr %return_buffer59, align 4
  store float %42, ptr %32, align 4
  %43 = icmp ult i32 %thread_id.x, %tile_bound
  %44 = mul i32 %thread_id.y, 1
  %45 = icmp ult i32 %44, %tile_bound6
  %46 = and i1 %45, %43
  %47 = icmp eq i32 %lane_id, 0
  %48 = and i1 %46, %47
  br i1 %48, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address60 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %49 = addrspacecast ptr addrspace(3) %shmem_output_address60 to ptr
  %current_output61 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %50 = load float, ptr %current_output61, align 4
  store float %50, ptr %49, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr62 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache48, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %51 = addrspacecast ptr addrspace(3) %shmem_transposed_addr62 to ptr
  %partial_reduction_result64 = load float, ptr %51, align 4
  %52 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result64, i32 16, i32 31)
  store float %52, ptr %result_from_other_lane63, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane63, ptr %return_buffer65)
  %53 = load float, ptr %return_buffer65, align 4
  store float %53, ptr %51, align 4
  %partial_reduction_result67 = load float, ptr %51, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 8, i32 31)
  store float %54, ptr %result_from_other_lane66, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane66, ptr %return_buffer68)
  %55 = load float, ptr %return_buffer68, align 4
  store float %55, ptr %51, align 4
  %partial_reduction_result70 = load float, ptr %51, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 4, i32 31)
  store float %56, ptr %result_from_other_lane69, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane69, ptr %return_buffer71)
  %57 = load float, ptr %return_buffer71, align 4
  store float %57, ptr %51, align 4
  %partial_reduction_result73 = load float, ptr %51, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 2, i32 31)
  store float %58, ptr %result_from_other_lane72, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane72, ptr %return_buffer74)
  %59 = load float, ptr %return_buffer74, align 4
  store float %59, ptr %51, align 4
  %partial_reduction_result76 = load float, ptr %51, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 1, i32 31)
  store float %60, ptr %result_from_other_lane75, align 4
  call void @region_2_32(ptr %51, ptr %result_from_other_lane75, ptr %return_buffer77)
  %61 = load float, ptr %return_buffer77, align 4
  store float %61, ptr %51, align 4
  %62 = icmp ult i32 %thread_id.x, %tile_bound
  %63 = mul i32 %thread_id.y, 1
  %64 = icmp ult i32 %63, %tile_bound6
  %65 = and i1 %64, %62
  %66 = icmp eq i32 %lane_id, 0
  %67 = and i1 %65, %66
  br i1 %67, label %reduction_write_output-true78, label %reduction_write_output-after79

reduction_write_output-after79:                   ; preds = %reduction_write_output-true78, %reduction_write_output-after
  %shmem_output_address82 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i32 0, i32 %8, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %68 = addrspacecast ptr addrspace(3) %shmem_output_address82 to ptr
  %current_output83 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %69 = load float, ptr %current_output83, align 4
  store float %69, ptr %68, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr84 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache49, i32 0, i32 %8, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %70 = addrspacecast ptr addrspace(3) %shmem_transposed_addr84 to ptr
  %partial_reduction_result86 = load float, ptr %70, align 4
  %71 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result86, i32 16, i32 31)
  store float %71, ptr %result_from_other_lane85, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane85, ptr %return_buffer87)
  %72 = load float, ptr %return_buffer87, align 4
  store float %72, ptr %70, align 4
  %partial_reduction_result89 = load float, ptr %70, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result89, i32 8, i32 31)
  store float %73, ptr %result_from_other_lane88, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane88, ptr %return_buffer90)
  %74 = load float, ptr %return_buffer90, align 4
  store float %74, ptr %70, align 4
  %partial_reduction_result92 = load float, ptr %70, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result92, i32 4, i32 31)
  store float %75, ptr %result_from_other_lane91, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane91, ptr %return_buffer93)
  %76 = load float, ptr %return_buffer93, align 4
  store float %76, ptr %70, align 4
  %partial_reduction_result95 = load float, ptr %70, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result95, i32 2, i32 31)
  store float %77, ptr %result_from_other_lane94, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane94, ptr %return_buffer96)
  %78 = load float, ptr %return_buffer96, align 4
  store float %78, ptr %70, align 4
  %partial_reduction_result98 = load float, ptr %70, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result98, i32 1, i32 31)
  store float %79, ptr %result_from_other_lane97, align 4
  call void @region_3_39(ptr %70, ptr %result_from_other_lane97, ptr %return_buffer99)
  %80 = load float, ptr %return_buffer99, align 4
  store float %80, ptr %70, align 4
  %81 = icmp ult i32 %thread_id.x, %tile_bound
  %82 = mul i32 %thread_id.y, 1
  %83 = icmp ult i32 %82, %tile_bound6
  %84 = and i1 %83, %81
  %85 = icmp eq i32 %lane_id, 0
  %86 = and i1 %84, %85
  br i1 %86, label %reduction_write_output-true100, label %reduction_write_output-after101

reduction_write_output-after101:                  ; preds = %reduction_write_output-true100, %reduction_write_output-after79
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %87 = mul nuw nsw i32 %28, 1
  %88 = add nuw nsw i32 0, %87
  %89 = mul nuw nsw i32 %27, 128
  %90 = add nuw nsw i32 %88, %89
  %91 = mul nuw nsw i32 %tile_origin.0, 16384
  %92 = add nuw nsw i32 %90, %91
  %93 = udiv i32 %92, 1
  %94 = urem i32 %93, 128
  %95 = udiv i32 %92, 128
  %96 = urem i32 %95, 128
  %97 = udiv i32 %92, 16384
  %98 = mul i32 %thread_id.x, 1
  %99 = sub i32 %x_loc, %98
  %100 = mul nuw nsw i32 %94, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %96, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %97, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.68 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %region_0_45_constant_79 = load float, ptr @23, align 4
  %compare.9 = fcmp ogt float %Arg_5.68, %region_0_45_constant_79
  %108 = zext i1 %compare.9 to i8
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %106, i32 0
  %Arg_4.510 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %101, i32 0
  %Arg_3.411 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %multiply.14 = fmul float %Arg_4.510, %Arg_3.411
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %106, i32 0
  %Arg_1.212 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %106, i32 0
  %Arg_2.313 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %add.15 = fadd float %Arg_1.212, %Arg_2.313
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %101, i32 0
  %Arg_0.114 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.20 = fmul float %add.15, %Arg_0.114
  %add.21 = fadd float %multiply.14, %multiply.20
  %109 = trunc i8 %108 to i1
  %110 = select i1 %109, float %add.21, float %region_0_45_constant_79
  store float %110, ptr %reduction_input_address, align 4
  %111 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %99
  call void @region_1_25(ptr %111, ptr %reduction_input_address, ptr %return_buffer)
  %112 = load float, ptr %return_buffer, align 4
  store float %112, ptr %111, align 4
  %113 = mul nuw nsw i32 %94, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %96, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %97, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %Arg_5.615 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.616 = load float, ptr %Arg_5.615, align 4, !invariant.load !197
  %Arg_1.217 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %119, i32 0
  %Arg_1.218 = load float, ptr %Arg_1.217, align 4, !invariant.load !197
  %Arg_2.319 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %119, i32 0
  %Arg_2.320 = load float, ptr %Arg_2.319, align 4, !invariant.load !197
  %add.1521 = fadd float %Arg_1.218, %Arg_2.320
  %multiply.30 = fmul float %Arg_5.616, %add.1521
  store float %multiply.30, ptr %reduction_input_address1, align 4
  %121 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %99
  call void @region_2_32(ptr %121, ptr %reduction_input_address1, ptr %return_buffer22)
  %122 = load float, ptr %return_buffer22, align 4
  store float %122, ptr %121, align 4
  %123 = mul nuw nsw i32 %94, 1
  %124 = add nuw nsw i32 0, %123
  %125 = udiv i32 %124, 128
  %126 = mul nuw nsw i32 %96, 1
  %127 = add nuw nsw i32 0, %126
  %128 = mul nuw nsw i32 %97, 128
  %129 = add nuw nsw i32 %127, %128
  %130 = udiv i32 %129, 8192
  %Arg_5.623 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.624 = load float, ptr %Arg_5.623, align 4, !invariant.load !197
  %Arg_4.525 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %129, i32 0
  %Arg_4.526 = load float, ptr %Arg_4.525, align 4, !invariant.load !197
  %multiply.37 = fmul float %Arg_5.624, %Arg_4.526
  store float %multiply.37, ptr %reduction_input_address3, align 4
  %131 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %99
  call void @region_3_39(ptr %131, ptr %reduction_input_address3, ptr %return_buffer27)
  %132 = load float, ptr %return_buffer27, align 4
  store float %132, ptr %131, align 4
  %133 = mul nuw nsw i32 %94, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 128
  %136 = mul nuw nsw i32 %96, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %97, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %Arg_5.628 = getelementptr inbounds float, ptr %arg5, i32 %92
  %Arg_5.629 = load float, ptr %Arg_5.628, align 4, !invariant.load !197
  %region_0_45_constant_730 = load float, ptr @23, align 4
  %compare.931 = fcmp ogt float %Arg_5.629, %region_0_45_constant_730
  %141 = zext i1 %compare.931 to i8
  %Arg_4.532 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %139, i32 0
  %Arg_4.533 = load float, ptr %Arg_4.532, align 4, !invariant.load !197
  %Arg_3.434 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %134, i32 0
  %Arg_3.435 = load float, ptr %Arg_3.434, align 4, !invariant.load !197
  %multiply.1436 = fmul float %Arg_4.533, %Arg_3.435
  %Arg_1.237 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %139, i32 0
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !197
  %Arg_2.339 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %139, i32 0
  %Arg_2.340 = load float, ptr %Arg_2.339, align 4, !invariant.load !197
  %add.1541 = fadd float %Arg_1.238, %Arg_2.340
  %Arg_0.142 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %134, i32 0
  %Arg_0.143 = load float, ptr %Arg_0.142, align 4, !invariant.load !197
  %multiply.2044 = fmul float %add.1541, %Arg_0.143
  %add.2145 = fadd float %multiply.1436, %multiply.2044
  %142 = trunc i8 %141 to i1
  %143 = select i1 %142, float %add.2145, float %region_0_45_constant_730
  %144 = mul nuw nsw i32 %94, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 128
  %147 = mul nuw nsw i32 %96, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %97, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %152 = getelementptr inbounds float, ptr %arg7, i32 %92
  store float %143, ptr %152, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %153 = mul i32 %thread_id.y, 1
  %154 = add i32 %tile_origin.1, %thread_id.x
  %155 = add i32 %tile_origin.2, %153
  %156 = add i32 %155, 0
  %157 = mul i32 %tile_origin.0, 128
  %158 = add i32 %157, %156
  %159 = udiv i32 %158, 1
  %160 = urem i32 %159, 128
  %161 = udiv i32 %158, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg6, i32 0, i32 %161, i32 %160
  %output = load float, ptr %32, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true78:                    ; preds = %reduction_write_output-after
  %162 = mul i32 %thread_id.y, 1
  %163 = add i32 %tile_origin.1, %thread_id.x
  %164 = add i32 %tile_origin.2, %162
  %165 = add i32 %164, 0
  %166 = mul i32 %tile_origin.0, 128
  %167 = add i32 %166, %165
  %168 = udiv i32 %167, 1
  %169 = urem i32 %168, 128
  %170 = udiv i32 %167, 128
  %output_element_address80 = getelementptr inbounds [64 x [128 x float]], ptr %arg8, i32 0, i32 %170, i32 %169
  %output81 = load float, ptr %51, align 4
  store float %output81, ptr %output_element_address80, align 4
  br label %reduction_write_output-after79

reduction_write_output-true100:                   ; preds = %reduction_write_output-after79
  %171 = mul i32 %thread_id.y, 1
  %172 = add i32 %tile_origin.1, %thread_id.x
  %173 = add i32 %tile_origin.2, %171
  %174 = add i32 %173, 0
  %175 = mul i32 %tile_origin.0, 128
  %176 = add i32 %175, %174
  %177 = udiv i32 %176, 1
  %178 = urem i32 %177, 128
  %179 = udiv i32 %176, 128
  %output_element_address102 = getelementptr inbounds [64 x [128 x float]], ptr %arg9, i32 0, i32 %179, i32 %178
  %output103 = load float, ptr %70, align 4
  store float %output103, ptr %output_element_address102, align 4
  br label %reduction_write_output-after101
}

define internal void @region_1_25(ptr dereferenceable(4) %Arg_0.26.typed, ptr dereferenceable(4) %Arg_1.27.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.28.typed = alloca float, align 4
  %Arg_0.26 = load float, ptr %Arg_0.26.typed, align 4
  %Arg_1.27 = load float, ptr %Arg_1.27.typed, align 4
  %add.28 = fadd float %Arg_0.26, %Arg_1.27
  store float %add.28, ptr %add.28.typed, align 4
  %load_ret_value = load float, ptr %add.28.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_32(ptr dereferenceable(4) %Arg_0.33.typed, ptr dereferenceable(4) %Arg_1.34.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.35.typed = alloca float, align 4
  %Arg_0.33 = load float, ptr %Arg_0.33.typed, align 4
  %Arg_1.34 = load float, ptr %Arg_1.34.typed, align 4
  %add.35 = fadd float %Arg_0.33, %Arg_1.34
  store float %add.35, ptr %add.35.typed, align 4
  %load_ret_value = load float, ptr %add.35.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_39(ptr dereferenceable(4) %Arg_0.40.typed, ptr dereferenceable(4) %Arg_1.41.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.42.typed = alloca float, align 4
  %Arg_0.40 = load float, ptr %Arg_0.40.typed, align 4
  %Arg_1.41 = load float, ptr %Arg_1.41.typed, align 4
  %add.42 = fadd float %Arg_0.40, %Arg_1.41
  store float %add.42, ptr %add.42.typed, align 4
  %load_ret_value = load float, ptr %add.42.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_270(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 16 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(32768) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 16 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 16 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 16 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 16 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 16 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 16 dereferenceable(32768) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 16 dereferenceable(32768) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 16 dereferenceable(32768) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 16 dereferenceable(4194304) %arg20, ptr noalias align 128 dereferenceable(32768) %arg21, ptr noalias align 128 dereferenceable(4194304) %arg22, ptr noalias align 128 dereferenceable(32768) %arg23, ptr noalias align 128 dereferenceable(32768) %arg24, ptr noalias align 128 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(32768) %arg26) {
entry:
  %return_buffer285 = alloca float, align 4
  %result_from_other_lane283 = alloca float, align 4
  %return_buffer282 = alloca float, align 4
  %result_from_other_lane280 = alloca float, align 4
  %return_buffer279 = alloca float, align 4
  %result_from_other_lane277 = alloca float, align 4
  %return_buffer276 = alloca float, align 4
  %result_from_other_lane274 = alloca float, align 4
  %return_buffer273 = alloca float, align 4
  %result_from_other_lane271 = alloca float, align 4
  %return_buffer263 = alloca float, align 4
  %result_from_other_lane261 = alloca float, align 4
  %return_buffer260 = alloca float, align 4
  %result_from_other_lane258 = alloca float, align 4
  %return_buffer257 = alloca float, align 4
  %result_from_other_lane255 = alloca float, align 4
  %return_buffer254 = alloca float, align 4
  %result_from_other_lane252 = alloca float, align 4
  %return_buffer251 = alloca float, align 4
  %result_from_other_lane249 = alloca float, align 4
  %return_buffer241 = alloca float, align 4
  %result_from_other_lane239 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %result_from_other_lane236 = alloca float, align 4
  %return_buffer235 = alloca float, align 4
  %result_from_other_lane233 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %result_from_other_lane230 = alloca float, align 4
  %return_buffer229 = alloca float, align 4
  %result_from_other_lane227 = alloca float, align 4
  %return_buffer219 = alloca float, align 4
  %result_from_other_lane217 = alloca float, align 4
  %return_buffer216 = alloca float, align 4
  %result_from_other_lane214 = alloca float, align 4
  %return_buffer213 = alloca float, align 4
  %result_from_other_lane211 = alloca float, align 4
  %return_buffer210 = alloca float, align 4
  %result_from_other_lane208 = alloca float, align 4
  %return_buffer207 = alloca float, align 4
  %result_from_other_lane205 = alloca float, align 4
  %return_buffer201 = alloca float, align 4
  %result_from_other_lane199 = alloca float, align 4
  %return_buffer198 = alloca float, align 4
  %result_from_other_lane196 = alloca float, align 4
  %return_buffer195 = alloca float, align 4
  %result_from_other_lane193 = alloca float, align 4
  %return_buffer192 = alloca float, align 4
  %result_from_other_lane190 = alloca float, align 4
  %return_buffer189 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer99 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %return_buffer73 = alloca float, align 4
  %return_buffer60 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result10 = alloca float, align 4
  %reduction_input_address9 = alloca float, align 4
  %partial_reduction_result7 = alloca float, align 4
  %reduction_input_address6 = alloca float, align 4
  %partial_reduction_result4 = alloca float, align 4
  %reduction_input_address3 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after287, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_123_constant_88 = load float, ptr @27, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_123_constant_88, ptr %2, align 4
  %region_0_123_constant_22 = load float, ptr @25, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_123_constant_22, ptr %3, align 4
  %region_0_123_constant_225 = load float, ptr @25, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  store float %region_0_123_constant_225, ptr %4, align 4
  %region_0_123_constant_228 = load float, ptr @25, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  store float %region_0_123_constant_228, ptr %5, align 4
  %region_0_123_constant_2211 = load float, ptr @25, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 0
  store float %region_0_123_constant_2211, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %9 = urem i32 %7, 1024
  %10 = udiv i32 %7, 1024
  %11 = mul i32 %8, 1
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 256
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 4
  %17 = udiv i32 %12, 4
  %18 = urem i32 %17, 1
  %19 = udiv i32 %12, 4
  %20 = icmp eq i32 %18, 0
  %tile_bound = select i1 %20, i32 128, i32 4096
  %21 = icmp eq i32 %16, 3
  %tile_bound12 = select i1 %21, i32 32, i32 32
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 4096
  %tile_origin.2 = mul i32 %16, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %25 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %25, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc13 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc13, ptr %tile_loop.invar_address, align 4
  %26 = icmp eq i32 %tile_loop.indvar, 0
  %27 = mul i32 %tile_loop.indvar, 1
  %28 = add i32 %27, 0
  %x_loc = add i32 %28, %24
  %29 = add i32 %tile_origin.1, %y_in_tile.indvar
  %30 = add i32 %tile_origin.2, %x_loc
  %31 = icmp ult i32 %x_loc, %tile_bound12
  br i1 %31, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !322

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !323

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %32 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %33 = load float, ptr %current_output, align 4
  store float %33, ptr %32, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache50, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %34 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result188 = load float, ptr %34, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result188, i32 16, i32 31)
  store float %35, ptr %result_from_other_lane, align 4
  call void @region_1_89(ptr %34, ptr %result_from_other_lane, ptr %return_buffer189)
  %36 = load float, ptr %return_buffer189, align 4
  store float %36, ptr %34, align 4
  %partial_reduction_result191 = load float, ptr %34, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result191, i32 8, i32 31)
  store float %37, ptr %result_from_other_lane190, align 4
  call void @region_1_89(ptr %34, ptr %result_from_other_lane190, ptr %return_buffer192)
  %38 = load float, ptr %return_buffer192, align 4
  store float %38, ptr %34, align 4
  %partial_reduction_result194 = load float, ptr %34, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result194, i32 4, i32 31)
  store float %39, ptr %result_from_other_lane193, align 4
  call void @region_1_89(ptr %34, ptr %result_from_other_lane193, ptr %return_buffer195)
  %40 = load float, ptr %return_buffer195, align 4
  store float %40, ptr %34, align 4
  %partial_reduction_result197 = load float, ptr %34, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result197, i32 2, i32 31)
  store float %41, ptr %result_from_other_lane196, align 4
  call void @region_1_89(ptr %34, ptr %result_from_other_lane196, ptr %return_buffer198)
  %42 = load float, ptr %return_buffer198, align 4
  store float %42, ptr %34, align 4
  %partial_reduction_result200 = load float, ptr %34, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result200, i32 1, i32 31)
  store float %43, ptr %result_from_other_lane199, align 4
  call void @region_1_89(ptr %34, ptr %result_from_other_lane199, ptr %return_buffer201)
  %44 = load float, ptr %return_buffer201, align 4
  store float %44, ptr %34, align 4
  %45 = icmp ult i32 %thread_id.x, %tile_bound
  %46 = mul i32 %thread_id.y, 1
  %47 = icmp ult i32 %46, %tile_bound12
  %48 = and i1 %47, %45
  %49 = icmp eq i32 %lane_id, 0
  %50 = and i1 %48, %49
  br i1 %50, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address202 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %51 = addrspacecast ptr addrspace(3) %shmem_output_address202 to ptr
  %current_output203 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %52 = load float, ptr %current_output203, align 4
  store float %52, ptr %51, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr204 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache51, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %53 = addrspacecast ptr addrspace(3) %shmem_transposed_addr204 to ptr
  %partial_reduction_result206 = load float, ptr %53, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result206, i32 16, i32 31)
  store float %54, ptr %result_from_other_lane205, align 4
  call void @region_2_96(ptr %53, ptr %result_from_other_lane205, ptr %return_buffer207)
  %55 = load float, ptr %return_buffer207, align 4
  store float %55, ptr %53, align 4
  %partial_reduction_result209 = load float, ptr %53, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result209, i32 8, i32 31)
  store float %56, ptr %result_from_other_lane208, align 4
  call void @region_2_96(ptr %53, ptr %result_from_other_lane208, ptr %return_buffer210)
  %57 = load float, ptr %return_buffer210, align 4
  store float %57, ptr %53, align 4
  %partial_reduction_result212 = load float, ptr %53, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result212, i32 4, i32 31)
  store float %58, ptr %result_from_other_lane211, align 4
  call void @region_2_96(ptr %53, ptr %result_from_other_lane211, ptr %return_buffer213)
  %59 = load float, ptr %return_buffer213, align 4
  store float %59, ptr %53, align 4
  %partial_reduction_result215 = load float, ptr %53, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result215, i32 2, i32 31)
  store float %60, ptr %result_from_other_lane214, align 4
  call void @region_2_96(ptr %53, ptr %result_from_other_lane214, ptr %return_buffer216)
  %61 = load float, ptr %return_buffer216, align 4
  store float %61, ptr %53, align 4
  %partial_reduction_result218 = load float, ptr %53, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result218, i32 1, i32 31)
  store float %62, ptr %result_from_other_lane217, align 4
  call void @region_2_96(ptr %53, ptr %result_from_other_lane217, ptr %return_buffer219)
  %63 = load float, ptr %return_buffer219, align 4
  store float %63, ptr %53, align 4
  %64 = icmp ult i32 %thread_id.x, %tile_bound
  %65 = mul i32 %thread_id.y, 1
  %66 = icmp ult i32 %65, %tile_bound12
  %67 = and i1 %66, %64
  %68 = icmp eq i32 %lane_id, 0
  %69 = and i1 %67, %68
  br i1 %69, label %reduction_write_output-true220, label %reduction_write_output-after221

reduction_write_output-after221:                  ; preds = %reduction_write_output-true220, %reduction_write_output-after
  %shmem_output_address224 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %70 = addrspacecast ptr addrspace(3) %shmem_output_address224 to ptr
  %current_output225 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 0
  %71 = load float, ptr %current_output225, align 4
  store float %71, ptr %70, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr226 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache52, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %72 = addrspacecast ptr addrspace(3) %shmem_transposed_addr226 to ptr
  %partial_reduction_result228 = load float, ptr %72, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result228, i32 16, i32 31)
  store float %73, ptr %result_from_other_lane227, align 4
  call void @region_3_103(ptr %72, ptr %result_from_other_lane227, ptr %return_buffer229)
  %74 = load float, ptr %return_buffer229, align 4
  store float %74, ptr %72, align 4
  %partial_reduction_result231 = load float, ptr %72, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result231, i32 8, i32 31)
  store float %75, ptr %result_from_other_lane230, align 4
  call void @region_3_103(ptr %72, ptr %result_from_other_lane230, ptr %return_buffer232)
  %76 = load float, ptr %return_buffer232, align 4
  store float %76, ptr %72, align 4
  %partial_reduction_result234 = load float, ptr %72, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result234, i32 4, i32 31)
  store float %77, ptr %result_from_other_lane233, align 4
  call void @region_3_103(ptr %72, ptr %result_from_other_lane233, ptr %return_buffer235)
  %78 = load float, ptr %return_buffer235, align 4
  store float %78, ptr %72, align 4
  %partial_reduction_result237 = load float, ptr %72, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result237, i32 2, i32 31)
  store float %79, ptr %result_from_other_lane236, align 4
  call void @region_3_103(ptr %72, ptr %result_from_other_lane236, ptr %return_buffer238)
  %80 = load float, ptr %return_buffer238, align 4
  store float %80, ptr %72, align 4
  %partial_reduction_result240 = load float, ptr %72, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result240, i32 1, i32 31)
  store float %81, ptr %result_from_other_lane239, align 4
  call void @region_3_103(ptr %72, ptr %result_from_other_lane239, ptr %return_buffer241)
  %82 = load float, ptr %return_buffer241, align 4
  store float %82, ptr %72, align 4
  %83 = icmp ult i32 %thread_id.x, %tile_bound
  %84 = mul i32 %thread_id.y, 1
  %85 = icmp ult i32 %84, %tile_bound12
  %86 = and i1 %85, %83
  %87 = icmp eq i32 %lane_id, 0
  %88 = and i1 %86, %87
  br i1 %88, label %reduction_write_output-true242, label %reduction_write_output-after243

reduction_write_output-after243:                  ; preds = %reduction_write_output-true242, %reduction_write_output-after221
  %shmem_output_address246 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %89 = addrspacecast ptr addrspace(3) %shmem_output_address246 to ptr
  %current_output247 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 0
  %90 = load float, ptr %current_output247, align 4
  store float %90, ptr %89, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr248 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache53, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %91 = addrspacecast ptr addrspace(3) %shmem_transposed_addr248 to ptr
  %partial_reduction_result250 = load float, ptr %91, align 4
  %92 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result250, i32 16, i32 31)
  store float %92, ptr %result_from_other_lane249, align 4
  call void @region_4_110(ptr %91, ptr %result_from_other_lane249, ptr %return_buffer251)
  %93 = load float, ptr %return_buffer251, align 4
  store float %93, ptr %91, align 4
  %partial_reduction_result253 = load float, ptr %91, align 4
  %94 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result253, i32 8, i32 31)
  store float %94, ptr %result_from_other_lane252, align 4
  call void @region_4_110(ptr %91, ptr %result_from_other_lane252, ptr %return_buffer254)
  %95 = load float, ptr %return_buffer254, align 4
  store float %95, ptr %91, align 4
  %partial_reduction_result256 = load float, ptr %91, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result256, i32 4, i32 31)
  store float %96, ptr %result_from_other_lane255, align 4
  call void @region_4_110(ptr %91, ptr %result_from_other_lane255, ptr %return_buffer257)
  %97 = load float, ptr %return_buffer257, align 4
  store float %97, ptr %91, align 4
  %partial_reduction_result259 = load float, ptr %91, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result259, i32 2, i32 31)
  store float %98, ptr %result_from_other_lane258, align 4
  call void @region_4_110(ptr %91, ptr %result_from_other_lane258, ptr %return_buffer260)
  %99 = load float, ptr %return_buffer260, align 4
  store float %99, ptr %91, align 4
  %partial_reduction_result262 = load float, ptr %91, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result262, i32 1, i32 31)
  store float %100, ptr %result_from_other_lane261, align 4
  call void @region_4_110(ptr %91, ptr %result_from_other_lane261, ptr %return_buffer263)
  %101 = load float, ptr %return_buffer263, align 4
  store float %101, ptr %91, align 4
  %102 = icmp ult i32 %thread_id.x, %tile_bound
  %103 = mul i32 %thread_id.y, 1
  %104 = icmp ult i32 %103, %tile_bound12
  %105 = and i1 %104, %102
  %106 = icmp eq i32 %lane_id, 0
  %107 = and i1 %105, %106
  br i1 %107, label %reduction_write_output-true264, label %reduction_write_output-after265

reduction_write_output-after265:                  ; preds = %reduction_write_output-true264, %reduction_write_output-after243
  %shmem_output_address268 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %108 = addrspacecast ptr addrspace(3) %shmem_output_address268 to ptr
  %current_output269 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 0
  %109 = load float, ptr %current_output269, align 4
  store float %109, ptr %108, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr270 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache54, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %110 = addrspacecast ptr addrspace(3) %shmem_transposed_addr270 to ptr
  %partial_reduction_result272 = load float, ptr %110, align 4
  %111 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result272, i32 16, i32 31)
  store float %111, ptr %result_from_other_lane271, align 4
  call void @region_5_117(ptr %110, ptr %result_from_other_lane271, ptr %return_buffer273)
  %112 = load float, ptr %return_buffer273, align 4
  store float %112, ptr %110, align 4
  %partial_reduction_result275 = load float, ptr %110, align 4
  %113 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result275, i32 8, i32 31)
  store float %113, ptr %result_from_other_lane274, align 4
  call void @region_5_117(ptr %110, ptr %result_from_other_lane274, ptr %return_buffer276)
  %114 = load float, ptr %return_buffer276, align 4
  store float %114, ptr %110, align 4
  %partial_reduction_result278 = load float, ptr %110, align 4
  %115 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result278, i32 4, i32 31)
  store float %115, ptr %result_from_other_lane277, align 4
  call void @region_5_117(ptr %110, ptr %result_from_other_lane277, ptr %return_buffer279)
  %116 = load float, ptr %return_buffer279, align 4
  store float %116, ptr %110, align 4
  %partial_reduction_result281 = load float, ptr %110, align 4
  %117 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result281, i32 2, i32 31)
  store float %117, ptr %result_from_other_lane280, align 4
  call void @region_5_117(ptr %110, ptr %result_from_other_lane280, ptr %return_buffer282)
  %118 = load float, ptr %return_buffer282, align 4
  store float %118, ptr %110, align 4
  %partial_reduction_result284 = load float, ptr %110, align 4
  %119 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result284, i32 1, i32 31)
  store float %119, ptr %result_from_other_lane283, align 4
  call void @region_5_117(ptr %110, ptr %result_from_other_lane283, ptr %return_buffer285)
  %120 = load float, ptr %return_buffer285, align 4
  store float %120, ptr %110, align 4
  %121 = icmp ult i32 %thread_id.x, %tile_bound
  %122 = mul i32 %thread_id.y, 1
  %123 = icmp ult i32 %122, %tile_bound12
  %124 = and i1 %123, %121
  %125 = icmp eq i32 %lane_id, 0
  %126 = and i1 %124, %125
  br i1 %126, label %reduction_write_output-true286, label %reduction_write_output-after287

reduction_write_output-after287:                  ; preds = %reduction_write_output-true286, %reduction_write_output-after265
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %127 = mul nuw nsw i32 %30, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %29, 128
  %130 = add nuw nsw i32 %128, %129
  %131 = mul nuw nsw i32 %tile_origin.0, 16384
  %132 = add nuw nsw i32 %130, %131
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = urem i32 %135, 128
  %137 = udiv i32 %132, 16384
  %138 = mul i32 %thread_id.x, 1
  %139 = sub i32 %x_loc, %138
  %140 = mul nuw nsw i32 %134, 1
  %141 = add nuw nsw i32 0, %140
  %142 = udiv i32 %141, 128
  %143 = mul nuw nsw i32 %136, 1
  %144 = add nuw nsw i32 0, %143
  %145 = mul nuw nsw i32 %137, 128
  %146 = add nuw nsw i32 %144, %145
  %147 = udiv i32 %146, 8192
  %Arg_20.21 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.2114 = load float, ptr %Arg_20.21, align 4, !invariant.load !197
  %region_0_123_constant_2215 = load float, ptr @25, align 4
  %compare.24 = fcmp ogt float %Arg_20.2114, %region_0_123_constant_2215
  %148 = zext i1 %compare.24 to i8
  %Arg_19.20 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %146, i32 0
  %Arg_19.2016 = load float, ptr %Arg_19.20, align 4, !invariant.load !197
  %Arg_18.19 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %146, i32 0
  %Arg_18.1917 = load float, ptr %Arg_18.19, align 4, !invariant.load !197
  %multiply.25 = fmul float %Arg_19.2016, %Arg_18.1917
  %region_0_123_constant_26 = load float, ptr @26, align 4
  %Arg_18.1918 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %146, i32 0
  %Arg_18.1919 = load float, ptr %Arg_18.1918, align 4, !invariant.load !197
  %subtract.28 = fsub float %region_0_123_constant_26, %Arg_18.1919
  %multiply.29 = fmul float %multiply.25, %subtract.28
  %Arg_17.18 = getelementptr inbounds [128 x [1 x float]], ptr %arg17, i32 0, i32 %141, i32 0
  %Arg_17.1820 = load float, ptr %Arg_17.18, align 4, !invariant.load !197
  %multiply.34 = fmul float %multiply.29, %Arg_17.1820
  %Arg_16.17 = getelementptr inbounds [8192 x [1 x float]], ptr %arg16, i32 0, i32 %146, i32 0
  %Arg_16.1721 = load float, ptr %Arg_16.17, align 4, !invariant.load !197
  %Arg_15.16 = getelementptr inbounds [128 x [1 x float]], ptr %arg15, i32 0, i32 %141, i32 0
  %Arg_15.1622 = load float, ptr %Arg_15.16, align 4, !invariant.load !197
  %multiply.39 = fmul float %Arg_16.1721, %Arg_15.1622
  %add.40 = fadd float %multiply.34, %multiply.39
  %Arg_14.15 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %146, i32 0
  %Arg_14.1523 = load float, ptr %Arg_14.15, align 4, !invariant.load !197
  %Arg_13.14 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %146, i32 0
  %Arg_13.1424 = load float, ptr %Arg_13.14, align 4, !invariant.load !197
  %multiply.41 = fmul float %Arg_14.1523, %Arg_13.1424
  %Arg_13.1425 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %146, i32 0
  %Arg_13.1426 = load float, ptr %Arg_13.1425, align 4, !invariant.load !197
  %subtract.42 = fsub float %region_0_123_constant_26, %Arg_13.1426
  %multiply.43 = fmul float %multiply.41, %subtract.42
  %Arg_12.13 = getelementptr inbounds [128 x [1 x float]], ptr %arg12, i32 0, i32 %141, i32 0
  %Arg_12.1327 = load float, ptr %Arg_12.13, align 4, !invariant.load !197
  %multiply.48 = fmul float %multiply.43, %Arg_12.1327
  %add.49 = fadd float %add.40, %multiply.48
  %Arg_11.12 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %146, i32 0
  %Arg_11.1228 = load float, ptr %Arg_11.12, align 4, !invariant.load !197
  %Arg_10.11 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %146, i32 0
  %Arg_10.1129 = load float, ptr %Arg_10.11, align 4, !invariant.load !197
  %multiply.50 = fmul float %Arg_11.1228, %Arg_10.1129
  %Arg_10.1130 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %146, i32 0
  %Arg_10.1131 = load float, ptr %Arg_10.1130, align 4, !invariant.load !197
  %subtract.51 = fsub float %region_0_123_constant_26, %Arg_10.1131
  %multiply.52 = fmul float %multiply.50, %subtract.51
  %Arg_9.10 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %141, i32 0
  %Arg_9.1032 = load float, ptr %Arg_9.10, align 4, !invariant.load !197
  %multiply.57 = fmul float %multiply.52, %Arg_9.1032
  %add.58 = fadd float %add.49, %multiply.57
  %Arg_8.9 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %146, i32 0
  %Arg_8.933 = load float, ptr %Arg_8.9, align 4, !invariant.load !197
  %Arg_7.8 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %146, i32 0
  %Arg_7.834 = load float, ptr %Arg_7.8, align 4, !invariant.load !197
  %multiply.59 = fmul float %Arg_8.933, %Arg_7.834
  %Arg_7.835 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %146, i32 0
  %Arg_7.836 = load float, ptr %Arg_7.835, align 4, !invariant.load !197
  %subtract.60 = fsub float %region_0_123_constant_26, %Arg_7.836
  %multiply.61 = fmul float %multiply.59, %subtract.60
  %Arg_6.7 = getelementptr inbounds [128 x [1 x float]], ptr %arg6, i32 0, i32 %141, i32 0
  %Arg_6.737 = load float, ptr %Arg_6.7, align 4, !invariant.load !197
  %multiply.66 = fmul float %multiply.61, %Arg_6.737
  %add.67 = fadd float %add.58, %multiply.66
  %Arg_5.6 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %146, i32 0
  %Arg_5.638 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %146, i32 0
  %Arg_4.539 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %multiply.68 = fmul float %Arg_5.638, %Arg_4.539
  %Arg_4.540 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %146, i32 0
  %Arg_4.541 = load float, ptr %Arg_4.540, align 4, !invariant.load !197
  %subtract.69 = fsub float %region_0_123_constant_26, %Arg_4.541
  %multiply.70 = fmul float %multiply.68, %subtract.69
  %Arg_3.4 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %141, i32 0
  %Arg_3.442 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %multiply.75 = fmul float %multiply.70, %Arg_3.442
  %add.76 = fadd float %add.67, %multiply.75
  %Arg_2.3 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %146, i32 0
  %Arg_2.343 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %146, i32 0
  %Arg_1.244 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %multiply.77 = fmul float %Arg_2.343, %Arg_1.244
  %Arg_1.245 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %146, i32 0
  %Arg_1.246 = load float, ptr %Arg_1.245, align 4, !invariant.load !197
  %subtract.78 = fsub float %region_0_123_constant_26, %Arg_1.246
  %multiply.79 = fmul float %multiply.77, %subtract.78
  %Arg_0.1 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %141, i32 0
  %Arg_0.147 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.84 = fmul float %multiply.79, %Arg_0.147
  %add.85 = fadd float %add.76, %multiply.84
  %149 = trunc i8 %148 to i1
  %150 = select i1 %149, float %add.85, float %region_0_123_constant_2215
  store float %150, ptr %reduction_input_address, align 4
  %151 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %139
  call void @region_1_89(ptr %151, ptr %reduction_input_address, ptr %return_buffer)
  %152 = load float, ptr %return_buffer, align 4
  store float %152, ptr %151, align 4
  %153 = mul nuw nsw i32 %134, 1
  %154 = add nuw nsw i32 0, %153
  %155 = udiv i32 %154, 128
  %156 = mul nuw nsw i32 %136, 1
  %157 = add nuw nsw i32 0, %156
  %158 = mul nuw nsw i32 %137, 128
  %159 = add nuw nsw i32 %157, %158
  %160 = udiv i32 %159, 8192
  %Arg_20.2148 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.2149 = load float, ptr %Arg_20.2148, align 4, !invariant.load !197
  %Arg_19.2050 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %159, i32 0
  %Arg_19.2051 = load float, ptr %Arg_19.2050, align 4, !invariant.load !197
  %Arg_18.1952 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %159, i32 0
  %Arg_18.1953 = load float, ptr %Arg_18.1952, align 4, !invariant.load !197
  %multiply.2554 = fmul float %Arg_19.2051, %Arg_18.1953
  %region_0_123_constant_2655 = load float, ptr @26, align 4
  %Arg_18.1956 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %159, i32 0
  %Arg_18.1957 = load float, ptr %Arg_18.1956, align 4, !invariant.load !197
  %subtract.2858 = fsub float %region_0_123_constant_2655, %Arg_18.1957
  %multiply.2959 = fmul float %multiply.2554, %subtract.2858
  %multiply.94 = fmul float %Arg_20.2149, %multiply.2959
  store float %multiply.94, ptr %reduction_input_address1, align 4
  %161 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %139
  call void @region_2_96(ptr %161, ptr %reduction_input_address1, ptr %return_buffer60)
  %162 = load float, ptr %return_buffer60, align 4
  store float %162, ptr %161, align 4
  %163 = mul nuw nsw i32 %134, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %136, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %137, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %Arg_20.2161 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.2162 = load float, ptr %Arg_20.2161, align 4, !invariant.load !197
  %Arg_14.1563 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %169, i32 0
  %Arg_14.1564 = load float, ptr %Arg_14.1563, align 4, !invariant.load !197
  %Arg_13.1465 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %169, i32 0
  %Arg_13.1466 = load float, ptr %Arg_13.1465, align 4, !invariant.load !197
  %multiply.4167 = fmul float %Arg_14.1564, %Arg_13.1466
  %region_0_123_constant_2668 = load float, ptr @26, align 4
  %Arg_13.1469 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %169, i32 0
  %Arg_13.1470 = load float, ptr %Arg_13.1469, align 4, !invariant.load !197
  %subtract.4271 = fsub float %region_0_123_constant_2668, %Arg_13.1470
  %multiply.4372 = fmul float %multiply.4167, %subtract.4271
  %multiply.101 = fmul float %Arg_20.2162, %multiply.4372
  store float %multiply.101, ptr %reduction_input_address3, align 4
  %171 = getelementptr inbounds float, ptr %partial_reduction_result4, i32 %139
  call void @region_3_103(ptr %171, ptr %reduction_input_address3, ptr %return_buffer73)
  %172 = load float, ptr %return_buffer73, align 4
  store float %172, ptr %171, align 4
  %173 = mul nuw nsw i32 %134, 1
  %174 = add nuw nsw i32 0, %173
  %175 = udiv i32 %174, 128
  %176 = mul nuw nsw i32 %136, 1
  %177 = add nuw nsw i32 0, %176
  %178 = mul nuw nsw i32 %137, 128
  %179 = add nuw nsw i32 %177, %178
  %180 = udiv i32 %179, 8192
  %Arg_20.2174 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.2175 = load float, ptr %Arg_20.2174, align 4, !invariant.load !197
  %Arg_11.1276 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %179, i32 0
  %Arg_11.1277 = load float, ptr %Arg_11.1276, align 4, !invariant.load !197
  %Arg_10.1178 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %179, i32 0
  %Arg_10.1179 = load float, ptr %Arg_10.1178, align 4, !invariant.load !197
  %multiply.5080 = fmul float %Arg_11.1277, %Arg_10.1179
  %region_0_123_constant_2681 = load float, ptr @26, align 4
  %Arg_10.1182 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %179, i32 0
  %Arg_10.1183 = load float, ptr %Arg_10.1182, align 4, !invariant.load !197
  %subtract.5184 = fsub float %region_0_123_constant_2681, %Arg_10.1183
  %multiply.5285 = fmul float %multiply.5080, %subtract.5184
  %multiply.108 = fmul float %Arg_20.2175, %multiply.5285
  store float %multiply.108, ptr %reduction_input_address6, align 4
  %181 = getelementptr inbounds float, ptr %partial_reduction_result7, i32 %139
  call void @region_4_110(ptr %181, ptr %reduction_input_address6, ptr %return_buffer86)
  %182 = load float, ptr %return_buffer86, align 4
  store float %182, ptr %181, align 4
  %183 = mul nuw nsw i32 %134, 1
  %184 = add nuw nsw i32 0, %183
  %185 = udiv i32 %184, 128
  %186 = mul nuw nsw i32 %136, 1
  %187 = add nuw nsw i32 0, %186
  %188 = mul nuw nsw i32 %137, 128
  %189 = add nuw nsw i32 %187, %188
  %190 = udiv i32 %189, 8192
  %Arg_20.2187 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.2188 = load float, ptr %Arg_20.2187, align 4, !invariant.load !197
  %Arg_8.989 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %189, i32 0
  %Arg_8.990 = load float, ptr %Arg_8.989, align 4, !invariant.load !197
  %Arg_7.891 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %189, i32 0
  %Arg_7.892 = load float, ptr %Arg_7.891, align 4, !invariant.load !197
  %multiply.5993 = fmul float %Arg_8.990, %Arg_7.892
  %region_0_123_constant_2694 = load float, ptr @26, align 4
  %Arg_7.895 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %189, i32 0
  %Arg_7.896 = load float, ptr %Arg_7.895, align 4, !invariant.load !197
  %subtract.6097 = fsub float %region_0_123_constant_2694, %Arg_7.896
  %multiply.6198 = fmul float %multiply.5993, %subtract.6097
  %multiply.115 = fmul float %Arg_20.2188, %multiply.6198
  store float %multiply.115, ptr %reduction_input_address9, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result10, i32 %139
  call void @region_5_117(ptr %191, ptr %reduction_input_address9, ptr %return_buffer99)
  %192 = load float, ptr %return_buffer99, align 4
  store float %192, ptr %191, align 4
  %193 = mul nuw nsw i32 %134, 1
  %194 = add nuw nsw i32 0, %193
  %195 = udiv i32 %194, 128
  %196 = mul nuw nsw i32 %136, 1
  %197 = add nuw nsw i32 0, %196
  %198 = mul nuw nsw i32 %137, 128
  %199 = add nuw nsw i32 %197, %198
  %200 = udiv i32 %199, 8192
  %Arg_20.21100 = getelementptr inbounds float, ptr %arg20, i32 %132
  %Arg_20.21101 = load float, ptr %Arg_20.21100, align 4, !invariant.load !197
  %region_0_123_constant_22102 = load float, ptr @25, align 4
  %compare.24103 = fcmp ogt float %Arg_20.21101, %region_0_123_constant_22102
  %201 = zext i1 %compare.24103 to i8
  %Arg_19.20104 = getelementptr inbounds [8192 x [1 x float]], ptr %arg19, i32 0, i32 %199, i32 0
  %Arg_19.20105 = load float, ptr %Arg_19.20104, align 4, !invariant.load !197
  %Arg_18.19106 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %199, i32 0
  %Arg_18.19107 = load float, ptr %Arg_18.19106, align 4, !invariant.load !197
  %multiply.25108 = fmul float %Arg_19.20105, %Arg_18.19107
  %region_0_123_constant_26109 = load float, ptr @26, align 4
  %Arg_18.19110 = getelementptr inbounds [8192 x [1 x float]], ptr %arg18, i32 0, i32 %199, i32 0
  %Arg_18.19111 = load float, ptr %Arg_18.19110, align 4, !invariant.load !197
  %subtract.28112 = fsub float %region_0_123_constant_26109, %Arg_18.19111
  %multiply.29113 = fmul float %multiply.25108, %subtract.28112
  %Arg_17.18114 = getelementptr inbounds [128 x [1 x float]], ptr %arg17, i32 0, i32 %194, i32 0
  %Arg_17.18115 = load float, ptr %Arg_17.18114, align 4, !invariant.load !197
  %multiply.34116 = fmul float %multiply.29113, %Arg_17.18115
  %Arg_16.17117 = getelementptr inbounds [8192 x [1 x float]], ptr %arg16, i32 0, i32 %199, i32 0
  %Arg_16.17118 = load float, ptr %Arg_16.17117, align 4, !invariant.load !197
  %Arg_15.16119 = getelementptr inbounds [128 x [1 x float]], ptr %arg15, i32 0, i32 %194, i32 0
  %Arg_15.16120 = load float, ptr %Arg_15.16119, align 4, !invariant.load !197
  %multiply.39121 = fmul float %Arg_16.17118, %Arg_15.16120
  %add.40122 = fadd float %multiply.34116, %multiply.39121
  %Arg_14.15123 = getelementptr inbounds [8192 x [1 x float]], ptr %arg14, i32 0, i32 %199, i32 0
  %Arg_14.15124 = load float, ptr %Arg_14.15123, align 4, !invariant.load !197
  %Arg_13.14125 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %199, i32 0
  %Arg_13.14126 = load float, ptr %Arg_13.14125, align 4, !invariant.load !197
  %multiply.41127 = fmul float %Arg_14.15124, %Arg_13.14126
  %Arg_13.14128 = getelementptr inbounds [8192 x [1 x float]], ptr %arg13, i32 0, i32 %199, i32 0
  %Arg_13.14129 = load float, ptr %Arg_13.14128, align 4, !invariant.load !197
  %subtract.42130 = fsub float %region_0_123_constant_26109, %Arg_13.14129
  %multiply.43131 = fmul float %multiply.41127, %subtract.42130
  %Arg_12.13132 = getelementptr inbounds [128 x [1 x float]], ptr %arg12, i32 0, i32 %194, i32 0
  %Arg_12.13133 = load float, ptr %Arg_12.13132, align 4, !invariant.load !197
  %multiply.48134 = fmul float %multiply.43131, %Arg_12.13133
  %add.49135 = fadd float %add.40122, %multiply.48134
  %Arg_11.12136 = getelementptr inbounds [8192 x [1 x float]], ptr %arg11, i32 0, i32 %199, i32 0
  %Arg_11.12137 = load float, ptr %Arg_11.12136, align 4, !invariant.load !197
  %Arg_10.11138 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %199, i32 0
  %Arg_10.11139 = load float, ptr %Arg_10.11138, align 4, !invariant.load !197
  %multiply.50140 = fmul float %Arg_11.12137, %Arg_10.11139
  %Arg_10.11141 = getelementptr inbounds [8192 x [1 x float]], ptr %arg10, i32 0, i32 %199, i32 0
  %Arg_10.11142 = load float, ptr %Arg_10.11141, align 4, !invariant.load !197
  %subtract.51143 = fsub float %region_0_123_constant_26109, %Arg_10.11142
  %multiply.52144 = fmul float %multiply.50140, %subtract.51143
  %Arg_9.10145 = getelementptr inbounds [128 x [1 x float]], ptr %arg9, i32 0, i32 %194, i32 0
  %Arg_9.10146 = load float, ptr %Arg_9.10145, align 4, !invariant.load !197
  %multiply.57147 = fmul float %multiply.52144, %Arg_9.10146
  %add.58148 = fadd float %add.49135, %multiply.57147
  %Arg_8.9149 = getelementptr inbounds [8192 x [1 x float]], ptr %arg8, i32 0, i32 %199, i32 0
  %Arg_8.9150 = load float, ptr %Arg_8.9149, align 4, !invariant.load !197
  %Arg_7.8151 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %199, i32 0
  %Arg_7.8152 = load float, ptr %Arg_7.8151, align 4, !invariant.load !197
  %multiply.59153 = fmul float %Arg_8.9150, %Arg_7.8152
  %Arg_7.8154 = getelementptr inbounds [8192 x [1 x float]], ptr %arg7, i32 0, i32 %199, i32 0
  %Arg_7.8155 = load float, ptr %Arg_7.8154, align 4, !invariant.load !197
  %subtract.60156 = fsub float %region_0_123_constant_26109, %Arg_7.8155
  %multiply.61157 = fmul float %multiply.59153, %subtract.60156
  %Arg_6.7158 = getelementptr inbounds [128 x [1 x float]], ptr %arg6, i32 0, i32 %194, i32 0
  %Arg_6.7159 = load float, ptr %Arg_6.7158, align 4, !invariant.load !197
  %multiply.66160 = fmul float %multiply.61157, %Arg_6.7159
  %add.67161 = fadd float %add.58148, %multiply.66160
  %Arg_5.6162 = getelementptr inbounds [8192 x [1 x float]], ptr %arg5, i32 0, i32 %199, i32 0
  %Arg_5.6163 = load float, ptr %Arg_5.6162, align 4, !invariant.load !197
  %Arg_4.5164 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %199, i32 0
  %Arg_4.5165 = load float, ptr %Arg_4.5164, align 4, !invariant.load !197
  %multiply.68166 = fmul float %Arg_5.6163, %Arg_4.5165
  %Arg_4.5167 = getelementptr inbounds [8192 x [1 x float]], ptr %arg4, i32 0, i32 %199, i32 0
  %Arg_4.5168 = load float, ptr %Arg_4.5167, align 4, !invariant.load !197
  %subtract.69169 = fsub float %region_0_123_constant_26109, %Arg_4.5168
  %multiply.70170 = fmul float %multiply.68166, %subtract.69169
  %Arg_3.4171 = getelementptr inbounds [128 x [1 x float]], ptr %arg3, i32 0, i32 %194, i32 0
  %Arg_3.4172 = load float, ptr %Arg_3.4171, align 4, !invariant.load !197
  %multiply.75173 = fmul float %multiply.70170, %Arg_3.4172
  %add.76174 = fadd float %add.67161, %multiply.75173
  %Arg_2.3175 = getelementptr inbounds [8192 x [1 x float]], ptr %arg2, i32 0, i32 %199, i32 0
  %Arg_2.3176 = load float, ptr %Arg_2.3175, align 4, !invariant.load !197
  %Arg_1.2177 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %199, i32 0
  %Arg_1.2178 = load float, ptr %Arg_1.2177, align 4, !invariant.load !197
  %multiply.77179 = fmul float %Arg_2.3176, %Arg_1.2178
  %Arg_1.2180 = getelementptr inbounds [8192 x [1 x float]], ptr %arg1, i32 0, i32 %199, i32 0
  %Arg_1.2181 = load float, ptr %Arg_1.2180, align 4, !invariant.load !197
  %subtract.78182 = fsub float %region_0_123_constant_26109, %Arg_1.2181
  %multiply.79183 = fmul float %multiply.77179, %subtract.78182
  %Arg_0.1184 = getelementptr inbounds [128 x [1 x float]], ptr %arg0, i32 0, i32 %194, i32 0
  %Arg_0.1185 = load float, ptr %Arg_0.1184, align 4, !invariant.load !197
  %multiply.84186 = fmul float %multiply.79183, %Arg_0.1185
  %add.85187 = fadd float %add.76174, %multiply.84186
  %202 = trunc i8 %201 to i1
  %203 = select i1 %202, float %add.85187, float %region_0_123_constant_22102
  %204 = mul nuw nsw i32 %134, 1
  %205 = add nuw nsw i32 0, %204
  %206 = udiv i32 %205, 128
  %207 = mul nuw nsw i32 %136, 1
  %208 = add nuw nsw i32 0, %207
  %209 = mul nuw nsw i32 %137, 128
  %210 = add nuw nsw i32 %208, %209
  %211 = udiv i32 %210, 8192
  %212 = getelementptr inbounds float, ptr %arg22, i32 %132
  store float %203, ptr %212, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %213 = mul i32 %thread_id.y, 1
  %214 = add i32 %tile_origin.1, %thread_id.x
  %215 = add i32 %tile_origin.2, %213
  %216 = add i32 %215, 0
  %217 = mul i32 %tile_origin.0, 128
  %218 = add i32 %217, %216
  %219 = udiv i32 %218, 1
  %220 = urem i32 %219, 128
  %221 = udiv i32 %218, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg21, i32 0, i32 %221, i32 %220
  %output = load float, ptr %34, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true220:                   ; preds = %reduction_write_output-after
  %222 = mul i32 %thread_id.y, 1
  %223 = add i32 %tile_origin.1, %thread_id.x
  %224 = add i32 %tile_origin.2, %222
  %225 = add i32 %224, 0
  %226 = mul i32 %tile_origin.0, 128
  %227 = add i32 %226, %225
  %228 = udiv i32 %227, 1
  %229 = urem i32 %228, 128
  %230 = udiv i32 %227, 128
  %output_element_address222 = getelementptr inbounds [64 x [128 x float]], ptr %arg23, i32 0, i32 %230, i32 %229
  %output223 = load float, ptr %53, align 4
  store float %output223, ptr %output_element_address222, align 4
  br label %reduction_write_output-after221

reduction_write_output-true242:                   ; preds = %reduction_write_output-after221
  %231 = mul i32 %thread_id.y, 1
  %232 = add i32 %tile_origin.1, %thread_id.x
  %233 = add i32 %tile_origin.2, %231
  %234 = add i32 %233, 0
  %235 = mul i32 %tile_origin.0, 128
  %236 = add i32 %235, %234
  %237 = udiv i32 %236, 1
  %238 = urem i32 %237, 128
  %239 = udiv i32 %236, 128
  %output_element_address244 = getelementptr inbounds [64 x [128 x float]], ptr %arg24, i32 0, i32 %239, i32 %238
  %output245 = load float, ptr %72, align 4
  store float %output245, ptr %output_element_address244, align 4
  br label %reduction_write_output-after243

reduction_write_output-true264:                   ; preds = %reduction_write_output-after243
  %240 = mul i32 %thread_id.y, 1
  %241 = add i32 %tile_origin.1, %thread_id.x
  %242 = add i32 %tile_origin.2, %240
  %243 = add i32 %242, 0
  %244 = mul i32 %tile_origin.0, 128
  %245 = add i32 %244, %243
  %246 = udiv i32 %245, 1
  %247 = urem i32 %246, 128
  %248 = udiv i32 %245, 128
  %output_element_address266 = getelementptr inbounds [64 x [128 x float]], ptr %arg25, i32 0, i32 %248, i32 %247
  %output267 = load float, ptr %91, align 4
  store float %output267, ptr %output_element_address266, align 4
  br label %reduction_write_output-after265

reduction_write_output-true286:                   ; preds = %reduction_write_output-after265
  %249 = mul i32 %thread_id.y, 1
  %250 = add i32 %tile_origin.1, %thread_id.x
  %251 = add i32 %tile_origin.2, %249
  %252 = add i32 %251, 0
  %253 = mul i32 %tile_origin.0, 128
  %254 = add i32 %253, %252
  %255 = udiv i32 %254, 1
  %256 = urem i32 %255, 128
  %257 = udiv i32 %254, 128
  %output_element_address288 = getelementptr inbounds [64 x [128 x float]], ptr %arg26, i32 0, i32 %257, i32 %256
  %output289 = load float, ptr %110, align 4
  store float %output289, ptr %output_element_address288, align 4
  br label %reduction_write_output-after287
}

define internal void @region_1_89(ptr dereferenceable(4) %Arg_0.90.typed, ptr dereferenceable(4) %Arg_1.91.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.92.typed = alloca float, align 4
  %Arg_0.90 = load float, ptr %Arg_0.90.typed, align 4
  %Arg_1.91 = load float, ptr %Arg_1.91.typed, align 4
  %add.92 = fadd float %Arg_0.90, %Arg_1.91
  store float %add.92, ptr %add.92.typed, align 4
  %load_ret_value = load float, ptr %add.92.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_96(ptr dereferenceable(4) %Arg_0.97.typed, ptr dereferenceable(4) %Arg_1.98.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.99.typed = alloca float, align 4
  %Arg_0.97 = load float, ptr %Arg_0.97.typed, align 4
  %Arg_1.98 = load float, ptr %Arg_1.98.typed, align 4
  %add.99 = fadd float %Arg_0.97, %Arg_1.98
  store float %add.99, ptr %add.99.typed, align 4
  %load_ret_value = load float, ptr %add.99.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_103(ptr dereferenceable(4) %Arg_0.104.typed, ptr dereferenceable(4) %Arg_1.105.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.106.typed = alloca float, align 4
  %Arg_0.104 = load float, ptr %Arg_0.104.typed, align 4
  %Arg_1.105 = load float, ptr %Arg_1.105.typed, align 4
  %add.106 = fadd float %Arg_0.104, %Arg_1.105
  store float %add.106, ptr %add.106.typed, align 4
  %load_ret_value = load float, ptr %add.106.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_110(ptr dereferenceable(4) %Arg_0.111.typed, ptr dereferenceable(4) %Arg_1.112.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.113.typed = alloca float, align 4
  %Arg_0.111 = load float, ptr %Arg_0.111.typed, align 4
  %Arg_1.112 = load float, ptr %Arg_1.112.typed, align 4
  %add.113 = fadd float %Arg_0.111, %Arg_1.112
  store float %add.113, ptr %add.113.typed, align 4
  %load_ret_value = load float, ptr %add.113.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_117(ptr dereferenceable(4) %Arg_0.118.typed, ptr dereferenceable(4) %Arg_1.119.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.120.typed = alloca float, align 4
  %Arg_0.118 = load float, ptr %Arg_0.118.typed, align 4
  %Arg_1.119 = load float, ptr %Arg_1.119.typed, align 4
  %add.120 = fadd float %Arg_0.118, %Arg_1.119
  store float %add.120, ptr %add.120.typed, align 4
  %load_ret_value = load float, ptr %add.120.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_596(ptr noalias align 128 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 128 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6) {
entry:
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !324
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %4 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %4, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %5, align 4
  %6 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %8 = urem i32 %6, 1024
  %9 = udiv i32 %6, 1024
  %10 = mul i32 %7, 1
  %11 = add i32 %10, %9
  %12 = icmp ult i32 %11, 2
  br i1 %12, label %13, label %early_return

13:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %8, 32
  %thread_id.y = udiv i32 %8, 32
  %lane_id = urem i32 %8, 32
  %14 = udiv i32 %11, 1
  %15 = urem i32 %14, 2
  %16 = udiv i32 %11, 2
  %17 = urem i32 %16, 1
  %18 = udiv i32 %11, 2
  %19 = icmp eq i32 %17, 0
  %tile_bound = select i1 %19, i32 64, i32 4096
  %20 = icmp eq i32 %15, 1
  %tile_bound1 = select i1 %20, i32 64, i32 64
  %tile_origin.0 = mul i32 %18, 1
  %tile_origin.1 = mul i32 %17, 4096
  %tile_origin.2 = mul i32 %15, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %13
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %21 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %21, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %22 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %23 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %24 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %24, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %25 = icmp eq i32 %tile_loop.indvar, 0
  %26 = mul i32 %tile_loop.indvar, 2
  %27 = add i32 %26, 0
  %x_loc = add i32 %27, %23
  %28 = add i32 %tile_origin.1, %y_in_tile.indvar
  %29 = add i32 %tile_origin.2, %x_loc
  %30 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %30, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %31 = mul i32 %tile_loop.indvar, 2
  %32 = add i32 %31, 1
  %x_loc4 = add i32 %32, %23
  %33 = add i32 %tile_origin.1, %y_in_tile.indvar
  %34 = add i32 %tile_origin.2, %x_loc4
  %35 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %35, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !325

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !326

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %36 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %37 = load float, ptr %current_output, align 4
  store float %37, ptr %36, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %38 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %38, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %39, ptr %result_from_other_lane, align 4
  call void @region_1_5(ptr %38, ptr %result_from_other_lane, ptr %return_buffer11)
  %40 = load float, ptr %return_buffer11, align 4
  store float %40, ptr %38, align 4
  %partial_reduction_result13 = load float, ptr %38, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %41, ptr %result_from_other_lane12, align 4
  call void @region_1_5(ptr %38, ptr %result_from_other_lane12, ptr %return_buffer14)
  %42 = load float, ptr %return_buffer14, align 4
  store float %42, ptr %38, align 4
  %partial_reduction_result16 = load float, ptr %38, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %43, ptr %result_from_other_lane15, align 4
  call void @region_1_5(ptr %38, ptr %result_from_other_lane15, ptr %return_buffer17)
  %44 = load float, ptr %return_buffer17, align 4
  store float %44, ptr %38, align 4
  %partial_reduction_result19 = load float, ptr %38, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %45, ptr %result_from_other_lane18, align 4
  call void @region_1_5(ptr %38, ptr %result_from_other_lane18, ptr %return_buffer20)
  %46 = load float, ptr %return_buffer20, align 4
  store float %46, ptr %38, align 4
  %partial_reduction_result22 = load float, ptr %38, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %47, ptr %result_from_other_lane21, align 4
  call void @region_1_5(ptr %38, ptr %result_from_other_lane21, ptr %return_buffer23)
  %48 = load float, ptr %return_buffer23, align 4
  store float %48, ptr %38, align 4
  %49 = icmp ult i32 %thread_id.x, %tile_bound
  %50 = mul i32 %thread_id.y, 2
  %51 = icmp ult i32 %50, %tile_bound1
  %52 = and i1 %51, %49
  %53 = icmp eq i32 %lane_id, 0
  %54 = and i1 %52, %53
  br i1 %54, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %55 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %56 = load float, ptr %current_output25, align 4
  store float %56, ptr %55, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache55, i32 0, i32 %9, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %57 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %57, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %58, ptr %result_from_other_lane27, align 4
  call void @region_1_5(ptr %57, ptr %result_from_other_lane27, ptr %return_buffer29)
  %59 = load float, ptr %return_buffer29, align 4
  store float %59, ptr %57, align 4
  %partial_reduction_result31 = load float, ptr %57, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %60, ptr %result_from_other_lane30, align 4
  call void @region_1_5(ptr %57, ptr %result_from_other_lane30, ptr %return_buffer32)
  %61 = load float, ptr %return_buffer32, align 4
  store float %61, ptr %57, align 4
  %partial_reduction_result34 = load float, ptr %57, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %62, ptr %result_from_other_lane33, align 4
  call void @region_1_5(ptr %57, ptr %result_from_other_lane33, ptr %return_buffer35)
  %63 = load float, ptr %return_buffer35, align 4
  store float %63, ptr %57, align 4
  %partial_reduction_result37 = load float, ptr %57, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %64, ptr %result_from_other_lane36, align 4
  call void @region_1_5(ptr %57, ptr %result_from_other_lane36, ptr %return_buffer38)
  %65 = load float, ptr %return_buffer38, align 4
  store float %65, ptr %57, align 4
  %partial_reduction_result40 = load float, ptr %57, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %66, ptr %result_from_other_lane39, align 4
  call void @region_1_5(ptr %57, ptr %result_from_other_lane39, ptr %return_buffer41)
  %67 = load float, ptr %return_buffer41, align 4
  store float %67, ptr %57, align 4
  %68 = icmp ult i32 %thread_id.x, %tile_bound
  %69 = mul i32 %thread_id.y, 2
  %70 = icmp ult i32 %69, %tile_bound1
  %71 = and i1 %70, %68
  %72 = icmp eq i32 %lane_id, 0
  %73 = and i1 %71, %72
  br i1 %73, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %74 = mul i32 %thread_id.x, 2
  %75 = sub i32 %x_loc, %74
  %Arg_0.1 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %28, i32 %29
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %76 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %75
  call void @region_1_5(ptr %76, ptr %reduction_input_address, ptr %return_buffer)
  %77 = load float, ptr %return_buffer, align 4
  store float %77, ptr %76, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %78 = mul i32 %thread_id.x, 2
  %79 = sub i32 %x_loc4, %78
  %Arg_0.17 = getelementptr inbounds [64 x [128 x float]], ptr %arg0, i32 0, i32 %33, i32 %34
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %80 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %79
  call void @region_1_5(ptr %80, ptr %reduction_input_address, ptr %return_buffer9)
  %81 = load float, ptr %return_buffer9, align 4
  store float %81, ptr %80, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %82 = mul i32 %thread_id.y, 2
  %83 = add i32 %tile_origin.1, %thread_id.x
  %84 = add i32 %tile_origin.2, %82
  %85 = add i32 %84, 0
  %86 = mul i32 %tile_origin.0, 128
  %87 = add i32 %86, %85
  %88 = udiv i32 %87, 1
  %output_element_address = getelementptr inbounds [128 x float], ptr %arg4, i32 0, i32 %88
  %output = load float, ptr %38, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %89 = mul i32 %thread_id.y, 2
  %90 = add i32 %tile_origin.1, %thread_id.x
  %91 = add i32 %tile_origin.2, %89
  %92 = add i32 %91, 1
  %93 = mul i32 %tile_origin.0, 128
  %94 = add i32 %93, %92
  %95 = udiv i32 %94, 1
  %output_element_address44 = getelementptr inbounds [128 x float], ptr %arg4, i32 0, i32 %95
  %output45 = load float, ptr %57, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !197
  %96 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %96, align 4
  %97 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %97, align 4
  %98 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %99 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %100 = urem i32 %98, 1024
  %101 = udiv i32 %98, 1024
  %102 = mul i32 %99, 1
  %103 = add i32 %102, %101
  %104 = icmp ult i32 %103, 2
  br i1 %104, label %105, label %early_return49

105:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %100, 32
  %thread_id.y51 = udiv i32 %100, 32
  %lane_id52 = urem i32 %100, 32
  %106 = udiv i32 %103, 1
  %107 = urem i32 %106, 2
  %108 = udiv i32 %103, 2
  %109 = urem i32 %108, 1
  %110 = udiv i32 %103, 2
  %111 = icmp eq i32 %109, 0
  %tile_bound53 = select i1 %111, i32 64, i32 4096
  %112 = icmp eq i32 %107, 1
  %tile_bound54 = select i1 %112, i32 64, i32 64
  %tile_origin.055 = mul i32 %110, 1
  %tile_origin.156 = mul i32 %109, 4096
  %tile_origin.257 = mul i32 %107, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %105
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %113 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %113, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %114 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %115 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %116 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %116, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %117 = icmp eq i32 %tile_loop.indvar68, 0
  %118 = mul i32 %tile_loop.indvar68, 2
  %119 = add i32 %118, 0
  %x_loc70 = add i32 %119, %115
  %120 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %121 = add i32 %tile_origin.257, %x_loc70
  %122 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %122, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %123 = mul i32 %tile_loop.indvar68, 2
  %124 = add i32 %123, 1
  %x_loc75 = add i32 %124, %115
  %125 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %126 = add i32 %tile_origin.257, %x_loc75
  %127 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %127, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !327

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !328

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %101, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %128 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %129 = load float, ptr %current_output82, align 4
  store float %129, ptr %128, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %101, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %130 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %130, align 4
  %131 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %131, ptr %result_from_other_lane84, align 4
  call void @region_2_10(ptr %130, ptr %result_from_other_lane84, ptr %return_buffer86)
  %132 = load float, ptr %return_buffer86, align 4
  store float %132, ptr %130, align 4
  %partial_reduction_result88 = load float, ptr %130, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %133, ptr %result_from_other_lane87, align 4
  call void @region_2_10(ptr %130, ptr %result_from_other_lane87, ptr %return_buffer89)
  %134 = load float, ptr %return_buffer89, align 4
  store float %134, ptr %130, align 4
  %partial_reduction_result91 = load float, ptr %130, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %135, ptr %result_from_other_lane90, align 4
  call void @region_2_10(ptr %130, ptr %result_from_other_lane90, ptr %return_buffer92)
  %136 = load float, ptr %return_buffer92, align 4
  store float %136, ptr %130, align 4
  %partial_reduction_result94 = load float, ptr %130, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %137, ptr %result_from_other_lane93, align 4
  call void @region_2_10(ptr %130, ptr %result_from_other_lane93, ptr %return_buffer95)
  %138 = load float, ptr %return_buffer95, align 4
  store float %138, ptr %130, align 4
  %partial_reduction_result97 = load float, ptr %130, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %139, ptr %result_from_other_lane96, align 4
  call void @region_2_10(ptr %130, ptr %result_from_other_lane96, ptr %return_buffer98)
  %140 = load float, ptr %return_buffer98, align 4
  store float %140, ptr %130, align 4
  %141 = icmp ult i32 %thread_id.x50, %tile_bound53
  %142 = mul i32 %thread_id.y51, 2
  %143 = icmp ult i32 %142, %tile_bound54
  %144 = and i1 %143, %141
  %145 = icmp eq i32 %lane_id52, 0
  %146 = and i1 %144, %145
  br i1 %146, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %101, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %147 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %148 = load float, ptr %current_output104, align 4
  store float %148, ptr %147, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache56, i32 0, i32 %101, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %149 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %149, align 4
  %150 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %150, ptr %result_from_other_lane106, align 4
  call void @region_2_10(ptr %149, ptr %result_from_other_lane106, ptr %return_buffer108)
  %151 = load float, ptr %return_buffer108, align 4
  store float %151, ptr %149, align 4
  %partial_reduction_result110 = load float, ptr %149, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %152, ptr %result_from_other_lane109, align 4
  call void @region_2_10(ptr %149, ptr %result_from_other_lane109, ptr %return_buffer111)
  %153 = load float, ptr %return_buffer111, align 4
  store float %153, ptr %149, align 4
  %partial_reduction_result113 = load float, ptr %149, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %154, ptr %result_from_other_lane112, align 4
  call void @region_2_10(ptr %149, ptr %result_from_other_lane112, ptr %return_buffer114)
  %155 = load float, ptr %return_buffer114, align 4
  store float %155, ptr %149, align 4
  %partial_reduction_result116 = load float, ptr %149, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %156, ptr %result_from_other_lane115, align 4
  call void @region_2_10(ptr %149, ptr %result_from_other_lane115, ptr %return_buffer117)
  %157 = load float, ptr %return_buffer117, align 4
  store float %157, ptr %149, align 4
  %partial_reduction_result119 = load float, ptr %149, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %158, ptr %result_from_other_lane118, align 4
  call void @region_2_10(ptr %149, ptr %result_from_other_lane118, ptr %return_buffer120)
  %159 = load float, ptr %return_buffer120, align 4
  store float %159, ptr %149, align 4
  %160 = icmp ult i32 %thread_id.x50, %tile_bound53
  %161 = mul i32 %thread_id.y51, 2
  %162 = icmp ult i32 %161, %tile_bound54
  %163 = and i1 %162, %160
  %164 = icmp eq i32 %lane_id52, 0
  %165 = and i1 %163, %164
  br i1 %165, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %166 = mul i32 %thread_id.x50, 2
  %167 = sub i32 %x_loc70, %166
  %Arg_2.3 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %120, i32 %121
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %168 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %167
  call void @region_2_10(ptr %168, ptr %reduction_input_address46, ptr %return_buffer74)
  %169 = load float, ptr %return_buffer74, align 4
  store float %169, ptr %168, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %170 = mul i32 %thread_id.x50, 2
  %171 = sub i32 %x_loc75, %170
  %Arg_2.378 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %125, i32 %126
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !197
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %172 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %171
  call void @region_2_10(ptr %172, ptr %reduction_input_address46, ptr %return_buffer80)
  %173 = load float, ptr %return_buffer80, align 4
  store float %173, ptr %172, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %174 = mul i32 %thread_id.y51, 2
  %175 = add i32 %tile_origin.156, %thread_id.x50
  %176 = add i32 %tile_origin.257, %174
  %177 = add i32 %176, 0
  %178 = mul i32 %tile_origin.055, 128
  %179 = add i32 %178, %177
  %180 = udiv i32 %179, 1
  %output_element_address101 = getelementptr inbounds [128 x float], ptr %arg5, i32 0, i32 %180
  %output102 = load float, ptr %130, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %181 = mul i32 %thread_id.y51, 2
  %182 = add i32 %tile_origin.156, %thread_id.x50
  %183 = add i32 %tile_origin.257, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.055, 128
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %output_element_address123 = getelementptr inbounds [128 x float], ptr %arg5, i32 0, i32 %187
  %output124 = load float, ptr %149, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !197
  %188 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %188, align 4
  %189 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %189, align 4
  %190 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %191 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %192 = urem i32 %190, 1024
  %193 = udiv i32 %190, 1024
  %194 = mul i32 %191, 1
  %195 = add i32 %194, %193
  %196 = icmp ult i32 %195, 2
  br i1 %196, label %197, label %early_return128

197:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %192, 32
  %thread_id.y130 = udiv i32 %192, 32
  %lane_id131 = urem i32 %192, 32
  %198 = udiv i32 %195, 1
  %199 = urem i32 %198, 2
  %200 = udiv i32 %195, 2
  %201 = urem i32 %200, 1
  %202 = udiv i32 %195, 2
  %203 = icmp eq i32 %201, 0
  %tile_bound132 = select i1 %203, i32 64, i32 4096
  %204 = icmp eq i32 %199, 1
  %tile_bound133 = select i1 %204, i32 64, i32 64
  %tile_origin.0134 = mul i32 %202, 1
  %tile_origin.1135 = mul i32 %201, 4096
  %tile_origin.2136 = mul i32 %199, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %197
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %205 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %205, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %206 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %207 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %208 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %208, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %209 = icmp eq i32 %tile_loop.indvar147, 0
  %210 = mul i32 %tile_loop.indvar147, 2
  %211 = add i32 %210, 0
  %x_loc149 = add i32 %211, %207
  %212 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %213 = add i32 %tile_origin.2136, %x_loc149
  %214 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %214, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %215 = mul i32 %tile_loop.indvar147, 2
  %216 = add i32 %215, 1
  %x_loc154 = add i32 %216, %207
  %217 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %218 = add i32 %tile_origin.2136, %x_loc154
  %219 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %219, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !329

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !330

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %193, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %220 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %221 = load float, ptr %current_output161, align 4
  store float %221, ptr %220, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %193, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %222 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %222, align 4
  %223 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %223, ptr %result_from_other_lane163, align 4
  call void @region_3_15(ptr %222, ptr %result_from_other_lane163, ptr %return_buffer165)
  %224 = load float, ptr %return_buffer165, align 4
  store float %224, ptr %222, align 4
  %partial_reduction_result167 = load float, ptr %222, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %225, ptr %result_from_other_lane166, align 4
  call void @region_3_15(ptr %222, ptr %result_from_other_lane166, ptr %return_buffer168)
  %226 = load float, ptr %return_buffer168, align 4
  store float %226, ptr %222, align 4
  %partial_reduction_result170 = load float, ptr %222, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %227, ptr %result_from_other_lane169, align 4
  call void @region_3_15(ptr %222, ptr %result_from_other_lane169, ptr %return_buffer171)
  %228 = load float, ptr %return_buffer171, align 4
  store float %228, ptr %222, align 4
  %partial_reduction_result173 = load float, ptr %222, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %229, ptr %result_from_other_lane172, align 4
  call void @region_3_15(ptr %222, ptr %result_from_other_lane172, ptr %return_buffer174)
  %230 = load float, ptr %return_buffer174, align 4
  store float %230, ptr %222, align 4
  %partial_reduction_result176 = load float, ptr %222, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %231, ptr %result_from_other_lane175, align 4
  call void @region_3_15(ptr %222, ptr %result_from_other_lane175, ptr %return_buffer177)
  %232 = load float, ptr %return_buffer177, align 4
  store float %232, ptr %222, align 4
  %233 = icmp ult i32 %thread_id.x129, %tile_bound132
  %234 = mul i32 %thread_id.y130, 2
  %235 = icmp ult i32 %234, %tile_bound133
  %236 = and i1 %235, %233
  %237 = icmp eq i32 %lane_id131, 0
  %238 = and i1 %236, %237
  br i1 %238, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %193, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %239 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %240 = load float, ptr %current_output183, align 4
  store float %240, ptr %239, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache57, i32 0, i32 %193, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %241 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %241, align 4
  %242 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %242, ptr %result_from_other_lane185, align 4
  call void @region_3_15(ptr %241, ptr %result_from_other_lane185, ptr %return_buffer187)
  %243 = load float, ptr %return_buffer187, align 4
  store float %243, ptr %241, align 4
  %partial_reduction_result189 = load float, ptr %241, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %244, ptr %result_from_other_lane188, align 4
  call void @region_3_15(ptr %241, ptr %result_from_other_lane188, ptr %return_buffer190)
  %245 = load float, ptr %return_buffer190, align 4
  store float %245, ptr %241, align 4
  %partial_reduction_result192 = load float, ptr %241, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %246, ptr %result_from_other_lane191, align 4
  call void @region_3_15(ptr %241, ptr %result_from_other_lane191, ptr %return_buffer193)
  %247 = load float, ptr %return_buffer193, align 4
  store float %247, ptr %241, align 4
  %partial_reduction_result195 = load float, ptr %241, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %248, ptr %result_from_other_lane194, align 4
  call void @region_3_15(ptr %241, ptr %result_from_other_lane194, ptr %return_buffer196)
  %249 = load float, ptr %return_buffer196, align 4
  store float %249, ptr %241, align 4
  %partial_reduction_result198 = load float, ptr %241, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %250, ptr %result_from_other_lane197, align 4
  call void @region_3_15(ptr %241, ptr %result_from_other_lane197, ptr %return_buffer199)
  %251 = load float, ptr %return_buffer199, align 4
  store float %251, ptr %241, align 4
  %252 = icmp ult i32 %thread_id.x129, %tile_bound132
  %253 = mul i32 %thread_id.y130, 2
  %254 = icmp ult i32 %253, %tile_bound133
  %255 = and i1 %254, %252
  %256 = icmp eq i32 %lane_id131, 0
  %257 = and i1 %255, %256
  br i1 %257, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %258 = mul i32 %thread_id.x129, 2
  %259 = sub i32 %x_loc149, %258
  %Arg_3.4 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %212, i32 %213
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %260 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %259
  call void @region_3_15(ptr %260, ptr %reduction_input_address125, ptr %return_buffer153)
  %261 = load float, ptr %return_buffer153, align 4
  store float %261, ptr %260, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %262 = mul i32 %thread_id.x129, 2
  %263 = sub i32 %x_loc154, %262
  %Arg_3.4157 = getelementptr inbounds [64 x [128 x float]], ptr %arg3, i32 0, i32 %217, i32 %218
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !197
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %264 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %263
  call void @region_3_15(ptr %264, ptr %reduction_input_address125, ptr %return_buffer159)
  %265 = load float, ptr %return_buffer159, align 4
  store float %265, ptr %264, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %266 = mul i32 %thread_id.y130, 2
  %267 = add i32 %tile_origin.1135, %thread_id.x129
  %268 = add i32 %tile_origin.2136, %266
  %269 = add i32 %268, 0
  %270 = mul i32 %tile_origin.0134, 128
  %271 = add i32 %270, %269
  %272 = udiv i32 %271, 1
  %output_element_address180 = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %272
  %output181 = load float, ptr %222, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %273 = mul i32 %thread_id.y130, 2
  %274 = add i32 %tile_origin.1135, %thread_id.x129
  %275 = add i32 %tile_origin.2136, %273
  %276 = add i32 %275, 1
  %277 = mul i32 %tile_origin.0134, 128
  %278 = add i32 %277, %276
  %279 = udiv i32 %278, 1
  %output_element_address202 = getelementptr inbounds [128 x float], ptr %arg6, i32 0, i32 %279
  %output203 = load float, ptr %241, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201
}

define internal void @region_1_5(ptr dereferenceable(4) %Arg_0.6.typed, ptr dereferenceable(4) %Arg_1.7.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.8.typed = alloca float, align 4
  %Arg_0.6 = load float, ptr %Arg_0.6.typed, align 4
  %Arg_1.7 = load float, ptr %Arg_1.7.typed, align 4
  %add.8 = fadd float %Arg_0.6, %Arg_1.7
  store float %add.8, ptr %add.8.typed, align 4
  %load_ret_value = load float, ptr %add.8.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_10(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_15(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_415(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 128 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 128 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 128 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 128 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1
  %5 = udiv i32 %linear_index, 1
  %6 = icmp ult i32 %linear_index, 128
  br i1 %6, label %fusion_415.in_bounds-true, label %fusion_415.in_bounds-after

fusion_415.in_bounds-after:                       ; preds = %fusion_415.in_bounds-true, %entry
  ret void

fusion_415.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %multiply.19 = fmul float %9, %11
  %subtract.21 = fsub float %8, %multiply.19
  %12 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.21, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %multiply.22 = fmul float %9, %16
  %subtract.24 = fsub float %14, %multiply.22
  %17 = insertvalue { float, float, float, float, float, float, float, float } %12, float %subtract.24, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %multiply.25 = fmul float %9, %21
  %subtract.27 = fsub float %19, %multiply.25
  %22 = insertvalue { float, float, float, float, float, float, float, float } %17, float %subtract.27, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !197
  %multiply.28 = fmul float %9, %26
  %subtract.30 = fsub float %24, %multiply.28
  %27 = insertvalue { float, float, float, float, float, float, float, float } %22, float %subtract.30, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %multiply.31 = fmul float %9, %31
  %subtract.33 = fsub float %29, %multiply.31
  %32 = insertvalue { float, float, float, float, float, float, float, float } %27, float %subtract.33, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %multiply.34 = fmul float %9, %36
  %subtract.36 = fsub float %34, %multiply.34
  %37 = insertvalue { float, float, float, float, float, float, float, float } %32, float %subtract.36, 5
  %38 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %40 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.37 = fmul float %9, %41
  %subtract.39 = fsub float %39, %multiply.37
  %42 = insertvalue { float, float, float, float, float, float, float, float } %37, float %subtract.39, 6
  %43 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %multiply.40 = fmul float %9, %46
  %subtract.42 = fsub float %44, %multiply.40
  %47 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.42, 7
  %48 = extractvalue { float, float, float, float, float, float, float, float } %47, 0
  %49 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %48, ptr %49, align 4
  %50 = extractvalue { float, float, float, float, float, float, float, float } %47, 1
  %51 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %50, ptr %51, align 4
  %52 = extractvalue { float, float, float, float, float, float, float, float } %47, 2
  %53 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %52, ptr %53, align 4
  %54 = extractvalue { float, float, float, float, float, float, float, float } %47, 3
  %55 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %54, ptr %55, align 4
  %56 = extractvalue { float, float, float, float, float, float, float, float } %47, 4
  %57 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %56, ptr %57, align 4
  %58 = extractvalue { float, float, float, float, float, float, float, float } %47, 5
  %59 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %58, ptr %59, align 4
  %60 = extractvalue { float, float, float, float, float, float, float, float } %47, 6
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %60, ptr %61, align 4
  %62 = extractvalue { float, float, float, float, float, float, float, float } %47, 7
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %62, ptr %63, align 4
  br label %fusion_415.in_bounds-after
}

define void @fusion_431(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40, ptr noalias align 128 dereferenceable(512) %arg41, ptr noalias align 128 dereferenceable(512) %arg42, ptr noalias align 128 dereferenceable(512) %arg43, ptr noalias align 128 dereferenceable(512) %arg44, ptr noalias align 128 dereferenceable(512) %arg45, ptr noalias align 128 dereferenceable(512) %arg46, ptr noalias align 128 dereferenceable(512) %arg47, ptr noalias align 128 dereferenceable(512) %arg48, ptr noalias align 128 dereferenceable(512) %arg49, ptr noalias align 128 dereferenceable(512) %arg50, ptr noalias align 128 dereferenceable(512) %arg51, ptr noalias align 128 dereferenceable(512) %arg52, ptr noalias align 128 dereferenceable(512) %arg53, ptr noalias align 128 dereferenceable(512) %arg54, ptr noalias align 128 dereferenceable(512) %arg55, ptr noalias align 128 dereferenceable(512) %arg56, ptr noalias align 128 dereferenceable(512) %arg57, ptr noalias align 128 dereferenceable(512) %arg58, ptr noalias align 128 dereferenceable(512) %arg59, ptr noalias align 128 dereferenceable(512) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1
  %5 = udiv i32 %linear_index, 1
  %6 = icmp ult i32 %linear_index, 128
  br i1 %6, label %fusion_431.in_bounds-true, label %fusion_431.in_bounds-after

fusion_431.in_bounds-after:                       ; preds = %fusion_431.in_bounds-true, %entry
  ret void

fusion_431.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %multiply.43 = fmul float %9, %11
  %subtract.45 = fsub float %8, %multiply.43
  %12 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %multiply.46 = fmul float %9, %16
  %subtract.48 = fsub float %14, %multiply.46
  %17 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %12, float %subtract.48, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %multiply.49 = fmul float %9, %21
  %subtract.51 = fsub float %19, %multiply.49
  %22 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %17, float %subtract.51, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !197
  %multiply.52 = fmul float %9, %26
  %subtract.54 = fsub float %24, %multiply.52
  %27 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %22, float %subtract.54, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %multiply.55 = fmul float %9, %31
  %subtract.57 = fsub float %29, %multiply.55
  %32 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %27, float %subtract.57, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %multiply.58 = fmul float %9, %36
  %subtract.60 = fsub float %34, %multiply.58
  %37 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %32, float %subtract.60, 5
  %38 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %40 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.61 = fmul float %9, %41
  %subtract.63 = fsub float %39, %multiply.61
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %37, float %subtract.63, 6
  %43 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %multiply.64 = fmul float %9, %46
  %subtract.66 = fsub float %44, %multiply.64
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.66, 7
  %48 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !197
  %50 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %multiply.67 = fmul float %9, %51
  %subtract.69 = fsub float %49, %multiply.67
  %52 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.69, 8
  %53 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %54 = load float, ptr %53, align 4, !invariant.load !197
  %55 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !197
  %multiply.70 = fmul float %9, %56
  %subtract.72 = fsub float %54, %multiply.70
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %52, float %subtract.72, 9
  %58 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %60 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %61 = load float, ptr %60, align 4, !invariant.load !197
  %multiply.73 = fmul float %9, %61
  %subtract.75 = fsub float %59, %multiply.73
  %62 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.75, 10
  %63 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %64 = load float, ptr %63, align 4, !invariant.load !197
  %65 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %66 = load float, ptr %65, align 4, !invariant.load !197
  %multiply.76 = fmul float %9, %66
  %subtract.78 = fsub float %64, %multiply.76
  %67 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %62, float %subtract.78, 11
  %68 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %70 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %71 = load float, ptr %70, align 4, !invariant.load !197
  %multiply.79 = fmul float %9, %71
  %subtract.81 = fsub float %69, %multiply.79
  %72 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %67, float %subtract.81, 12
  %73 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %74 = load float, ptr %73, align 4, !invariant.load !197
  %75 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %multiply.82 = fmul float %9, %76
  %subtract.84 = fsub float %74, %multiply.82
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %72, float %subtract.84, 13
  %78 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %80 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %81 = load float, ptr %80, align 4, !invariant.load !197
  %multiply.85 = fmul float %9, %81
  %subtract.87 = fsub float %79, %multiply.85
  %82 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.87, 14
  %83 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !197
  %85 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %multiply.88 = fmul float %9, %86
  %subtract.90 = fsub float %84, %multiply.88
  %87 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %82, float %subtract.90, 15
  %88 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %89 = load float, ptr %88, align 4, !invariant.load !197
  %90 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %91 = load float, ptr %90, align 4, !invariant.load !197
  %multiply.91 = fmul float %9, %91
  %subtract.93 = fsub float %89, %multiply.91
  %92 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %87, float %subtract.93, 16
  %93 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %94 = load float, ptr %93, align 4, !invariant.load !197
  %95 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %96 = load float, ptr %95, align 4, !invariant.load !197
  %multiply.94 = fmul float %9, %96
  %subtract.96 = fsub float %94, %multiply.94
  %97 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %92, float %subtract.96, 17
  %98 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %99 = load float, ptr %98, align 4, !invariant.load !197
  %100 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %101 = load float, ptr %100, align 4, !invariant.load !197
  %multiply.97 = fmul float %9, %101
  %subtract.99 = fsub float %99, %multiply.97
  %102 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %97, float %subtract.99, 18
  %103 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %105 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %106 = load float, ptr %105, align 4, !invariant.load !197
  %multiply.100 = fmul float %9, %106
  %subtract.102 = fsub float %104, %multiply.100
  %107 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %102, float %subtract.102, 19
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 0
  %109 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 1
  %111 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 2
  %113 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 3
  %115 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 4
  %117 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 5
  %119 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 6
  %121 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 7
  %123 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 8
  %125 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 9
  %127 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 10
  %129 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 11
  %131 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 12
  %133 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 13
  %135 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 14
  %137 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 15
  %139 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 16
  %141 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 17
  %143 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 18
  %145 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 19
  %147 = getelementptr inbounds float, ptr %arg60, i32 %linear_index
  store float %146, ptr %147, align 4
  br label %fusion_431.in_bounds-after
}

define void @fusion_205(ptr noalias align 128 dereferenceable(7340032) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @29, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !331

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !332

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache58, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_16_constant_3 = load float, ptr @28, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 96
  %Arg_0.1 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_16_constant_37 = load float, ptr @28, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 96
  %Arg_0.19 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 128
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 16384
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 128
  %130 = udiv i32 %127, 128
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 16384
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 128
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_16_constant_316 = load float, ptr @28, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 96
  %Arg_0.118 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 128
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_16_constant_323 = load float, ptr @28, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 96
  %Arg_0.125 = getelementptr inbounds [8192 x [224 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 128
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 128
  %180 = udiv i32 %177, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 128
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 128
  %189 = udiv i32 %186, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_277(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(7340032) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !333
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 458752
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 224
  %5 = udiv i32 %linear_index_base, 224
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 224
  %8 = udiv i32 %linear_index1, 224
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 224
  %11 = udiv i32 %linear_index2, 224
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 224
  %14 = udiv i32 %linear_index3, 224
  %15 = icmp ult i32 %linear_index_base, 1835008
  br i1 %15, label %concatenate_277.in_bounds-true, label %concatenate_277.in_bounds-after

concatenate_277.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_277.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 224
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 224
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 224
  %39 = mul i32 %38, 128
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 128
  %43 = udiv i32 %40, 128
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_277.in_bounds-true
  %46 = icmp ult i32 %4, 32
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %47 = icmp ult i32 %4, 96
  br i1 %47, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.32.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 224
  %53 = mul i32 %52, 32
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 32
  %57 = udiv i32 %54, 32
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.32.10
  %60 = phi i32 [ 32, %concatenate.pivot.32.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 224
  %63 = mul i32 %62, 64
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 64
  %67 = udiv i32 %64, 64
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.96.11
  %70 = phi i32 [ 96, %concatenate.pivot.96.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 224
  %73 = mul i32 %72, 128
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 128
  %77 = udiv i32 %74, 128
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.32.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 32
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.32.7
  br label %concat_index_from_operand_id04

concatenate.pivot.96.9:                           ; preds = %concatenate.pivot.32.7
  %81 = icmp ult i32 %7, 96
  br i1 %81, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id15

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.32.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 224
  %87 = mul i32 %86, 32
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 32
  %91 = udiv i32 %88, 32
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.32.19
  %94 = phi i32 [ 32, %concatenate.pivot.32.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 224
  %97 = mul i32 %96, 64
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 64
  %101 = udiv i32 %98, 64
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.96.20
  %104 = phi i32 [ 96, %concatenate.pivot.96.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 224
  %107 = mul i32 %106, 128
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 128
  %111 = udiv i32 %108, 128
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.32.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 32
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.32.16
  br label %concat_index_from_operand_id013

concatenate.pivot.96.18:                          ; preds = %concatenate.pivot.32.16
  %115 = icmp ult i32 %10, 96
  br i1 %115, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id114

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.32.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 224
  %121 = mul i32 %120, 32
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 32
  %125 = udiv i32 %122, 32
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.32.28
  %128 = phi i32 [ 32, %concatenate.pivot.32.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 224
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.96.29
  %138 = phi i32 [ 96, %concatenate.pivot.96.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 224
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.32.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 32
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.32.25
  br label %concat_index_from_operand_id022

concatenate.pivot.96.27:                          ; preds = %concatenate.pivot.32.25
  %149 = icmp ult i32 %13, 96
  br i1 %149, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id123

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_277.in_bounds-after
}

define void @concatenate_287(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 16 dereferenceable(1048576) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(9961472) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !334
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 622592
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 304
  %5 = udiv i32 %linear_index_base, 304
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 304
  %8 = udiv i32 %linear_index1, 304
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 304
  %11 = udiv i32 %linear_index2, 304
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 304
  %14 = udiv i32 %linear_index3, 304
  %15 = icmp ult i32 %linear_index_base, 2490368
  br i1 %15, label %concatenate_287.in_bounds-true, label %concatenate_287.in_bounds-after

concatenate_287.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_287.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.16.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 304
  %19 = mul i32 %18, 16
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 16
  %23 = udiv i32 %20, 16
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.16.1
  %26 = phi i32 [ 16, %concatenate.pivot.16.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 304
  %29 = mul i32 %28, 32
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 32
  %33 = udiv i32 %30, 32
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.48.2
  %36 = phi i32 [ 48, %concatenate.pivot.48.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 304
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.16.:                            ; preds = %concatenate_287.in_bounds-true
  %46 = icmp ult i32 %4, 16
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.48.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id0

concatenate.pivot.48.:                            ; preds = %concatenate.pivot.16.
  %47 = icmp ult i32 %4, 48
  br i1 %47, label %concatenate.pivot.16.1, label %concatenate.pivot.48.2

concatenate.pivot.16.1:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id1

concatenate.pivot.48.2:                           ; preds = %concatenate.pivot.48.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.16.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 304
  %53 = mul i32 %52, 16
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 16
  %57 = udiv i32 %54, 16
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.16.10
  %60 = phi i32 [ 16, %concatenate.pivot.16.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 304
  %63 = mul i32 %62, 32
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 32
  %67 = udiv i32 %64, 32
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.48.11
  %70 = phi i32 [ 48, %concatenate.pivot.48.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 304
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.16.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 16
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.48.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.16.7
  br label %concat_index_from_operand_id04

concatenate.pivot.48.9:                           ; preds = %concatenate.pivot.16.7
  %81 = icmp ult i32 %7, 48
  br i1 %81, label %concatenate.pivot.16.10, label %concatenate.pivot.48.11

concatenate.pivot.16.10:                          ; preds = %concatenate.pivot.48.9
  br label %concat_index_from_operand_id15

concatenate.pivot.48.11:                          ; preds = %concatenate.pivot.48.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.16.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 304
  %87 = mul i32 %86, 16
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 16
  %91 = udiv i32 %88, 16
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.16.19
  %94 = phi i32 [ 16, %concatenate.pivot.16.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 304
  %97 = mul i32 %96, 32
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 32
  %101 = udiv i32 %98, 32
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.48.20
  %104 = phi i32 [ 48, %concatenate.pivot.48.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 304
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.16.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 16
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.48.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.16.16
  br label %concat_index_from_operand_id013

concatenate.pivot.48.18:                          ; preds = %concatenate.pivot.16.16
  %115 = icmp ult i32 %10, 48
  br i1 %115, label %concatenate.pivot.16.19, label %concatenate.pivot.48.20

concatenate.pivot.16.19:                          ; preds = %concatenate.pivot.48.18
  br label %concat_index_from_operand_id114

concatenate.pivot.48.20:                          ; preds = %concatenate.pivot.48.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.16.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 304
  %121 = mul i32 %120, 16
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 16
  %125 = udiv i32 %122, 16
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.16.28
  %128 = phi i32 [ 16, %concatenate.pivot.16.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 304
  %131 = mul i32 %130, 32
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 32
  %135 = udiv i32 %132, 32
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.48.29
  %138 = phi i32 [ 48, %concatenate.pivot.48.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 304
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.16.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 16
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.48.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.16.25
  br label %concat_index_from_operand_id022

concatenate.pivot.48.27:                          ; preds = %concatenate.pivot.16.25
  %149 = icmp ult i32 %13, 48
  br i1 %149, label %concatenate.pivot.16.28, label %concatenate.pivot.48.29

concatenate.pivot.16.28:                          ; preds = %concatenate.pivot.48.27
  br label %concat_index_from_operand_id123

concatenate.pivot.48.29:                          ; preds = %concatenate.pivot.48.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_287.in_bounds-after
}

define void @fusion_175(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 128 dereferenceable(311296) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(16384) %arg3, ptr noalias align 128 dereferenceable(311296) %arg4, ptr noalias align 16 dereferenceable(16384) %arg5, ptr noalias align 128 dereferenceable(311296) %arg6, ptr noalias align 16 dereferenceable(16384) %arg7, ptr noalias align 128 dereferenceable(311296) %arg8, ptr noalias align 16 dereferenceable(16384) %arg9, ptr noalias align 128 dereferenceable(311296) %arg10, ptr noalias align 128 dereferenceable(16384) %arg11, ptr noalias align 128 dereferenceable(16384) %arg12, ptr noalias align 128 dereferenceable(16384) %arg13, ptr noalias align 128 dereferenceable(16384) %arg14, ptr noalias align 128 dereferenceable(16384) %arg15) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 4096
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 4096
  br i1 %6, label %fusion_175.in_bounds-true, label %fusion_175.in_bounds-after

fusion_175.in_bounds-after:                       ; preds = %fusion_175.in_bounds-true, %entry
  ret void

fusion_175.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [304 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.14 = fmul float %9, %13
  %subtract.15 = fsub float %8, %multiply.14
  %14 = insertvalue { float, float, float, float, float } undef, float %subtract.15, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 0
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [304 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.17 = fmul float %9, %20
  %subtract.18 = fsub float %16, %multiply.17
  %21 = insertvalue { float, float, float, float, float } %14, float %subtract.18, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [304 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.20 = fmul float %9, %27
  %subtract.21 = fsub float %23, %multiply.20
  %28 = insertvalue { float, float, float, float, float } %21, float %subtract.21, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [304 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.23 = fmul float %9, %34
  %subtract.24 = fsub float %30, %multiply.23
  %35 = insertvalue { float, float, float, float, float } %28, float %subtract.24, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [304 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.26 = fmul float %9, %41
  %subtract.27 = fsub float %37, %multiply.26
  %42 = insertvalue { float, float, float, float, float } %35, float %subtract.27, 4
  %43 = extractvalue { float, float, float, float, float } %42, 0
  %44 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  store float %43, ptr %44, align 4
  %45 = extractvalue { float, float, float, float, float } %42, 1
  %46 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %45, ptr %46, align 4
  %47 = extractvalue { float, float, float, float, float } %42, 2
  %48 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float } %42, 3
  %50 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float } %42, 4
  %52 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %51, ptr %52, align 4
  br label %fusion_175.in_bounds-after
}

define void @fusion_213(ptr noalias align 128 dereferenceable(10485760) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 128 dereferenceable(32768) %arg2, ptr noalias align 128 dereferenceable(4194304) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @31, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 128
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 2
  %14 = udiv i32 %9, 2
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 2
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 1
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !335

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !336

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__1(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache59, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__1(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 128
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 16384
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 128
  %80 = udiv i32 %77, 128
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 16384
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 128
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_16_constant_3 = load float, ptr @30, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 192
  %Arg_0.1 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__1(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 128
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_16_constant_37 = load float, ptr @30, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 192
  %Arg_0.19 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 128
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 128
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 16384
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 128
  %130 = udiv i32 %127, 128
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 16384
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 128
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [128 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_16_constant_316 = load float, ptr @30, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 192
  %Arg_0.118 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__1(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 128
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_16_constant_323 = load float, ptr @30, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 192
  %Arg_0.125 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 128
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [128 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 128
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 128
  %180 = udiv i32 %177, 128
  %output_element_address = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 128
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 128
  %189 = udiv i32 %186, 128
  %output_element_address61 = getelementptr inbounds [64 x [128 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__1(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_202(ptr noalias align 16 dereferenceable(512) %arg0, ptr noalias align 128 dereferenceable(512) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(512) %arg3, ptr noalias align 128 dereferenceable(512) %arg4, ptr noalias align 16 dereferenceable(512) %arg5, ptr noalias align 128 dereferenceable(512) %arg6, ptr noalias align 16 dereferenceable(512) %arg7, ptr noalias align 128 dereferenceable(512) %arg8, ptr noalias align 16 dereferenceable(512) %arg9, ptr noalias align 128 dereferenceable(512) %arg10, ptr noalias align 16 dereferenceable(512) %arg11, ptr noalias align 128 dereferenceable(512) %arg12, ptr noalias align 16 dereferenceable(512) %arg13, ptr noalias align 128 dereferenceable(512) %arg14, ptr noalias align 16 dereferenceable(512) %arg15, ptr noalias align 128 dereferenceable(512) %arg16, ptr noalias align 16 dereferenceable(512) %arg17, ptr noalias align 128 dereferenceable(512) %arg18, ptr noalias align 16 dereferenceable(512) %arg19, ptr noalias align 128 dereferenceable(512) %arg20, ptr noalias align 16 dereferenceable(512) %arg21, ptr noalias align 128 dereferenceable(512) %arg22, ptr noalias align 16 dereferenceable(512) %arg23, ptr noalias align 128 dereferenceable(512) %arg24, ptr noalias align 16 dereferenceable(512) %arg25, ptr noalias align 128 dereferenceable(512) %arg26, ptr noalias align 16 dereferenceable(512) %arg27, ptr noalias align 128 dereferenceable(512) %arg28, ptr noalias align 16 dereferenceable(512) %arg29, ptr noalias align 128 dereferenceable(512) %arg30, ptr noalias align 16 dereferenceable(512) %arg31, ptr noalias align 128 dereferenceable(512) %arg32, ptr noalias align 16 dereferenceable(512) %arg33, ptr noalias align 128 dereferenceable(512) %arg34, ptr noalias align 16 dereferenceable(512) %arg35, ptr noalias align 128 dereferenceable(512) %arg36, ptr noalias align 16 dereferenceable(512) %arg37, ptr noalias align 128 dereferenceable(512) %arg38, ptr noalias align 16 dereferenceable(512) %arg39, ptr noalias align 128 dereferenceable(512) %arg40, ptr noalias align 128 dereferenceable(512) %arg41, ptr noalias align 128 dereferenceable(512) %arg42, ptr noalias align 128 dereferenceable(512) %arg43, ptr noalias align 128 dereferenceable(512) %arg44, ptr noalias align 128 dereferenceable(512) %arg45, ptr noalias align 128 dereferenceable(512) %arg46, ptr noalias align 128 dereferenceable(512) %arg47, ptr noalias align 128 dereferenceable(512) %arg48, ptr noalias align 128 dereferenceable(512) %arg49, ptr noalias align 128 dereferenceable(512) %arg50) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %2 = mul nuw nsw i32 %0, 128
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 128
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 128
  br i1 %4, label %fusion_202.in_bounds-true, label %fusion_202.in_bounds-after

fusion_202.in_bounds-after:                       ; preds = %fusion_202.in_bounds-true, %entry
  ret void

fusion_202.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !197
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !197
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !197
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4, !invariant.load !197
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4, !invariant.load !197
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !197
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !197
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !197
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !197
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4, !invariant.load !197
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !197
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4, !invariant.load !197
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4, !invariant.load !197
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !197
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_202.in_bounds-after
}

define void @concatenate_275(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 128 dereferenceable(10485760) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !337
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 655360
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 320
  %5 = udiv i32 %linear_index_base, 320
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 320
  %8 = udiv i32 %linear_index1, 320
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 320
  %11 = udiv i32 %linear_index2, 320
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 320
  %14 = udiv i32 %linear_index3, 320
  %15 = icmp ult i32 %linear_index_base, 2621440
  br i1 %15, label %concatenate_275.in_bounds-true, label %concatenate_275.in_bounds-after

concatenate_275.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_275.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 320
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 320
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 320
  %39 = mul i32 %38, 128
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 128
  %43 = udiv i32 %40, 128
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_275.in_bounds-true
  %46 = icmp ult i32 %4, 64
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %47 = icmp ult i32 %4, 192
  br i1 %47, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 320
  %53 = mul i32 %52, 64
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 64
  %57 = udiv i32 %54, 64
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %60 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 320
  %63 = mul i32 %62, 128
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 128
  %67 = udiv i32 %64, 128
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %70 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 320
  %73 = mul i32 %72, 128
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 128
  %77 = udiv i32 %74, 128
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 64
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %81 = icmp ult i32 %7, 192
  br i1 %81, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 320
  %87 = mul i32 %86, 64
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 64
  %91 = udiv i32 %88, 64
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %94 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 320
  %97 = mul i32 %96, 128
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 128
  %101 = udiv i32 %98, 128
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %104 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 320
  %107 = mul i32 %106, 128
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 128
  %111 = udiv i32 %108, 128
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 64
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %115 = icmp ult i32 %10, 192
  br i1 %115, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 320
  %121 = mul i32 %120, 64
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 64
  %125 = udiv i32 %122, 64
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %128 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 320
  %131 = mul i32 %130, 128
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %138 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 320
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 64
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %149 = icmp ult i32 %13, 192
  br i1 %149, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_275.in_bounds-after
}

define void @fusion_128(ptr noalias align 128 dereferenceable(11534336) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @33, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !338

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !339

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__2(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache60, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__2(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_16_constant_3 = load float, ptr @32, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 96
  %Arg_0.1 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__2(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_16_constant_37 = load float, ptr @32, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 96
  %Arg_0.19 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_16_constant_316 = load float, ptr @32, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 96
  %Arg_0.118 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__2(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_16_constant_323 = load float, ptr @32, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 96
  %Arg_0.125 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__2(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @concatenate_270(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(11534336) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !340
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 720896
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 352
  %5 = udiv i32 %linear_index_base, 352
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 352
  %8 = udiv i32 %linear_index1, 352
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 352
  %11 = udiv i32 %linear_index2, 352
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 352
  %14 = udiv i32 %linear_index3, 352
  %15 = icmp ult i32 %linear_index_base, 2883584
  br i1 %15, label %concatenate_270.in_bounds-true, label %concatenate_270.in_bounds-after

concatenate_270.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_270.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.32.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 352
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 352
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 352
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.32.:                            ; preds = %concatenate_270.in_bounds-true
  %46 = icmp ult i32 %4, 32
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.96.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.96.:                            ; preds = %concatenate.pivot.32.
  %47 = icmp ult i32 %4, 96
  br i1 %47, label %concatenate.pivot.32.1, label %concatenate.pivot.96.2

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id1

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.96.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.32.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 352
  %53 = mul i32 %52, 32
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 32
  %57 = udiv i32 %54, 32
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.32.10
  %60 = phi i32 [ 32, %concatenate.pivot.32.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 352
  %63 = mul i32 %62, 64
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 64
  %67 = udiv i32 %64, 64
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.96.11
  %70 = phi i32 [ 96, %concatenate.pivot.96.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 352
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.32.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 32
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.96.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.32.7
  br label %concat_index_from_operand_id04

concatenate.pivot.96.9:                           ; preds = %concatenate.pivot.32.7
  %81 = icmp ult i32 %7, 96
  br i1 %81, label %concatenate.pivot.32.10, label %concatenate.pivot.96.11

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id15

concatenate.pivot.96.11:                          ; preds = %concatenate.pivot.96.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.32.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 352
  %87 = mul i32 %86, 32
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 32
  %91 = udiv i32 %88, 32
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.32.19
  %94 = phi i32 [ 32, %concatenate.pivot.32.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 352
  %97 = mul i32 %96, 64
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 64
  %101 = udiv i32 %98, 64
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.96.20
  %104 = phi i32 [ 96, %concatenate.pivot.96.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 352
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.32.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 32
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.96.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.32.16
  br label %concat_index_from_operand_id013

concatenate.pivot.96.18:                          ; preds = %concatenate.pivot.32.16
  %115 = icmp ult i32 %10, 96
  br i1 %115, label %concatenate.pivot.32.19, label %concatenate.pivot.96.20

concatenate.pivot.32.19:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id114

concatenate.pivot.96.20:                          ; preds = %concatenate.pivot.96.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.32.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 352
  %121 = mul i32 %120, 32
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 32
  %125 = udiv i32 %122, 32
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.32.28
  %128 = phi i32 [ 32, %concatenate.pivot.32.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 352
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.96.29
  %138 = phi i32 [ 96, %concatenate.pivot.96.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 352
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.32.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 32
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.96.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.32.25
  br label %concat_index_from_operand_id022

concatenate.pivot.96.27:                          ; preds = %concatenate.pivot.32.25
  %149 = icmp ult i32 %13, 96
  br i1 %149, label %concatenate.pivot.32.28, label %concatenate.pivot.96.29

concatenate.pivot.32.28:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id123

concatenate.pivot.96.29:                          ; preds = %concatenate.pivot.96.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_270.in_bounds-after
}

define void @fusion_260(ptr noalias align 16 dereferenceable(16384) %arg0, ptr noalias align 128 dereferenceable(114688) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(16384) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(16384) %arg5, ptr noalias align 128 dereferenceable(180224) %arg6, ptr noalias align 16 dereferenceable(16384) %arg7, ptr noalias align 128 dereferenceable(180224) %arg8, ptr noalias align 16 dereferenceable(16384) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(16384) %arg11, ptr noalias align 128 dereferenceable(114688) %arg12, ptr noalias align 16 dereferenceable(16384) %arg13, ptr noalias align 128 dereferenceable(114688) %arg14, ptr noalias align 16 dereferenceable(16384) %arg15, ptr noalias align 128 dereferenceable(114688) %arg16, ptr noalias align 128 dereferenceable(16384) %arg17, ptr noalias align 128 dereferenceable(16384) %arg18, ptr noalias align 128 dereferenceable(16384) %arg19, ptr noalias align 128 dereferenceable(16384) %arg20, ptr noalias align 128 dereferenceable(16384) %arg21, ptr noalias align 128 dereferenceable(16384) %arg22, ptr noalias align 128 dereferenceable(16384) %arg23, ptr noalias align 128 dereferenceable(16384) %arg24) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !204
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 4096
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 4096
  br i1 %6, label %fusion_260.in_bounds-true, label %fusion_260.in_bounds-after

fusion_260.in_bounds-after:                       ; preds = %fusion_260.in_bounds-true, %entry
  ret void

fusion_260.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [224 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.20 = fmul float %9, %13
  %subtract.21 = fsub float %8, %multiply.20
  %14 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.21, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 0
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.23 = fmul float %9, %20
  %subtract.24 = fsub float %16, %multiply.23
  %21 = insertvalue { float, float, float, float, float, float, float, float } %14, float %subtract.24, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [352 x [128 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.26 = fmul float %9, %27
  %subtract.27 = fsub float %23, %multiply.26
  %28 = insertvalue { float, float, float, float, float, float, float, float } %21, float %subtract.27, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [128 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.29 = fmul float %9, %34
  %subtract.30 = fsub float %30, %multiply.29
  %35 = insertvalue { float, float, float, float, float, float, float, float } %28, float %subtract.30, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.32 = fmul float %9, %41
  %subtract.33 = fsub float %37, %multiply.32
  %42 = insertvalue { float, float, float, float, float, float, float, float } %35, float %subtract.33, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [224 x [128 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.35 = fmul float %9, %48
  %subtract.36 = fsub float %44, %multiply.35
  %49 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.36, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [224 x [128 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.38 = fmul float %9, %55
  %subtract.39 = fsub float %51, %multiply.38
  %56 = insertvalue { float, float, float, float, float, float, float, float } %49, float %subtract.39, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [224 x [128 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.41 = fmul float %9, %62
  %subtract.42 = fsub float %58, %multiply.41
  %63 = insertvalue { float, float, float, float, float, float, float, float } %56, float %subtract.42, 7
  %64 = extractvalue { float, float, float, float, float, float, float, float } %63, 0
  %65 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %64, ptr %65, align 4
  %66 = extractvalue { float, float, float, float, float, float, float, float } %63, 1
  %67 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float } %63, 2
  %69 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float } %63, 3
  %71 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float } %63, 4
  %73 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float } %63, 5
  %75 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float } %63, 6
  %77 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float } %63, 7
  %79 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %78, ptr %79, align 4
  br label %fusion_260.in_bounds-after
}

define void @concatenate_300(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 16 dereferenceable(2097152) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 16 dereferenceable(8388608) %arg3, ptr noalias align 128 dereferenceable(11796480) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !341
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 737280
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 360
  %5 = udiv i32 %linear_index_base, 360
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 360
  %8 = udiv i32 %linear_index1, 360
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 360
  %11 = udiv i32 %linear_index2, 360
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 360
  %14 = udiv i32 %linear_index3, 360
  %15 = icmp ult i32 %linear_index_base, 2949120
  br i1 %15, label %concatenate_300.in_bounds-true, label %concatenate_300.in_bounds-after

concatenate_300.in_bounds-after:                  ; preds = %concatenate.5.merge28, %entry
  ret void

concatenate_300.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.96.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 360
  %19 = mul i32 %18, 32
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 32
  %23 = udiv i32 %20, 32
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.32.1
  %26 = phi i32 [ 32, %concatenate.pivot.32.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 360
  %29 = mul i32 %28, 64
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 64
  %33 = udiv i32 %30, 64
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.96.2
  %36 = phi i32 [ 96, %concatenate.pivot.96.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 360
  %39 = mul i32 %38, 8
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 8
  %43 = udiv i32 %40, 8
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.104.3
  %46 = phi i32 [ 104, %concatenate.pivot.104.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 360
  %49 = mul i32 %48, 256
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 256
  %53 = udiv i32 %50, 256
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !197
  br label %concatenate.5.merge

concatenate.pivot.96.:                            ; preds = %concatenate_300.in_bounds-true
  %56 = icmp ult i32 %4, 96
  br i1 %56, label %concatenate.pivot.32., label %concatenate.pivot.104.

concatenate.pivot.32.:                            ; preds = %concatenate.pivot.96.
  %57 = icmp ult i32 %4, 32
  br i1 %57, label %concatenate.pivot.0., label %concatenate.pivot.32.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id0

concatenate.pivot.32.1:                           ; preds = %concatenate.pivot.32.
  br label %concat_index_from_operand_id1

concatenate.pivot.104.:                           ; preds = %concatenate.pivot.96.
  %58 = icmp ult i32 %4, 104
  br i1 %58, label %concatenate.pivot.96.2, label %concatenate.pivot.104.3

concatenate.pivot.96.2:                           ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id2

concatenate.pivot.104.3:                          ; preds = %concatenate.pivot.104.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %59 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ]
  %60 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %59, ptr %60, align 4
  br label %concatenate.pivot.96.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %61 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %62 = sub nsw i32 %7, %61
  %63 = udiv i32 %linear_index1, 360
  %64 = mul i32 %63, 32
  %65 = add i32 %64, %62
  %66 = udiv i32 %65, 1
  %67 = urem i32 %66, 32
  %68 = udiv i32 %65, 32
  %69 = getelementptr inbounds float, ptr %arg0, i32 %65
  %70 = load float, ptr %69, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.32.12
  %71 = phi i32 [ 32, %concatenate.pivot.32.12 ]
  %72 = sub nsw i32 %7, %71
  %73 = udiv i32 %linear_index1, 360
  %74 = mul i32 %73, 64
  %75 = add i32 %74, %72
  %76 = udiv i32 %75, 1
  %77 = urem i32 %76, 64
  %78 = udiv i32 %75, 64
  %79 = getelementptr inbounds float, ptr %arg1, i32 %75
  %80 = load float, ptr %79, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.96.14
  %81 = phi i32 [ 96, %concatenate.pivot.96.14 ]
  %82 = sub nsw i32 %7, %81
  %83 = udiv i32 %linear_index1, 360
  %84 = mul i32 %83, 8
  %85 = add i32 %84, %82
  %86 = udiv i32 %85, 1
  %87 = urem i32 %86, 8
  %88 = udiv i32 %85, 8
  %89 = getelementptr inbounds float, ptr %arg2, i32 %85
  %90 = load float, ptr %89, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.104.15
  %91 = phi i32 [ 104, %concatenate.pivot.104.15 ]
  %92 = sub nsw i32 %7, %91
  %93 = udiv i32 %linear_index1, 360
  %94 = mul i32 %93, 256
  %95 = add i32 %94, %92
  %96 = udiv i32 %95, 1
  %97 = urem i32 %96, 256
  %98 = udiv i32 %95, 256
  %99 = getelementptr inbounds float, ptr %arg3, i32 %95
  %100 = load float, ptr %99, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concatenate.pivot.96.9:                           ; preds = %concatenate.5.merge
  %101 = icmp ult i32 %7, 96
  br i1 %101, label %concatenate.pivot.32.10, label %concatenate.pivot.104.13

concatenate.pivot.32.10:                          ; preds = %concatenate.pivot.96.9
  %102 = icmp ult i32 %7, 32
  br i1 %102, label %concatenate.pivot.0.11, label %concatenate.pivot.32.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.32.10
  br label %concat_index_from_operand_id05

concatenate.pivot.32.12:                          ; preds = %concatenate.pivot.32.10
  br label %concat_index_from_operand_id16

concatenate.pivot.104.13:                         ; preds = %concatenate.pivot.96.9
  %103 = icmp ult i32 %7, 104
  br i1 %103, label %concatenate.pivot.96.14, label %concatenate.pivot.104.15

concatenate.pivot.96.14:                          ; preds = %concatenate.pivot.104.13
  br label %concat_index_from_operand_id27

concatenate.pivot.104.15:                         ; preds = %concatenate.pivot.104.13
  br label %concat_index_from_operand_id38

concatenate.5.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %104 = phi float [ %70, %concat_index_from_operand_id05 ], [ %80, %concat_index_from_operand_id16 ], [ %90, %concat_index_from_operand_id27 ], [ %100, %concat_index_from_operand_id38 ]
  %105 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %104, ptr %105, align 4
  br label %concatenate.pivot.96.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %106 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %107 = sub nsw i32 %10, %106
  %108 = udiv i32 %linear_index2, 360
  %109 = mul i32 %108, 32
  %110 = add i32 %109, %107
  %111 = udiv i32 %110, 1
  %112 = urem i32 %111, 32
  %113 = udiv i32 %110, 32
  %114 = getelementptr inbounds float, ptr %arg0, i32 %110
  %115 = load float, ptr %114, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.32.24
  %116 = phi i32 [ 32, %concatenate.pivot.32.24 ]
  %117 = sub nsw i32 %10, %116
  %118 = udiv i32 %linear_index2, 360
  %119 = mul i32 %118, 64
  %120 = add i32 %119, %117
  %121 = udiv i32 %120, 1
  %122 = urem i32 %121, 64
  %123 = udiv i32 %120, 64
  %124 = getelementptr inbounds float, ptr %arg1, i32 %120
  %125 = load float, ptr %124, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.96.26
  %126 = phi i32 [ 96, %concatenate.pivot.96.26 ]
  %127 = sub nsw i32 %10, %126
  %128 = udiv i32 %linear_index2, 360
  %129 = mul i32 %128, 8
  %130 = add i32 %129, %127
  %131 = udiv i32 %130, 1
  %132 = urem i32 %131, 8
  %133 = udiv i32 %130, 8
  %134 = getelementptr inbounds float, ptr %arg2, i32 %130
  %135 = load float, ptr %134, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.104.27
  %136 = phi i32 [ 104, %concatenate.pivot.104.27 ]
  %137 = sub nsw i32 %10, %136
  %138 = udiv i32 %linear_index2, 360
  %139 = mul i32 %138, 256
  %140 = add i32 %139, %137
  %141 = udiv i32 %140, 1
  %142 = urem i32 %141, 256
  %143 = udiv i32 %140, 256
  %144 = getelementptr inbounds float, ptr %arg3, i32 %140
  %145 = load float, ptr %144, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concatenate.pivot.96.21:                          ; preds = %concatenate.5.merge4
  %146 = icmp ult i32 %10, 96
  br i1 %146, label %concatenate.pivot.32.22, label %concatenate.pivot.104.25

concatenate.pivot.32.22:                          ; preds = %concatenate.pivot.96.21
  %147 = icmp ult i32 %10, 32
  br i1 %147, label %concatenate.pivot.0.23, label %concatenate.pivot.32.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.32.22
  br label %concat_index_from_operand_id017

concatenate.pivot.32.24:                          ; preds = %concatenate.pivot.32.22
  br label %concat_index_from_operand_id118

concatenate.pivot.104.25:                         ; preds = %concatenate.pivot.96.21
  %148 = icmp ult i32 %10, 104
  br i1 %148, label %concatenate.pivot.96.26, label %concatenate.pivot.104.27

concatenate.pivot.96.26:                          ; preds = %concatenate.pivot.104.25
  br label %concat_index_from_operand_id219

concatenate.pivot.104.27:                         ; preds = %concatenate.pivot.104.25
  br label %concat_index_from_operand_id320

concatenate.5.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %149 = phi float [ %115, %concat_index_from_operand_id017 ], [ %125, %concat_index_from_operand_id118 ], [ %135, %concat_index_from_operand_id219 ], [ %145, %concat_index_from_operand_id320 ]
  %150 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %149, ptr %150, align 4
  br label %concatenate.pivot.96.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %151 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %152 = sub nsw i32 %13, %151
  %153 = udiv i32 %linear_index3, 360
  %154 = mul i32 %153, 32
  %155 = add i32 %154, %152
  %156 = udiv i32 %155, 1
  %157 = urem i32 %156, 32
  %158 = udiv i32 %155, 32
  %159 = getelementptr inbounds float, ptr %arg0, i32 %155
  %160 = load float, ptr %159, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.32.36
  %161 = phi i32 [ 32, %concatenate.pivot.32.36 ]
  %162 = sub nsw i32 %13, %161
  %163 = udiv i32 %linear_index3, 360
  %164 = mul i32 %163, 64
  %165 = add i32 %164, %162
  %166 = udiv i32 %165, 1
  %167 = urem i32 %166, 64
  %168 = udiv i32 %165, 64
  %169 = getelementptr inbounds float, ptr %arg1, i32 %165
  %170 = load float, ptr %169, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.96.38
  %171 = phi i32 [ 96, %concatenate.pivot.96.38 ]
  %172 = sub nsw i32 %13, %171
  %173 = udiv i32 %linear_index3, 360
  %174 = mul i32 %173, 8
  %175 = add i32 %174, %172
  %176 = udiv i32 %175, 1
  %177 = urem i32 %176, 8
  %178 = udiv i32 %175, 8
  %179 = getelementptr inbounds float, ptr %arg2, i32 %175
  %180 = load float, ptr %179, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.104.39
  %181 = phi i32 [ 104, %concatenate.pivot.104.39 ]
  %182 = sub nsw i32 %13, %181
  %183 = udiv i32 %linear_index3, 360
  %184 = mul i32 %183, 256
  %185 = add i32 %184, %182
  %186 = udiv i32 %185, 1
  %187 = urem i32 %186, 256
  %188 = udiv i32 %185, 256
  %189 = getelementptr inbounds float, ptr %arg3, i32 %185
  %190 = load float, ptr %189, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concatenate.pivot.96.33:                          ; preds = %concatenate.5.merge16
  %191 = icmp ult i32 %13, 96
  br i1 %191, label %concatenate.pivot.32.34, label %concatenate.pivot.104.37

concatenate.pivot.32.34:                          ; preds = %concatenate.pivot.96.33
  %192 = icmp ult i32 %13, 32
  br i1 %192, label %concatenate.pivot.0.35, label %concatenate.pivot.32.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.32.34
  br label %concat_index_from_operand_id029

concatenate.pivot.32.36:                          ; preds = %concatenate.pivot.32.34
  br label %concat_index_from_operand_id130

concatenate.pivot.104.37:                         ; preds = %concatenate.pivot.96.33
  %193 = icmp ult i32 %13, 104
  br i1 %193, label %concatenate.pivot.96.38, label %concatenate.pivot.104.39

concatenate.pivot.96.38:                          ; preds = %concatenate.pivot.104.37
  br label %concat_index_from_operand_id231

concatenate.pivot.104.39:                         ; preds = %concatenate.pivot.104.37
  br label %concat_index_from_operand_id332

concatenate.5.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %194 = phi float [ %160, %concat_index_from_operand_id029 ], [ %170, %concat_index_from_operand_id130 ], [ %180, %concat_index_from_operand_id231 ], [ %190, %concat_index_from_operand_id332 ]
  %195 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %194, ptr %195, align 4
  br label %concatenate_300.in_bounds-after
}

define void @fusion_364(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(360448) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(360448) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(368640) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(368640) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(368640) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(360448) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 128 dereferenceable(311296) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(311296) %arg16, ptr noalias align 16 dereferenceable(32768) %arg17, ptr noalias align 128 dereferenceable(311296) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 128 dereferenceable(360448) %arg20, ptr noalias align 16 dereferenceable(32768) %arg21, ptr noalias align 128 dereferenceable(311296) %arg22, ptr noalias align 16 dereferenceable(32768) %arg23, ptr noalias align 128 dereferenceable(311296) %arg24, ptr noalias align 16 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(360448) %arg26, ptr noalias align 128 dereferenceable(32768) %arg27, ptr noalias align 128 dereferenceable(32768) %arg28, ptr noalias align 128 dereferenceable(32768) %arg29, ptr noalias align 128 dereferenceable(32768) %arg30, ptr noalias align 128 dereferenceable(32768) %arg31, ptr noalias align 128 dereferenceable(32768) %arg32, ptr noalias align 128 dereferenceable(32768) %arg33, ptr noalias align 128 dereferenceable(32768) %arg34, ptr noalias align 128 dereferenceable(32768) %arg35, ptr noalias align 128 dereferenceable(32768) %arg36, ptr noalias align 128 dereferenceable(32768) %arg37, ptr noalias align 128 dereferenceable(32768) %arg38, ptr noalias align 128 dereferenceable(32768) %arg39) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_364.in_bounds-true, label %fusion_364.in_bounds-after

fusion_364.in_bounds-after:                       ; preds = %fusion_364.in_bounds-true, %entry
  ret void

fusion_364.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [352 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.30 = fmul float %9, %13
  %subtract.31 = fsub float %8, %multiply.30
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.31, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 0
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.33 = fmul float %9, %20
  %subtract.34 = fsub float %16, %multiply.33
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.34, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [360 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.36 = fmul float %9, %27
  %subtract.37 = fsub float %23, %multiply.36
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.37, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [360 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.39 = fmul float %9, %34
  %subtract.40 = fsub float %30, %multiply.39
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.40, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 0
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [360 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.42 = fmul float %9, %41
  %subtract.43 = fsub float %37, %multiply.42
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.43, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [352 x [256 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.45 = fmul float %9, %48
  %subtract.46 = fsub float %44, %multiply.45
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.46, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 16
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [304 x [256 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.48 = fmul float %9, %55
  %subtract.49 = fsub float %51, %multiply.48
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.49, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 16
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [304 x [256 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.51 = fmul float %9, %62
  %subtract.52 = fsub float %58, %multiply.51
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.52, 7
  %64 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %66 = add i32 %5, 16
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [304 x [256 x float]], ptr %arg18, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %multiply.54 = fmul float %9, %69
  %subtract.55 = fsub float %65, %multiply.54
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.55, 8
  %71 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = add i32 %5, 0
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [352 x [256 x float]], ptr %arg20, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %multiply.57 = fmul float %9, %76
  %subtract.58 = fsub float %72, %multiply.57
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.58, 9
  %78 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %80 = add i32 %5, 16
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [304 x [256 x float]], ptr %arg22, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %multiply.60 = fmul float %9, %83
  %subtract.61 = fsub float %79, %multiply.60
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.61, 10
  %85 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %87 = add i32 %5, 16
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [304 x [256 x float]], ptr %arg24, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %multiply.63 = fmul float %9, %90
  %subtract.64 = fsub float %86, %multiply.63
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.64, 11
  %92 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = add i32 %5, 0
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [352 x [256 x float]], ptr %arg26, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %multiply.66 = fmul float %9, %97
  %subtract.67 = fsub float %93, %multiply.66
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.67, 12
  %99 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 0
  %100 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  store float %99, ptr %100, align 4
  %101 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 1
  %102 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %101, ptr %102, align 4
  %103 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 2
  %104 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  store float %103, ptr %104, align 4
  %105 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 3
  %106 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %105, ptr %106, align 4
  %107 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 4
  %108 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  store float %107, ptr %108, align 4
  %109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 5
  %110 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %109, ptr %110, align 4
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 6
  %112 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %111, ptr %112, align 4
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 7
  %114 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %113, ptr %114, align 4
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 8
  %116 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %115, ptr %116, align 4
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 9
  %118 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %117, ptr %118, align 4
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 10
  %120 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %119, ptr %120, align 4
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 11
  %122 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %121, ptr %122, align 4
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, 12
  %124 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %123, ptr %124, align 4
  br label %fusion_364.in_bounds-after
}

define void @concatenate_297(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(4194304) %arg2, ptr noalias align 16 dereferenceable(2097152) %arg3, ptr noalias align 16 dereferenceable(262144) %arg4, ptr noalias align 128 dereferenceable(12845056) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !342
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 802816
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 392
  %5 = udiv i32 %linear_index_base, 392
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 392
  %8 = udiv i32 %linear_index1, 392
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 392
  %11 = udiv i32 %linear_index2, 392
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 392
  %14 = udiv i32 %linear_index3, 392
  %15 = icmp ult i32 %linear_index_base, 3211264
  br i1 %15, label %concatenate_297.in_bounds-true, label %concatenate_297.in_bounds-after

concatenate_297.in_bounds-after:                  ; preds = %concatenate.6.merge35, %entry
  ret void

concatenate_297.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 392
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 392
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 392
  %39 = mul i32 %38, 128
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 128
  %43 = udiv i32 %40, 128
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.320.3
  %46 = phi i32 [ 320, %concatenate.pivot.320.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 392
  %49 = mul i32 %48, 64
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 64
  %53 = udiv i32 %50, 64
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.384.4
  %56 = phi i32 [ 384, %concatenate.pivot.384.4 ]
  %57 = sub nsw i32 %4, %56
  %58 = udiv i32 %linear_index_base, 392
  %59 = mul i32 %58, 8
  %60 = add i32 %59, %57
  %61 = udiv i32 %60, 1
  %62 = urem i32 %61, 8
  %63 = udiv i32 %60, 8
  %64 = getelementptr inbounds float, ptr %arg4, i32 %60
  %65 = load float, ptr %64, align 4, !invariant.load !197
  br label %concatenate.6.merge

concatenate.pivot.192.:                           ; preds = %concatenate_297.in_bounds-true
  %66 = icmp ult i32 %4, 192
  br i1 %66, label %concatenate.pivot.64., label %concatenate.pivot.320.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %67 = icmp ult i32 %4, 64
  br i1 %67, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.320.:                           ; preds = %concatenate.pivot.192.
  %68 = icmp ult i32 %4, 320
  br i1 %68, label %concatenate.pivot.192.2, label %concatenate.pivot.384.

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.320.
  br label %concat_index_from_operand_id2

concatenate.pivot.384.:                           ; preds = %concatenate.pivot.320.
  %69 = icmp ult i32 %4, 384
  br i1 %69, label %concatenate.pivot.320.3, label %concatenate.pivot.384.4

concatenate.pivot.320.3:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id3

concatenate.pivot.384.4:                          ; preds = %concatenate.pivot.384.
  br label %concat_index_from_operand_id4

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %70 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ], [ %65, %concat_index_from_operand_id4 ]
  %71 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  store float %70, ptr %71, align 4
  br label %concatenate.pivot.192.11

concat_index_from_operand_id06:                   ; preds = %concatenate.pivot.0.13
  %72 = phi i32 [ 0, %concatenate.pivot.0.13 ]
  %73 = sub nsw i32 %7, %72
  %74 = udiv i32 %linear_index1, 392
  %75 = mul i32 %74, 64
  %76 = add i32 %75, %73
  %77 = udiv i32 %76, 1
  %78 = urem i32 %77, 64
  %79 = udiv i32 %76, 64
  %80 = getelementptr inbounds float, ptr %arg0, i32 %76
  %81 = load float, ptr %80, align 4, !invariant.load !197
  br label %concatenate.6.merge5

concat_index_from_operand_id17:                   ; preds = %concatenate.pivot.64.14
  %82 = phi i32 [ 64, %concatenate.pivot.64.14 ]
  %83 = sub nsw i32 %7, %82
  %84 = udiv i32 %linear_index1, 392
  %85 = mul i32 %84, 128
  %86 = add i32 %85, %83
  %87 = udiv i32 %86, 1
  %88 = urem i32 %87, 128
  %89 = udiv i32 %86, 128
  %90 = getelementptr inbounds float, ptr %arg1, i32 %86
  %91 = load float, ptr %90, align 4, !invariant.load !197
  br label %concatenate.6.merge5

concat_index_from_operand_id28:                   ; preds = %concatenate.pivot.192.16
  %92 = phi i32 [ 192, %concatenate.pivot.192.16 ]
  %93 = sub nsw i32 %7, %92
  %94 = udiv i32 %linear_index1, 392
  %95 = mul i32 %94, 128
  %96 = add i32 %95, %93
  %97 = udiv i32 %96, 1
  %98 = urem i32 %97, 128
  %99 = udiv i32 %96, 128
  %100 = getelementptr inbounds float, ptr %arg2, i32 %96
  %101 = load float, ptr %100, align 4, !invariant.load !197
  br label %concatenate.6.merge5

concat_index_from_operand_id39:                   ; preds = %concatenate.pivot.320.18
  %102 = phi i32 [ 320, %concatenate.pivot.320.18 ]
  %103 = sub nsw i32 %7, %102
  %104 = udiv i32 %linear_index1, 392
  %105 = mul i32 %104, 64
  %106 = add i32 %105, %103
  %107 = udiv i32 %106, 1
  %108 = urem i32 %107, 64
  %109 = udiv i32 %106, 64
  %110 = getelementptr inbounds float, ptr %arg3, i32 %106
  %111 = load float, ptr %110, align 4, !invariant.load !197
  br label %concatenate.6.merge5

concat_index_from_operand_id410:                  ; preds = %concatenate.pivot.384.19
  %112 = phi i32 [ 384, %concatenate.pivot.384.19 ]
  %113 = sub nsw i32 %7, %112
  %114 = udiv i32 %linear_index1, 392
  %115 = mul i32 %114, 8
  %116 = add i32 %115, %113
  %117 = udiv i32 %116, 1
  %118 = urem i32 %117, 8
  %119 = udiv i32 %116, 8
  %120 = getelementptr inbounds float, ptr %arg4, i32 %116
  %121 = load float, ptr %120, align 4, !invariant.load !197
  br label %concatenate.6.merge5

concatenate.pivot.192.11:                         ; preds = %concatenate.6.merge
  %122 = icmp ult i32 %7, 192
  br i1 %122, label %concatenate.pivot.64.12, label %concatenate.pivot.320.15

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.192.11
  %123 = icmp ult i32 %7, 64
  br i1 %123, label %concatenate.pivot.0.13, label %concatenate.pivot.64.14

concatenate.pivot.0.13:                           ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id06

concatenate.pivot.64.14:                          ; preds = %concatenate.pivot.64.12
  br label %concat_index_from_operand_id17

concatenate.pivot.320.15:                         ; preds = %concatenate.pivot.192.11
  %124 = icmp ult i32 %7, 320
  br i1 %124, label %concatenate.pivot.192.16, label %concatenate.pivot.384.17

concatenate.pivot.192.16:                         ; preds = %concatenate.pivot.320.15
  br label %concat_index_from_operand_id28

concatenate.pivot.384.17:                         ; preds = %concatenate.pivot.320.15
  %125 = icmp ult i32 %7, 384
  br i1 %125, label %concatenate.pivot.320.18, label %concatenate.pivot.384.19

concatenate.pivot.320.18:                         ; preds = %concatenate.pivot.384.17
  br label %concat_index_from_operand_id39

concatenate.pivot.384.19:                         ; preds = %concatenate.pivot.384.17
  br label %concat_index_from_operand_id410

concatenate.6.merge5:                             ; preds = %concat_index_from_operand_id410, %concat_index_from_operand_id39, %concat_index_from_operand_id28, %concat_index_from_operand_id17, %concat_index_from_operand_id06
  %126 = phi float [ %81, %concat_index_from_operand_id06 ], [ %91, %concat_index_from_operand_id17 ], [ %101, %concat_index_from_operand_id28 ], [ %111, %concat_index_from_operand_id39 ], [ %121, %concat_index_from_operand_id410 ]
  %127 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  store float %126, ptr %127, align 4
  br label %concatenate.pivot.192.26

concat_index_from_operand_id021:                  ; preds = %concatenate.pivot.0.28
  %128 = phi i32 [ 0, %concatenate.pivot.0.28 ]
  %129 = sub nsw i32 %10, %128
  %130 = udiv i32 %linear_index2, 392
  %131 = mul i32 %130, 64
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 64
  %135 = udiv i32 %132, 64
  %136 = getelementptr inbounds float, ptr %arg0, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.6.merge20

concat_index_from_operand_id122:                  ; preds = %concatenate.pivot.64.29
  %138 = phi i32 [ 64, %concatenate.pivot.64.29 ]
  %139 = sub nsw i32 %10, %138
  %140 = udiv i32 %linear_index2, 392
  %141 = mul i32 %140, 128
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 128
  %145 = udiv i32 %142, 128
  %146 = getelementptr inbounds float, ptr %arg1, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.6.merge20

concat_index_from_operand_id223:                  ; preds = %concatenate.pivot.192.31
  %148 = phi i32 [ 192, %concatenate.pivot.192.31 ]
  %149 = sub nsw i32 %10, %148
  %150 = udiv i32 %linear_index2, 392
  %151 = mul i32 %150, 128
  %152 = add i32 %151, %149
  %153 = udiv i32 %152, 1
  %154 = urem i32 %153, 128
  %155 = udiv i32 %152, 128
  %156 = getelementptr inbounds float, ptr %arg2, i32 %152
  %157 = load float, ptr %156, align 4, !invariant.load !197
  br label %concatenate.6.merge20

concat_index_from_operand_id324:                  ; preds = %concatenate.pivot.320.33
  %158 = phi i32 [ 320, %concatenate.pivot.320.33 ]
  %159 = sub nsw i32 %10, %158
  %160 = udiv i32 %linear_index2, 392
  %161 = mul i32 %160, 64
  %162 = add i32 %161, %159
  %163 = udiv i32 %162, 1
  %164 = urem i32 %163, 64
  %165 = udiv i32 %162, 64
  %166 = getelementptr inbounds float, ptr %arg3, i32 %162
  %167 = load float, ptr %166, align 4, !invariant.load !197
  br label %concatenate.6.merge20

concat_index_from_operand_id425:                  ; preds = %concatenate.pivot.384.34
  %168 = phi i32 [ 384, %concatenate.pivot.384.34 ]
  %169 = sub nsw i32 %10, %168
  %170 = udiv i32 %linear_index2, 392
  %171 = mul i32 %170, 8
  %172 = add i32 %171, %169
  %173 = udiv i32 %172, 1
  %174 = urem i32 %173, 8
  %175 = udiv i32 %172, 8
  %176 = getelementptr inbounds float, ptr %arg4, i32 %172
  %177 = load float, ptr %176, align 4, !invariant.load !197
  br label %concatenate.6.merge20

concatenate.pivot.192.26:                         ; preds = %concatenate.6.merge5
  %178 = icmp ult i32 %10, 192
  br i1 %178, label %concatenate.pivot.64.27, label %concatenate.pivot.320.30

concatenate.pivot.64.27:                          ; preds = %concatenate.pivot.192.26
  %179 = icmp ult i32 %10, 64
  br i1 %179, label %concatenate.pivot.0.28, label %concatenate.pivot.64.29

concatenate.pivot.0.28:                           ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id021

concatenate.pivot.64.29:                          ; preds = %concatenate.pivot.64.27
  br label %concat_index_from_operand_id122

concatenate.pivot.320.30:                         ; preds = %concatenate.pivot.192.26
  %180 = icmp ult i32 %10, 320
  br i1 %180, label %concatenate.pivot.192.31, label %concatenate.pivot.384.32

concatenate.pivot.192.31:                         ; preds = %concatenate.pivot.320.30
  br label %concat_index_from_operand_id223

concatenate.pivot.384.32:                         ; preds = %concatenate.pivot.320.30
  %181 = icmp ult i32 %10, 384
  br i1 %181, label %concatenate.pivot.320.33, label %concatenate.pivot.384.34

concatenate.pivot.320.33:                         ; preds = %concatenate.pivot.384.32
  br label %concat_index_from_operand_id324

concatenate.pivot.384.34:                         ; preds = %concatenate.pivot.384.32
  br label %concat_index_from_operand_id425

concatenate.6.merge20:                            ; preds = %concat_index_from_operand_id425, %concat_index_from_operand_id324, %concat_index_from_operand_id223, %concat_index_from_operand_id122, %concat_index_from_operand_id021
  %182 = phi float [ %137, %concat_index_from_operand_id021 ], [ %147, %concat_index_from_operand_id122 ], [ %157, %concat_index_from_operand_id223 ], [ %167, %concat_index_from_operand_id324 ], [ %177, %concat_index_from_operand_id425 ]
  %183 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  store float %182, ptr %183, align 4
  br label %concatenate.pivot.192.41

concat_index_from_operand_id036:                  ; preds = %concatenate.pivot.0.43
  %184 = phi i32 [ 0, %concatenate.pivot.0.43 ]
  %185 = sub nsw i32 %13, %184
  %186 = udiv i32 %linear_index3, 392
  %187 = mul i32 %186, 64
  %188 = add i32 %187, %185
  %189 = udiv i32 %188, 1
  %190 = urem i32 %189, 64
  %191 = udiv i32 %188, 64
  %192 = getelementptr inbounds float, ptr %arg0, i32 %188
  %193 = load float, ptr %192, align 4, !invariant.load !197
  br label %concatenate.6.merge35

concat_index_from_operand_id137:                  ; preds = %concatenate.pivot.64.44
  %194 = phi i32 [ 64, %concatenate.pivot.64.44 ]
  %195 = sub nsw i32 %13, %194
  %196 = udiv i32 %linear_index3, 392
  %197 = mul i32 %196, 128
  %198 = add i32 %197, %195
  %199 = udiv i32 %198, 1
  %200 = urem i32 %199, 128
  %201 = udiv i32 %198, 128
  %202 = getelementptr inbounds float, ptr %arg1, i32 %198
  %203 = load float, ptr %202, align 4, !invariant.load !197
  br label %concatenate.6.merge35

concat_index_from_operand_id238:                  ; preds = %concatenate.pivot.192.46
  %204 = phi i32 [ 192, %concatenate.pivot.192.46 ]
  %205 = sub nsw i32 %13, %204
  %206 = udiv i32 %linear_index3, 392
  %207 = mul i32 %206, 128
  %208 = add i32 %207, %205
  %209 = udiv i32 %208, 1
  %210 = urem i32 %209, 128
  %211 = udiv i32 %208, 128
  %212 = getelementptr inbounds float, ptr %arg2, i32 %208
  %213 = load float, ptr %212, align 4, !invariant.load !197
  br label %concatenate.6.merge35

concat_index_from_operand_id339:                  ; preds = %concatenate.pivot.320.48
  %214 = phi i32 [ 320, %concatenate.pivot.320.48 ]
  %215 = sub nsw i32 %13, %214
  %216 = udiv i32 %linear_index3, 392
  %217 = mul i32 %216, 64
  %218 = add i32 %217, %215
  %219 = udiv i32 %218, 1
  %220 = urem i32 %219, 64
  %221 = udiv i32 %218, 64
  %222 = getelementptr inbounds float, ptr %arg3, i32 %218
  %223 = load float, ptr %222, align 4, !invariant.load !197
  br label %concatenate.6.merge35

concat_index_from_operand_id440:                  ; preds = %concatenate.pivot.384.49
  %224 = phi i32 [ 384, %concatenate.pivot.384.49 ]
  %225 = sub nsw i32 %13, %224
  %226 = udiv i32 %linear_index3, 392
  %227 = mul i32 %226, 8
  %228 = add i32 %227, %225
  %229 = udiv i32 %228, 1
  %230 = urem i32 %229, 8
  %231 = udiv i32 %228, 8
  %232 = getelementptr inbounds float, ptr %arg4, i32 %228
  %233 = load float, ptr %232, align 4, !invariant.load !197
  br label %concatenate.6.merge35

concatenate.pivot.192.41:                         ; preds = %concatenate.6.merge20
  %234 = icmp ult i32 %13, 192
  br i1 %234, label %concatenate.pivot.64.42, label %concatenate.pivot.320.45

concatenate.pivot.64.42:                          ; preds = %concatenate.pivot.192.41
  %235 = icmp ult i32 %13, 64
  br i1 %235, label %concatenate.pivot.0.43, label %concatenate.pivot.64.44

concatenate.pivot.0.43:                           ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id036

concatenate.pivot.64.44:                          ; preds = %concatenate.pivot.64.42
  br label %concat_index_from_operand_id137

concatenate.pivot.320.45:                         ; preds = %concatenate.pivot.192.41
  %236 = icmp ult i32 %13, 320
  br i1 %236, label %concatenate.pivot.192.46, label %concatenate.pivot.384.47

concatenate.pivot.192.46:                         ; preds = %concatenate.pivot.320.45
  br label %concat_index_from_operand_id238

concatenate.pivot.384.47:                         ; preds = %concatenate.pivot.320.45
  %237 = icmp ult i32 %13, 384
  br i1 %237, label %concatenate.pivot.320.48, label %concatenate.pivot.384.49

concatenate.pivot.320.48:                         ; preds = %concatenate.pivot.384.47
  br label %concat_index_from_operand_id339

concatenate.pivot.384.49:                         ; preds = %concatenate.pivot.384.47
  br label %concat_index_from_operand_id440

concatenate.6.merge35:                            ; preds = %concat_index_from_operand_id440, %concat_index_from_operand_id339, %concat_index_from_operand_id238, %concat_index_from_operand_id137, %concat_index_from_operand_id036
  %238 = phi float [ %193, %concat_index_from_operand_id036 ], [ %203, %concat_index_from_operand_id137 ], [ %213, %concat_index_from_operand_id238 ], [ %223, %concat_index_from_operand_id339 ], [ %233, %concat_index_from_operand_id440 ]
  %239 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  store float %238, ptr %239, align 4
  br label %concatenate_297.in_bounds-after
}

define void @fusion_365(ptr noalias align 16 dereferenceable(1048576) %arg0, ptr noalias align 128 dereferenceable(11534336) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1048576) %arg3, ptr noalias align 128 dereferenceable(7340032) %arg4, ptr noalias align 128 dereferenceable(11534336) %arg5, ptr noalias align 128 dereferenceable(11534336) %arg6, ptr noalias align 16 dereferenceable(1048576) %arg7, ptr noalias align 128 dereferenceable(7340032) %arg8, ptr noalias align 128 dereferenceable(11534336) %arg9, ptr noalias align 128 dereferenceable(11796480) %arg10, ptr noalias align 16 dereferenceable(1048576) %arg11, ptr noalias align 128 dereferenceable(7340032) %arg12, ptr noalias align 128 dereferenceable(11534336) %arg13, ptr noalias align 128 dereferenceable(11796480) %arg14, ptr noalias align 16 dereferenceable(1048576) %arg15, ptr noalias align 128 dereferenceable(7340032) %arg16, ptr noalias align 128 dereferenceable(11534336) %arg17, ptr noalias align 128 dereferenceable(11796480) %arg18, ptr noalias align 16 dereferenceable(1048576) %arg19, ptr noalias align 128 dereferenceable(11534336) %arg20, ptr noalias align 16 dereferenceable(1048576) %arg21, ptr noalias align 128 dereferenceable(9961472) %arg22, ptr noalias align 16 dereferenceable(1048576) %arg23, ptr noalias align 128 dereferenceable(9961472) %arg24, ptr noalias align 16 dereferenceable(1048576) %arg25, ptr noalias align 128 dereferenceable(9961472) %arg26, ptr noalias align 16 dereferenceable(1048576) %arg27, ptr noalias align 128 dereferenceable(11534336) %arg28, ptr noalias align 16 dereferenceable(1048576) %arg29, ptr noalias align 128 dereferenceable(9961472) %arg30, ptr noalias align 16 dereferenceable(1048576) %arg31, ptr noalias align 128 dereferenceable(9961472) %arg32, ptr noalias align 16 dereferenceable(1048576) %arg33, ptr noalias align 128 dereferenceable(11534336) %arg34, ptr noalias align 128 dereferenceable(1048576) %arg35, ptr noalias align 128 dereferenceable(1048576) %arg36, ptr noalias align 128 dereferenceable(1048576) %arg37, ptr noalias align 128 dereferenceable(1048576) %arg38, ptr noalias align 128 dereferenceable(1048576) %arg39, ptr noalias align 128 dereferenceable(1048576) %arg40, ptr noalias align 128 dereferenceable(1048576) %arg41, ptr noalias align 128 dereferenceable(1048576) %arg42, ptr noalias align 128 dereferenceable(1048576) %arg43, ptr noalias align 128 dereferenceable(1048576) %arg44, ptr noalias align 128 dereferenceable(1048576) %arg45, ptr noalias align 128 dereferenceable(1048576) %arg46, ptr noalias align 128 dereferenceable(1048576) %arg47) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 32
  %5 = udiv i32 %linear_index_base, 32
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 32
  %8 = udiv i32 %linear_index1, 32
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 32
  %11 = udiv i32 %linear_index2, 32
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 32
  %14 = udiv i32 %linear_index3, 32
  %15 = icmp ult i32 %linear_index_base, 262144
  br i1 %15, label %fusion_365.in_bounds-true, label %fusion_365.in_bounds-after

fusion_365.in_bounds-after:                       ; preds = %fusion_365.in_bounds-true, %entry
  ret void

fusion_365.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = add i32 %5, 0
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [8192 x [352 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %multiply.38 = fmul float %18, %22
  %subtract.39 = fsub float %17, %multiply.38
  %23 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.39, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = add i32 %5, 0
  %27 = add i32 %4, 0
  %28 = add i32 %26, 0
  %29 = add i32 %27, 0
  %30 = getelementptr inbounds [8192 x [352 x float]], ptr %arg6, i32 0, i32 %28, i32 %29
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %32 = add i32 %26, 0
  %33 = add i32 %27, 0
  %34 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %32, i32 %33
  %35 = load float, ptr %34, align 4, !invariant.load !197
  %add.42 = fadd float %31, %35
  %36 = add i32 %26, 0
  %37 = add i32 %27, 0
  %38 = getelementptr inbounds [8192 x [224 x float]], ptr %arg4, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %add.44 = fadd float %add.42, %39
  %multiply.46 = fmul float %18, %add.44
  %subtract.47 = fsub float %25, %multiply.46
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %23, float %subtract.47, 1
  %41 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = add i32 %5, 0
  %44 = add i32 %4, 0
  %45 = add i32 %43, 0
  %46 = add i32 %44, 0
  %47 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %49 = add i32 %43, 0
  %50 = add i32 %44, 0
  %51 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %49, i32 %50
  %52 = load float, ptr %51, align 4, !invariant.load !197
  %add.50 = fadd float %48, %52
  %53 = add i32 %43, 0
  %54 = add i32 %44, 0
  %55 = getelementptr inbounds [8192 x [224 x float]], ptr %arg8, i32 0, i32 %53, i32 %54
  %56 = load float, ptr %55, align 4, !invariant.load !197
  %add.52 = fadd float %add.50, %56
  %multiply.54 = fmul float %18, %add.52
  %subtract.55 = fsub float %42, %multiply.54
  %57 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.55, 2
  %58 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %60 = add i32 %5, 0
  %61 = add i32 %4, 0
  %62 = add i32 %60, 0
  %63 = add i32 %61, 0
  %64 = getelementptr inbounds [8192 x [360 x float]], ptr %arg14, i32 0, i32 %62, i32 %63
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %66 = add i32 %60, 0
  %67 = add i32 %61, 0
  %68 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %add.58 = fadd float %65, %69
  %70 = add i32 %60, 0
  %71 = add i32 %61, 0
  %72 = getelementptr inbounds [8192 x [224 x float]], ptr %arg12, i32 0, i32 %70, i32 %71
  %73 = load float, ptr %72, align 4, !invariant.load !197
  %add.60 = fadd float %add.58, %73
  %multiply.62 = fmul float %18, %add.60
  %subtract.63 = fsub float %59, %multiply.62
  %74 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %57, float %subtract.63, 3
  %75 = getelementptr inbounds float, ptr %arg15, i32 %linear_index_base
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %77 = add i32 %5, 0
  %78 = add i32 %4, 0
  %79 = add i32 %77, 0
  %80 = add i32 %78, 0
  %81 = getelementptr inbounds [8192 x [360 x float]], ptr %arg18, i32 0, i32 %79, i32 %80
  %82 = load float, ptr %81, align 4, !invariant.load !197
  %83 = add i32 %77, 0
  %84 = add i32 %78, 0
  %85 = getelementptr inbounds [8192 x [352 x float]], ptr %arg17, i32 0, i32 %83, i32 %84
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %add.66 = fadd float %82, %86
  %87 = add i32 %77, 0
  %88 = add i32 %78, 0
  %89 = getelementptr inbounds [8192 x [224 x float]], ptr %arg16, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %add.68 = fadd float %add.66, %90
  %multiply.70 = fmul float %18, %add.68
  %subtract.71 = fsub float %76, %multiply.70
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %74, float %subtract.71, 4
  %92 = getelementptr inbounds float, ptr %arg19, i32 %linear_index_base
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = add i32 %5, 0
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %multiply.73 = fmul float %18, %97
  %subtract.74 = fsub float %93, %multiply.73
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.74, 5
  %99 = getelementptr inbounds float, ptr %arg21, i32 %linear_index_base
  %100 = load float, ptr %99, align 4, !invariant.load !197
  %101 = add i32 %5, 0
  %102 = add i32 %4, 16
  %103 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %multiply.76 = fmul float %18, %104
  %subtract.77 = fsub float %100, %multiply.76
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.77, 6
  %106 = getelementptr inbounds float, ptr %arg23, i32 %linear_index_base
  %107 = load float, ptr %106, align 4, !invariant.load !197
  %108 = add i32 %5, 0
  %109 = add i32 %4, 16
  %110 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !197
  %multiply.79 = fmul float %18, %111
  %subtract.80 = fsub float %107, %multiply.79
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.80, 7
  %113 = getelementptr inbounds float, ptr %arg25, i32 %linear_index_base
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %115 = add i32 %5, 0
  %116 = add i32 %4, 16
  %117 = getelementptr inbounds [8192 x [304 x float]], ptr %arg26, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !197
  %multiply.82 = fmul float %18, %118
  %subtract.83 = fsub float %114, %multiply.82
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.83, 8
  %120 = getelementptr inbounds float, ptr %arg27, i32 %linear_index_base
  %121 = load float, ptr %120, align 4, !invariant.load !197
  %122 = add i32 %5, 0
  %123 = add i32 %4, 0
  %124 = getelementptr inbounds [8192 x [352 x float]], ptr %arg28, i32 0, i32 %122, i32 %123
  %125 = load float, ptr %124, align 4, !invariant.load !197
  %multiply.85 = fmul float %18, %125
  %subtract.86 = fsub float %121, %multiply.85
  %126 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %119, float %subtract.86, 9
  %127 = getelementptr inbounds float, ptr %arg29, i32 %linear_index_base
  %128 = load float, ptr %127, align 4, !invariant.load !197
  %129 = add i32 %5, 0
  %130 = add i32 %4, 16
  %131 = getelementptr inbounds [8192 x [304 x float]], ptr %arg30, i32 0, i32 %129, i32 %130
  %132 = load float, ptr %131, align 4, !invariant.load !197
  %multiply.88 = fmul float %18, %132
  %subtract.89 = fsub float %128, %multiply.88
  %133 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %126, float %subtract.89, 10
  %134 = getelementptr inbounds float, ptr %arg31, i32 %linear_index_base
  %135 = load float, ptr %134, align 4, !invariant.load !197
  %136 = add i32 %5, 0
  %137 = add i32 %4, 16
  %138 = getelementptr inbounds [8192 x [304 x float]], ptr %arg32, i32 0, i32 %136, i32 %137
  %139 = load float, ptr %138, align 4, !invariant.load !197
  %multiply.91 = fmul float %18, %139
  %subtract.92 = fsub float %135, %multiply.91
  %140 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %133, float %subtract.92, 11
  %141 = getelementptr inbounds float, ptr %arg33, i32 %linear_index_base
  %142 = load float, ptr %141, align 4, !invariant.load !197
  %143 = add i32 %5, 0
  %144 = add i32 %4, 0
  %145 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %143, i32 %144
  %146 = load float, ptr %145, align 4, !invariant.load !197
  %multiply.94 = fmul float %18, %146
  %subtract.95 = fsub float %142, %multiply.94
  %147 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %140, float %subtract.95, 12
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 0
  %149 = getelementptr inbounds float, ptr %arg35, i32 %linear_index_base
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 1
  %151 = getelementptr inbounds float, ptr %arg36, i32 %linear_index_base
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 2
  %153 = getelementptr inbounds float, ptr %arg37, i32 %linear_index_base
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 3
  %155 = getelementptr inbounds float, ptr %arg38, i32 %linear_index_base
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 4
  %157 = getelementptr inbounds float, ptr %arg39, i32 %linear_index_base
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 5
  %159 = getelementptr inbounds float, ptr %arg40, i32 %linear_index_base
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 6
  %161 = getelementptr inbounds float, ptr %arg41, i32 %linear_index_base
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 7
  %163 = getelementptr inbounds float, ptr %arg42, i32 %linear_index_base
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 8
  %165 = getelementptr inbounds float, ptr %arg43, i32 %linear_index_base
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 9
  %167 = getelementptr inbounds float, ptr %arg44, i32 %linear_index_base
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 10
  %169 = getelementptr inbounds float, ptr %arg45, i32 %linear_index_base
  store float %168, ptr %169, align 4
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 11
  %171 = getelementptr inbounds float, ptr %arg46, i32 %linear_index_base
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %147, 12
  %173 = getelementptr inbounds float, ptr %arg47, i32 %linear_index_base
  store float %172, ptr %173, align 4
  %174 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %175 = load float, ptr %174, align 4, !invariant.load !197
  %176 = load float, ptr %arg2, align 4, !invariant.load !197
  %177 = add i32 %8, 0
  %178 = add i32 %7, 0
  %179 = getelementptr inbounds [8192 x [352 x float]], ptr %arg1, i32 0, i32 %177, i32 %178
  %180 = load float, ptr %179, align 4, !invariant.load !197
  %multiply.381 = fmul float %176, %180
  %subtract.392 = fsub float %175, %multiply.381
  %181 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.392, 0
  %182 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %183 = load float, ptr %182, align 4, !invariant.load !197
  %184 = add i32 %8, 0
  %185 = add i32 %7, 0
  %186 = add i32 %184, 0
  %187 = add i32 %185, 0
  %188 = getelementptr inbounds [8192 x [352 x float]], ptr %arg6, i32 0, i32 %186, i32 %187
  %189 = load float, ptr %188, align 4, !invariant.load !197
  %190 = add i32 %184, 0
  %191 = add i32 %185, 0
  %192 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %190, i32 %191
  %193 = load float, ptr %192, align 4, !invariant.load !197
  %add.423 = fadd float %189, %193
  %194 = add i32 %184, 0
  %195 = add i32 %185, 0
  %196 = getelementptr inbounds [8192 x [224 x float]], ptr %arg4, i32 0, i32 %194, i32 %195
  %197 = load float, ptr %196, align 4, !invariant.load !197
  %add.444 = fadd float %add.423, %197
  %multiply.465 = fmul float %176, %add.444
  %subtract.476 = fsub float %183, %multiply.465
  %198 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %181, float %subtract.476, 1
  %199 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %200 = load float, ptr %199, align 4, !invariant.load !197
  %201 = add i32 %8, 0
  %202 = add i32 %7, 0
  %203 = add i32 %201, 0
  %204 = add i32 %202, 0
  %205 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %203, i32 %204
  %206 = load float, ptr %205, align 4, !invariant.load !197
  %207 = add i32 %201, 0
  %208 = add i32 %202, 0
  %209 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %207, i32 %208
  %210 = load float, ptr %209, align 4, !invariant.load !197
  %add.507 = fadd float %206, %210
  %211 = add i32 %201, 0
  %212 = add i32 %202, 0
  %213 = getelementptr inbounds [8192 x [224 x float]], ptr %arg8, i32 0, i32 %211, i32 %212
  %214 = load float, ptr %213, align 4, !invariant.load !197
  %add.528 = fadd float %add.507, %214
  %multiply.549 = fmul float %176, %add.528
  %subtract.5510 = fsub float %200, %multiply.549
  %215 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %198, float %subtract.5510, 2
  %216 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %217 = load float, ptr %216, align 4, !invariant.load !197
  %218 = add i32 %8, 0
  %219 = add i32 %7, 0
  %220 = add i32 %218, 0
  %221 = add i32 %219, 0
  %222 = getelementptr inbounds [8192 x [360 x float]], ptr %arg14, i32 0, i32 %220, i32 %221
  %223 = load float, ptr %222, align 4, !invariant.load !197
  %224 = add i32 %218, 0
  %225 = add i32 %219, 0
  %226 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %224, i32 %225
  %227 = load float, ptr %226, align 4, !invariant.load !197
  %add.5811 = fadd float %223, %227
  %228 = add i32 %218, 0
  %229 = add i32 %219, 0
  %230 = getelementptr inbounds [8192 x [224 x float]], ptr %arg12, i32 0, i32 %228, i32 %229
  %231 = load float, ptr %230, align 4, !invariant.load !197
  %add.6012 = fadd float %add.5811, %231
  %multiply.6213 = fmul float %176, %add.6012
  %subtract.6314 = fsub float %217, %multiply.6213
  %232 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %215, float %subtract.6314, 3
  %233 = getelementptr inbounds float, ptr %arg15, i32 %linear_index1
  %234 = load float, ptr %233, align 4, !invariant.load !197
  %235 = add i32 %8, 0
  %236 = add i32 %7, 0
  %237 = add i32 %235, 0
  %238 = add i32 %236, 0
  %239 = getelementptr inbounds [8192 x [360 x float]], ptr %arg18, i32 0, i32 %237, i32 %238
  %240 = load float, ptr %239, align 4, !invariant.load !197
  %241 = add i32 %235, 0
  %242 = add i32 %236, 0
  %243 = getelementptr inbounds [8192 x [352 x float]], ptr %arg17, i32 0, i32 %241, i32 %242
  %244 = load float, ptr %243, align 4, !invariant.load !197
  %add.6615 = fadd float %240, %244
  %245 = add i32 %235, 0
  %246 = add i32 %236, 0
  %247 = getelementptr inbounds [8192 x [224 x float]], ptr %arg16, i32 0, i32 %245, i32 %246
  %248 = load float, ptr %247, align 4, !invariant.load !197
  %add.6816 = fadd float %add.6615, %248
  %multiply.7017 = fmul float %176, %add.6816
  %subtract.7118 = fsub float %234, %multiply.7017
  %249 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %232, float %subtract.7118, 4
  %250 = getelementptr inbounds float, ptr %arg19, i32 %linear_index1
  %251 = load float, ptr %250, align 4, !invariant.load !197
  %252 = add i32 %8, 0
  %253 = add i32 %7, 0
  %254 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %252, i32 %253
  %255 = load float, ptr %254, align 4, !invariant.load !197
  %multiply.7319 = fmul float %176, %255
  %subtract.7420 = fsub float %251, %multiply.7319
  %256 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %249, float %subtract.7420, 5
  %257 = getelementptr inbounds float, ptr %arg21, i32 %linear_index1
  %258 = load float, ptr %257, align 4, !invariant.load !197
  %259 = add i32 %8, 0
  %260 = add i32 %7, 16
  %261 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %259, i32 %260
  %262 = load float, ptr %261, align 4, !invariant.load !197
  %multiply.7621 = fmul float %176, %262
  %subtract.7722 = fsub float %258, %multiply.7621
  %263 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %256, float %subtract.7722, 6
  %264 = getelementptr inbounds float, ptr %arg23, i32 %linear_index1
  %265 = load float, ptr %264, align 4, !invariant.load !197
  %266 = add i32 %8, 0
  %267 = add i32 %7, 16
  %268 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %266, i32 %267
  %269 = load float, ptr %268, align 4, !invariant.load !197
  %multiply.7923 = fmul float %176, %269
  %subtract.8024 = fsub float %265, %multiply.7923
  %270 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %263, float %subtract.8024, 7
  %271 = getelementptr inbounds float, ptr %arg25, i32 %linear_index1
  %272 = load float, ptr %271, align 4, !invariant.load !197
  %273 = add i32 %8, 0
  %274 = add i32 %7, 16
  %275 = getelementptr inbounds [8192 x [304 x float]], ptr %arg26, i32 0, i32 %273, i32 %274
  %276 = load float, ptr %275, align 4, !invariant.load !197
  %multiply.8225 = fmul float %176, %276
  %subtract.8326 = fsub float %272, %multiply.8225
  %277 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %270, float %subtract.8326, 8
  %278 = getelementptr inbounds float, ptr %arg27, i32 %linear_index1
  %279 = load float, ptr %278, align 4, !invariant.load !197
  %280 = add i32 %8, 0
  %281 = add i32 %7, 0
  %282 = getelementptr inbounds [8192 x [352 x float]], ptr %arg28, i32 0, i32 %280, i32 %281
  %283 = load float, ptr %282, align 4, !invariant.load !197
  %multiply.8527 = fmul float %176, %283
  %subtract.8628 = fsub float %279, %multiply.8527
  %284 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %277, float %subtract.8628, 9
  %285 = getelementptr inbounds float, ptr %arg29, i32 %linear_index1
  %286 = load float, ptr %285, align 4, !invariant.load !197
  %287 = add i32 %8, 0
  %288 = add i32 %7, 16
  %289 = getelementptr inbounds [8192 x [304 x float]], ptr %arg30, i32 0, i32 %287, i32 %288
  %290 = load float, ptr %289, align 4, !invariant.load !197
  %multiply.8829 = fmul float %176, %290
  %subtract.8930 = fsub float %286, %multiply.8829
  %291 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %284, float %subtract.8930, 10
  %292 = getelementptr inbounds float, ptr %arg31, i32 %linear_index1
  %293 = load float, ptr %292, align 4, !invariant.load !197
  %294 = add i32 %8, 0
  %295 = add i32 %7, 16
  %296 = getelementptr inbounds [8192 x [304 x float]], ptr %arg32, i32 0, i32 %294, i32 %295
  %297 = load float, ptr %296, align 4, !invariant.load !197
  %multiply.9131 = fmul float %176, %297
  %subtract.9232 = fsub float %293, %multiply.9131
  %298 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %291, float %subtract.9232, 11
  %299 = getelementptr inbounds float, ptr %arg33, i32 %linear_index1
  %300 = load float, ptr %299, align 4, !invariant.load !197
  %301 = add i32 %8, 0
  %302 = add i32 %7, 0
  %303 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %301, i32 %302
  %304 = load float, ptr %303, align 4, !invariant.load !197
  %multiply.9433 = fmul float %176, %304
  %subtract.9534 = fsub float %300, %multiply.9433
  %305 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %298, float %subtract.9534, 12
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 0
  %307 = getelementptr inbounds float, ptr %arg35, i32 %linear_index1
  store float %306, ptr %307, align 4
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 1
  %309 = getelementptr inbounds float, ptr %arg36, i32 %linear_index1
  store float %308, ptr %309, align 4
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 2
  %311 = getelementptr inbounds float, ptr %arg37, i32 %linear_index1
  store float %310, ptr %311, align 4
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 3
  %313 = getelementptr inbounds float, ptr %arg38, i32 %linear_index1
  store float %312, ptr %313, align 4
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 4
  %315 = getelementptr inbounds float, ptr %arg39, i32 %linear_index1
  store float %314, ptr %315, align 4
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 5
  %317 = getelementptr inbounds float, ptr %arg40, i32 %linear_index1
  store float %316, ptr %317, align 4
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 6
  %319 = getelementptr inbounds float, ptr %arg41, i32 %linear_index1
  store float %318, ptr %319, align 4
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 7
  %321 = getelementptr inbounds float, ptr %arg42, i32 %linear_index1
  store float %320, ptr %321, align 4
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 8
  %323 = getelementptr inbounds float, ptr %arg43, i32 %linear_index1
  store float %322, ptr %323, align 4
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 9
  %325 = getelementptr inbounds float, ptr %arg44, i32 %linear_index1
  store float %324, ptr %325, align 4
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 10
  %327 = getelementptr inbounds float, ptr %arg45, i32 %linear_index1
  store float %326, ptr %327, align 4
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 11
  %329 = getelementptr inbounds float, ptr %arg46, i32 %linear_index1
  store float %328, ptr %329, align 4
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 12
  %331 = getelementptr inbounds float, ptr %arg47, i32 %linear_index1
  store float %330, ptr %331, align 4
  %332 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %333 = load float, ptr %332, align 4, !invariant.load !197
  %334 = load float, ptr %arg2, align 4, !invariant.load !197
  %335 = add i32 %11, 0
  %336 = add i32 %10, 0
  %337 = getelementptr inbounds [8192 x [352 x float]], ptr %arg1, i32 0, i32 %335, i32 %336
  %338 = load float, ptr %337, align 4, !invariant.load !197
  %multiply.3835 = fmul float %334, %338
  %subtract.3936 = fsub float %333, %multiply.3835
  %339 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.3936, 0
  %340 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %341 = load float, ptr %340, align 4, !invariant.load !197
  %342 = add i32 %11, 0
  %343 = add i32 %10, 0
  %344 = add i32 %342, 0
  %345 = add i32 %343, 0
  %346 = getelementptr inbounds [8192 x [352 x float]], ptr %arg6, i32 0, i32 %344, i32 %345
  %347 = load float, ptr %346, align 4, !invariant.load !197
  %348 = add i32 %342, 0
  %349 = add i32 %343, 0
  %350 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %348, i32 %349
  %351 = load float, ptr %350, align 4, !invariant.load !197
  %add.4237 = fadd float %347, %351
  %352 = add i32 %342, 0
  %353 = add i32 %343, 0
  %354 = getelementptr inbounds [8192 x [224 x float]], ptr %arg4, i32 0, i32 %352, i32 %353
  %355 = load float, ptr %354, align 4, !invariant.load !197
  %add.4438 = fadd float %add.4237, %355
  %multiply.4639 = fmul float %334, %add.4438
  %subtract.4740 = fsub float %341, %multiply.4639
  %356 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %339, float %subtract.4740, 1
  %357 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %358 = load float, ptr %357, align 4, !invariant.load !197
  %359 = add i32 %11, 0
  %360 = add i32 %10, 0
  %361 = add i32 %359, 0
  %362 = add i32 %360, 0
  %363 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %361, i32 %362
  %364 = load float, ptr %363, align 4, !invariant.load !197
  %365 = add i32 %359, 0
  %366 = add i32 %360, 0
  %367 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %365, i32 %366
  %368 = load float, ptr %367, align 4, !invariant.load !197
  %add.5041 = fadd float %364, %368
  %369 = add i32 %359, 0
  %370 = add i32 %360, 0
  %371 = getelementptr inbounds [8192 x [224 x float]], ptr %arg8, i32 0, i32 %369, i32 %370
  %372 = load float, ptr %371, align 4, !invariant.load !197
  %add.5242 = fadd float %add.5041, %372
  %multiply.5443 = fmul float %334, %add.5242
  %subtract.5544 = fsub float %358, %multiply.5443
  %373 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %356, float %subtract.5544, 2
  %374 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %375 = load float, ptr %374, align 4, !invariant.load !197
  %376 = add i32 %11, 0
  %377 = add i32 %10, 0
  %378 = add i32 %376, 0
  %379 = add i32 %377, 0
  %380 = getelementptr inbounds [8192 x [360 x float]], ptr %arg14, i32 0, i32 %378, i32 %379
  %381 = load float, ptr %380, align 4, !invariant.load !197
  %382 = add i32 %376, 0
  %383 = add i32 %377, 0
  %384 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %382, i32 %383
  %385 = load float, ptr %384, align 4, !invariant.load !197
  %add.5845 = fadd float %381, %385
  %386 = add i32 %376, 0
  %387 = add i32 %377, 0
  %388 = getelementptr inbounds [8192 x [224 x float]], ptr %arg12, i32 0, i32 %386, i32 %387
  %389 = load float, ptr %388, align 4, !invariant.load !197
  %add.6046 = fadd float %add.5845, %389
  %multiply.6247 = fmul float %334, %add.6046
  %subtract.6348 = fsub float %375, %multiply.6247
  %390 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %373, float %subtract.6348, 3
  %391 = getelementptr inbounds float, ptr %arg15, i32 %linear_index2
  %392 = load float, ptr %391, align 4, !invariant.load !197
  %393 = add i32 %11, 0
  %394 = add i32 %10, 0
  %395 = add i32 %393, 0
  %396 = add i32 %394, 0
  %397 = getelementptr inbounds [8192 x [360 x float]], ptr %arg18, i32 0, i32 %395, i32 %396
  %398 = load float, ptr %397, align 4, !invariant.load !197
  %399 = add i32 %393, 0
  %400 = add i32 %394, 0
  %401 = getelementptr inbounds [8192 x [352 x float]], ptr %arg17, i32 0, i32 %399, i32 %400
  %402 = load float, ptr %401, align 4, !invariant.load !197
  %add.6649 = fadd float %398, %402
  %403 = add i32 %393, 0
  %404 = add i32 %394, 0
  %405 = getelementptr inbounds [8192 x [224 x float]], ptr %arg16, i32 0, i32 %403, i32 %404
  %406 = load float, ptr %405, align 4, !invariant.load !197
  %add.6850 = fadd float %add.6649, %406
  %multiply.7051 = fmul float %334, %add.6850
  %subtract.7152 = fsub float %392, %multiply.7051
  %407 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %390, float %subtract.7152, 4
  %408 = getelementptr inbounds float, ptr %arg19, i32 %linear_index2
  %409 = load float, ptr %408, align 4, !invariant.load !197
  %410 = add i32 %11, 0
  %411 = add i32 %10, 0
  %412 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %410, i32 %411
  %413 = load float, ptr %412, align 4, !invariant.load !197
  %multiply.7353 = fmul float %334, %413
  %subtract.7454 = fsub float %409, %multiply.7353
  %414 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %407, float %subtract.7454, 5
  %415 = getelementptr inbounds float, ptr %arg21, i32 %linear_index2
  %416 = load float, ptr %415, align 4, !invariant.load !197
  %417 = add i32 %11, 0
  %418 = add i32 %10, 16
  %419 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %417, i32 %418
  %420 = load float, ptr %419, align 4, !invariant.load !197
  %multiply.7655 = fmul float %334, %420
  %subtract.7756 = fsub float %416, %multiply.7655
  %421 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %414, float %subtract.7756, 6
  %422 = getelementptr inbounds float, ptr %arg23, i32 %linear_index2
  %423 = load float, ptr %422, align 4, !invariant.load !197
  %424 = add i32 %11, 0
  %425 = add i32 %10, 16
  %426 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %424, i32 %425
  %427 = load float, ptr %426, align 4, !invariant.load !197
  %multiply.7957 = fmul float %334, %427
  %subtract.8058 = fsub float %423, %multiply.7957
  %428 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %421, float %subtract.8058, 7
  %429 = getelementptr inbounds float, ptr %arg25, i32 %linear_index2
  %430 = load float, ptr %429, align 4, !invariant.load !197
  %431 = add i32 %11, 0
  %432 = add i32 %10, 16
  %433 = getelementptr inbounds [8192 x [304 x float]], ptr %arg26, i32 0, i32 %431, i32 %432
  %434 = load float, ptr %433, align 4, !invariant.load !197
  %multiply.8259 = fmul float %334, %434
  %subtract.8360 = fsub float %430, %multiply.8259
  %435 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %428, float %subtract.8360, 8
  %436 = getelementptr inbounds float, ptr %arg27, i32 %linear_index2
  %437 = load float, ptr %436, align 4, !invariant.load !197
  %438 = add i32 %11, 0
  %439 = add i32 %10, 0
  %440 = getelementptr inbounds [8192 x [352 x float]], ptr %arg28, i32 0, i32 %438, i32 %439
  %441 = load float, ptr %440, align 4, !invariant.load !197
  %multiply.8561 = fmul float %334, %441
  %subtract.8662 = fsub float %437, %multiply.8561
  %442 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %435, float %subtract.8662, 9
  %443 = getelementptr inbounds float, ptr %arg29, i32 %linear_index2
  %444 = load float, ptr %443, align 4, !invariant.load !197
  %445 = add i32 %11, 0
  %446 = add i32 %10, 16
  %447 = getelementptr inbounds [8192 x [304 x float]], ptr %arg30, i32 0, i32 %445, i32 %446
  %448 = load float, ptr %447, align 4, !invariant.load !197
  %multiply.8863 = fmul float %334, %448
  %subtract.8964 = fsub float %444, %multiply.8863
  %449 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %442, float %subtract.8964, 10
  %450 = getelementptr inbounds float, ptr %arg31, i32 %linear_index2
  %451 = load float, ptr %450, align 4, !invariant.load !197
  %452 = add i32 %11, 0
  %453 = add i32 %10, 16
  %454 = getelementptr inbounds [8192 x [304 x float]], ptr %arg32, i32 0, i32 %452, i32 %453
  %455 = load float, ptr %454, align 4, !invariant.load !197
  %multiply.9165 = fmul float %334, %455
  %subtract.9266 = fsub float %451, %multiply.9165
  %456 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %449, float %subtract.9266, 11
  %457 = getelementptr inbounds float, ptr %arg33, i32 %linear_index2
  %458 = load float, ptr %457, align 4, !invariant.load !197
  %459 = add i32 %11, 0
  %460 = add i32 %10, 0
  %461 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %459, i32 %460
  %462 = load float, ptr %461, align 4, !invariant.load !197
  %multiply.9467 = fmul float %334, %462
  %subtract.9568 = fsub float %458, %multiply.9467
  %463 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %456, float %subtract.9568, 12
  %464 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 0
  %465 = getelementptr inbounds float, ptr %arg35, i32 %linear_index2
  store float %464, ptr %465, align 4
  %466 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 1
  %467 = getelementptr inbounds float, ptr %arg36, i32 %linear_index2
  store float %466, ptr %467, align 4
  %468 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 2
  %469 = getelementptr inbounds float, ptr %arg37, i32 %linear_index2
  store float %468, ptr %469, align 4
  %470 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 3
  %471 = getelementptr inbounds float, ptr %arg38, i32 %linear_index2
  store float %470, ptr %471, align 4
  %472 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 4
  %473 = getelementptr inbounds float, ptr %arg39, i32 %linear_index2
  store float %472, ptr %473, align 4
  %474 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 5
  %475 = getelementptr inbounds float, ptr %arg40, i32 %linear_index2
  store float %474, ptr %475, align 4
  %476 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 6
  %477 = getelementptr inbounds float, ptr %arg41, i32 %linear_index2
  store float %476, ptr %477, align 4
  %478 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 7
  %479 = getelementptr inbounds float, ptr %arg42, i32 %linear_index2
  store float %478, ptr %479, align 4
  %480 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 8
  %481 = getelementptr inbounds float, ptr %arg43, i32 %linear_index2
  store float %480, ptr %481, align 4
  %482 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 9
  %483 = getelementptr inbounds float, ptr %arg44, i32 %linear_index2
  store float %482, ptr %483, align 4
  %484 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 10
  %485 = getelementptr inbounds float, ptr %arg45, i32 %linear_index2
  store float %484, ptr %485, align 4
  %486 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 11
  %487 = getelementptr inbounds float, ptr %arg46, i32 %linear_index2
  store float %486, ptr %487, align 4
  %488 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %463, 12
  %489 = getelementptr inbounds float, ptr %arg47, i32 %linear_index2
  store float %488, ptr %489, align 4
  %490 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %491 = load float, ptr %490, align 4, !invariant.load !197
  %492 = load float, ptr %arg2, align 4, !invariant.load !197
  %493 = add i32 %14, 0
  %494 = add i32 %13, 0
  %495 = getelementptr inbounds [8192 x [352 x float]], ptr %arg1, i32 0, i32 %493, i32 %494
  %496 = load float, ptr %495, align 4, !invariant.load !197
  %multiply.3869 = fmul float %492, %496
  %subtract.3970 = fsub float %491, %multiply.3869
  %497 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.3970, 0
  %498 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %499 = load float, ptr %498, align 4, !invariant.load !197
  %500 = add i32 %14, 0
  %501 = add i32 %13, 0
  %502 = add i32 %500, 0
  %503 = add i32 %501, 0
  %504 = getelementptr inbounds [8192 x [352 x float]], ptr %arg6, i32 0, i32 %502, i32 %503
  %505 = load float, ptr %504, align 4, !invariant.load !197
  %506 = add i32 %500, 0
  %507 = add i32 %501, 0
  %508 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %506, i32 %507
  %509 = load float, ptr %508, align 4, !invariant.load !197
  %add.4271 = fadd float %505, %509
  %510 = add i32 %500, 0
  %511 = add i32 %501, 0
  %512 = getelementptr inbounds [8192 x [224 x float]], ptr %arg4, i32 0, i32 %510, i32 %511
  %513 = load float, ptr %512, align 4, !invariant.load !197
  %add.4472 = fadd float %add.4271, %513
  %multiply.4673 = fmul float %492, %add.4472
  %subtract.4774 = fsub float %499, %multiply.4673
  %514 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %497, float %subtract.4774, 1
  %515 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %516 = load float, ptr %515, align 4, !invariant.load !197
  %517 = add i32 %14, 0
  %518 = add i32 %13, 0
  %519 = add i32 %517, 0
  %520 = add i32 %518, 0
  %521 = getelementptr inbounds [8192 x [360 x float]], ptr %arg10, i32 0, i32 %519, i32 %520
  %522 = load float, ptr %521, align 4, !invariant.load !197
  %523 = add i32 %517, 0
  %524 = add i32 %518, 0
  %525 = getelementptr inbounds [8192 x [352 x float]], ptr %arg9, i32 0, i32 %523, i32 %524
  %526 = load float, ptr %525, align 4, !invariant.load !197
  %add.5075 = fadd float %522, %526
  %527 = add i32 %517, 0
  %528 = add i32 %518, 0
  %529 = getelementptr inbounds [8192 x [224 x float]], ptr %arg8, i32 0, i32 %527, i32 %528
  %530 = load float, ptr %529, align 4, !invariant.load !197
  %add.5276 = fadd float %add.5075, %530
  %multiply.5477 = fmul float %492, %add.5276
  %subtract.5578 = fsub float %516, %multiply.5477
  %531 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %514, float %subtract.5578, 2
  %532 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %533 = load float, ptr %532, align 4, !invariant.load !197
  %534 = add i32 %14, 0
  %535 = add i32 %13, 0
  %536 = add i32 %534, 0
  %537 = add i32 %535, 0
  %538 = getelementptr inbounds [8192 x [360 x float]], ptr %arg14, i32 0, i32 %536, i32 %537
  %539 = load float, ptr %538, align 4, !invariant.load !197
  %540 = add i32 %534, 0
  %541 = add i32 %535, 0
  %542 = getelementptr inbounds [8192 x [352 x float]], ptr %arg13, i32 0, i32 %540, i32 %541
  %543 = load float, ptr %542, align 4, !invariant.load !197
  %add.5879 = fadd float %539, %543
  %544 = add i32 %534, 0
  %545 = add i32 %535, 0
  %546 = getelementptr inbounds [8192 x [224 x float]], ptr %arg12, i32 0, i32 %544, i32 %545
  %547 = load float, ptr %546, align 4, !invariant.load !197
  %add.6080 = fadd float %add.5879, %547
  %multiply.6281 = fmul float %492, %add.6080
  %subtract.6382 = fsub float %533, %multiply.6281
  %548 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %531, float %subtract.6382, 3
  %549 = getelementptr inbounds float, ptr %arg15, i32 %linear_index3
  %550 = load float, ptr %549, align 4, !invariant.load !197
  %551 = add i32 %14, 0
  %552 = add i32 %13, 0
  %553 = add i32 %551, 0
  %554 = add i32 %552, 0
  %555 = getelementptr inbounds [8192 x [360 x float]], ptr %arg18, i32 0, i32 %553, i32 %554
  %556 = load float, ptr %555, align 4, !invariant.load !197
  %557 = add i32 %551, 0
  %558 = add i32 %552, 0
  %559 = getelementptr inbounds [8192 x [352 x float]], ptr %arg17, i32 0, i32 %557, i32 %558
  %560 = load float, ptr %559, align 4, !invariant.load !197
  %add.6683 = fadd float %556, %560
  %561 = add i32 %551, 0
  %562 = add i32 %552, 0
  %563 = getelementptr inbounds [8192 x [224 x float]], ptr %arg16, i32 0, i32 %561, i32 %562
  %564 = load float, ptr %563, align 4, !invariant.load !197
  %add.6884 = fadd float %add.6683, %564
  %multiply.7085 = fmul float %492, %add.6884
  %subtract.7186 = fsub float %550, %multiply.7085
  %565 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %548, float %subtract.7186, 4
  %566 = getelementptr inbounds float, ptr %arg19, i32 %linear_index3
  %567 = load float, ptr %566, align 4, !invariant.load !197
  %568 = add i32 %14, 0
  %569 = add i32 %13, 0
  %570 = getelementptr inbounds [8192 x [352 x float]], ptr %arg20, i32 0, i32 %568, i32 %569
  %571 = load float, ptr %570, align 4, !invariant.load !197
  %multiply.7387 = fmul float %492, %571
  %subtract.7488 = fsub float %567, %multiply.7387
  %572 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %565, float %subtract.7488, 5
  %573 = getelementptr inbounds float, ptr %arg21, i32 %linear_index3
  %574 = load float, ptr %573, align 4, !invariant.load !197
  %575 = add i32 %14, 0
  %576 = add i32 %13, 16
  %577 = getelementptr inbounds [8192 x [304 x float]], ptr %arg22, i32 0, i32 %575, i32 %576
  %578 = load float, ptr %577, align 4, !invariant.load !197
  %multiply.7689 = fmul float %492, %578
  %subtract.7790 = fsub float %574, %multiply.7689
  %579 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %572, float %subtract.7790, 6
  %580 = getelementptr inbounds float, ptr %arg23, i32 %linear_index3
  %581 = load float, ptr %580, align 4, !invariant.load !197
  %582 = add i32 %14, 0
  %583 = add i32 %13, 16
  %584 = getelementptr inbounds [8192 x [304 x float]], ptr %arg24, i32 0, i32 %582, i32 %583
  %585 = load float, ptr %584, align 4, !invariant.load !197
  %multiply.7991 = fmul float %492, %585
  %subtract.8092 = fsub float %581, %multiply.7991
  %586 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %579, float %subtract.8092, 7
  %587 = getelementptr inbounds float, ptr %arg25, i32 %linear_index3
  %588 = load float, ptr %587, align 4, !invariant.load !197
  %589 = add i32 %14, 0
  %590 = add i32 %13, 16
  %591 = getelementptr inbounds [8192 x [304 x float]], ptr %arg26, i32 0, i32 %589, i32 %590
  %592 = load float, ptr %591, align 4, !invariant.load !197
  %multiply.8293 = fmul float %492, %592
  %subtract.8394 = fsub float %588, %multiply.8293
  %593 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %586, float %subtract.8394, 8
  %594 = getelementptr inbounds float, ptr %arg27, i32 %linear_index3
  %595 = load float, ptr %594, align 4, !invariant.load !197
  %596 = add i32 %14, 0
  %597 = add i32 %13, 0
  %598 = getelementptr inbounds [8192 x [352 x float]], ptr %arg28, i32 0, i32 %596, i32 %597
  %599 = load float, ptr %598, align 4, !invariant.load !197
  %multiply.8595 = fmul float %492, %599
  %subtract.8696 = fsub float %595, %multiply.8595
  %600 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %593, float %subtract.8696, 9
  %601 = getelementptr inbounds float, ptr %arg29, i32 %linear_index3
  %602 = load float, ptr %601, align 4, !invariant.load !197
  %603 = add i32 %14, 0
  %604 = add i32 %13, 16
  %605 = getelementptr inbounds [8192 x [304 x float]], ptr %arg30, i32 0, i32 %603, i32 %604
  %606 = load float, ptr %605, align 4, !invariant.load !197
  %multiply.8897 = fmul float %492, %606
  %subtract.8998 = fsub float %602, %multiply.8897
  %607 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %600, float %subtract.8998, 10
  %608 = getelementptr inbounds float, ptr %arg31, i32 %linear_index3
  %609 = load float, ptr %608, align 4, !invariant.load !197
  %610 = add i32 %14, 0
  %611 = add i32 %13, 16
  %612 = getelementptr inbounds [8192 x [304 x float]], ptr %arg32, i32 0, i32 %610, i32 %611
  %613 = load float, ptr %612, align 4, !invariant.load !197
  %multiply.9199 = fmul float %492, %613
  %subtract.92100 = fsub float %609, %multiply.9199
  %614 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %607, float %subtract.92100, 11
  %615 = getelementptr inbounds float, ptr %arg33, i32 %linear_index3
  %616 = load float, ptr %615, align 4, !invariant.load !197
  %617 = add i32 %14, 0
  %618 = add i32 %13, 0
  %619 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %617, i32 %618
  %620 = load float, ptr %619, align 4, !invariant.load !197
  %multiply.94101 = fmul float %492, %620
  %subtract.95102 = fsub float %616, %multiply.94101
  %621 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %614, float %subtract.95102, 12
  %622 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 0
  %623 = getelementptr inbounds float, ptr %arg35, i32 %linear_index3
  store float %622, ptr %623, align 4
  %624 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 1
  %625 = getelementptr inbounds float, ptr %arg36, i32 %linear_index3
  store float %624, ptr %625, align 4
  %626 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 2
  %627 = getelementptr inbounds float, ptr %arg37, i32 %linear_index3
  store float %626, ptr %627, align 4
  %628 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 3
  %629 = getelementptr inbounds float, ptr %arg38, i32 %linear_index3
  store float %628, ptr %629, align 4
  %630 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 4
  %631 = getelementptr inbounds float, ptr %arg39, i32 %linear_index3
  store float %630, ptr %631, align 4
  %632 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 5
  %633 = getelementptr inbounds float, ptr %arg40, i32 %linear_index3
  store float %632, ptr %633, align 4
  %634 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 6
  %635 = getelementptr inbounds float, ptr %arg41, i32 %linear_index3
  store float %634, ptr %635, align 4
  %636 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 7
  %637 = getelementptr inbounds float, ptr %arg42, i32 %linear_index3
  store float %636, ptr %637, align 4
  %638 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 8
  %639 = getelementptr inbounds float, ptr %arg43, i32 %linear_index3
  store float %638, ptr %639, align 4
  %640 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 9
  %641 = getelementptr inbounds float, ptr %arg44, i32 %linear_index3
  store float %640, ptr %641, align 4
  %642 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 10
  %643 = getelementptr inbounds float, ptr %arg45, i32 %linear_index3
  store float %642, ptr %643, align 4
  %644 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 11
  %645 = getelementptr inbounds float, ptr %arg46, i32 %linear_index3
  store float %644, ptr %645, align 4
  %646 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, 12
  %647 = getelementptr inbounds float, ptr %arg47, i32 %linear_index3
  store float %646, ptr %647, align 4
  br label %fusion_365.in_bounds-after
}

define void @fusion_137(ptr noalias align 128 dereferenceable(14680064) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @35, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_16_constant_9, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !343

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !344

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_10__3(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache61, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_10__3(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_16_constant_3 = load float, ptr @34, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_16_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 192
  %Arg_0.1 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %94, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_16_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_10__3(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_16_constant_37 = load float, ptr @34, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_16_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 192
  %Arg_0.19 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %109, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_16_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_16_constant_316 = load float, ptr @34, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_16_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 192
  %Arg_0.118 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %144, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_16_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_10__3(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_16_constant_323 = load float, ptr @34, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_16_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 192
  %Arg_0.125 = getelementptr inbounds [8192 x [448 x float]], ptr %arg0, i32 0, i32 %159, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_16_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_10__3(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_86(ptr noalias align 128 dereferenceable(10485760) %arg0, ptr noalias align 128 dereferenceable(14680064) %arg1, ptr noalias align 128 dereferenceable(14942208) %arg2, ptr noalias align 128 dereferenceable(6291456) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !345
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 393216
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 192
  %5 = udiv i32 %linear_index_base, 192
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 192
  %8 = udiv i32 %linear_index1, 192
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 192
  %11 = udiv i32 %linear_index2, 192
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 192
  %14 = udiv i32 %linear_index3, 192
  %15 = icmp ult i32 %linear_index_base, 1572864
  br i1 %15, label %fusion_86.in_bounds-true, label %fusion_86.in_bounds-after

fusion_86.in_bounds-after:                        ; preds = %fusion_86.in_bounds-true, %entry
  ret void

fusion_86.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [456 x float]], ptr %arg2, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = add i32 %5, 0
  %21 = add i32 %4, 0
  %22 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %20, i32 %21
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %add.6 = fadd float %19, %23
  %24 = add i32 %5, 0
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %add.8 = fadd float %add.6, %27
  %28 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %add.8, ptr %28, align 4
  %29 = add i32 %8, 0
  %30 = add i32 %7, 0
  %31 = getelementptr inbounds [8192 x [456 x float]], ptr %arg2, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = add i32 %8, 0
  %34 = add i32 %7, 0
  %35 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %33, i32 %34
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %add.61 = fadd float %32, %36
  %37 = add i32 %8, 0
  %38 = add i32 %7, 0
  %39 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %37, i32 %38
  %40 = load float, ptr %39, align 4, !invariant.load !197
  %add.82 = fadd float %add.61, %40
  %41 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %add.82, ptr %41, align 4
  %42 = add i32 %11, 0
  %43 = add i32 %10, 0
  %44 = getelementptr inbounds [8192 x [456 x float]], ptr %arg2, i32 0, i32 %42, i32 %43
  %45 = load float, ptr %44, align 4, !invariant.load !197
  %46 = add i32 %11, 0
  %47 = add i32 %10, 0
  %48 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %46, i32 %47
  %49 = load float, ptr %48, align 4, !invariant.load !197
  %add.63 = fadd float %45, %49
  %50 = add i32 %11, 0
  %51 = add i32 %10, 0
  %52 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %50, i32 %51
  %53 = load float, ptr %52, align 4, !invariant.load !197
  %add.84 = fadd float %add.63, %53
  %54 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %add.84, ptr %54, align 4
  %55 = add i32 %14, 0
  %56 = add i32 %13, 0
  %57 = getelementptr inbounds [8192 x [456 x float]], ptr %arg2, i32 0, i32 %55, i32 %56
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %14, 0
  %60 = add i32 %13, 0
  %61 = getelementptr inbounds [8192 x [448 x float]], ptr %arg1, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %add.65 = fadd float %58, %62
  %63 = add i32 %14, 0
  %64 = add i32 %13, 0
  %65 = getelementptr inbounds [8192 x [320 x float]], ptr %arg0, i32 0, i32 %63, i32 %64
  %66 = load float, ptr %65, align 4, !invariant.load !197
  %add.86 = fadd float %add.65, %66
  %67 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %add.86, ptr %67, align 4
  br label %fusion_86.in_bounds-after
}

define void @fusion_112(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 128 dereferenceable(12845056) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(2097152) %arg3, ptr noalias align 128 dereferenceable(10485760) %arg4, ptr noalias align 128 dereferenceable(14680064) %arg5, ptr noalias align 16 dereferenceable(2097152) %arg6, ptr noalias align 128 dereferenceable(11534336) %arg7, ptr noalias align 16 dereferenceable(2097152) %arg8, ptr noalias align 128 dereferenceable(7340032) %arg9, ptr noalias align 128 dereferenceable(11534336) %arg10, ptr noalias align 128 dereferenceable(11534336) %arg11, ptr noalias align 16 dereferenceable(2097152) %arg12, ptr noalias align 128 dereferenceable(7340032) %arg13, ptr noalias align 128 dereferenceable(11534336) %arg14, ptr noalias align 128 dereferenceable(11796480) %arg15, ptr noalias align 16 dereferenceable(2097152) %arg16, ptr noalias align 128 dereferenceable(10485760) %arg17, ptr noalias align 128 dereferenceable(14680064) %arg18, ptr noalias align 128 dereferenceable(14680064) %arg19, ptr noalias align 16 dereferenceable(2097152) %arg20, ptr noalias align 128 dereferenceable(7340032) %arg21, ptr noalias align 128 dereferenceable(11534336) %arg22, ptr noalias align 128 dereferenceable(11796480) %arg23, ptr noalias align 16 dereferenceable(2097152) %arg24, ptr noalias align 128 dereferenceable(7340032) %arg25, ptr noalias align 128 dereferenceable(11534336) %arg26, ptr noalias align 128 dereferenceable(11796480) %arg27, ptr noalias align 16 dereferenceable(2097152) %arg28, ptr noalias align 128 dereferenceable(6291456) %arg29, ptr noalias align 16 dereferenceable(2097152) %arg30, ptr noalias align 128 dereferenceable(14680064) %arg31, ptr noalias align 128 dereferenceable(14680064) %arg32, ptr noalias align 16 dereferenceable(2097152) %arg33, ptr noalias align 128 dereferenceable(11534336) %arg34, ptr noalias align 16 dereferenceable(2097152) %arg35, ptr noalias align 128 dereferenceable(11534336) %arg36, ptr noalias align 16 dereferenceable(2097152) %arg37, ptr noalias align 128 dereferenceable(11534336) %arg38, ptr noalias align 128 dereferenceable(2097152) %arg39, ptr noalias align 128 dereferenceable(2097152) %arg40, ptr noalias align 128 dereferenceable(2097152) %arg41, ptr noalias align 128 dereferenceable(2097152) %arg42, ptr noalias align 128 dereferenceable(2097152) %arg43, ptr noalias align 128 dereferenceable(2097152) %arg44, ptr noalias align 128 dereferenceable(2097152) %arg45, ptr noalias align 128 dereferenceable(2097152) %arg46, ptr noalias align 128 dereferenceable(2097152) %arg47, ptr noalias align 128 dereferenceable(2097152) %arg48, ptr noalias align 128 dereferenceable(2097152) %arg49, ptr noalias align 128 dereferenceable(2097152) %arg50, ptr noalias align 128 dereferenceable(2097152) %arg51) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !193
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 131072
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 64
  %5 = udiv i32 %linear_index_base, 64
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 64
  %8 = udiv i32 %linear_index1, 64
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 64
  %11 = udiv i32 %linear_index2, 64
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 64
  %14 = udiv i32 %linear_index3, 64
  %15 = icmp ult i32 %linear_index_base, 524288
  br i1 %15, label %fusion_112.in_bounds-true, label %fusion_112.in_bounds-after

fusion_112.in_bounds-after:                       ; preds = %fusion_112.in_bounds-true, %entry
  ret void

fusion_112.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = add i32 %5, 0
  %20 = add i32 %4, 320
  %21 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %multiply.42 = fmul float %18, %22
  %subtract.43 = fsub float %17, %multiply.42
  %23 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.43, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = add i32 %5, 0
  %27 = add i32 %4, 0
  %28 = add i32 %26, 0
  %29 = add i32 %27, 0
  %30 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %28, i32 %29
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %32 = add i32 %26, 0
  %33 = add i32 %27, 0
  %34 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %32, i32 %33
  %35 = load float, ptr %34, align 4, !invariant.load !197
  %add.46 = fadd float %31, %35
  %36 = add i32 %26, 0
  %37 = add i32 %27, 0
  %38 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %add.48 = fadd float %add.46, %39
  %multiply.50 = fmul float %18, %add.48
  %subtract.51 = fsub float %25, %multiply.50
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %23, float %subtract.51, 1
  %41 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = add i32 %5, 0
  %44 = add i32 %4, 32
  %45 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %multiply.53 = fmul float %18, %46
  %subtract.54 = fsub float %42, %multiply.53
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.54, 2
  %48 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %49 = load float, ptr %48, align 4, !invariant.load !197
  %50 = add i32 %5, 0
  %51 = add i32 %4, 32
  %52 = add i32 %50, 0
  %53 = add i32 %51, 0
  %54 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %56 = add i32 %50, 0
  %57 = add i32 %51, 0
  %58 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %56, i32 %57
  %59 = load float, ptr %58, align 4, !invariant.load !197
  %add.57 = fadd float %55, %59
  %60 = add i32 %50, 0
  %61 = add i32 %51, 0
  %62 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %60, i32 %61
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %add.59 = fadd float %add.57, %63
  %multiply.61 = fmul float %18, %add.59
  %subtract.62 = fsub float %49, %multiply.61
  %64 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.62, 3
  %65 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %66 = load float, ptr %65, align 4, !invariant.load !197
  %67 = add i32 %5, 0
  %68 = add i32 %4, 32
  %69 = add i32 %67, 0
  %70 = add i32 %68, 0
  %71 = getelementptr inbounds [8192 x [360 x float]], ptr %arg15, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = add i32 %67, 0
  %74 = add i32 %68, 0
  %75 = getelementptr inbounds [8192 x [352 x float]], ptr %arg14, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %add.65 = fadd float %72, %76
  %77 = add i32 %67, 0
  %78 = add i32 %68, 0
  %79 = getelementptr inbounds [8192 x [224 x float]], ptr %arg13, i32 0, i32 %77, i32 %78
  %80 = load float, ptr %79, align 4, !invariant.load !197
  %add.67 = fadd float %add.65, %80
  %multiply.69 = fmul float %18, %add.67
  %subtract.70 = fsub float %66, %multiply.69
  %81 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %64, float %subtract.70, 4
  %82 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %84 = add i32 %5, 0
  %85 = add i32 %4, 0
  %86 = add i32 %84, 0
  %87 = add i32 %85, 0
  %88 = getelementptr inbounds [8192 x [448 x float]], ptr %arg19, i32 0, i32 %86, i32 %87
  %89 = load float, ptr %88, align 4, !invariant.load !197
  %90 = add i32 %84, 0
  %91 = add i32 %85, 0
  %92 = getelementptr inbounds [8192 x [448 x float]], ptr %arg18, i32 0, i32 %90, i32 %91
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %add.73 = fadd float %89, %93
  %94 = add i32 %84, 0
  %95 = add i32 %85, 0
  %96 = getelementptr inbounds [8192 x [320 x float]], ptr %arg17, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %add.75 = fadd float %add.73, %97
  %multiply.77 = fmul float %18, %add.75
  %subtract.78 = fsub float %83, %multiply.77
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %81, float %subtract.78, 5
  %99 = getelementptr inbounds float, ptr %arg20, i32 %linear_index_base
  %100 = load float, ptr %99, align 4, !invariant.load !197
  %101 = add i32 %5, 0
  %102 = add i32 %4, 32
  %103 = add i32 %101, 0
  %104 = add i32 %102, 0
  %105 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %103, i32 %104
  %106 = load float, ptr %105, align 4, !invariant.load !197
  %107 = add i32 %101, 0
  %108 = add i32 %102, 0
  %109 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %107, i32 %108
  %110 = load float, ptr %109, align 4, !invariant.load !197
  %add.81 = fadd float %106, %110
  %111 = add i32 %101, 0
  %112 = add i32 %102, 0
  %113 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %111, i32 %112
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %add.83 = fadd float %add.81, %114
  %multiply.85 = fmul float %18, %add.83
  %subtract.86 = fsub float %100, %multiply.85
  %115 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.86, 6
  %116 = getelementptr inbounds float, ptr %arg24, i32 %linear_index_base
  %117 = load float, ptr %116, align 4, !invariant.load !197
  %118 = add i32 %5, 0
  %119 = add i32 %4, 32
  %120 = add i32 %118, 0
  %121 = add i32 %119, 0
  %122 = getelementptr inbounds [8192 x [360 x float]], ptr %arg27, i32 0, i32 %120, i32 %121
  %123 = load float, ptr %122, align 4, !invariant.load !197
  %124 = add i32 %118, 0
  %125 = add i32 %119, 0
  %126 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %124, i32 %125
  %127 = load float, ptr %126, align 4, !invariant.load !197
  %add.89 = fadd float %123, %127
  %128 = add i32 %118, 0
  %129 = add i32 %119, 0
  %130 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %128, i32 %129
  %131 = load float, ptr %130, align 4, !invariant.load !197
  %add.91 = fadd float %add.89, %131
  %multiply.93 = fmul float %18, %add.91
  %subtract.94 = fsub float %117, %multiply.93
  %132 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %115, float %subtract.94, 7
  %133 = getelementptr inbounds float, ptr %arg28, i32 %linear_index_base
  %134 = load float, ptr %133, align 4, !invariant.load !197
  %135 = add i32 %5, 0
  %136 = add i32 %4, 0
  %137 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %135, i32 %136
  %138 = load float, ptr %137, align 4, !invariant.load !197
  %multiply.96 = fmul float %18, %138
  %subtract.97 = fsub float %134, %multiply.96
  %139 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %132, float %subtract.97, 8
  %140 = getelementptr inbounds float, ptr %arg30, i32 %linear_index_base
  %141 = load float, ptr %140, align 4, !invariant.load !197
  %142 = add i32 %5, 0
  %143 = add i32 %4, 0
  %144 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %142, i32 %143
  %145 = load float, ptr %144, align 4, !invariant.load !197
  %146 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %142, i32 %143
  %147 = load float, ptr %146, align 4, !invariant.load !197
  %add.98 = fadd float %145, %147
  %multiply.100 = fmul float %18, %add.98
  %subtract.101 = fsub float %141, %multiply.100
  %148 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %139, float %subtract.101, 9
  %149 = getelementptr inbounds float, ptr %arg33, i32 %linear_index_base
  %150 = load float, ptr %149, align 4, !invariant.load !197
  %151 = add i32 %5, 0
  %152 = add i32 %4, 32
  %153 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %151, i32 %152
  %154 = load float, ptr %153, align 4, !invariant.load !197
  %multiply.103 = fmul float %18, %154
  %subtract.104 = fsub float %150, %multiply.103
  %155 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %148, float %subtract.104, 10
  %156 = getelementptr inbounds float, ptr %arg35, i32 %linear_index_base
  %157 = load float, ptr %156, align 4, !invariant.load !197
  %158 = add i32 %5, 0
  %159 = add i32 %4, 32
  %160 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %158, i32 %159
  %161 = load float, ptr %160, align 4, !invariant.load !197
  %multiply.106 = fmul float %18, %161
  %subtract.107 = fsub float %157, %multiply.106
  %162 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %155, float %subtract.107, 11
  %163 = getelementptr inbounds float, ptr %arg37, i32 %linear_index_base
  %164 = load float, ptr %163, align 4, !invariant.load !197
  %165 = add i32 %5, 0
  %166 = add i32 %4, 32
  %167 = getelementptr inbounds [8192 x [352 x float]], ptr %arg38, i32 0, i32 %165, i32 %166
  %168 = load float, ptr %167, align 4, !invariant.load !197
  %multiply.109 = fmul float %18, %168
  %subtract.110 = fsub float %164, %multiply.109
  %169 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %162, float %subtract.110, 12
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 0
  %171 = getelementptr inbounds float, ptr %arg39, i32 %linear_index_base
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 1
  %173 = getelementptr inbounds float, ptr %arg40, i32 %linear_index_base
  store float %172, ptr %173, align 4
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 2
  %175 = getelementptr inbounds float, ptr %arg41, i32 %linear_index_base
  store float %174, ptr %175, align 4
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 3
  %177 = getelementptr inbounds float, ptr %arg42, i32 %linear_index_base
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 4
  %179 = getelementptr inbounds float, ptr %arg43, i32 %linear_index_base
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 5
  %181 = getelementptr inbounds float, ptr %arg44, i32 %linear_index_base
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 6
  %183 = getelementptr inbounds float, ptr %arg45, i32 %linear_index_base
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 7
  %185 = getelementptr inbounds float, ptr %arg46, i32 %linear_index_base
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 8
  %187 = getelementptr inbounds float, ptr %arg47, i32 %linear_index_base
  store float %186, ptr %187, align 4
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 9
  %189 = getelementptr inbounds float, ptr %arg48, i32 %linear_index_base
  store float %188, ptr %189, align 4
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 10
  %191 = getelementptr inbounds float, ptr %arg49, i32 %linear_index_base
  store float %190, ptr %191, align 4
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 11
  %193 = getelementptr inbounds float, ptr %arg50, i32 %linear_index_base
  store float %192, ptr %193, align 4
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %169, 12
  %195 = getelementptr inbounds float, ptr %arg51, i32 %linear_index_base
  store float %194, ptr %195, align 4
  %196 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %197 = load float, ptr %196, align 4, !invariant.load !197
  %198 = load float, ptr %arg2, align 4, !invariant.load !197
  %199 = add i32 %8, 0
  %200 = add i32 %7, 320
  %201 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %199, i32 %200
  %202 = load float, ptr %201, align 4, !invariant.load !197
  %multiply.421 = fmul float %198, %202
  %subtract.432 = fsub float %197, %multiply.421
  %203 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.432, 0
  %204 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %205 = load float, ptr %204, align 4, !invariant.load !197
  %206 = add i32 %8, 0
  %207 = add i32 %7, 0
  %208 = add i32 %206, 0
  %209 = add i32 %207, 0
  %210 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %208, i32 %209
  %211 = load float, ptr %210, align 4, !invariant.load !197
  %212 = add i32 %206, 0
  %213 = add i32 %207, 0
  %214 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %212, i32 %213
  %215 = load float, ptr %214, align 4, !invariant.load !197
  %add.463 = fadd float %211, %215
  %216 = add i32 %206, 0
  %217 = add i32 %207, 0
  %218 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %216, i32 %217
  %219 = load float, ptr %218, align 4, !invariant.load !197
  %add.484 = fadd float %add.463, %219
  %multiply.505 = fmul float %198, %add.484
  %subtract.516 = fsub float %205, %multiply.505
  %220 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %203, float %subtract.516, 1
  %221 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %222 = load float, ptr %221, align 4, !invariant.load !197
  %223 = add i32 %8, 0
  %224 = add i32 %7, 32
  %225 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %223, i32 %224
  %226 = load float, ptr %225, align 4, !invariant.load !197
  %multiply.537 = fmul float %198, %226
  %subtract.548 = fsub float %222, %multiply.537
  %227 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %220, float %subtract.548, 2
  %228 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %229 = load float, ptr %228, align 4, !invariant.load !197
  %230 = add i32 %8, 0
  %231 = add i32 %7, 32
  %232 = add i32 %230, 0
  %233 = add i32 %231, 0
  %234 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %232, i32 %233
  %235 = load float, ptr %234, align 4, !invariant.load !197
  %236 = add i32 %230, 0
  %237 = add i32 %231, 0
  %238 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %236, i32 %237
  %239 = load float, ptr %238, align 4, !invariant.load !197
  %add.579 = fadd float %235, %239
  %240 = add i32 %230, 0
  %241 = add i32 %231, 0
  %242 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %240, i32 %241
  %243 = load float, ptr %242, align 4, !invariant.load !197
  %add.5910 = fadd float %add.579, %243
  %multiply.6111 = fmul float %198, %add.5910
  %subtract.6212 = fsub float %229, %multiply.6111
  %244 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %227, float %subtract.6212, 3
  %245 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %246 = load float, ptr %245, align 4, !invariant.load !197
  %247 = add i32 %8, 0
  %248 = add i32 %7, 32
  %249 = add i32 %247, 0
  %250 = add i32 %248, 0
  %251 = getelementptr inbounds [8192 x [360 x float]], ptr %arg15, i32 0, i32 %249, i32 %250
  %252 = load float, ptr %251, align 4, !invariant.load !197
  %253 = add i32 %247, 0
  %254 = add i32 %248, 0
  %255 = getelementptr inbounds [8192 x [352 x float]], ptr %arg14, i32 0, i32 %253, i32 %254
  %256 = load float, ptr %255, align 4, !invariant.load !197
  %add.6513 = fadd float %252, %256
  %257 = add i32 %247, 0
  %258 = add i32 %248, 0
  %259 = getelementptr inbounds [8192 x [224 x float]], ptr %arg13, i32 0, i32 %257, i32 %258
  %260 = load float, ptr %259, align 4, !invariant.load !197
  %add.6714 = fadd float %add.6513, %260
  %multiply.6915 = fmul float %198, %add.6714
  %subtract.7016 = fsub float %246, %multiply.6915
  %261 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %244, float %subtract.7016, 4
  %262 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  %263 = load float, ptr %262, align 4, !invariant.load !197
  %264 = add i32 %8, 0
  %265 = add i32 %7, 0
  %266 = add i32 %264, 0
  %267 = add i32 %265, 0
  %268 = getelementptr inbounds [8192 x [448 x float]], ptr %arg19, i32 0, i32 %266, i32 %267
  %269 = load float, ptr %268, align 4, !invariant.load !197
  %270 = add i32 %264, 0
  %271 = add i32 %265, 0
  %272 = getelementptr inbounds [8192 x [448 x float]], ptr %arg18, i32 0, i32 %270, i32 %271
  %273 = load float, ptr %272, align 4, !invariant.load !197
  %add.7317 = fadd float %269, %273
  %274 = add i32 %264, 0
  %275 = add i32 %265, 0
  %276 = getelementptr inbounds [8192 x [320 x float]], ptr %arg17, i32 0, i32 %274, i32 %275
  %277 = load float, ptr %276, align 4, !invariant.load !197
  %add.7518 = fadd float %add.7317, %277
  %multiply.7719 = fmul float %198, %add.7518
  %subtract.7820 = fsub float %263, %multiply.7719
  %278 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %261, float %subtract.7820, 5
  %279 = getelementptr inbounds float, ptr %arg20, i32 %linear_index1
  %280 = load float, ptr %279, align 4, !invariant.load !197
  %281 = add i32 %8, 0
  %282 = add i32 %7, 32
  %283 = add i32 %281, 0
  %284 = add i32 %282, 0
  %285 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %283, i32 %284
  %286 = load float, ptr %285, align 4, !invariant.load !197
  %287 = add i32 %281, 0
  %288 = add i32 %282, 0
  %289 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %287, i32 %288
  %290 = load float, ptr %289, align 4, !invariant.load !197
  %add.8121 = fadd float %286, %290
  %291 = add i32 %281, 0
  %292 = add i32 %282, 0
  %293 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %291, i32 %292
  %294 = load float, ptr %293, align 4, !invariant.load !197
  %add.8322 = fadd float %add.8121, %294
  %multiply.8523 = fmul float %198, %add.8322
  %subtract.8624 = fsub float %280, %multiply.8523
  %295 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %278, float %subtract.8624, 6
  %296 = getelementptr inbounds float, ptr %arg24, i32 %linear_index1
  %297 = load float, ptr %296, align 4, !invariant.load !197
  %298 = add i32 %8, 0
  %299 = add i32 %7, 32
  %300 = add i32 %298, 0
  %301 = add i32 %299, 0
  %302 = getelementptr inbounds [8192 x [360 x float]], ptr %arg27, i32 0, i32 %300, i32 %301
  %303 = load float, ptr %302, align 4, !invariant.load !197
  %304 = add i32 %298, 0
  %305 = add i32 %299, 0
  %306 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %304, i32 %305
  %307 = load float, ptr %306, align 4, !invariant.load !197
  %add.8925 = fadd float %303, %307
  %308 = add i32 %298, 0
  %309 = add i32 %299, 0
  %310 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %308, i32 %309
  %311 = load float, ptr %310, align 4, !invariant.load !197
  %add.9126 = fadd float %add.8925, %311
  %multiply.9327 = fmul float %198, %add.9126
  %subtract.9428 = fsub float %297, %multiply.9327
  %312 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %295, float %subtract.9428, 7
  %313 = getelementptr inbounds float, ptr %arg28, i32 %linear_index1
  %314 = load float, ptr %313, align 4, !invariant.load !197
  %315 = add i32 %8, 0
  %316 = add i32 %7, 0
  %317 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %315, i32 %316
  %318 = load float, ptr %317, align 4, !invariant.load !197
  %multiply.9629 = fmul float %198, %318
  %subtract.9730 = fsub float %314, %multiply.9629
  %319 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %312, float %subtract.9730, 8
  %320 = getelementptr inbounds float, ptr %arg30, i32 %linear_index1
  %321 = load float, ptr %320, align 4, !invariant.load !197
  %322 = add i32 %8, 0
  %323 = add i32 %7, 0
  %324 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %322, i32 %323
  %325 = load float, ptr %324, align 4, !invariant.load !197
  %326 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %322, i32 %323
  %327 = load float, ptr %326, align 4, !invariant.load !197
  %add.9831 = fadd float %325, %327
  %multiply.10032 = fmul float %198, %add.9831
  %subtract.10133 = fsub float %321, %multiply.10032
  %328 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %319, float %subtract.10133, 9
  %329 = getelementptr inbounds float, ptr %arg33, i32 %linear_index1
  %330 = load float, ptr %329, align 4, !invariant.load !197
  %331 = add i32 %8, 0
  %332 = add i32 %7, 32
  %333 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %331, i32 %332
  %334 = load float, ptr %333, align 4, !invariant.load !197
  %multiply.10334 = fmul float %198, %334
  %subtract.10435 = fsub float %330, %multiply.10334
  %335 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %328, float %subtract.10435, 10
  %336 = getelementptr inbounds float, ptr %arg35, i32 %linear_index1
  %337 = load float, ptr %336, align 4, !invariant.load !197
  %338 = add i32 %8, 0
  %339 = add i32 %7, 32
  %340 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %338, i32 %339
  %341 = load float, ptr %340, align 4, !invariant.load !197
  %multiply.10636 = fmul float %198, %341
  %subtract.10737 = fsub float %337, %multiply.10636
  %342 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %335, float %subtract.10737, 11
  %343 = getelementptr inbounds float, ptr %arg37, i32 %linear_index1
  %344 = load float, ptr %343, align 4, !invariant.load !197
  %345 = add i32 %8, 0
  %346 = add i32 %7, 32
  %347 = getelementptr inbounds [8192 x [352 x float]], ptr %arg38, i32 0, i32 %345, i32 %346
  %348 = load float, ptr %347, align 4, !invariant.load !197
  %multiply.10938 = fmul float %198, %348
  %subtract.11039 = fsub float %344, %multiply.10938
  %349 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %342, float %subtract.11039, 12
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 0
  %351 = getelementptr inbounds float, ptr %arg39, i32 %linear_index1
  store float %350, ptr %351, align 4
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 1
  %353 = getelementptr inbounds float, ptr %arg40, i32 %linear_index1
  store float %352, ptr %353, align 4
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 2
  %355 = getelementptr inbounds float, ptr %arg41, i32 %linear_index1
  store float %354, ptr %355, align 4
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 3
  %357 = getelementptr inbounds float, ptr %arg42, i32 %linear_index1
  store float %356, ptr %357, align 4
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 4
  %359 = getelementptr inbounds float, ptr %arg43, i32 %linear_index1
  store float %358, ptr %359, align 4
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 5
  %361 = getelementptr inbounds float, ptr %arg44, i32 %linear_index1
  store float %360, ptr %361, align 4
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 6
  %363 = getelementptr inbounds float, ptr %arg45, i32 %linear_index1
  store float %362, ptr %363, align 4
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 7
  %365 = getelementptr inbounds float, ptr %arg46, i32 %linear_index1
  store float %364, ptr %365, align 4
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 8
  %367 = getelementptr inbounds float, ptr %arg47, i32 %linear_index1
  store float %366, ptr %367, align 4
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 9
  %369 = getelementptr inbounds float, ptr %arg48, i32 %linear_index1
  store float %368, ptr %369, align 4
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 10
  %371 = getelementptr inbounds float, ptr %arg49, i32 %linear_index1
  store float %370, ptr %371, align 4
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 11
  %373 = getelementptr inbounds float, ptr %arg50, i32 %linear_index1
  store float %372, ptr %373, align 4
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %349, 12
  %375 = getelementptr inbounds float, ptr %arg51, i32 %linear_index1
  store float %374, ptr %375, align 4
  %376 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %377 = load float, ptr %376, align 4, !invariant.load !197
  %378 = load float, ptr %arg2, align 4, !invariant.load !197
  %379 = add i32 %11, 0
  %380 = add i32 %10, 320
  %381 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %379, i32 %380
  %382 = load float, ptr %381, align 4, !invariant.load !197
  %multiply.4240 = fmul float %378, %382
  %subtract.4341 = fsub float %377, %multiply.4240
  %383 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4341, 0
  %384 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %385 = load float, ptr %384, align 4, !invariant.load !197
  %386 = add i32 %11, 0
  %387 = add i32 %10, 0
  %388 = add i32 %386, 0
  %389 = add i32 %387, 0
  %390 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %388, i32 %389
  %391 = load float, ptr %390, align 4, !invariant.load !197
  %392 = add i32 %386, 0
  %393 = add i32 %387, 0
  %394 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %392, i32 %393
  %395 = load float, ptr %394, align 4, !invariant.load !197
  %add.4642 = fadd float %391, %395
  %396 = add i32 %386, 0
  %397 = add i32 %387, 0
  %398 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %396, i32 %397
  %399 = load float, ptr %398, align 4, !invariant.load !197
  %add.4843 = fadd float %add.4642, %399
  %multiply.5044 = fmul float %378, %add.4843
  %subtract.5145 = fsub float %385, %multiply.5044
  %400 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %383, float %subtract.5145, 1
  %401 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %402 = load float, ptr %401, align 4, !invariant.load !197
  %403 = add i32 %11, 0
  %404 = add i32 %10, 32
  %405 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %403, i32 %404
  %406 = load float, ptr %405, align 4, !invariant.load !197
  %multiply.5346 = fmul float %378, %406
  %subtract.5447 = fsub float %402, %multiply.5346
  %407 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %400, float %subtract.5447, 2
  %408 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %409 = load float, ptr %408, align 4, !invariant.load !197
  %410 = add i32 %11, 0
  %411 = add i32 %10, 32
  %412 = add i32 %410, 0
  %413 = add i32 %411, 0
  %414 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %412, i32 %413
  %415 = load float, ptr %414, align 4, !invariant.load !197
  %416 = add i32 %410, 0
  %417 = add i32 %411, 0
  %418 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %416, i32 %417
  %419 = load float, ptr %418, align 4, !invariant.load !197
  %add.5748 = fadd float %415, %419
  %420 = add i32 %410, 0
  %421 = add i32 %411, 0
  %422 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %420, i32 %421
  %423 = load float, ptr %422, align 4, !invariant.load !197
  %add.5949 = fadd float %add.5748, %423
  %multiply.6150 = fmul float %378, %add.5949
  %subtract.6251 = fsub float %409, %multiply.6150
  %424 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %407, float %subtract.6251, 3
  %425 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %426 = load float, ptr %425, align 4, !invariant.load !197
  %427 = add i32 %11, 0
  %428 = add i32 %10, 32
  %429 = add i32 %427, 0
  %430 = add i32 %428, 0
  %431 = getelementptr inbounds [8192 x [360 x float]], ptr %arg15, i32 0, i32 %429, i32 %430
  %432 = load float, ptr %431, align 4, !invariant.load !197
  %433 = add i32 %427, 0
  %434 = add i32 %428, 0
  %435 = getelementptr inbounds [8192 x [352 x float]], ptr %arg14, i32 0, i32 %433, i32 %434
  %436 = load float, ptr %435, align 4, !invariant.load !197
  %add.6552 = fadd float %432, %436
  %437 = add i32 %427, 0
  %438 = add i32 %428, 0
  %439 = getelementptr inbounds [8192 x [224 x float]], ptr %arg13, i32 0, i32 %437, i32 %438
  %440 = load float, ptr %439, align 4, !invariant.load !197
  %add.6753 = fadd float %add.6552, %440
  %multiply.6954 = fmul float %378, %add.6753
  %subtract.7055 = fsub float %426, %multiply.6954
  %441 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %424, float %subtract.7055, 4
  %442 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  %443 = load float, ptr %442, align 4, !invariant.load !197
  %444 = add i32 %11, 0
  %445 = add i32 %10, 0
  %446 = add i32 %444, 0
  %447 = add i32 %445, 0
  %448 = getelementptr inbounds [8192 x [448 x float]], ptr %arg19, i32 0, i32 %446, i32 %447
  %449 = load float, ptr %448, align 4, !invariant.load !197
  %450 = add i32 %444, 0
  %451 = add i32 %445, 0
  %452 = getelementptr inbounds [8192 x [448 x float]], ptr %arg18, i32 0, i32 %450, i32 %451
  %453 = load float, ptr %452, align 4, !invariant.load !197
  %add.7356 = fadd float %449, %453
  %454 = add i32 %444, 0
  %455 = add i32 %445, 0
  %456 = getelementptr inbounds [8192 x [320 x float]], ptr %arg17, i32 0, i32 %454, i32 %455
  %457 = load float, ptr %456, align 4, !invariant.load !197
  %add.7557 = fadd float %add.7356, %457
  %multiply.7758 = fmul float %378, %add.7557
  %subtract.7859 = fsub float %443, %multiply.7758
  %458 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %441, float %subtract.7859, 5
  %459 = getelementptr inbounds float, ptr %arg20, i32 %linear_index2
  %460 = load float, ptr %459, align 4, !invariant.load !197
  %461 = add i32 %11, 0
  %462 = add i32 %10, 32
  %463 = add i32 %461, 0
  %464 = add i32 %462, 0
  %465 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %463, i32 %464
  %466 = load float, ptr %465, align 4, !invariant.load !197
  %467 = add i32 %461, 0
  %468 = add i32 %462, 0
  %469 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %467, i32 %468
  %470 = load float, ptr %469, align 4, !invariant.load !197
  %add.8160 = fadd float %466, %470
  %471 = add i32 %461, 0
  %472 = add i32 %462, 0
  %473 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %471, i32 %472
  %474 = load float, ptr %473, align 4, !invariant.load !197
  %add.8361 = fadd float %add.8160, %474
  %multiply.8562 = fmul float %378, %add.8361
  %subtract.8663 = fsub float %460, %multiply.8562
  %475 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %458, float %subtract.8663, 6
  %476 = getelementptr inbounds float, ptr %arg24, i32 %linear_index2
  %477 = load float, ptr %476, align 4, !invariant.load !197
  %478 = add i32 %11, 0
  %479 = add i32 %10, 32
  %480 = add i32 %478, 0
  %481 = add i32 %479, 0
  %482 = getelementptr inbounds [8192 x [360 x float]], ptr %arg27, i32 0, i32 %480, i32 %481
  %483 = load float, ptr %482, align 4, !invariant.load !197
  %484 = add i32 %478, 0
  %485 = add i32 %479, 0
  %486 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %484, i32 %485
  %487 = load float, ptr %486, align 4, !invariant.load !197
  %add.8964 = fadd float %483, %487
  %488 = add i32 %478, 0
  %489 = add i32 %479, 0
  %490 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %488, i32 %489
  %491 = load float, ptr %490, align 4, !invariant.load !197
  %add.9165 = fadd float %add.8964, %491
  %multiply.9366 = fmul float %378, %add.9165
  %subtract.9467 = fsub float %477, %multiply.9366
  %492 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %475, float %subtract.9467, 7
  %493 = getelementptr inbounds float, ptr %arg28, i32 %linear_index2
  %494 = load float, ptr %493, align 4, !invariant.load !197
  %495 = add i32 %11, 0
  %496 = add i32 %10, 0
  %497 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %495, i32 %496
  %498 = load float, ptr %497, align 4, !invariant.load !197
  %multiply.9668 = fmul float %378, %498
  %subtract.9769 = fsub float %494, %multiply.9668
  %499 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %492, float %subtract.9769, 8
  %500 = getelementptr inbounds float, ptr %arg30, i32 %linear_index2
  %501 = load float, ptr %500, align 4, !invariant.load !197
  %502 = add i32 %11, 0
  %503 = add i32 %10, 0
  %504 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %502, i32 %503
  %505 = load float, ptr %504, align 4, !invariant.load !197
  %506 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %502, i32 %503
  %507 = load float, ptr %506, align 4, !invariant.load !197
  %add.9870 = fadd float %505, %507
  %multiply.10071 = fmul float %378, %add.9870
  %subtract.10172 = fsub float %501, %multiply.10071
  %508 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %499, float %subtract.10172, 9
  %509 = getelementptr inbounds float, ptr %arg33, i32 %linear_index2
  %510 = load float, ptr %509, align 4, !invariant.load !197
  %511 = add i32 %11, 0
  %512 = add i32 %10, 32
  %513 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %511, i32 %512
  %514 = load float, ptr %513, align 4, !invariant.load !197
  %multiply.10373 = fmul float %378, %514
  %subtract.10474 = fsub float %510, %multiply.10373
  %515 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %508, float %subtract.10474, 10
  %516 = getelementptr inbounds float, ptr %arg35, i32 %linear_index2
  %517 = load float, ptr %516, align 4, !invariant.load !197
  %518 = add i32 %11, 0
  %519 = add i32 %10, 32
  %520 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %518, i32 %519
  %521 = load float, ptr %520, align 4, !invariant.load !197
  %multiply.10675 = fmul float %378, %521
  %subtract.10776 = fsub float %517, %multiply.10675
  %522 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %515, float %subtract.10776, 11
  %523 = getelementptr inbounds float, ptr %arg37, i32 %linear_index2
  %524 = load float, ptr %523, align 4, !invariant.load !197
  %525 = add i32 %11, 0
  %526 = add i32 %10, 32
  %527 = getelementptr inbounds [8192 x [352 x float]], ptr %arg38, i32 0, i32 %525, i32 %526
  %528 = load float, ptr %527, align 4, !invariant.load !197
  %multiply.10977 = fmul float %378, %528
  %subtract.11078 = fsub float %524, %multiply.10977
  %529 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %522, float %subtract.11078, 12
  %530 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 0
  %531 = getelementptr inbounds float, ptr %arg39, i32 %linear_index2
  store float %530, ptr %531, align 4
  %532 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 1
  %533 = getelementptr inbounds float, ptr %arg40, i32 %linear_index2
  store float %532, ptr %533, align 4
  %534 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 2
  %535 = getelementptr inbounds float, ptr %arg41, i32 %linear_index2
  store float %534, ptr %535, align 4
  %536 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 3
  %537 = getelementptr inbounds float, ptr %arg42, i32 %linear_index2
  store float %536, ptr %537, align 4
  %538 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 4
  %539 = getelementptr inbounds float, ptr %arg43, i32 %linear_index2
  store float %538, ptr %539, align 4
  %540 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 5
  %541 = getelementptr inbounds float, ptr %arg44, i32 %linear_index2
  store float %540, ptr %541, align 4
  %542 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 6
  %543 = getelementptr inbounds float, ptr %arg45, i32 %linear_index2
  store float %542, ptr %543, align 4
  %544 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 7
  %545 = getelementptr inbounds float, ptr %arg46, i32 %linear_index2
  store float %544, ptr %545, align 4
  %546 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 8
  %547 = getelementptr inbounds float, ptr %arg47, i32 %linear_index2
  store float %546, ptr %547, align 4
  %548 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 9
  %549 = getelementptr inbounds float, ptr %arg48, i32 %linear_index2
  store float %548, ptr %549, align 4
  %550 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 10
  %551 = getelementptr inbounds float, ptr %arg49, i32 %linear_index2
  store float %550, ptr %551, align 4
  %552 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 11
  %553 = getelementptr inbounds float, ptr %arg50, i32 %linear_index2
  store float %552, ptr %553, align 4
  %554 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %529, 12
  %555 = getelementptr inbounds float, ptr %arg51, i32 %linear_index2
  store float %554, ptr %555, align 4
  %556 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %557 = load float, ptr %556, align 4, !invariant.load !197
  %558 = load float, ptr %arg2, align 4, !invariant.load !197
  %559 = add i32 %14, 0
  %560 = add i32 %13, 320
  %561 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %559, i32 %560
  %562 = load float, ptr %561, align 4, !invariant.load !197
  %multiply.4279 = fmul float %558, %562
  %subtract.4380 = fsub float %557, %multiply.4279
  %563 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.4380, 0
  %564 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %565 = load float, ptr %564, align 4, !invariant.load !197
  %566 = add i32 %14, 0
  %567 = add i32 %13, 0
  %568 = add i32 %566, 0
  %569 = add i32 %567, 0
  %570 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %568, i32 %569
  %571 = load float, ptr %570, align 4, !invariant.load !197
  %572 = add i32 %566, 0
  %573 = add i32 %567, 0
  %574 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %572, i32 %573
  %575 = load float, ptr %574, align 4, !invariant.load !197
  %add.4681 = fadd float %571, %575
  %576 = add i32 %566, 0
  %577 = add i32 %567, 0
  %578 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %576, i32 %577
  %579 = load float, ptr %578, align 4, !invariant.load !197
  %add.4882 = fadd float %add.4681, %579
  %multiply.5083 = fmul float %558, %add.4882
  %subtract.5184 = fsub float %565, %multiply.5083
  %580 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %563, float %subtract.5184, 1
  %581 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %582 = load float, ptr %581, align 4, !invariant.load !197
  %583 = add i32 %14, 0
  %584 = add i32 %13, 32
  %585 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %583, i32 %584
  %586 = load float, ptr %585, align 4, !invariant.load !197
  %multiply.5385 = fmul float %558, %586
  %subtract.5486 = fsub float %582, %multiply.5385
  %587 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %580, float %subtract.5486, 2
  %588 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %589 = load float, ptr %588, align 4, !invariant.load !197
  %590 = add i32 %14, 0
  %591 = add i32 %13, 32
  %592 = add i32 %590, 0
  %593 = add i32 %591, 0
  %594 = getelementptr inbounds [8192 x [352 x float]], ptr %arg11, i32 0, i32 %592, i32 %593
  %595 = load float, ptr %594, align 4, !invariant.load !197
  %596 = add i32 %590, 0
  %597 = add i32 %591, 0
  %598 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %596, i32 %597
  %599 = load float, ptr %598, align 4, !invariant.load !197
  %add.5787 = fadd float %595, %599
  %600 = add i32 %590, 0
  %601 = add i32 %591, 0
  %602 = getelementptr inbounds [8192 x [224 x float]], ptr %arg9, i32 0, i32 %600, i32 %601
  %603 = load float, ptr %602, align 4, !invariant.load !197
  %add.5988 = fadd float %add.5787, %603
  %multiply.6189 = fmul float %558, %add.5988
  %subtract.6290 = fsub float %589, %multiply.6189
  %604 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %587, float %subtract.6290, 3
  %605 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %606 = load float, ptr %605, align 4, !invariant.load !197
  %607 = add i32 %14, 0
  %608 = add i32 %13, 32
  %609 = add i32 %607, 0
  %610 = add i32 %608, 0
  %611 = getelementptr inbounds [8192 x [360 x float]], ptr %arg15, i32 0, i32 %609, i32 %610
  %612 = load float, ptr %611, align 4, !invariant.load !197
  %613 = add i32 %607, 0
  %614 = add i32 %608, 0
  %615 = getelementptr inbounds [8192 x [352 x float]], ptr %arg14, i32 0, i32 %613, i32 %614
  %616 = load float, ptr %615, align 4, !invariant.load !197
  %add.6591 = fadd float %612, %616
  %617 = add i32 %607, 0
  %618 = add i32 %608, 0
  %619 = getelementptr inbounds [8192 x [224 x float]], ptr %arg13, i32 0, i32 %617, i32 %618
  %620 = load float, ptr %619, align 4, !invariant.load !197
  %add.6792 = fadd float %add.6591, %620
  %multiply.6993 = fmul float %558, %add.6792
  %subtract.7094 = fsub float %606, %multiply.6993
  %621 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %604, float %subtract.7094, 4
  %622 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  %623 = load float, ptr %622, align 4, !invariant.load !197
  %624 = add i32 %14, 0
  %625 = add i32 %13, 0
  %626 = add i32 %624, 0
  %627 = add i32 %625, 0
  %628 = getelementptr inbounds [8192 x [448 x float]], ptr %arg19, i32 0, i32 %626, i32 %627
  %629 = load float, ptr %628, align 4, !invariant.load !197
  %630 = add i32 %624, 0
  %631 = add i32 %625, 0
  %632 = getelementptr inbounds [8192 x [448 x float]], ptr %arg18, i32 0, i32 %630, i32 %631
  %633 = load float, ptr %632, align 4, !invariant.load !197
  %add.7395 = fadd float %629, %633
  %634 = add i32 %624, 0
  %635 = add i32 %625, 0
  %636 = getelementptr inbounds [8192 x [320 x float]], ptr %arg17, i32 0, i32 %634, i32 %635
  %637 = load float, ptr %636, align 4, !invariant.load !197
  %add.7596 = fadd float %add.7395, %637
  %multiply.7797 = fmul float %558, %add.7596
  %subtract.7898 = fsub float %623, %multiply.7797
  %638 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %621, float %subtract.7898, 5
  %639 = getelementptr inbounds float, ptr %arg20, i32 %linear_index3
  %640 = load float, ptr %639, align 4, !invariant.load !197
  %641 = add i32 %14, 0
  %642 = add i32 %13, 32
  %643 = add i32 %641, 0
  %644 = add i32 %642, 0
  %645 = getelementptr inbounds [8192 x [360 x float]], ptr %arg23, i32 0, i32 %643, i32 %644
  %646 = load float, ptr %645, align 4, !invariant.load !197
  %647 = add i32 %641, 0
  %648 = add i32 %642, 0
  %649 = getelementptr inbounds [8192 x [352 x float]], ptr %arg22, i32 0, i32 %647, i32 %648
  %650 = load float, ptr %649, align 4, !invariant.load !197
  %add.8199 = fadd float %646, %650
  %651 = add i32 %641, 0
  %652 = add i32 %642, 0
  %653 = getelementptr inbounds [8192 x [224 x float]], ptr %arg21, i32 0, i32 %651, i32 %652
  %654 = load float, ptr %653, align 4, !invariant.load !197
  %add.83100 = fadd float %add.8199, %654
  %multiply.85101 = fmul float %558, %add.83100
  %subtract.86102 = fsub float %640, %multiply.85101
  %655 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %638, float %subtract.86102, 6
  %656 = getelementptr inbounds float, ptr %arg24, i32 %linear_index3
  %657 = load float, ptr %656, align 4, !invariant.load !197
  %658 = add i32 %14, 0
  %659 = add i32 %13, 32
  %660 = add i32 %658, 0
  %661 = add i32 %659, 0
  %662 = getelementptr inbounds [8192 x [360 x float]], ptr %arg27, i32 0, i32 %660, i32 %661
  %663 = load float, ptr %662, align 4, !invariant.load !197
  %664 = add i32 %658, 0
  %665 = add i32 %659, 0
  %666 = getelementptr inbounds [8192 x [352 x float]], ptr %arg26, i32 0, i32 %664, i32 %665
  %667 = load float, ptr %666, align 4, !invariant.load !197
  %add.89103 = fadd float %663, %667
  %668 = add i32 %658, 0
  %669 = add i32 %659, 0
  %670 = getelementptr inbounds [8192 x [224 x float]], ptr %arg25, i32 0, i32 %668, i32 %669
  %671 = load float, ptr %670, align 4, !invariant.load !197
  %add.91104 = fadd float %add.89103, %671
  %multiply.93105 = fmul float %558, %add.91104
  %subtract.94106 = fsub float %657, %multiply.93105
  %672 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %655, float %subtract.94106, 7
  %673 = getelementptr inbounds float, ptr %arg28, i32 %linear_index3
  %674 = load float, ptr %673, align 4, !invariant.load !197
  %675 = add i32 %14, 0
  %676 = add i32 %13, 0
  %677 = getelementptr inbounds [8192 x [192 x float]], ptr %arg29, i32 0, i32 %675, i32 %676
  %678 = load float, ptr %677, align 4, !invariant.load !197
  %multiply.96107 = fmul float %558, %678
  %subtract.97108 = fsub float %674, %multiply.96107
  %679 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %672, float %subtract.97108, 8
  %680 = getelementptr inbounds float, ptr %arg30, i32 %linear_index3
  %681 = load float, ptr %680, align 4, !invariant.load !197
  %682 = add i32 %14, 0
  %683 = add i32 %13, 0
  %684 = getelementptr inbounds [8192 x [448 x float]], ptr %arg31, i32 0, i32 %682, i32 %683
  %685 = load float, ptr %684, align 4, !invariant.load !197
  %686 = getelementptr inbounds [8192 x [448 x float]], ptr %arg32, i32 0, i32 %682, i32 %683
  %687 = load float, ptr %686, align 4, !invariant.load !197
  %add.98109 = fadd float %685, %687
  %multiply.100110 = fmul float %558, %add.98109
  %subtract.101111 = fsub float %681, %multiply.100110
  %688 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %679, float %subtract.101111, 9
  %689 = getelementptr inbounds float, ptr %arg33, i32 %linear_index3
  %690 = load float, ptr %689, align 4, !invariant.load !197
  %691 = add i32 %14, 0
  %692 = add i32 %13, 32
  %693 = getelementptr inbounds [8192 x [352 x float]], ptr %arg34, i32 0, i32 %691, i32 %692
  %694 = load float, ptr %693, align 4, !invariant.load !197
  %multiply.103112 = fmul float %558, %694
  %subtract.104113 = fsub float %690, %multiply.103112
  %695 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %688, float %subtract.104113, 10
  %696 = getelementptr inbounds float, ptr %arg35, i32 %linear_index3
  %697 = load float, ptr %696, align 4, !invariant.load !197
  %698 = add i32 %14, 0
  %699 = add i32 %13, 32
  %700 = getelementptr inbounds [8192 x [352 x float]], ptr %arg36, i32 0, i32 %698, i32 %699
  %701 = load float, ptr %700, align 4, !invariant.load !197
  %multiply.106114 = fmul float %558, %701
  %subtract.107115 = fsub float %697, %multiply.106114
  %702 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %695, float %subtract.107115, 11
  %703 = getelementptr inbounds float, ptr %arg37, i32 %linear_index3
  %704 = load float, ptr %703, align 4, !invariant.load !197
  %705 = add i32 %14, 0
  %706 = add i32 %13, 32
  %707 = getelementptr inbounds [8192 x [352 x float]], ptr %arg38, i32 0, i32 %705, i32 %706
  %708 = load float, ptr %707, align 4, !invariant.load !197
  %multiply.109116 = fmul float %558, %708
  %subtract.110117 = fsub float %704, %multiply.109116
  %709 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %702, float %subtract.110117, 12
  %710 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 0
  %711 = getelementptr inbounds float, ptr %arg39, i32 %linear_index3
  store float %710, ptr %711, align 4
  %712 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 1
  %713 = getelementptr inbounds float, ptr %arg40, i32 %linear_index3
  store float %712, ptr %713, align 4
  %714 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 2
  %715 = getelementptr inbounds float, ptr %arg41, i32 %linear_index3
  store float %714, ptr %715, align 4
  %716 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 3
  %717 = getelementptr inbounds float, ptr %arg42, i32 %linear_index3
  store float %716, ptr %717, align 4
  %718 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 4
  %719 = getelementptr inbounds float, ptr %arg43, i32 %linear_index3
  store float %718, ptr %719, align 4
  %720 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 5
  %721 = getelementptr inbounds float, ptr %arg44, i32 %linear_index3
  store float %720, ptr %721, align 4
  %722 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 6
  %723 = getelementptr inbounds float, ptr %arg45, i32 %linear_index3
  store float %722, ptr %723, align 4
  %724 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 7
  %725 = getelementptr inbounds float, ptr %arg46, i32 %linear_index3
  store float %724, ptr %725, align 4
  %726 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 8
  %727 = getelementptr inbounds float, ptr %arg47, i32 %linear_index3
  store float %726, ptr %727, align 4
  %728 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 9
  %729 = getelementptr inbounds float, ptr %arg48, i32 %linear_index3
  store float %728, ptr %729, align 4
  %730 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 10
  %731 = getelementptr inbounds float, ptr %arg49, i32 %linear_index3
  store float %730, ptr %731, align 4
  %732 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 11
  %733 = getelementptr inbounds float, ptr %arg50, i32 %linear_index3
  store float %732, ptr %733, align 4
  %734 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float } %709, 12
  %735 = getelementptr inbounds float, ptr %arg51, i32 %linear_index3
  store float %734, ptr %735, align 4
  br label %fusion_112.in_bounds-after
}

define void @fusion_114(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 128 dereferenceable(12845056) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(4194304) %arg3, ptr noalias align 128 dereferenceable(10485760) %arg4, ptr noalias align 128 dereferenceable(14680064) %arg5, ptr noalias align 16 dereferenceable(4194304) %arg6, ptr noalias align 128 dereferenceable(14680064) %arg7, ptr noalias align 128 dereferenceable(14680064) %arg8, ptr noalias align 16 dereferenceable(4194304) %arg9, ptr noalias align 128 dereferenceable(10485760) %arg10, ptr noalias align 128 dereferenceable(14680064) %arg11, ptr noalias align 128 dereferenceable(14680064) %arg12, ptr noalias align 16 dereferenceable(4194304) %arg13, ptr noalias align 128 dereferenceable(6291456) %arg14, ptr noalias align 128 dereferenceable(4194304) %arg15, ptr noalias align 128 dereferenceable(4194304) %arg16, ptr noalias align 128 dereferenceable(4194304) %arg17, ptr noalias align 128 dereferenceable(4194304) %arg18, ptr noalias align 128 dereferenceable(4194304) %arg19) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !267
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 262144
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index_base, 128
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 128
  %8 = udiv i32 %linear_index1, 128
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 128
  %11 = udiv i32 %linear_index2, 128
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 128
  %14 = udiv i32 %linear_index3, 128
  %15 = icmp ult i32 %linear_index_base, 1048576
  br i1 %15, label %fusion_114.in_bounds-true, label %fusion_114.in_bounds-after

fusion_114.in_bounds-after:                       ; preds = %fusion_114.in_bounds-true, %entry
  ret void

fusion_114.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = add i32 %5, 0
  %20 = add i32 %4, 192
  %21 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %multiply.18 = fmul float %18, %22
  %subtract.19 = fsub float %17, %multiply.18
  %23 = insertvalue { float, float, float, float, float } undef, float %subtract.19, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = add i32 %5, 0
  %27 = add i32 %4, 64
  %28 = add i32 %26, 0
  %29 = add i32 %27, 0
  %30 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %28, i32 %29
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %32 = add i32 %26, 0
  %33 = add i32 %27, 0
  %34 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %32, i32 %33
  %35 = load float, ptr %34, align 4, !invariant.load !197
  %add.22 = fadd float %31, %35
  %36 = add i32 %26, 0
  %37 = add i32 %27, 0
  %38 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %add.24 = fadd float %add.22, %39
  %multiply.26 = fmul float %18, %add.24
  %subtract.27 = fsub float %25, %multiply.26
  %40 = insertvalue { float, float, float, float, float } %23, float %subtract.27, 1
  %41 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = add i32 %5, 0
  %44 = add i32 %4, 64
  %45 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %47 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %43, i32 %44
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %add.28 = fadd float %46, %48
  %multiply.30 = fmul float %18, %add.28
  %subtract.31 = fsub float %42, %multiply.30
  %49 = insertvalue { float, float, float, float, float } %40, float %subtract.31, 2
  %50 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 0
  %53 = add i32 %4, 64
  %54 = add i32 %52, 0
  %55 = add i32 %53, 0
  %56 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %54, i32 %55
  %57 = load float, ptr %56, align 4, !invariant.load !197
  %58 = add i32 %52, 0
  %59 = add i32 %53, 0
  %60 = getelementptr inbounds [8192 x [448 x float]], ptr %arg11, i32 0, i32 %58, i32 %59
  %61 = load float, ptr %60, align 4, !invariant.load !197
  %add.34 = fadd float %57, %61
  %62 = add i32 %52, 0
  %63 = add i32 %53, 0
  %64 = getelementptr inbounds [8192 x [320 x float]], ptr %arg10, i32 0, i32 %62, i32 %63
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %add.36 = fadd float %add.34, %65
  %multiply.38 = fmul float %18, %add.36
  %subtract.39 = fsub float %51, %multiply.38
  %66 = insertvalue { float, float, float, float, float } %49, float %subtract.39, 3
  %67 = getelementptr inbounds float, ptr %arg13, i32 %linear_index_base
  %68 = load float, ptr %67, align 4, !invariant.load !197
  %69 = add i32 %5, 0
  %70 = add i32 %4, 64
  %71 = getelementptr inbounds [8192 x [192 x float]], ptr %arg14, i32 0, i32 %69, i32 %70
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %multiply.41 = fmul float %18, %72
  %subtract.42 = fsub float %68, %multiply.41
  %73 = insertvalue { float, float, float, float, float } %66, float %subtract.42, 4
  %74 = extractvalue { float, float, float, float, float } %73, 0
  %75 = getelementptr inbounds float, ptr %arg15, i32 %linear_index_base
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float } %73, 1
  %77 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float } %73, 2
  %79 = getelementptr inbounds float, ptr %arg17, i32 %linear_index_base
  store float %78, ptr %79, align 4
  %80 = extractvalue { float, float, float, float, float } %73, 3
  %81 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  store float %80, ptr %81, align 4
  %82 = extractvalue { float, float, float, float, float } %73, 4
  %83 = getelementptr inbounds float, ptr %arg19, i32 %linear_index_base
  store float %82, ptr %83, align 4
  %84 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %85 = load float, ptr %84, align 4, !invariant.load !197
  %86 = load float, ptr %arg2, align 4, !invariant.load !197
  %87 = add i32 %8, 0
  %88 = add i32 %7, 192
  %89 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %multiply.181 = fmul float %86, %90
  %subtract.192 = fsub float %85, %multiply.181
  %91 = insertvalue { float, float, float, float, float } undef, float %subtract.192, 0
  %92 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = add i32 %8, 0
  %95 = add i32 %7, 64
  %96 = add i32 %94, 0
  %97 = add i32 %95, 0
  %98 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %96, i32 %97
  %99 = load float, ptr %98, align 4, !invariant.load !197
  %100 = add i32 %94, 0
  %101 = add i32 %95, 0
  %102 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %100, i32 %101
  %103 = load float, ptr %102, align 4, !invariant.load !197
  %add.223 = fadd float %99, %103
  %104 = add i32 %94, 0
  %105 = add i32 %95, 0
  %106 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %104, i32 %105
  %107 = load float, ptr %106, align 4, !invariant.load !197
  %add.244 = fadd float %add.223, %107
  %multiply.265 = fmul float %86, %add.244
  %subtract.276 = fsub float %93, %multiply.265
  %108 = insertvalue { float, float, float, float, float } %91, float %subtract.276, 1
  %109 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %110 = load float, ptr %109, align 4, !invariant.load !197
  %111 = add i32 %8, 0
  %112 = add i32 %7, 64
  %113 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %111, i32 %112
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %115 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %111, i32 %112
  %116 = load float, ptr %115, align 4, !invariant.load !197
  %add.287 = fadd float %114, %116
  %multiply.308 = fmul float %86, %add.287
  %subtract.319 = fsub float %110, %multiply.308
  %117 = insertvalue { float, float, float, float, float } %108, float %subtract.319, 2
  %118 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %119 = load float, ptr %118, align 4, !invariant.load !197
  %120 = add i32 %8, 0
  %121 = add i32 %7, 64
  %122 = add i32 %120, 0
  %123 = add i32 %121, 0
  %124 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %122, i32 %123
  %125 = load float, ptr %124, align 4, !invariant.load !197
  %126 = add i32 %120, 0
  %127 = add i32 %121, 0
  %128 = getelementptr inbounds [8192 x [448 x float]], ptr %arg11, i32 0, i32 %126, i32 %127
  %129 = load float, ptr %128, align 4, !invariant.load !197
  %add.3410 = fadd float %125, %129
  %130 = add i32 %120, 0
  %131 = add i32 %121, 0
  %132 = getelementptr inbounds [8192 x [320 x float]], ptr %arg10, i32 0, i32 %130, i32 %131
  %133 = load float, ptr %132, align 4, !invariant.load !197
  %add.3611 = fadd float %add.3410, %133
  %multiply.3812 = fmul float %86, %add.3611
  %subtract.3913 = fsub float %119, %multiply.3812
  %134 = insertvalue { float, float, float, float, float } %117, float %subtract.3913, 3
  %135 = getelementptr inbounds float, ptr %arg13, i32 %linear_index1
  %136 = load float, ptr %135, align 4, !invariant.load !197
  %137 = add i32 %8, 0
  %138 = add i32 %7, 64
  %139 = getelementptr inbounds [8192 x [192 x float]], ptr %arg14, i32 0, i32 %137, i32 %138
  %140 = load float, ptr %139, align 4, !invariant.load !197
  %multiply.4114 = fmul float %86, %140
  %subtract.4215 = fsub float %136, %multiply.4114
  %141 = insertvalue { float, float, float, float, float } %134, float %subtract.4215, 4
  %142 = extractvalue { float, float, float, float, float } %141, 0
  %143 = getelementptr inbounds float, ptr %arg15, i32 %linear_index1
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float } %141, 1
  %145 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float } %141, 2
  %147 = getelementptr inbounds float, ptr %arg17, i32 %linear_index1
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float } %141, 3
  %149 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float } %141, 4
  %151 = getelementptr inbounds float, ptr %arg19, i32 %linear_index1
  store float %150, ptr %151, align 4
  %152 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %153 = load float, ptr %152, align 4, !invariant.load !197
  %154 = load float, ptr %arg2, align 4, !invariant.load !197
  %155 = add i32 %11, 0
  %156 = add i32 %10, 192
  %157 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %155, i32 %156
  %158 = load float, ptr %157, align 4, !invariant.load !197
  %multiply.1816 = fmul float %154, %158
  %subtract.1917 = fsub float %153, %multiply.1816
  %159 = insertvalue { float, float, float, float, float } undef, float %subtract.1917, 0
  %160 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %161 = load float, ptr %160, align 4, !invariant.load !197
  %162 = add i32 %11, 0
  %163 = add i32 %10, 64
  %164 = add i32 %162, 0
  %165 = add i32 %163, 0
  %166 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %164, i32 %165
  %167 = load float, ptr %166, align 4, !invariant.load !197
  %168 = add i32 %162, 0
  %169 = add i32 %163, 0
  %170 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %168, i32 %169
  %171 = load float, ptr %170, align 4, !invariant.load !197
  %add.2218 = fadd float %167, %171
  %172 = add i32 %162, 0
  %173 = add i32 %163, 0
  %174 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %172, i32 %173
  %175 = load float, ptr %174, align 4, !invariant.load !197
  %add.2419 = fadd float %add.2218, %175
  %multiply.2620 = fmul float %154, %add.2419
  %subtract.2721 = fsub float %161, %multiply.2620
  %176 = insertvalue { float, float, float, float, float } %159, float %subtract.2721, 1
  %177 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %178 = load float, ptr %177, align 4, !invariant.load !197
  %179 = add i32 %11, 0
  %180 = add i32 %10, 64
  %181 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %179, i32 %180
  %182 = load float, ptr %181, align 4, !invariant.load !197
  %183 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %179, i32 %180
  %184 = load float, ptr %183, align 4, !invariant.load !197
  %add.2822 = fadd float %182, %184
  %multiply.3023 = fmul float %154, %add.2822
  %subtract.3124 = fsub float %178, %multiply.3023
  %185 = insertvalue { float, float, float, float, float } %176, float %subtract.3124, 2
  %186 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %187 = load float, ptr %186, align 4, !invariant.load !197
  %188 = add i32 %11, 0
  %189 = add i32 %10, 64
  %190 = add i32 %188, 0
  %191 = add i32 %189, 0
  %192 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %190, i32 %191
  %193 = load float, ptr %192, align 4, !invariant.load !197
  %194 = add i32 %188, 0
  %195 = add i32 %189, 0
  %196 = getelementptr inbounds [8192 x [448 x float]], ptr %arg11, i32 0, i32 %194, i32 %195
  %197 = load float, ptr %196, align 4, !invariant.load !197
  %add.3425 = fadd float %193, %197
  %198 = add i32 %188, 0
  %199 = add i32 %189, 0
  %200 = getelementptr inbounds [8192 x [320 x float]], ptr %arg10, i32 0, i32 %198, i32 %199
  %201 = load float, ptr %200, align 4, !invariant.load !197
  %add.3626 = fadd float %add.3425, %201
  %multiply.3827 = fmul float %154, %add.3626
  %subtract.3928 = fsub float %187, %multiply.3827
  %202 = insertvalue { float, float, float, float, float } %185, float %subtract.3928, 3
  %203 = getelementptr inbounds float, ptr %arg13, i32 %linear_index2
  %204 = load float, ptr %203, align 4, !invariant.load !197
  %205 = add i32 %11, 0
  %206 = add i32 %10, 64
  %207 = getelementptr inbounds [8192 x [192 x float]], ptr %arg14, i32 0, i32 %205, i32 %206
  %208 = load float, ptr %207, align 4, !invariant.load !197
  %multiply.4129 = fmul float %154, %208
  %subtract.4230 = fsub float %204, %multiply.4129
  %209 = insertvalue { float, float, float, float, float } %202, float %subtract.4230, 4
  %210 = extractvalue { float, float, float, float, float } %209, 0
  %211 = getelementptr inbounds float, ptr %arg15, i32 %linear_index2
  store float %210, ptr %211, align 4
  %212 = extractvalue { float, float, float, float, float } %209, 1
  %213 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  store float %212, ptr %213, align 4
  %214 = extractvalue { float, float, float, float, float } %209, 2
  %215 = getelementptr inbounds float, ptr %arg17, i32 %linear_index2
  store float %214, ptr %215, align 4
  %216 = extractvalue { float, float, float, float, float } %209, 3
  %217 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  store float %216, ptr %217, align 4
  %218 = extractvalue { float, float, float, float, float } %209, 4
  %219 = getelementptr inbounds float, ptr %arg19, i32 %linear_index2
  store float %218, ptr %219, align 4
  %220 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %221 = load float, ptr %220, align 4, !invariant.load !197
  %222 = load float, ptr %arg2, align 4, !invariant.load !197
  %223 = add i32 %14, 0
  %224 = add i32 %13, 192
  %225 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %223, i32 %224
  %226 = load float, ptr %225, align 4, !invariant.load !197
  %multiply.1831 = fmul float %222, %226
  %subtract.1932 = fsub float %221, %multiply.1831
  %227 = insertvalue { float, float, float, float, float } undef, float %subtract.1932, 0
  %228 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %229 = load float, ptr %228, align 4, !invariant.load !197
  %230 = add i32 %14, 0
  %231 = add i32 %13, 64
  %232 = add i32 %230, 0
  %233 = add i32 %231, 0
  %234 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %232, i32 %233
  %235 = load float, ptr %234, align 4, !invariant.load !197
  %236 = add i32 %230, 0
  %237 = add i32 %231, 0
  %238 = getelementptr inbounds [8192 x [448 x float]], ptr %arg5, i32 0, i32 %236, i32 %237
  %239 = load float, ptr %238, align 4, !invariant.load !197
  %add.2233 = fadd float %235, %239
  %240 = add i32 %230, 0
  %241 = add i32 %231, 0
  %242 = getelementptr inbounds [8192 x [320 x float]], ptr %arg4, i32 0, i32 %240, i32 %241
  %243 = load float, ptr %242, align 4, !invariant.load !197
  %add.2434 = fadd float %add.2233, %243
  %multiply.2635 = fmul float %222, %add.2434
  %subtract.2736 = fsub float %229, %multiply.2635
  %244 = insertvalue { float, float, float, float, float } %227, float %subtract.2736, 1
  %245 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %246 = load float, ptr %245, align 4, !invariant.load !197
  %247 = add i32 %14, 0
  %248 = add i32 %13, 64
  %249 = getelementptr inbounds [8192 x [448 x float]], ptr %arg7, i32 0, i32 %247, i32 %248
  %250 = load float, ptr %249, align 4, !invariant.load !197
  %251 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %247, i32 %248
  %252 = load float, ptr %251, align 4, !invariant.load !197
  %add.2837 = fadd float %250, %252
  %multiply.3038 = fmul float %222, %add.2837
  %subtract.3139 = fsub float %246, %multiply.3038
  %253 = insertvalue { float, float, float, float, float } %244, float %subtract.3139, 2
  %254 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %255 = load float, ptr %254, align 4, !invariant.load !197
  %256 = add i32 %14, 0
  %257 = add i32 %13, 64
  %258 = add i32 %256, 0
  %259 = add i32 %257, 0
  %260 = getelementptr inbounds [8192 x [448 x float]], ptr %arg12, i32 0, i32 %258, i32 %259
  %261 = load float, ptr %260, align 4, !invariant.load !197
  %262 = add i32 %256, 0
  %263 = add i32 %257, 0
  %264 = getelementptr inbounds [8192 x [448 x float]], ptr %arg11, i32 0, i32 %262, i32 %263
  %265 = load float, ptr %264, align 4, !invariant.load !197
  %add.3440 = fadd float %261, %265
  %266 = add i32 %256, 0
  %267 = add i32 %257, 0
  %268 = getelementptr inbounds [8192 x [320 x float]], ptr %arg10, i32 0, i32 %266, i32 %267
  %269 = load float, ptr %268, align 4, !invariant.load !197
  %add.3641 = fadd float %add.3440, %269
  %multiply.3842 = fmul float %222, %add.3641
  %subtract.3943 = fsub float %255, %multiply.3842
  %270 = insertvalue { float, float, float, float, float } %253, float %subtract.3943, 3
  %271 = getelementptr inbounds float, ptr %arg13, i32 %linear_index3
  %272 = load float, ptr %271, align 4, !invariant.load !197
  %273 = add i32 %14, 0
  %274 = add i32 %13, 64
  %275 = getelementptr inbounds [8192 x [192 x float]], ptr %arg14, i32 0, i32 %273, i32 %274
  %276 = load float, ptr %275, align 4, !invariant.load !197
  %multiply.4144 = fmul float %222, %276
  %subtract.4245 = fsub float %272, %multiply.4144
  %277 = insertvalue { float, float, float, float, float } %270, float %subtract.4245, 4
  %278 = extractvalue { float, float, float, float, float } %277, 0
  %279 = getelementptr inbounds float, ptr %arg15, i32 %linear_index3
  store float %278, ptr %279, align 4
  %280 = extractvalue { float, float, float, float, float } %277, 1
  %281 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  store float %280, ptr %281, align 4
  %282 = extractvalue { float, float, float, float, float } %277, 2
  %283 = getelementptr inbounds float, ptr %arg17, i32 %linear_index3
  store float %282, ptr %283, align 4
  %284 = extractvalue { float, float, float, float, float } %277, 3
  %285 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  store float %284, ptr %285, align 4
  %286 = extractvalue { float, float, float, float, float } %277, 4
  %287 = getelementptr inbounds float, ptr %arg19, i32 %linear_index3
  store float %286, ptr %287, align 4
  br label %fusion_114.in_bounds-after
}

define void @fusion_110(ptr noalias align 16 dereferenceable(262144) %arg0, ptr noalias align 128 dereferenceable(12845056) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(11796480) %arg4, ptr noalias align 16 dereferenceable(262144) %arg5, ptr noalias align 128 dereferenceable(11796480) %arg6, ptr noalias align 16 dereferenceable(262144) %arg7, ptr noalias align 128 dereferenceable(11796480) %arg8, ptr noalias align 16 dereferenceable(262144) %arg9, ptr noalias align 128 dereferenceable(14942208) %arg10, ptr noalias align 128 dereferenceable(262144) %arg11, ptr noalias align 128 dereferenceable(262144) %arg12, ptr noalias align 128 dereferenceable(262144) %arg13, ptr noalias align 128 dereferenceable(262144) %arg14, ptr noalias align 128 dereferenceable(262144) %arg15) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !346
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 8
  %5 = udiv i32 %linear_index, 8
  %6 = icmp ult i32 %linear_index, 65536
  br i1 %6, label %fusion_110.in_bounds-true, label %fusion_110.in_bounds-after

fusion_110.in_bounds-after:                       ; preds = %fusion_110.in_bounds-true, %entry
  ret void

fusion_110.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 384
  %12 = getelementptr inbounds [8192 x [392 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.14 = fmul float %9, %13
  %subtract.15 = fsub float %8, %multiply.14
  %14 = insertvalue { float, float, float, float, float } undef, float %subtract.15, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 0
  %18 = add i32 %4, 96
  %19 = getelementptr inbounds [8192 x [360 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.17 = fmul float %9, %20
  %subtract.18 = fsub float %16, %multiply.17
  %21 = insertvalue { float, float, float, float, float } %14, float %subtract.18, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 0
  %25 = add i32 %4, 96
  %26 = getelementptr inbounds [8192 x [360 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.20 = fmul float %9, %27
  %subtract.21 = fsub float %23, %multiply.20
  %28 = insertvalue { float, float, float, float, float } %21, float %subtract.21, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 0
  %32 = add i32 %4, 96
  %33 = getelementptr inbounds [8192 x [360 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.23 = fmul float %9, %34
  %subtract.24 = fsub float %30, %multiply.23
  %35 = insertvalue { float, float, float, float, float } %28, float %subtract.24, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 0
  %39 = add i32 %4, 192
  %40 = getelementptr inbounds [8192 x [456 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.26 = fmul float %9, %41
  %subtract.27 = fsub float %37, %multiply.26
  %42 = insertvalue { float, float, float, float, float } %35, float %subtract.27, 4
  %43 = extractvalue { float, float, float, float, float } %42, 0
  %44 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  store float %43, ptr %44, align 4
  %45 = extractvalue { float, float, float, float, float } %42, 1
  %46 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %45, ptr %46, align 4
  %47 = extractvalue { float, float, float, float, float } %42, 2
  %48 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float } %42, 3
  %50 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float } %42, 4
  %52 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %51, ptr %52, align 4
  br label %fusion_110.in_bounds-after
}

define void @fusion_466(ptr noalias align 128 dereferenceable(11534336) %arg0, ptr noalias align 128 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(9961472) %arg2, ptr noalias align 128 dereferenceable(11534336) %arg3, ptr noalias align 128 dereferenceable(9961472) %arg4, ptr noalias align 128 dereferenceable(11534336) %arg5, ptr noalias align 128 dereferenceable(9961472) %arg6, ptr noalias align 128 dereferenceable(11534336) %arg7, ptr noalias align 128 dereferenceable(14680064) %arg8, ptr noalias align 128 dereferenceable(11796480) %arg9, ptr noalias align 128 dereferenceable(11534336) %arg10, ptr noalias align 128 dereferenceable(9961472) %arg11, ptr noalias align 128 dereferenceable(9961472) %arg12, ptr noalias align 128 dereferenceable(11796480) %arg13, ptr noalias align 128 dereferenceable(11796480) %arg14, ptr noalias align 128 dereferenceable(14942208) %arg15, ptr noalias align 128 dereferenceable(14680064) %arg16, ptr noalias align 128 dereferenceable(14680064) %arg17, ptr noalias align 128 dereferenceable(142606336) %arg18) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !347
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 35651584
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = urem i32 %5, 17
  %7 = udiv i32 %linear_index, 4352
  %8 = icmp ult i32 %linear_index, 35651584
  br i1 %8, label %fusion_466.in_bounds-true, label %fusion_466.in_bounds-after

fusion_466.in_bounds-after:                       ; preds = %concatenate.53.merge, %entry
  ret void

fusion_466.in_bounds-true:                        ; preds = %entry
  br label %concatenate.pivot.8.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %9 = phi i32 [ 0, %concatenate.pivot.0. ]
  %10 = sub nsw i32 %6, %9
  %11 = add i32 %7, 0
  %12 = add i32 %4, 200
  %13 = getelementptr inbounds [8192 x [456 x float]], ptr %arg15, i32 0, i32 %11, i32 %12
  %14 = load float, ptr %13, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.1.1
  %15 = phi i32 [ 1, %concatenate.pivot.1.1 ]
  %16 = sub nsw i32 %6, %15
  %17 = add i32 %7, 0
  %18 = add i32 %4, 104
  %19 = getelementptr inbounds [8192 x [360 x float]], ptr %arg14, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.2.2
  %21 = phi i32 [ 2, %concatenate.pivot.2.2 ]
  %22 = sub nsw i32 %6, %21
  %23 = add i32 %7, 0
  %24 = add i32 %4, 104
  %25 = getelementptr inbounds [8192 x [360 x float]], ptr %arg13, i32 0, i32 %23, i32 %24
  %26 = load float, ptr %25, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.3.3
  %27 = phi i32 [ 3, %concatenate.pivot.3.3 ]
  %28 = sub nsw i32 %6, %27
  %29 = add i32 %7, 0
  %30 = add i32 %4, 48
  %31 = getelementptr inbounds [8192 x [304 x float]], ptr %arg12, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id4:                    ; preds = %concatenate.pivot.4.4
  %33 = phi i32 [ 4, %concatenate.pivot.4.4 ]
  %34 = sub nsw i32 %6, %33
  %35 = add i32 %7, 0
  %36 = add i32 %4, 48
  %37 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %35, i32 %36
  %38 = load float, ptr %37, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id5:                    ; preds = %concatenate.pivot.5.5
  %39 = phi i32 [ 5, %concatenate.pivot.5.5 ]
  %40 = sub nsw i32 %6, %39
  %41 = add i32 %7, 0
  %42 = add i32 %4, 96
  %43 = getelementptr inbounds [8192 x [352 x float]], ptr %arg10, i32 0, i32 %41, i32 %42
  %44 = load float, ptr %43, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id6:                    ; preds = %concatenate.pivot.6.6
  %45 = phi i32 [ 6, %concatenate.pivot.6.6 ]
  %46 = sub nsw i32 %6, %45
  %47 = add i32 %7, 0
  %48 = add i32 %4, 104
  %49 = getelementptr inbounds [8192 x [360 x float]], ptr %arg9, i32 0, i32 %47, i32 %48
  %50 = load float, ptr %49, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id7:                    ; preds = %concatenate.pivot.7.7
  %51 = phi i32 [ 7, %concatenate.pivot.7.7 ]
  %52 = sub nsw i32 %6, %51
  %53 = add i32 %7, 0
  %54 = add i32 %4, 192
  %55 = getelementptr inbounds [8192 x [448 x float]], ptr %arg8, i32 0, i32 %53, i32 %54
  %56 = load float, ptr %55, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id8:                    ; preds = %concatenate.pivot.8.8
  %57 = phi i32 [ 8, %concatenate.pivot.8.8 ]
  %58 = sub nsw i32 %6, %57
  %59 = add i32 %7, 0
  %60 = add i32 %4, 96
  %61 = getelementptr inbounds [8192 x [352 x float]], ptr %arg7, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id9:                    ; preds = %concatenate.pivot.9.9
  %63 = phi i32 [ 9, %concatenate.pivot.9.9 ]
  %64 = sub nsw i32 %6, %63
  %65 = add i32 %7, 0
  %66 = add i32 %4, 48
  %67 = getelementptr inbounds [8192 x [304 x float]], ptr %arg6, i32 0, i32 %65, i32 %66
  %68 = load float, ptr %67, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id10:                   ; preds = %concatenate.pivot.10.10
  %69 = phi i32 [ 10, %concatenate.pivot.10.10 ]
  %70 = sub nsw i32 %6, %69
  %71 = add i32 %7, 0
  %72 = add i32 %4, 192
  %73 = getelementptr inbounds [8192 x [448 x float]], ptr %arg16, i32 0, i32 %71, i32 %72
  %74 = load float, ptr %73, align 4, !invariant.load !197
  %75 = getelementptr inbounds [8192 x [448 x float]], ptr %arg17, i32 0, i32 %71, i32 %72
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %add.39 = fadd float %74, %76
  br label %concatenate.53.merge

concat_index_from_operand_id11:                   ; preds = %concatenate.pivot.11.11
  %77 = phi i32 [ 11, %concatenate.pivot.11.11 ]
  %78 = sub nsw i32 %6, %77
  %79 = add i32 %7, 0
  %80 = add i32 %4, 96
  %81 = getelementptr inbounds [8192 x [352 x float]], ptr %arg5, i32 0, i32 %79, i32 %80
  %82 = load float, ptr %81, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id12:                   ; preds = %concatenate.pivot.12.12
  %83 = phi i32 [ 12, %concatenate.pivot.12.12 ]
  %84 = sub nsw i32 %6, %83
  %85 = add i32 %7, 0
  %86 = add i32 %4, 48
  %87 = getelementptr inbounds [8192 x [304 x float]], ptr %arg4, i32 0, i32 %85, i32 %86
  %88 = load float, ptr %87, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id13:                   ; preds = %concatenate.pivot.13.13
  %89 = phi i32 [ 13, %concatenate.pivot.13.13 ]
  %90 = sub nsw i32 %6, %89
  %91 = add i32 %7, 0
  %92 = add i32 %4, 96
  %93 = getelementptr inbounds [8192 x [352 x float]], ptr %arg3, i32 0, i32 %91, i32 %92
  %94 = load float, ptr %93, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id14:                   ; preds = %concatenate.pivot.14.14
  %95 = phi i32 [ 14, %concatenate.pivot.14.14 ]
  %96 = sub nsw i32 %6, %95
  %97 = add i32 %7, 0
  %98 = add i32 %4, 48
  %99 = getelementptr inbounds [8192 x [304 x float]], ptr %arg2, i32 0, i32 %97, i32 %98
  %100 = load float, ptr %99, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.15.15
  %101 = phi i32 [ 15, %concatenate.pivot.15.15 ]
  %102 = sub nsw i32 %6, %101
  %103 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %7, i32 %4
  %104 = load float, ptr %103, align 4, !invariant.load !197
  br label %concatenate.53.merge

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.16.16
  %105 = phi i32 [ 16, %concatenate.pivot.16.16 ]
  %106 = sub nsw i32 %6, %105
  %107 = add i32 %7, 0
  %108 = add i32 %4, 96
  %109 = getelementptr inbounds [8192 x [352 x float]], ptr %arg0, i32 0, i32 %107, i32 %108
  %110 = load float, ptr %109, align 4, !invariant.load !197
  br label %concatenate.53.merge

concatenate.pivot.8.:                             ; preds = %fusion_466.in_bounds-true
  %111 = icmp ult i32 %6, 8
  br i1 %111, label %concatenate.pivot.4., label %concatenate.pivot.12.

concatenate.pivot.4.:                             ; preds = %concatenate.pivot.8.
  %112 = icmp ult i32 %6, 4
  br i1 %112, label %concatenate.pivot.2., label %concatenate.pivot.6.

concatenate.pivot.2.:                             ; preds = %concatenate.pivot.4.
  %113 = icmp ult i32 %6, 2
  br i1 %113, label %concatenate.pivot.1., label %concatenate.pivot.3.

concatenate.pivot.1.:                             ; preds = %concatenate.pivot.2.
  %114 = icmp ult i32 %6, 1
  br i1 %114, label %concatenate.pivot.0., label %concatenate.pivot.1.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id0

concatenate.pivot.1.1:                            ; preds = %concatenate.pivot.1.
  br label %concat_index_from_operand_id1

concatenate.pivot.3.:                             ; preds = %concatenate.pivot.2.
  %115 = icmp ult i32 %6, 3
  br i1 %115, label %concatenate.pivot.2.2, label %concatenate.pivot.3.3

concatenate.pivot.2.2:                            ; preds = %concatenate.pivot.3.
  br label %concat_index_from_operand_id2

concatenate.pivot.3.3:                            ; preds = %concatenate.pivot.3.
  br label %concat_index_from_operand_id3

concatenate.pivot.6.:                             ; preds = %concatenate.pivot.4.
  %116 = icmp ult i32 %6, 6
  br i1 %116, label %concatenate.pivot.5., label %concatenate.pivot.7.

concatenate.pivot.5.:                             ; preds = %concatenate.pivot.6.
  %117 = icmp ult i32 %6, 5
  br i1 %117, label %concatenate.pivot.4.4, label %concatenate.pivot.5.5

concatenate.pivot.4.4:                            ; preds = %concatenate.pivot.5.
  br label %concat_index_from_operand_id4

concatenate.pivot.5.5:                            ; preds = %concatenate.pivot.5.
  br label %concat_index_from_operand_id5

concatenate.pivot.7.:                             ; preds = %concatenate.pivot.6.
  %118 = icmp ult i32 %6, 7
  br i1 %118, label %concatenate.pivot.6.6, label %concatenate.pivot.7.7

concatenate.pivot.6.6:                            ; preds = %concatenate.pivot.7.
  br label %concat_index_from_operand_id6

concatenate.pivot.7.7:                            ; preds = %concatenate.pivot.7.
  br label %concat_index_from_operand_id7

concatenate.pivot.12.:                            ; preds = %concatenate.pivot.8.
  %119 = icmp ult i32 %6, 12
  br i1 %119, label %concatenate.pivot.10., label %concatenate.pivot.14.

concatenate.pivot.10.:                            ; preds = %concatenate.pivot.12.
  %120 = icmp ult i32 %6, 10
  br i1 %120, label %concatenate.pivot.9., label %concatenate.pivot.11.

concatenate.pivot.9.:                             ; preds = %concatenate.pivot.10.
  %121 = icmp ult i32 %6, 9
  br i1 %121, label %concatenate.pivot.8.8, label %concatenate.pivot.9.9

concatenate.pivot.8.8:                            ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id8

concatenate.pivot.9.9:                            ; preds = %concatenate.pivot.9.
  br label %concat_index_from_operand_id9

concatenate.pivot.11.:                            ; preds = %concatenate.pivot.10.
  %122 = icmp ult i32 %6, 11
  br i1 %122, label %concatenate.pivot.10.10, label %concatenate.pivot.11.11

concatenate.pivot.10.10:                          ; preds = %concatenate.pivot.11.
  br label %concat_index_from_operand_id10

concatenate.pivot.11.11:                          ; preds = %concatenate.pivot.11.
  br label %concat_index_from_operand_id11

concatenate.pivot.14.:                            ; preds = %concatenate.pivot.12.
  %123 = icmp ult i32 %6, 14
  br i1 %123, label %concatenate.pivot.13., label %concatenate.pivot.15.

concatenate.pivot.13.:                            ; preds = %concatenate.pivot.14.
  %124 = icmp ult i32 %6, 13
  br i1 %124, label %concatenate.pivot.12.12, label %concatenate.pivot.13.13

concatenate.pivot.12.12:                          ; preds = %concatenate.pivot.13.
  br label %concat_index_from_operand_id12

concatenate.pivot.13.13:                          ; preds = %concatenate.pivot.13.
  br label %concat_index_from_operand_id13

concatenate.pivot.15.:                            ; preds = %concatenate.pivot.14.
  %125 = icmp ult i32 %6, 15
  br i1 %125, label %concatenate.pivot.14.14, label %concatenate.pivot.16.

concatenate.pivot.14.14:                          ; preds = %concatenate.pivot.15.
  br label %concat_index_from_operand_id14

concatenate.pivot.16.:                            ; preds = %concatenate.pivot.15.
  %126 = icmp ult i32 %6, 16
  br i1 %126, label %concatenate.pivot.15.15, label %concatenate.pivot.16.16

concatenate.pivot.15.15:                          ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id15

concatenate.pivot.16.16:                          ; preds = %concatenate.pivot.16.
  br label %concat_index_from_operand_id16

concatenate.53.merge:                             ; preds = %concat_index_from_operand_id16, %concat_index_from_operand_id15, %concat_index_from_operand_id14, %concat_index_from_operand_id13, %concat_index_from_operand_id12, %concat_index_from_operand_id11, %concat_index_from_operand_id10, %concat_index_from_operand_id9, %concat_index_from_operand_id8, %concat_index_from_operand_id7, %concat_index_from_operand_id6, %concat_index_from_operand_id5, %concat_index_from_operand_id4, %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %127 = phi float [ %14, %concat_index_from_operand_id0 ], [ %20, %concat_index_from_operand_id1 ], [ %26, %concat_index_from_operand_id2 ], [ %32, %concat_index_from_operand_id3 ], [ %38, %concat_index_from_operand_id4 ], [ %44, %concat_index_from_operand_id5 ], [ %50, %concat_index_from_operand_id6 ], [ %56, %concat_index_from_operand_id7 ], [ %62, %concat_index_from_operand_id8 ], [ %68, %concat_index_from_operand_id9 ], [ %add.39, %concat_index_from_operand_id10 ], [ %82, %concat_index_from_operand_id11 ], [ %88, %concat_index_from_operand_id12 ], [ %94, %concat_index_from_operand_id13 ], [ %100, %concat_index_from_operand_id14 ], [ %104, %concat_index_from_operand_id15 ], [ %110, %concat_index_from_operand_id16 ]
  %128 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %127, ptr %128, align 4
  br label %fusion_466.in_bounds-after
}

define void @fusion_453(ptr noalias align 16 dereferenceable(196608) %arg0, ptr noalias align 128 dereferenceable(3342336) %arg1, ptr noalias align 16 dereferenceable(196608) %arg2, ptr noalias align 128 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4) {
entry:
  %return_buffer7 = alloca float, align 4
  %parameter_buffer6 = alloca float, align 4
  %parameter_buffer5 = alloca float, align 4
  %reduce.20.inner.invar_address.reduction_dim.1 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.12.inner.invar_address.reduction_dim.1 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 8192
  br i1 %4, label %fusion_453.in_bounds-true, label %fusion_453.in_bounds-after

fusion_453.in_bounds-after:                       ; preds = %reduce.20.inner.loop_exit.reduction_dim.1, %entry
  ret void

fusion_453.in_bounds-true:                        ; preds = %entry
  %region_0_22_constant_7 = load float, ptr @36, align 4
  store float %region_0_22_constant_7, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.1

reduce.12.inner.loop_header.reduction_dim.1:      ; preds = %reduce.12.inner.loop_body.reduction_dim.1, %fusion_453.in_bounds-true
  %reduce.12.inner.indvar.reduction_dim.1 = load i32, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  %5 = icmp uge i32 %reduce.12.inner.indvar.reduction_dim.1, 6
  br i1 %5, label %reduce.12.inner.loop_exit.reduction_dim.1, label %reduce.12.inner.loop_body.reduction_dim.1

reduce.12.inner.loop_body.reduction_dim.1:        ; preds = %reduce.12.inner.loop_header.reduction_dim.1
  %6 = load float, ptr %accumulator_0, align 4
  %7 = add i32 %3, 0
  %8 = add i32 %reduce.12.inner.indvar.reduction_dim.1, 0
  %9 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %7, i32 15, i32 %8
  %10 = load float, ptr %9, align 4, !invariant.load !197
  %11 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr %arg0, i32 0, i32 %3, i32 0, i32 %reduce.12.inner.indvar.reduction_dim.1
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %multiply.5 = fmul float %10, %12
  store float %6, ptr %parameter_buffer, align 4
  store float %multiply.5, ptr %parameter_buffer1, align 4
  call void @region_1_8(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %13 = load float, ptr %return_buffer, align 4
  store float %13, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.12.inner.indvar.reduction_dim.1, 1
  store i32 %invar.inc, ptr %reduce.12.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.1

reduce.12.inner.loop_exit.reduction_dim.1:        ; preds = %reduce.12.inner.loop_header.reduction_dim.1
  %14 = load float, ptr %accumulator_0, align 4
  %15 = insertvalue { float, float } undef, float %14, 0
  %region_0_22_constant_73 = load float, ptr @36, align 4
  store float %region_0_22_constant_73, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.20.inner.loop_header.reduction_dim.1

reduce.20.inner.loop_header.reduction_dim.1:      ; preds = %reduce.20.inner.loop_body.reduction_dim.1, %reduce.12.inner.loop_exit.reduction_dim.1
  %reduce.20.inner.indvar.reduction_dim.1 = load i32, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  %16 = icmp uge i32 %reduce.20.inner.indvar.reduction_dim.1, 6
  br i1 %16, label %reduce.20.inner.loop_exit.reduction_dim.1, label %reduce.20.inner.loop_body.reduction_dim.1

reduce.20.inner.loop_body.reduction_dim.1:        ; preds = %reduce.20.inner.loop_header.reduction_dim.1
  %17 = load float, ptr %accumulator_02, align 4
  %18 = add i32 %3, 0
  %19 = add i32 %reduce.20.inner.indvar.reduction_dim.1, 0
  %20 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %18, i32 16, i32 %19
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %22 = getelementptr inbounds [8192 x [1 x [6 x float]]], ptr %arg2, i32 0, i32 %3, i32 0, i32 %reduce.20.inner.indvar.reduction_dim.1
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %multiply.14 = fmul float %21, %23
  store float %17, ptr %parameter_buffer5, align 4
  store float %multiply.14, ptr %parameter_buffer6, align 4
  call void @region_2_16(ptr %parameter_buffer5, ptr %parameter_buffer6, ptr %return_buffer7)
  %24 = load float, ptr %return_buffer7, align 4
  store float %24, ptr %accumulator_02, align 4
  %invar.inc4 = add nuw nsw i32 %reduce.20.inner.indvar.reduction_dim.1, 1
  store i32 %invar.inc4, ptr %reduce.20.inner.invar_address.reduction_dim.1, align 4
  br label %reduce.20.inner.loop_header.reduction_dim.1

reduce.20.inner.loop_exit.reduction_dim.1:        ; preds = %reduce.20.inner.loop_header.reduction_dim.1
  %25 = load float, ptr %accumulator_02, align 4
  %26 = insertvalue { float, float } %15, float %25, 1
  %27 = extractvalue { float, float } %26, 0
  %28 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %27, ptr %28, align 4
  %29 = extractvalue { float, float } %26, 1
  %30 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %29, ptr %30, align 4
  br label %fusion_453.in_bounds-after
}

define internal void @region_1_8(ptr dereferenceable(4) %Arg_0.9.typed, ptr dereferenceable(4) %Arg_1.10.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.11.typed = alloca float, align 4
  %Arg_0.9 = load float, ptr %Arg_0.9.typed, align 4
  %Arg_1.10 = load float, ptr %Arg_1.10.typed, align 4
  %add.11 = fadd float %Arg_0.9, %Arg_1.10
  store float %add.11, ptr %add.11.typed, align 4
  %load_ret_value = load float, ptr %add.11.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_16(ptr dereferenceable(4) %Arg_0.17.typed, ptr dereferenceable(4) %Arg_1.18.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.19.typed = alloca float, align 4
  %Arg_0.17 = load float, ptr %Arg_0.17.typed, align 4
  %Arg_1.18 = load float, ptr %Arg_1.18.typed, align 4
  %add.19 = fadd float %Arg_0.17, %Arg_1.18
  store float %add.19, ptr %add.19.typed, align 4
  %load_ret_value = load float, ptr %add.19.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_8(ptr noalias align 16 dereferenceable(196608) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 128 dereferenceable(3342336) %arg2, ptr noalias align 16 dereferenceable(196608) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 128 dereferenceable(1536) %arg5, ptr noalias align 128 dereferenceable(196608) %arg6, ptr noalias align 128 dereferenceable(1536) %arg7, ptr noalias align 128 dereferenceable(196608) %arg8) {
entry:
  %return_buffer61 = alloca float, align 4
  %result_from_other_lane59 = alloca float, align 4
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer43 = alloca float, align 4
  %result_from_other_lane41 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after63, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_28_constant_11 = load float, ptr @37, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_28_constant_11, ptr %2, align 4
  %region_0_28_constant_113 = load float, ptr @37, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_28_constant_113, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !346
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 64
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 1
  %14 = udiv i32 %9, 1
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 1
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 0
  %tile_bound4 = select i1 %18, i32 6, i32 32
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc5 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc5, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 1
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound4
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !348

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !349

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %29 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %30 = load float, ptr %current_output, align 4
  store float %30, ptr %29, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache62, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %31 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result30 = load float, ptr %31, align 4
  %32 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 16, i32 31)
  store float %32, ptr %result_from_other_lane, align 4
  call void @region_1_12__2(ptr %31, ptr %result_from_other_lane, ptr %return_buffer31)
  %33 = load float, ptr %return_buffer31, align 4
  store float %33, ptr %31, align 4
  %partial_reduction_result33 = load float, ptr %31, align 4
  %34 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 8, i32 31)
  store float %34, ptr %result_from_other_lane32, align 4
  call void @region_1_12__2(ptr %31, ptr %result_from_other_lane32, ptr %return_buffer34)
  %35 = load float, ptr %return_buffer34, align 4
  store float %35, ptr %31, align 4
  %partial_reduction_result36 = load float, ptr %31, align 4
  %36 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 4, i32 31)
  store float %36, ptr %result_from_other_lane35, align 4
  call void @region_1_12__2(ptr %31, ptr %result_from_other_lane35, ptr %return_buffer37)
  %37 = load float, ptr %return_buffer37, align 4
  store float %37, ptr %31, align 4
  %partial_reduction_result39 = load float, ptr %31, align 4
  %38 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 2, i32 31)
  store float %38, ptr %result_from_other_lane38, align 4
  call void @region_1_12__2(ptr %31, ptr %result_from_other_lane38, ptr %return_buffer40)
  %39 = load float, ptr %return_buffer40, align 4
  store float %39, ptr %31, align 4
  %partial_reduction_result42 = load float, ptr %31, align 4
  %40 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result42, i32 1, i32 31)
  store float %40, ptr %result_from_other_lane41, align 4
  call void @region_1_12__2(ptr %31, ptr %result_from_other_lane41, ptr %return_buffer43)
  %41 = load float, ptr %return_buffer43, align 4
  store float %41, ptr %31, align 4
  %42 = icmp ult i32 %thread_id.x, %tile_bound
  %43 = mul i32 %thread_id.y, 1
  %44 = icmp ult i32 %43, %tile_bound4
  %45 = and i1 %44, %42
  %46 = icmp eq i32 %lane_id, 0
  %47 = and i1 %45, %46
  br i1 %47, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address44 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %48 = addrspacecast ptr addrspace(3) %shmem_output_address44 to ptr
  %current_output45 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %49 = load float, ptr %current_output45, align 4
  store float %49, ptr %48, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr46 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache63, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %50 = addrspacecast ptr addrspace(3) %shmem_transposed_addr46 to ptr
  %partial_reduction_result48 = load float, ptr %50, align 4
  %51 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 16, i32 31)
  store float %51, ptr %result_from_other_lane47, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane47, ptr %return_buffer49)
  %52 = load float, ptr %return_buffer49, align 4
  store float %52, ptr %50, align 4
  %partial_reduction_result51 = load float, ptr %50, align 4
  %53 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 8, i32 31)
  store float %53, ptr %result_from_other_lane50, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane50, ptr %return_buffer52)
  %54 = load float, ptr %return_buffer52, align 4
  store float %54, ptr %50, align 4
  %partial_reduction_result54 = load float, ptr %50, align 4
  %55 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 4, i32 31)
  store float %55, ptr %result_from_other_lane53, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane53, ptr %return_buffer55)
  %56 = load float, ptr %return_buffer55, align 4
  store float %56, ptr %50, align 4
  %partial_reduction_result57 = load float, ptr %50, align 4
  %57 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 2, i32 31)
  store float %57, ptr %result_from_other_lane56, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane56, ptr %return_buffer58)
  %58 = load float, ptr %return_buffer58, align 4
  store float %58, ptr %50, align 4
  %partial_reduction_result60 = load float, ptr %50, align 4
  %59 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result60, i32 1, i32 31)
  store float %59, ptr %result_from_other_lane59, align 4
  call void @region_2_22__1(ptr %50, ptr %result_from_other_lane59, ptr %return_buffer61)
  %60 = load float, ptr %return_buffer61, align 4
  store float %60, ptr %50, align 4
  %61 = icmp ult i32 %thread_id.x, %tile_bound
  %62 = mul i32 %thread_id.y, 1
  %63 = icmp ult i32 %62, %tile_bound4
  %64 = and i1 %63, %61
  %65 = icmp eq i32 %lane_id, 0
  %66 = and i1 %64, %65
  br i1 %66, label %reduction_write_output-true62, label %reduction_write_output-after63

reduction_write_output-after63:                   ; preds = %reduction_write_output-true62, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %67 = mul nuw nsw i32 %27, 1
  %68 = add nuw nsw i32 0, %67
  %69 = mul nuw nsw i32 %26, 6
  %70 = add nuw nsw i32 %68, %69
  %71 = mul nuw nsw i32 %tile_origin.0, 768
  %72 = add nuw nsw i32 %70, %71
  %73 = udiv i32 %72, 1
  %74 = urem i32 %73, 6
  %75 = udiv i32 %72, 6
  %76 = urem i32 %75, 128
  %77 = udiv i32 %72, 768
  %78 = mul i32 %thread_id.x, 1
  %79 = sub i32 %x_loc, %78
  %80 = mul nuw nsw i32 %74, 1
  %81 = add nuw nsw i32 0, %80
  %82 = udiv i32 %81, 6
  %83 = mul nuw nsw i32 %76, 1
  %84 = add nuw nsw i32 0, %83
  %85 = mul nuw nsw i32 %77, 128
  %86 = add nuw nsw i32 %84, %85
  %87 = udiv i32 %86, 8192
  %88 = add i32 %86, 0
  %89 = add i32 %81, 0
  %Arg_2.3 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %88, i32 16, i32 %89
  %Arg_2.36 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %Arg_1.2 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %86
  %Arg_1.27 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %subtract.8 = fsub float %Arg_2.36, %Arg_1.27
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %72
  %Arg_0.18 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.9 = fmul float %subtract.8, %Arg_0.18
  store float %multiply.9, ptr %reduction_input_address, align 4
  %90 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %79
  call void @region_1_12__2(ptr %90, ptr %reduction_input_address, ptr %return_buffer)
  %91 = load float, ptr %return_buffer, align 4
  store float %91, ptr %90, align 4
  %92 = mul nuw nsw i32 %74, 1
  %93 = add nuw nsw i32 0, %92
  %94 = udiv i32 %93, 6
  %95 = mul nuw nsw i32 %76, 1
  %96 = add nuw nsw i32 0, %95
  %97 = mul nuw nsw i32 %77, 128
  %98 = add nuw nsw i32 %96, %97
  %99 = udiv i32 %98, 8192
  %100 = add i32 %98, 0
  %101 = add i32 %93, 0
  %Arg_2.39 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %100, i32 15, i32 %101
  %Arg_2.310 = load float, ptr %Arg_2.39, align 4, !invariant.load !197
  %Arg_4.5 = getelementptr inbounds [8192 x float], ptr %arg4, i32 0, i32 %98
  %Arg_4.511 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %subtract.19 = fsub float %Arg_2.310, %Arg_4.511
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %72
  %Arg_3.412 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %multiply.20 = fmul float %subtract.19, %Arg_3.412
  store float %multiply.20, ptr %reduction_input_address1, align 4
  %102 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %79
  call void @region_2_22__1(ptr %102, ptr %reduction_input_address1, ptr %return_buffer13)
  %103 = load float, ptr %return_buffer13, align 4
  store float %103, ptr %102, align 4
  %104 = mul nuw nsw i32 %74, 1
  %105 = add nuw nsw i32 0, %104
  %106 = udiv i32 %105, 6
  %107 = mul nuw nsw i32 %76, 1
  %108 = add nuw nsw i32 0, %107
  %109 = mul nuw nsw i32 %77, 128
  %110 = add nuw nsw i32 %108, %109
  %111 = udiv i32 %110, 8192
  %112 = add i32 %110, 0
  %113 = add i32 %105, 0
  %Arg_2.314 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %112, i32 16, i32 %113
  %Arg_2.315 = load float, ptr %Arg_2.314, align 4, !invariant.load !197
  %Arg_1.216 = getelementptr inbounds [8192 x float], ptr %arg1, i32 0, i32 %110
  %Arg_1.217 = load float, ptr %Arg_1.216, align 4, !invariant.load !197
  %subtract.818 = fsub float %Arg_2.315, %Arg_1.217
  %Arg_0.119 = getelementptr inbounds float, ptr %arg0, i32 %72
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !197
  %multiply.921 = fmul float %subtract.818, %Arg_0.120
  %114 = mul nuw nsw i32 %74, 1
  %115 = add nuw nsw i32 0, %114
  %116 = udiv i32 %115, 6
  %117 = mul nuw nsw i32 %76, 1
  %118 = add nuw nsw i32 0, %117
  %119 = mul nuw nsw i32 %77, 128
  %120 = add nuw nsw i32 %118, %119
  %121 = udiv i32 %120, 8192
  %122 = add i32 %120, 0
  %123 = add i32 %115, 0
  %Arg_2.322 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %122, i32 15, i32 %123
  %Arg_2.323 = load float, ptr %Arg_2.322, align 4, !invariant.load !197
  %Arg_4.524 = getelementptr inbounds [8192 x float], ptr %arg4, i32 0, i32 %120
  %Arg_4.525 = load float, ptr %Arg_4.524, align 4, !invariant.load !197
  %subtract.1926 = fsub float %Arg_2.323, %Arg_4.525
  %Arg_3.427 = getelementptr inbounds float, ptr %arg3, i32 %72
  %Arg_3.428 = load float, ptr %Arg_3.427, align 4, !invariant.load !197
  %multiply.2029 = fmul float %subtract.1926, %Arg_3.428
  %124 = mul nuw nsw i32 %74, 1
  %125 = add nuw nsw i32 0, %124
  %126 = udiv i32 %125, 6
  %127 = mul nuw nsw i32 %76, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %77, 128
  %130 = add nuw nsw i32 %128, %129
  %131 = udiv i32 %130, 8192
  %132 = getelementptr inbounds float, ptr %arg6, i32 %72
  store float %multiply.921, ptr %132, align 4
  %133 = mul nuw nsw i32 %74, 1
  %134 = add nuw nsw i32 0, %133
  %135 = udiv i32 %134, 6
  %136 = mul nuw nsw i32 %76, 1
  %137 = add nuw nsw i32 0, %136
  %138 = mul nuw nsw i32 %77, 128
  %139 = add nuw nsw i32 %137, %138
  %140 = udiv i32 %139, 8192
  %141 = getelementptr inbounds float, ptr %arg8, i32 %72
  store float %multiply.2029, ptr %141, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %142 = mul i32 %thread_id.y, 1
  %143 = add i32 %tile_origin.1, %thread_id.x
  %144 = add i32 %tile_origin.2, %142
  %145 = add i32 %144, 0
  %146 = mul i32 %tile_origin.0, 6
  %147 = add i32 %146, %145
  %148 = udiv i32 %147, 1
  %149 = urem i32 %148, 6
  %150 = udiv i32 %147, 6
  %output_element_address = getelementptr inbounds [64 x [6 x float]], ptr %arg5, i32 0, i32 %150, i32 %149
  %output = load float, ptr %31, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true62:                    ; preds = %reduction_write_output-after
  %151 = mul i32 %thread_id.y, 1
  %152 = add i32 %tile_origin.1, %thread_id.x
  %153 = add i32 %tile_origin.2, %151
  %154 = add i32 %153, 0
  %155 = mul i32 %tile_origin.0, 6
  %156 = add i32 %155, %154
  %157 = udiv i32 %156, 1
  %158 = urem i32 %157, 6
  %159 = udiv i32 %156, 6
  %output_element_address64 = getelementptr inbounds [64 x [6 x float]], ptr %arg7, i32 0, i32 %159, i32 %158
  %output65 = load float, ptr %50, align 4
  store float %output65, ptr %output_element_address64, align 4
  br label %reduction_write_output-after63
}

define internal void @region_1_12__2(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_22__1(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_9(ptr noalias align 16 dereferenceable(24) %arg0, ptr noalias align 128 dereferenceable(1536) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(24) %arg3, ptr noalias align 128 dereferenceable(1536) %arg4, ptr noalias align 128 dereferenceable(24) %arg5, ptr noalias align 128 dereferenceable(24) %arg6) {
entry:
  %return_buffer7 = alloca float, align 4
  %parameter_buffer6 = alloca float, align 4
  %parameter_buffer5 = alloca float, align 4
  %reduce.19.inner.invar_address.reduction_dim.0 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.12.inner.invar_address.reduction_dim.0 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !350
  %2 = mul nuw nsw i32 %0, 6
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 6
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 6
  br i1 %4, label %fusion_9.in_bounds-true, label %fusion_9.in_bounds-after

fusion_9.in_bounds-after:                         ; preds = %reduce.19.inner.loop_exit.reduction_dim.0, %entry
  ret void

fusion_9.in_bounds-true:                          ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %region_0_23_constant_7 = load float, ptr @38, align 4
  store float %region_0_23_constant_7, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.0

reduce.12.inner.loop_header.reduction_dim.0:      ; preds = %reduce.12.inner.loop_body.reduction_dim.0, %fusion_9.in_bounds-true
  %reduce.12.inner.indvar.reduction_dim.0 = load i32, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  %8 = icmp uge i32 %reduce.12.inner.indvar.reduction_dim.0, 64
  br i1 %8, label %reduce.12.inner.loop_exit.reduction_dim.0, label %reduce.12.inner.loop_body.reduction_dim.0

reduce.12.inner.loop_body.reduction_dim.0:        ; preds = %reduce.12.inner.loop_header.reduction_dim.0
  %9 = load float, ptr %accumulator_0, align 4
  %10 = getelementptr inbounds [64 x [6 x float]], ptr %arg1, i32 0, i32 %reduce.12.inner.indvar.reduction_dim.0, i32 %3
  %11 = load float, ptr %10, align 4, !invariant.load !197
  store float %9, ptr %parameter_buffer, align 4
  store float %11, ptr %parameter_buffer1, align 4
  call void @region_1_8__1(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %12 = load float, ptr %return_buffer, align 4
  store float %12, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.12.inner.indvar.reduction_dim.0, 1
  store i32 %invar.inc, ptr %reduce.12.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.12.inner.loop_header.reduction_dim.0

reduce.12.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.12.inner.loop_header.reduction_dim.0
  %13 = load float, ptr %accumulator_0, align 4
  %multiply.13 = fmul float %7, %13
  %subtract.14 = fsub float %6, %multiply.13
  %14 = insertvalue { float, float } undef, float %subtract.14, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = load float, ptr %arg2, align 4, !invariant.load !197
  %region_0_23_constant_73 = load float, ptr @38, align 4
  store float %region_0_23_constant_73, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.19.inner.loop_header.reduction_dim.0

reduce.19.inner.loop_header.reduction_dim.0:      ; preds = %reduce.19.inner.loop_body.reduction_dim.0, %reduce.12.inner.loop_exit.reduction_dim.0
  %reduce.19.inner.indvar.reduction_dim.0 = load i32, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  %18 = icmp uge i32 %reduce.19.inner.indvar.reduction_dim.0, 64
  br i1 %18, label %reduce.19.inner.loop_exit.reduction_dim.0, label %reduce.19.inner.loop_body.reduction_dim.0

reduce.19.inner.loop_body.reduction_dim.0:        ; preds = %reduce.19.inner.loop_header.reduction_dim.0
  %19 = load float, ptr %accumulator_02, align 4
  %20 = getelementptr inbounds [64 x [6 x float]], ptr %arg4, i32 0, i32 %reduce.19.inner.indvar.reduction_dim.0, i32 %3
  %21 = load float, ptr %20, align 4, !invariant.load !197
  store float %19, ptr %parameter_buffer5, align 4
  store float %21, ptr %parameter_buffer6, align 4
  call void @region_2_15(ptr %parameter_buffer5, ptr %parameter_buffer6, ptr %return_buffer7)
  %22 = load float, ptr %return_buffer7, align 4
  store float %22, ptr %accumulator_02, align 4
  %invar.inc4 = add nuw nsw i32 %reduce.19.inner.indvar.reduction_dim.0, 1
  store i32 %invar.inc4, ptr %reduce.19.inner.invar_address.reduction_dim.0, align 4
  br label %reduce.19.inner.loop_header.reduction_dim.0

reduce.19.inner.loop_exit.reduction_dim.0:        ; preds = %reduce.19.inner.loop_header.reduction_dim.0
  %23 = load float, ptr %accumulator_02, align 4
  %multiply.20 = fmul float %17, %23
  %subtract.21 = fsub float %16, %multiply.20
  %24 = insertvalue { float, float } %14, float %subtract.21, 1
  %25 = extractvalue { float, float } %24, 0
  %26 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %25, ptr %26, align 4
  %27 = extractvalue { float, float } %24, 1
  %28 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %27, ptr %28, align 4
  br label %fusion_9.in_bounds-after
}

define internal void @region_1_8__1(ptr dereferenceable(4) %Arg_0.9.typed, ptr dereferenceable(4) %Arg_1.10.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.11.typed = alloca float, align 4
  %Arg_0.9 = load float, ptr %Arg_0.9.typed, align 4
  %Arg_1.10 = load float, ptr %Arg_1.10.typed, align 4
  %add.11 = fadd float %Arg_0.9, %Arg_1.10
  store float %add.11, ptr %add.11.typed, align 4
  %load_ret_value = load float, ptr %add.11.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_15(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_4(ptr noalias align 16 dereferenceable(35904) %arg0, ptr noalias align 128 dereferenceable(35904) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(35904) %arg3, ptr noalias align 128 dereferenceable(35904) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !351
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 9216
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 8976
  br i1 %6, label %fusion_4.in_bounds-true, label %fusion_4.in_bounds-after

fusion_4.in_bounds-after:                         ; preds = %fusion_4.in_bounds-true, %entry
  ret void

fusion_4.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.7 = fmul float %9, %11
  %subtract.8 = fsub float %8, %multiply.7
  %12 = insertvalue { float, float } undef, float %subtract.8, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.9 = fmul float %9, %16
  %subtract.10 = fsub float %14, %multiply.9
  %17 = insertvalue { float, float } %12, float %subtract.10, 1
  %18 = extractvalue { float, float } %17, 0
  %19 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %18, ptr %19, align 4
  %20 = extractvalue { float, float } %17, 1
  %21 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %20, ptr %21, align 4
  br label %fusion_4.in_bounds-after
}

define void @fusion_449(ptr noalias align 16 dereferenceable(2949120) %arg0, ptr noalias align 128 dereferenceable(3342336) %arg1, ptr noalias align 128 dereferenceable(491520) %arg2) {
entry:
  %return_buffer37 = alloca float, align 4
  %parameter_buffer36 = alloca float, align 4
  %parameter_buffer35 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.231 = alloca i32, align 4
  %accumulator_026 = alloca float, align 4
  %return_buffer25 = alloca float, align 4
  %parameter_buffer24 = alloca float, align 4
  %parameter_buffer23 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.219 = alloca i32, align 4
  %accumulator_014 = alloca float, align 4
  %return_buffer13 = alloca float, align 4
  %parameter_buffer12 = alloca float, align 4
  %parameter_buffer11 = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.27 = alloca i32, align 4
  %accumulator_02 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %parameter_buffer1 = alloca float, align 4
  %parameter_buffer = alloca float, align 4
  %reduce.10.inner.invar_address.reduction_dim.2 = alloca i32, align 4
  %accumulator_0 = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !352
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 30720
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 15
  %5 = udiv i32 %linear_index_base, 15
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 15
  %8 = udiv i32 %linear_index1, 15
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 15
  %11 = udiv i32 %linear_index2, 15
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 15
  %14 = udiv i32 %linear_index3, 15
  %15 = icmp ult i32 %linear_index_base, 122880
  br i1 %15, label %fusion_449.in_bounds-true, label %fusion_449.in_bounds-after

fusion_449.in_bounds-after:                       ; preds = %reduce.10.inner.loop_exit.reduction_dim.228, %entry
  ret void

fusion_449.in_bounds-true:                        ; preds = %entry
  %region_0_11_constant_5 = load float, ptr @39, align 4
  store float %region_0_11_constant_5, ptr %accumulator_0, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.2

reduce.10.inner.loop_header.reduction_dim.2:      ; preds = %reduce.10.inner.loop_body.reduction_dim.2, %fusion_449.in_bounds-true
  %reduce.10.inner.indvar.reduction_dim.2 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  %16 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.2, 6
  br i1 %16, label %reduce.10.inner.loop_exit.reduction_dim.2, label %reduce.10.inner.loop_body.reduction_dim.2

reduce.10.inner.loop_body.reduction_dim.2:        ; preds = %reduce.10.inner.loop_header.reduction_dim.2
  %17 = load float, ptr %accumulator_0, align 4
  %18 = add i32 %5, 0
  %19 = add i32 %4, 0
  %20 = add i32 %reduce.10.inner.indvar.reduction_dim.2, 0
  %21 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %18, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %5, i32 %4, i32 %reduce.10.inner.indvar.reduction_dim.2
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %multiply.4 = fmul float %22, %24
  store float %17, ptr %parameter_buffer, align 4
  store float %multiply.4, ptr %parameter_buffer1, align 4
  call void @region_1_6(ptr %parameter_buffer, ptr %parameter_buffer1, ptr %return_buffer)
  %25 = load float, ptr %return_buffer, align 4
  store float %25, ptr %accumulator_0, align 4
  %invar.inc = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.2, 1
  store i32 %invar.inc, ptr %reduce.10.inner.invar_address.reduction_dim.2, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.2

reduce.10.inner.loop_exit.reduction_dim.2:        ; preds = %reduce.10.inner.loop_header.reduction_dim.2
  %26 = load float, ptr %accumulator_0, align 4
  %27 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %26, ptr %27, align 4
  %region_0_11_constant_53 = load float, ptr @39, align 4
  store float %region_0_11_constant_53, ptr %accumulator_02, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.25

reduce.10.inner.loop_header.reduction_dim.25:     ; preds = %reduce.10.inner.loop_body.reduction_dim.26, %reduce.10.inner.loop_exit.reduction_dim.2
  %reduce.10.inner.indvar.reduction_dim.28 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  %28 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.28, 6
  br i1 %28, label %reduce.10.inner.loop_exit.reduction_dim.24, label %reduce.10.inner.loop_body.reduction_dim.26

reduce.10.inner.loop_body.reduction_dim.26:       ; preds = %reduce.10.inner.loop_header.reduction_dim.25
  %29 = load float, ptr %accumulator_02, align 4
  %30 = add i32 %8, 0
  %31 = add i32 %7, 0
  %32 = add i32 %reduce.10.inner.indvar.reduction_dim.28, 0
  %33 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %30, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %8, i32 %7, i32 %reduce.10.inner.indvar.reduction_dim.28
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %multiply.410 = fmul float %34, %36
  store float %29, ptr %parameter_buffer11, align 4
  store float %multiply.410, ptr %parameter_buffer12, align 4
  call void @region_1_6(ptr %parameter_buffer11, ptr %parameter_buffer12, ptr %return_buffer13)
  %37 = load float, ptr %return_buffer13, align 4
  store float %37, ptr %accumulator_02, align 4
  %invar.inc9 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.28, 1
  store i32 %invar.inc9, ptr %reduce.10.inner.invar_address.reduction_dim.27, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.25

reduce.10.inner.loop_exit.reduction_dim.24:       ; preds = %reduce.10.inner.loop_header.reduction_dim.25
  %38 = load float, ptr %accumulator_02, align 4
  %39 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %38, ptr %39, align 4
  %region_0_11_constant_515 = load float, ptr @39, align 4
  store float %region_0_11_constant_515, ptr %accumulator_014, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.217

reduce.10.inner.loop_header.reduction_dim.217:    ; preds = %reduce.10.inner.loop_body.reduction_dim.218, %reduce.10.inner.loop_exit.reduction_dim.24
  %reduce.10.inner.indvar.reduction_dim.220 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  %40 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.220, 6
  br i1 %40, label %reduce.10.inner.loop_exit.reduction_dim.216, label %reduce.10.inner.loop_body.reduction_dim.218

reduce.10.inner.loop_body.reduction_dim.218:      ; preds = %reduce.10.inner.loop_header.reduction_dim.217
  %41 = load float, ptr %accumulator_014, align 4
  %42 = add i32 %11, 0
  %43 = add i32 %10, 0
  %44 = add i32 %reduce.10.inner.indvar.reduction_dim.220, 0
  %45 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %42, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %47 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %11, i32 %10, i32 %reduce.10.inner.indvar.reduction_dim.220
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.422 = fmul float %46, %48
  store float %41, ptr %parameter_buffer23, align 4
  store float %multiply.422, ptr %parameter_buffer24, align 4
  call void @region_1_6(ptr %parameter_buffer23, ptr %parameter_buffer24, ptr %return_buffer25)
  %49 = load float, ptr %return_buffer25, align 4
  store float %49, ptr %accumulator_014, align 4
  %invar.inc21 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.220, 1
  store i32 %invar.inc21, ptr %reduce.10.inner.invar_address.reduction_dim.219, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.217

reduce.10.inner.loop_exit.reduction_dim.216:      ; preds = %reduce.10.inner.loop_header.reduction_dim.217
  %50 = load float, ptr %accumulator_014, align 4
  %51 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %50, ptr %51, align 4
  %region_0_11_constant_527 = load float, ptr @39, align 4
  store float %region_0_11_constant_527, ptr %accumulator_026, align 4
  store i32 0, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.229

reduce.10.inner.loop_header.reduction_dim.229:    ; preds = %reduce.10.inner.loop_body.reduction_dim.230, %reduce.10.inner.loop_exit.reduction_dim.216
  %reduce.10.inner.indvar.reduction_dim.232 = load i32, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  %52 = icmp uge i32 %reduce.10.inner.indvar.reduction_dim.232, 6
  br i1 %52, label %reduce.10.inner.loop_exit.reduction_dim.228, label %reduce.10.inner.loop_body.reduction_dim.230

reduce.10.inner.loop_body.reduction_dim.230:      ; preds = %reduce.10.inner.loop_header.reduction_dim.229
  %53 = load float, ptr %accumulator_026, align 4
  %54 = add i32 %14, 0
  %55 = add i32 %13, 0
  %56 = add i32 %reduce.10.inner.indvar.reduction_dim.232, 0
  %57 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg1, i32 0, i32 %54, i32 %55, i32 %56
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = getelementptr inbounds [8192 x [15 x [6 x float]]], ptr %arg0, i32 0, i32 %14, i32 %13, i32 %reduce.10.inner.indvar.reduction_dim.232
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %multiply.434 = fmul float %58, %60
  store float %53, ptr %parameter_buffer35, align 4
  store float %multiply.434, ptr %parameter_buffer36, align 4
  call void @region_1_6(ptr %parameter_buffer35, ptr %parameter_buffer36, ptr %return_buffer37)
  %61 = load float, ptr %return_buffer37, align 4
  store float %61, ptr %accumulator_026, align 4
  %invar.inc33 = add nuw nsw i32 %reduce.10.inner.indvar.reduction_dim.232, 1
  store i32 %invar.inc33, ptr %reduce.10.inner.invar_address.reduction_dim.231, align 4
  br label %reduce.10.inner.loop_header.reduction_dim.229

reduce.10.inner.loop_exit.reduction_dim.228:      ; preds = %reduce.10.inner.loop_header.reduction_dim.229
  %62 = load float, ptr %accumulator_026, align 4
  %63 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %62, ptr %63, align 4
  br label %fusion_449.in_bounds-after
}

define internal void @region_1_6(ptr dereferenceable(4) %Arg_0.7.typed, ptr dereferenceable(4) %Arg_1.8.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.9.typed = alloca float, align 4
  %Arg_0.7 = load float, ptr %Arg_0.7.typed, align 4
  %Arg_1.8 = load float, ptr %Arg_1.8.typed, align 4
  %add.9 = fadd float %Arg_0.7, %Arg_1.8
  store float %add.9, ptr %add.9.typed, align 4
  %load_ret_value = load float, ptr %add.9.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_12(ptr noalias align 16 dereferenceable(2949120) %arg0, ptr noalias align 128 dereferenceable(491520) %arg1, ptr noalias align 128 dereferenceable(3342336) %arg2, ptr noalias align 128 dereferenceable(23040) %arg3, ptr noalias align 128 dereferenceable(2949120) %arg4) {
entry:
  %return_buffer27 = alloca float, align 4
  %result_from_other_lane25 = alloca float, align 4
  %return_buffer24 = alloca float, align 4
  %result_from_other_lane22 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %result_from_other_lane19 = alloca float, align 4
  %return_buffer18 = alloca float, align 4
  %result_from_other_lane16 = alloca float, align 4
  %return_buffer15 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_16_constant_9 = load float, ptr @40, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_16_constant_9, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !353
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 192
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 3
  %13 = udiv i32 %8, 3
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 3
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 128, i32 4096
  %17 = icmp eq i32 %12, 2
  %tile_bound1 = select i1 %17, i32 26, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !354

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !355

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache64, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result14 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result14, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_10__4(ptr %30, ptr %result_from_other_lane, ptr %return_buffer15)
  %32 = load float, ptr %return_buffer15, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result17 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result17, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane16, align 4
  call void @region_1_10__4(ptr %30, ptr %result_from_other_lane16, ptr %return_buffer18)
  %34 = load float, ptr %return_buffer18, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result20 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result20, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane19, align 4
  call void @region_1_10__4(ptr %30, ptr %result_from_other_lane19, ptr %return_buffer21)
  %36 = load float, ptr %return_buffer21, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result23 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result23, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane22, align 4
  call void @region_1_10__4(ptr %30, ptr %result_from_other_lane22, ptr %return_buffer24)
  %38 = load float, ptr %return_buffer24, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result26 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result26, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane25, align 4
  call void @region_1_10__4(ptr %30, ptr %result_from_other_lane25, ptr %return_buffer27)
  %40 = load float, ptr %return_buffer27, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 90
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 11520
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 6
  %55 = udiv i32 %52, 6
  %56 = urem i32 %55, 15
  %57 = udiv i32 %52, 90
  %58 = urem i32 %57, 128
  %59 = udiv i32 %52, 11520
  %60 = mul i32 %thread_id.x, 1
  %61 = sub i32 %x_loc, %60
  %62 = mul nuw nsw i32 %54, 1
  %63 = add nuw nsw i32 0, %62
  %64 = udiv i32 %63, 6
  %65 = mul nuw nsw i32 %56, 1
  %66 = add nuw nsw i32 0, %65
  %67 = udiv i32 %66, 15
  %68 = mul nuw nsw i32 %58, 1
  %69 = add nuw nsw i32 0, %68
  %70 = mul nuw nsw i32 %59, 128
  %71 = add nuw nsw i32 %69, %70
  %72 = udiv i32 %71, 8192
  %73 = add i32 %71, 0
  %74 = add i32 %66, 0
  %75 = add i32 %63, 0
  %Arg_2.3 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %73, i32 %74, i32 %75
  %Arg_2.33 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %76 = udiv i32 %52, 6
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %76
  %Arg_1.24 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %subtract.6 = fsub float %Arg_2.33, %Arg_1.24
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.15 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %multiply.7 = fmul float %subtract.6, %Arg_0.15
  store float %multiply.7, ptr %reduction_input_address, align 4
  %77 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %61
  call void @region_1_10__4(ptr %77, ptr %reduction_input_address, ptr %return_buffer)
  %78 = load float, ptr %return_buffer, align 4
  store float %78, ptr %77, align 4
  %79 = mul nuw nsw i32 %54, 1
  %80 = add nuw nsw i32 0, %79
  %81 = udiv i32 %80, 6
  %82 = mul nuw nsw i32 %56, 1
  %83 = add nuw nsw i32 0, %82
  %84 = udiv i32 %83, 15
  %85 = mul nuw nsw i32 %58, 1
  %86 = add nuw nsw i32 0, %85
  %87 = mul nuw nsw i32 %59, 128
  %88 = add nuw nsw i32 %86, %87
  %89 = udiv i32 %88, 8192
  %90 = add i32 %88, 0
  %91 = add i32 %83, 0
  %92 = add i32 %80, 0
  %Arg_2.36 = getelementptr inbounds [8192 x [17 x [6 x float]]], ptr %arg2, i32 0, i32 %90, i32 %91, i32 %92
  %Arg_2.37 = load float, ptr %Arg_2.36, align 4, !invariant.load !197
  %93 = udiv i32 %52, 6
  %Arg_1.28 = getelementptr inbounds float, ptr %arg1, i32 %93
  %Arg_1.29 = load float, ptr %Arg_1.28, align 4, !invariant.load !197
  %subtract.610 = fsub float %Arg_2.37, %Arg_1.29
  %Arg_0.111 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.112 = load float, ptr %Arg_0.111, align 4, !invariant.load !197
  %multiply.713 = fmul float %subtract.610, %Arg_0.112
  %94 = mul nuw nsw i32 %54, 1
  %95 = add nuw nsw i32 0, %94
  %96 = udiv i32 %95, 6
  %97 = mul nuw nsw i32 %56, 1
  %98 = add nuw nsw i32 0, %97
  %99 = udiv i32 %98, 15
  %100 = mul nuw nsw i32 %58, 1
  %101 = add nuw nsw i32 0, %100
  %102 = mul nuw nsw i32 %59, 128
  %103 = add nuw nsw i32 %101, %102
  %104 = udiv i32 %103, 8192
  %105 = getelementptr inbounds float, ptr %arg4, i32 %52
  store float %multiply.713, ptr %105, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %106 = mul i32 %thread_id.y, 1
  %107 = add i32 %tile_origin.1, %thread_id.x
  %108 = add i32 %tile_origin.2, %106
  %109 = add i32 %108, 0
  %110 = mul i32 %tile_origin.0, 90
  %111 = add i32 %110, %109
  %112 = udiv i32 %111, 1
  %113 = urem i32 %112, 6
  %114 = udiv i32 %111, 6
  %115 = urem i32 %114, 15
  %116 = udiv i32 %111, 90
  %output_element_address = getelementptr inbounds [64 x [15 x [6 x float]]], ptr %arg3, i32 0, i32 %116, i32 %115, i32 %113
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_10__4(ptr dereferenceable(4) %Arg_0.11.typed, ptr dereferenceable(4) %Arg_1.12.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.13.typed = alloca float, align 4
  %Arg_0.11 = load float, ptr %Arg_0.11.typed, align 4
  %Arg_1.12 = load float, ptr %Arg_1.12.typed, align 4
  %add.13 = fadd float %Arg_0.11, %Arg_1.12
  store float %add.13, ptr %add.13.typed, align 4
  %load_ret_value = load float, ptr %add.13.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @reduce(ptr noalias align 128 dereferenceable(23040) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(360) %arg2) {
entry:
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane9 = alloca float, align 4
  %return_buffer8 = alloca float, align 4
  %result_from_other_lane6 = alloca float, align 4
  %return_buffer5 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !324
  %5 = urem i32 %3, 1024
  %6 = udiv i32 %3, 1024
  %7 = mul i32 %4, 1
  %8 = add i32 %7, %6
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %10, label %early_return

10:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %5, 32
  %thread_id.y = udiv i32 %5, 32
  %lane_id = urem i32 %5, 32
  %11 = udiv i32 %8, 1
  %12 = urem i32 %11, 3
  %13 = udiv i32 %8, 3
  %14 = urem i32 %13, 1
  %15 = udiv i32 %8, 3
  %16 = icmp eq i32 %14, 0
  %tile_bound = select i1 %16, i32 64, i32 4096
  %17 = icmp eq i32 %12, 2
  %tile_bound1 = select i1 %17, i32 26, i32 32
  %tile_origin.0 = mul i32 %15, 1
  %tile_origin.1 = mul i32 %14, 4096
  %tile_origin.2 = mul i32 %12, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %10
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %18 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %18, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %19 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %20 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %21 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %21, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %22 = icmp eq i32 %tile_loop.indvar, 0
  %23 = mul i32 %tile_loop.indvar, 1
  %24 = add i32 %23, 0
  %x_loc = add i32 %24, %20
  %25 = add i32 %tile_origin.1, %y_in_tile.indvar
  %26 = add i32 %tile_origin.2, %x_loc
  %27 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %27, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !356

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !357

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %6, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %28 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %29 = load float, ptr %current_output, align 4
  store float %29, ptr %28, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache65, i32 0, i32 %6, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %30 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result4 = load float, ptr %30, align 4
  %31 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result4, i32 16, i32 31)
  store float %31, ptr %result_from_other_lane, align 4
  call void @region_1_3__1(ptr %30, ptr %result_from_other_lane, ptr %return_buffer5)
  %32 = load float, ptr %return_buffer5, align 4
  store float %32, ptr %30, align 4
  %partial_reduction_result7 = load float, ptr %30, align 4
  %33 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result7, i32 8, i32 31)
  store float %33, ptr %result_from_other_lane6, align 4
  call void @region_1_3__1(ptr %30, ptr %result_from_other_lane6, ptr %return_buffer8)
  %34 = load float, ptr %return_buffer8, align 4
  store float %34, ptr %30, align 4
  %partial_reduction_result10 = load float, ptr %30, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 4, i32 31)
  store float %35, ptr %result_from_other_lane9, align 4
  call void @region_1_3__1(ptr %30, ptr %result_from_other_lane9, ptr %return_buffer11)
  %36 = load float, ptr %return_buffer11, align 4
  store float %36, ptr %30, align 4
  %partial_reduction_result13 = load float, ptr %30, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 2, i32 31)
  store float %37, ptr %result_from_other_lane12, align 4
  call void @region_1_3__1(ptr %30, ptr %result_from_other_lane12, ptr %return_buffer14)
  %38 = load float, ptr %return_buffer14, align 4
  store float %38, ptr %30, align 4
  %partial_reduction_result16 = load float, ptr %30, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 1, i32 31)
  store float %39, ptr %result_from_other_lane15, align 4
  call void @region_1_3__1(ptr %30, ptr %result_from_other_lane15, ptr %return_buffer17)
  %40 = load float, ptr %return_buffer17, align 4
  store float %40, ptr %30, align 4
  %41 = icmp ult i32 %thread_id.x, %tile_bound
  %42 = mul i32 %thread_id.y, 1
  %43 = icmp ult i32 %42, %tile_bound1
  %44 = and i1 %43, %41
  %45 = icmp eq i32 %lane_id, 0
  %46 = and i1 %44, %45
  br i1 %46, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %47 = mul nuw nsw i32 %26, 1
  %48 = add nuw nsw i32 0, %47
  %49 = mul nuw nsw i32 %25, 90
  %50 = add nuw nsw i32 %48, %49
  %51 = mul nuw nsw i32 %tile_origin.0, 5760
  %52 = add nuw nsw i32 %50, %51
  %53 = udiv i32 %52, 1
  %54 = urem i32 %53, 6
  %55 = udiv i32 %52, 6
  %56 = urem i32 %55, 15
  %57 = udiv i32 %52, 90
  %58 = mul i32 %thread_id.x, 1
  %59 = sub i32 %x_loc, %58
  %Arg_0.1 = getelementptr inbounds float, ptr %arg0, i32 %52
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %60 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %59
  call void @region_1_3__1(ptr %60, ptr %reduction_input_address, ptr %return_buffer)
  %61 = load float, ptr %return_buffer, align 4
  store float %61, ptr %60, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %62 = mul i32 %thread_id.y, 1
  %63 = add i32 %tile_origin.1, %thread_id.x
  %64 = add i32 %tile_origin.2, %62
  %65 = add i32 %64, 0
  %66 = mul i32 %tile_origin.0, 90
  %67 = add i32 %66, %65
  %68 = udiv i32 %67, 1
  %69 = urem i32 %68, 6
  %70 = udiv i32 %67, 6
  %output_element_address = getelementptr inbounds [15 x [6 x float]], ptr %arg2, i32 0, i32 %70, i32 %69
  %output = load float, ptr %30, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after
}

define internal void @region_1_3__1(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_11(ptr noalias align 16 dereferenceable(360) %arg0, ptr noalias align 128 dereferenceable(360) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(360) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !278
  %2 = mul nuw nsw i32 %0, 90
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 90
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 90
  br i1 %4, label %fusion_11.in_bounds-true, label %fusion_11.in_bounds-after

fusion_11.in_bounds-after:                        ; preds = %fusion_11.in_bounds-true, %entry
  ret void

fusion_11.in_bounds-true:                         ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = mul nuw nsw i32 %3, 1
  %8 = add nuw nsw i32 0, %7
  %9 = urem i32 %8, 6
  %10 = udiv i32 %8, 6
  %11 = udiv i32 %10, 15
  %12 = load float, ptr %arg2, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %multiply.5 = fmul float %12, %14
  %subtract.7 = fsub float %6, %multiply.5
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %15, align 4
  br label %fusion_11.in_bounds-after
}

define void @fusion_50(ptr noalias align 128 dereferenceable(50331648) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 128 dereferenceable(65536) %arg2, ptr noalias align 128 dereferenceable(8388608) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_17_constant_10 = load float, ptr @42, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_17_constant_10, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_17_constant_10, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !268
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 256
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 4
  %14 = udiv i32 %9, 4
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 4
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 3
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !358

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !359

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_11(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache66, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_11(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 256
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 32768
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 256
  %80 = udiv i32 %77, 256
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 32768
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 256
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_17_constant_3 = load float, ptr @41, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_17_constant_3
  %93 = zext i1 %compare.5 to i8
  %94 = add i32 %91, 0
  %95 = add i32 %86, 0
  %Arg_0.1 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %94, i32 5, i32 %95
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %96 = trunc i8 %93 to i1
  %97 = select i1 %96, float %Arg_0.14, float %region_0_17_constant_3
  store float %97, ptr %reduction_input_address, align 4
  %98 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_11(ptr %98, ptr %reduction_input_address, ptr %return_buffer)
  %99 = load float, ptr %return_buffer, align 4
  store float %99, ptr %98, align 4
  %100 = mul nuw nsw i32 %79, 1
  %101 = add nuw nsw i32 0, %100
  %102 = udiv i32 %101, 256
  %103 = mul nuw nsw i32 %81, 1
  %104 = add nuw nsw i32 0, %103
  %105 = mul nuw nsw i32 %82, 128
  %106 = add nuw nsw i32 %104, %105
  %107 = udiv i32 %106, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_17_constant_37 = load float, ptr @41, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_17_constant_37
  %108 = zext i1 %compare.58 to i8
  %109 = add i32 %106, 0
  %110 = add i32 %101, 0
  %Arg_0.19 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %109, i32 5, i32 %110
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %111 = trunc i8 %108 to i1
  %112 = select i1 %111, float %Arg_0.110, float %region_0_17_constant_37
  %113 = mul nuw nsw i32 %79, 1
  %114 = add nuw nsw i32 0, %113
  %115 = udiv i32 %114, 256
  %116 = mul nuw nsw i32 %81, 1
  %117 = add nuw nsw i32 0, %116
  %118 = mul nuw nsw i32 %82, 128
  %119 = add nuw nsw i32 %117, %118
  %120 = udiv i32 %119, 8192
  %121 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %119, i32 %114
  store float %112, ptr %121, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %122 = mul nuw nsw i32 %32, 1
  %123 = add nuw nsw i32 0, %122
  %124 = mul nuw nsw i32 %31, 256
  %125 = add nuw nsw i32 %123, %124
  %126 = mul nuw nsw i32 %tile_origin.0, 32768
  %127 = add nuw nsw i32 %125, %126
  %128 = udiv i32 %127, 1
  %129 = urem i32 %128, 256
  %130 = udiv i32 %127, 256
  %131 = urem i32 %130, 128
  %132 = udiv i32 %127, 32768
  %133 = mul i32 %thread_id.x, 2
  %134 = sub i32 %x_loc11, %133
  %135 = mul nuw nsw i32 %129, 1
  %136 = add nuw nsw i32 0, %135
  %137 = udiv i32 %136, 256
  %138 = mul nuw nsw i32 %131, 1
  %139 = add nuw nsw i32 0, %138
  %140 = mul nuw nsw i32 %132, 128
  %141 = add nuw nsw i32 %139, %140
  %142 = udiv i32 %141, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [256 x float]], ptr %arg1, i32 0, i32 %141, i32 %136
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_17_constant_316 = load float, ptr @41, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_17_constant_316
  %143 = zext i1 %compare.517 to i8
  %144 = add i32 %141, 0
  %145 = add i32 %136, 0
  %Arg_0.118 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %144, i32 5, i32 %145
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %146 = trunc i8 %143 to i1
  %147 = select i1 %146, float %Arg_0.119, float %region_0_17_constant_316
  store float %147, ptr %reduction_input_address, align 4
  %148 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %134
  call void @region_1_11(ptr %148, ptr %reduction_input_address, ptr %return_buffer20)
  %149 = load float, ptr %return_buffer20, align 4
  store float %149, ptr %148, align 4
  %150 = mul nuw nsw i32 %129, 1
  %151 = add nuw nsw i32 0, %150
  %152 = udiv i32 %151, 256
  %153 = mul nuw nsw i32 %131, 1
  %154 = add nuw nsw i32 0, %153
  %155 = mul nuw nsw i32 %132, 128
  %156 = add nuw nsw i32 %154, %155
  %157 = udiv i32 %156, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %127
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_17_constant_323 = load float, ptr @41, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_17_constant_323
  %158 = zext i1 %compare.524 to i8
  %159 = add i32 %156, 0
  %160 = add i32 %151, 0
  %Arg_0.125 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %159, i32 5, i32 %160
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %161 = trunc i8 %158 to i1
  %162 = select i1 %161, float %Arg_0.126, float %region_0_17_constant_323
  %163 = mul nuw nsw i32 %129, 1
  %164 = add nuw nsw i32 0, %163
  %165 = udiv i32 %164, 256
  %166 = mul nuw nsw i32 %131, 1
  %167 = add nuw nsw i32 0, %166
  %168 = mul nuw nsw i32 %132, 128
  %169 = add nuw nsw i32 %167, %168
  %170 = udiv i32 %169, 8192
  %171 = getelementptr inbounds [8192 x [256 x float]], ptr %arg3, i32 0, i32 %169, i32 %164
  store float %162, ptr %171, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %172 = mul i32 %thread_id.y, 2
  %173 = add i32 %tile_origin.1, %thread_id.x
  %174 = add i32 %tile_origin.2, %172
  %175 = add i32 %174, 0
  %176 = mul i32 %tile_origin.0, 256
  %177 = add i32 %176, %175
  %178 = udiv i32 %177, 1
  %179 = urem i32 %178, 256
  %180 = udiv i32 %177, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %180, i32 %179
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %181 = mul i32 %thread_id.y, 2
  %182 = add i32 %tile_origin.1, %thread_id.x
  %183 = add i32 %tile_origin.2, %181
  %184 = add i32 %183, 1
  %185 = mul i32 %tile_origin.0, 256
  %186 = add i32 %185, %184
  %187 = udiv i32 %186, 1
  %188 = urem i32 %187, 256
  %189 = udiv i32 %186, 256
  %output_element_address61 = getelementptr inbounds [64 x [256 x float]], ptr %arg2, i32 0, i32 %189, i32 %188
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_11(ptr dereferenceable(4) %Arg_0.12.typed, ptr dereferenceable(4) %Arg_1.13.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.14.typed = alloca float, align 4
  %Arg_0.12 = load float, ptr %Arg_0.12.typed, align 4
  %Arg_1.13 = load float, ptr %Arg_1.13.typed, align 4
  %add.14 = fadd float %Arg_0.12, %Arg_1.13
  store float %add.14, ptr %add.14.typed, align 4
  %load_ret_value = load float, ptr %add.14.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_60(ptr noalias align 128 dereferenceable(50331648) %arg0, ptr noalias align 16 dereferenceable(8388608) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 16 dereferenceable(8388608) %arg3, ptr noalias align 16 dereferenceable(8388608) %arg4, ptr noalias align 16 dereferenceable(8388608) %arg5, ptr noalias align 128 dereferenceable(65536) %arg6, ptr noalias align 128 dereferenceable(8388608) %arg7, ptr noalias align 128 dereferenceable(65536) %arg8, ptr noalias align 128 dereferenceable(8388608) %arg9, ptr noalias align 128 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(8388608) %arg11, ptr noalias align 128 dereferenceable(65536) %arg12, ptr noalias align 128 dereferenceable(8388608) %arg13, ptr noalias align 128 dereferenceable(65536) %arg14, ptr noalias align 128 dereferenceable(8388608) %arg15) {
entry:
  %return_buffer164 = alloca float, align 4
  %result_from_other_lane162 = alloca float, align 4
  %return_buffer161 = alloca float, align 4
  %result_from_other_lane159 = alloca float, align 4
  %return_buffer158 = alloca float, align 4
  %result_from_other_lane156 = alloca float, align 4
  %return_buffer155 = alloca float, align 4
  %result_from_other_lane153 = alloca float, align 4
  %return_buffer152 = alloca float, align 4
  %result_from_other_lane150 = alloca float, align 4
  %return_buffer142 = alloca float, align 4
  %result_from_other_lane140 = alloca float, align 4
  %return_buffer139 = alloca float, align 4
  %result_from_other_lane137 = alloca float, align 4
  %return_buffer136 = alloca float, align 4
  %result_from_other_lane134 = alloca float, align 4
  %return_buffer133 = alloca float, align 4
  %result_from_other_lane131 = alloca float, align 4
  %return_buffer130 = alloca float, align 4
  %result_from_other_lane128 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %result_from_other_lane78 = alloca float, align 4
  %return_buffer77 = alloca float, align 4
  %result_from_other_lane75 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %result_from_other_lane72 = alloca float, align 4
  %return_buffer71 = alloca float, align 4
  %result_from_other_lane69 = alloca float, align 4
  %return_buffer68 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer36 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %return_buffer26 = alloca float, align 4
  %return_buffer21 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result11 = alloca float, align 4
  %reduction_input_address10 = alloca float, align 4
  %partial_reduction_result8 = alloca float, align 4
  %reduction_input_address7 = alloca float, align 4
  %partial_reduction_result5 = alloca float, align 4
  %reduction_input_address4 = alloca float, align 4
  %partial_reduction_result2 = alloca float, align 4
  %reduction_input_address1 = alloca float, align 4
  %partial_reduction_result = alloca float, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after166, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_61_constant_14 = load float, ptr @44, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_61_constant_14, ptr %2, align 4
  %region_0_61_constant_143 = load float, ptr @44, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  store float %region_0_61_constant_143, ptr %3, align 4
  %region_0_61_constant_146 = load float, ptr @44, align 4
  %4 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  store float %region_0_61_constant_146, ptr %4, align 4
  %region_0_61_constant_149 = load float, ptr @44, align 4
  %5 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  store float %region_0_61_constant_149, ptr %5, align 4
  %region_0_61_constant_1412 = load float, ptr @44, align 4
  %6 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  store float %region_0_61_constant_1412, ptr %6, align 4
  %7 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !193
  %9 = urem i32 %7, 1024
  %10 = udiv i32 %7, 1024
  %11 = mul i32 %8, 1
  %12 = add i32 %11, %10
  %13 = icmp ult i32 %12, 512
  br i1 %13, label %14, label %early_return

14:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %9, 32
  %thread_id.y = udiv i32 %9, 32
  %lane_id = urem i32 %9, 32
  %15 = udiv i32 %12, 1
  %16 = urem i32 %15, 8
  %17 = udiv i32 %12, 8
  %18 = urem i32 %17, 1
  %19 = udiv i32 %12, 8
  %20 = icmp eq i32 %18, 0
  %tile_bound = select i1 %20, i32 128, i32 4096
  %21 = icmp eq i32 %16, 7
  %tile_bound13 = select i1 %21, i32 32, i32 32
  %tile_origin.0 = mul i32 %19, 1
  %tile_origin.1 = mul i32 %18, 4096
  %tile_origin.2 = mul i32 %16, 32
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %14
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %22 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %22, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %23 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %24 = mul i32 %thread_id.x, 1
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %25 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %25, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc14 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc14, ptr %tile_loop.invar_address, align 4
  %26 = icmp eq i32 %tile_loop.indvar, 0
  %27 = mul i32 %tile_loop.indvar, 1
  %28 = add i32 %27, 0
  %x_loc = add i32 %28, %24
  %29 = add i32 %tile_origin.1, %y_in_tile.indvar
  %30 = add i32 %tile_origin.2, %x_loc
  %31 = icmp ult i32 %x_loc, %tile_bound13
  br i1 %31, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  br label %tile_loop.loop_header, !llvm.loop !360

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !361

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache67, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %32 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %33 = load float, ptr %current_output, align 4
  store float %33, ptr %32, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache67, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %34 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result67 = load float, ptr %34, align 4
  %35 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result67, i32 16, i32 31)
  store float %35, ptr %result_from_other_lane, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane, ptr %return_buffer68)
  %36 = load float, ptr %return_buffer68, align 4
  store float %36, ptr %34, align 4
  %partial_reduction_result70 = load float, ptr %34, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result70, i32 8, i32 31)
  store float %37, ptr %result_from_other_lane69, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane69, ptr %return_buffer71)
  %38 = load float, ptr %return_buffer71, align 4
  store float %38, ptr %34, align 4
  %partial_reduction_result73 = load float, ptr %34, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result73, i32 4, i32 31)
  store float %39, ptr %result_from_other_lane72, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane72, ptr %return_buffer74)
  %40 = load float, ptr %return_buffer74, align 4
  store float %40, ptr %34, align 4
  %partial_reduction_result76 = load float, ptr %34, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result76, i32 2, i32 31)
  store float %41, ptr %result_from_other_lane75, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane75, ptr %return_buffer77)
  %42 = load float, ptr %return_buffer77, align 4
  store float %42, ptr %34, align 4
  %partial_reduction_result79 = load float, ptr %34, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result79, i32 1, i32 31)
  store float %43, ptr %result_from_other_lane78, align 4
  call void @region_1_15__1(ptr %34, ptr %result_from_other_lane78, ptr %return_buffer80)
  %44 = load float, ptr %return_buffer80, align 4
  store float %44, ptr %34, align 4
  %45 = icmp ult i32 %thread_id.x, %tile_bound
  %46 = mul i32 %thread_id.y, 1
  %47 = icmp ult i32 %46, %tile_bound13
  %48 = and i1 %47, %45
  %49 = icmp eq i32 %lane_id, 0
  %50 = and i1 %48, %49
  br i1 %50, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address81 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache68, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %51 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 0
  %52 = load float, ptr %current_output82, align 4
  store float %52, ptr %51, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache68, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %53 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %53, align 4
  %54 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %54, ptr %result_from_other_lane84, align 4
  call void @region_2_25__1(ptr %53, ptr %result_from_other_lane84, ptr %return_buffer86)
  %55 = load float, ptr %return_buffer86, align 4
  store float %55, ptr %53, align 4
  %partial_reduction_result88 = load float, ptr %53, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %56, ptr %result_from_other_lane87, align 4
  call void @region_2_25__1(ptr %53, ptr %result_from_other_lane87, ptr %return_buffer89)
  %57 = load float, ptr %return_buffer89, align 4
  store float %57, ptr %53, align 4
  %partial_reduction_result91 = load float, ptr %53, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %58, ptr %result_from_other_lane90, align 4
  call void @region_2_25__1(ptr %53, ptr %result_from_other_lane90, ptr %return_buffer92)
  %59 = load float, ptr %return_buffer92, align 4
  store float %59, ptr %53, align 4
  %partial_reduction_result94 = load float, ptr %53, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %60, ptr %result_from_other_lane93, align 4
  call void @region_2_25__1(ptr %53, ptr %result_from_other_lane93, ptr %return_buffer95)
  %61 = load float, ptr %return_buffer95, align 4
  store float %61, ptr %53, align 4
  %partial_reduction_result97 = load float, ptr %53, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %62, ptr %result_from_other_lane96, align 4
  call void @region_2_25__1(ptr %53, ptr %result_from_other_lane96, ptr %return_buffer98)
  %63 = load float, ptr %return_buffer98, align 4
  store float %63, ptr %53, align 4
  %64 = icmp ult i32 %thread_id.x, %tile_bound
  %65 = mul i32 %thread_id.y, 1
  %66 = icmp ult i32 %65, %tile_bound13
  %67 = and i1 %66, %64
  %68 = icmp eq i32 %lane_id, 0
  %69 = and i1 %67, %68
  br i1 %69, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %reduction_write_output-after
  %shmem_output_address103 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache69, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %70 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 0
  %71 = load float, ptr %current_output104, align 4
  store float %71, ptr %70, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache69, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %72 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %72, align 4
  %73 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %73, ptr %result_from_other_lane106, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane106, ptr %return_buffer108)
  %74 = load float, ptr %return_buffer108, align 4
  store float %74, ptr %72, align 4
  %partial_reduction_result110 = load float, ptr %72, align 4
  %75 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %75, ptr %result_from_other_lane109, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane109, ptr %return_buffer111)
  %76 = load float, ptr %return_buffer111, align 4
  store float %76, ptr %72, align 4
  %partial_reduction_result113 = load float, ptr %72, align 4
  %77 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %77, ptr %result_from_other_lane112, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane112, ptr %return_buffer114)
  %78 = load float, ptr %return_buffer114, align 4
  store float %78, ptr %72, align 4
  %partial_reduction_result116 = load float, ptr %72, align 4
  %79 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %79, ptr %result_from_other_lane115, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane115, ptr %return_buffer117)
  %80 = load float, ptr %return_buffer117, align 4
  store float %80, ptr %72, align 4
  %partial_reduction_result119 = load float, ptr %72, align 4
  %81 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %81, ptr %result_from_other_lane118, align 4
  call void @region_3_35(ptr %72, ptr %result_from_other_lane118, ptr %return_buffer120)
  %82 = load float, ptr %return_buffer120, align 4
  store float %82, ptr %72, align 4
  %83 = icmp ult i32 %thread_id.x, %tile_bound
  %84 = mul i32 %thread_id.y, 1
  %85 = icmp ult i32 %84, %tile_bound13
  %86 = and i1 %85, %83
  %87 = icmp eq i32 %lane_id, 0
  %88 = and i1 %86, %87
  br i1 %88, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  %shmem_output_address125 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache70, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %89 = addrspacecast ptr addrspace(3) %shmem_output_address125 to ptr
  %current_output126 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 0
  %90 = load float, ptr %current_output126, align 4
  store float %90, ptr %89, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr127 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache70, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %91 = addrspacecast ptr addrspace(3) %shmem_transposed_addr127 to ptr
  %partial_reduction_result129 = load float, ptr %91, align 4
  %92 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result129, i32 16, i32 31)
  store float %92, ptr %result_from_other_lane128, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane128, ptr %return_buffer130)
  %93 = load float, ptr %return_buffer130, align 4
  store float %93, ptr %91, align 4
  %partial_reduction_result132 = load float, ptr %91, align 4
  %94 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result132, i32 8, i32 31)
  store float %94, ptr %result_from_other_lane131, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane131, ptr %return_buffer133)
  %95 = load float, ptr %return_buffer133, align 4
  store float %95, ptr %91, align 4
  %partial_reduction_result135 = load float, ptr %91, align 4
  %96 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result135, i32 4, i32 31)
  store float %96, ptr %result_from_other_lane134, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane134, ptr %return_buffer136)
  %97 = load float, ptr %return_buffer136, align 4
  store float %97, ptr %91, align 4
  %partial_reduction_result138 = load float, ptr %91, align 4
  %98 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result138, i32 2, i32 31)
  store float %98, ptr %result_from_other_lane137, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane137, ptr %return_buffer139)
  %99 = load float, ptr %return_buffer139, align 4
  store float %99, ptr %91, align 4
  %partial_reduction_result141 = load float, ptr %91, align 4
  %100 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result141, i32 1, i32 31)
  store float %100, ptr %result_from_other_lane140, align 4
  call void @region_4_45(ptr %91, ptr %result_from_other_lane140, ptr %return_buffer142)
  %101 = load float, ptr %return_buffer142, align 4
  store float %101, ptr %91, align 4
  %102 = icmp ult i32 %thread_id.x, %tile_bound
  %103 = mul i32 %thread_id.y, 1
  %104 = icmp ult i32 %103, %tile_bound13
  %105 = and i1 %104, %102
  %106 = icmp eq i32 %lane_id, 0
  %107 = and i1 %105, %106
  br i1 %107, label %reduction_write_output-true143, label %reduction_write_output-after144

reduction_write_output-after144:                  ; preds = %reduction_write_output-true143, %reduction_write_output-after122
  %shmem_output_address147 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i32 0, i32 %10, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %108 = addrspacecast ptr addrspace(3) %shmem_output_address147 to ptr
  %current_output148 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 0
  %109 = load float, ptr %current_output148, align 4
  store float %109, ptr %108, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr149 = getelementptr inbounds [1 x [1 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache71, i32 0, i32 %10, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %110 = addrspacecast ptr addrspace(3) %shmem_transposed_addr149 to ptr
  %partial_reduction_result151 = load float, ptr %110, align 4
  %111 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result151, i32 16, i32 31)
  store float %111, ptr %result_from_other_lane150, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane150, ptr %return_buffer152)
  %112 = load float, ptr %return_buffer152, align 4
  store float %112, ptr %110, align 4
  %partial_reduction_result154 = load float, ptr %110, align 4
  %113 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result154, i32 8, i32 31)
  store float %113, ptr %result_from_other_lane153, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane153, ptr %return_buffer155)
  %114 = load float, ptr %return_buffer155, align 4
  store float %114, ptr %110, align 4
  %partial_reduction_result157 = load float, ptr %110, align 4
  %115 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result157, i32 4, i32 31)
  store float %115, ptr %result_from_other_lane156, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane156, ptr %return_buffer158)
  %116 = load float, ptr %return_buffer158, align 4
  store float %116, ptr %110, align 4
  %partial_reduction_result160 = load float, ptr %110, align 4
  %117 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result160, i32 2, i32 31)
  store float %117, ptr %result_from_other_lane159, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane159, ptr %return_buffer161)
  %118 = load float, ptr %return_buffer161, align 4
  store float %118, ptr %110, align 4
  %partial_reduction_result163 = load float, ptr %110, align 4
  %119 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result163, i32 1, i32 31)
  store float %119, ptr %result_from_other_lane162, align 4
  call void @region_5_55(ptr %110, ptr %result_from_other_lane162, ptr %return_buffer164)
  %120 = load float, ptr %return_buffer164, align 4
  store float %120, ptr %110, align 4
  %121 = icmp ult i32 %thread_id.x, %tile_bound
  %122 = mul i32 %thread_id.y, 1
  %123 = icmp ult i32 %122, %tile_bound13
  %124 = and i1 %123, %121
  %125 = icmp eq i32 %lane_id, 0
  %126 = and i1 %124, %125
  br i1 %126, label %reduction_write_output-true165, label %reduction_write_output-after166

reduction_write_output-after166:                  ; preds = %reduction_write_output-true165, %reduction_write_output-after144
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %127 = mul nuw nsw i32 %30, 1
  %128 = add nuw nsw i32 0, %127
  %129 = mul nuw nsw i32 %29, 256
  %130 = add nuw nsw i32 %128, %129
  %131 = mul nuw nsw i32 %tile_origin.0, 32768
  %132 = add nuw nsw i32 %130, %131
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 256
  %135 = udiv i32 %132, 256
  %136 = urem i32 %135, 128
  %137 = udiv i32 %132, 32768
  %138 = mul i32 %thread_id.x, 1
  %139 = sub i32 %x_loc, %138
  %140 = mul nuw nsw i32 %134, 1
  %141 = add nuw nsw i32 0, %140
  %142 = udiv i32 %141, 256
  %143 = mul nuw nsw i32 %136, 1
  %144 = add nuw nsw i32 0, %143
  %145 = mul nuw nsw i32 %137, 128
  %146 = add nuw nsw i32 %144, %145
  %147 = udiv i32 %146, 8192
  %Arg_1.2 = getelementptr inbounds float, ptr %arg1, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_61_constant_7 = load float, ptr @43, align 4
  %compare.9 = fcmp ogt float %Arg_1.215, %region_0_61_constant_7
  %148 = zext i1 %compare.9 to i8
  %149 = add i32 %146, 0
  %150 = add i32 %141, 0
  %Arg_0.1 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %149, i32 0, i32 %150
  %Arg_0.116 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %151 = trunc i8 %148 to i1
  %152 = select i1 %151, float %Arg_0.116, float %region_0_61_constant_7
  store float %152, ptr %reduction_input_address, align 4
  %153 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %139
  call void @region_1_15__1(ptr %153, ptr %reduction_input_address, ptr %return_buffer)
  %154 = load float, ptr %return_buffer, align 4
  store float %154, ptr %153, align 4
  %155 = mul nuw nsw i32 %134, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 256
  %158 = mul nuw nsw i32 %136, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %137, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %Arg_2.3 = getelementptr inbounds float, ptr %arg2, i32 %132
  %Arg_2.317 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  %region_0_61_constant_718 = load float, ptr @43, align 4
  %compare.20 = fcmp ogt float %Arg_2.317, %region_0_61_constant_718
  %163 = zext i1 %compare.20 to i8
  %164 = add i32 %161, 0
  %165 = add i32 %156, 0
  %Arg_0.119 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %164, i32 1, i32 %165
  %Arg_0.120 = load float, ptr %Arg_0.119, align 4, !invariant.load !197
  %166 = trunc i8 %163 to i1
  %167 = select i1 %166, float %Arg_0.120, float %region_0_61_constant_718
  store float %167, ptr %reduction_input_address1, align 4
  %168 = getelementptr inbounds float, ptr %partial_reduction_result2, i32 %139
  call void @region_2_25__1(ptr %168, ptr %reduction_input_address1, ptr %return_buffer21)
  %169 = load float, ptr %return_buffer21, align 4
  store float %169, ptr %168, align 4
  %170 = mul nuw nsw i32 %134, 1
  %171 = add nuw nsw i32 0, %170
  %172 = udiv i32 %171, 256
  %173 = mul nuw nsw i32 %136, 1
  %174 = add nuw nsw i32 0, %173
  %175 = mul nuw nsw i32 %137, 128
  %176 = add nuw nsw i32 %174, %175
  %177 = udiv i32 %176, 8192
  %Arg_3.4 = getelementptr inbounds float, ptr %arg3, i32 %132
  %Arg_3.422 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  %region_0_61_constant_723 = load float, ptr @43, align 4
  %compare.30 = fcmp ogt float %Arg_3.422, %region_0_61_constant_723
  %178 = zext i1 %compare.30 to i8
  %179 = add i32 %176, 0
  %180 = add i32 %171, 0
  %Arg_0.124 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %179, i32 2, i32 %180
  %Arg_0.125 = load float, ptr %Arg_0.124, align 4, !invariant.load !197
  %181 = trunc i8 %178 to i1
  %182 = select i1 %181, float %Arg_0.125, float %region_0_61_constant_723
  store float %182, ptr %reduction_input_address4, align 4
  %183 = getelementptr inbounds float, ptr %partial_reduction_result5, i32 %139
  call void @region_3_35(ptr %183, ptr %reduction_input_address4, ptr %return_buffer26)
  %184 = load float, ptr %return_buffer26, align 4
  store float %184, ptr %183, align 4
  %185 = mul nuw nsw i32 %134, 1
  %186 = add nuw nsw i32 0, %185
  %187 = udiv i32 %186, 256
  %188 = mul nuw nsw i32 %136, 1
  %189 = add nuw nsw i32 0, %188
  %190 = mul nuw nsw i32 %137, 128
  %191 = add nuw nsw i32 %189, %190
  %192 = udiv i32 %191, 8192
  %Arg_4.5 = getelementptr inbounds float, ptr %arg4, i32 %132
  %Arg_4.527 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  %region_0_61_constant_728 = load float, ptr @43, align 4
  %compare.40 = fcmp ogt float %Arg_4.527, %region_0_61_constant_728
  %193 = zext i1 %compare.40 to i8
  %194 = add i32 %191, 0
  %195 = add i32 %186, 0
  %Arg_0.129 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %194, i32 3, i32 %195
  %Arg_0.130 = load float, ptr %Arg_0.129, align 4, !invariant.load !197
  %196 = trunc i8 %193 to i1
  %197 = select i1 %196, float %Arg_0.130, float %region_0_61_constant_728
  store float %197, ptr %reduction_input_address7, align 4
  %198 = getelementptr inbounds float, ptr %partial_reduction_result8, i32 %139
  call void @region_4_45(ptr %198, ptr %reduction_input_address7, ptr %return_buffer31)
  %199 = load float, ptr %return_buffer31, align 4
  store float %199, ptr %198, align 4
  %200 = mul nuw nsw i32 %134, 1
  %201 = add nuw nsw i32 0, %200
  %202 = udiv i32 %201, 256
  %203 = mul nuw nsw i32 %136, 1
  %204 = add nuw nsw i32 0, %203
  %205 = mul nuw nsw i32 %137, 128
  %206 = add nuw nsw i32 %204, %205
  %207 = udiv i32 %206, 8192
  %Arg_5.6 = getelementptr inbounds float, ptr %arg5, i32 %132
  %Arg_5.632 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  %region_0_61_constant_733 = load float, ptr @43, align 4
  %compare.50 = fcmp ogt float %Arg_5.632, %region_0_61_constant_733
  %208 = zext i1 %compare.50 to i8
  %209 = add i32 %206, 0
  %210 = add i32 %201, 0
  %Arg_0.134 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %209, i32 4, i32 %210
  %Arg_0.135 = load float, ptr %Arg_0.134, align 4, !invariant.load !197
  %211 = trunc i8 %208 to i1
  %212 = select i1 %211, float %Arg_0.135, float %region_0_61_constant_733
  store float %212, ptr %reduction_input_address10, align 4
  %213 = getelementptr inbounds float, ptr %partial_reduction_result11, i32 %139
  call void @region_5_55(ptr %213, ptr %reduction_input_address10, ptr %return_buffer36)
  %214 = load float, ptr %return_buffer36, align 4
  store float %214, ptr %213, align 4
  %215 = mul nuw nsw i32 %134, 1
  %216 = add nuw nsw i32 0, %215
  %217 = udiv i32 %216, 256
  %218 = mul nuw nsw i32 %136, 1
  %219 = add nuw nsw i32 0, %218
  %220 = mul nuw nsw i32 %137, 128
  %221 = add nuw nsw i32 %219, %220
  %222 = udiv i32 %221, 8192
  %Arg_1.237 = getelementptr inbounds float, ptr %arg1, i32 %132
  %Arg_1.238 = load float, ptr %Arg_1.237, align 4, !invariant.load !197
  %region_0_61_constant_739 = load float, ptr @43, align 4
  %compare.940 = fcmp ogt float %Arg_1.238, %region_0_61_constant_739
  %223 = zext i1 %compare.940 to i8
  %224 = add i32 %221, 0
  %225 = add i32 %216, 0
  %Arg_0.141 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %224, i32 0, i32 %225
  %Arg_0.142 = load float, ptr %Arg_0.141, align 4, !invariant.load !197
  %226 = trunc i8 %223 to i1
  %227 = select i1 %226, float %Arg_0.142, float %region_0_61_constant_739
  %228 = mul nuw nsw i32 %134, 1
  %229 = add nuw nsw i32 0, %228
  %230 = udiv i32 %229, 256
  %231 = mul nuw nsw i32 %136, 1
  %232 = add nuw nsw i32 0, %231
  %233 = mul nuw nsw i32 %137, 128
  %234 = add nuw nsw i32 %232, %233
  %235 = udiv i32 %234, 8192
  %Arg_2.343 = getelementptr inbounds float, ptr %arg2, i32 %132
  %Arg_2.344 = load float, ptr %Arg_2.343, align 4, !invariant.load !197
  %region_0_61_constant_745 = load float, ptr @43, align 4
  %compare.2046 = fcmp ogt float %Arg_2.344, %region_0_61_constant_745
  %236 = zext i1 %compare.2046 to i8
  %237 = add i32 %234, 0
  %238 = add i32 %229, 0
  %Arg_0.147 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %237, i32 1, i32 %238
  %Arg_0.148 = load float, ptr %Arg_0.147, align 4, !invariant.load !197
  %239 = trunc i8 %236 to i1
  %240 = select i1 %239, float %Arg_0.148, float %region_0_61_constant_745
  %241 = mul nuw nsw i32 %134, 1
  %242 = add nuw nsw i32 0, %241
  %243 = udiv i32 %242, 256
  %244 = mul nuw nsw i32 %136, 1
  %245 = add nuw nsw i32 0, %244
  %246 = mul nuw nsw i32 %137, 128
  %247 = add nuw nsw i32 %245, %246
  %248 = udiv i32 %247, 8192
  %Arg_3.449 = getelementptr inbounds float, ptr %arg3, i32 %132
  %Arg_3.450 = load float, ptr %Arg_3.449, align 4, !invariant.load !197
  %region_0_61_constant_751 = load float, ptr @43, align 4
  %compare.3052 = fcmp ogt float %Arg_3.450, %region_0_61_constant_751
  %249 = zext i1 %compare.3052 to i8
  %250 = add i32 %247, 0
  %251 = add i32 %242, 0
  %Arg_0.153 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %250, i32 2, i32 %251
  %Arg_0.154 = load float, ptr %Arg_0.153, align 4, !invariant.load !197
  %252 = trunc i8 %249 to i1
  %253 = select i1 %252, float %Arg_0.154, float %region_0_61_constant_751
  %254 = mul nuw nsw i32 %134, 1
  %255 = add nuw nsw i32 0, %254
  %256 = udiv i32 %255, 256
  %257 = mul nuw nsw i32 %136, 1
  %258 = add nuw nsw i32 0, %257
  %259 = mul nuw nsw i32 %137, 128
  %260 = add nuw nsw i32 %258, %259
  %261 = udiv i32 %260, 8192
  %Arg_4.555 = getelementptr inbounds float, ptr %arg4, i32 %132
  %Arg_4.556 = load float, ptr %Arg_4.555, align 4, !invariant.load !197
  %region_0_61_constant_757 = load float, ptr @43, align 4
  %compare.4058 = fcmp ogt float %Arg_4.556, %region_0_61_constant_757
  %262 = zext i1 %compare.4058 to i8
  %263 = add i32 %260, 0
  %264 = add i32 %255, 0
  %Arg_0.159 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %263, i32 3, i32 %264
  %Arg_0.160 = load float, ptr %Arg_0.159, align 4, !invariant.load !197
  %265 = trunc i8 %262 to i1
  %266 = select i1 %265, float %Arg_0.160, float %region_0_61_constant_757
  %267 = mul nuw nsw i32 %134, 1
  %268 = add nuw nsw i32 0, %267
  %269 = udiv i32 %268, 256
  %270 = mul nuw nsw i32 %136, 1
  %271 = add nuw nsw i32 0, %270
  %272 = mul nuw nsw i32 %137, 128
  %273 = add nuw nsw i32 %271, %272
  %274 = udiv i32 %273, 8192
  %Arg_5.661 = getelementptr inbounds float, ptr %arg5, i32 %132
  %Arg_5.662 = load float, ptr %Arg_5.661, align 4, !invariant.load !197
  %region_0_61_constant_763 = load float, ptr @43, align 4
  %compare.5064 = fcmp ogt float %Arg_5.662, %region_0_61_constant_763
  %275 = zext i1 %compare.5064 to i8
  %276 = add i32 %273, 0
  %277 = add i32 %268, 0
  %Arg_0.165 = getelementptr inbounds [8192 x [6 x [256 x float]]], ptr %arg0, i32 0, i32 %276, i32 4, i32 %277
  %Arg_0.166 = load float, ptr %Arg_0.165, align 4, !invariant.load !197
  %278 = trunc i8 %275 to i1
  %279 = select i1 %278, float %Arg_0.166, float %region_0_61_constant_763
  %280 = mul nuw nsw i32 %134, 1
  %281 = add nuw nsw i32 0, %280
  %282 = udiv i32 %281, 256
  %283 = mul nuw nsw i32 %136, 1
  %284 = add nuw nsw i32 0, %283
  %285 = mul nuw nsw i32 %137, 128
  %286 = add nuw nsw i32 %284, %285
  %287 = udiv i32 %286, 8192
  %288 = getelementptr inbounds float, ptr %arg13, i32 %132
  store float %266, ptr %288, align 4
  %289 = mul nuw nsw i32 %134, 1
  %290 = add nuw nsw i32 0, %289
  %291 = udiv i32 %290, 256
  %292 = mul nuw nsw i32 %136, 1
  %293 = add nuw nsw i32 0, %292
  %294 = mul nuw nsw i32 %137, 128
  %295 = add nuw nsw i32 %293, %294
  %296 = udiv i32 %295, 8192
  %297 = getelementptr inbounds float, ptr %arg15, i32 %132
  store float %279, ptr %297, align 4
  %298 = mul nuw nsw i32 %134, 1
  %299 = add nuw nsw i32 0, %298
  %300 = udiv i32 %299, 256
  %301 = mul nuw nsw i32 %136, 1
  %302 = add nuw nsw i32 0, %301
  %303 = mul nuw nsw i32 %137, 128
  %304 = add nuw nsw i32 %302, %303
  %305 = udiv i32 %304, 8192
  %306 = getelementptr inbounds float, ptr %arg11, i32 %132
  store float %253, ptr %306, align 4
  %307 = mul nuw nsw i32 %134, 1
  %308 = add nuw nsw i32 0, %307
  %309 = udiv i32 %308, 256
  %310 = mul nuw nsw i32 %136, 1
  %311 = add nuw nsw i32 0, %310
  %312 = mul nuw nsw i32 %137, 128
  %313 = add nuw nsw i32 %311, %312
  %314 = udiv i32 %313, 8192
  %315 = getelementptr inbounds float, ptr %arg9, i32 %132
  store float %240, ptr %315, align 4
  %316 = mul nuw nsw i32 %134, 1
  %317 = add nuw nsw i32 0, %316
  %318 = udiv i32 %317, 256
  %319 = mul nuw nsw i32 %136, 1
  %320 = add nuw nsw i32 0, %319
  %321 = mul nuw nsw i32 %137, 128
  %322 = add nuw nsw i32 %320, %321
  %323 = udiv i32 %322, 8192
  %324 = getelementptr inbounds float, ptr %arg7, i32 %132
  store float %227, ptr %324, align 4
  br label %x_in_tile-after

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %325 = mul i32 %thread_id.y, 1
  %326 = add i32 %tile_origin.1, %thread_id.x
  %327 = add i32 %tile_origin.2, %325
  %328 = add i32 %327, 0
  %329 = mul i32 %tile_origin.0, 256
  %330 = add i32 %329, %328
  %331 = udiv i32 %330, 1
  %332 = urem i32 %331, 256
  %333 = udiv i32 %330, 256
  %output_element_address = getelementptr inbounds [64 x [256 x float]], ptr %arg6, i32 0, i32 %333, i32 %332
  %output = load float, ptr %34, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true99:                    ; preds = %reduction_write_output-after
  %334 = mul i32 %thread_id.y, 1
  %335 = add i32 %tile_origin.1, %thread_id.x
  %336 = add i32 %tile_origin.2, %334
  %337 = add i32 %336, 0
  %338 = mul i32 %tile_origin.0, 256
  %339 = add i32 %338, %337
  %340 = udiv i32 %339, 1
  %341 = urem i32 %340, 256
  %342 = udiv i32 %339, 256
  %output_element_address101 = getelementptr inbounds [64 x [256 x float]], ptr %arg8, i32 0, i32 %342, i32 %341
  %output102 = load float, ptr %53, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %343 = mul i32 %thread_id.y, 1
  %344 = add i32 %tile_origin.1, %thread_id.x
  %345 = add i32 %tile_origin.2, %343
  %346 = add i32 %345, 0
  %347 = mul i32 %tile_origin.0, 256
  %348 = add i32 %347, %346
  %349 = udiv i32 %348, 1
  %350 = urem i32 %349, 256
  %351 = udiv i32 %348, 256
  %output_element_address123 = getelementptr inbounds [64 x [256 x float]], ptr %arg10, i32 0, i32 %351, i32 %350
  %output124 = load float, ptr %72, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduction_write_output-true143:                   ; preds = %reduction_write_output-after122
  %352 = mul i32 %thread_id.y, 1
  %353 = add i32 %tile_origin.1, %thread_id.x
  %354 = add i32 %tile_origin.2, %352
  %355 = add i32 %354, 0
  %356 = mul i32 %tile_origin.0, 256
  %357 = add i32 %356, %355
  %358 = udiv i32 %357, 1
  %359 = urem i32 %358, 256
  %360 = udiv i32 %357, 256
  %output_element_address145 = getelementptr inbounds [64 x [256 x float]], ptr %arg12, i32 0, i32 %360, i32 %359
  %output146 = load float, ptr %91, align 4
  store float %output146, ptr %output_element_address145, align 4
  br label %reduction_write_output-after144

reduction_write_output-true165:                   ; preds = %reduction_write_output-after144
  %361 = mul i32 %thread_id.y, 1
  %362 = add i32 %tile_origin.1, %thread_id.x
  %363 = add i32 %tile_origin.2, %361
  %364 = add i32 %363, 0
  %365 = mul i32 %tile_origin.0, 256
  %366 = add i32 %365, %364
  %367 = udiv i32 %366, 1
  %368 = urem i32 %367, 256
  %369 = udiv i32 %366, 256
  %output_element_address167 = getelementptr inbounds [64 x [256 x float]], ptr %arg14, i32 0, i32 %369, i32 %368
  %output168 = load float, ptr %110, align 4
  store float %output168, ptr %output_element_address167, align 4
  br label %reduction_write_output-after166
}

define internal void @region_1_15__1(ptr dereferenceable(4) %Arg_0.16.typed, ptr dereferenceable(4) %Arg_1.17.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.18.typed = alloca float, align 4
  %Arg_0.16 = load float, ptr %Arg_0.16.typed, align 4
  %Arg_1.17 = load float, ptr %Arg_1.17.typed, align 4
  %add.18 = fadd float %Arg_0.16, %Arg_1.17
  store float %add.18, ptr %add.18.typed, align 4
  %load_ret_value = load float, ptr %add.18.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_25__1(ptr dereferenceable(4) %Arg_0.26.typed, ptr dereferenceable(4) %Arg_1.27.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.28.typed = alloca float, align 4
  %Arg_0.26 = load float, ptr %Arg_0.26.typed, align 4
  %Arg_1.27 = load float, ptr %Arg_1.27.typed, align 4
  %add.28 = fadd float %Arg_0.26, %Arg_1.27
  store float %add.28, ptr %add.28.typed, align 4
  %load_ret_value = load float, ptr %add.28.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_35(ptr dereferenceable(4) %Arg_0.36.typed, ptr dereferenceable(4) %Arg_1.37.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.38.typed = alloca float, align 4
  %Arg_0.36 = load float, ptr %Arg_0.36.typed, align 4
  %Arg_1.37 = load float, ptr %Arg_1.37.typed, align 4
  %add.38 = fadd float %Arg_0.36, %Arg_1.37
  store float %add.38, ptr %add.38.typed, align 4
  %load_ret_value = load float, ptr %add.38.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_45(ptr dereferenceable(4) %Arg_0.46.typed, ptr dereferenceable(4) %Arg_1.47.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.48.typed = alloca float, align 4
  %Arg_0.46 = load float, ptr %Arg_0.46.typed, align 4
  %Arg_1.47 = load float, ptr %Arg_1.47.typed, align 4
  %add.48 = fadd float %Arg_0.46, %Arg_1.47
  store float %add.48, ptr %add.48.typed, align 4
  %load_ret_value = load float, ptr %add.48.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_55(ptr dereferenceable(4) %Arg_0.56.typed, ptr dereferenceable(4) %Arg_1.57.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.58.typed = alloca float, align 4
  %Arg_0.56 = load float, ptr %Arg_0.56.typed, align 4
  %Arg_1.57 = load float, ptr %Arg_1.57.typed, align 4
  %add.58 = fadd float %Arg_0.56, %Arg_1.57
  store float %add.58, ptr %add.58.typed, align 4
  %load_ret_value = load float, ptr %add.58.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_375(ptr noalias align 16 dereferenceable(1024) %arg0, ptr noalias align 128 dereferenceable(1024) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(1024) %arg3, ptr noalias align 128 dereferenceable(1024) %arg4, ptr noalias align 16 dereferenceable(1024) %arg5, ptr noalias align 128 dereferenceable(1024) %arg6, ptr noalias align 16 dereferenceable(1024) %arg7, ptr noalias align 128 dereferenceable(1024) %arg8, ptr noalias align 16 dereferenceable(1024) %arg9, ptr noalias align 128 dereferenceable(1024) %arg10, ptr noalias align 16 dereferenceable(1024) %arg11, ptr noalias align 128 dereferenceable(1024) %arg12, ptr noalias align 16 dereferenceable(1024) %arg13, ptr noalias align 128 dereferenceable(1024) %arg14, ptr noalias align 16 dereferenceable(1024) %arg15, ptr noalias align 128 dereferenceable(1024) %arg16, ptr noalias align 16 dereferenceable(1024) %arg17, ptr noalias align 128 dereferenceable(1024) %arg18, ptr noalias align 16 dereferenceable(1024) %arg19, ptr noalias align 128 dereferenceable(1024) %arg20, ptr noalias align 16 dereferenceable(1024) %arg21, ptr noalias align 128 dereferenceable(1024) %arg22, ptr noalias align 16 dereferenceable(1024) %arg23, ptr noalias align 128 dereferenceable(1024) %arg24, ptr noalias align 16 dereferenceable(1024) %arg25, ptr noalias align 128 dereferenceable(1024) %arg26, ptr noalias align 16 dereferenceable(1024) %arg27, ptr noalias align 128 dereferenceable(1024) %arg28, ptr noalias align 16 dereferenceable(1024) %arg29, ptr noalias align 128 dereferenceable(1024) %arg30, ptr noalias align 16 dereferenceable(1024) %arg31, ptr noalias align 128 dereferenceable(1024) %arg32, ptr noalias align 16 dereferenceable(1024) %arg33, ptr noalias align 128 dereferenceable(1024) %arg34, ptr noalias align 16 dereferenceable(1024) %arg35, ptr noalias align 128 dereferenceable(1024) %arg36, ptr noalias align 16 dereferenceable(1024) %arg37, ptr noalias align 128 dereferenceable(1024) %arg38, ptr noalias align 16 dereferenceable(1024) %arg39, ptr noalias align 128 dereferenceable(1024) %arg40) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 256
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 256
  br i1 %4, label %fusion_375.in_bounds-true, label %fusion_375.in_bounds-after

fusion_375.in_bounds-after:                       ; preds = %fusion_375.in_bounds-true, %entry
  ret void

fusion_375.in_bounds-true:                        ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.43 = fmul float %7, %9
  %subtract.44 = fsub float %6, %multiply.43
  %10 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.45 = fmul float %7, %14
  %subtract.46 = fsub float %12, %multiply.45
  %15 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %10, float %subtract.46, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.47 = fmul float %7, %19
  %subtract.48 = fsub float %17, %multiply.47
  %20 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %15, float %subtract.48, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.49 = fmul float %7, %24
  %subtract.50 = fsub float %22, %multiply.49
  %25 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %20, float %subtract.50, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.51 = fmul float %7, %29
  %subtract.52 = fsub float %27, %multiply.51
  %30 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %25, float %subtract.52, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.53 = fmul float %7, %34
  %subtract.54 = fsub float %32, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %30, float %subtract.54, 5
  %36 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %39 = load float, ptr %38, align 4
  %multiply.55 = fmul float %7, %39
  %subtract.56 = fsub float %37, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 6
  %41 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %44 = load float, ptr %43, align 4
  %multiply.57 = fmul float %7, %44
  %subtract.58 = fsub float %42, %multiply.57
  %45 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.58, 7
  %46 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %47 = load float, ptr %46, align 4, !invariant.load !197
  %48 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %49 = load float, ptr %48, align 4
  %multiply.59 = fmul float %7, %49
  %subtract.60 = fsub float %47, %multiply.59
  %50 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %45, float %subtract.60, 8
  %51 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %52 = load float, ptr %51, align 4, !invariant.load !197
  %53 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %54 = load float, ptr %53, align 4
  %multiply.61 = fmul float %7, %54
  %subtract.62 = fsub float %52, %multiply.61
  %55 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %50, float %subtract.62, 9
  %56 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %57 = load float, ptr %56, align 4, !invariant.load !197
  %58 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %59 = load float, ptr %58, align 4
  %multiply.63 = fmul float %7, %59
  %subtract.64 = fsub float %57, %multiply.63
  %60 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %55, float %subtract.64, 10
  %61 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %63 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %64 = load float, ptr %63, align 4
  %multiply.65 = fmul float %7, %64
  %subtract.66 = fsub float %62, %multiply.65
  %65 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %60, float %subtract.66, 11
  %66 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %68 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %69 = load float, ptr %68, align 4
  %multiply.67 = fmul float %7, %69
  %subtract.68 = fsub float %67, %multiply.67
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %65, float %subtract.68, 12
  %71 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %74 = load float, ptr %73, align 4
  %multiply.69 = fmul float %7, %74
  %subtract.70 = fsub float %72, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.70, 13
  %76 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !197
  %78 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %79 = load float, ptr %78, align 4
  %multiply.71 = fmul float %7, %79
  %subtract.72 = fsub float %77, %multiply.71
  %80 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.72, 14
  %81 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %82 = load float, ptr %81, align 4, !invariant.load !197
  %83 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %84 = load float, ptr %83, align 4
  %multiply.73 = fmul float %7, %84
  %subtract.74 = fsub float %82, %multiply.73
  %85 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %80, float %subtract.74, 15
  %86 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %87 = load float, ptr %86, align 4, !invariant.load !197
  %88 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %89 = load float, ptr %88, align 4
  %multiply.75 = fmul float %7, %89
  %subtract.76 = fsub float %87, %multiply.75
  %90 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %85, float %subtract.76, 16
  %91 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %92 = load float, ptr %91, align 4, !invariant.load !197
  %93 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %94 = load float, ptr %93, align 4
  %multiply.77 = fmul float %7, %94
  %subtract.78 = fsub float %92, %multiply.77
  %95 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %90, float %subtract.78, 17
  %96 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %99 = load float, ptr %98, align 4
  %multiply.79 = fmul float %7, %99
  %subtract.80 = fsub float %97, %multiply.79
  %100 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %95, float %subtract.80, 18
  %101 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %102 = load float, ptr %101, align 4, !invariant.load !197
  %103 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %104 = load float, ptr %103, align 4
  %multiply.81 = fmul float %7, %104
  %subtract.82 = fsub float %102, %multiply.81
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %100, float %subtract.82, 19
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 14
  %135 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 15
  %137 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 16
  %139 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 17
  %141 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 18
  %143 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 19
  %145 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %144, ptr %145, align 4
  br label %fusion_375.in_bounds-after
}

define void @fusion_48(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(524288) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(524288) %arg3, ptr noalias align 128 dereferenceable(524288) %arg4, ptr noalias align 16 dereferenceable(524288) %arg5, ptr noalias align 128 dereferenceable(524288) %arg6, ptr noalias align 16 dereferenceable(524288) %arg7, ptr noalias align 128 dereferenceable(524288) %arg8, ptr noalias align 16 dereferenceable(524288) %arg9, ptr noalias align 128 dereferenceable(524288) %arg10, ptr noalias align 16 dereferenceable(524288) %arg11, ptr noalias align 128 dereferenceable(524288) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index_base, 256
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 256
  %8 = udiv i32 %linear_index1, 256
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 256
  %11 = udiv i32 %linear_index2, 256
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 256
  %14 = udiv i32 %linear_index3, 256
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %fusion_48.in_bounds-true, label %fusion_48.in_bounds-after

fusion_48.in_bounds-after:                        ; preds = %fusion_48.in_bounds-true, %entry
  ret void

fusion_48.in_bounds-true:                         ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %20 = load float, ptr %19, align 4
  %multiply.15 = fmul float %18, %20
  %subtract.16 = fsub float %17, %multiply.15
  %21 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %25 = load float, ptr %24, align 4
  %multiply.17 = fmul float %18, %25
  %subtract.18 = fsub float %23, %multiply.17
  %26 = insertvalue { float, float, float, float, float, float } %21, float %subtract.18, 1
  %27 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %28 = load float, ptr %27, align 4, !invariant.load !197
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %30 = load float, ptr %29, align 4
  %multiply.19 = fmul float %18, %30
  %subtract.20 = fsub float %28, %multiply.19
  %31 = insertvalue { float, float, float, float, float, float } %26, float %subtract.20, 2
  %32 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %33 = load float, ptr %32, align 4, !invariant.load !197
  %34 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %35 = load float, ptr %34, align 4
  %multiply.21 = fmul float %18, %35
  %subtract.22 = fsub float %33, %multiply.21
  %36 = insertvalue { float, float, float, float, float, float } %31, float %subtract.22, 3
  %37 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %38 = load float, ptr %37, align 4, !invariant.load !197
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %40 = load float, ptr %39, align 4
  %multiply.23 = fmul float %18, %40
  %subtract.24 = fsub float %38, %multiply.23
  %41 = insertvalue { float, float, float, float, float, float } %36, float %subtract.24, 4
  %42 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %43 = load float, ptr %42, align 4, !invariant.load !197
  %44 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %45 = load float, ptr %44, align 4
  %multiply.25 = fmul float %18, %45
  %subtract.26 = fsub float %43, %multiply.25
  %46 = insertvalue { float, float, float, float, float, float } %41, float %subtract.26, 5
  %47 = extractvalue { float, float, float, float, float, float } %46, 0
  %48 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float, float } %46, 1
  %50 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float, float } %46, 2
  %52 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float } %46, 3
  %54 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %53, ptr %54, align 4
  %55 = extractvalue { float, float, float, float, float, float } %46, 4
  %56 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float } %46, 5
  %58 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %57, ptr %58, align 4
  %59 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %61 = load float, ptr %arg2, align 4, !invariant.load !197
  %62 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %63 = load float, ptr %62, align 4
  %multiply.151 = fmul float %61, %63
  %subtract.162 = fsub float %60, %multiply.151
  %64 = insertvalue { float, float, float, float, float, float } undef, float %subtract.162, 0
  %65 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %66 = load float, ptr %65, align 4, !invariant.load !197
  %67 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %68 = load float, ptr %67, align 4
  %multiply.173 = fmul float %61, %68
  %subtract.184 = fsub float %66, %multiply.173
  %69 = insertvalue { float, float, float, float, float, float } %64, float %subtract.184, 1
  %70 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %71 = load float, ptr %70, align 4, !invariant.load !197
  %72 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %73 = load float, ptr %72, align 4
  %multiply.195 = fmul float %61, %73
  %subtract.206 = fsub float %71, %multiply.195
  %74 = insertvalue { float, float, float, float, float, float } %69, float %subtract.206, 2
  %75 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %77 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %78 = load float, ptr %77, align 4
  %multiply.217 = fmul float %61, %78
  %subtract.228 = fsub float %76, %multiply.217
  %79 = insertvalue { float, float, float, float, float, float } %74, float %subtract.228, 3
  %80 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %81 = load float, ptr %80, align 4, !invariant.load !197
  %82 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %83 = load float, ptr %82, align 4
  %multiply.239 = fmul float %61, %83
  %subtract.2410 = fsub float %81, %multiply.239
  %84 = insertvalue { float, float, float, float, float, float } %79, float %subtract.2410, 4
  %85 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %87 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %88 = load float, ptr %87, align 4
  %multiply.2511 = fmul float %61, %88
  %subtract.2612 = fsub float %86, %multiply.2511
  %89 = insertvalue { float, float, float, float, float, float } %84, float %subtract.2612, 5
  %90 = extractvalue { float, float, float, float, float, float } %89, 0
  %91 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  store float %90, ptr %91, align 4
  %92 = extractvalue { float, float, float, float, float, float } %89, 1
  %93 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  store float %92, ptr %93, align 4
  %94 = extractvalue { float, float, float, float, float, float } %89, 2
  %95 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  store float %94, ptr %95, align 4
  %96 = extractvalue { float, float, float, float, float, float } %89, 3
  %97 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %96, ptr %97, align 4
  %98 = extractvalue { float, float, float, float, float, float } %89, 4
  %99 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %98, ptr %99, align 4
  %100 = extractvalue { float, float, float, float, float, float } %89, 5
  %101 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %100, ptr %101, align 4
  %102 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %103 = load float, ptr %102, align 4, !invariant.load !197
  %104 = load float, ptr %arg2, align 4, !invariant.load !197
  %105 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %106 = load float, ptr %105, align 4
  %multiply.1513 = fmul float %104, %106
  %subtract.1614 = fsub float %103, %multiply.1513
  %107 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1614, 0
  %108 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %109 = load float, ptr %108, align 4, !invariant.load !197
  %110 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %111 = load float, ptr %110, align 4
  %multiply.1715 = fmul float %104, %111
  %subtract.1816 = fsub float %109, %multiply.1715
  %112 = insertvalue { float, float, float, float, float, float } %107, float %subtract.1816, 1
  %113 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %115 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %116 = load float, ptr %115, align 4
  %multiply.1917 = fmul float %104, %116
  %subtract.2018 = fsub float %114, %multiply.1917
  %117 = insertvalue { float, float, float, float, float, float } %112, float %subtract.2018, 2
  %118 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %119 = load float, ptr %118, align 4, !invariant.load !197
  %120 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %121 = load float, ptr %120, align 4
  %multiply.2119 = fmul float %104, %121
  %subtract.2220 = fsub float %119, %multiply.2119
  %122 = insertvalue { float, float, float, float, float, float } %117, float %subtract.2220, 3
  %123 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %124 = load float, ptr %123, align 4, !invariant.load !197
  %125 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %126 = load float, ptr %125, align 4
  %multiply.2321 = fmul float %104, %126
  %subtract.2422 = fsub float %124, %multiply.2321
  %127 = insertvalue { float, float, float, float, float, float } %122, float %subtract.2422, 4
  %128 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %129 = load float, ptr %128, align 4, !invariant.load !197
  %130 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %131 = load float, ptr %130, align 4
  %multiply.2523 = fmul float %104, %131
  %subtract.2624 = fsub float %129, %multiply.2523
  %132 = insertvalue { float, float, float, float, float, float } %127, float %subtract.2624, 5
  %133 = extractvalue { float, float, float, float, float, float } %132, 0
  %134 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  store float %133, ptr %134, align 4
  %135 = extractvalue { float, float, float, float, float, float } %132, 1
  %136 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  store float %135, ptr %136, align 4
  %137 = extractvalue { float, float, float, float, float, float } %132, 2
  %138 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  store float %137, ptr %138, align 4
  %139 = extractvalue { float, float, float, float, float, float } %132, 3
  %140 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float } %132, 4
  %142 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float } %132, 5
  %144 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %143, ptr %144, align 4
  %145 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %146 = load float, ptr %145, align 4, !invariant.load !197
  %147 = load float, ptr %arg2, align 4, !invariant.load !197
  %148 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %149 = load float, ptr %148, align 4
  %multiply.1525 = fmul float %147, %149
  %subtract.1626 = fsub float %146, %multiply.1525
  %150 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1626, 0
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %152 = load float, ptr %151, align 4, !invariant.load !197
  %153 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %154 = load float, ptr %153, align 4
  %multiply.1727 = fmul float %147, %154
  %subtract.1828 = fsub float %152, %multiply.1727
  %155 = insertvalue { float, float, float, float, float, float } %150, float %subtract.1828, 1
  %156 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %157 = load float, ptr %156, align 4, !invariant.load !197
  %158 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %159 = load float, ptr %158, align 4
  %multiply.1929 = fmul float %147, %159
  %subtract.2030 = fsub float %157, %multiply.1929
  %160 = insertvalue { float, float, float, float, float, float } %155, float %subtract.2030, 2
  %161 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %162 = load float, ptr %161, align 4, !invariant.load !197
  %163 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %164 = load float, ptr %163, align 4
  %multiply.2131 = fmul float %147, %164
  %subtract.2232 = fsub float %162, %multiply.2131
  %165 = insertvalue { float, float, float, float, float, float } %160, float %subtract.2232, 3
  %166 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %167 = load float, ptr %166, align 4, !invariant.load !197
  %168 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %169 = load float, ptr %168, align 4
  %multiply.2333 = fmul float %147, %169
  %subtract.2434 = fsub float %167, %multiply.2333
  %170 = insertvalue { float, float, float, float, float, float } %165, float %subtract.2434, 4
  %171 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %172 = load float, ptr %171, align 4, !invariant.load !197
  %173 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %174 = load float, ptr %173, align 4
  %multiply.2535 = fmul float %147, %174
  %subtract.2636 = fsub float %172, %multiply.2535
  %175 = insertvalue { float, float, float, float, float, float } %170, float %subtract.2636, 5
  %176 = extractvalue { float, float, float, float, float, float } %175, 0
  %177 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float } %175, 1
  %179 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float } %175, 2
  %181 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float } %175, 3
  %183 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float } %175, 4
  %185 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float } %175, 5
  %187 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %186, ptr %187, align 4
  br label %fusion_48.in_bounds-after
}

define void @fusion_34(ptr noalias align 128 dereferenceable(16777216) %arg0, ptr noalias align 16 dereferenceable(16777216) %arg1, ptr noalias align 128 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(16777216) %arg3) {
entry:
  %return_buffer58 = alloca float, align 4
  %result_from_other_lane56 = alloca float, align 4
  %return_buffer55 = alloca float, align 4
  %result_from_other_lane53 = alloca float, align 4
  %return_buffer52 = alloca float, align 4
  %result_from_other_lane50 = alloca float, align 4
  %return_buffer49 = alloca float, align 4
  %result_from_other_lane47 = alloca float, align 4
  %return_buffer46 = alloca float, align 4
  %result_from_other_lane44 = alloca float, align 4
  %return_buffer40 = alloca float, align 4
  %result_from_other_lane38 = alloca float, align 4
  %return_buffer37 = alloca float, align 4
  %result_from_other_lane35 = alloca float, align 4
  %return_buffer34 = alloca float, align 4
  %result_from_other_lane32 = alloca float, align 4
  %return_buffer31 = alloca float, align 4
  %result_from_other_lane29 = alloca float, align 4
  %return_buffer28 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after60, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %region_0_15_constant_8 = load float, ptr @46, align 4
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %region_0_15_constant_8, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %region_0_15_constant_8, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !193
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 512
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 8
  %14 = udiv i32 %9, 8
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 8
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 128, i32 4096
  %18 = icmp eq i32 %13, 7
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after13, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc11 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc11
  %33 = icmp ult i32 %x_loc11, %tile_bound1
  br i1 %33, label %x_in_tile-true12, label %x_in_tile-after13

x_in_tile-after13:                                ; preds = %x_in_tile-true12, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !362

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !363

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result27 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result27, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane, ptr %return_buffer28)
  %38 = load float, ptr %return_buffer28, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result30 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result30, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane29, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane29, ptr %return_buffer31)
  %40 = load float, ptr %return_buffer31, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result33 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result33, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane32, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane32, ptr %return_buffer34)
  %42 = load float, ptr %return_buffer34, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result36 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result36, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane35, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane35, ptr %return_buffer37)
  %44 = load float, ptr %return_buffer37, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result39 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result39, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane38, align 4
  call void @region_1_9__2(ptr %36, ptr %result_from_other_lane38, ptr %return_buffer40)
  %46 = load float, ptr %return_buffer40, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address41 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address41 to ptr
  %current_output42 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output42, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr43 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache72, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr43 to ptr
  %partial_reduction_result45 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result45, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane44, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane44, ptr %return_buffer46)
  %57 = load float, ptr %return_buffer46, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result48 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result48, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane47, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane47, ptr %return_buffer49)
  %59 = load float, ptr %return_buffer49, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result51 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result51, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane50, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane50, ptr %return_buffer52)
  %61 = load float, ptr %return_buffer52, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result54 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result54, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane53, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane53, ptr %return_buffer55)
  %63 = load float, ptr %return_buffer55, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result57 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result57, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane56, align 4
  call void @region_1_9__2(ptr %55, ptr %result_from_other_lane56, ptr %return_buffer58)
  %65 = load float, ptr %return_buffer58, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true59, label %reduction_write_output-after60

reduction_write_output-after60:                   ; preds = %reduction_write_output-true59, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul nuw nsw i32 %27, 1
  %73 = add nuw nsw i32 0, %72
  %74 = mul nuw nsw i32 %26, 512
  %75 = add nuw nsw i32 %73, %74
  %76 = mul nuw nsw i32 %tile_origin.0, 65536
  %77 = add nuw nsw i32 %75, %76
  %78 = udiv i32 %77, 1
  %79 = urem i32 %78, 512
  %80 = udiv i32 %77, 512
  %81 = urem i32 %80, 128
  %82 = udiv i32 %77, 65536
  %83 = mul i32 %thread_id.x, 2
  %84 = sub i32 %x_loc, %83
  %85 = mul nuw nsw i32 %79, 1
  %86 = add nuw nsw i32 0, %85
  %87 = udiv i32 %86, 512
  %88 = mul nuw nsw i32 %81, 1
  %89 = add nuw nsw i32 0, %88
  %90 = mul nuw nsw i32 %82, 128
  %91 = add nuw nsw i32 %89, %90
  %92 = udiv i32 %91, 8192
  %Arg_1.2 = getelementptr inbounds [8192 x [512 x float]], ptr %arg1, i32 0, i32 %91, i32 %86
  %Arg_1.23 = load float, ptr %Arg_1.2, align 4, !invariant.load !197
  %region_0_15_constant_3 = load float, ptr @45, align 4
  %compare.5 = fcmp ogt float %Arg_1.23, %region_0_15_constant_3
  %93 = zext i1 %compare.5 to i8
  %Arg_0.1 = getelementptr inbounds [8192 x [512 x float]], ptr %arg0, i32 0, i32 %91, i32 %86
  %Arg_0.14 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  %94 = trunc i8 %93 to i1
  %95 = select i1 %94, float %Arg_0.14, float %region_0_15_constant_3
  store float %95, ptr %reduction_input_address, align 4
  %96 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %84
  call void @region_1_9__2(ptr %96, ptr %reduction_input_address, ptr %return_buffer)
  %97 = load float, ptr %return_buffer, align 4
  store float %97, ptr %96, align 4
  %98 = mul nuw nsw i32 %79, 1
  %99 = add nuw nsw i32 0, %98
  %100 = udiv i32 %99, 512
  %101 = mul nuw nsw i32 %81, 1
  %102 = add nuw nsw i32 0, %101
  %103 = mul nuw nsw i32 %82, 128
  %104 = add nuw nsw i32 %102, %103
  %105 = udiv i32 %104, 8192
  %Arg_1.25 = getelementptr inbounds float, ptr %arg1, i32 %77
  %Arg_1.26 = load float, ptr %Arg_1.25, align 4, !invariant.load !197
  %region_0_15_constant_37 = load float, ptr @45, align 4
  %compare.58 = fcmp ogt float %Arg_1.26, %region_0_15_constant_37
  %106 = zext i1 %compare.58 to i8
  %Arg_0.19 = getelementptr inbounds float, ptr %arg0, i32 %77
  %Arg_0.110 = load float, ptr %Arg_0.19, align 4, !invariant.load !197
  %107 = trunc i8 %106 to i1
  %108 = select i1 %107, float %Arg_0.110, float %region_0_15_constant_37
  %109 = mul nuw nsw i32 %79, 1
  %110 = add nuw nsw i32 0, %109
  %111 = udiv i32 %110, 512
  %112 = mul nuw nsw i32 %81, 1
  %113 = add nuw nsw i32 0, %112
  %114 = mul nuw nsw i32 %82, 128
  %115 = add nuw nsw i32 %113, %114
  %116 = udiv i32 %115, 8192
  %117 = getelementptr inbounds [8192 x [512 x float]], ptr %arg3, i32 0, i32 %115, i32 %110
  store float %108, ptr %117, align 4
  br label %x_in_tile-after

x_in_tile-true12:                                 ; preds = %x_in_tile-after
  %118 = mul nuw nsw i32 %32, 1
  %119 = add nuw nsw i32 0, %118
  %120 = mul nuw nsw i32 %31, 512
  %121 = add nuw nsw i32 %119, %120
  %122 = mul nuw nsw i32 %tile_origin.0, 65536
  %123 = add nuw nsw i32 %121, %122
  %124 = udiv i32 %123, 1
  %125 = urem i32 %124, 512
  %126 = udiv i32 %123, 512
  %127 = urem i32 %126, 128
  %128 = udiv i32 %123, 65536
  %129 = mul i32 %thread_id.x, 2
  %130 = sub i32 %x_loc11, %129
  %131 = mul nuw nsw i32 %125, 1
  %132 = add nuw nsw i32 0, %131
  %133 = udiv i32 %132, 512
  %134 = mul nuw nsw i32 %127, 1
  %135 = add nuw nsw i32 0, %134
  %136 = mul nuw nsw i32 %128, 128
  %137 = add nuw nsw i32 %135, %136
  %138 = udiv i32 %137, 8192
  %Arg_1.214 = getelementptr inbounds [8192 x [512 x float]], ptr %arg1, i32 0, i32 %137, i32 %132
  %Arg_1.215 = load float, ptr %Arg_1.214, align 4, !invariant.load !197
  %region_0_15_constant_316 = load float, ptr @45, align 4
  %compare.517 = fcmp ogt float %Arg_1.215, %region_0_15_constant_316
  %139 = zext i1 %compare.517 to i8
  %Arg_0.118 = getelementptr inbounds [8192 x [512 x float]], ptr %arg0, i32 0, i32 %137, i32 %132
  %Arg_0.119 = load float, ptr %Arg_0.118, align 4, !invariant.load !197
  %140 = trunc i8 %139 to i1
  %141 = select i1 %140, float %Arg_0.119, float %region_0_15_constant_316
  store float %141, ptr %reduction_input_address, align 4
  %142 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %130
  call void @region_1_9__2(ptr %142, ptr %reduction_input_address, ptr %return_buffer20)
  %143 = load float, ptr %return_buffer20, align 4
  store float %143, ptr %142, align 4
  %144 = mul nuw nsw i32 %125, 1
  %145 = add nuw nsw i32 0, %144
  %146 = udiv i32 %145, 512
  %147 = mul nuw nsw i32 %127, 1
  %148 = add nuw nsw i32 0, %147
  %149 = mul nuw nsw i32 %128, 128
  %150 = add nuw nsw i32 %148, %149
  %151 = udiv i32 %150, 8192
  %Arg_1.221 = getelementptr inbounds float, ptr %arg1, i32 %123
  %Arg_1.222 = load float, ptr %Arg_1.221, align 4, !invariant.load !197
  %region_0_15_constant_323 = load float, ptr @45, align 4
  %compare.524 = fcmp ogt float %Arg_1.222, %region_0_15_constant_323
  %152 = zext i1 %compare.524 to i8
  %Arg_0.125 = getelementptr inbounds float, ptr %arg0, i32 %123
  %Arg_0.126 = load float, ptr %Arg_0.125, align 4, !invariant.load !197
  %153 = trunc i8 %152 to i1
  %154 = select i1 %153, float %Arg_0.126, float %region_0_15_constant_323
  %155 = mul nuw nsw i32 %125, 1
  %156 = add nuw nsw i32 0, %155
  %157 = udiv i32 %156, 512
  %158 = mul nuw nsw i32 %127, 1
  %159 = add nuw nsw i32 0, %158
  %160 = mul nuw nsw i32 %128, 128
  %161 = add nuw nsw i32 %159, %160
  %162 = udiv i32 %161, 8192
  %163 = getelementptr inbounds [8192 x [512 x float]], ptr %arg3, i32 0, i32 %161, i32 %156
  store float %154, ptr %163, align 4
  br label %x_in_tile-after13

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %164 = mul i32 %thread_id.y, 2
  %165 = add i32 %tile_origin.1, %thread_id.x
  %166 = add i32 %tile_origin.2, %164
  %167 = add i32 %166, 0
  %168 = mul i32 %tile_origin.0, 512
  %169 = add i32 %168, %167
  %170 = udiv i32 %169, 1
  %171 = urem i32 %170, 512
  %172 = udiv i32 %169, 512
  %output_element_address = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %172, i32 %171
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true59:                    ; preds = %reduction_write_output-after
  %173 = mul i32 %thread_id.y, 2
  %174 = add i32 %tile_origin.1, %thread_id.x
  %175 = add i32 %tile_origin.2, %173
  %176 = add i32 %175, 1
  %177 = mul i32 %tile_origin.0, 512
  %178 = add i32 %177, %176
  %179 = udiv i32 %178, 1
  %180 = urem i32 %179, 512
  %181 = udiv i32 %178, 512
  %output_element_address61 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %181, i32 %180
  %output62 = load float, ptr %55, align 4
  store float %output62, ptr %output_element_address61, align 4
  br label %reduction_write_output-after60
}

define internal void @region_1_9__2(ptr dereferenceable(4) %Arg_0.10.typed, ptr dereferenceable(4) %Arg_1.11.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.12.typed = alloca float, align 4
  %Arg_0.10 = load float, ptr %Arg_0.10.typed, align 4
  %Arg_1.11 = load float, ptr %Arg_1.11.typed, align 4
  %add.12 = fadd float %Arg_0.10, %Arg_1.11
  store float %add.12, ptr %add.12.typed, align 4
  %load_ret_value = load float, ptr %add.12.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_670(ptr noalias align 128 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(2048) %arg2) {
entry:
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !194
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %2 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %2, align 4
  %3 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %3, align 4
  %4 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %5 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %6 = urem i32 %4, 1024
  %7 = udiv i32 %4, 1024
  %8 = mul i32 %5, 1
  %9 = add i32 %8, %7
  %10 = icmp ult i32 %9, 8
  br i1 %10, label %11, label %early_return

11:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %6, 32
  %thread_id.y = udiv i32 %6, 32
  %lane_id = urem i32 %6, 32
  %12 = udiv i32 %9, 1
  %13 = urem i32 %12, 8
  %14 = udiv i32 %9, 8
  %15 = urem i32 %14, 1
  %16 = udiv i32 %9, 8
  %17 = icmp eq i32 %15, 0
  %tile_bound = select i1 %17, i32 64, i32 4096
  %18 = icmp eq i32 %13, 7
  %tile_bound1 = select i1 %18, i32 64, i32 64
  %tile_origin.0 = mul i32 %16, 1
  %tile_origin.1 = mul i32 %15, 4096
  %tile_origin.2 = mul i32 %13, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %11
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %19 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %19, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %20 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %21 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %22 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %22, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %23 = icmp eq i32 %tile_loop.indvar, 0
  %24 = mul i32 %tile_loop.indvar, 2
  %25 = add i32 %24, 0
  %x_loc = add i32 %25, %21
  %26 = add i32 %tile_origin.1, %y_in_tile.indvar
  %27 = add i32 %tile_origin.2, %x_loc
  %28 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %28, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %29 = mul i32 %tile_loop.indvar, 2
  %30 = add i32 %29, 1
  %x_loc4 = add i32 %30, %21
  %31 = add i32 %tile_origin.1, %y_in_tile.indvar
  %32 = add i32 %tile_origin.2, %x_loc4
  %33 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %33, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !364

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !365

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %7, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %34 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %35 = load float, ptr %current_output, align 4
  store float %35, ptr %34, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %7, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %36 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %36, align 4
  %37 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %37, ptr %result_from_other_lane, align 4
  call void @region_1_3__2(ptr %36, ptr %result_from_other_lane, ptr %return_buffer11)
  %38 = load float, ptr %return_buffer11, align 4
  store float %38, ptr %36, align 4
  %partial_reduction_result13 = load float, ptr %36, align 4
  %39 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %39, ptr %result_from_other_lane12, align 4
  call void @region_1_3__2(ptr %36, ptr %result_from_other_lane12, ptr %return_buffer14)
  %40 = load float, ptr %return_buffer14, align 4
  store float %40, ptr %36, align 4
  %partial_reduction_result16 = load float, ptr %36, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %41, ptr %result_from_other_lane15, align 4
  call void @region_1_3__2(ptr %36, ptr %result_from_other_lane15, ptr %return_buffer17)
  %42 = load float, ptr %return_buffer17, align 4
  store float %42, ptr %36, align 4
  %partial_reduction_result19 = load float, ptr %36, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %43, ptr %result_from_other_lane18, align 4
  call void @region_1_3__2(ptr %36, ptr %result_from_other_lane18, ptr %return_buffer20)
  %44 = load float, ptr %return_buffer20, align 4
  store float %44, ptr %36, align 4
  %partial_reduction_result22 = load float, ptr %36, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %45, ptr %result_from_other_lane21, align 4
  call void @region_1_3__2(ptr %36, ptr %result_from_other_lane21, ptr %return_buffer23)
  %46 = load float, ptr %return_buffer23, align 4
  store float %46, ptr %36, align 4
  %47 = icmp ult i32 %thread_id.x, %tile_bound
  %48 = mul i32 %thread_id.y, 2
  %49 = icmp ult i32 %48, %tile_bound1
  %50 = and i1 %49, %47
  %51 = icmp eq i32 %lane_id, 0
  %52 = and i1 %50, %51
  br i1 %52, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %7, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %53 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %54 = load float, ptr %current_output25, align 4
  store float %54, ptr %53, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache73, i32 0, i32 %7, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %55 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %55, align 4
  %56 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %56, ptr %result_from_other_lane27, align 4
  call void @region_1_3__2(ptr %55, ptr %result_from_other_lane27, ptr %return_buffer29)
  %57 = load float, ptr %return_buffer29, align 4
  store float %57, ptr %55, align 4
  %partial_reduction_result31 = load float, ptr %55, align 4
  %58 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %58, ptr %result_from_other_lane30, align 4
  call void @region_1_3__2(ptr %55, ptr %result_from_other_lane30, ptr %return_buffer32)
  %59 = load float, ptr %return_buffer32, align 4
  store float %59, ptr %55, align 4
  %partial_reduction_result34 = load float, ptr %55, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %60, ptr %result_from_other_lane33, align 4
  call void @region_1_3__2(ptr %55, ptr %result_from_other_lane33, ptr %return_buffer35)
  %61 = load float, ptr %return_buffer35, align 4
  store float %61, ptr %55, align 4
  %partial_reduction_result37 = load float, ptr %55, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %62, ptr %result_from_other_lane36, align 4
  call void @region_1_3__2(ptr %55, ptr %result_from_other_lane36, ptr %return_buffer38)
  %63 = load float, ptr %return_buffer38, align 4
  store float %63, ptr %55, align 4
  %partial_reduction_result40 = load float, ptr %55, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %64, ptr %result_from_other_lane39, align 4
  call void @region_1_3__2(ptr %55, ptr %result_from_other_lane39, ptr %return_buffer41)
  %65 = load float, ptr %return_buffer41, align 4
  store float %65, ptr %55, align 4
  %66 = icmp ult i32 %thread_id.x, %tile_bound
  %67 = mul i32 %thread_id.y, 2
  %68 = icmp ult i32 %67, %tile_bound1
  %69 = and i1 %68, %66
  %70 = icmp eq i32 %lane_id, 0
  %71 = and i1 %69, %70
  br i1 %71, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %72 = mul i32 %thread_id.x, 2
  %73 = sub i32 %x_loc, %72
  %Arg_0.1 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %74 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %73
  call void @region_1_3__2(ptr %74, ptr %reduction_input_address, ptr %return_buffer)
  %75 = load float, ptr %return_buffer, align 4
  store float %75, ptr %74, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc4, %76
  %Arg_0.17 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_3__2(ptr %78, ptr %reduction_input_address, ptr %return_buffer9)
  %79 = load float, ptr %return_buffer9, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %80 = mul i32 %thread_id.y, 2
  %81 = add i32 %tile_origin.1, %thread_id.x
  %82 = add i32 %tile_origin.2, %80
  %83 = add i32 %82, 0
  %84 = mul i32 %tile_origin.0, 512
  %85 = add i32 %84, %83
  %86 = udiv i32 %85, 1
  %output_element_address = getelementptr inbounds [512 x float], ptr %arg2, i32 0, i32 %86
  %output = load float, ptr %36, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %87 = mul i32 %thread_id.y, 2
  %88 = add i32 %tile_origin.1, %thread_id.x
  %89 = add i32 %tile_origin.2, %87
  %90 = add i32 %89, 1
  %91 = mul i32 %tile_origin.0, 512
  %92 = add i32 %91, %90
  %93 = udiv i32 %92, 1
  %output_element_address44 = getelementptr inbounds [512 x float], ptr %arg2, i32 0, i32 %93
  %output45 = load float, ptr %55, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43
}

define internal void @region_1_3__2(ptr dereferenceable(4) %Arg_0.4.typed, ptr dereferenceable(4) %Arg_1.5.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.6.typed = alloca float, align 4
  %Arg_0.4 = load float, ptr %Arg_0.4.typed, align 4
  %Arg_1.5 = load float, ptr %Arg_1.5.typed, align 4
  %add.6 = fadd float %Arg_0.4, %Arg_1.5
  store float %add.6, ptr %add.6.typed, align 4
  %load_ret_value = load float, ptr %add.6.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @add_168(ptr noalias align 128 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(524288) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 16
  %5 = udiv i32 %linear_index_base, 16
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 16
  %8 = udiv i32 %linear_index1, 16
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 16
  %11 = udiv i32 %linear_index2, 16
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 16
  %14 = udiv i32 %linear_index3, 16
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %add_168.in_bounds-true, label %add_168.in_bounds-after

add_168.in_bounds-after:                          ; preds = %add_168.in_bounds-true, %entry
  ret void

add_168.in_bounds-true:                           ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4
  %18 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %add.3 = fadd float %17, %19
  %20 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  store float %add.3, ptr %20, align 4
  %21 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %22 = load float, ptr %21, align 4
  %23 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %add.31 = fadd float %22, %24
  %25 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  store float %add.31, ptr %25, align 4
  %26 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %27 = load float, ptr %26, align 4
  %28 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %add.32 = fadd float %27, %29
  %30 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  store float %add.32, ptr %30, align 4
  %31 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %32 = load float, ptr %31, align 4
  %33 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %add.33 = fadd float %32, %34
  %35 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  store float %add.33, ptr %35, align 4
  br label %add_168.in_bounds-after
}

define void @fusion_665(ptr noalias align 128 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(4) %arg1, ptr noalias align 128 dereferenceable(131072) %arg2, ptr noalias align 128 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(131072) %arg4, ptr noalias align 128 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(2048) %arg6, ptr noalias align 128 dereferenceable(2048) %arg7, ptr noalias align 128 dereferenceable(2048) %arg8, ptr noalias align 128 dereferenceable(2048) %arg9, ptr noalias align 128 dereferenceable(2048) %arg10) {
entry:
  %return_buffer357 = alloca float, align 4
  %result_from_other_lane355 = alloca float, align 4
  %return_buffer354 = alloca float, align 4
  %result_from_other_lane352 = alloca float, align 4
  %return_buffer351 = alloca float, align 4
  %result_from_other_lane349 = alloca float, align 4
  %return_buffer348 = alloca float, align 4
  %result_from_other_lane346 = alloca float, align 4
  %return_buffer345 = alloca float, align 4
  %result_from_other_lane343 = alloca float, align 4
  %return_buffer335 = alloca float, align 4
  %result_from_other_lane333 = alloca float, align 4
  %return_buffer332 = alloca float, align 4
  %result_from_other_lane330 = alloca float, align 4
  %return_buffer329 = alloca float, align 4
  %result_from_other_lane327 = alloca float, align 4
  %return_buffer326 = alloca float, align 4
  %result_from_other_lane324 = alloca float, align 4
  %return_buffer323 = alloca float, align 4
  %result_from_other_lane321 = alloca float, align 4
  %return_buffer317 = alloca float, align 4
  %return_buffer311 = alloca float, align 4
  %tile_loop.invar_address304 = alloca i32, align 4
  %y_in_tile.invar_address298 = alloca i32, align 4
  %partial_reduction_result284 = alloca float, i32 2, align 4
  %reduction_input_address283 = alloca float, align 4
  %return_buffer278 = alloca float, align 4
  %result_from_other_lane276 = alloca float, align 4
  %return_buffer275 = alloca float, align 4
  %result_from_other_lane273 = alloca float, align 4
  %return_buffer272 = alloca float, align 4
  %result_from_other_lane270 = alloca float, align 4
  %return_buffer269 = alloca float, align 4
  %result_from_other_lane267 = alloca float, align 4
  %return_buffer266 = alloca float, align 4
  %result_from_other_lane264 = alloca float, align 4
  %return_buffer256 = alloca float, align 4
  %result_from_other_lane254 = alloca float, align 4
  %return_buffer253 = alloca float, align 4
  %result_from_other_lane251 = alloca float, align 4
  %return_buffer250 = alloca float, align 4
  %result_from_other_lane248 = alloca float, align 4
  %return_buffer247 = alloca float, align 4
  %result_from_other_lane245 = alloca float, align 4
  %return_buffer244 = alloca float, align 4
  %result_from_other_lane242 = alloca float, align 4
  %return_buffer238 = alloca float, align 4
  %return_buffer232 = alloca float, align 4
  %tile_loop.invar_address225 = alloca i32, align 4
  %y_in_tile.invar_address219 = alloca i32, align 4
  %partial_reduction_result205 = alloca float, i32 2, align 4
  %reduction_input_address204 = alloca float, align 4
  %return_buffer199 = alloca float, align 4
  %result_from_other_lane197 = alloca float, align 4
  %return_buffer196 = alloca float, align 4
  %result_from_other_lane194 = alloca float, align 4
  %return_buffer193 = alloca float, align 4
  %result_from_other_lane191 = alloca float, align 4
  %return_buffer190 = alloca float, align 4
  %result_from_other_lane188 = alloca float, align 4
  %return_buffer187 = alloca float, align 4
  %result_from_other_lane185 = alloca float, align 4
  %return_buffer177 = alloca float, align 4
  %result_from_other_lane175 = alloca float, align 4
  %return_buffer174 = alloca float, align 4
  %result_from_other_lane172 = alloca float, align 4
  %return_buffer171 = alloca float, align 4
  %result_from_other_lane169 = alloca float, align 4
  %return_buffer168 = alloca float, align 4
  %result_from_other_lane166 = alloca float, align 4
  %return_buffer165 = alloca float, align 4
  %result_from_other_lane163 = alloca float, align 4
  %return_buffer159 = alloca float, align 4
  %return_buffer153 = alloca float, align 4
  %tile_loop.invar_address146 = alloca i32, align 4
  %y_in_tile.invar_address140 = alloca i32, align 4
  %partial_reduction_result126 = alloca float, i32 2, align 4
  %reduction_input_address125 = alloca float, align 4
  %return_buffer120 = alloca float, align 4
  %result_from_other_lane118 = alloca float, align 4
  %return_buffer117 = alloca float, align 4
  %result_from_other_lane115 = alloca float, align 4
  %return_buffer114 = alloca float, align 4
  %result_from_other_lane112 = alloca float, align 4
  %return_buffer111 = alloca float, align 4
  %result_from_other_lane109 = alloca float, align 4
  %return_buffer108 = alloca float, align 4
  %result_from_other_lane106 = alloca float, align 4
  %return_buffer98 = alloca float, align 4
  %result_from_other_lane96 = alloca float, align 4
  %return_buffer95 = alloca float, align 4
  %result_from_other_lane93 = alloca float, align 4
  %return_buffer92 = alloca float, align 4
  %result_from_other_lane90 = alloca float, align 4
  %return_buffer89 = alloca float, align 4
  %result_from_other_lane87 = alloca float, align 4
  %return_buffer86 = alloca float, align 4
  %result_from_other_lane84 = alloca float, align 4
  %return_buffer80 = alloca float, align 4
  %return_buffer74 = alloca float, align 4
  %tile_loop.invar_address67 = alloca i32, align 4
  %y_in_tile.invar_address61 = alloca i32, align 4
  %partial_reduction_result47 = alloca float, i32 2, align 4
  %reduction_input_address46 = alloca float, align 4
  %return_buffer41 = alloca float, align 4
  %result_from_other_lane39 = alloca float, align 4
  %return_buffer38 = alloca float, align 4
  %result_from_other_lane36 = alloca float, align 4
  %return_buffer35 = alloca float, align 4
  %result_from_other_lane33 = alloca float, align 4
  %return_buffer32 = alloca float, align 4
  %result_from_other_lane30 = alloca float, align 4
  %return_buffer29 = alloca float, align 4
  %result_from_other_lane27 = alloca float, align 4
  %return_buffer23 = alloca float, align 4
  %result_from_other_lane21 = alloca float, align 4
  %return_buffer20 = alloca float, align 4
  %result_from_other_lane18 = alloca float, align 4
  %return_buffer17 = alloca float, align 4
  %result_from_other_lane15 = alloca float, align 4
  %return_buffer14 = alloca float, align 4
  %result_from_other_lane12 = alloca float, align 4
  %return_buffer11 = alloca float, align 4
  %result_from_other_lane = alloca float, align 4
  %return_buffer9 = alloca float, align 4
  %return_buffer = alloca float, align 4
  %tile_loop.invar_address = alloca i32, align 4
  %y_in_tile.invar_address = alloca i32, align 4
  %partial_reduction_result = alloca float, i32 2, align 4
  %reduction_input_address = alloca float, align 4
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !range !294
  %1 = icmp eq i32 %0, 0
  br i1 %1, label %reduce-group-0-true, label %reduce-group-0-after

reduce-group-0-after:                             ; preds = %reduction_write_output-after43, %entry
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %reduce-group-1-true, label %reduce-group-1-after

reduce-group-1-after:                             ; preds = %reduction_write_output-after122, %reduce-group-0-after
  %3 = icmp eq i32 %0, 2
  br i1 %3, label %reduce-group-2-true, label %reduce-group-2-after

reduce-group-2-after:                             ; preds = %reduction_write_output-after201, %reduce-group-1-after
  %4 = icmp eq i32 %0, 3
  br i1 %4, label %reduce-group-3-true, label %reduce-group-3-after

reduce-group-3-after:                             ; preds = %reduction_write_output-after280, %reduce-group-2-after
  %5 = icmp eq i32 %0, 4
  br i1 %5, label %reduce-group-4-true, label %reduce-group-4-after

reduce-group-4-after:                             ; preds = %reduction_write_output-after359, %reduce-group-3-after
  ret void

reduce-group-0-true:                              ; preds = %entry
  %Arg_1.2 = load float, ptr %arg1, align 4, !invariant.load !197
  %6 = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  store float %Arg_1.2, ptr %6, align 4
  %7 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  store float %Arg_1.2, ptr %7, align 4
  %8 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %9 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %10 = urem i32 %8, 1024
  %11 = udiv i32 %8, 1024
  %12 = mul i32 %9, 1
  %13 = add i32 %12, %11
  %14 = icmp ult i32 %13, 8
  br i1 %14, label %15, label %early_return

15:                                               ; preds = %reduce-group-0-true
  %thread_id.x = urem i32 %10, 32
  %thread_id.y = udiv i32 %10, 32
  %lane_id = urem i32 %10, 32
  %16 = udiv i32 %13, 1
  %17 = urem i32 %16, 8
  %18 = udiv i32 %13, 8
  %19 = urem i32 %18, 1
  %20 = udiv i32 %13, 8
  %21 = icmp eq i32 %19, 0
  %tile_bound = select i1 %21, i32 64, i32 4096
  %22 = icmp eq i32 %17, 7
  %tile_bound1 = select i1 %22, i32 64, i32 64
  %tile_origin.0 = mul i32 %20, 1
  %tile_origin.1 = mul i32 %19, 4096
  %tile_origin.2 = mul i32 %17, 64
  store i32 %thread_id.y, ptr %y_in_tile.invar_address, align 4
  br label %y_in_tile.loop_header

y_in_tile.loop_header:                            ; preds = %tile_loop.loop_exit, %15
  %y_in_tile.indvar = load i32, ptr %y_in_tile.invar_address, align 4
  %23 = icmp uge i32 %y_in_tile.indvar, %tile_bound
  br i1 %23, label %y_in_tile.loop_exit, label %y_in_tile.loop_body

y_in_tile.loop_body:                              ; preds = %y_in_tile.loop_header
  %invar.inc = add nuw nsw i32 %y_in_tile.indvar, 32
  store i32 %invar.inc, ptr %y_in_tile.invar_address, align 4
  %24 = icmp eq i32 %y_in_tile.indvar, %thread_id.y
  %25 = mul i32 %thread_id.x, 2
  store i32 0, ptr %tile_loop.invar_address, align 4
  br label %tile_loop.loop_header

tile_loop.loop_header:                            ; preds = %x_in_tile-after6, %y_in_tile.loop_body
  %tile_loop.indvar = load i32, ptr %tile_loop.invar_address, align 4
  %26 = icmp uge i32 %tile_loop.indvar, 1
  br i1 %26, label %tile_loop.loop_exit, label %tile_loop.loop_body

tile_loop.loop_body:                              ; preds = %tile_loop.loop_header
  %invar.inc2 = add nuw nsw i32 %tile_loop.indvar, 1
  store i32 %invar.inc2, ptr %tile_loop.invar_address, align 4
  %27 = icmp eq i32 %tile_loop.indvar, 0
  %28 = mul i32 %tile_loop.indvar, 2
  %29 = add i32 %28, 0
  %x_loc = add i32 %29, %25
  %30 = add i32 %tile_origin.1, %y_in_tile.indvar
  %31 = add i32 %tile_origin.2, %x_loc
  %32 = icmp ult i32 %x_loc, %tile_bound1
  br i1 %32, label %x_in_tile-true, label %x_in_tile-after

x_in_tile-after:                                  ; preds = %x_in_tile-true, %tile_loop.loop_body
  %33 = mul i32 %tile_loop.indvar, 2
  %34 = add i32 %33, 1
  %x_loc4 = add i32 %34, %25
  %35 = add i32 %tile_origin.1, %y_in_tile.indvar
  %36 = add i32 %tile_origin.2, %x_loc4
  %37 = icmp ult i32 %x_loc4, %tile_bound1
  br i1 %37, label %x_in_tile-true5, label %x_in_tile-after6

x_in_tile-after6:                                 ; preds = %x_in_tile-true5, %x_in_tile-after
  br label %tile_loop.loop_header, !llvm.loop !366

tile_loop.loop_exit:                              ; preds = %tile_loop.loop_header
  br label %y_in_tile.loop_header, !llvm.loop !367

y_in_tile.loop_exit:                              ; preds = %y_in_tile.loop_header
  %shmem_output_address = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %11, i32 0, i32 %thread_id.x, i32 %thread_id.y
  %38 = addrspacecast ptr addrspace(3) %shmem_output_address to ptr
  %current_output = getelementptr inbounds float, ptr %partial_reduction_result, i32 0
  %39 = load float, ptr %current_output, align 4
  store float %39, ptr %38, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %11, i32 0, i32 %thread_id.y, i32 %thread_id.x
  %40 = addrspacecast ptr addrspace(3) %shmem_transposed_addr to ptr
  %partial_reduction_result10 = load float, ptr %40, align 4
  %41 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result10, i32 16, i32 31)
  store float %41, ptr %result_from_other_lane, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane, ptr %return_buffer11)
  %42 = load float, ptr %return_buffer11, align 4
  store float %42, ptr %40, align 4
  %partial_reduction_result13 = load float, ptr %40, align 4
  %43 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result13, i32 8, i32 31)
  store float %43, ptr %result_from_other_lane12, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane12, ptr %return_buffer14)
  %44 = load float, ptr %return_buffer14, align 4
  store float %44, ptr %40, align 4
  %partial_reduction_result16 = load float, ptr %40, align 4
  %45 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result16, i32 4, i32 31)
  store float %45, ptr %result_from_other_lane15, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane15, ptr %return_buffer17)
  %46 = load float, ptr %return_buffer17, align 4
  store float %46, ptr %40, align 4
  %partial_reduction_result19 = load float, ptr %40, align 4
  %47 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result19, i32 2, i32 31)
  store float %47, ptr %result_from_other_lane18, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane18, ptr %return_buffer20)
  %48 = load float, ptr %return_buffer20, align 4
  store float %48, ptr %40, align 4
  %partial_reduction_result22 = load float, ptr %40, align 4
  %49 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result22, i32 1, i32 31)
  store float %49, ptr %result_from_other_lane21, align 4
  call void @region_1_7__2(ptr %40, ptr %result_from_other_lane21, ptr %return_buffer23)
  %50 = load float, ptr %return_buffer23, align 4
  store float %50, ptr %40, align 4
  %51 = icmp ult i32 %thread_id.x, %tile_bound
  %52 = mul i32 %thread_id.y, 2
  %53 = icmp ult i32 %52, %tile_bound1
  %54 = and i1 %53, %51
  %55 = icmp eq i32 %lane_id, 0
  %56 = and i1 %54, %55
  br i1 %56, label %reduction_write_output-true, label %reduction_write_output-after

reduction_write_output-after:                     ; preds = %reduction_write_output-true, %y_in_tile.loop_exit
  %shmem_output_address24 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %11, i32 1, i32 %thread_id.x, i32 %thread_id.y
  %57 = addrspacecast ptr addrspace(3) %shmem_output_address24 to ptr
  %current_output25 = getelementptr inbounds float, ptr %partial_reduction_result, i32 1
  %58 = load float, ptr %current_output25, align 4
  store float %58, ptr %57, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr26 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache74, i32 0, i32 %11, i32 1, i32 %thread_id.y, i32 %thread_id.x
  %59 = addrspacecast ptr addrspace(3) %shmem_transposed_addr26 to ptr
  %partial_reduction_result28 = load float, ptr %59, align 4
  %60 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result28, i32 16, i32 31)
  store float %60, ptr %result_from_other_lane27, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane27, ptr %return_buffer29)
  %61 = load float, ptr %return_buffer29, align 4
  store float %61, ptr %59, align 4
  %partial_reduction_result31 = load float, ptr %59, align 4
  %62 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result31, i32 8, i32 31)
  store float %62, ptr %result_from_other_lane30, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane30, ptr %return_buffer32)
  %63 = load float, ptr %return_buffer32, align 4
  store float %63, ptr %59, align 4
  %partial_reduction_result34 = load float, ptr %59, align 4
  %64 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result34, i32 4, i32 31)
  store float %64, ptr %result_from_other_lane33, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane33, ptr %return_buffer35)
  %65 = load float, ptr %return_buffer35, align 4
  store float %65, ptr %59, align 4
  %partial_reduction_result37 = load float, ptr %59, align 4
  %66 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result37, i32 2, i32 31)
  store float %66, ptr %result_from_other_lane36, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane36, ptr %return_buffer38)
  %67 = load float, ptr %return_buffer38, align 4
  store float %67, ptr %59, align 4
  %partial_reduction_result40 = load float, ptr %59, align 4
  %68 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result40, i32 1, i32 31)
  store float %68, ptr %result_from_other_lane39, align 4
  call void @region_1_7__2(ptr %59, ptr %result_from_other_lane39, ptr %return_buffer41)
  %69 = load float, ptr %return_buffer41, align 4
  store float %69, ptr %59, align 4
  %70 = icmp ult i32 %thread_id.x, %tile_bound
  %71 = mul i32 %thread_id.y, 2
  %72 = icmp ult i32 %71, %tile_bound1
  %73 = and i1 %72, %70
  %74 = icmp eq i32 %lane_id, 0
  %75 = and i1 %73, %74
  br i1 %75, label %reduction_write_output-true42, label %reduction_write_output-after43

reduction_write_output-after43:                   ; preds = %reduction_write_output-true42, %reduction_write_output-after
  br label %reduce-group-0-after

early_return:                                     ; preds = %reduce-group-0-true
  ret void

x_in_tile-true:                                   ; preds = %tile_loop.loop_body
  %76 = mul i32 %thread_id.x, 2
  %77 = sub i32 %x_loc, %76
  %Arg_0.1 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %30, i32 %31
  %Arg_0.13 = load float, ptr %Arg_0.1, align 4, !invariant.load !197
  store float %Arg_0.13, ptr %reduction_input_address, align 4
  %78 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %77
  call void @region_1_7__2(ptr %78, ptr %reduction_input_address, ptr %return_buffer)
  %79 = load float, ptr %return_buffer, align 4
  store float %79, ptr %78, align 4
  br label %x_in_tile-after

x_in_tile-true5:                                  ; preds = %x_in_tile-after
  %80 = mul i32 %thread_id.x, 2
  %81 = sub i32 %x_loc4, %80
  %Arg_0.17 = getelementptr inbounds [64 x [512 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %Arg_0.18 = load float, ptr %Arg_0.17, align 4, !invariant.load !197
  store float %Arg_0.18, ptr %reduction_input_address, align 4
  %82 = getelementptr inbounds float, ptr %partial_reduction_result, i32 %81
  call void @region_1_7__2(ptr %82, ptr %reduction_input_address, ptr %return_buffer9)
  %83 = load float, ptr %return_buffer9, align 4
  store float %83, ptr %82, align 4
  br label %x_in_tile-after6

reduction_write_output-true:                      ; preds = %y_in_tile.loop_exit
  %84 = mul i32 %thread_id.y, 2
  %85 = add i32 %tile_origin.1, %thread_id.x
  %86 = add i32 %tile_origin.2, %84
  %87 = add i32 %86, 0
  %88 = mul i32 %tile_origin.0, 512
  %89 = add i32 %88, %87
  %90 = udiv i32 %89, 1
  %output_element_address = getelementptr inbounds [512 x float], ptr %arg6, i32 0, i32 %90
  %output = load float, ptr %40, align 4
  store float %output, ptr %output_element_address, align 4
  br label %reduction_write_output-after

reduction_write_output-true42:                    ; preds = %reduction_write_output-after
  %91 = mul i32 %thread_id.y, 2
  %92 = add i32 %tile_origin.1, %thread_id.x
  %93 = add i32 %tile_origin.2, %91
  %94 = add i32 %93, 1
  %95 = mul i32 %tile_origin.0, 512
  %96 = add i32 %95, %94
  %97 = udiv i32 %96, 1
  %output_element_address44 = getelementptr inbounds [512 x float], ptr %arg6, i32 0, i32 %97
  %output45 = load float, ptr %59, align 4
  store float %output45, ptr %output_element_address44, align 4
  br label %reduction_write_output-after43

reduce-group-1-true:                              ; preds = %reduce-group-0-after
  %Arg_1.248 = load float, ptr %arg1, align 4, !invariant.load !197
  %98 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  store float %Arg_1.248, ptr %98, align 4
  %99 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  store float %Arg_1.248, ptr %99, align 4
  %100 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %101 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %102 = urem i32 %100, 1024
  %103 = udiv i32 %100, 1024
  %104 = mul i32 %101, 1
  %105 = add i32 %104, %103
  %106 = icmp ult i32 %105, 8
  br i1 %106, label %107, label %early_return49

107:                                              ; preds = %reduce-group-1-true
  %thread_id.x50 = urem i32 %102, 32
  %thread_id.y51 = udiv i32 %102, 32
  %lane_id52 = urem i32 %102, 32
  %108 = udiv i32 %105, 1
  %109 = urem i32 %108, 8
  %110 = udiv i32 %105, 8
  %111 = urem i32 %110, 1
  %112 = udiv i32 %105, 8
  %113 = icmp eq i32 %111, 0
  %tile_bound53 = select i1 %113, i32 64, i32 4096
  %114 = icmp eq i32 %109, 7
  %tile_bound54 = select i1 %114, i32 64, i32 64
  %tile_origin.055 = mul i32 %112, 1
  %tile_origin.156 = mul i32 %111, 4096
  %tile_origin.257 = mul i32 %109, 64
  store i32 %thread_id.y51, ptr %y_in_tile.invar_address61, align 4
  br label %y_in_tile.loop_header59

y_in_tile.loop_header59:                          ; preds = %tile_loop.loop_exit64, %107
  %y_in_tile.indvar62 = load i32, ptr %y_in_tile.invar_address61, align 4
  %115 = icmp uge i32 %y_in_tile.indvar62, %tile_bound53
  br i1 %115, label %y_in_tile.loop_exit58, label %y_in_tile.loop_body60

y_in_tile.loop_body60:                            ; preds = %y_in_tile.loop_header59
  %invar.inc63 = add nuw nsw i32 %y_in_tile.indvar62, 32
  store i32 %invar.inc63, ptr %y_in_tile.invar_address61, align 4
  %116 = icmp eq i32 %y_in_tile.indvar62, %thread_id.y51
  %117 = mul i32 %thread_id.x50, 2
  store i32 0, ptr %tile_loop.invar_address67, align 4
  br label %tile_loop.loop_header65

tile_loop.loop_header65:                          ; preds = %x_in_tile-after77, %y_in_tile.loop_body60
  %tile_loop.indvar68 = load i32, ptr %tile_loop.invar_address67, align 4
  %118 = icmp uge i32 %tile_loop.indvar68, 1
  br i1 %118, label %tile_loop.loop_exit64, label %tile_loop.loop_body66

tile_loop.loop_body66:                            ; preds = %tile_loop.loop_header65
  %invar.inc69 = add nuw nsw i32 %tile_loop.indvar68, 1
  store i32 %invar.inc69, ptr %tile_loop.invar_address67, align 4
  %119 = icmp eq i32 %tile_loop.indvar68, 0
  %120 = mul i32 %tile_loop.indvar68, 2
  %121 = add i32 %120, 0
  %x_loc70 = add i32 %121, %117
  %122 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %123 = add i32 %tile_origin.257, %x_loc70
  %124 = icmp ult i32 %x_loc70, %tile_bound54
  br i1 %124, label %x_in_tile-true71, label %x_in_tile-after72

x_in_tile-after72:                                ; preds = %x_in_tile-true71, %tile_loop.loop_body66
  %125 = mul i32 %tile_loop.indvar68, 2
  %126 = add i32 %125, 1
  %x_loc75 = add i32 %126, %117
  %127 = add i32 %tile_origin.156, %y_in_tile.indvar62
  %128 = add i32 %tile_origin.257, %x_loc75
  %129 = icmp ult i32 %x_loc75, %tile_bound54
  br i1 %129, label %x_in_tile-true76, label %x_in_tile-after77

x_in_tile-after77:                                ; preds = %x_in_tile-true76, %x_in_tile-after72
  br label %tile_loop.loop_header65, !llvm.loop !368

tile_loop.loop_exit64:                            ; preds = %tile_loop.loop_header65
  br label %y_in_tile.loop_header59, !llvm.loop !369

y_in_tile.loop_exit58:                            ; preds = %y_in_tile.loop_header59
  %shmem_output_address81 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %103, i32 0, i32 %thread_id.x50, i32 %thread_id.y51
  %130 = addrspacecast ptr addrspace(3) %shmem_output_address81 to ptr
  %current_output82 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 0
  %131 = load float, ptr %current_output82, align 4
  store float %131, ptr %130, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr83 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %103, i32 0, i32 %thread_id.y51, i32 %thread_id.x50
  %132 = addrspacecast ptr addrspace(3) %shmem_transposed_addr83 to ptr
  %partial_reduction_result85 = load float, ptr %132, align 4
  %133 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result85, i32 16, i32 31)
  store float %133, ptr %result_from_other_lane84, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane84, ptr %return_buffer86)
  %134 = load float, ptr %return_buffer86, align 4
  store float %134, ptr %132, align 4
  %partial_reduction_result88 = load float, ptr %132, align 4
  %135 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result88, i32 8, i32 31)
  store float %135, ptr %result_from_other_lane87, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane87, ptr %return_buffer89)
  %136 = load float, ptr %return_buffer89, align 4
  store float %136, ptr %132, align 4
  %partial_reduction_result91 = load float, ptr %132, align 4
  %137 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result91, i32 4, i32 31)
  store float %137, ptr %result_from_other_lane90, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane90, ptr %return_buffer92)
  %138 = load float, ptr %return_buffer92, align 4
  store float %138, ptr %132, align 4
  %partial_reduction_result94 = load float, ptr %132, align 4
  %139 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result94, i32 2, i32 31)
  store float %139, ptr %result_from_other_lane93, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane93, ptr %return_buffer95)
  %140 = load float, ptr %return_buffer95, align 4
  store float %140, ptr %132, align 4
  %partial_reduction_result97 = load float, ptr %132, align 4
  %141 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result97, i32 1, i32 31)
  store float %141, ptr %result_from_other_lane96, align 4
  call void @region_2_12__2(ptr %132, ptr %result_from_other_lane96, ptr %return_buffer98)
  %142 = load float, ptr %return_buffer98, align 4
  store float %142, ptr %132, align 4
  %143 = icmp ult i32 %thread_id.x50, %tile_bound53
  %144 = mul i32 %thread_id.y51, 2
  %145 = icmp ult i32 %144, %tile_bound54
  %146 = and i1 %145, %143
  %147 = icmp eq i32 %lane_id52, 0
  %148 = and i1 %146, %147
  br i1 %148, label %reduction_write_output-true99, label %reduction_write_output-after100

reduction_write_output-after100:                  ; preds = %reduction_write_output-true99, %y_in_tile.loop_exit58
  %shmem_output_address103 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %103, i32 1, i32 %thread_id.x50, i32 %thread_id.y51
  %149 = addrspacecast ptr addrspace(3) %shmem_output_address103 to ptr
  %current_output104 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 1
  %150 = load float, ptr %current_output104, align 4
  store float %150, ptr %149, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr105 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache75, i32 0, i32 %103, i32 1, i32 %thread_id.y51, i32 %thread_id.x50
  %151 = addrspacecast ptr addrspace(3) %shmem_transposed_addr105 to ptr
  %partial_reduction_result107 = load float, ptr %151, align 4
  %152 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result107, i32 16, i32 31)
  store float %152, ptr %result_from_other_lane106, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane106, ptr %return_buffer108)
  %153 = load float, ptr %return_buffer108, align 4
  store float %153, ptr %151, align 4
  %partial_reduction_result110 = load float, ptr %151, align 4
  %154 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result110, i32 8, i32 31)
  store float %154, ptr %result_from_other_lane109, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane109, ptr %return_buffer111)
  %155 = load float, ptr %return_buffer111, align 4
  store float %155, ptr %151, align 4
  %partial_reduction_result113 = load float, ptr %151, align 4
  %156 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result113, i32 4, i32 31)
  store float %156, ptr %result_from_other_lane112, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane112, ptr %return_buffer114)
  %157 = load float, ptr %return_buffer114, align 4
  store float %157, ptr %151, align 4
  %partial_reduction_result116 = load float, ptr %151, align 4
  %158 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result116, i32 2, i32 31)
  store float %158, ptr %result_from_other_lane115, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane115, ptr %return_buffer117)
  %159 = load float, ptr %return_buffer117, align 4
  store float %159, ptr %151, align 4
  %partial_reduction_result119 = load float, ptr %151, align 4
  %160 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result119, i32 1, i32 31)
  store float %160, ptr %result_from_other_lane118, align 4
  call void @region_2_12__2(ptr %151, ptr %result_from_other_lane118, ptr %return_buffer120)
  %161 = load float, ptr %return_buffer120, align 4
  store float %161, ptr %151, align 4
  %162 = icmp ult i32 %thread_id.x50, %tile_bound53
  %163 = mul i32 %thread_id.y51, 2
  %164 = icmp ult i32 %163, %tile_bound54
  %165 = and i1 %164, %162
  %166 = icmp eq i32 %lane_id52, 0
  %167 = and i1 %165, %166
  br i1 %167, label %reduction_write_output-true121, label %reduction_write_output-after122

reduction_write_output-after122:                  ; preds = %reduction_write_output-true121, %reduction_write_output-after100
  br label %reduce-group-1-after

early_return49:                                   ; preds = %reduce-group-1-true
  ret void

x_in_tile-true71:                                 ; preds = %tile_loop.loop_body66
  %168 = mul i32 %thread_id.x50, 2
  %169 = sub i32 %x_loc70, %168
  %Arg_2.3 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %122, i32 %123
  %Arg_2.373 = load float, ptr %Arg_2.3, align 4, !invariant.load !197
  store float %Arg_2.373, ptr %reduction_input_address46, align 4
  %170 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %169
  call void @region_2_12__2(ptr %170, ptr %reduction_input_address46, ptr %return_buffer74)
  %171 = load float, ptr %return_buffer74, align 4
  store float %171, ptr %170, align 4
  br label %x_in_tile-after72

x_in_tile-true76:                                 ; preds = %x_in_tile-after72
  %172 = mul i32 %thread_id.x50, 2
  %173 = sub i32 %x_loc75, %172
  %Arg_2.378 = getelementptr inbounds [64 x [512 x float]], ptr %arg2, i32 0, i32 %127, i32 %128
  %Arg_2.379 = load float, ptr %Arg_2.378, align 4, !invariant.load !197
  store float %Arg_2.379, ptr %reduction_input_address46, align 4
  %174 = getelementptr inbounds float, ptr %partial_reduction_result47, i32 %173
  call void @region_2_12__2(ptr %174, ptr %reduction_input_address46, ptr %return_buffer80)
  %175 = load float, ptr %return_buffer80, align 4
  store float %175, ptr %174, align 4
  br label %x_in_tile-after77

reduction_write_output-true99:                    ; preds = %y_in_tile.loop_exit58
  %176 = mul i32 %thread_id.y51, 2
  %177 = add i32 %tile_origin.156, %thread_id.x50
  %178 = add i32 %tile_origin.257, %176
  %179 = add i32 %178, 0
  %180 = mul i32 %tile_origin.055, 512
  %181 = add i32 %180, %179
  %182 = udiv i32 %181, 1
  %output_element_address101 = getelementptr inbounds [512 x float], ptr %arg7, i32 0, i32 %182
  %output102 = load float, ptr %132, align 4
  store float %output102, ptr %output_element_address101, align 4
  br label %reduction_write_output-after100

reduction_write_output-true121:                   ; preds = %reduction_write_output-after100
  %183 = mul i32 %thread_id.y51, 2
  %184 = add i32 %tile_origin.156, %thread_id.x50
  %185 = add i32 %tile_origin.257, %183
  %186 = add i32 %185, 1
  %187 = mul i32 %tile_origin.055, 512
  %188 = add i32 %187, %186
  %189 = udiv i32 %188, 1
  %output_element_address123 = getelementptr inbounds [512 x float], ptr %arg7, i32 0, i32 %189
  %output124 = load float, ptr %151, align 4
  store float %output124, ptr %output_element_address123, align 4
  br label %reduction_write_output-after122

reduce-group-2-true:                              ; preds = %reduce-group-1-after
  %Arg_1.2127 = load float, ptr %arg1, align 4, !invariant.load !197
  %190 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  store float %Arg_1.2127, ptr %190, align 4
  %191 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  store float %Arg_1.2127, ptr %191, align 4
  %192 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %193 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %194 = urem i32 %192, 1024
  %195 = udiv i32 %192, 1024
  %196 = mul i32 %193, 1
  %197 = add i32 %196, %195
  %198 = icmp ult i32 %197, 8
  br i1 %198, label %199, label %early_return128

199:                                              ; preds = %reduce-group-2-true
  %thread_id.x129 = urem i32 %194, 32
  %thread_id.y130 = udiv i32 %194, 32
  %lane_id131 = urem i32 %194, 32
  %200 = udiv i32 %197, 1
  %201 = urem i32 %200, 8
  %202 = udiv i32 %197, 8
  %203 = urem i32 %202, 1
  %204 = udiv i32 %197, 8
  %205 = icmp eq i32 %203, 0
  %tile_bound132 = select i1 %205, i32 64, i32 4096
  %206 = icmp eq i32 %201, 7
  %tile_bound133 = select i1 %206, i32 64, i32 64
  %tile_origin.0134 = mul i32 %204, 1
  %tile_origin.1135 = mul i32 %203, 4096
  %tile_origin.2136 = mul i32 %201, 64
  store i32 %thread_id.y130, ptr %y_in_tile.invar_address140, align 4
  br label %y_in_tile.loop_header138

y_in_tile.loop_header138:                         ; preds = %tile_loop.loop_exit143, %199
  %y_in_tile.indvar141 = load i32, ptr %y_in_tile.invar_address140, align 4
  %207 = icmp uge i32 %y_in_tile.indvar141, %tile_bound132
  br i1 %207, label %y_in_tile.loop_exit137, label %y_in_tile.loop_body139

y_in_tile.loop_body139:                           ; preds = %y_in_tile.loop_header138
  %invar.inc142 = add nuw nsw i32 %y_in_tile.indvar141, 32
  store i32 %invar.inc142, ptr %y_in_tile.invar_address140, align 4
  %208 = icmp eq i32 %y_in_tile.indvar141, %thread_id.y130
  %209 = mul i32 %thread_id.x129, 2
  store i32 0, ptr %tile_loop.invar_address146, align 4
  br label %tile_loop.loop_header144

tile_loop.loop_header144:                         ; preds = %x_in_tile-after156, %y_in_tile.loop_body139
  %tile_loop.indvar147 = load i32, ptr %tile_loop.invar_address146, align 4
  %210 = icmp uge i32 %tile_loop.indvar147, 1
  br i1 %210, label %tile_loop.loop_exit143, label %tile_loop.loop_body145

tile_loop.loop_body145:                           ; preds = %tile_loop.loop_header144
  %invar.inc148 = add nuw nsw i32 %tile_loop.indvar147, 1
  store i32 %invar.inc148, ptr %tile_loop.invar_address146, align 4
  %211 = icmp eq i32 %tile_loop.indvar147, 0
  %212 = mul i32 %tile_loop.indvar147, 2
  %213 = add i32 %212, 0
  %x_loc149 = add i32 %213, %209
  %214 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %215 = add i32 %tile_origin.2136, %x_loc149
  %216 = icmp ult i32 %x_loc149, %tile_bound133
  br i1 %216, label %x_in_tile-true150, label %x_in_tile-after151

x_in_tile-after151:                               ; preds = %x_in_tile-true150, %tile_loop.loop_body145
  %217 = mul i32 %tile_loop.indvar147, 2
  %218 = add i32 %217, 1
  %x_loc154 = add i32 %218, %209
  %219 = add i32 %tile_origin.1135, %y_in_tile.indvar141
  %220 = add i32 %tile_origin.2136, %x_loc154
  %221 = icmp ult i32 %x_loc154, %tile_bound133
  br i1 %221, label %x_in_tile-true155, label %x_in_tile-after156

x_in_tile-after156:                               ; preds = %x_in_tile-true155, %x_in_tile-after151
  br label %tile_loop.loop_header144, !llvm.loop !370

tile_loop.loop_exit143:                           ; preds = %tile_loop.loop_header144
  br label %y_in_tile.loop_header138, !llvm.loop !371

y_in_tile.loop_exit137:                           ; preds = %y_in_tile.loop_header138
  %shmem_output_address160 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %195, i32 0, i32 %thread_id.x129, i32 %thread_id.y130
  %222 = addrspacecast ptr addrspace(3) %shmem_output_address160 to ptr
  %current_output161 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 0
  %223 = load float, ptr %current_output161, align 4
  store float %223, ptr %222, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr162 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %195, i32 0, i32 %thread_id.y130, i32 %thread_id.x129
  %224 = addrspacecast ptr addrspace(3) %shmem_transposed_addr162 to ptr
  %partial_reduction_result164 = load float, ptr %224, align 4
  %225 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result164, i32 16, i32 31)
  store float %225, ptr %result_from_other_lane163, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane163, ptr %return_buffer165)
  %226 = load float, ptr %return_buffer165, align 4
  store float %226, ptr %224, align 4
  %partial_reduction_result167 = load float, ptr %224, align 4
  %227 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result167, i32 8, i32 31)
  store float %227, ptr %result_from_other_lane166, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane166, ptr %return_buffer168)
  %228 = load float, ptr %return_buffer168, align 4
  store float %228, ptr %224, align 4
  %partial_reduction_result170 = load float, ptr %224, align 4
  %229 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result170, i32 4, i32 31)
  store float %229, ptr %result_from_other_lane169, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane169, ptr %return_buffer171)
  %230 = load float, ptr %return_buffer171, align 4
  store float %230, ptr %224, align 4
  %partial_reduction_result173 = load float, ptr %224, align 4
  %231 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result173, i32 2, i32 31)
  store float %231, ptr %result_from_other_lane172, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane172, ptr %return_buffer174)
  %232 = load float, ptr %return_buffer174, align 4
  store float %232, ptr %224, align 4
  %partial_reduction_result176 = load float, ptr %224, align 4
  %233 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result176, i32 1, i32 31)
  store float %233, ptr %result_from_other_lane175, align 4
  call void @region_3_17__2(ptr %224, ptr %result_from_other_lane175, ptr %return_buffer177)
  %234 = load float, ptr %return_buffer177, align 4
  store float %234, ptr %224, align 4
  %235 = icmp ult i32 %thread_id.x129, %tile_bound132
  %236 = mul i32 %thread_id.y130, 2
  %237 = icmp ult i32 %236, %tile_bound133
  %238 = and i1 %237, %235
  %239 = icmp eq i32 %lane_id131, 0
  %240 = and i1 %238, %239
  br i1 %240, label %reduction_write_output-true178, label %reduction_write_output-after179

reduction_write_output-after179:                  ; preds = %reduction_write_output-true178, %y_in_tile.loop_exit137
  %shmem_output_address182 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %195, i32 1, i32 %thread_id.x129, i32 %thread_id.y130
  %241 = addrspacecast ptr addrspace(3) %shmem_output_address182 to ptr
  %current_output183 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 1
  %242 = load float, ptr %current_output183, align 4
  store float %242, ptr %241, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr184 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache76, i32 0, i32 %195, i32 1, i32 %thread_id.y130, i32 %thread_id.x129
  %243 = addrspacecast ptr addrspace(3) %shmem_transposed_addr184 to ptr
  %partial_reduction_result186 = load float, ptr %243, align 4
  %244 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result186, i32 16, i32 31)
  store float %244, ptr %result_from_other_lane185, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane185, ptr %return_buffer187)
  %245 = load float, ptr %return_buffer187, align 4
  store float %245, ptr %243, align 4
  %partial_reduction_result189 = load float, ptr %243, align 4
  %246 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result189, i32 8, i32 31)
  store float %246, ptr %result_from_other_lane188, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane188, ptr %return_buffer190)
  %247 = load float, ptr %return_buffer190, align 4
  store float %247, ptr %243, align 4
  %partial_reduction_result192 = load float, ptr %243, align 4
  %248 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result192, i32 4, i32 31)
  store float %248, ptr %result_from_other_lane191, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane191, ptr %return_buffer193)
  %249 = load float, ptr %return_buffer193, align 4
  store float %249, ptr %243, align 4
  %partial_reduction_result195 = load float, ptr %243, align 4
  %250 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result195, i32 2, i32 31)
  store float %250, ptr %result_from_other_lane194, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane194, ptr %return_buffer196)
  %251 = load float, ptr %return_buffer196, align 4
  store float %251, ptr %243, align 4
  %partial_reduction_result198 = load float, ptr %243, align 4
  %252 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result198, i32 1, i32 31)
  store float %252, ptr %result_from_other_lane197, align 4
  call void @region_3_17__2(ptr %243, ptr %result_from_other_lane197, ptr %return_buffer199)
  %253 = load float, ptr %return_buffer199, align 4
  store float %253, ptr %243, align 4
  %254 = icmp ult i32 %thread_id.x129, %tile_bound132
  %255 = mul i32 %thread_id.y130, 2
  %256 = icmp ult i32 %255, %tile_bound133
  %257 = and i1 %256, %254
  %258 = icmp eq i32 %lane_id131, 0
  %259 = and i1 %257, %258
  br i1 %259, label %reduction_write_output-true200, label %reduction_write_output-after201

reduction_write_output-after201:                  ; preds = %reduction_write_output-true200, %reduction_write_output-after179
  br label %reduce-group-2-after

early_return128:                                  ; preds = %reduce-group-2-true
  ret void

x_in_tile-true150:                                ; preds = %tile_loop.loop_body145
  %260 = mul i32 %thread_id.x129, 2
  %261 = sub i32 %x_loc149, %260
  %Arg_3.4 = getelementptr inbounds [64 x [512 x float]], ptr %arg3, i32 0, i32 %214, i32 %215
  %Arg_3.4152 = load float, ptr %Arg_3.4, align 4, !invariant.load !197
  store float %Arg_3.4152, ptr %reduction_input_address125, align 4
  %262 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %261
  call void @region_3_17__2(ptr %262, ptr %reduction_input_address125, ptr %return_buffer153)
  %263 = load float, ptr %return_buffer153, align 4
  store float %263, ptr %262, align 4
  br label %x_in_tile-after151

x_in_tile-true155:                                ; preds = %x_in_tile-after151
  %264 = mul i32 %thread_id.x129, 2
  %265 = sub i32 %x_loc154, %264
  %Arg_3.4157 = getelementptr inbounds [64 x [512 x float]], ptr %arg3, i32 0, i32 %219, i32 %220
  %Arg_3.4158 = load float, ptr %Arg_3.4157, align 4, !invariant.load !197
  store float %Arg_3.4158, ptr %reduction_input_address125, align 4
  %266 = getelementptr inbounds float, ptr %partial_reduction_result126, i32 %265
  call void @region_3_17__2(ptr %266, ptr %reduction_input_address125, ptr %return_buffer159)
  %267 = load float, ptr %return_buffer159, align 4
  store float %267, ptr %266, align 4
  br label %x_in_tile-after156

reduction_write_output-true178:                   ; preds = %y_in_tile.loop_exit137
  %268 = mul i32 %thread_id.y130, 2
  %269 = add i32 %tile_origin.1135, %thread_id.x129
  %270 = add i32 %tile_origin.2136, %268
  %271 = add i32 %270, 0
  %272 = mul i32 %tile_origin.0134, 512
  %273 = add i32 %272, %271
  %274 = udiv i32 %273, 1
  %output_element_address180 = getelementptr inbounds [512 x float], ptr %arg8, i32 0, i32 %274
  %output181 = load float, ptr %224, align 4
  store float %output181, ptr %output_element_address180, align 4
  br label %reduction_write_output-after179

reduction_write_output-true200:                   ; preds = %reduction_write_output-after179
  %275 = mul i32 %thread_id.y130, 2
  %276 = add i32 %tile_origin.1135, %thread_id.x129
  %277 = add i32 %tile_origin.2136, %275
  %278 = add i32 %277, 1
  %279 = mul i32 %tile_origin.0134, 512
  %280 = add i32 %279, %278
  %281 = udiv i32 %280, 1
  %output_element_address202 = getelementptr inbounds [512 x float], ptr %arg8, i32 0, i32 %281
  %output203 = load float, ptr %243, align 4
  store float %output203, ptr %output_element_address202, align 4
  br label %reduction_write_output-after201

reduce-group-3-true:                              ; preds = %reduce-group-2-after
  %Arg_1.2206 = load float, ptr %arg1, align 4, !invariant.load !197
  %282 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  store float %Arg_1.2206, ptr %282, align 4
  %283 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  store float %Arg_1.2206, ptr %283, align 4
  %284 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %285 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %286 = urem i32 %284, 1024
  %287 = udiv i32 %284, 1024
  %288 = mul i32 %285, 1
  %289 = add i32 %288, %287
  %290 = icmp ult i32 %289, 8
  br i1 %290, label %291, label %early_return207

291:                                              ; preds = %reduce-group-3-true
  %thread_id.x208 = urem i32 %286, 32
  %thread_id.y209 = udiv i32 %286, 32
  %lane_id210 = urem i32 %286, 32
  %292 = udiv i32 %289, 1
  %293 = urem i32 %292, 8
  %294 = udiv i32 %289, 8
  %295 = urem i32 %294, 1
  %296 = udiv i32 %289, 8
  %297 = icmp eq i32 %295, 0
  %tile_bound211 = select i1 %297, i32 64, i32 4096
  %298 = icmp eq i32 %293, 7
  %tile_bound212 = select i1 %298, i32 64, i32 64
  %tile_origin.0213 = mul i32 %296, 1
  %tile_origin.1214 = mul i32 %295, 4096
  %tile_origin.2215 = mul i32 %293, 64
  store i32 %thread_id.y209, ptr %y_in_tile.invar_address219, align 4
  br label %y_in_tile.loop_header217

y_in_tile.loop_header217:                         ; preds = %tile_loop.loop_exit222, %291
  %y_in_tile.indvar220 = load i32, ptr %y_in_tile.invar_address219, align 4
  %299 = icmp uge i32 %y_in_tile.indvar220, %tile_bound211
  br i1 %299, label %y_in_tile.loop_exit216, label %y_in_tile.loop_body218

y_in_tile.loop_body218:                           ; preds = %y_in_tile.loop_header217
  %invar.inc221 = add nuw nsw i32 %y_in_tile.indvar220, 32
  store i32 %invar.inc221, ptr %y_in_tile.invar_address219, align 4
  %300 = icmp eq i32 %y_in_tile.indvar220, %thread_id.y209
  %301 = mul i32 %thread_id.x208, 2
  store i32 0, ptr %tile_loop.invar_address225, align 4
  br label %tile_loop.loop_header223

tile_loop.loop_header223:                         ; preds = %x_in_tile-after235, %y_in_tile.loop_body218
  %tile_loop.indvar226 = load i32, ptr %tile_loop.invar_address225, align 4
  %302 = icmp uge i32 %tile_loop.indvar226, 1
  br i1 %302, label %tile_loop.loop_exit222, label %tile_loop.loop_body224

tile_loop.loop_body224:                           ; preds = %tile_loop.loop_header223
  %invar.inc227 = add nuw nsw i32 %tile_loop.indvar226, 1
  store i32 %invar.inc227, ptr %tile_loop.invar_address225, align 4
  %303 = icmp eq i32 %tile_loop.indvar226, 0
  %304 = mul i32 %tile_loop.indvar226, 2
  %305 = add i32 %304, 0
  %x_loc228 = add i32 %305, %301
  %306 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %307 = add i32 %tile_origin.2215, %x_loc228
  %308 = icmp ult i32 %x_loc228, %tile_bound212
  br i1 %308, label %x_in_tile-true229, label %x_in_tile-after230

x_in_tile-after230:                               ; preds = %x_in_tile-true229, %tile_loop.loop_body224
  %309 = mul i32 %tile_loop.indvar226, 2
  %310 = add i32 %309, 1
  %x_loc233 = add i32 %310, %301
  %311 = add i32 %tile_origin.1214, %y_in_tile.indvar220
  %312 = add i32 %tile_origin.2215, %x_loc233
  %313 = icmp ult i32 %x_loc233, %tile_bound212
  br i1 %313, label %x_in_tile-true234, label %x_in_tile-after235

x_in_tile-after235:                               ; preds = %x_in_tile-true234, %x_in_tile-after230
  br label %tile_loop.loop_header223, !llvm.loop !372

tile_loop.loop_exit222:                           ; preds = %tile_loop.loop_header223
  br label %y_in_tile.loop_header217, !llvm.loop !373

y_in_tile.loop_exit216:                           ; preds = %y_in_tile.loop_header217
  %shmem_output_address239 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %287, i32 0, i32 %thread_id.x208, i32 %thread_id.y209
  %314 = addrspacecast ptr addrspace(3) %shmem_output_address239 to ptr
  %current_output240 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 0
  %315 = load float, ptr %current_output240, align 4
  store float %315, ptr %314, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr241 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %287, i32 0, i32 %thread_id.y209, i32 %thread_id.x208
  %316 = addrspacecast ptr addrspace(3) %shmem_transposed_addr241 to ptr
  %partial_reduction_result243 = load float, ptr %316, align 4
  %317 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result243, i32 16, i32 31)
  store float %317, ptr %result_from_other_lane242, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane242, ptr %return_buffer244)
  %318 = load float, ptr %return_buffer244, align 4
  store float %318, ptr %316, align 4
  %partial_reduction_result246 = load float, ptr %316, align 4
  %319 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result246, i32 8, i32 31)
  store float %319, ptr %result_from_other_lane245, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane245, ptr %return_buffer247)
  %320 = load float, ptr %return_buffer247, align 4
  store float %320, ptr %316, align 4
  %partial_reduction_result249 = load float, ptr %316, align 4
  %321 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result249, i32 4, i32 31)
  store float %321, ptr %result_from_other_lane248, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane248, ptr %return_buffer250)
  %322 = load float, ptr %return_buffer250, align 4
  store float %322, ptr %316, align 4
  %partial_reduction_result252 = load float, ptr %316, align 4
  %323 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result252, i32 2, i32 31)
  store float %323, ptr %result_from_other_lane251, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane251, ptr %return_buffer253)
  %324 = load float, ptr %return_buffer253, align 4
  store float %324, ptr %316, align 4
  %partial_reduction_result255 = load float, ptr %316, align 4
  %325 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result255, i32 1, i32 31)
  store float %325, ptr %result_from_other_lane254, align 4
  call void @region_4_22__2(ptr %316, ptr %result_from_other_lane254, ptr %return_buffer256)
  %326 = load float, ptr %return_buffer256, align 4
  store float %326, ptr %316, align 4
  %327 = icmp ult i32 %thread_id.x208, %tile_bound211
  %328 = mul i32 %thread_id.y209, 2
  %329 = icmp ult i32 %328, %tile_bound212
  %330 = and i1 %329, %327
  %331 = icmp eq i32 %lane_id210, 0
  %332 = and i1 %330, %331
  br i1 %332, label %reduction_write_output-true257, label %reduction_write_output-after258

reduction_write_output-after258:                  ; preds = %reduction_write_output-true257, %y_in_tile.loop_exit216
  %shmem_output_address261 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %287, i32 1, i32 %thread_id.x208, i32 %thread_id.y209
  %333 = addrspacecast ptr addrspace(3) %shmem_output_address261 to ptr
  %current_output262 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 1
  %334 = load float, ptr %current_output262, align 4
  store float %334, ptr %333, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr263 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache77, i32 0, i32 %287, i32 1, i32 %thread_id.y209, i32 %thread_id.x208
  %335 = addrspacecast ptr addrspace(3) %shmem_transposed_addr263 to ptr
  %partial_reduction_result265 = load float, ptr %335, align 4
  %336 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result265, i32 16, i32 31)
  store float %336, ptr %result_from_other_lane264, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane264, ptr %return_buffer266)
  %337 = load float, ptr %return_buffer266, align 4
  store float %337, ptr %335, align 4
  %partial_reduction_result268 = load float, ptr %335, align 4
  %338 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result268, i32 8, i32 31)
  store float %338, ptr %result_from_other_lane267, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane267, ptr %return_buffer269)
  %339 = load float, ptr %return_buffer269, align 4
  store float %339, ptr %335, align 4
  %partial_reduction_result271 = load float, ptr %335, align 4
  %340 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result271, i32 4, i32 31)
  store float %340, ptr %result_from_other_lane270, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane270, ptr %return_buffer272)
  %341 = load float, ptr %return_buffer272, align 4
  store float %341, ptr %335, align 4
  %partial_reduction_result274 = load float, ptr %335, align 4
  %342 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result274, i32 2, i32 31)
  store float %342, ptr %result_from_other_lane273, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane273, ptr %return_buffer275)
  %343 = load float, ptr %return_buffer275, align 4
  store float %343, ptr %335, align 4
  %partial_reduction_result277 = load float, ptr %335, align 4
  %344 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result277, i32 1, i32 31)
  store float %344, ptr %result_from_other_lane276, align 4
  call void @region_4_22__2(ptr %335, ptr %result_from_other_lane276, ptr %return_buffer278)
  %345 = load float, ptr %return_buffer278, align 4
  store float %345, ptr %335, align 4
  %346 = icmp ult i32 %thread_id.x208, %tile_bound211
  %347 = mul i32 %thread_id.y209, 2
  %348 = icmp ult i32 %347, %tile_bound212
  %349 = and i1 %348, %346
  %350 = icmp eq i32 %lane_id210, 0
  %351 = and i1 %349, %350
  br i1 %351, label %reduction_write_output-true279, label %reduction_write_output-after280

reduction_write_output-after280:                  ; preds = %reduction_write_output-true279, %reduction_write_output-after258
  br label %reduce-group-3-after

early_return207:                                  ; preds = %reduce-group-3-true
  ret void

x_in_tile-true229:                                ; preds = %tile_loop.loop_body224
  %352 = mul i32 %thread_id.x208, 2
  %353 = sub i32 %x_loc228, %352
  %Arg_4.5 = getelementptr inbounds [64 x [512 x float]], ptr %arg4, i32 0, i32 %306, i32 %307
  %Arg_4.5231 = load float, ptr %Arg_4.5, align 4, !invariant.load !197
  store float %Arg_4.5231, ptr %reduction_input_address204, align 4
  %354 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %353
  call void @region_4_22__2(ptr %354, ptr %reduction_input_address204, ptr %return_buffer232)
  %355 = load float, ptr %return_buffer232, align 4
  store float %355, ptr %354, align 4
  br label %x_in_tile-after230

x_in_tile-true234:                                ; preds = %x_in_tile-after230
  %356 = mul i32 %thread_id.x208, 2
  %357 = sub i32 %x_loc233, %356
  %Arg_4.5236 = getelementptr inbounds [64 x [512 x float]], ptr %arg4, i32 0, i32 %311, i32 %312
  %Arg_4.5237 = load float, ptr %Arg_4.5236, align 4, !invariant.load !197
  store float %Arg_4.5237, ptr %reduction_input_address204, align 4
  %358 = getelementptr inbounds float, ptr %partial_reduction_result205, i32 %357
  call void @region_4_22__2(ptr %358, ptr %reduction_input_address204, ptr %return_buffer238)
  %359 = load float, ptr %return_buffer238, align 4
  store float %359, ptr %358, align 4
  br label %x_in_tile-after235

reduction_write_output-true257:                   ; preds = %y_in_tile.loop_exit216
  %360 = mul i32 %thread_id.y209, 2
  %361 = add i32 %tile_origin.1214, %thread_id.x208
  %362 = add i32 %tile_origin.2215, %360
  %363 = add i32 %362, 0
  %364 = mul i32 %tile_origin.0213, 512
  %365 = add i32 %364, %363
  %366 = udiv i32 %365, 1
  %output_element_address259 = getelementptr inbounds [512 x float], ptr %arg9, i32 0, i32 %366
  %output260 = load float, ptr %316, align 4
  store float %output260, ptr %output_element_address259, align 4
  br label %reduction_write_output-after258

reduction_write_output-true279:                   ; preds = %reduction_write_output-after258
  %367 = mul i32 %thread_id.y209, 2
  %368 = add i32 %tile_origin.1214, %thread_id.x208
  %369 = add i32 %tile_origin.2215, %367
  %370 = add i32 %369, 1
  %371 = mul i32 %tile_origin.0213, 512
  %372 = add i32 %371, %370
  %373 = udiv i32 %372, 1
  %output_element_address281 = getelementptr inbounds [512 x float], ptr %arg9, i32 0, i32 %373
  %output282 = load float, ptr %335, align 4
  store float %output282, ptr %output_element_address281, align 4
  br label %reduction_write_output-after280

reduce-group-4-true:                              ; preds = %reduce-group-3-after
  %Arg_1.2285 = load float, ptr %arg1, align 4, !invariant.load !197
  %374 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  store float %Arg_1.2285, ptr %374, align 4
  %375 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  store float %Arg_1.2285, ptr %375, align 4
  %376 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %377 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %378 = urem i32 %376, 1024
  %379 = udiv i32 %376, 1024
  %380 = mul i32 %377, 1
  %381 = add i32 %380, %379
  %382 = icmp ult i32 %381, 8
  br i1 %382, label %383, label %early_return286

383:                                              ; preds = %reduce-group-4-true
  %thread_id.x287 = urem i32 %378, 32
  %thread_id.y288 = udiv i32 %378, 32
  %lane_id289 = urem i32 %378, 32
  %384 = udiv i32 %381, 1
  %385 = urem i32 %384, 8
  %386 = udiv i32 %381, 8
  %387 = urem i32 %386, 1
  %388 = udiv i32 %381, 8
  %389 = icmp eq i32 %387, 0
  %tile_bound290 = select i1 %389, i32 64, i32 4096
  %390 = icmp eq i32 %385, 7
  %tile_bound291 = select i1 %390, i32 64, i32 64
  %tile_origin.0292 = mul i32 %388, 1
  %tile_origin.1293 = mul i32 %387, 4096
  %tile_origin.2294 = mul i32 %385, 64
  store i32 %thread_id.y288, ptr %y_in_tile.invar_address298, align 4
  br label %y_in_tile.loop_header296

y_in_tile.loop_header296:                         ; preds = %tile_loop.loop_exit301, %383
  %y_in_tile.indvar299 = load i32, ptr %y_in_tile.invar_address298, align 4
  %391 = icmp uge i32 %y_in_tile.indvar299, %tile_bound290
  br i1 %391, label %y_in_tile.loop_exit295, label %y_in_tile.loop_body297

y_in_tile.loop_body297:                           ; preds = %y_in_tile.loop_header296
  %invar.inc300 = add nuw nsw i32 %y_in_tile.indvar299, 32
  store i32 %invar.inc300, ptr %y_in_tile.invar_address298, align 4
  %392 = icmp eq i32 %y_in_tile.indvar299, %thread_id.y288
  %393 = mul i32 %thread_id.x287, 2
  store i32 0, ptr %tile_loop.invar_address304, align 4
  br label %tile_loop.loop_header302

tile_loop.loop_header302:                         ; preds = %x_in_tile-after314, %y_in_tile.loop_body297
  %tile_loop.indvar305 = load i32, ptr %tile_loop.invar_address304, align 4
  %394 = icmp uge i32 %tile_loop.indvar305, 1
  br i1 %394, label %tile_loop.loop_exit301, label %tile_loop.loop_body303

tile_loop.loop_body303:                           ; preds = %tile_loop.loop_header302
  %invar.inc306 = add nuw nsw i32 %tile_loop.indvar305, 1
  store i32 %invar.inc306, ptr %tile_loop.invar_address304, align 4
  %395 = icmp eq i32 %tile_loop.indvar305, 0
  %396 = mul i32 %tile_loop.indvar305, 2
  %397 = add i32 %396, 0
  %x_loc307 = add i32 %397, %393
  %398 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %399 = add i32 %tile_origin.2294, %x_loc307
  %400 = icmp ult i32 %x_loc307, %tile_bound291
  br i1 %400, label %x_in_tile-true308, label %x_in_tile-after309

x_in_tile-after309:                               ; preds = %x_in_tile-true308, %tile_loop.loop_body303
  %401 = mul i32 %tile_loop.indvar305, 2
  %402 = add i32 %401, 1
  %x_loc312 = add i32 %402, %393
  %403 = add i32 %tile_origin.1293, %y_in_tile.indvar299
  %404 = add i32 %tile_origin.2294, %x_loc312
  %405 = icmp ult i32 %x_loc312, %tile_bound291
  br i1 %405, label %x_in_tile-true313, label %x_in_tile-after314

x_in_tile-after314:                               ; preds = %x_in_tile-true313, %x_in_tile-after309
  br label %tile_loop.loop_header302, !llvm.loop !374

tile_loop.loop_exit301:                           ; preds = %tile_loop.loop_header302
  br label %y_in_tile.loop_header296, !llvm.loop !375

y_in_tile.loop_exit295:                           ; preds = %y_in_tile.loop_header296
  %shmem_output_address318 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %379, i32 0, i32 %thread_id.x287, i32 %thread_id.y288
  %406 = addrspacecast ptr addrspace(3) %shmem_output_address318 to ptr
  %current_output319 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 0
  %407 = load float, ptr %current_output319, align 4
  store float %407, ptr %406, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr320 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %379, i32 0, i32 %thread_id.y288, i32 %thread_id.x287
  %408 = addrspacecast ptr addrspace(3) %shmem_transposed_addr320 to ptr
  %partial_reduction_result322 = load float, ptr %408, align 4
  %409 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result322, i32 16, i32 31)
  store float %409, ptr %result_from_other_lane321, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane321, ptr %return_buffer323)
  %410 = load float, ptr %return_buffer323, align 4
  store float %410, ptr %408, align 4
  %partial_reduction_result325 = load float, ptr %408, align 4
  %411 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result325, i32 8, i32 31)
  store float %411, ptr %result_from_other_lane324, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane324, ptr %return_buffer326)
  %412 = load float, ptr %return_buffer326, align 4
  store float %412, ptr %408, align 4
  %partial_reduction_result328 = load float, ptr %408, align 4
  %413 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result328, i32 4, i32 31)
  store float %413, ptr %result_from_other_lane327, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane327, ptr %return_buffer329)
  %414 = load float, ptr %return_buffer329, align 4
  store float %414, ptr %408, align 4
  %partial_reduction_result331 = load float, ptr %408, align 4
  %415 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result331, i32 2, i32 31)
  store float %415, ptr %result_from_other_lane330, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane330, ptr %return_buffer332)
  %416 = load float, ptr %return_buffer332, align 4
  store float %416, ptr %408, align 4
  %partial_reduction_result334 = load float, ptr %408, align 4
  %417 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result334, i32 1, i32 31)
  store float %417, ptr %result_from_other_lane333, align 4
  call void @region_5_27__2(ptr %408, ptr %result_from_other_lane333, ptr %return_buffer335)
  %418 = load float, ptr %return_buffer335, align 4
  store float %418, ptr %408, align 4
  %419 = icmp ult i32 %thread_id.x287, %tile_bound290
  %420 = mul i32 %thread_id.y288, 2
  %421 = icmp ult i32 %420, %tile_bound291
  %422 = and i1 %421, %419
  %423 = icmp eq i32 %lane_id289, 0
  %424 = and i1 %422, %423
  br i1 %424, label %reduction_write_output-true336, label %reduction_write_output-after337

reduction_write_output-after337:                  ; preds = %reduction_write_output-true336, %y_in_tile.loop_exit295
  %shmem_output_address340 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %379, i32 1, i32 %thread_id.x287, i32 %thread_id.y288
  %425 = addrspacecast ptr addrspace(3) %shmem_output_address340 to ptr
  %current_output341 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 1
  %426 = load float, ptr %current_output341, align 4
  store float %426, ptr %425, align 4
  call void @llvm.nvvm.barrier0()
  %shmem_transposed_addr342 = getelementptr inbounds [1 x [2 x [32 x [33 x float]]]], ptr addrspace(3) @shared_cache78, i32 0, i32 %379, i32 1, i32 %thread_id.y288, i32 %thread_id.x287
  %427 = addrspacecast ptr addrspace(3) %shmem_transposed_addr342 to ptr
  %partial_reduction_result344 = load float, ptr %427, align 4
  %428 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result344, i32 16, i32 31)
  store float %428, ptr %result_from_other_lane343, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane343, ptr %return_buffer345)
  %429 = load float, ptr %return_buffer345, align 4
  store float %429, ptr %427, align 4
  %partial_reduction_result347 = load float, ptr %427, align 4
  %430 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result347, i32 8, i32 31)
  store float %430, ptr %result_from_other_lane346, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane346, ptr %return_buffer348)
  %431 = load float, ptr %return_buffer348, align 4
  store float %431, ptr %427, align 4
  %partial_reduction_result350 = load float, ptr %427, align 4
  %432 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result350, i32 4, i32 31)
  store float %432, ptr %result_from_other_lane349, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane349, ptr %return_buffer351)
  %433 = load float, ptr %return_buffer351, align 4
  store float %433, ptr %427, align 4
  %partial_reduction_result353 = load float, ptr %427, align 4
  %434 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result353, i32 2, i32 31)
  store float %434, ptr %result_from_other_lane352, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane352, ptr %return_buffer354)
  %435 = load float, ptr %return_buffer354, align 4
  store float %435, ptr %427, align 4
  %partial_reduction_result356 = load float, ptr %427, align 4
  %436 = call float @llvm.nvvm.shfl.sync.down.f32(i32 -1, float %partial_reduction_result356, i32 1, i32 31)
  store float %436, ptr %result_from_other_lane355, align 4
  call void @region_5_27__2(ptr %427, ptr %result_from_other_lane355, ptr %return_buffer357)
  %437 = load float, ptr %return_buffer357, align 4
  store float %437, ptr %427, align 4
  %438 = icmp ult i32 %thread_id.x287, %tile_bound290
  %439 = mul i32 %thread_id.y288, 2
  %440 = icmp ult i32 %439, %tile_bound291
  %441 = and i1 %440, %438
  %442 = icmp eq i32 %lane_id289, 0
  %443 = and i1 %441, %442
  br i1 %443, label %reduction_write_output-true358, label %reduction_write_output-after359

reduction_write_output-after359:                  ; preds = %reduction_write_output-true358, %reduction_write_output-after337
  br label %reduce-group-4-after

early_return286:                                  ; preds = %reduce-group-4-true
  ret void

x_in_tile-true308:                                ; preds = %tile_loop.loop_body303
  %444 = mul i32 %thread_id.x287, 2
  %445 = sub i32 %x_loc307, %444
  %Arg_5.6 = getelementptr inbounds [64 x [512 x float]], ptr %arg5, i32 0, i32 %398, i32 %399
  %Arg_5.6310 = load float, ptr %Arg_5.6, align 4, !invariant.load !197
  store float %Arg_5.6310, ptr %reduction_input_address283, align 4
  %446 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %445
  call void @region_5_27__2(ptr %446, ptr %reduction_input_address283, ptr %return_buffer311)
  %447 = load float, ptr %return_buffer311, align 4
  store float %447, ptr %446, align 4
  br label %x_in_tile-after309

x_in_tile-true313:                                ; preds = %x_in_tile-after309
  %448 = mul i32 %thread_id.x287, 2
  %449 = sub i32 %x_loc312, %448
  %Arg_5.6315 = getelementptr inbounds [64 x [512 x float]], ptr %arg5, i32 0, i32 %403, i32 %404
  %Arg_5.6316 = load float, ptr %Arg_5.6315, align 4, !invariant.load !197
  store float %Arg_5.6316, ptr %reduction_input_address283, align 4
  %450 = getelementptr inbounds float, ptr %partial_reduction_result284, i32 %449
  call void @region_5_27__2(ptr %450, ptr %reduction_input_address283, ptr %return_buffer317)
  %451 = load float, ptr %return_buffer317, align 4
  store float %451, ptr %450, align 4
  br label %x_in_tile-after314

reduction_write_output-true336:                   ; preds = %y_in_tile.loop_exit295
  %452 = mul i32 %thread_id.y288, 2
  %453 = add i32 %tile_origin.1293, %thread_id.x287
  %454 = add i32 %tile_origin.2294, %452
  %455 = add i32 %454, 0
  %456 = mul i32 %tile_origin.0292, 512
  %457 = add i32 %456, %455
  %458 = udiv i32 %457, 1
  %output_element_address338 = getelementptr inbounds [512 x float], ptr %arg10, i32 0, i32 %458
  %output339 = load float, ptr %408, align 4
  store float %output339, ptr %output_element_address338, align 4
  br label %reduction_write_output-after337

reduction_write_output-true358:                   ; preds = %reduction_write_output-after337
  %459 = mul i32 %thread_id.y288, 2
  %460 = add i32 %tile_origin.1293, %thread_id.x287
  %461 = add i32 %tile_origin.2294, %459
  %462 = add i32 %461, 1
  %463 = mul i32 %tile_origin.0292, 512
  %464 = add i32 %463, %462
  %465 = udiv i32 %464, 1
  %output_element_address360 = getelementptr inbounds [512 x float], ptr %arg10, i32 0, i32 %465
  %output361 = load float, ptr %427, align 4
  store float %output361, ptr %output_element_address360, align 4
  br label %reduction_write_output-after359
}

define internal void @region_1_7__2(ptr dereferenceable(4) %Arg_0.8.typed, ptr dereferenceable(4) %Arg_1.9.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.10.typed = alloca float, align 4
  %Arg_0.8 = load float, ptr %Arg_0.8.typed, align 4
  %Arg_1.9 = load float, ptr %Arg_1.9.typed, align 4
  %add.10 = fadd float %Arg_0.8, %Arg_1.9
  store float %add.10, ptr %add.10.typed, align 4
  %load_ret_value = load float, ptr %add.10.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_2_12__2(ptr dereferenceable(4) %Arg_0.13.typed, ptr dereferenceable(4) %Arg_1.14.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.15.typed = alloca float, align 4
  %Arg_0.13 = load float, ptr %Arg_0.13.typed, align 4
  %Arg_1.14 = load float, ptr %Arg_1.14.typed, align 4
  %add.15 = fadd float %Arg_0.13, %Arg_1.14
  store float %add.15, ptr %add.15.typed, align 4
  %load_ret_value = load float, ptr %add.15.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_3_17__2(ptr dereferenceable(4) %Arg_0.18.typed, ptr dereferenceable(4) %Arg_1.19.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.20.typed = alloca float, align 4
  %Arg_0.18 = load float, ptr %Arg_0.18.typed, align 4
  %Arg_1.19 = load float, ptr %Arg_1.19.typed, align 4
  %add.20 = fadd float %Arg_0.18, %Arg_1.19
  store float %add.20, ptr %add.20.typed, align 4
  %load_ret_value = load float, ptr %add.20.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_4_22__2(ptr dereferenceable(4) %Arg_0.23.typed, ptr dereferenceable(4) %Arg_1.24.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.25.typed = alloca float, align 4
  %Arg_0.23 = load float, ptr %Arg_0.23.typed, align 4
  %Arg_1.24 = load float, ptr %Arg_1.24.typed, align 4
  %add.25 = fadd float %Arg_0.23, %Arg_1.24
  store float %add.25, ptr %add.25.typed, align 4
  %load_ret_value = load float, ptr %add.25.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define internal void @region_5_27__2(ptr dereferenceable(4) %Arg_0.28.typed, ptr dereferenceable(4) %Arg_1.29.typed, ptr dereferenceable(4) %output_arg) {
entry:
  %add.30.typed = alloca float, align 4
  %Arg_0.28 = load float, ptr %Arg_0.28.typed, align 4
  %Arg_1.29 = load float, ptr %Arg_1.29.typed, align 4
  %add.30 = fadd float %Arg_0.28, %Arg_1.29
  store float %add.30, ptr %add.30.typed, align 4
  %load_ret_value = load float, ptr %add.30.typed, align 4
  store float %load_ret_value, ptr %output_arg, align 4
  ret void
}

define void @fusion_41(ptr noalias align 16 dereferenceable(2048) %arg0, ptr noalias align 128 dereferenceable(2048) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(2048) %arg3, ptr noalias align 128 dereferenceable(2048) %arg4, ptr noalias align 16 dereferenceable(2048) %arg5, ptr noalias align 128 dereferenceable(2048) %arg6, ptr noalias align 16 dereferenceable(2048) %arg7, ptr noalias align 128 dereferenceable(2048) %arg8, ptr noalias align 16 dereferenceable(2048) %arg9, ptr noalias align 128 dereferenceable(2048) %arg10, ptr noalias align 16 dereferenceable(2048) %arg11, ptr noalias align 128 dereferenceable(2048) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !193
  %2 = mul nuw nsw i32 %0, 512
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 512
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = icmp ult i32 %linear_index, 512
  br i1 %4, label %fusion_41.in_bounds-true, label %fusion_41.in_bounds-after

fusion_41.in_bounds-after:                        ; preds = %fusion_41.in_bounds-true, %entry
  ret void

fusion_41.in_bounds-true:                         ; preds = %entry
  %5 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %6 = load float, ptr %5, align 4, !invariant.load !197
  %7 = load float, ptr %arg2, align 4, !invariant.load !197
  %8 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %9 = load float, ptr %8, align 4
  %multiply.15 = fmul float %7, %9
  %subtract.16 = fsub float %6, %multiply.15
  %10 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %11 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %12 = load float, ptr %11, align 4, !invariant.load !197
  %13 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %14 = load float, ptr %13, align 4
  %multiply.17 = fmul float %7, %14
  %subtract.18 = fsub float %12, %multiply.17
  %15 = insertvalue { float, float, float, float, float, float } %10, float %subtract.18, 1
  %16 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %19 = load float, ptr %18, align 4
  %multiply.19 = fmul float %7, %19
  %subtract.20 = fsub float %17, %multiply.19
  %20 = insertvalue { float, float, float, float, float, float } %15, float %subtract.20, 2
  %21 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %23 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %24 = load float, ptr %23, align 4
  %multiply.21 = fmul float %7, %24
  %subtract.22 = fsub float %22, %multiply.21
  %25 = insertvalue { float, float, float, float, float, float } %20, float %subtract.22, 3
  %26 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %28 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %29 = load float, ptr %28, align 4
  %multiply.23 = fmul float %7, %29
  %subtract.24 = fsub float %27, %multiply.23
  %30 = insertvalue { float, float, float, float, float, float } %25, float %subtract.24, 4
  %31 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %33 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %34 = load float, ptr %33, align 4
  %multiply.25 = fmul float %7, %34
  %subtract.26 = fsub float %32, %multiply.25
  %35 = insertvalue { float, float, float, float, float, float } %30, float %subtract.26, 5
  %36 = extractvalue { float, float, float, float, float, float } %35, 0
  %37 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %36, ptr %37, align 4
  %38 = extractvalue { float, float, float, float, float, float } %35, 1
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %35, 2
  %41 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %35, 3
  %43 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %35, 4
  %45 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %35, 5
  %47 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %46, ptr %47, align 4
  br label %fusion_41.in_bounds-after
}

define void @fusion_29(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(32768) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(32768) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(32768) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(32768) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(32768) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(32768) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index, 512
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_29.in_bounds-true, label %fusion_29.in_bounds-after

fusion_29.in_bounds-after:                        ; preds = %fusion_29.in_bounds-true, %entry
  ret void

fusion_29.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4
  %multiply.15 = fmul float %9, %11
  %subtract.16 = fsub float %8, %multiply.15
  %12 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %16 = load float, ptr %15, align 4
  %multiply.17 = fmul float %9, %16
  %subtract.18 = fsub float %14, %multiply.17
  %17 = insertvalue { float, float, float, float, float, float } %12, float %subtract.18, 1
  %18 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %21 = load float, ptr %20, align 4
  %multiply.19 = fmul float %9, %21
  %subtract.20 = fsub float %19, %multiply.19
  %22 = insertvalue { float, float, float, float, float, float } %17, float %subtract.20, 2
  %23 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %26 = load float, ptr %25, align 4
  %multiply.21 = fmul float %9, %26
  %subtract.22 = fsub float %24, %multiply.21
  %27 = insertvalue { float, float, float, float, float, float } %22, float %subtract.22, 3
  %28 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %31 = load float, ptr %30, align 4
  %multiply.23 = fmul float %9, %31
  %subtract.24 = fsub float %29, %multiply.23
  %32 = insertvalue { float, float, float, float, float, float } %27, float %subtract.24, 4
  %33 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %36 = load float, ptr %35, align 4
  %multiply.25 = fmul float %9, %36
  %subtract.26 = fsub float %34, %multiply.25
  %37 = insertvalue { float, float, float, float, float, float } %32, float %subtract.26, 5
  %38 = extractvalue { float, float, float, float, float, float } %37, 0
  %39 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %38, ptr %39, align 4
  %40 = extractvalue { float, float, float, float, float, float } %37, 1
  %41 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %37, 2
  %43 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %37, 3
  %45 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %37, 4
  %47 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %46, ptr %47, align 4
  %48 = extractvalue { float, float, float, float, float, float } %37, 5
  %49 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  store float %48, ptr %49, align 4
  br label %fusion_29.in_bounds-after
}

define void @fusion_30(ptr noalias align 16 dereferenceable(3031040) %arg0, ptr noalias align 128 dereferenceable(3031040) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(3031040) %arg3, ptr noalias align 128 dereferenceable(3031040) %arg4, ptr noalias align 16 dereferenceable(3031040) %arg5, ptr noalias align 128 dereferenceable(3031040) %arg6, ptr noalias align 16 dereferenceable(3031040) %arg7, ptr noalias align 128 dereferenceable(3031040) %arg8, ptr noalias align 16 dereferenceable(3031040) %arg9, ptr noalias align 128 dereferenceable(3031040) %arg10, ptr noalias align 16 dereferenceable(3031040) %arg11, ptr noalias align 128 dereferenceable(3031040) %arg12) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !376
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 189440
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index_base, 512
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 512
  %8 = udiv i32 %linear_index1, 512
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 512
  %11 = udiv i32 %linear_index2, 512
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 512
  %14 = udiv i32 %linear_index3, 512
  %15 = icmp ult i32 %linear_index_base, 757760
  br i1 %15, label %fusion_30.in_bounds-true, label %fusion_30.in_bounds-after

fusion_30.in_bounds-after:                        ; preds = %fusion_30.in_bounds-true, %entry
  ret void

fusion_30.in_bounds-true:                         ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  %20 = load float, ptr %19, align 4
  %multiply.15 = fmul float %18, %20
  %subtract.16 = fsub float %17, %multiply.15
  %21 = insertvalue { float, float, float, float, float, float } undef, float %subtract.16, 0
  %22 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %25 = load float, ptr %24, align 4
  %multiply.17 = fmul float %18, %25
  %subtract.18 = fsub float %23, %multiply.17
  %26 = insertvalue { float, float, float, float, float, float } %21, float %subtract.18, 1
  %27 = getelementptr inbounds float, ptr %arg5, i32 %linear_index_base
  %28 = load float, ptr %27, align 4, !invariant.load !197
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  %30 = load float, ptr %29, align 4
  %multiply.19 = fmul float %18, %30
  %subtract.20 = fsub float %28, %multiply.19
  %31 = insertvalue { float, float, float, float, float, float } %26, float %subtract.20, 2
  %32 = getelementptr inbounds float, ptr %arg7, i32 %linear_index_base
  %33 = load float, ptr %32, align 4, !invariant.load !197
  %34 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %35 = load float, ptr %34, align 4
  %multiply.21 = fmul float %18, %35
  %subtract.22 = fsub float %33, %multiply.21
  %36 = insertvalue { float, float, float, float, float, float } %31, float %subtract.22, 3
  %37 = getelementptr inbounds float, ptr %arg9, i32 %linear_index_base
  %38 = load float, ptr %37, align 4, !invariant.load !197
  %39 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %40 = load float, ptr %39, align 4
  %multiply.23 = fmul float %18, %40
  %subtract.24 = fsub float %38, %multiply.23
  %41 = insertvalue { float, float, float, float, float, float } %36, float %subtract.24, 4
  %42 = getelementptr inbounds float, ptr %arg11, i32 %linear_index_base
  %43 = load float, ptr %42, align 4, !invariant.load !197
  %44 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %45 = load float, ptr %44, align 4
  %multiply.25 = fmul float %18, %45
  %subtract.26 = fsub float %43, %multiply.25
  %46 = insertvalue { float, float, float, float, float, float } %41, float %subtract.26, 5
  %47 = extractvalue { float, float, float, float, float, float } %46, 0
  %48 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float, float } %46, 1
  %50 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float, float } %46, 2
  %52 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  store float %51, ptr %52, align 4
  %53 = extractvalue { float, float, float, float, float, float } %46, 3
  %54 = getelementptr inbounds float, ptr %arg6, i32 %linear_index_base
  store float %53, ptr %54, align 4
  %55 = extractvalue { float, float, float, float, float, float } %46, 4
  %56 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %55, ptr %56, align 4
  %57 = extractvalue { float, float, float, float, float, float } %46, 5
  %58 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %57, ptr %58, align 4
  %59 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %61 = load float, ptr %arg2, align 4, !invariant.load !197
  %62 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %63 = load float, ptr %62, align 4
  %multiply.151 = fmul float %61, %63
  %subtract.162 = fsub float %60, %multiply.151
  %64 = insertvalue { float, float, float, float, float, float } undef, float %subtract.162, 0
  %65 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %66 = load float, ptr %65, align 4, !invariant.load !197
  %67 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %68 = load float, ptr %67, align 4
  %multiply.173 = fmul float %61, %68
  %subtract.184 = fsub float %66, %multiply.173
  %69 = insertvalue { float, float, float, float, float, float } %64, float %subtract.184, 1
  %70 = getelementptr inbounds float, ptr %arg5, i32 %linear_index1
  %71 = load float, ptr %70, align 4, !invariant.load !197
  %72 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  %73 = load float, ptr %72, align 4
  %multiply.195 = fmul float %61, %73
  %subtract.206 = fsub float %71, %multiply.195
  %74 = insertvalue { float, float, float, float, float, float } %69, float %subtract.206, 2
  %75 = getelementptr inbounds float, ptr %arg7, i32 %linear_index1
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %77 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %78 = load float, ptr %77, align 4
  %multiply.217 = fmul float %61, %78
  %subtract.228 = fsub float %76, %multiply.217
  %79 = insertvalue { float, float, float, float, float, float } %74, float %subtract.228, 3
  %80 = getelementptr inbounds float, ptr %arg9, i32 %linear_index1
  %81 = load float, ptr %80, align 4, !invariant.load !197
  %82 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %83 = load float, ptr %82, align 4
  %multiply.239 = fmul float %61, %83
  %subtract.2410 = fsub float %81, %multiply.239
  %84 = insertvalue { float, float, float, float, float, float } %79, float %subtract.2410, 4
  %85 = getelementptr inbounds float, ptr %arg11, i32 %linear_index1
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %87 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %88 = load float, ptr %87, align 4
  %multiply.2511 = fmul float %61, %88
  %subtract.2612 = fsub float %86, %multiply.2511
  %89 = insertvalue { float, float, float, float, float, float } %84, float %subtract.2612, 5
  %90 = extractvalue { float, float, float, float, float, float } %89, 0
  %91 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  store float %90, ptr %91, align 4
  %92 = extractvalue { float, float, float, float, float, float } %89, 1
  %93 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  store float %92, ptr %93, align 4
  %94 = extractvalue { float, float, float, float, float, float } %89, 2
  %95 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  store float %94, ptr %95, align 4
  %96 = extractvalue { float, float, float, float, float, float } %89, 3
  %97 = getelementptr inbounds float, ptr %arg6, i32 %linear_index1
  store float %96, ptr %97, align 4
  %98 = extractvalue { float, float, float, float, float, float } %89, 4
  %99 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %98, ptr %99, align 4
  %100 = extractvalue { float, float, float, float, float, float } %89, 5
  %101 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %100, ptr %101, align 4
  %102 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %103 = load float, ptr %102, align 4, !invariant.load !197
  %104 = load float, ptr %arg2, align 4, !invariant.load !197
  %105 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %106 = load float, ptr %105, align 4
  %multiply.1513 = fmul float %104, %106
  %subtract.1614 = fsub float %103, %multiply.1513
  %107 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1614, 0
  %108 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %109 = load float, ptr %108, align 4, !invariant.load !197
  %110 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %111 = load float, ptr %110, align 4
  %multiply.1715 = fmul float %104, %111
  %subtract.1816 = fsub float %109, %multiply.1715
  %112 = insertvalue { float, float, float, float, float, float } %107, float %subtract.1816, 1
  %113 = getelementptr inbounds float, ptr %arg5, i32 %linear_index2
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %115 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  %116 = load float, ptr %115, align 4
  %multiply.1917 = fmul float %104, %116
  %subtract.2018 = fsub float %114, %multiply.1917
  %117 = insertvalue { float, float, float, float, float, float } %112, float %subtract.2018, 2
  %118 = getelementptr inbounds float, ptr %arg7, i32 %linear_index2
  %119 = load float, ptr %118, align 4, !invariant.load !197
  %120 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %121 = load float, ptr %120, align 4
  %multiply.2119 = fmul float %104, %121
  %subtract.2220 = fsub float %119, %multiply.2119
  %122 = insertvalue { float, float, float, float, float, float } %117, float %subtract.2220, 3
  %123 = getelementptr inbounds float, ptr %arg9, i32 %linear_index2
  %124 = load float, ptr %123, align 4, !invariant.load !197
  %125 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %126 = load float, ptr %125, align 4
  %multiply.2321 = fmul float %104, %126
  %subtract.2422 = fsub float %124, %multiply.2321
  %127 = insertvalue { float, float, float, float, float, float } %122, float %subtract.2422, 4
  %128 = getelementptr inbounds float, ptr %arg11, i32 %linear_index2
  %129 = load float, ptr %128, align 4, !invariant.load !197
  %130 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %131 = load float, ptr %130, align 4
  %multiply.2523 = fmul float %104, %131
  %subtract.2624 = fsub float %129, %multiply.2523
  %132 = insertvalue { float, float, float, float, float, float } %127, float %subtract.2624, 5
  %133 = extractvalue { float, float, float, float, float, float } %132, 0
  %134 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  store float %133, ptr %134, align 4
  %135 = extractvalue { float, float, float, float, float, float } %132, 1
  %136 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  store float %135, ptr %136, align 4
  %137 = extractvalue { float, float, float, float, float, float } %132, 2
  %138 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  store float %137, ptr %138, align 4
  %139 = extractvalue { float, float, float, float, float, float } %132, 3
  %140 = getelementptr inbounds float, ptr %arg6, i32 %linear_index2
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float } %132, 4
  %142 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float } %132, 5
  %144 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %143, ptr %144, align 4
  %145 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %146 = load float, ptr %145, align 4, !invariant.load !197
  %147 = load float, ptr %arg2, align 4, !invariant.load !197
  %148 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %149 = load float, ptr %148, align 4
  %multiply.1525 = fmul float %147, %149
  %subtract.1626 = fsub float %146, %multiply.1525
  %150 = insertvalue { float, float, float, float, float, float } undef, float %subtract.1626, 0
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %152 = load float, ptr %151, align 4, !invariant.load !197
  %153 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %154 = load float, ptr %153, align 4
  %multiply.1727 = fmul float %147, %154
  %subtract.1828 = fsub float %152, %multiply.1727
  %155 = insertvalue { float, float, float, float, float, float } %150, float %subtract.1828, 1
  %156 = getelementptr inbounds float, ptr %arg5, i32 %linear_index3
  %157 = load float, ptr %156, align 4, !invariant.load !197
  %158 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  %159 = load float, ptr %158, align 4
  %multiply.1929 = fmul float %147, %159
  %subtract.2030 = fsub float %157, %multiply.1929
  %160 = insertvalue { float, float, float, float, float, float } %155, float %subtract.2030, 2
  %161 = getelementptr inbounds float, ptr %arg7, i32 %linear_index3
  %162 = load float, ptr %161, align 4, !invariant.load !197
  %163 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %164 = load float, ptr %163, align 4
  %multiply.2131 = fmul float %147, %164
  %subtract.2232 = fsub float %162, %multiply.2131
  %165 = insertvalue { float, float, float, float, float, float } %160, float %subtract.2232, 3
  %166 = getelementptr inbounds float, ptr %arg9, i32 %linear_index3
  %167 = load float, ptr %166, align 4, !invariant.load !197
  %168 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %169 = load float, ptr %168, align 4
  %multiply.2333 = fmul float %147, %169
  %subtract.2434 = fsub float %167, %multiply.2333
  %170 = insertvalue { float, float, float, float, float, float } %165, float %subtract.2434, 4
  %171 = getelementptr inbounds float, ptr %arg11, i32 %linear_index3
  %172 = load float, ptr %171, align 4, !invariant.load !197
  %173 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %174 = load float, ptr %173, align 4
  %multiply.2535 = fmul float %147, %174
  %subtract.2636 = fsub float %172, %multiply.2535
  %175 = insertvalue { float, float, float, float, float, float } %170, float %subtract.2636, 5
  %176 = extractvalue { float, float, float, float, float, float } %175, 0
  %177 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float } %175, 1
  %179 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float } %175, 2
  %181 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float } %175, 3
  %183 = getelementptr inbounds float, ptr %arg6, i32 %linear_index3
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float } %175, 4
  %185 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %184, ptr %185, align 4
  %186 = extractvalue { float, float, float, float, float, float } %175, 5
  %187 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %186, ptr %187, align 4
  br label %fusion_30.in_bounds-after
}

define void @concatenate_271(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(8388608) %arg2, ptr noalias align 128 dereferenceable(14680064) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !377
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 917504
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 448
  %5 = udiv i32 %linear_index_base, 448
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 448
  %8 = udiv i32 %linear_index1, 448
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 448
  %11 = udiv i32 %linear_index2, 448
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 448
  %14 = udiv i32 %linear_index3, 448
  %15 = icmp ult i32 %linear_index_base, 3670016
  br i1 %15, label %concatenate_271.in_bounds-true, label %concatenate_271.in_bounds-after

concatenate_271.in_bounds-after:                  ; preds = %concatenate.4.merge21, %entry
  ret void

concatenate_271.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.64.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 448
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 448
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.4.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 448
  %39 = mul i32 %38, 256
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 256
  %43 = udiv i32 %40, 256
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.4.merge

concatenate.pivot.64.:                            ; preds = %concatenate_271.in_bounds-true
  %46 = icmp ult i32 %4, 64
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.192.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.192.:                           ; preds = %concatenate.pivot.64.
  %47 = icmp ult i32 %4, 192
  br i1 %47, label %concatenate.pivot.64.1, label %concatenate.pivot.192.2

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id1

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.192.
  br label %concat_index_from_operand_id2

concatenate.4.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.64.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 448
  %53 = mul i32 %52, 64
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 64
  %57 = udiv i32 %54, 64
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.64.10
  %60 = phi i32 [ 64, %concatenate.pivot.64.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 448
  %63 = mul i32 %62, 128
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 128
  %67 = udiv i32 %64, 128
  %68 = getelementptr inbounds float, ptr %arg1, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.192.11
  %70 = phi i32 [ 192, %concatenate.pivot.192.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 448
  %73 = mul i32 %72, 256
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 256
  %77 = udiv i32 %74, 256
  %78 = getelementptr inbounds float, ptr %arg2, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.4.merge3

concatenate.pivot.64.7:                           ; preds = %concatenate.4.merge
  %80 = icmp ult i32 %7, 64
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.192.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.64.7
  br label %concat_index_from_operand_id04

concatenate.pivot.192.9:                          ; preds = %concatenate.pivot.64.7
  %81 = icmp ult i32 %7, 192
  br i1 %81, label %concatenate.pivot.64.10, label %concatenate.pivot.192.11

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id15

concatenate.pivot.192.11:                         ; preds = %concatenate.pivot.192.9
  br label %concat_index_from_operand_id26

concatenate.4.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.64.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 448
  %87 = mul i32 %86, 64
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 64
  %91 = udiv i32 %88, 64
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.64.19
  %94 = phi i32 [ 64, %concatenate.pivot.64.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 448
  %97 = mul i32 %96, 128
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 128
  %101 = udiv i32 %98, 128
  %102 = getelementptr inbounds float, ptr %arg1, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.192.20
  %104 = phi i32 [ 192, %concatenate.pivot.192.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 448
  %107 = mul i32 %106, 256
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 256
  %111 = udiv i32 %108, 256
  %112 = getelementptr inbounds float, ptr %arg2, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.4.merge12

concatenate.pivot.64.16:                          ; preds = %concatenate.4.merge3
  %114 = icmp ult i32 %10, 64
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.192.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.64.16
  br label %concat_index_from_operand_id013

concatenate.pivot.192.18:                         ; preds = %concatenate.pivot.64.16
  %115 = icmp ult i32 %10, 192
  br i1 %115, label %concatenate.pivot.64.19, label %concatenate.pivot.192.20

concatenate.pivot.64.19:                          ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id114

concatenate.pivot.192.20:                         ; preds = %concatenate.pivot.192.18
  br label %concat_index_from_operand_id215

concatenate.4.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.64.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 448
  %121 = mul i32 %120, 64
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 64
  %125 = udiv i32 %122, 64
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.64.28
  %128 = phi i32 [ 64, %concatenate.pivot.64.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 448
  %131 = mul i32 %130, 128
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 128
  %135 = udiv i32 %132, 128
  %136 = getelementptr inbounds float, ptr %arg1, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.192.29
  %138 = phi i32 [ 192, %concatenate.pivot.192.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 448
  %141 = mul i32 %140, 256
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 256
  %145 = udiv i32 %142, 256
  %146 = getelementptr inbounds float, ptr %arg2, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.4.merge21

concatenate.pivot.64.25:                          ; preds = %concatenate.4.merge12
  %148 = icmp ult i32 %13, 64
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.192.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.64.25
  br label %concat_index_from_operand_id022

concatenate.pivot.192.27:                         ; preds = %concatenate.pivot.64.25
  %149 = icmp ult i32 %13, 192
  br i1 %149, label %concatenate.pivot.64.28, label %concatenate.pivot.192.29

concatenate.pivot.64.28:                          ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id123

concatenate.pivot.192.29:                         ; preds = %concatenate.pivot.192.27
  br label %concat_index_from_operand_id224

concatenate.4.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %concatenate_271.in_bounds-after
}

define void @fusion_266(ptr noalias align 16 dereferenceable(32768) %arg0, ptr noalias align 128 dereferenceable(163840) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(32768) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(32768) %arg5, ptr noalias align 128 dereferenceable(180224) %arg6, ptr noalias align 16 dereferenceable(32768) %arg7, ptr noalias align 128 dereferenceable(229376) %arg8, ptr noalias align 16 dereferenceable(32768) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(32768) %arg11, ptr noalias align 128 dereferenceable(180224) %arg12, ptr noalias align 16 dereferenceable(32768) %arg13, ptr noalias align 128 dereferenceable(229376) %arg14, ptr noalias align 16 dereferenceable(32768) %arg15, ptr noalias align 128 dereferenceable(229376) %arg16, ptr noalias align 16 dereferenceable(32768) %arg17, ptr noalias align 128 dereferenceable(114688) %arg18, ptr noalias align 16 dereferenceable(32768) %arg19, ptr noalias align 128 dereferenceable(114688) %arg20, ptr noalias align 16 dereferenceable(32768) %arg21, ptr noalias align 128 dereferenceable(163840) %arg22, ptr noalias align 16 dereferenceable(32768) %arg23, ptr noalias align 128 dereferenceable(114688) %arg24, ptr noalias align 16 dereferenceable(32768) %arg25, ptr noalias align 128 dereferenceable(114688) %arg26, ptr noalias align 16 dereferenceable(32768) %arg27, ptr noalias align 128 dereferenceable(163840) %arg28, ptr noalias align 128 dereferenceable(32768) %arg29, ptr noalias align 128 dereferenceable(32768) %arg30, ptr noalias align 128 dereferenceable(32768) %arg31, ptr noalias align 128 dereferenceable(32768) %arg32, ptr noalias align 128 dereferenceable(32768) %arg33, ptr noalias align 128 dereferenceable(32768) %arg34, ptr noalias align 128 dereferenceable(32768) %arg35, ptr noalias align 128 dereferenceable(32768) %arg36, ptr noalias align 128 dereferenceable(32768) %arg37, ptr noalias align 128 dereferenceable(32768) %arg38, ptr noalias align 128 dereferenceable(32768) %arg39, ptr noalias align 128 dereferenceable(32768) %arg40, ptr noalias align 128 dereferenceable(32768) %arg41, ptr noalias align 128 dereferenceable(32768) %arg42) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !217
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 8192
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 8192
  br i1 %6, label %fusion_266.in_bounds-true, label %fusion_266.in_bounds-after

fusion_266.in_bounds-after:                       ; preds = %fusion_266.in_bounds-true, %entry
  ret void

fusion_266.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.32 = fmul float %9, %13
  %subtract.33 = fsub float %8, %multiply.32
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.33, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 32
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.35 = fmul float %9, %20
  %subtract.36 = fsub float %16, %multiply.35
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.36, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 32
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [352 x [128 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.38 = fmul float %9, %27
  %subtract.39 = fsub float %23, %multiply.38
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.39, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 0
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [448 x [128 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.41 = fmul float %9, %34
  %subtract.42 = fsub float %30, %multiply.41
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.42, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 32
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.44 = fmul float %9, %41
  %subtract.45 = fsub float %37, %multiply.44
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.45, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 32
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [352 x [128 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.47 = fmul float %9, %48
  %subtract.48 = fsub float %44, %multiply.47
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.48, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [448 x [128 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.50 = fmul float %9, %55
  %subtract.51 = fsub float %51, %multiply.50
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.51, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [448 x [128 x float]], ptr %arg16, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.53 = fmul float %9, %62
  %subtract.54 = fsub float %58, %multiply.53
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.54, 7
  %64 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %66 = add i32 %5, 32
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [224 x [128 x float]], ptr %arg18, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %multiply.56 = fmul float %9, %69
  %subtract.57 = fsub float %65, %multiply.56
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.57, 8
  %71 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = add i32 %5, 32
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [224 x [128 x float]], ptr %arg20, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %multiply.59 = fmul float %9, %76
  %subtract.60 = fsub float %72, %multiply.59
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.60, 9
  %78 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %80 = add i32 %5, 0
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [320 x [128 x float]], ptr %arg22, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %multiply.62 = fmul float %9, %83
  %subtract.63 = fsub float %79, %multiply.62
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.63, 10
  %85 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %87 = add i32 %5, 32
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [224 x [128 x float]], ptr %arg24, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %multiply.65 = fmul float %9, %90
  %subtract.66 = fsub float %86, %multiply.65
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.66, 11
  %92 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = add i32 %5, 32
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [224 x [128 x float]], ptr %arg26, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %multiply.68 = fmul float %9, %97
  %subtract.69 = fsub float %93, %multiply.68
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.69, 12
  %99 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !197
  %101 = add i32 %5, 0
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [320 x [128 x float]], ptr %arg28, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %multiply.71 = fmul float %9, %104
  %subtract.72 = fsub float %100, %multiply.71
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.72, 13
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 0
  %107 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  store float %106, ptr %107, align 4
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 1
  %109 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %108, ptr %109, align 4
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 2
  %111 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  store float %110, ptr %111, align 4
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 3
  %113 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %112, ptr %113, align 4
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 4
  %115 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %114, ptr %115, align 4
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 5
  %117 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %116, ptr %117, align 4
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 6
  %119 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %118, ptr %119, align 4
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 7
  %121 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 8
  %123 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 9
  %125 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 10
  %127 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 11
  %129 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 12
  %131 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, 13
  %133 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %132, ptr %133, align 4
  br label %fusion_266.in_bounds-after
}

define void @fusion_248(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(163840) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 16 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(163840) %arg5, ptr noalias align 16 dereferenceable(65536) %arg6, ptr noalias align 16 dereferenceable(65536) %arg7, ptr noalias align 128 dereferenceable(163840) %arg8, ptr noalias align 16 dereferenceable(65536) %arg9, ptr noalias align 16 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(65536) %arg11, ptr noalias align 16 dereferenceable(65536) %arg12, ptr noalias align 128 dereferenceable(229376) %arg13, ptr noalias align 16 dereferenceable(65536) %arg14, ptr noalias align 128 dereferenceable(229376) %arg15, ptr noalias align 16 dereferenceable(65536) %arg16, ptr noalias align 128 dereferenceable(229376) %arg17, ptr noalias align 16 dereferenceable(65536) %arg18, ptr noalias align 128 dereferenceable(114688) %arg19, ptr noalias align 16 dereferenceable(65536) %arg20, ptr noalias align 128 dereferenceable(114688) %arg21, ptr noalias align 16 dereferenceable(65536) %arg22, ptr noalias align 128 dereferenceable(114688) %arg23, ptr noalias align 16 dereferenceable(65536) %arg24, ptr noalias align 128 dereferenceable(114688) %arg25, ptr noalias align 16 dereferenceable(65536) %arg26, ptr noalias align 128 dereferenceable(65536) %arg27, ptr noalias align 16 dereferenceable(65536) %arg28, ptr noalias align 128 dereferenceable(65536) %arg29, ptr noalias align 16 dereferenceable(65536) %arg30, ptr noalias align 128 dereferenceable(65536) %arg31, ptr noalias align 16 dereferenceable(65536) %arg32, ptr noalias align 128 dereferenceable(65536) %arg33, ptr noalias align 16 dereferenceable(65536) %arg34, ptr noalias align 128 dereferenceable(65536) %arg35, ptr noalias align 16 dereferenceable(65536) %arg36, ptr noalias align 128 dereferenceable(65536) %arg37, ptr noalias align 16 dereferenceable(65536) %arg38, ptr noalias align 128 dereferenceable(65536) %arg39, ptr noalias align 128 dereferenceable(65536) %arg40, ptr noalias align 128 dereferenceable(65536) %arg41, ptr noalias align 128 dereferenceable(65536) %arg42, ptr noalias align 128 dereferenceable(65536) %arg43, ptr noalias align 128 dereferenceable(65536) %arg44, ptr noalias align 128 dereferenceable(65536) %arg45, ptr noalias align 128 dereferenceable(65536) %arg46, ptr noalias align 128 dereferenceable(65536) %arg47, ptr noalias align 128 dereferenceable(65536) %arg48, ptr noalias align 128 dereferenceable(65536) %arg49, ptr noalias align 128 dereferenceable(65536) %arg50, ptr noalias align 128 dereferenceable(65536) %arg51, ptr noalias align 128 dereferenceable(65536) %arg52, ptr noalias align 128 dereferenceable(65536) %arg53, ptr noalias align 128 dereferenceable(65536) %arg54, ptr noalias align 128 dereferenceable(65536) %arg55, ptr noalias align 128 dereferenceable(65536) %arg56) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !309
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_248.in_bounds-true, label %fusion_248.in_bounds-after

fusion_248.in_bounds-after:                       ; preds = %fusion_248.in_bounds-true, %entry
  ret void

fusion_248.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 192
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.43 = fmul float %9, %13
  %subtract.44 = fsub float %8, %multiply.43
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 64
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [320 x [128 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.46 = fmul float %9, %20
  %subtract.47 = fsub float %16, %multiply.46
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.47, 1
  %22 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 64
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [320 x [128 x float]], ptr %arg5, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.49 = fmul float %9, %27
  %subtract.50 = fsub float %23, %multiply.49
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.50, 2
  %29 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 192
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [320 x [128 x float]], ptr %arg5, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.52 = fmul float %9, %34
  %subtract.53 = fsub float %30, %multiply.52
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.53, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 64
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [320 x [128 x float]], ptr %arg8, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.55 = fmul float %9, %41
  %subtract.56 = fsub float %37, %multiply.55
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.56, 4
  %43 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 192
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [320 x [128 x float]], ptr %arg8, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.58 = fmul float %9, %48
  %subtract.59 = fsub float %44, %multiply.58
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.59, 5
  %50 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %53 = load float, ptr %52, align 4, !invariant.load !197
  %multiply.60 = fmul float %9, %53
  %subtract.61 = fsub float %51, %multiply.60
  %54 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.61, 6
  %55 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !197
  %57 = add i32 %5, 64
  %58 = add i32 %4, 0
  %59 = getelementptr inbounds [448 x [128 x float]], ptr %arg13, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %multiply.63 = fmul float %9, %60
  %subtract.64 = fsub float %56, %multiply.63
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %54, float %subtract.64, 7
  %62 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %64 = add i32 %5, 64
  %65 = add i32 %4, 0
  %66 = getelementptr inbounds [448 x [128 x float]], ptr %arg15, i32 0, i32 %64, i32 %65
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %multiply.66 = fmul float %9, %67
  %subtract.67 = fsub float %63, %multiply.66
  %68 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.67, 8
  %69 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %70 = load float, ptr %69, align 4, !invariant.load !197
  %71 = add i32 %5, 64
  %72 = add i32 %4, 0
  %73 = getelementptr inbounds [448 x [128 x float]], ptr %arg17, i32 0, i32 %71, i32 %72
  %74 = load float, ptr %73, align 4, !invariant.load !197
  %multiply.69 = fmul float %9, %74
  %subtract.70 = fsub float %70, %multiply.69
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %68, float %subtract.70, 9
  %76 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !197
  %78 = add i32 %5, 96
  %79 = add i32 %4, 0
  %80 = getelementptr inbounds [224 x [128 x float]], ptr %arg19, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !197
  %multiply.72 = fmul float %9, %81
  %subtract.73 = fsub float %77, %multiply.72
  %82 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.73, 10
  %83 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !197
  %85 = add i32 %5, 96
  %86 = add i32 %4, 0
  %87 = getelementptr inbounds [224 x [128 x float]], ptr %arg21, i32 0, i32 %85, i32 %86
  %88 = load float, ptr %87, align 4, !invariant.load !197
  %multiply.75 = fmul float %9, %88
  %subtract.76 = fsub float %84, %multiply.75
  %89 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %82, float %subtract.76, 11
  %90 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %91 = load float, ptr %90, align 4, !invariant.load !197
  %92 = add i32 %5, 96
  %93 = add i32 %4, 0
  %94 = getelementptr inbounds [224 x [128 x float]], ptr %arg23, i32 0, i32 %92, i32 %93
  %95 = load float, ptr %94, align 4, !invariant.load !197
  %multiply.78 = fmul float %9, %95
  %subtract.79 = fsub float %91, %multiply.78
  %96 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %89, float %subtract.79, 12
  %97 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %98 = load float, ptr %97, align 4, !invariant.load !197
  %99 = add i32 %5, 96
  %100 = add i32 %4, 0
  %101 = getelementptr inbounds [224 x [128 x float]], ptr %arg25, i32 0, i32 %99, i32 %100
  %102 = load float, ptr %101, align 4, !invariant.load !197
  %multiply.81 = fmul float %9, %102
  %subtract.82 = fsub float %98, %multiply.81
  %103 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %96, float %subtract.82, 13
  %104 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %105 = load float, ptr %104, align 4, !invariant.load !197
  %106 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !197
  %multiply.83 = fmul float %9, %107
  %subtract.84 = fsub float %105, %multiply.83
  %108 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %103, float %subtract.84, 14
  %109 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %110 = load float, ptr %109, align 4, !invariant.load !197
  %111 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %112 = load float, ptr %111, align 4, !invariant.load !197
  %multiply.85 = fmul float %9, %112
  %subtract.86 = fsub float %110, %multiply.85
  %113 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %108, float %subtract.86, 15
  %114 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %115 = load float, ptr %114, align 4, !invariant.load !197
  %116 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %117 = load float, ptr %116, align 4, !invariant.load !197
  %multiply.87 = fmul float %9, %117
  %subtract.88 = fsub float %115, %multiply.87
  %118 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %113, float %subtract.88, 16
  %119 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %120 = load float, ptr %119, align 4, !invariant.load !197
  %121 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %122 = load float, ptr %121, align 4
  %multiply.89 = fmul float %9, %122
  %subtract.90 = fsub float %120, %multiply.89
  %123 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %118, float %subtract.90, 17
  %124 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %125 = load float, ptr %124, align 4, !invariant.load !197
  %126 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %127 = load float, ptr %126, align 4
  %multiply.91 = fmul float %9, %127
  %subtract.92 = fsub float %125, %multiply.91
  %128 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %123, float %subtract.92, 18
  %129 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %130 = load float, ptr %129, align 4, !invariant.load !197
  %131 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %132 = load float, ptr %131, align 4
  %multiply.93 = fmul float %9, %132
  %subtract.94 = fsub float %130, %multiply.93
  %133 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, float %subtract.94, 19
  %134 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %135 = load float, ptr %134, align 4, !invariant.load !197
  %136 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %137 = load float, ptr %136, align 4
  %multiply.95 = fmul float %9, %137
  %subtract.96 = fsub float %135, %multiply.95
  %138 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %133, float %subtract.96, 20
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 0
  %140 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %139, ptr %140, align 4
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 1
  %142 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %141, ptr %142, align 4
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 2
  %144 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %143, ptr %144, align 4
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 3
  %146 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %145, ptr %146, align 4
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 4
  %148 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %147, ptr %148, align 4
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 5
  %150 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %149, ptr %150, align 4
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 6
  %152 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %151, ptr %152, align 4
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 7
  %154 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %153, ptr %154, align 4
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 8
  %156 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %155, ptr %156, align 4
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 9
  %158 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %157, ptr %158, align 4
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 10
  %160 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %159, ptr %160, align 4
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 11
  %162 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %161, ptr %162, align 4
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 12
  %164 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %163, ptr %164, align 4
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 13
  %166 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %165, ptr %166, align 4
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 14
  %168 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %167, ptr %168, align 4
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 15
  %170 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %169, ptr %170, align 4
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 16
  %172 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %171, ptr %172, align 4
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 17
  %174 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %173, ptr %174, align 4
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 18
  %176 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %175, ptr %176, align 4
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 19
  %178 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %177, ptr %178, align 4
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 20
  %180 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %179, ptr %180, align 4
  br label %fusion_248.in_bounds-after
}

define void @fusion_383(ptr noalias align 16 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(131072) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(131072) %arg3, ptr noalias align 128 dereferenceable(180224) %arg4, ptr noalias align 16 dereferenceable(131072) %arg5, ptr noalias align 128 dereferenceable(180224) %arg6, ptr noalias align 16 dereferenceable(131072) %arg7, ptr noalias align 128 dereferenceable(229376) %arg8, ptr noalias align 16 dereferenceable(131072) %arg9, ptr noalias align 128 dereferenceable(180224) %arg10, ptr noalias align 16 dereferenceable(131072) %arg11, ptr noalias align 128 dereferenceable(180224) %arg12, ptr noalias align 16 dereferenceable(131072) %arg13, ptr noalias align 128 dereferenceable(229376) %arg14, ptr noalias align 16 dereferenceable(131072) %arg15, ptr noalias align 128 dereferenceable(229376) %arg16, ptr noalias align 16 dereferenceable(131072) %arg17, ptr noalias align 128 dereferenceable(131072) %arg18, ptr noalias align 16 dereferenceable(131072) %arg19, ptr noalias align 128 dereferenceable(131072) %arg20, ptr noalias align 16 dereferenceable(131072) %arg21, ptr noalias align 128 dereferenceable(131072) %arg22, ptr noalias align 16 dereferenceable(131072) %arg23, ptr noalias align 128 dereferenceable(131072) %arg24, ptr noalias align 16 dereferenceable(131072) %arg25, ptr noalias align 128 dereferenceable(131072) %arg26, ptr noalias align 16 dereferenceable(131072) %arg27, ptr noalias align 128 dereferenceable(131072) %arg28, ptr noalias align 16 dereferenceable(131072) %arg29, ptr noalias align 128 dereferenceable(131072) %arg30, ptr noalias align 16 dereferenceable(131072) %arg31, ptr noalias align 128 dereferenceable(131072) %arg32, ptr noalias align 16 dereferenceable(131072) %arg33, ptr noalias align 128 dereferenceable(131072) %arg34, ptr noalias align 16 dereferenceable(131072) %arg35, ptr noalias align 128 dereferenceable(131072) %arg36, ptr noalias align 16 dereferenceable(131072) %arg37, ptr noalias align 128 dereferenceable(131072) %arg38, ptr noalias align 16 dereferenceable(131072) %arg39, ptr noalias align 128 dereferenceable(131072) %arg40, ptr noalias align 128 dereferenceable(131072) %arg41, ptr noalias align 128 dereferenceable(131072) %arg42, ptr noalias align 128 dereferenceable(131072) %arg43, ptr noalias align 128 dereferenceable(131072) %arg44, ptr noalias align 128 dereferenceable(131072) %arg45, ptr noalias align 128 dereferenceable(131072) %arg46, ptr noalias align 128 dereferenceable(131072) %arg47, ptr noalias align 128 dereferenceable(131072) %arg48, ptr noalias align 128 dereferenceable(131072) %arg49, ptr noalias align 128 dereferenceable(131072) %arg50) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !378
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index, 128
  %6 = icmp ult i32 %linear_index, 32768
  br i1 %6, label %fusion_383.in_bounds-true, label %fusion_383.in_bounds-after

fusion_383.in_bounds-after:                       ; preds = %fusion_383.in_bounds-true, %entry
  ret void

fusion_383.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = getelementptr inbounds float, ptr %arg1, i32 %linear_index
  %11 = load float, ptr %10, align 4, !invariant.load !197
  %multiply.43 = fmul float %9, %11
  %subtract.44 = fsub float %8, %multiply.43
  %12 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.44, 0
  %13 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = add i32 %5, 96
  %16 = add i32 %4, 0
  %17 = getelementptr inbounds [352 x [128 x float]], ptr %arg4, i32 0, i32 %15, i32 %16
  %18 = load float, ptr %17, align 4, !invariant.load !197
  %multiply.46 = fmul float %9, %18
  %subtract.47 = fsub float %14, %multiply.46
  %19 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %12, float %subtract.47, 1
  %20 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %22 = add i32 %5, 96
  %23 = add i32 %4, 0
  %24 = getelementptr inbounds [352 x [128 x float]], ptr %arg6, i32 0, i32 %22, i32 %23
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %multiply.49 = fmul float %9, %25
  %subtract.50 = fsub float %21, %multiply.49
  %26 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %19, float %subtract.50, 2
  %27 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %28 = load float, ptr %27, align 4, !invariant.load !197
  %29 = add i32 %5, 192
  %30 = add i32 %4, 0
  %31 = getelementptr inbounds [448 x [128 x float]], ptr %arg8, i32 0, i32 %29, i32 %30
  %32 = load float, ptr %31, align 4, !invariant.load !197
  %multiply.52 = fmul float %9, %32
  %subtract.53 = fsub float %28, %multiply.52
  %33 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %26, float %subtract.53, 3
  %34 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %35 = load float, ptr %34, align 4, !invariant.load !197
  %36 = add i32 %5, 96
  %37 = add i32 %4, 0
  %38 = getelementptr inbounds [352 x [128 x float]], ptr %arg10, i32 0, i32 %36, i32 %37
  %39 = load float, ptr %38, align 4, !invariant.load !197
  %multiply.55 = fmul float %9, %39
  %subtract.56 = fsub float %35, %multiply.55
  %40 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %33, float %subtract.56, 4
  %41 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %42 = load float, ptr %41, align 4, !invariant.load !197
  %43 = add i32 %5, 96
  %44 = add i32 %4, 0
  %45 = getelementptr inbounds [352 x [128 x float]], ptr %arg12, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %multiply.58 = fmul float %9, %46
  %subtract.59 = fsub float %42, %multiply.58
  %47 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %40, float %subtract.59, 5
  %48 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %49 = load float, ptr %48, align 4, !invariant.load !197
  %50 = add i32 %5, 192
  %51 = add i32 %4, 0
  %52 = getelementptr inbounds [448 x [128 x float]], ptr %arg14, i32 0, i32 %50, i32 %51
  %53 = load float, ptr %52, align 4, !invariant.load !197
  %multiply.61 = fmul float %9, %53
  %subtract.62 = fsub float %49, %multiply.61
  %54 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %47, float %subtract.62, 6
  %55 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %56 = load float, ptr %55, align 4, !invariant.load !197
  %57 = add i32 %5, 192
  %58 = add i32 %4, 0
  %59 = getelementptr inbounds [448 x [128 x float]], ptr %arg16, i32 0, i32 %57, i32 %58
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %multiply.64 = fmul float %9, %60
  %subtract.65 = fsub float %56, %multiply.64
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %54, float %subtract.65, 7
  %62 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %64 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %multiply.66 = fmul float %9, %65
  %subtract.67 = fsub float %63, %multiply.66
  %66 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.67, 8
  %67 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %68 = load float, ptr %67, align 4, !invariant.load !197
  %69 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %70 = load float, ptr %69, align 4, !invariant.load !197
  %multiply.68 = fmul float %9, %70
  %subtract.69 = fsub float %68, %multiply.68
  %71 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %66, float %subtract.69, 9
  %72 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %73 = load float, ptr %72, align 4, !invariant.load !197
  %74 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %75 = load float, ptr %74, align 4
  %multiply.70 = fmul float %9, %75
  %subtract.71 = fsub float %73, %multiply.70
  %76 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %71, float %subtract.71, 10
  %77 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %78 = load float, ptr %77, align 4, !invariant.load !197
  %79 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %80 = load float, ptr %79, align 4
  %multiply.72 = fmul float %9, %80
  %subtract.73 = fsub float %78, %multiply.72
  %81 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %76, float %subtract.73, 11
  %82 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %84 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %85 = load float, ptr %84, align 4
  %multiply.74 = fmul float %9, %85
  %subtract.75 = fsub float %83, %multiply.74
  %86 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %81, float %subtract.75, 12
  %87 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %88 = load float, ptr %87, align 4, !invariant.load !197
  %89 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %90 = load float, ptr %89, align 4
  %multiply.76 = fmul float %9, %90
  %subtract.77 = fsub float %88, %multiply.76
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %86, float %subtract.77, 13
  %92 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %95 = load float, ptr %94, align 4
  %multiply.78 = fmul float %9, %95
  %subtract.79 = fsub float %93, %multiply.78
  %96 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.79, 14
  %97 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %98 = load float, ptr %97, align 4, !invariant.load !197
  %99 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  %100 = load float, ptr %99, align 4
  %multiply.80 = fmul float %9, %100
  %subtract.81 = fsub float %98, %multiply.80
  %101 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %96, float %subtract.81, 15
  %102 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %103 = load float, ptr %102, align 4, !invariant.load !197
  %104 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  %105 = load float, ptr %104, align 4
  %multiply.82 = fmul float %9, %105
  %subtract.83 = fsub float %103, %multiply.82
  %106 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %101, float %subtract.83, 16
  %107 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %108 = load float, ptr %107, align 4, !invariant.load !197
  %109 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  %110 = load float, ptr %109, align 4
  %multiply.84 = fmul float %9, %110
  %subtract.85 = fsub float %108, %multiply.84
  %111 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %106, float %subtract.85, 17
  %112 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %113 = load float, ptr %112, align 4, !invariant.load !197
  %114 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  %115 = load float, ptr %114, align 4
  %multiply.86 = fmul float %9, %115
  %subtract.87 = fsub float %113, %multiply.86
  %116 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %111, float %subtract.87, 18
  %117 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %118 = load float, ptr %117, align 4, !invariant.load !197
  %119 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  %120 = load float, ptr %119, align 4
  %multiply.88 = fmul float %9, %120
  %subtract.89 = fsub float %118, %multiply.88
  %121 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, float %subtract.89, 19
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 0
  %123 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 1
  %125 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 2
  %127 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 3
  %129 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 4
  %131 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 5
  %133 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 6
  %135 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 7
  %137 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 8
  %139 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 9
  %141 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 10
  %143 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 11
  %145 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 12
  %147 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 13
  %149 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 14
  %151 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 15
  %153 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 16
  %155 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 17
  %157 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 18
  %159 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 19
  %161 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %160, ptr %161, align 4
  br label %fusion_383.in_bounds-after
}

define void @concatenate_299(ptr noalias align 16 dereferenceable(2097152) %arg0, ptr noalias align 16 dereferenceable(4194304) %arg1, ptr noalias align 16 dereferenceable(262144) %arg2, ptr noalias align 16 dereferenceable(8388608) %arg3, ptr noalias align 128 dereferenceable(14942208) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !379
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 933888
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 456
  %5 = udiv i32 %linear_index_base, 456
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 456
  %8 = udiv i32 %linear_index1, 456
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 456
  %11 = udiv i32 %linear_index2, 456
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 456
  %14 = udiv i32 %linear_index3, 456
  %15 = icmp ult i32 %linear_index_base, 3735552
  br i1 %15, label %concatenate_299.in_bounds-true, label %concatenate_299.in_bounds-after

concatenate_299.in_bounds-after:                  ; preds = %concatenate.5.merge28, %entry
  ret void

concatenate_299.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.192.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 456
  %19 = mul i32 %18, 64
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 64
  %23 = udiv i32 %20, 64
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.64.1
  %26 = phi i32 [ 64, %concatenate.pivot.64.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 456
  %29 = mul i32 %28, 128
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 128
  %33 = udiv i32 %30, 128
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.192.2
  %36 = phi i32 [ 192, %concatenate.pivot.192.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 456
  %39 = mul i32 %38, 8
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 8
  %43 = udiv i32 %40, 8
  %44 = getelementptr inbounds float, ptr %arg2, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.5.merge

concat_index_from_operand_id3:                    ; preds = %concatenate.pivot.200.3
  %46 = phi i32 [ 200, %concatenate.pivot.200.3 ]
  %47 = sub nsw i32 %4, %46
  %48 = udiv i32 %linear_index_base, 456
  %49 = mul i32 %48, 256
  %50 = add i32 %49, %47
  %51 = udiv i32 %50, 1
  %52 = urem i32 %51, 256
  %53 = udiv i32 %50, 256
  %54 = getelementptr inbounds float, ptr %arg3, i32 %50
  %55 = load float, ptr %54, align 4, !invariant.load !197
  br label %concatenate.5.merge

concatenate.pivot.192.:                           ; preds = %concatenate_299.in_bounds-true
  %56 = icmp ult i32 %4, 192
  br i1 %56, label %concatenate.pivot.64., label %concatenate.pivot.200.

concatenate.pivot.64.:                            ; preds = %concatenate.pivot.192.
  %57 = icmp ult i32 %4, 64
  br i1 %57, label %concatenate.pivot.0., label %concatenate.pivot.64.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id0

concatenate.pivot.64.1:                           ; preds = %concatenate.pivot.64.
  br label %concat_index_from_operand_id1

concatenate.pivot.200.:                           ; preds = %concatenate.pivot.192.
  %58 = icmp ult i32 %4, 200
  br i1 %58, label %concatenate.pivot.192.2, label %concatenate.pivot.200.3

concatenate.pivot.192.2:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id2

concatenate.pivot.200.3:                          ; preds = %concatenate.pivot.200.
  br label %concat_index_from_operand_id3

concatenate.5.merge:                              ; preds = %concat_index_from_operand_id3, %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %59 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ], [ %55, %concat_index_from_operand_id3 ]
  %60 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %59, ptr %60, align 4
  br label %concatenate.pivot.192.9

concat_index_from_operand_id05:                   ; preds = %concatenate.pivot.0.11
  %61 = phi i32 [ 0, %concatenate.pivot.0.11 ]
  %62 = sub nsw i32 %7, %61
  %63 = udiv i32 %linear_index1, 456
  %64 = mul i32 %63, 64
  %65 = add i32 %64, %62
  %66 = udiv i32 %65, 1
  %67 = urem i32 %66, 64
  %68 = udiv i32 %65, 64
  %69 = getelementptr inbounds float, ptr %arg0, i32 %65
  %70 = load float, ptr %69, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id16:                   ; preds = %concatenate.pivot.64.12
  %71 = phi i32 [ 64, %concatenate.pivot.64.12 ]
  %72 = sub nsw i32 %7, %71
  %73 = udiv i32 %linear_index1, 456
  %74 = mul i32 %73, 128
  %75 = add i32 %74, %72
  %76 = udiv i32 %75, 1
  %77 = urem i32 %76, 128
  %78 = udiv i32 %75, 128
  %79 = getelementptr inbounds float, ptr %arg1, i32 %75
  %80 = load float, ptr %79, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id27:                   ; preds = %concatenate.pivot.192.14
  %81 = phi i32 [ 192, %concatenate.pivot.192.14 ]
  %82 = sub nsw i32 %7, %81
  %83 = udiv i32 %linear_index1, 456
  %84 = mul i32 %83, 8
  %85 = add i32 %84, %82
  %86 = udiv i32 %85, 1
  %87 = urem i32 %86, 8
  %88 = udiv i32 %85, 8
  %89 = getelementptr inbounds float, ptr %arg2, i32 %85
  %90 = load float, ptr %89, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concat_index_from_operand_id38:                   ; preds = %concatenate.pivot.200.15
  %91 = phi i32 [ 200, %concatenate.pivot.200.15 ]
  %92 = sub nsw i32 %7, %91
  %93 = udiv i32 %linear_index1, 456
  %94 = mul i32 %93, 256
  %95 = add i32 %94, %92
  %96 = udiv i32 %95, 1
  %97 = urem i32 %96, 256
  %98 = udiv i32 %95, 256
  %99 = getelementptr inbounds float, ptr %arg3, i32 %95
  %100 = load float, ptr %99, align 4, !invariant.load !197
  br label %concatenate.5.merge4

concatenate.pivot.192.9:                          ; preds = %concatenate.5.merge
  %101 = icmp ult i32 %7, 192
  br i1 %101, label %concatenate.pivot.64.10, label %concatenate.pivot.200.13

concatenate.pivot.64.10:                          ; preds = %concatenate.pivot.192.9
  %102 = icmp ult i32 %7, 64
  br i1 %102, label %concatenate.pivot.0.11, label %concatenate.pivot.64.12

concatenate.pivot.0.11:                           ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id05

concatenate.pivot.64.12:                          ; preds = %concatenate.pivot.64.10
  br label %concat_index_from_operand_id16

concatenate.pivot.200.13:                         ; preds = %concatenate.pivot.192.9
  %103 = icmp ult i32 %7, 200
  br i1 %103, label %concatenate.pivot.192.14, label %concatenate.pivot.200.15

concatenate.pivot.192.14:                         ; preds = %concatenate.pivot.200.13
  br label %concat_index_from_operand_id27

concatenate.pivot.200.15:                         ; preds = %concatenate.pivot.200.13
  br label %concat_index_from_operand_id38

concatenate.5.merge4:                             ; preds = %concat_index_from_operand_id38, %concat_index_from_operand_id27, %concat_index_from_operand_id16, %concat_index_from_operand_id05
  %104 = phi float [ %70, %concat_index_from_operand_id05 ], [ %80, %concat_index_from_operand_id16 ], [ %90, %concat_index_from_operand_id27 ], [ %100, %concat_index_from_operand_id38 ]
  %105 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %104, ptr %105, align 4
  br label %concatenate.pivot.192.21

concat_index_from_operand_id017:                  ; preds = %concatenate.pivot.0.23
  %106 = phi i32 [ 0, %concatenate.pivot.0.23 ]
  %107 = sub nsw i32 %10, %106
  %108 = udiv i32 %linear_index2, 456
  %109 = mul i32 %108, 64
  %110 = add i32 %109, %107
  %111 = udiv i32 %110, 1
  %112 = urem i32 %111, 64
  %113 = udiv i32 %110, 64
  %114 = getelementptr inbounds float, ptr %arg0, i32 %110
  %115 = load float, ptr %114, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id118:                  ; preds = %concatenate.pivot.64.24
  %116 = phi i32 [ 64, %concatenate.pivot.64.24 ]
  %117 = sub nsw i32 %10, %116
  %118 = udiv i32 %linear_index2, 456
  %119 = mul i32 %118, 128
  %120 = add i32 %119, %117
  %121 = udiv i32 %120, 1
  %122 = urem i32 %121, 128
  %123 = udiv i32 %120, 128
  %124 = getelementptr inbounds float, ptr %arg1, i32 %120
  %125 = load float, ptr %124, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id219:                  ; preds = %concatenate.pivot.192.26
  %126 = phi i32 [ 192, %concatenate.pivot.192.26 ]
  %127 = sub nsw i32 %10, %126
  %128 = udiv i32 %linear_index2, 456
  %129 = mul i32 %128, 8
  %130 = add i32 %129, %127
  %131 = udiv i32 %130, 1
  %132 = urem i32 %131, 8
  %133 = udiv i32 %130, 8
  %134 = getelementptr inbounds float, ptr %arg2, i32 %130
  %135 = load float, ptr %134, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concat_index_from_operand_id320:                  ; preds = %concatenate.pivot.200.27
  %136 = phi i32 [ 200, %concatenate.pivot.200.27 ]
  %137 = sub nsw i32 %10, %136
  %138 = udiv i32 %linear_index2, 456
  %139 = mul i32 %138, 256
  %140 = add i32 %139, %137
  %141 = udiv i32 %140, 1
  %142 = urem i32 %141, 256
  %143 = udiv i32 %140, 256
  %144 = getelementptr inbounds float, ptr %arg3, i32 %140
  %145 = load float, ptr %144, align 4, !invariant.load !197
  br label %concatenate.5.merge16

concatenate.pivot.192.21:                         ; preds = %concatenate.5.merge4
  %146 = icmp ult i32 %10, 192
  br i1 %146, label %concatenate.pivot.64.22, label %concatenate.pivot.200.25

concatenate.pivot.64.22:                          ; preds = %concatenate.pivot.192.21
  %147 = icmp ult i32 %10, 64
  br i1 %147, label %concatenate.pivot.0.23, label %concatenate.pivot.64.24

concatenate.pivot.0.23:                           ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id017

concatenate.pivot.64.24:                          ; preds = %concatenate.pivot.64.22
  br label %concat_index_from_operand_id118

concatenate.pivot.200.25:                         ; preds = %concatenate.pivot.192.21
  %148 = icmp ult i32 %10, 200
  br i1 %148, label %concatenate.pivot.192.26, label %concatenate.pivot.200.27

concatenate.pivot.192.26:                         ; preds = %concatenate.pivot.200.25
  br label %concat_index_from_operand_id219

concatenate.pivot.200.27:                         ; preds = %concatenate.pivot.200.25
  br label %concat_index_from_operand_id320

concatenate.5.merge16:                            ; preds = %concat_index_from_operand_id320, %concat_index_from_operand_id219, %concat_index_from_operand_id118, %concat_index_from_operand_id017
  %149 = phi float [ %115, %concat_index_from_operand_id017 ], [ %125, %concat_index_from_operand_id118 ], [ %135, %concat_index_from_operand_id219 ], [ %145, %concat_index_from_operand_id320 ]
  %150 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %149, ptr %150, align 4
  br label %concatenate.pivot.192.33

concat_index_from_operand_id029:                  ; preds = %concatenate.pivot.0.35
  %151 = phi i32 [ 0, %concatenate.pivot.0.35 ]
  %152 = sub nsw i32 %13, %151
  %153 = udiv i32 %linear_index3, 456
  %154 = mul i32 %153, 64
  %155 = add i32 %154, %152
  %156 = udiv i32 %155, 1
  %157 = urem i32 %156, 64
  %158 = udiv i32 %155, 64
  %159 = getelementptr inbounds float, ptr %arg0, i32 %155
  %160 = load float, ptr %159, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id130:                  ; preds = %concatenate.pivot.64.36
  %161 = phi i32 [ 64, %concatenate.pivot.64.36 ]
  %162 = sub nsw i32 %13, %161
  %163 = udiv i32 %linear_index3, 456
  %164 = mul i32 %163, 128
  %165 = add i32 %164, %162
  %166 = udiv i32 %165, 1
  %167 = urem i32 %166, 128
  %168 = udiv i32 %165, 128
  %169 = getelementptr inbounds float, ptr %arg1, i32 %165
  %170 = load float, ptr %169, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id231:                  ; preds = %concatenate.pivot.192.38
  %171 = phi i32 [ 192, %concatenate.pivot.192.38 ]
  %172 = sub nsw i32 %13, %171
  %173 = udiv i32 %linear_index3, 456
  %174 = mul i32 %173, 8
  %175 = add i32 %174, %172
  %176 = udiv i32 %175, 1
  %177 = urem i32 %176, 8
  %178 = udiv i32 %175, 8
  %179 = getelementptr inbounds float, ptr %arg2, i32 %175
  %180 = load float, ptr %179, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concat_index_from_operand_id332:                  ; preds = %concatenate.pivot.200.39
  %181 = phi i32 [ 200, %concatenate.pivot.200.39 ]
  %182 = sub nsw i32 %13, %181
  %183 = udiv i32 %linear_index3, 456
  %184 = mul i32 %183, 256
  %185 = add i32 %184, %182
  %186 = udiv i32 %185, 1
  %187 = urem i32 %186, 256
  %188 = udiv i32 %185, 256
  %189 = getelementptr inbounds float, ptr %arg3, i32 %185
  %190 = load float, ptr %189, align 4, !invariant.load !197
  br label %concatenate.5.merge28

concatenate.pivot.192.33:                         ; preds = %concatenate.5.merge16
  %191 = icmp ult i32 %13, 192
  br i1 %191, label %concatenate.pivot.64.34, label %concatenate.pivot.200.37

concatenate.pivot.64.34:                          ; preds = %concatenate.pivot.192.33
  %192 = icmp ult i32 %13, 64
  br i1 %192, label %concatenate.pivot.0.35, label %concatenate.pivot.64.36

concatenate.pivot.0.35:                           ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id029

concatenate.pivot.64.36:                          ; preds = %concatenate.pivot.64.34
  br label %concat_index_from_operand_id130

concatenate.pivot.200.37:                         ; preds = %concatenate.pivot.192.33
  %193 = icmp ult i32 %13, 200
  br i1 %193, label %concatenate.pivot.192.38, label %concatenate.pivot.200.39

concatenate.pivot.192.38:                         ; preds = %concatenate.pivot.200.37
  br label %concat_index_from_operand_id231

concatenate.pivot.200.39:                         ; preds = %concatenate.pivot.200.37
  br label %concat_index_from_operand_id332

concatenate.5.merge28:                            ; preds = %concat_index_from_operand_id332, %concat_index_from_operand_id231, %concat_index_from_operand_id130, %concat_index_from_operand_id029
  %194 = phi float [ %160, %concat_index_from_operand_id029 ], [ %170, %concat_index_from_operand_id130 ], [ %180, %concat_index_from_operand_id231 ], [ %190, %concat_index_from_operand_id332 ]
  %195 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %194, ptr %195, align 4
  br label %concatenate_299.in_bounds-after
}

define void @fusion_109(ptr noalias align 16 dereferenceable(8192) %arg0, ptr noalias align 128 dereferenceable(401408) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(8192) %arg3, ptr noalias align 128 dereferenceable(368640) %arg4, ptr noalias align 16 dereferenceable(8192) %arg5, ptr noalias align 128 dereferenceable(368640) %arg6, ptr noalias align 16 dereferenceable(8192) %arg7, ptr noalias align 128 dereferenceable(368640) %arg8, ptr noalias align 16 dereferenceable(8192) %arg9, ptr noalias align 128 dereferenceable(466944) %arg10, ptr noalias align 128 dereferenceable(8192) %arg11, ptr noalias align 128 dereferenceable(8192) %arg12, ptr noalias align 128 dereferenceable(8192) %arg13, ptr noalias align 128 dereferenceable(8192) %arg14, ptr noalias align 128 dereferenceable(8192) %arg15) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !192
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 2048
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 2048
  br i1 %6, label %fusion_109.in_bounds-true, label %fusion_109.in_bounds-after

fusion_109.in_bounds-after:                       ; preds = %fusion_109.in_bounds-true, %entry
  ret void

fusion_109.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 384
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [392 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.14 = fmul float %9, %13
  %subtract.15 = fsub float %8, %multiply.14
  %14 = insertvalue { float, float, float, float, float } undef, float %subtract.15, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 96
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [360 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.17 = fmul float %9, %20
  %subtract.18 = fsub float %16, %multiply.17
  %21 = insertvalue { float, float, float, float, float } %14, float %subtract.18, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 96
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [360 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.20 = fmul float %9, %27
  %subtract.21 = fsub float %23, %multiply.20
  %28 = insertvalue { float, float, float, float, float } %21, float %subtract.21, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 96
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [360 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.23 = fmul float %9, %34
  %subtract.24 = fsub float %30, %multiply.23
  %35 = insertvalue { float, float, float, float, float } %28, float %subtract.24, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 192
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [456 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.26 = fmul float %9, %41
  %subtract.27 = fsub float %37, %multiply.26
  %42 = insertvalue { float, float, float, float, float } %35, float %subtract.27, 4
  %43 = extractvalue { float, float, float, float, float } %42, 0
  %44 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  store float %43, ptr %44, align 4
  %45 = extractvalue { float, float, float, float, float } %42, 1
  %46 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %45, ptr %46, align 4
  %47 = extractvalue { float, float, float, float, float } %42, 2
  %48 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %47, ptr %48, align 4
  %49 = extractvalue { float, float, float, float, float } %42, 3
  %50 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  store float %49, ptr %50, align 4
  %51 = extractvalue { float, float, float, float, float } %42, 4
  %52 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  store float %51, ptr %52, align 4
  br label %fusion_109.in_bounds-after
}

define void @fusion_115(ptr noalias align 16 dereferenceable(131072) %arg0, ptr noalias align 128 dereferenceable(401408) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(131072) %arg3, ptr noalias align 16 dereferenceable(131072) %arg4, ptr noalias align 128 dereferenceable(458752) %arg5, ptr noalias align 16 dereferenceable(131072) %arg6, ptr noalias align 128 dereferenceable(458752) %arg7, ptr noalias align 16 dereferenceable(131072) %arg8, ptr noalias align 128 dereferenceable(466944) %arg9, ptr noalias align 16 dereferenceable(131072) %arg10, ptr noalias align 128 dereferenceable(458752) %arg11, ptr noalias align 16 dereferenceable(131072) %arg12, ptr noalias align 128 dereferenceable(458752) %arg13, ptr noalias align 16 dereferenceable(131072) %arg14, ptr noalias align 128 dereferenceable(458752) %arg15, ptr noalias align 128 dereferenceable(131072) %arg16, ptr noalias align 128 dereferenceable(131072) %arg17, ptr noalias align 128 dereferenceable(131072) %arg18, ptr noalias align 128 dereferenceable(131072) %arg19, ptr noalias align 128 dereferenceable(131072) %arg20, ptr noalias align 128 dereferenceable(131072) %arg21, ptr noalias align 128 dereferenceable(131072) %arg22, ptr noalias align 128 dereferenceable(131072) %arg23) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !378
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 32768
  br i1 %6, label %fusion_115.in_bounds-true, label %fusion_115.in_bounds-after

fusion_115.in_bounds-after:                       ; preds = %fusion_115.in_bounds-true, %entry
  ret void

fusion_115.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 64
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [392 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.19 = fmul float %9, %13
  %subtract.20 = fsub float %8, %multiply.19
  %14 = insertvalue { float, float, float, float, float, float, float, float } undef, float %subtract.20, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 192
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [392 x [256 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.22 = fmul float %9, %20
  %subtract.23 = fsub float %16, %multiply.22
  %21 = insertvalue { float, float, float, float, float, float, float, float } %14, float %subtract.23, 1
  %22 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 64
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [448 x [256 x float]], ptr %arg5, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.25 = fmul float %9, %27
  %subtract.26 = fsub float %23, %multiply.25
  %28 = insertvalue { float, float, float, float, float, float, float, float } %21, float %subtract.26, 2
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 64
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [448 x [256 x float]], ptr %arg7, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.28 = fmul float %9, %34
  %subtract.29 = fsub float %30, %multiply.28
  %35 = insertvalue { float, float, float, float, float, float, float, float } %28, float %subtract.29, 3
  %36 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 64
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [456 x [256 x float]], ptr %arg9, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.31 = fmul float %9, %41
  %subtract.32 = fsub float %37, %multiply.31
  %42 = insertvalue { float, float, float, float, float, float, float, float } %35, float %subtract.32, 4
  %43 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 64
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [448 x [256 x float]], ptr %arg11, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.34 = fmul float %9, %48
  %subtract.35 = fsub float %44, %multiply.34
  %49 = insertvalue { float, float, float, float, float, float, float, float } %42, float %subtract.35, 5
  %50 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 64
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [448 x [256 x float]], ptr %arg13, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.37 = fmul float %9, %55
  %subtract.38 = fsub float %51, %multiply.37
  %56 = insertvalue { float, float, float, float, float, float, float, float } %49, float %subtract.38, 6
  %57 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 64
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [448 x [256 x float]], ptr %arg15, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.40 = fmul float %9, %62
  %subtract.41 = fsub float %58, %multiply.40
  %63 = insertvalue { float, float, float, float, float, float, float, float } %56, float %subtract.41, 7
  %64 = extractvalue { float, float, float, float, float, float, float, float } %63, 0
  %65 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  store float %64, ptr %65, align 4
  %66 = extractvalue { float, float, float, float, float, float, float, float } %63, 1
  %67 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  store float %66, ptr %67, align 4
  %68 = extractvalue { float, float, float, float, float, float, float, float } %63, 2
  %69 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  store float %68, ptr %69, align 4
  %70 = extractvalue { float, float, float, float, float, float, float, float } %63, 3
  %71 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  store float %70, ptr %71, align 4
  %72 = extractvalue { float, float, float, float, float, float, float, float } %63, 4
  %73 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  store float %72, ptr %73, align 4
  %74 = extractvalue { float, float, float, float, float, float, float, float } %63, 5
  %75 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  store float %74, ptr %75, align 4
  %76 = extractvalue { float, float, float, float, float, float, float, float } %63, 6
  %77 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  store float %76, ptr %77, align 4
  %78 = extractvalue { float, float, float, float, float, float, float, float } %63, 7
  %79 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  store float %78, ptr %79, align 4
  br label %fusion_115.in_bounds-after
}

define void @fusion_116(ptr noalias align 16 dereferenceable(65536) %arg0, ptr noalias align 128 dereferenceable(401408) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(65536) %arg3, ptr noalias align 16 dereferenceable(65536) %arg4, ptr noalias align 128 dereferenceable(360448) %arg5, ptr noalias align 16 dereferenceable(65536) %arg6, ptr noalias align 128 dereferenceable(360448) %arg7, ptr noalias align 16 dereferenceable(65536) %arg8, ptr noalias align 128 dereferenceable(368640) %arg9, ptr noalias align 16 dereferenceable(65536) %arg10, ptr noalias align 128 dereferenceable(458752) %arg11, ptr noalias align 16 dereferenceable(65536) %arg12, ptr noalias align 128 dereferenceable(368640) %arg13, ptr noalias align 16 dereferenceable(65536) %arg14, ptr noalias align 128 dereferenceable(368640) %arg15, ptr noalias align 16 dereferenceable(65536) %arg16, ptr noalias align 128 dereferenceable(466944) %arg17, ptr noalias align 16 dereferenceable(65536) %arg18, ptr noalias align 128 dereferenceable(360448) %arg19, ptr noalias align 16 dereferenceable(65536) %arg20, ptr noalias align 128 dereferenceable(458752) %arg21, ptr noalias align 16 dereferenceable(65536) %arg22, ptr noalias align 128 dereferenceable(360448) %arg23, ptr noalias align 16 dereferenceable(65536) %arg24, ptr noalias align 128 dereferenceable(360448) %arg25, ptr noalias align 16 dereferenceable(65536) %arg26, ptr noalias align 128 dereferenceable(458752) %arg27, ptr noalias align 16 dereferenceable(65536) %arg28, ptr noalias align 128 dereferenceable(458752) %arg29, ptr noalias align 16 dereferenceable(65536) %arg30, ptr noalias align 128 dereferenceable(458752) %arg31, ptr noalias align 128 dereferenceable(65536) %arg32, ptr noalias align 128 dereferenceable(65536) %arg33, ptr noalias align 128 dereferenceable(65536) %arg34, ptr noalias align 128 dereferenceable(65536) %arg35, ptr noalias align 128 dereferenceable(65536) %arg36, ptr noalias align 128 dereferenceable(65536) %arg37, ptr noalias align 128 dereferenceable(65536) %arg38, ptr noalias align 128 dereferenceable(65536) %arg39, ptr noalias align 128 dereferenceable(65536) %arg40, ptr noalias align 128 dereferenceable(65536) %arg41, ptr noalias align 128 dereferenceable(65536) %arg42, ptr noalias align 128 dereferenceable(65536) %arg43, ptr noalias align 128 dereferenceable(65536) %arg44, ptr noalias align 128 dereferenceable(65536) %arg45, ptr noalias align 128 dereferenceable(65536) %arg46, ptr noalias align 128 dereferenceable(65536) %arg47) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !309
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 16384
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 16384
  br i1 %6, label %fusion_116.in_bounds-true, label %fusion_116.in_bounds-after

fusion_116.in_bounds-after:                       ; preds = %fusion_116.in_bounds-true, %entry
  ret void

fusion_116.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [392 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.35 = fmul float %9, %13
  %subtract.36 = fsub float %8, %multiply.35
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.36, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 320
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [392 x [256 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.38 = fmul float %9, %20
  %subtract.39 = fsub float %16, %multiply.38
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.39, 1
  %22 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 32
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [352 x [256 x float]], ptr %arg5, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.41 = fmul float %9, %27
  %subtract.42 = fsub float %23, %multiply.41
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.42, 2
  %29 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 32
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [352 x [256 x float]], ptr %arg7, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.44 = fmul float %9, %34
  %subtract.45 = fsub float %30, %multiply.44
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.45, 3
  %36 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 32
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [360 x [256 x float]], ptr %arg9, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.47 = fmul float %9, %41
  %subtract.48 = fsub float %37, %multiply.47
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.48, 4
  %43 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [448 x [256 x float]], ptr %arg11, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.50 = fmul float %9, %48
  %subtract.51 = fsub float %44, %multiply.50
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.51, 5
  %50 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 32
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [360 x [256 x float]], ptr %arg13, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.53 = fmul float %9, %55
  %subtract.54 = fsub float %51, %multiply.53
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.54, 6
  %57 = getelementptr inbounds float, ptr %arg14, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 32
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [360 x [256 x float]], ptr %arg15, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.56 = fmul float %9, %62
  %subtract.57 = fsub float %58, %multiply.56
  %63 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.57, 7
  %64 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %66 = add i32 %5, 0
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [456 x [256 x float]], ptr %arg17, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %multiply.59 = fmul float %9, %69
  %subtract.60 = fsub float %65, %multiply.59
  %70 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %63, float %subtract.60, 8
  %71 = getelementptr inbounds float, ptr %arg18, i32 %linear_index
  %72 = load float, ptr %71, align 4, !invariant.load !197
  %73 = add i32 %5, 32
  %74 = add i32 %4, 0
  %75 = getelementptr inbounds [352 x [256 x float]], ptr %arg19, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %multiply.62 = fmul float %9, %76
  %subtract.63 = fsub float %72, %multiply.62
  %77 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %70, float %subtract.63, 9
  %78 = getelementptr inbounds float, ptr %arg20, i32 %linear_index
  %79 = load float, ptr %78, align 4, !invariant.load !197
  %80 = add i32 %5, 0
  %81 = add i32 %4, 0
  %82 = getelementptr inbounds [448 x [256 x float]], ptr %arg21, i32 0, i32 %80, i32 %81
  %83 = load float, ptr %82, align 4, !invariant.load !197
  %multiply.65 = fmul float %9, %83
  %subtract.66 = fsub float %79, %multiply.65
  %84 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %77, float %subtract.66, 10
  %85 = getelementptr inbounds float, ptr %arg22, i32 %linear_index
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %87 = add i32 %5, 32
  %88 = add i32 %4, 0
  %89 = getelementptr inbounds [352 x [256 x float]], ptr %arg23, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %multiply.68 = fmul float %9, %90
  %subtract.69 = fsub float %86, %multiply.68
  %91 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %84, float %subtract.69, 11
  %92 = getelementptr inbounds float, ptr %arg24, i32 %linear_index
  %93 = load float, ptr %92, align 4, !invariant.load !197
  %94 = add i32 %5, 32
  %95 = add i32 %4, 0
  %96 = getelementptr inbounds [352 x [256 x float]], ptr %arg25, i32 0, i32 %94, i32 %95
  %97 = load float, ptr %96, align 4, !invariant.load !197
  %multiply.71 = fmul float %9, %97
  %subtract.72 = fsub float %93, %multiply.71
  %98 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %91, float %subtract.72, 12
  %99 = getelementptr inbounds float, ptr %arg26, i32 %linear_index
  %100 = load float, ptr %99, align 4, !invariant.load !197
  %101 = add i32 %5, 0
  %102 = add i32 %4, 0
  %103 = getelementptr inbounds [448 x [256 x float]], ptr %arg27, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %multiply.74 = fmul float %9, %104
  %subtract.75 = fsub float %100, %multiply.74
  %105 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %98, float %subtract.75, 13
  %106 = getelementptr inbounds float, ptr %arg28, i32 %linear_index
  %107 = load float, ptr %106, align 4, !invariant.load !197
  %108 = add i32 %5, 0
  %109 = add i32 %4, 0
  %110 = getelementptr inbounds [448 x [256 x float]], ptr %arg29, i32 0, i32 %108, i32 %109
  %111 = load float, ptr %110, align 4, !invariant.load !197
  %multiply.77 = fmul float %9, %111
  %subtract.78 = fsub float %107, %multiply.77
  %112 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %105, float %subtract.78, 14
  %113 = getelementptr inbounds float, ptr %arg30, i32 %linear_index
  %114 = load float, ptr %113, align 4, !invariant.load !197
  %115 = add i32 %5, 0
  %116 = add i32 %4, 0
  %117 = getelementptr inbounds [448 x [256 x float]], ptr %arg31, i32 0, i32 %115, i32 %116
  %118 = load float, ptr %117, align 4, !invariant.load !197
  %multiply.80 = fmul float %9, %118
  %subtract.81 = fsub float %114, %multiply.80
  %119 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, float %subtract.81, 15
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 0
  %121 = getelementptr inbounds float, ptr %arg32, i32 %linear_index
  store float %120, ptr %121, align 4
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 1
  %123 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  store float %122, ptr %123, align 4
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 2
  %125 = getelementptr inbounds float, ptr %arg34, i32 %linear_index
  store float %124, ptr %125, align 4
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 3
  %127 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  store float %126, ptr %127, align 4
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 4
  %129 = getelementptr inbounds float, ptr %arg36, i32 %linear_index
  store float %128, ptr %129, align 4
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 5
  %131 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  store float %130, ptr %131, align 4
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 6
  %133 = getelementptr inbounds float, ptr %arg38, i32 %linear_index
  store float %132, ptr %133, align 4
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 7
  %135 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  store float %134, ptr %135, align 4
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 8
  %137 = getelementptr inbounds float, ptr %arg40, i32 %linear_index
  store float %136, ptr %137, align 4
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 9
  %139 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 10
  %141 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 11
  %143 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 12
  %145 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 13
  %147 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 14
  %149 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 15
  %151 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %150, ptr %151, align 4
  br label %fusion_116.in_bounds-after
}

define void @fusion_361(ptr noalias align 16 dereferenceable(262144) %arg0, ptr noalias align 128 dereferenceable(360448) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(360448) %arg4, ptr noalias align 16 dereferenceable(262144) %arg5, ptr noalias align 128 dereferenceable(368640) %arg6, ptr noalias align 16 dereferenceable(262144) %arg7, ptr noalias align 128 dereferenceable(458752) %arg8, ptr noalias align 16 dereferenceable(262144) %arg9, ptr noalias align 128 dereferenceable(368640) %arg10, ptr noalias align 16 dereferenceable(262144) %arg11, ptr noalias align 128 dereferenceable(368640) %arg12, ptr noalias align 16 dereferenceable(262144) %arg13, ptr noalias align 128 dereferenceable(466944) %arg14, ptr noalias align 16 dereferenceable(262144) %arg15, ptr noalias align 128 dereferenceable(262144) %arg16, ptr noalias align 16 dereferenceable(262144) %arg17, ptr noalias align 128 dereferenceable(360448) %arg18, ptr noalias align 16 dereferenceable(262144) %arg19, ptr noalias align 128 dereferenceable(311296) %arg20, ptr noalias align 16 dereferenceable(262144) %arg21, ptr noalias align 128 dereferenceable(311296) %arg22, ptr noalias align 16 dereferenceable(262144) %arg23, ptr noalias align 128 dereferenceable(458752) %arg24, ptr noalias align 16 dereferenceable(262144) %arg25, ptr noalias align 128 dereferenceable(311296) %arg26, ptr noalias align 16 dereferenceable(262144) %arg27, ptr noalias align 128 dereferenceable(360448) %arg28, ptr noalias align 16 dereferenceable(262144) %arg29, ptr noalias align 128 dereferenceable(311296) %arg30, ptr noalias align 16 dereferenceable(262144) %arg31, ptr noalias align 128 dereferenceable(311296) %arg32, ptr noalias align 16 dereferenceable(262144) %arg33, ptr noalias align 128 dereferenceable(360448) %arg34, ptr noalias align 16 dereferenceable(262144) %arg35, ptr noalias align 128 dereferenceable(458752) %arg36, ptr noalias align 16 dereferenceable(262144) %arg37, ptr noalias align 128 dereferenceable(458752) %arg38, ptr noalias align 16 dereferenceable(262144) %arg39, ptr noalias align 128 dereferenceable(458752) %arg40, ptr noalias align 128 dereferenceable(262144) %arg41, ptr noalias align 128 dereferenceable(262144) %arg42, ptr noalias align 128 dereferenceable(262144) %arg43, ptr noalias align 128 dereferenceable(262144) %arg44, ptr noalias align 128 dereferenceable(262144) %arg45, ptr noalias align 128 dereferenceable(262144) %arg46, ptr noalias align 128 dereferenceable(262144) %arg47, ptr noalias align 128 dereferenceable(262144) %arg48, ptr noalias align 128 dereferenceable(262144) %arg49, ptr noalias align 128 dereferenceable(262144) %arg50, ptr noalias align 128 dereferenceable(262144) %arg51, ptr noalias align 128 dereferenceable(262144) %arg52, ptr noalias align 128 dereferenceable(262144) %arg53, ptr noalias align 128 dereferenceable(262144) %arg54, ptr noalias align 128 dereferenceable(262144) %arg55, ptr noalias align 128 dereferenceable(262144) %arg56, ptr noalias align 128 dereferenceable(262144) %arg57, ptr noalias align 128 dereferenceable(262144) %arg58, ptr noalias align 128 dereferenceable(262144) %arg59, ptr noalias align 128 dereferenceable(262144) %arg60) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !346
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 256
  %5 = udiv i32 %linear_index, 256
  %6 = icmp ult i32 %linear_index, 65536
  br i1 %6, label %fusion_361.in_bounds-true, label %fusion_361.in_bounds-after

fusion_361.in_bounds-after:                       ; preds = %fusion_361.in_bounds-true, %entry
  ret void

fusion_361.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 96
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [352 x [256 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.44 = fmul float %9, %13
  %subtract.45 = fsub float %8, %multiply.44
  %14 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } undef, float %subtract.45, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 96
  %18 = add i32 %4, 0
  %19 = getelementptr inbounds [352 x [256 x float]], ptr %arg4, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.47 = fmul float %9, %20
  %subtract.48 = fsub float %16, %multiply.47
  %21 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %14, float %subtract.48, 1
  %22 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %23 = load float, ptr %22, align 4, !invariant.load !197
  %24 = add i32 %5, 104
  %25 = add i32 %4, 0
  %26 = getelementptr inbounds [360 x [256 x float]], ptr %arg6, i32 0, i32 %24, i32 %25
  %27 = load float, ptr %26, align 4, !invariant.load !197
  %multiply.50 = fmul float %9, %27
  %subtract.51 = fsub float %23, %multiply.50
  %28 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %21, float %subtract.51, 2
  %29 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %31 = add i32 %5, 192
  %32 = add i32 %4, 0
  %33 = getelementptr inbounds [448 x [256 x float]], ptr %arg8, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %multiply.53 = fmul float %9, %34
  %subtract.54 = fsub float %30, %multiply.53
  %35 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %28, float %subtract.54, 3
  %36 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %38 = add i32 %5, 104
  %39 = add i32 %4, 0
  %40 = getelementptr inbounds [360 x [256 x float]], ptr %arg10, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %multiply.56 = fmul float %9, %41
  %subtract.57 = fsub float %37, %multiply.56
  %42 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %35, float %subtract.57, 4
  %43 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 104
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [360 x [256 x float]], ptr %arg12, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.59 = fmul float %9, %48
  %subtract.60 = fsub float %44, %multiply.59
  %49 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %42, float %subtract.60, 5
  %50 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 200
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [456 x [256 x float]], ptr %arg14, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.62 = fmul float %9, %55
  %subtract.63 = fsub float %51, %multiply.62
  %56 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %49, float %subtract.63, 6
  %57 = getelementptr inbounds float, ptr %arg15, i32 %linear_index
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = getelementptr inbounds float, ptr %arg16, i32 %linear_index
  %60 = load float, ptr %59, align 4, !invariant.load !197
  %multiply.64 = fmul float %9, %60
  %subtract.65 = fsub float %58, %multiply.64
  %61 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %56, float %subtract.65, 7
  %62 = getelementptr inbounds float, ptr %arg17, i32 %linear_index
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %64 = add i32 %5, 96
  %65 = add i32 %4, 0
  %66 = getelementptr inbounds [352 x [256 x float]], ptr %arg18, i32 0, i32 %64, i32 %65
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %multiply.67 = fmul float %9, %67
  %subtract.68 = fsub float %63, %multiply.67
  %68 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %61, float %subtract.68, 8
  %69 = getelementptr inbounds float, ptr %arg19, i32 %linear_index
  %70 = load float, ptr %69, align 4, !invariant.load !197
  %71 = add i32 %5, 48
  %72 = add i32 %4, 0
  %73 = getelementptr inbounds [304 x [256 x float]], ptr %arg20, i32 0, i32 %71, i32 %72
  %74 = load float, ptr %73, align 4, !invariant.load !197
  %multiply.70 = fmul float %9, %74
  %subtract.71 = fsub float %70, %multiply.70
  %75 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %68, float %subtract.71, 9
  %76 = getelementptr inbounds float, ptr %arg21, i32 %linear_index
  %77 = load float, ptr %76, align 4, !invariant.load !197
  %78 = add i32 %5, 48
  %79 = add i32 %4, 0
  %80 = getelementptr inbounds [304 x [256 x float]], ptr %arg22, i32 0, i32 %78, i32 %79
  %81 = load float, ptr %80, align 4, !invariant.load !197
  %multiply.73 = fmul float %9, %81
  %subtract.74 = fsub float %77, %multiply.73
  %82 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %75, float %subtract.74, 10
  %83 = getelementptr inbounds float, ptr %arg23, i32 %linear_index
  %84 = load float, ptr %83, align 4, !invariant.load !197
  %85 = add i32 %5, 192
  %86 = add i32 %4, 0
  %87 = getelementptr inbounds [448 x [256 x float]], ptr %arg24, i32 0, i32 %85, i32 %86
  %88 = load float, ptr %87, align 4, !invariant.load !197
  %multiply.76 = fmul float %9, %88
  %subtract.77 = fsub float %84, %multiply.76
  %89 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %82, float %subtract.77, 11
  %90 = getelementptr inbounds float, ptr %arg25, i32 %linear_index
  %91 = load float, ptr %90, align 4, !invariant.load !197
  %92 = add i32 %5, 48
  %93 = add i32 %4, 0
  %94 = getelementptr inbounds [304 x [256 x float]], ptr %arg26, i32 0, i32 %92, i32 %93
  %95 = load float, ptr %94, align 4, !invariant.load !197
  %multiply.79 = fmul float %9, %95
  %subtract.80 = fsub float %91, %multiply.79
  %96 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %89, float %subtract.80, 12
  %97 = getelementptr inbounds float, ptr %arg27, i32 %linear_index
  %98 = load float, ptr %97, align 4, !invariant.load !197
  %99 = add i32 %5, 96
  %100 = add i32 %4, 0
  %101 = getelementptr inbounds [352 x [256 x float]], ptr %arg28, i32 0, i32 %99, i32 %100
  %102 = load float, ptr %101, align 4, !invariant.load !197
  %multiply.82 = fmul float %9, %102
  %subtract.83 = fsub float %98, %multiply.82
  %103 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %96, float %subtract.83, 13
  %104 = getelementptr inbounds float, ptr %arg29, i32 %linear_index
  %105 = load float, ptr %104, align 4, !invariant.load !197
  %106 = add i32 %5, 48
  %107 = add i32 %4, 0
  %108 = getelementptr inbounds [304 x [256 x float]], ptr %arg30, i32 0, i32 %106, i32 %107
  %109 = load float, ptr %108, align 4, !invariant.load !197
  %multiply.85 = fmul float %9, %109
  %subtract.86 = fsub float %105, %multiply.85
  %110 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %103, float %subtract.86, 14
  %111 = getelementptr inbounds float, ptr %arg31, i32 %linear_index
  %112 = load float, ptr %111, align 4, !invariant.load !197
  %113 = add i32 %5, 48
  %114 = add i32 %4, 0
  %115 = getelementptr inbounds [304 x [256 x float]], ptr %arg32, i32 0, i32 %113, i32 %114
  %116 = load float, ptr %115, align 4, !invariant.load !197
  %multiply.88 = fmul float %9, %116
  %subtract.89 = fsub float %112, %multiply.88
  %117 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, float %subtract.89, 15
  %118 = getelementptr inbounds float, ptr %arg33, i32 %linear_index
  %119 = load float, ptr %118, align 4, !invariant.load !197
  %120 = add i32 %5, 96
  %121 = add i32 %4, 0
  %122 = getelementptr inbounds [352 x [256 x float]], ptr %arg34, i32 0, i32 %120, i32 %121
  %123 = load float, ptr %122, align 4, !invariant.load !197
  %multiply.91 = fmul float %9, %123
  %subtract.92 = fsub float %119, %multiply.91
  %124 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %117, float %subtract.92, 16
  %125 = getelementptr inbounds float, ptr %arg35, i32 %linear_index
  %126 = load float, ptr %125, align 4, !invariant.load !197
  %127 = add i32 %5, 192
  %128 = add i32 %4, 0
  %129 = getelementptr inbounds [448 x [256 x float]], ptr %arg36, i32 0, i32 %127, i32 %128
  %130 = load float, ptr %129, align 4, !invariant.load !197
  %multiply.94 = fmul float %9, %130
  %subtract.95 = fsub float %126, %multiply.94
  %131 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, float %subtract.95, 17
  %132 = getelementptr inbounds float, ptr %arg37, i32 %linear_index
  %133 = load float, ptr %132, align 4, !invariant.load !197
  %134 = add i32 %5, 192
  %135 = add i32 %4, 0
  %136 = getelementptr inbounds [448 x [256 x float]], ptr %arg38, i32 0, i32 %134, i32 %135
  %137 = load float, ptr %136, align 4, !invariant.load !197
  %multiply.97 = fmul float %9, %137
  %subtract.98 = fsub float %133, %multiply.97
  %138 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, float %subtract.98, 18
  %139 = getelementptr inbounds float, ptr %arg39, i32 %linear_index
  %140 = load float, ptr %139, align 4, !invariant.load !197
  %141 = add i32 %5, 192
  %142 = add i32 %4, 0
  %143 = getelementptr inbounds [448 x [256 x float]], ptr %arg40, i32 0, i32 %141, i32 %142
  %144 = load float, ptr %143, align 4, !invariant.load !197
  %multiply.100 = fmul float %9, %144
  %subtract.101 = fsub float %140, %multiply.100
  %145 = insertvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, float %subtract.101, 19
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 0
  %147 = getelementptr inbounds float, ptr %arg41, i32 %linear_index
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 1
  %149 = getelementptr inbounds float, ptr %arg42, i32 %linear_index
  store float %148, ptr %149, align 4
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 2
  %151 = getelementptr inbounds float, ptr %arg43, i32 %linear_index
  store float %150, ptr %151, align 4
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 3
  %153 = getelementptr inbounds float, ptr %arg44, i32 %linear_index
  store float %152, ptr %153, align 4
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 4
  %155 = getelementptr inbounds float, ptr %arg45, i32 %linear_index
  store float %154, ptr %155, align 4
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 5
  %157 = getelementptr inbounds float, ptr %arg46, i32 %linear_index
  store float %156, ptr %157, align 4
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 6
  %159 = getelementptr inbounds float, ptr %arg47, i32 %linear_index
  store float %158, ptr %159, align 4
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 7
  %161 = getelementptr inbounds float, ptr %arg48, i32 %linear_index
  store float %160, ptr %161, align 4
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 8
  %163 = getelementptr inbounds float, ptr %arg49, i32 %linear_index
  store float %162, ptr %163, align 4
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 9
  %165 = getelementptr inbounds float, ptr %arg50, i32 %linear_index
  store float %164, ptr %165, align 4
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 10
  %167 = getelementptr inbounds float, ptr %arg51, i32 %linear_index
  store float %166, ptr %167, align 4
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 11
  %169 = getelementptr inbounds float, ptr %arg52, i32 %linear_index
  store float %168, ptr %169, align 4
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 12
  %171 = getelementptr inbounds float, ptr %arg53, i32 %linear_index
  store float %170, ptr %171, align 4
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 13
  %173 = getelementptr inbounds float, ptr %arg54, i32 %linear_index
  store float %172, ptr %173, align 4
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 14
  %175 = getelementptr inbounds float, ptr %arg55, i32 %linear_index
  store float %174, ptr %175, align 4
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 15
  %177 = getelementptr inbounds float, ptr %arg56, i32 %linear_index
  store float %176, ptr %177, align 4
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 16
  %179 = getelementptr inbounds float, ptr %arg57, i32 %linear_index
  store float %178, ptr %179, align 4
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 17
  %181 = getelementptr inbounds float, ptr %arg58, i32 %linear_index
  store float %180, ptr %181, align 4
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 18
  %183 = getelementptr inbounds float, ptr %arg59, i32 %linear_index
  store float %182, ptr %183, align 4
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 19
  %185 = getelementptr inbounds float, ptr %arg60, i32 %linear_index
  store float %184, ptr %185, align 4
  br label %fusion_361.in_bounds-after
}

define void @fusion_545(ptr noalias align 128 dereferenceable(16777216) %arg0, ptr noalias align 128 dereferenceable(196608) %arg1, ptr noalias align 128 dereferenceable(196608) %arg2, ptr noalias align 128 dereferenceable(17170432) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !380
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1073152
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 524
  %5 = udiv i32 %linear_index_base, 524
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 524
  %8 = udiv i32 %linear_index1, 524
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 524
  %11 = udiv i32 %linear_index2, 524
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 524
  %14 = udiv i32 %linear_index3, 524
  %15 = icmp ult i32 %linear_index_base, 4292608
  br i1 %15, label %fusion_545.in_bounds-true, label %fusion_545.in_bounds-after

fusion_545.in_bounds-after:                       ; preds = %concatenate.6.merge21, %entry
  ret void

fusion_545.in_bounds-true:                        ; preds = %entry
  br label %concatenate.pivot.512.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 524
  %19 = mul i32 %18, 512
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 512
  %23 = udiv i32 %20, 512
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.512.1
  %26 = phi i32 [ 512, %concatenate.pivot.512.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 524
  %29 = mul i32 %28, 6
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 6
  %33 = udiv i32 %30, 6
  %34 = getelementptr inbounds float, ptr %arg2, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.6.merge

concat_index_from_operand_id2:                    ; preds = %concatenate.pivot.518.2
  %36 = phi i32 [ 518, %concatenate.pivot.518.2 ]
  %37 = sub nsw i32 %4, %36
  %38 = udiv i32 %linear_index_base, 524
  %39 = mul i32 %38, 6
  %40 = add i32 %39, %37
  %41 = udiv i32 %40, 1
  %42 = urem i32 %41, 6
  %43 = udiv i32 %40, 6
  %44 = getelementptr inbounds float, ptr %arg1, i32 %40
  %45 = load float, ptr %44, align 4, !invariant.load !197
  br label %concatenate.6.merge

concatenate.pivot.512.:                           ; preds = %fusion_545.in_bounds-true
  %46 = icmp ult i32 %4, 512
  br i1 %46, label %concatenate.pivot.0., label %concatenate.pivot.518.

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.512.
  br label %concat_index_from_operand_id0

concatenate.pivot.518.:                           ; preds = %concatenate.pivot.512.
  %47 = icmp ult i32 %4, 518
  br i1 %47, label %concatenate.pivot.512.1, label %concatenate.pivot.518.2

concatenate.pivot.512.1:                          ; preds = %concatenate.pivot.518.
  br label %concat_index_from_operand_id1

concatenate.pivot.518.2:                          ; preds = %concatenate.pivot.518.
  br label %concat_index_from_operand_id2

concatenate.6.merge:                              ; preds = %concat_index_from_operand_id2, %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %48 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ], [ %45, %concat_index_from_operand_id2 ]
  %49 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %48, ptr %49, align 4
  br label %concatenate.pivot.512.7

concat_index_from_operand_id04:                   ; preds = %concatenate.pivot.0.8
  %50 = phi i32 [ 0, %concatenate.pivot.0.8 ]
  %51 = sub nsw i32 %7, %50
  %52 = udiv i32 %linear_index1, 524
  %53 = mul i32 %52, 512
  %54 = add i32 %53, %51
  %55 = udiv i32 %54, 1
  %56 = urem i32 %55, 512
  %57 = udiv i32 %54, 512
  %58 = getelementptr inbounds float, ptr %arg0, i32 %54
  %59 = load float, ptr %58, align 4, !invariant.load !197
  br label %concatenate.6.merge3

concat_index_from_operand_id15:                   ; preds = %concatenate.pivot.512.10
  %60 = phi i32 [ 512, %concatenate.pivot.512.10 ]
  %61 = sub nsw i32 %7, %60
  %62 = udiv i32 %linear_index1, 524
  %63 = mul i32 %62, 6
  %64 = add i32 %63, %61
  %65 = udiv i32 %64, 1
  %66 = urem i32 %65, 6
  %67 = udiv i32 %64, 6
  %68 = getelementptr inbounds float, ptr %arg2, i32 %64
  %69 = load float, ptr %68, align 4, !invariant.load !197
  br label %concatenate.6.merge3

concat_index_from_operand_id26:                   ; preds = %concatenate.pivot.518.11
  %70 = phi i32 [ 518, %concatenate.pivot.518.11 ]
  %71 = sub nsw i32 %7, %70
  %72 = udiv i32 %linear_index1, 524
  %73 = mul i32 %72, 6
  %74 = add i32 %73, %71
  %75 = udiv i32 %74, 1
  %76 = urem i32 %75, 6
  %77 = udiv i32 %74, 6
  %78 = getelementptr inbounds float, ptr %arg1, i32 %74
  %79 = load float, ptr %78, align 4, !invariant.load !197
  br label %concatenate.6.merge3

concatenate.pivot.512.7:                          ; preds = %concatenate.6.merge
  %80 = icmp ult i32 %7, 512
  br i1 %80, label %concatenate.pivot.0.8, label %concatenate.pivot.518.9

concatenate.pivot.0.8:                            ; preds = %concatenate.pivot.512.7
  br label %concat_index_from_operand_id04

concatenate.pivot.518.9:                          ; preds = %concatenate.pivot.512.7
  %81 = icmp ult i32 %7, 518
  br i1 %81, label %concatenate.pivot.512.10, label %concatenate.pivot.518.11

concatenate.pivot.512.10:                         ; preds = %concatenate.pivot.518.9
  br label %concat_index_from_operand_id15

concatenate.pivot.518.11:                         ; preds = %concatenate.pivot.518.9
  br label %concat_index_from_operand_id26

concatenate.6.merge3:                             ; preds = %concat_index_from_operand_id26, %concat_index_from_operand_id15, %concat_index_from_operand_id04
  %82 = phi float [ %59, %concat_index_from_operand_id04 ], [ %69, %concat_index_from_operand_id15 ], [ %79, %concat_index_from_operand_id26 ]
  %83 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %82, ptr %83, align 4
  br label %concatenate.pivot.512.16

concat_index_from_operand_id013:                  ; preds = %concatenate.pivot.0.17
  %84 = phi i32 [ 0, %concatenate.pivot.0.17 ]
  %85 = sub nsw i32 %10, %84
  %86 = udiv i32 %linear_index2, 524
  %87 = mul i32 %86, 512
  %88 = add i32 %87, %85
  %89 = udiv i32 %88, 1
  %90 = urem i32 %89, 512
  %91 = udiv i32 %88, 512
  %92 = getelementptr inbounds float, ptr %arg0, i32 %88
  %93 = load float, ptr %92, align 4, !invariant.load !197
  br label %concatenate.6.merge12

concat_index_from_operand_id114:                  ; preds = %concatenate.pivot.512.19
  %94 = phi i32 [ 512, %concatenate.pivot.512.19 ]
  %95 = sub nsw i32 %10, %94
  %96 = udiv i32 %linear_index2, 524
  %97 = mul i32 %96, 6
  %98 = add i32 %97, %95
  %99 = udiv i32 %98, 1
  %100 = urem i32 %99, 6
  %101 = udiv i32 %98, 6
  %102 = getelementptr inbounds float, ptr %arg2, i32 %98
  %103 = load float, ptr %102, align 4, !invariant.load !197
  br label %concatenate.6.merge12

concat_index_from_operand_id215:                  ; preds = %concatenate.pivot.518.20
  %104 = phi i32 [ 518, %concatenate.pivot.518.20 ]
  %105 = sub nsw i32 %10, %104
  %106 = udiv i32 %linear_index2, 524
  %107 = mul i32 %106, 6
  %108 = add i32 %107, %105
  %109 = udiv i32 %108, 1
  %110 = urem i32 %109, 6
  %111 = udiv i32 %108, 6
  %112 = getelementptr inbounds float, ptr %arg1, i32 %108
  %113 = load float, ptr %112, align 4, !invariant.load !197
  br label %concatenate.6.merge12

concatenate.pivot.512.16:                         ; preds = %concatenate.6.merge3
  %114 = icmp ult i32 %10, 512
  br i1 %114, label %concatenate.pivot.0.17, label %concatenate.pivot.518.18

concatenate.pivot.0.17:                           ; preds = %concatenate.pivot.512.16
  br label %concat_index_from_operand_id013

concatenate.pivot.518.18:                         ; preds = %concatenate.pivot.512.16
  %115 = icmp ult i32 %10, 518
  br i1 %115, label %concatenate.pivot.512.19, label %concatenate.pivot.518.20

concatenate.pivot.512.19:                         ; preds = %concatenate.pivot.518.18
  br label %concat_index_from_operand_id114

concatenate.pivot.518.20:                         ; preds = %concatenate.pivot.518.18
  br label %concat_index_from_operand_id215

concatenate.6.merge12:                            ; preds = %concat_index_from_operand_id215, %concat_index_from_operand_id114, %concat_index_from_operand_id013
  %116 = phi float [ %93, %concat_index_from_operand_id013 ], [ %103, %concat_index_from_operand_id114 ], [ %113, %concat_index_from_operand_id215 ]
  %117 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %116, ptr %117, align 4
  br label %concatenate.pivot.512.25

concat_index_from_operand_id022:                  ; preds = %concatenate.pivot.0.26
  %118 = phi i32 [ 0, %concatenate.pivot.0.26 ]
  %119 = sub nsw i32 %13, %118
  %120 = udiv i32 %linear_index3, 524
  %121 = mul i32 %120, 512
  %122 = add i32 %121, %119
  %123 = udiv i32 %122, 1
  %124 = urem i32 %123, 512
  %125 = udiv i32 %122, 512
  %126 = getelementptr inbounds float, ptr %arg0, i32 %122
  %127 = load float, ptr %126, align 4, !invariant.load !197
  br label %concatenate.6.merge21

concat_index_from_operand_id123:                  ; preds = %concatenate.pivot.512.28
  %128 = phi i32 [ 512, %concatenate.pivot.512.28 ]
  %129 = sub nsw i32 %13, %128
  %130 = udiv i32 %linear_index3, 524
  %131 = mul i32 %130, 6
  %132 = add i32 %131, %129
  %133 = udiv i32 %132, 1
  %134 = urem i32 %133, 6
  %135 = udiv i32 %132, 6
  %136 = getelementptr inbounds float, ptr %arg2, i32 %132
  %137 = load float, ptr %136, align 4, !invariant.load !197
  br label %concatenate.6.merge21

concat_index_from_operand_id224:                  ; preds = %concatenate.pivot.518.29
  %138 = phi i32 [ 518, %concatenate.pivot.518.29 ]
  %139 = sub nsw i32 %13, %138
  %140 = udiv i32 %linear_index3, 524
  %141 = mul i32 %140, 6
  %142 = add i32 %141, %139
  %143 = udiv i32 %142, 1
  %144 = urem i32 %143, 6
  %145 = udiv i32 %142, 6
  %146 = getelementptr inbounds float, ptr %arg1, i32 %142
  %147 = load float, ptr %146, align 4, !invariant.load !197
  br label %concatenate.6.merge21

concatenate.pivot.512.25:                         ; preds = %concatenate.6.merge12
  %148 = icmp ult i32 %13, 512
  br i1 %148, label %concatenate.pivot.0.26, label %concatenate.pivot.518.27

concatenate.pivot.0.26:                           ; preds = %concatenate.pivot.512.25
  br label %concat_index_from_operand_id022

concatenate.pivot.518.27:                         ; preds = %concatenate.pivot.512.25
  %149 = icmp ult i32 %13, 518
  br i1 %149, label %concatenate.pivot.512.28, label %concatenate.pivot.518.29

concatenate.pivot.512.28:                         ; preds = %concatenate.pivot.518.27
  br label %concat_index_from_operand_id123

concatenate.pivot.518.29:                         ; preds = %concatenate.pivot.518.27
  br label %concat_index_from_operand_id224

concatenate.6.merge21:                            ; preds = %concat_index_from_operand_id224, %concat_index_from_operand_id123, %concat_index_from_operand_id022
  %150 = phi float [ %127, %concat_index_from_operand_id022 ], [ %137, %concat_index_from_operand_id123 ], [ %147, %concat_index_from_operand_id224 ]
  %151 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %150, ptr %151, align 4
  br label %fusion_545.in_bounds-after
}

define void @fusion_3(ptr noalias align 16 dereferenceable(3072) %arg0, ptr noalias align 128 dereferenceable(268288) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(3072) %arg3, ptr noalias align 128 dereferenceable(3072) %arg4, ptr noalias align 128 dereferenceable(3072) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !194
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !381
  %2 = mul nuw nsw i32 %0, 768
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 768
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 6
  %5 = udiv i32 %linear_index, 6
  %6 = icmp ult i32 %linear_index, 768
  br i1 %6, label %fusion_3.in_bounds-true, label %fusion_3.in_bounds-after

fusion_3.in_bounds-after:                         ; preds = %fusion_3.in_bounds-true, %entry
  ret void

fusion_3.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 512
  %12 = getelementptr inbounds [128 x [524 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.7 = fmul float %9, %13
  %subtract.8 = fsub float %8, %multiply.7
  %14 = insertvalue { float, float } undef, float %subtract.8, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = add i32 %5, 0
  %18 = add i32 %4, 518
  %19 = getelementptr inbounds [128 x [524 x float]], ptr %arg1, i32 0, i32 %17, i32 %18
  %20 = load float, ptr %19, align 4, !invariant.load !197
  %multiply.10 = fmul float %9, %20
  %subtract.11 = fsub float %16, %multiply.10
  %21 = insertvalue { float, float } %14, float %subtract.11, 1
  %22 = extractvalue { float, float } %21, 0
  %23 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %22, ptr %23, align 4
  %24 = extractvalue { float, float } %21, 1
  %25 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  store float %24, ptr %25, align 4
  br label %fusion_3.in_bounds-after
}

define void @fusion_28(ptr noalias align 16 dereferenceable(262144) %arg0, ptr noalias align 128 dereferenceable(268288) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(262144) %arg3, ptr noalias align 128 dereferenceable(262144) %arg4, ptr noalias align 16 dereferenceable(262144) %arg5, ptr noalias align 128 dereferenceable(262144) %arg6, ptr noalias align 16 dereferenceable(262144) %arg7, ptr noalias align 128 dereferenceable(262144) %arg8, ptr noalias align 16 dereferenceable(262144) %arg9, ptr noalias align 128 dereferenceable(262144) %arg10, ptr noalias align 16 dereferenceable(262144) %arg11, ptr noalias align 128 dereferenceable(262144) %arg12, ptr noalias align 128 dereferenceable(262144) %arg13) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !346
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 65536
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 512
  %5 = udiv i32 %linear_index, 512
  %6 = icmp ult i32 %linear_index, 65536
  br i1 %6, label %fusion_28.in_bounds-true, label %fusion_28.in_bounds-after

fusion_28.in_bounds-after:                        ; preds = %fusion_28.in_bounds-true, %entry
  ret void

fusion_28.in_bounds-true:                         ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [128 x [524 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.16 = fmul float %9, %13
  %subtract.17 = fsub float %8, %multiply.16
  %14 = insertvalue { float, float, float, float, float, float } undef, float %subtract.17, 0
  %15 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  %16 = load float, ptr %15, align 4, !invariant.load !197
  %17 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  %18 = load float, ptr %17, align 4
  %multiply.18 = fmul float %9, %18
  %subtract.19 = fsub float %16, %multiply.18
  %19 = insertvalue { float, float, float, float, float, float } %14, float %subtract.19, 1
  %20 = getelementptr inbounds float, ptr %arg5, i32 %linear_index
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %22 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  %23 = load float, ptr %22, align 4
  %multiply.20 = fmul float %9, %23
  %subtract.21 = fsub float %21, %multiply.20
  %24 = insertvalue { float, float, float, float, float, float } %19, float %subtract.21, 2
  %25 = getelementptr inbounds float, ptr %arg7, i32 %linear_index
  %26 = load float, ptr %25, align 4, !invariant.load !197
  %27 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  %28 = load float, ptr %27, align 4
  %multiply.22 = fmul float %9, %28
  %subtract.23 = fsub float %26, %multiply.22
  %29 = insertvalue { float, float, float, float, float, float } %24, float %subtract.23, 3
  %30 = getelementptr inbounds float, ptr %arg9, i32 %linear_index
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %32 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  %33 = load float, ptr %32, align 4
  %multiply.24 = fmul float %9, %33
  %subtract.25 = fsub float %31, %multiply.24
  %34 = insertvalue { float, float, float, float, float, float } %29, float %subtract.25, 4
  %35 = getelementptr inbounds float, ptr %arg11, i32 %linear_index
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %37 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  %38 = load float, ptr %37, align 4
  %multiply.26 = fmul float %9, %38
  %subtract.27 = fsub float %36, %multiply.26
  %39 = insertvalue { float, float, float, float, float, float } %34, float %subtract.27, 5
  %40 = extractvalue { float, float, float, float, float, float } %39, 0
  %41 = getelementptr inbounds float, ptr %arg12, i32 %linear_index
  store float %40, ptr %41, align 4
  %42 = extractvalue { float, float, float, float, float, float } %39, 1
  %43 = getelementptr inbounds float, ptr %arg10, i32 %linear_index
  store float %42, ptr %43, align 4
  %44 = extractvalue { float, float, float, float, float, float } %39, 2
  %45 = getelementptr inbounds float, ptr %arg8, i32 %linear_index
  store float %44, ptr %45, align 4
  %46 = extractvalue { float, float, float, float, float, float } %39, 3
  %47 = getelementptr inbounds float, ptr %arg6, i32 %linear_index
  store float %46, ptr %47, align 4
  %48 = extractvalue { float, float, float, float, float, float } %39, 4
  %49 = getelementptr inbounds float, ptr %arg4, i32 %linear_index
  store float %48, ptr %49, align 4
  %50 = extractvalue { float, float, float, float, float, float } %39, 5
  %51 = getelementptr inbounds float, ptr %arg13, i32 %linear_index
  store float %50, ptr %51, align 4
  br label %fusion_28.in_bounds-after
}

define void @add_115(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(48496640) %arg1, ptr noalias align 128 dereferenceable(48496640) %arg2) {
entry:
  %loop.invar_address = alloca i32, align 4
  store i32 0, ptr %loop.invar_address, align 4
  br label %loop.loop_header

loop.loop_header:                                 ; preds = %add_115.in_bounds-after, %entry
  %loop.indvar = load i32, ptr %loop.invar_address, align 4
  %0 = icmp uge i32 %loop.indvar, 12124160
  br i1 %0, label %loop.loop_exit, label %loop.loop_body

loop.loop_body:                                   ; preds = %loop.loop_header
  %invar.inc = add nuw nsw i32 %loop.indvar, 442368
  store i32 %invar.inc, ptr %loop.invar_address, align 4
  %1 = icmp eq i32 %loop.indvar, 0
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !382
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !283
  %4 = mul nuw nsw i32 %2, 128
  %linear_index = add nuw nsw i32 %4, %3
  %linear_index_in_range = icmp ult i32 %linear_index, 110592
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %linear_index_plus_base = add nuw nsw i32 %linear_index_base, %loop.indvar
  %5 = udiv i32 %linear_index_plus_base, 1
  %6 = urem i32 %5, 1480
  %7 = udiv i32 %linear_index_plus_base, 1480
  %linear_index1 = add nuw nsw i32 %linear_index_plus_base, 1
  %8 = udiv i32 %linear_index1, 1
  %9 = urem i32 %8, 1480
  %10 = udiv i32 %linear_index1, 1480
  %linear_index2 = add nuw nsw i32 %linear_index_plus_base, 2
  %11 = udiv i32 %linear_index2, 1
  %12 = urem i32 %11, 1480
  %13 = udiv i32 %linear_index2, 1480
  %linear_index3 = add nuw nsw i32 %linear_index_plus_base, 3
  %14 = udiv i32 %linear_index3, 1
  %15 = urem i32 %14, 1480
  %16 = udiv i32 %linear_index3, 1480
  %17 = icmp ult i32 %linear_index_plus_base, 12124160
  br i1 %17, label %add_115.in_bounds-true, label %add_115.in_bounds-after

add_115.in_bounds-after:                          ; preds = %add_115.in_bounds-true, %loop.loop_body
  br label %loop.loop_header, !llvm.loop !383

loop.loop_exit:                                   ; preds = %loop.loop_header
  ret void

add_115.in_bounds-true:                           ; preds = %loop.loop_body
  %18 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_plus_base
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_plus_base
  %21 = load float, ptr %20, align 4, !invariant.load !197
  %add.3 = fadd float %19, %21
  %22 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_plus_base
  store float %add.3, ptr %22, align 4
  %23 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  %26 = load float, ptr %25, align 4, !invariant.load !197
  %add.31 = fadd float %24, %26
  %27 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %add.31, ptr %27, align 4
  %28 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  %31 = load float, ptr %30, align 4, !invariant.load !197
  %add.32 = fadd float %29, %31
  %32 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %add.32, ptr %32, align 4
  %33 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  %36 = load float, ptr %35, align 4, !invariant.load !197
  %add.33 = fadd float %34, %36
  %37 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %add.33, ptr %37, align 4
  br label %add_115.in_bounds-after
}

define void @slice_507(ptr noalias align 128 dereferenceable(53215232) %arg0, ptr noalias align 128 dereferenceable(4194304) %arg1) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !267
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 262144
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 128
  %5 = udiv i32 %linear_index_base, 128
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 128
  %8 = udiv i32 %linear_index1, 128
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 128
  %11 = udiv i32 %linear_index2, 128
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 128
  %14 = udiv i32 %linear_index3, 128
  %15 = icmp ult i32 %linear_index_base, 1048576
  br i1 %15, label %slice_507.in_bounds-true, label %slice_507.in_bounds-after

slice_507.in_bounds-after:                        ; preds = %slice_507.in_bounds-true, %entry
  ret void

slice_507.in_bounds-true:                         ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = getelementptr inbounds float, ptr %arg1, i32 %linear_index_base
  store float %19, ptr %20, align 4
  %21 = add i32 %8, 0
  %22 = add i32 %7, 0
  %23 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg0, i32 0, i32 %21, i32 %22
  %24 = load float, ptr %23, align 4, !invariant.load !197
  %25 = getelementptr inbounds float, ptr %arg1, i32 %linear_index1
  store float %24, ptr %25, align 4
  %26 = add i32 %11, 0
  %27 = add i32 %10, 0
  %28 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg0, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %30 = getelementptr inbounds float, ptr %arg1, i32 %linear_index2
  store float %29, ptr %30, align 4
  %31 = add i32 %14, 0
  %32 = add i32 %13, 0
  %33 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg0, i32 0, i32 %31, i32 %32
  %34 = load float, ptr %33, align 4, !invariant.load !197
  %35 = getelementptr inbounds float, ptr %arg1, i32 %linear_index3
  store float %34, ptr %35, align 4
  br label %slice_507.in_bounds-after
}

define void @fusion_176(ptr noalias align 16 dereferenceable(524288) %arg0, ptr noalias align 128 dereferenceable(9961472) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 16 dereferenceable(524288) %arg3, ptr noalias align 128 dereferenceable(524288) %arg4, ptr noalias align 128 dereferenceable(53215232) %arg5, ptr noalias align 128 dereferenceable(53215232) %arg6, ptr noalias align 128 dereferenceable(53215232) %arg7, ptr noalias align 16 dereferenceable(524288) %arg8, ptr noalias align 128 dereferenceable(9961472) %arg9, ptr noalias align 16 dereferenceable(524288) %arg10, ptr noalias align 128 dereferenceable(9961472) %arg11, ptr noalias align 16 dereferenceable(524288) %arg12, ptr noalias align 128 dereferenceable(9961472) %arg13, ptr noalias align 16 dereferenceable(524288) %arg14, ptr noalias align 128 dereferenceable(9961472) %arg15, ptr noalias align 128 dereferenceable(524288) %arg16, ptr noalias align 128 dereferenceable(524288) %arg17, ptr noalias align 128 dereferenceable(524288) %arg18, ptr noalias align 128 dereferenceable(524288) %arg19, ptr noalias align 128 dereferenceable(524288) %arg20) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !283
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 32768
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 16
  %5 = udiv i32 %linear_index_base, 16
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 16
  %8 = udiv i32 %linear_index1, 16
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 16
  %11 = udiv i32 %linear_index2, 16
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 16
  %14 = udiv i32 %linear_index3, 16
  %15 = icmp ult i32 %linear_index_base, 131072
  br i1 %15, label %fusion_176.in_bounds-true, label %fusion_176.in_bounds-after

fusion_176.in_bounds-after:                       ; preds = %fusion_176.in_bounds-true, %entry
  ret void

fusion_176.in_bounds-true:                        ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = add i32 %5, 0
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %multiply.19 = fmul float %18, %22
  %subtract.20 = fsub float %17, %multiply.19
  %23 = insertvalue { float, float, float, float, float, float } undef, float %subtract.20, 0
  %24 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  %27 = load float, ptr %26, align 4
  %28 = add i32 %5, 0
  %29 = add i32 %4, 1480
  %30 = add i32 %28, 0
  %31 = add i32 %29, 128
  %32 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg7, i32 0, i32 %30, i32 %31
  %33 = load float, ptr %32, align 4, !invariant.load !197
  %34 = add i32 %28, 0
  %35 = add i32 %29, 128
  %36 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg6, i32 0, i32 %34, i32 %35
  %37 = load float, ptr %36, align 4, !invariant.load !197
  %add.23 = fadd float %33, %37
  %38 = add i32 %28, 0
  %39 = add i32 %29, 128
  %40 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg5, i32 0, i32 %38, i32 %39
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %add.25 = fadd float %add.23, %41
  %add.27 = fadd float %27, %add.25
  %multiply.28 = fmul float %18, %add.27
  %subtract.29 = fsub float %25, %multiply.28
  %42 = insertvalue { float, float, float, float, float, float } %23, float %subtract.29, 1
  %43 = getelementptr inbounds float, ptr %arg8, i32 %linear_index_base
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %5, 0
  %46 = add i32 %4, 0
  %47 = getelementptr inbounds [8192 x [304 x float]], ptr %arg9, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %multiply.31 = fmul float %18, %48
  %subtract.32 = fsub float %44, %multiply.31
  %49 = insertvalue { float, float, float, float, float, float } %42, float %subtract.32, 2
  %50 = getelementptr inbounds float, ptr %arg10, i32 %linear_index_base
  %51 = load float, ptr %50, align 4, !invariant.load !197
  %52 = add i32 %5, 0
  %53 = add i32 %4, 0
  %54 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %52, i32 %53
  %55 = load float, ptr %54, align 4, !invariant.load !197
  %multiply.34 = fmul float %18, %55
  %subtract.35 = fsub float %51, %multiply.34
  %56 = insertvalue { float, float, float, float, float, float } %49, float %subtract.35, 3
  %57 = getelementptr inbounds float, ptr %arg12, i32 %linear_index_base
  %58 = load float, ptr %57, align 4, !invariant.load !197
  %59 = add i32 %5, 0
  %60 = add i32 %4, 0
  %61 = getelementptr inbounds [8192 x [304 x float]], ptr %arg13, i32 0, i32 %59, i32 %60
  %62 = load float, ptr %61, align 4, !invariant.load !197
  %multiply.37 = fmul float %18, %62
  %subtract.38 = fsub float %58, %multiply.37
  %63 = insertvalue { float, float, float, float, float, float } %56, float %subtract.38, 4
  %64 = getelementptr inbounds float, ptr %arg14, i32 %linear_index_base
  %65 = load float, ptr %64, align 4, !invariant.load !197
  %66 = add i32 %5, 0
  %67 = add i32 %4, 0
  %68 = getelementptr inbounds [8192 x [304 x float]], ptr %arg15, i32 0, i32 %66, i32 %67
  %69 = load float, ptr %68, align 4, !invariant.load !197
  %multiply.40 = fmul float %18, %69
  %subtract.41 = fsub float %65, %multiply.40
  %70 = insertvalue { float, float, float, float, float, float } %63, float %subtract.41, 5
  %71 = extractvalue { float, float, float, float, float, float } %70, 0
  %72 = getelementptr inbounds float, ptr %arg16, i32 %linear_index_base
  store float %71, ptr %72, align 4
  %73 = extractvalue { float, float, float, float, float, float } %70, 1
  %74 = getelementptr inbounds float, ptr %arg17, i32 %linear_index_base
  store float %73, ptr %74, align 4
  %75 = extractvalue { float, float, float, float, float, float } %70, 2
  %76 = getelementptr inbounds float, ptr %arg18, i32 %linear_index_base
  store float %75, ptr %76, align 4
  %77 = extractvalue { float, float, float, float, float, float } %70, 3
  %78 = getelementptr inbounds float, ptr %arg19, i32 %linear_index_base
  store float %77, ptr %78, align 4
  %79 = extractvalue { float, float, float, float, float, float } %70, 4
  %80 = getelementptr inbounds float, ptr %arg20, i32 %linear_index_base
  store float %79, ptr %80, align 4
  %81 = extractvalue { float, float, float, float, float, float } %70, 5
  %82 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %81, ptr %82, align 4
  %83 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %84 = load float, ptr %83, align 4, !invariant.load !197
  %85 = load float, ptr %arg2, align 4, !invariant.load !197
  %86 = add i32 %8, 0
  %87 = add i32 %7, 0
  %88 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %86, i32 %87
  %89 = load float, ptr %88, align 4, !invariant.load !197
  %multiply.191 = fmul float %85, %89
  %subtract.202 = fsub float %84, %multiply.191
  %90 = insertvalue { float, float, float, float, float, float } undef, float %subtract.202, 0
  %91 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  %92 = load float, ptr %91, align 4, !invariant.load !197
  %93 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  %94 = load float, ptr %93, align 4
  %95 = add i32 %8, 0
  %96 = add i32 %7, 1480
  %97 = add i32 %95, 0
  %98 = add i32 %96, 128
  %99 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg7, i32 0, i32 %97, i32 %98
  %100 = load float, ptr %99, align 4, !invariant.load !197
  %101 = add i32 %95, 0
  %102 = add i32 %96, 128
  %103 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg6, i32 0, i32 %101, i32 %102
  %104 = load float, ptr %103, align 4, !invariant.load !197
  %add.233 = fadd float %100, %104
  %105 = add i32 %95, 0
  %106 = add i32 %96, 128
  %107 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg5, i32 0, i32 %105, i32 %106
  %108 = load float, ptr %107, align 4, !invariant.load !197
  %add.254 = fadd float %add.233, %108
  %add.275 = fadd float %94, %add.254
  %multiply.286 = fmul float %85, %add.275
  %subtract.297 = fsub float %92, %multiply.286
  %109 = insertvalue { float, float, float, float, float, float } %90, float %subtract.297, 1
  %110 = getelementptr inbounds float, ptr %arg8, i32 %linear_index1
  %111 = load float, ptr %110, align 4, !invariant.load !197
  %112 = add i32 %8, 0
  %113 = add i32 %7, 0
  %114 = getelementptr inbounds [8192 x [304 x float]], ptr %arg9, i32 0, i32 %112, i32 %113
  %115 = load float, ptr %114, align 4, !invariant.load !197
  %multiply.318 = fmul float %85, %115
  %subtract.329 = fsub float %111, %multiply.318
  %116 = insertvalue { float, float, float, float, float, float } %109, float %subtract.329, 2
  %117 = getelementptr inbounds float, ptr %arg10, i32 %linear_index1
  %118 = load float, ptr %117, align 4, !invariant.load !197
  %119 = add i32 %8, 0
  %120 = add i32 %7, 0
  %121 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %119, i32 %120
  %122 = load float, ptr %121, align 4, !invariant.load !197
  %multiply.3410 = fmul float %85, %122
  %subtract.3511 = fsub float %118, %multiply.3410
  %123 = insertvalue { float, float, float, float, float, float } %116, float %subtract.3511, 3
  %124 = getelementptr inbounds float, ptr %arg12, i32 %linear_index1
  %125 = load float, ptr %124, align 4, !invariant.load !197
  %126 = add i32 %8, 0
  %127 = add i32 %7, 0
  %128 = getelementptr inbounds [8192 x [304 x float]], ptr %arg13, i32 0, i32 %126, i32 %127
  %129 = load float, ptr %128, align 4, !invariant.load !197
  %multiply.3712 = fmul float %85, %129
  %subtract.3813 = fsub float %125, %multiply.3712
  %130 = insertvalue { float, float, float, float, float, float } %123, float %subtract.3813, 4
  %131 = getelementptr inbounds float, ptr %arg14, i32 %linear_index1
  %132 = load float, ptr %131, align 4, !invariant.load !197
  %133 = add i32 %8, 0
  %134 = add i32 %7, 0
  %135 = getelementptr inbounds [8192 x [304 x float]], ptr %arg15, i32 0, i32 %133, i32 %134
  %136 = load float, ptr %135, align 4, !invariant.load !197
  %multiply.4014 = fmul float %85, %136
  %subtract.4115 = fsub float %132, %multiply.4014
  %137 = insertvalue { float, float, float, float, float, float } %130, float %subtract.4115, 5
  %138 = extractvalue { float, float, float, float, float, float } %137, 0
  %139 = getelementptr inbounds float, ptr %arg16, i32 %linear_index1
  store float %138, ptr %139, align 4
  %140 = extractvalue { float, float, float, float, float, float } %137, 1
  %141 = getelementptr inbounds float, ptr %arg17, i32 %linear_index1
  store float %140, ptr %141, align 4
  %142 = extractvalue { float, float, float, float, float, float } %137, 2
  %143 = getelementptr inbounds float, ptr %arg18, i32 %linear_index1
  store float %142, ptr %143, align 4
  %144 = extractvalue { float, float, float, float, float, float } %137, 3
  %145 = getelementptr inbounds float, ptr %arg19, i32 %linear_index1
  store float %144, ptr %145, align 4
  %146 = extractvalue { float, float, float, float, float, float } %137, 4
  %147 = getelementptr inbounds float, ptr %arg20, i32 %linear_index1
  store float %146, ptr %147, align 4
  %148 = extractvalue { float, float, float, float, float, float } %137, 5
  %149 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %148, ptr %149, align 4
  %150 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %151 = load float, ptr %150, align 4, !invariant.load !197
  %152 = load float, ptr %arg2, align 4, !invariant.load !197
  %153 = add i32 %11, 0
  %154 = add i32 %10, 0
  %155 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %153, i32 %154
  %156 = load float, ptr %155, align 4, !invariant.load !197
  %multiply.1916 = fmul float %152, %156
  %subtract.2017 = fsub float %151, %multiply.1916
  %157 = insertvalue { float, float, float, float, float, float } undef, float %subtract.2017, 0
  %158 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  %159 = load float, ptr %158, align 4, !invariant.load !197
  %160 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  %161 = load float, ptr %160, align 4
  %162 = add i32 %11, 0
  %163 = add i32 %10, 1480
  %164 = add i32 %162, 0
  %165 = add i32 %163, 128
  %166 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg7, i32 0, i32 %164, i32 %165
  %167 = load float, ptr %166, align 4, !invariant.load !197
  %168 = add i32 %162, 0
  %169 = add i32 %163, 128
  %170 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg6, i32 0, i32 %168, i32 %169
  %171 = load float, ptr %170, align 4, !invariant.load !197
  %add.2318 = fadd float %167, %171
  %172 = add i32 %162, 0
  %173 = add i32 %163, 128
  %174 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg5, i32 0, i32 %172, i32 %173
  %175 = load float, ptr %174, align 4, !invariant.load !197
  %add.2519 = fadd float %add.2318, %175
  %add.2720 = fadd float %161, %add.2519
  %multiply.2821 = fmul float %152, %add.2720
  %subtract.2922 = fsub float %159, %multiply.2821
  %176 = insertvalue { float, float, float, float, float, float } %157, float %subtract.2922, 1
  %177 = getelementptr inbounds float, ptr %arg8, i32 %linear_index2
  %178 = load float, ptr %177, align 4, !invariant.load !197
  %179 = add i32 %11, 0
  %180 = add i32 %10, 0
  %181 = getelementptr inbounds [8192 x [304 x float]], ptr %arg9, i32 0, i32 %179, i32 %180
  %182 = load float, ptr %181, align 4, !invariant.load !197
  %multiply.3123 = fmul float %152, %182
  %subtract.3224 = fsub float %178, %multiply.3123
  %183 = insertvalue { float, float, float, float, float, float } %176, float %subtract.3224, 2
  %184 = getelementptr inbounds float, ptr %arg10, i32 %linear_index2
  %185 = load float, ptr %184, align 4, !invariant.load !197
  %186 = add i32 %11, 0
  %187 = add i32 %10, 0
  %188 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %186, i32 %187
  %189 = load float, ptr %188, align 4, !invariant.load !197
  %multiply.3425 = fmul float %152, %189
  %subtract.3526 = fsub float %185, %multiply.3425
  %190 = insertvalue { float, float, float, float, float, float } %183, float %subtract.3526, 3
  %191 = getelementptr inbounds float, ptr %arg12, i32 %linear_index2
  %192 = load float, ptr %191, align 4, !invariant.load !197
  %193 = add i32 %11, 0
  %194 = add i32 %10, 0
  %195 = getelementptr inbounds [8192 x [304 x float]], ptr %arg13, i32 0, i32 %193, i32 %194
  %196 = load float, ptr %195, align 4, !invariant.load !197
  %multiply.3727 = fmul float %152, %196
  %subtract.3828 = fsub float %192, %multiply.3727
  %197 = insertvalue { float, float, float, float, float, float } %190, float %subtract.3828, 4
  %198 = getelementptr inbounds float, ptr %arg14, i32 %linear_index2
  %199 = load float, ptr %198, align 4, !invariant.load !197
  %200 = add i32 %11, 0
  %201 = add i32 %10, 0
  %202 = getelementptr inbounds [8192 x [304 x float]], ptr %arg15, i32 0, i32 %200, i32 %201
  %203 = load float, ptr %202, align 4, !invariant.load !197
  %multiply.4029 = fmul float %152, %203
  %subtract.4130 = fsub float %199, %multiply.4029
  %204 = insertvalue { float, float, float, float, float, float } %197, float %subtract.4130, 5
  %205 = extractvalue { float, float, float, float, float, float } %204, 0
  %206 = getelementptr inbounds float, ptr %arg16, i32 %linear_index2
  store float %205, ptr %206, align 4
  %207 = extractvalue { float, float, float, float, float, float } %204, 1
  %208 = getelementptr inbounds float, ptr %arg17, i32 %linear_index2
  store float %207, ptr %208, align 4
  %209 = extractvalue { float, float, float, float, float, float } %204, 2
  %210 = getelementptr inbounds float, ptr %arg18, i32 %linear_index2
  store float %209, ptr %210, align 4
  %211 = extractvalue { float, float, float, float, float, float } %204, 3
  %212 = getelementptr inbounds float, ptr %arg19, i32 %linear_index2
  store float %211, ptr %212, align 4
  %213 = extractvalue { float, float, float, float, float, float } %204, 4
  %214 = getelementptr inbounds float, ptr %arg20, i32 %linear_index2
  store float %213, ptr %214, align 4
  %215 = extractvalue { float, float, float, float, float, float } %204, 5
  %216 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %215, ptr %216, align 4
  %217 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %218 = load float, ptr %217, align 4, !invariant.load !197
  %219 = load float, ptr %arg2, align 4, !invariant.load !197
  %220 = add i32 %14, 0
  %221 = add i32 %13, 0
  %222 = getelementptr inbounds [8192 x [304 x float]], ptr %arg1, i32 0, i32 %220, i32 %221
  %223 = load float, ptr %222, align 4, !invariant.load !197
  %multiply.1931 = fmul float %219, %223
  %subtract.2032 = fsub float %218, %multiply.1931
  %224 = insertvalue { float, float, float, float, float, float } undef, float %subtract.2032, 0
  %225 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  %226 = load float, ptr %225, align 4, !invariant.load !197
  %227 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  %228 = load float, ptr %227, align 4
  %229 = add i32 %14, 0
  %230 = add i32 %13, 1480
  %231 = add i32 %229, 0
  %232 = add i32 %230, 128
  %233 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg7, i32 0, i32 %231, i32 %232
  %234 = load float, ptr %233, align 4, !invariant.load !197
  %235 = add i32 %229, 0
  %236 = add i32 %230, 128
  %237 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg6, i32 0, i32 %235, i32 %236
  %238 = load float, ptr %237, align 4, !invariant.load !197
  %add.2333 = fadd float %234, %238
  %239 = add i32 %229, 0
  %240 = add i32 %230, 128
  %241 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg5, i32 0, i32 %239, i32 %240
  %242 = load float, ptr %241, align 4, !invariant.load !197
  %add.2534 = fadd float %add.2333, %242
  %add.2735 = fadd float %228, %add.2534
  %multiply.2836 = fmul float %219, %add.2735
  %subtract.2937 = fsub float %226, %multiply.2836
  %243 = insertvalue { float, float, float, float, float, float } %224, float %subtract.2937, 1
  %244 = getelementptr inbounds float, ptr %arg8, i32 %linear_index3
  %245 = load float, ptr %244, align 4, !invariant.load !197
  %246 = add i32 %14, 0
  %247 = add i32 %13, 0
  %248 = getelementptr inbounds [8192 x [304 x float]], ptr %arg9, i32 0, i32 %246, i32 %247
  %249 = load float, ptr %248, align 4, !invariant.load !197
  %multiply.3138 = fmul float %219, %249
  %subtract.3239 = fsub float %245, %multiply.3138
  %250 = insertvalue { float, float, float, float, float, float } %243, float %subtract.3239, 2
  %251 = getelementptr inbounds float, ptr %arg10, i32 %linear_index3
  %252 = load float, ptr %251, align 4, !invariant.load !197
  %253 = add i32 %14, 0
  %254 = add i32 %13, 0
  %255 = getelementptr inbounds [8192 x [304 x float]], ptr %arg11, i32 0, i32 %253, i32 %254
  %256 = load float, ptr %255, align 4, !invariant.load !197
  %multiply.3440 = fmul float %219, %256
  %subtract.3541 = fsub float %252, %multiply.3440
  %257 = insertvalue { float, float, float, float, float, float } %250, float %subtract.3541, 3
  %258 = getelementptr inbounds float, ptr %arg12, i32 %linear_index3
  %259 = load float, ptr %258, align 4, !invariant.load !197
  %260 = add i32 %14, 0
  %261 = add i32 %13, 0
  %262 = getelementptr inbounds [8192 x [304 x float]], ptr %arg13, i32 0, i32 %260, i32 %261
  %263 = load float, ptr %262, align 4, !invariant.load !197
  %multiply.3742 = fmul float %219, %263
  %subtract.3843 = fsub float %259, %multiply.3742
  %264 = insertvalue { float, float, float, float, float, float } %257, float %subtract.3843, 4
  %265 = getelementptr inbounds float, ptr %arg14, i32 %linear_index3
  %266 = load float, ptr %265, align 4, !invariant.load !197
  %267 = add i32 %14, 0
  %268 = add i32 %13, 0
  %269 = getelementptr inbounds [8192 x [304 x float]], ptr %arg15, i32 0, i32 %267, i32 %268
  %270 = load float, ptr %269, align 4, !invariant.load !197
  %multiply.4044 = fmul float %219, %270
  %subtract.4145 = fsub float %266, %multiply.4044
  %271 = insertvalue { float, float, float, float, float, float } %264, float %subtract.4145, 5
  %272 = extractvalue { float, float, float, float, float, float } %271, 0
  %273 = getelementptr inbounds float, ptr %arg16, i32 %linear_index3
  store float %272, ptr %273, align 4
  %274 = extractvalue { float, float, float, float, float, float } %271, 1
  %275 = getelementptr inbounds float, ptr %arg17, i32 %linear_index3
  store float %274, ptr %275, align 4
  %276 = extractvalue { float, float, float, float, float, float } %271, 2
  %277 = getelementptr inbounds float, ptr %arg18, i32 %linear_index3
  store float %276, ptr %277, align 4
  %278 = extractvalue { float, float, float, float, float, float } %271, 3
  %279 = getelementptr inbounds float, ptr %arg19, i32 %linear_index3
  store float %278, ptr %279, align 4
  %280 = extractvalue { float, float, float, float, float, float } %271, 4
  %281 = getelementptr inbounds float, ptr %arg20, i32 %linear_index3
  store float %280, ptr %281, align 4
  %282 = extractvalue { float, float, float, float, float, float } %271, 5
  %283 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %282, ptr %283, align 4
  br label %fusion_176.in_bounds-after
}

define void @fusion_567(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(53215232) %arg1, ptr noalias align 128 dereferenceable(53215232) %arg2, ptr noalias align 128 dereferenceable(53215232) %arg3, ptr noalias align 128 dereferenceable(8388608) %arg4, ptr noalias align 128 dereferenceable(8388608) %arg5) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !384
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 12124160
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 1480
  %5 = udiv i32 %linear_index, 1480
  %6 = icmp ult i32 %linear_index, 12124160
  br i1 %6, label %fusion_567.in_bounds-true, label %fusion_567.in_bounds-after

fusion_567.in_bounds-after:                       ; preds = %slice1-after, %entry
  ret void

fusion_567.in_bounds-true:                        ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = add i32 %5, 0
  %10 = add i32 %4, 0
  %11 = add i32 %9, 0
  %12 = add i32 %10, 128
  %13 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg3, i32 0, i32 %11, i32 %12
  %14 = load float, ptr %13, align 4, !invariant.load !197
  %15 = add i32 %9, 0
  %16 = add i32 %10, 128
  %17 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg2, i32 0, i32 %15, i32 %16
  %18 = load float, ptr %17, align 4, !invariant.load !197
  %add.7 = fadd float %14, %18
  %19 = add i32 %9, 0
  %20 = add i32 %10, 128
  %21 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %add.9 = fadd float %add.7, %22
  %add.11 = fadd float %8, %add.9
  %23 = icmp sge i32 %5, 0
  %24 = icmp slt i32 %5, 8192
  %25 = and i1 %23, %24
  %26 = icmp sge i32 %4, 1224
  %27 = icmp slt i32 %4, 1480
  %28 = and i1 %26, %27
  %29 = and i1 %25, %28
  br i1 %29, label %slice0-true, label %slice0-after

slice0-after:                                     ; preds = %slice0-true, %fusion_567.in_bounds-true
  %30 = icmp sge i32 %5, 0
  %31 = icmp slt i32 %5, 8192
  %32 = and i1 %30, %31
  %33 = icmp sge i32 %4, 968
  %34 = icmp slt i32 %4, 1224
  %35 = and i1 %33, %34
  %36 = and i1 %32, %35
  br i1 %36, label %slice1-true, label %slice1-after

slice1-after:                                     ; preds = %slice1-true, %slice0-after
  br label %fusion_567.in_bounds-after

slice0-true:                                      ; preds = %fusion_567.in_bounds-true
  %37 = sub i32 %5, 0
  %38 = sub i32 %4, 1224
  %39 = getelementptr inbounds [8192 x [256 x float]], ptr %arg4, i32 0, i32 %37, i32 %38
  store float %add.11, ptr %39, align 4
  br label %slice0-after

slice1-true:                                      ; preds = %slice0-after
  %40 = sub i32 %5, 0
  %41 = sub i32 %4, 968
  %42 = getelementptr inbounds [8192 x [256 x float]], ptr %arg5, i32 0, i32 %40, i32 %41
  store float %add.11, ptr %42, align 4
  br label %slice1-after
}

define void @fusion_569(ptr noalias align 128 dereferenceable(48496640) %arg0, ptr noalias align 128 dereferenceable(53215232) %arg1, ptr noalias align 128 dereferenceable(53215232) %arg2, ptr noalias align 128 dereferenceable(53215232) %arg3, ptr noalias align 128 dereferenceable(31719424) %arg4) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !385
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 1982464
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 968
  %5 = udiv i32 %linear_index_base, 968
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 968
  %8 = udiv i32 %linear_index1, 968
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 968
  %11 = udiv i32 %linear_index2, 968
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 968
  %14 = udiv i32 %linear_index3, 968
  %15 = icmp ult i32 %linear_index_base, 7929856
  br i1 %15, label %fusion_569.in_bounds-true, label %fusion_569.in_bounds-after

fusion_569.in_bounds-after:                       ; preds = %fusion_569.in_bounds-true, %entry
  ret void

fusion_569.in_bounds-true:                        ; preds = %entry
  %16 = add i32 %5, 0
  %17 = add i32 %4, 0
  %18 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %16, i32 %17
  %19 = load float, ptr %18, align 4, !invariant.load !197
  %20 = add i32 %16, 0
  %21 = add i32 %17, 0
  %22 = add i32 %20, 0
  %23 = add i32 %21, 128
  %24 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg3, i32 0, i32 %22, i32 %23
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = add i32 %20, 0
  %27 = add i32 %21, 128
  %28 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg2, i32 0, i32 %26, i32 %27
  %29 = load float, ptr %28, align 4, !invariant.load !197
  %add.7 = fadd float %25, %29
  %30 = add i32 %20, 0
  %31 = add i32 %21, 128
  %32 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg1, i32 0, i32 %30, i32 %31
  %33 = load float, ptr %32, align 4, !invariant.load !197
  %add.9 = fadd float %add.7, %33
  %add.11 = fadd float %19, %add.9
  %34 = getelementptr inbounds float, ptr %arg4, i32 %linear_index_base
  store float %add.11, ptr %34, align 4
  %35 = add i32 %8, 0
  %36 = add i32 %7, 0
  %37 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %35, i32 %36
  %38 = load float, ptr %37, align 4, !invariant.load !197
  %39 = add i32 %35, 0
  %40 = add i32 %36, 0
  %41 = add i32 %39, 0
  %42 = add i32 %40, 128
  %43 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg3, i32 0, i32 %41, i32 %42
  %44 = load float, ptr %43, align 4, !invariant.load !197
  %45 = add i32 %39, 0
  %46 = add i32 %40, 128
  %47 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg2, i32 0, i32 %45, i32 %46
  %48 = load float, ptr %47, align 4, !invariant.load !197
  %add.71 = fadd float %44, %48
  %49 = add i32 %39, 0
  %50 = add i32 %40, 128
  %51 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg1, i32 0, i32 %49, i32 %50
  %52 = load float, ptr %51, align 4, !invariant.load !197
  %add.92 = fadd float %add.71, %52
  %add.113 = fadd float %38, %add.92
  %53 = getelementptr inbounds float, ptr %arg4, i32 %linear_index1
  store float %add.113, ptr %53, align 4
  %54 = add i32 %11, 0
  %55 = add i32 %10, 0
  %56 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %54, i32 %55
  %57 = load float, ptr %56, align 4, !invariant.load !197
  %58 = add i32 %54, 0
  %59 = add i32 %55, 0
  %60 = add i32 %58, 0
  %61 = add i32 %59, 128
  %62 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg3, i32 0, i32 %60, i32 %61
  %63 = load float, ptr %62, align 4, !invariant.load !197
  %64 = add i32 %58, 0
  %65 = add i32 %59, 128
  %66 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg2, i32 0, i32 %64, i32 %65
  %67 = load float, ptr %66, align 4, !invariant.load !197
  %add.74 = fadd float %63, %67
  %68 = add i32 %58, 0
  %69 = add i32 %59, 128
  %70 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg1, i32 0, i32 %68, i32 %69
  %71 = load float, ptr %70, align 4, !invariant.load !197
  %add.95 = fadd float %add.74, %71
  %add.116 = fadd float %57, %add.95
  %72 = getelementptr inbounds float, ptr %arg4, i32 %linear_index2
  store float %add.116, ptr %72, align 4
  %73 = add i32 %14, 0
  %74 = add i32 %13, 0
  %75 = getelementptr inbounds [8192 x [1480 x float]], ptr %arg0, i32 0, i32 %73, i32 %74
  %76 = load float, ptr %75, align 4, !invariant.load !197
  %77 = add i32 %73, 0
  %78 = add i32 %74, 0
  %79 = add i32 %77, 0
  %80 = add i32 %78, 128
  %81 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg3, i32 0, i32 %79, i32 %80
  %82 = load float, ptr %81, align 4, !invariant.load !197
  %83 = add i32 %77, 0
  %84 = add i32 %78, 128
  %85 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg2, i32 0, i32 %83, i32 %84
  %86 = load float, ptr %85, align 4, !invariant.load !197
  %add.77 = fadd float %82, %86
  %87 = add i32 %77, 0
  %88 = add i32 %78, 128
  %89 = getelementptr inbounds [8192 x [1624 x float]], ptr %arg1, i32 0, i32 %87, i32 %88
  %90 = load float, ptr %89, align 4, !invariant.load !197
  %add.98 = fadd float %add.77, %90
  %add.119 = fadd float %76, %add.98
  %91 = getelementptr inbounds float, ptr %arg4, i32 %linear_index3
  store float %add.119, ptr %91, align 4
  br label %fusion_569.in_bounds-after
}

define void @concatenate_307(ptr noalias align 16 dereferenceable(4194304) %arg0, ptr noalias align 16 dereferenceable(49020928) %arg1, ptr noalias align 128 dereferenceable(53215232) %arg2) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !386
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 3325952
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 1624
  %5 = udiv i32 %linear_index_base, 1624
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 1624
  %8 = udiv i32 %linear_index1, 1624
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 1624
  %11 = udiv i32 %linear_index2, 1624
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 1624
  %14 = udiv i32 %linear_index3, 1624
  %15 = icmp ult i32 %linear_index_base, 13303808
  br i1 %15, label %concatenate_307.in_bounds-true, label %concatenate_307.in_bounds-after

concatenate_307.in_bounds-after:                  ; preds = %concatenate.3.merge14, %entry
  ret void

concatenate_307.in_bounds-true:                   ; preds = %entry
  br label %concatenate.pivot.128.

concat_index_from_operand_id0:                    ; preds = %concatenate.pivot.0.
  %16 = phi i32 [ 0, %concatenate.pivot.0. ]
  %17 = sub nsw i32 %4, %16
  %18 = udiv i32 %linear_index_base, 1624
  %19 = mul i32 %18, 128
  %20 = add i32 %19, %17
  %21 = udiv i32 %20, 1
  %22 = urem i32 %21, 128
  %23 = udiv i32 %20, 128
  %24 = getelementptr inbounds float, ptr %arg0, i32 %20
  %25 = load float, ptr %24, align 4, !invariant.load !197
  br label %concatenate.3.merge

concat_index_from_operand_id1:                    ; preds = %concatenate.pivot.128.1
  %26 = phi i32 [ 128, %concatenate.pivot.128.1 ]
  %27 = sub nsw i32 %4, %26
  %28 = udiv i32 %linear_index_base, 1624
  %29 = mul i32 %28, 1496
  %30 = add i32 %29, %27
  %31 = udiv i32 %30, 1
  %32 = urem i32 %31, 1496
  %33 = udiv i32 %30, 1496
  %34 = getelementptr inbounds float, ptr %arg1, i32 %30
  %35 = load float, ptr %34, align 4, !invariant.load !197
  br label %concatenate.3.merge

concatenate.pivot.128.:                           ; preds = %concatenate_307.in_bounds-true
  %36 = icmp ult i32 %4, 128
  br i1 %36, label %concatenate.pivot.0., label %concatenate.pivot.128.1

concatenate.pivot.0.:                             ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id0

concatenate.pivot.128.1:                          ; preds = %concatenate.pivot.128.
  br label %concat_index_from_operand_id1

concatenate.3.merge:                              ; preds = %concat_index_from_operand_id1, %concat_index_from_operand_id0
  %37 = phi float [ %25, %concat_index_from_operand_id0 ], [ %35, %concat_index_from_operand_id1 ]
  %38 = getelementptr inbounds float, ptr %arg2, i32 %linear_index_base
  store float %37, ptr %38, align 4
  br label %concatenate.pivot.128.5

concat_index_from_operand_id03:                   ; preds = %concatenate.pivot.0.6
  %39 = phi i32 [ 0, %concatenate.pivot.0.6 ]
  %40 = sub nsw i32 %7, %39
  %41 = udiv i32 %linear_index1, 1624
  %42 = mul i32 %41, 128
  %43 = add i32 %42, %40
  %44 = udiv i32 %43, 1
  %45 = urem i32 %44, 128
  %46 = udiv i32 %43, 128
  %47 = getelementptr inbounds float, ptr %arg0, i32 %43
  %48 = load float, ptr %47, align 4, !invariant.load !197
  br label %concatenate.3.merge2

concat_index_from_operand_id14:                   ; preds = %concatenate.pivot.128.7
  %49 = phi i32 [ 128, %concatenate.pivot.128.7 ]
  %50 = sub nsw i32 %7, %49
  %51 = udiv i32 %linear_index1, 1624
  %52 = mul i32 %51, 1496
  %53 = add i32 %52, %50
  %54 = udiv i32 %53, 1
  %55 = urem i32 %54, 1496
  %56 = udiv i32 %53, 1496
  %57 = getelementptr inbounds float, ptr %arg1, i32 %53
  %58 = load float, ptr %57, align 4, !invariant.load !197
  br label %concatenate.3.merge2

concatenate.pivot.128.5:                          ; preds = %concatenate.3.merge
  %59 = icmp ult i32 %7, 128
  br i1 %59, label %concatenate.pivot.0.6, label %concatenate.pivot.128.7

concatenate.pivot.0.6:                            ; preds = %concatenate.pivot.128.5
  br label %concat_index_from_operand_id03

concatenate.pivot.128.7:                          ; preds = %concatenate.pivot.128.5
  br label %concat_index_from_operand_id14

concatenate.3.merge2:                             ; preds = %concat_index_from_operand_id14, %concat_index_from_operand_id03
  %60 = phi float [ %48, %concat_index_from_operand_id03 ], [ %58, %concat_index_from_operand_id14 ]
  %61 = getelementptr inbounds float, ptr %arg2, i32 %linear_index1
  store float %60, ptr %61, align 4
  br label %concatenate.pivot.128.11

concat_index_from_operand_id09:                   ; preds = %concatenate.pivot.0.12
  %62 = phi i32 [ 0, %concatenate.pivot.0.12 ]
  %63 = sub nsw i32 %10, %62
  %64 = udiv i32 %linear_index2, 1624
  %65 = mul i32 %64, 128
  %66 = add i32 %65, %63
  %67 = udiv i32 %66, 1
  %68 = urem i32 %67, 128
  %69 = udiv i32 %66, 128
  %70 = getelementptr inbounds float, ptr %arg0, i32 %66
  %71 = load float, ptr %70, align 4, !invariant.load !197
  br label %concatenate.3.merge8

concat_index_from_operand_id110:                  ; preds = %concatenate.pivot.128.13
  %72 = phi i32 [ 128, %concatenate.pivot.128.13 ]
  %73 = sub nsw i32 %10, %72
  %74 = udiv i32 %linear_index2, 1624
  %75 = mul i32 %74, 1496
  %76 = add i32 %75, %73
  %77 = udiv i32 %76, 1
  %78 = urem i32 %77, 1496
  %79 = udiv i32 %76, 1496
  %80 = getelementptr inbounds float, ptr %arg1, i32 %76
  %81 = load float, ptr %80, align 4, !invariant.load !197
  br label %concatenate.3.merge8

concatenate.pivot.128.11:                         ; preds = %concatenate.3.merge2
  %82 = icmp ult i32 %10, 128
  br i1 %82, label %concatenate.pivot.0.12, label %concatenate.pivot.128.13

concatenate.pivot.0.12:                           ; preds = %concatenate.pivot.128.11
  br label %concat_index_from_operand_id09

concatenate.pivot.128.13:                         ; preds = %concatenate.pivot.128.11
  br label %concat_index_from_operand_id110

concatenate.3.merge8:                             ; preds = %concat_index_from_operand_id110, %concat_index_from_operand_id09
  %83 = phi float [ %71, %concat_index_from_operand_id09 ], [ %81, %concat_index_from_operand_id110 ]
  %84 = getelementptr inbounds float, ptr %arg2, i32 %linear_index2
  store float %83, ptr %84, align 4
  br label %concatenate.pivot.128.17

concat_index_from_operand_id015:                  ; preds = %concatenate.pivot.0.18
  %85 = phi i32 [ 0, %concatenate.pivot.0.18 ]
  %86 = sub nsw i32 %13, %85
  %87 = udiv i32 %linear_index3, 1624
  %88 = mul i32 %87, 128
  %89 = add i32 %88, %86
  %90 = udiv i32 %89, 1
  %91 = urem i32 %90, 128
  %92 = udiv i32 %89, 128
  %93 = getelementptr inbounds float, ptr %arg0, i32 %89
  %94 = load float, ptr %93, align 4, !invariant.load !197
  br label %concatenate.3.merge14

concat_index_from_operand_id116:                  ; preds = %concatenate.pivot.128.19
  %95 = phi i32 [ 128, %concatenate.pivot.128.19 ]
  %96 = sub nsw i32 %13, %95
  %97 = udiv i32 %linear_index3, 1624
  %98 = mul i32 %97, 1496
  %99 = add i32 %98, %96
  %100 = udiv i32 %99, 1
  %101 = urem i32 %100, 1496
  %102 = udiv i32 %99, 1496
  %103 = getelementptr inbounds float, ptr %arg1, i32 %99
  %104 = load float, ptr %103, align 4, !invariant.load !197
  br label %concatenate.3.merge14

concatenate.pivot.128.17:                         ; preds = %concatenate.3.merge8
  %105 = icmp ult i32 %13, 128
  br i1 %105, label %concatenate.pivot.0.18, label %concatenate.pivot.128.19

concatenate.pivot.0.18:                           ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id015

concatenate.pivot.128.19:                         ; preds = %concatenate.pivot.128.17
  br label %concat_index_from_operand_id116

concatenate.3.merge14:                            ; preds = %concat_index_from_operand_id116, %concat_index_from_operand_id015
  %106 = phi float [ %94, %concat_index_from_operand_id015 ], [ %104, %concat_index_from_operand_id116 ]
  %107 = getelementptr inbounds float, ptr %arg2, i32 %linear_index3
  store float %106, ptr %107, align 4
  br label %concatenate_307.in_bounds-after
}

define void @fusion_5(ptr noalias align 16 dereferenceable(46080) %arg0, ptr noalias align 128 dereferenceable(584640) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(46080) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !387
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !267
  %2 = mul nuw nsw i32 %0, 1024
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 12288
  call void @llvm.assume(i1 %linear_index_in_range)
  %3 = udiv i32 %linear_index, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index, 90
  %6 = icmp ult i32 %linear_index, 11520
  br i1 %6, label %fusion_5.in_bounds-true, label %fusion_5.in_bounds-after

fusion_5.in_bounds-after:                         ; preds = %fusion_5.in_bounds-true, %entry
  ret void

fusion_5.in_bounds-true:                          ; preds = %entry
  %7 = getelementptr inbounds float, ptr %arg0, i32 %linear_index
  %8 = load float, ptr %7, align 4, !invariant.load !197
  %9 = load float, ptr %arg2, align 4, !invariant.load !197
  %10 = add i32 %5, 0
  %11 = add i32 %4, 0
  %12 = getelementptr inbounds [1624 x [90 x float]], ptr %arg1, i32 0, i32 %10, i32 %11
  %13 = load float, ptr %12, align 4, !invariant.load !197
  %multiply.6 = fmul float %9, %13
  %subtract.7 = fsub float %8, %multiply.6
  %14 = getelementptr inbounds float, ptr %arg3, i32 %linear_index
  store float %subtract.7, ptr %14, align 4
  br label %fusion_5.in_bounds-after
}

define void @fusion_6(ptr noalias align 16 dereferenceable(538560) %arg0, ptr noalias align 128 dereferenceable(584640) %arg1, ptr noalias align 16 dereferenceable(4) %arg2, ptr noalias align 128 dereferenceable(538560) %arg3) {
entry:
  %0 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !range !388
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !range !268
  %2 = mul nuw nsw i32 %0, 256
  %linear_index = add nuw nsw i32 %2, %1
  %linear_index_in_range = icmp ult i32 %linear_index, 33792
  call void @llvm.assume(i1 %linear_index_in_range)
  %linear_index_base = mul nuw nsw i32 %linear_index, 4
  %3 = udiv i32 %linear_index_base, 1
  %4 = urem i32 %3, 90
  %5 = udiv i32 %linear_index_base, 90
  %linear_index1 = add nuw nsw i32 %linear_index_base, 1
  %6 = udiv i32 %linear_index1, 1
  %7 = urem i32 %6, 90
  %8 = udiv i32 %linear_index1, 90
  %linear_index2 = add nuw nsw i32 %linear_index_base, 2
  %9 = udiv i32 %linear_index2, 1
  %10 = urem i32 %9, 90
  %11 = udiv i32 %linear_index2, 90
  %linear_index3 = add nuw nsw i32 %linear_index_base, 3
  %12 = udiv i32 %linear_index3, 1
  %13 = urem i32 %12, 90
  %14 = udiv i32 %linear_index3, 90
  %15 = icmp ult i32 %linear_index_base, 134640
  br i1 %15, label %fusion_6.in_bounds-true, label %fusion_6.in_bounds-after

fusion_6.in_bounds-after:                         ; preds = %fusion_6.in_bounds-true, %entry
  ret void

fusion_6.in_bounds-true:                          ; preds = %entry
  %16 = getelementptr inbounds float, ptr %arg0, i32 %linear_index_base
  %17 = load float, ptr %16, align 4, !invariant.load !197
  %18 = load float, ptr %arg2, align 4, !invariant.load !197
  %19 = add i32 %5, 128
  %20 = add i32 %4, 0
  %21 = getelementptr inbounds [1624 x [90 x float]], ptr %arg1, i32 0, i32 %19, i32 %20
  %22 = load float, ptr %21, align 4, !invariant.load !197
  %multiply.6 = fmul float %18, %22
  %subtract.7 = fsub float %17, %multiply.6
  %23 = getelementptr inbounds float, ptr %arg3, i32 %linear_index_base
  store float %subtract.7, ptr %23, align 4
  %24 = getelementptr inbounds float, ptr %arg0, i32 %linear_index1
  %25 = load float, ptr %24, align 4, !invariant.load !197
  %26 = load float, ptr %arg2, align 4, !invariant.load !197
  %27 = add i32 %8, 128
  %28 = add i32 %7, 0
  %29 = getelementptr inbounds [1624 x [90 x float]], ptr %arg1, i32 0, i32 %27, i32 %28
  %30 = load float, ptr %29, align 4, !invariant.load !197
  %multiply.61 = fmul float %26, %30
  %subtract.72 = fsub float %25, %multiply.61
  %31 = getelementptr inbounds float, ptr %arg3, i32 %linear_index1
  store float %subtract.72, ptr %31, align 4
  %32 = getelementptr inbounds float, ptr %arg0, i32 %linear_index2
  %33 = load float, ptr %32, align 4, !invariant.load !197
  %34 = load float, ptr %arg2, align 4, !invariant.load !197
  %35 = add i32 %11, 128
  %36 = add i32 %10, 0
  %37 = getelementptr inbounds [1624 x [90 x float]], ptr %arg1, i32 0, i32 %35, i32 %36
  %38 = load float, ptr %37, align 4, !invariant.load !197
  %multiply.63 = fmul float %34, %38
  %subtract.74 = fsub float %33, %multiply.63
  %39 = getelementptr inbounds float, ptr %arg3, i32 %linear_index2
  store float %subtract.74, ptr %39, align 4
  %40 = getelementptr inbounds float, ptr %arg0, i32 %linear_index3
  %41 = load float, ptr %40, align 4, !invariant.load !197
  %42 = load float, ptr %arg2, align 4, !invariant.load !197
  %43 = add i32 %14, 128
  %44 = add i32 %13, 0
  %45 = getelementptr inbounds [1624 x [90 x float]], ptr %arg1, i32 0, i32 %43, i32 %44
  %46 = load float, ptr %45, align 4, !invariant.load !197
  %multiply.65 = fmul float %42, %46
  %subtract.76 = fsub float %41, %multiply.65
  %47 = getelementptr inbounds float, ptr %arg3, i32 %linear_index3
  store float %subtract.76, ptr %47, align 4
  br label %fusion_6.in_bounds-after
}

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }

!nvvm.annotations = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191}

!0 = !{ptr @fusion_564, !"kernel", i32 1}
!1 = !{ptr @fusion_564, !"reqntidx", i32 512}
!2 = !{ptr @fusion_434, !"kernel", i32 1}
!3 = !{ptr @fusion_434, !"reqntidx", i32 1}
!4 = !{ptr @fusion_570, !"kernel", i32 1}
!5 = !{ptr @fusion_570, !"reqntidx", i32 512}
!6 = !{ptr @fusion_547, !"kernel", i32 1}
!7 = !{ptr @fusion_547, !"reqntidx", i32 512}
!8 = !{ptr @fusion_563, !"kernel", i32 1}
!9 = !{ptr @fusion_563, !"reqntidx", i32 512}
!10 = !{ptr @fusion_445, !"kernel", i32 1}
!11 = !{ptr @fusion_445, !"reqntidx", i32 1}
!12 = !{ptr @concatenate_267, !"kernel", i32 1}
!13 = !{ptr @concatenate_267, !"reqntidx", i32 1024}
!14 = !{ptr @fusion_310, !"kernel", i32 1}
!15 = !{ptr @fusion_310, !"reqntidx", i32 1024}
!16 = !{ptr @concatenate_236, !"kernel", i32 1}
!17 = !{ptr @concatenate_236, !"reqntidx", i32 1024}
!18 = !{ptr @concatenate_262, !"kernel", i32 1}
!19 = !{ptr @concatenate_262, !"reqntidx", i32 1024}
!20 = !{ptr @concatenate_237, !"kernel", i32 1}
!21 = !{ptr @concatenate_237, !"reqntidx", i32 1024}
!22 = !{ptr @concatenate_303, !"kernel", i32 1}
!23 = !{ptr @concatenate_303, !"reqntidx", i32 1024}
!24 = !{ptr @concatenate_263, !"kernel", i32 1}
!25 = !{ptr @concatenate_263, !"reqntidx", i32 1024}
!26 = !{ptr @concatenate_242, !"kernel", i32 1}
!27 = !{ptr @concatenate_242, !"reqntidx", i32 1024}
!28 = !{ptr @concatenate_260, !"kernel", i32 1}
!29 = !{ptr @concatenate_260, !"reqntidx", i32 1024}
!30 = !{ptr @concatenate_238, !"kernel", i32 1}
!31 = !{ptr @concatenate_238, !"reqntidx", i32 1024}
!32 = !{ptr @concatenate_298, !"kernel", i32 1}
!33 = !{ptr @concatenate_298, !"reqntidx", i32 1024}
!34 = !{ptr @concatenate_255, !"kernel", i32 1}
!35 = !{ptr @concatenate_255, !"reqntidx", i32 256}
!36 = !{ptr @concatenate_235, !"kernel", i32 1}
!37 = !{ptr @concatenate_235, !"reqntidx", i32 256}
!38 = !{ptr @concatenate_269, !"kernel", i32 1}
!39 = !{ptr @concatenate_269, !"reqntidx", i32 256}
!40 = !{ptr @fusion_408, !"kernel", i32 1}
!41 = !{ptr @fusion_408, !"reqntidx", i32 1024}
!42 = !{ptr @fusion_392, !"kernel", i32 1}
!43 = !{ptr @fusion_392, !"reqntidx", i32 1024}
!44 = !{ptr @fusion_376, !"kernel", i32 1}
!45 = !{ptr @fusion_376, !"reqntidx", i32 1024}
!46 = !{ptr @fusion_644, !"kernel", i32 1}
!47 = !{ptr @fusion_644, !"reqntidx", i32 1024}
!48 = !{ptr @fusion_304, !"kernel", i32 1}
!49 = !{ptr @fusion_304, !"reqntidx", i32 1024}
!50 = !{ptr @fusion_614, !"kernel", i32 1}
!51 = !{ptr @fusion_614, !"reqntidx", i32 1024}
!52 = !{ptr @fusion_286, !"kernel", i32 1}
!53 = !{ptr @fusion_286, !"reqntidx", i32 1024}
!54 = !{ptr @fusion_398, !"kernel", i32 1}
!55 = !{ptr @fusion_398, !"reqntidx", i32 1024}
!56 = !{ptr @fusion_280, !"kernel", i32 1}
!57 = !{ptr @fusion_280, !"reqntidx", i32 1024}
!58 = !{ptr @fusion_285, !"kernel", i32 1}
!59 = !{ptr @fusion_285, !"reqntidx", i32 128}
!60 = !{ptr @fusion_639, !"kernel", i32 1}
!61 = !{ptr @fusion_639, !"reqntidx", i32 1024}
!62 = !{ptr @fusion_208, !"kernel", i32 1}
!63 = !{ptr @fusion_208, !"reqntidx", i32 256}
!64 = !{ptr @fusion_268, !"kernel", i32 1}
!65 = !{ptr @fusion_268, !"reqntidx", i32 1024}
!66 = !{ptr @fusion_270, !"kernel", i32 1}
!67 = !{ptr @fusion_270, !"reqntidx", i32 1024}
!68 = !{ptr @fusion_596, !"kernel", i32 1}
!69 = !{ptr @fusion_596, !"reqntidx", i32 1024}
!70 = !{ptr @fusion_415, !"kernel", i32 1}
!71 = !{ptr @fusion_415, !"reqntidx", i32 128}
!72 = !{ptr @fusion_431, !"kernel", i32 1}
!73 = !{ptr @fusion_431, !"reqntidx", i32 128}
!74 = !{ptr @fusion_205, !"kernel", i32 1}
!75 = !{ptr @fusion_205, !"reqntidx", i32 1024}
!76 = !{ptr @concatenate_277, !"kernel", i32 1}
!77 = !{ptr @concatenate_277, !"reqntidx", i32 256}
!78 = !{ptr @concatenate_287, !"kernel", i32 1}
!79 = !{ptr @concatenate_287, !"reqntidx", i32 256}
!80 = !{ptr @fusion_175, !"kernel", i32 1}
!81 = !{ptr @fusion_175, !"reqntidx", i32 1024}
!82 = !{ptr @fusion_213, !"kernel", i32 1}
!83 = !{ptr @fusion_213, !"reqntidx", i32 1024}
!84 = !{ptr @fusion_202, !"kernel", i32 1}
!85 = !{ptr @fusion_202, !"reqntidx", i32 128}
!86 = !{ptr @concatenate_275, !"kernel", i32 1}
!87 = !{ptr @concatenate_275, !"reqntidx", i32 256}
!88 = !{ptr @fusion_128, !"kernel", i32 1}
!89 = !{ptr @fusion_128, !"reqntidx", i32 1024}
!90 = !{ptr @concatenate_270, !"kernel", i32 1}
!91 = !{ptr @concatenate_270, !"reqntidx", i32 256}
!92 = !{ptr @fusion_260, !"kernel", i32 1}
!93 = !{ptr @fusion_260, !"reqntidx", i32 1024}
!94 = !{ptr @concatenate_300, !"kernel", i32 1}
!95 = !{ptr @concatenate_300, !"reqntidx", i32 256}
!96 = !{ptr @fusion_364, !"kernel", i32 1}
!97 = !{ptr @fusion_364, !"reqntidx", i32 1024}
!98 = !{ptr @concatenate_297, !"kernel", i32 1}
!99 = !{ptr @concatenate_297, !"reqntidx", i32 256}
!100 = !{ptr @fusion_365, !"kernel", i32 1}
!101 = !{ptr @fusion_365, !"reqntidx", i32 256}
!102 = !{ptr @fusion_137, !"kernel", i32 1}
!103 = !{ptr @fusion_137, !"reqntidx", i32 1024}
!104 = !{ptr @fusion_86, !"kernel", i32 1}
!105 = !{ptr @fusion_86, !"reqntidx", i32 256}
!106 = !{ptr @fusion_112, !"kernel", i32 1}
!107 = !{ptr @fusion_112, !"reqntidx", i32 256}
!108 = !{ptr @fusion_114, !"kernel", i32 1}
!109 = !{ptr @fusion_114, !"reqntidx", i32 256}
!110 = !{ptr @fusion_110, !"kernel", i32 1}
!111 = !{ptr @fusion_110, !"reqntidx", i32 1024}
!112 = !{ptr @fusion_466, !"kernel", i32 1}
!113 = !{ptr @fusion_466, !"reqntidx", i32 1024}
!114 = !{ptr @fusion_453, !"kernel", i32 1}
!115 = !{ptr @fusion_453, !"reqntidx", i32 1024}
!116 = !{ptr @fusion_8, !"kernel", i32 1}
!117 = !{ptr @fusion_8, !"reqntidx", i32 1024}
!118 = !{ptr @fusion_9, !"kernel", i32 1}
!119 = !{ptr @fusion_9, !"reqntidx", i32 6}
!120 = !{ptr @fusion_4, !"kernel", i32 1}
!121 = !{ptr @fusion_4, !"reqntidx", i32 1024}
!122 = !{ptr @fusion_449, !"kernel", i32 1}
!123 = !{ptr @fusion_449, !"reqntidx", i32 256}
!124 = !{ptr @fusion_12, !"kernel", i32 1}
!125 = !{ptr @fusion_12, !"reqntidx", i32 1024}
!126 = !{ptr @reduce, !"kernel", i32 1}
!127 = !{ptr @reduce, !"reqntidx", i32 1024}
!128 = !{ptr @fusion_11, !"kernel", i32 1}
!129 = !{ptr @fusion_11, !"reqntidx", i32 90}
!130 = !{ptr @fusion_50, !"kernel", i32 1}
!131 = !{ptr @fusion_50, !"reqntidx", i32 1024}
!132 = !{ptr @fusion_60, !"kernel", i32 1}
!133 = !{ptr @fusion_60, !"reqntidx", i32 1024}
!134 = !{ptr @fusion_375, !"kernel", i32 1}
!135 = !{ptr @fusion_375, !"reqntidx", i32 256}
!136 = !{ptr @fusion_48, !"kernel", i32 1}
!137 = !{ptr @fusion_48, !"reqntidx", i32 256}
!138 = !{ptr @fusion_34, !"kernel", i32 1}
!139 = !{ptr @fusion_34, !"reqntidx", i32 1024}
!140 = !{ptr @fusion_670, !"kernel", i32 1}
!141 = !{ptr @fusion_670, !"reqntidx", i32 1024}
!142 = !{ptr @add_168, !"kernel", i32 1}
!143 = !{ptr @add_168, !"reqntidx", i32 256}
!144 = !{ptr @fusion_665, !"kernel", i32 1}
!145 = !{ptr @fusion_665, !"reqntidx", i32 1024}
!146 = !{ptr @fusion_41, !"kernel", i32 1}
!147 = !{ptr @fusion_41, !"reqntidx", i32 512}
!148 = !{ptr @fusion_29, !"kernel", i32 1}
!149 = !{ptr @fusion_29, !"reqntidx", i32 1024}
!150 = !{ptr @fusion_30, !"kernel", i32 1}
!151 = !{ptr @fusion_30, !"reqntidx", i32 256}
!152 = !{ptr @concatenate_271, !"kernel", i32 1}
!153 = !{ptr @concatenate_271, !"reqntidx", i32 256}
!154 = !{ptr @fusion_266, !"kernel", i32 1}
!155 = !{ptr @fusion_266, !"reqntidx", i32 1024}
!156 = !{ptr @fusion_248, !"kernel", i32 1}
!157 = !{ptr @fusion_248, !"reqntidx", i32 1024}
!158 = !{ptr @fusion_383, !"kernel", i32 1}
!159 = !{ptr @fusion_383, !"reqntidx", i32 1024}
!160 = !{ptr @concatenate_299, !"kernel", i32 1}
!161 = !{ptr @concatenate_299, !"reqntidx", i32 256}
!162 = !{ptr @fusion_109, !"kernel", i32 1}
!163 = !{ptr @fusion_109, !"reqntidx", i32 1024}
!164 = !{ptr @fusion_115, !"kernel", i32 1}
!165 = !{ptr @fusion_115, !"reqntidx", i32 1024}
!166 = !{ptr @fusion_116, !"kernel", i32 1}
!167 = !{ptr @fusion_116, !"reqntidx", i32 1024}
!168 = !{ptr @fusion_361, !"kernel", i32 1}
!169 = !{ptr @fusion_361, !"reqntidx", i32 1024}
!170 = !{ptr @fusion_545, !"kernel", i32 1}
!171 = !{ptr @fusion_545, !"reqntidx", i32 256}
!172 = !{ptr @fusion_3, !"kernel", i32 1}
!173 = !{ptr @fusion_3, !"reqntidx", i32 768}
!174 = !{ptr @fusion_28, !"kernel", i32 1}
!175 = !{ptr @fusion_28, !"reqntidx", i32 1024}
!176 = !{ptr @add_115, !"kernel", i32 1}
!177 = !{ptr @add_115, !"reqntidx", i32 128}
!178 = !{ptr @slice_507, !"kernel", i32 1}
!179 = !{ptr @slice_507, !"reqntidx", i32 256}
!180 = !{ptr @fusion_176, !"kernel", i32 1}
!181 = !{ptr @fusion_176, !"reqntidx", i32 256}
!182 = !{ptr @fusion_567, !"kernel", i32 1}
!183 = !{ptr @fusion_567, !"reqntidx", i32 1024}
!184 = !{ptr @fusion_569, !"kernel", i32 1}
!185 = !{ptr @fusion_569, !"reqntidx", i32 256}
!186 = !{ptr @concatenate_307, !"kernel", i32 1}
!187 = !{ptr @concatenate_307, !"reqntidx", i32 256}
!188 = !{ptr @fusion_5, !"kernel", i32 1}
!189 = !{ptr @fusion_5, !"reqntidx", i32 1024}
!190 = !{ptr @fusion_6, !"kernel", i32 1}
!191 = !{ptr @fusion_6, !"reqntidx", i32 256}
!192 = !{i32 0, i32 2}
!193 = !{i32 0, i32 512}
!194 = !{i32 0, i32 1}
!195 = distinct !{!195, !196}
!196 = !{!"llvm.loop.vectorize.enable", i1 false}
!197 = !{}
!198 = distinct !{!198, !196, !199}
!199 = !{!"llvm.loop.unroll.full"}
!200 = distinct !{!200, !196, !199}
!201 = distinct !{!201, !196}
!202 = distinct !{!202, !196, !199}
!203 = distinct !{!203, !196, !199}
!204 = !{i32 0, i32 4}
!205 = distinct !{!205, !196}
!206 = distinct !{!206, !196, !199}
!207 = distinct !{!207, !196, !199}
!208 = distinct !{!208, !196}
!209 = distinct !{!209, !196, !199}
!210 = distinct !{!210, !196, !199}
!211 = distinct !{!211, !196}
!212 = distinct !{!212, !196, !199}
!213 = distinct !{!213, !196, !199}
!214 = distinct !{!214, !196}
!215 = distinct !{!215, !196, !199}
!216 = distinct !{!216, !196, !199}
!217 = !{i32 0, i32 8}
!218 = distinct !{!218, !196}
!219 = distinct !{!219, !196, !199}
!220 = distinct !{!220, !196, !199}
!221 = distinct !{!221, !196}
!222 = distinct !{!222, !196, !199}
!223 = distinct !{!223, !196, !199}
!224 = distinct !{!224, !196}
!225 = distinct !{!225, !196, !199}
!226 = distinct !{!226, !196, !199}
!227 = distinct !{!227, !196}
!228 = distinct !{!228, !196, !199}
!229 = distinct !{!229, !196, !199}
!230 = distinct !{!230, !196}
!231 = distinct !{!231, !196, !199}
!232 = distinct !{!232, !196, !199}
!233 = distinct !{!233, !196}
!234 = distinct !{!234, !196, !199}
!235 = distinct !{!235, !196, !199}
!236 = distinct !{!236, !196}
!237 = distinct !{!237, !196, !199}
!238 = distinct !{!238, !196, !199}
!239 = distinct !{!239, !196}
!240 = distinct !{!240, !196, !199}
!241 = distinct !{!241, !196, !199}
!242 = distinct !{!242, !196}
!243 = distinct !{!243, !196, !199}
!244 = distinct !{!244, !196, !199}
!245 = distinct !{!245, !196}
!246 = distinct !{!246, !196, !199}
!247 = distinct !{!247, !196, !199}
!248 = distinct !{!248, !196}
!249 = distinct !{!249, !196, !199}
!250 = distinct !{!250, !196, !199}
!251 = distinct !{!251, !196}
!252 = distinct !{!252, !196, !199}
!253 = distinct !{!253, !196, !199}
!254 = distinct !{!254, !196}
!255 = distinct !{!255, !196, !199}
!256 = distinct !{!256, !196, !199}
!257 = distinct !{!257, !196}
!258 = distinct !{!258, !196, !199}
!259 = distinct !{!259, !196, !199}
!260 = distinct !{!260, !196}
!261 = distinct !{!261, !196, !199}
!262 = distinct !{!262, !196, !199}
!263 = distinct !{!263, !196}
!264 = distinct !{!264, !196, !199}
!265 = distinct !{!265, !196, !199}
!266 = !{i32 0, i32 10}
!267 = !{i32 0, i32 1024}
!268 = !{i32 0, i32 256}
!269 = distinct !{!269, !196, !199}
!270 = distinct !{!270, !196}
!271 = !{i32 0, i32 28}
!272 = !{i32 0, i32 40}
!273 = !{i32 0, i32 44}
!274 = !{i32 0, i32 48}
!275 = !{i32 0, i32 56}
!276 = !{i32 0, i32 76}
!277 = !{i32 0, i32 88}
!278 = !{i32 0, i32 90}
!279 = !{i32 0, i32 98}
!280 = !{i32 0, i32 112}
!281 = !{i32 0, i32 114}
!282 = !{i32 0, i32 143}
!283 = !{i32 0, i32 128}
!284 = distinct !{!284, !196, !199}
!285 = distinct !{!285, !196}
!286 = distinct !{!286, !196, !199}
!287 = distinct !{!287, !196}
!288 = distinct !{!288, !196, !199}
!289 = distinct !{!289, !196}
!290 = distinct !{!290, !196, !199}
!291 = distinct !{!291, !196}
!292 = distinct !{!292, !196, !199}
!293 = distinct !{!293, !196}
!294 = !{i32 0, i32 5}
!295 = distinct !{!295, !196, !199}
!296 = distinct !{!296, !196}
!297 = distinct !{!297, !196, !199}
!298 = distinct !{!298, !196}
!299 = distinct !{!299, !196, !199}
!300 = distinct !{!300, !196}
!301 = distinct !{!301, !196, !199}
!302 = distinct !{!302, !196}
!303 = distinct !{!303, !196, !199}
!304 = distinct !{!304, !196}
!305 = distinct !{!305, !196, !199}
!306 = distinct !{!306, !196}
!307 = distinct !{!307, !196, !199}
!308 = distinct !{!308, !196}
!309 = !{i32 0, i32 16}
!310 = distinct !{!310, !196, !199}
!311 = distinct !{!311, !196}
!312 = distinct !{!312, !196, !199}
!313 = distinct !{!313, !196}
!314 = distinct !{!314, !196, !199}
!315 = distinct !{!315, !196}
!316 = distinct !{!316, !196, !199}
!317 = distinct !{!317, !196}
!318 = distinct !{!318, !196, !199}
!319 = distinct !{!319, !196}
!320 = distinct !{!320, !196, !199}
!321 = distinct !{!321, !196}
!322 = distinct !{!322, !196, !199}
!323 = distinct !{!323, !196}
!324 = !{i32 0, i32 3}
!325 = distinct !{!325, !196, !199}
!326 = distinct !{!326, !196}
!327 = distinct !{!327, !196, !199}
!328 = distinct !{!328, !196}
!329 = distinct !{!329, !196, !199}
!330 = distinct !{!330, !196}
!331 = distinct !{!331, !196, !199}
!332 = distinct !{!332, !196}
!333 = !{i32 0, i32 1792}
!334 = !{i32 0, i32 2432}
!335 = distinct !{!335, !196, !199}
!336 = distinct !{!336, !196}
!337 = !{i32 0, i32 2560}
!338 = distinct !{!338, !196, !199}
!339 = distinct !{!339, !196}
!340 = !{i32 0, i32 2816}
!341 = !{i32 0, i32 2880}
!342 = !{i32 0, i32 3136}
!343 = distinct !{!343, !196, !199}
!344 = distinct !{!344, !196}
!345 = !{i32 0, i32 1536}
!346 = !{i32 0, i32 64}
!347 = !{i32 0, i32 34816}
!348 = distinct !{!348, !196, !199}
!349 = distinct !{!349, !196}
!350 = !{i32 0, i32 6}
!351 = !{i32 0, i32 9}
!352 = !{i32 0, i32 120}
!353 = !{i32 0, i32 192}
!354 = distinct !{!354, !196, !199}
!355 = distinct !{!355, !196}
!356 = distinct !{!356, !196, !199}
!357 = distinct !{!357, !196}
!358 = distinct !{!358, !196, !199}
!359 = distinct !{!359, !196}
!360 = distinct !{!360, !196, !199}
!361 = distinct !{!361, !196}
!362 = distinct !{!362, !196, !199}
!363 = distinct !{!363, !196}
!364 = distinct !{!364, !196, !199}
!365 = distinct !{!365, !196}
!366 = distinct !{!366, !196, !199}
!367 = distinct !{!367, !196}
!368 = distinct !{!368, !196, !199}
!369 = distinct !{!369, !196}
!370 = distinct !{!370, !196, !199}
!371 = distinct !{!371, !196}
!372 = distinct !{!372, !196, !199}
!373 = distinct !{!373, !196}
!374 = distinct !{!374, !196, !199}
!375 = distinct !{!375, !196}
!376 = !{i32 0, i32 740}
!377 = !{i32 0, i32 3584}
!378 = !{i32 0, i32 32}
!379 = !{i32 0, i32 3648}
!380 = !{i32 0, i32 4192}
!381 = !{i32 0, i32 768}
!382 = !{i32 0, i32 864}
!383 = distinct !{!383, !196}
!384 = !{i32 0, i32 11840}
!385 = !{i32 0, i32 7744}
!386 = !{i32 0, i32 12992}
!387 = !{i32 0, i32 12}
!388 = !{i32 0, i32 132}
